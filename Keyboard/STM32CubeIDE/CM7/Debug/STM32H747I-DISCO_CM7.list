
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025a9c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000392c  08025d40  08025d40  00026d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000036a4  0802966c  0802966c  0002a66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000204  0802cd10  0802cd10  0002dd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0042a2c4  90000000  90000000  00038000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 000000b8  9042a2c4  9042a2c4  004622c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802cf14  0802cf14  0046237c  2**0
                  CONTENTS
  8 .ARM          00000008  0802cf14  0802cf14  0002df14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802cf1c  0802cf1c  0046237c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000020  0802cf1c  0802cf1c  0002df1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802cf3c  0802cf3c  0002df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000016c  24000000  0802cf44  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000180  0802d0b0  0002e180  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c80  08031bb0  00032c80  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009780  080366b0  00037780  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009880  080367b0  00037880  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001ccd4  24009980  080368b0  00037980  2**2
                  ALLOC
 18 ._user_heap_stack 00002004  24026654  080368b0  00038654  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  0046237c  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  00463000  2**2
                  ALLOC
 21 .debug_info   000ec0c7  00000000  00000000  004623aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 000183b6  00000000  00000000  0054e471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000040e8  00000000  00000000  00566828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00004a1d  00000000  00000000  0056a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00054707  00000000  00000000  0056f32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   00071b88  00000000  00000000  005c3a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001ea836  00000000  00000000  006355bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  0081fdf2  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000b6a4  00000000  00000000  0081feb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 0002d258  00000000  00000000  0082b558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 00000068  00000000  00000000  008587b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009980 	.word	0x24009980
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025d24 	.word	0x08025d24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009984 	.word	0x24009984
 80002dc:	08025d24 	.word	0x08025d24

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b988 	b.w	8000a30 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	468e      	mov	lr, r1
 8000740:	4604      	mov	r4, r0
 8000742:	4688      	mov	r8, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d14a      	bne.n	80007de <__udivmoddi4+0xa6>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d962      	bls.n	8000814 <__udivmoddi4+0xdc>
 800074e:	fab2 f682 	clz	r6, r2
 8000752:	b14e      	cbz	r6, 8000768 <__udivmoddi4+0x30>
 8000754:	f1c6 0320 	rsb	r3, r6, #32
 8000758:	fa01 f806 	lsl.w	r8, r1, r6
 800075c:	fa20 f303 	lsr.w	r3, r0, r3
 8000760:	40b7      	lsls	r7, r6
 8000762:	ea43 0808 	orr.w	r8, r3, r8
 8000766:	40b4      	lsls	r4, r6
 8000768:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800076c:	fa1f fc87 	uxth.w	ip, r7
 8000770:	fbb8 f1fe 	udiv	r1, r8, lr
 8000774:	0c23      	lsrs	r3, r4, #16
 8000776:	fb0e 8811 	mls	r8, lr, r1, r8
 800077a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800077e:	fb01 f20c 	mul.w	r2, r1, ip
 8000782:	429a      	cmp	r2, r3
 8000784:	d909      	bls.n	800079a <__udivmoddi4+0x62>
 8000786:	18fb      	adds	r3, r7, r3
 8000788:	f101 30ff 	add.w	r0, r1, #4294967295
 800078c:	f080 80ea 	bcs.w	8000964 <__udivmoddi4+0x22c>
 8000790:	429a      	cmp	r2, r3
 8000792:	f240 80e7 	bls.w	8000964 <__udivmoddi4+0x22c>
 8000796:	3902      	subs	r1, #2
 8000798:	443b      	add	r3, r7
 800079a:	1a9a      	subs	r2, r3, r2
 800079c:	b2a3      	uxth	r3, r4
 800079e:	fbb2 f0fe 	udiv	r0, r2, lr
 80007a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ae:	459c      	cmp	ip, r3
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x8e>
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007b8:	f080 80d6 	bcs.w	8000968 <__udivmoddi4+0x230>
 80007bc:	459c      	cmp	ip, r3
 80007be:	f240 80d3 	bls.w	8000968 <__udivmoddi4+0x230>
 80007c2:	443b      	add	r3, r7
 80007c4:	3802      	subs	r0, #2
 80007c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ca:	eba3 030c 	sub.w	r3, r3, ip
 80007ce:	2100      	movs	r1, #0
 80007d0:	b11d      	cbz	r5, 80007da <__udivmoddi4+0xa2>
 80007d2:	40f3      	lsrs	r3, r6
 80007d4:	2200      	movs	r2, #0
 80007d6:	e9c5 3200 	strd	r3, r2, [r5]
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	428b      	cmp	r3, r1
 80007e0:	d905      	bls.n	80007ee <__udivmoddi4+0xb6>
 80007e2:	b10d      	cbz	r5, 80007e8 <__udivmoddi4+0xb0>
 80007e4:	e9c5 0100 	strd	r0, r1, [r5]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4608      	mov	r0, r1
 80007ec:	e7f5      	b.n	80007da <__udivmoddi4+0xa2>
 80007ee:	fab3 f183 	clz	r1, r3
 80007f2:	2900      	cmp	r1, #0
 80007f4:	d146      	bne.n	8000884 <__udivmoddi4+0x14c>
 80007f6:	4573      	cmp	r3, lr
 80007f8:	d302      	bcc.n	8000800 <__udivmoddi4+0xc8>
 80007fa:	4282      	cmp	r2, r0
 80007fc:	f200 8105 	bhi.w	8000a0a <__udivmoddi4+0x2d2>
 8000800:	1a84      	subs	r4, r0, r2
 8000802:	eb6e 0203 	sbc.w	r2, lr, r3
 8000806:	2001      	movs	r0, #1
 8000808:	4690      	mov	r8, r2
 800080a:	2d00      	cmp	r5, #0
 800080c:	d0e5      	beq.n	80007da <__udivmoddi4+0xa2>
 800080e:	e9c5 4800 	strd	r4, r8, [r5]
 8000812:	e7e2      	b.n	80007da <__udivmoddi4+0xa2>
 8000814:	2a00      	cmp	r2, #0
 8000816:	f000 8090 	beq.w	800093a <__udivmoddi4+0x202>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	2e00      	cmp	r6, #0
 8000820:	f040 80a4 	bne.w	800096c <__udivmoddi4+0x234>
 8000824:	1a8a      	subs	r2, r1, r2
 8000826:	0c03      	lsrs	r3, r0, #16
 8000828:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800082c:	b280      	uxth	r0, r0
 800082e:	b2bc      	uxth	r4, r7
 8000830:	2101      	movs	r1, #1
 8000832:	fbb2 fcfe 	udiv	ip, r2, lr
 8000836:	fb0e 221c 	mls	r2, lr, ip, r2
 800083a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800083e:	fb04 f20c 	mul.w	r2, r4, ip
 8000842:	429a      	cmp	r2, r3
 8000844:	d907      	bls.n	8000856 <__udivmoddi4+0x11e>
 8000846:	18fb      	adds	r3, r7, r3
 8000848:	f10c 38ff 	add.w	r8, ip, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x11c>
 800084e:	429a      	cmp	r2, r3
 8000850:	f200 80e0 	bhi.w	8000a14 <__udivmoddi4+0x2dc>
 8000854:	46c4      	mov	ip, r8
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	fbb3 f2fe 	udiv	r2, r3, lr
 800085c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000860:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000864:	fb02 f404 	mul.w	r4, r2, r4
 8000868:	429c      	cmp	r4, r3
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x144>
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x142>
 8000874:	429c      	cmp	r4, r3
 8000876:	f200 80ca 	bhi.w	8000a0e <__udivmoddi4+0x2d6>
 800087a:	4602      	mov	r2, r0
 800087c:	1b1b      	subs	r3, r3, r4
 800087e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000882:	e7a5      	b.n	80007d0 <__udivmoddi4+0x98>
 8000884:	f1c1 0620 	rsb	r6, r1, #32
 8000888:	408b      	lsls	r3, r1
 800088a:	fa22 f706 	lsr.w	r7, r2, r6
 800088e:	431f      	orrs	r7, r3
 8000890:	fa0e f401 	lsl.w	r4, lr, r1
 8000894:	fa20 f306 	lsr.w	r3, r0, r6
 8000898:	fa2e fe06 	lsr.w	lr, lr, r6
 800089c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008a0:	4323      	orrs	r3, r4
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	fa1f fc87 	uxth.w	ip, r7
 80008aa:	fbbe f0f9 	udiv	r0, lr, r9
 80008ae:	0c1c      	lsrs	r4, r3, #16
 80008b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008bc:	45a6      	cmp	lr, r4
 80008be:	fa02 f201 	lsl.w	r2, r2, r1
 80008c2:	d909      	bls.n	80008d8 <__udivmoddi4+0x1a0>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ca:	f080 809c 	bcs.w	8000a06 <__udivmoddi4+0x2ce>
 80008ce:	45a6      	cmp	lr, r4
 80008d0:	f240 8099 	bls.w	8000a06 <__udivmoddi4+0x2ce>
 80008d4:	3802      	subs	r0, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	eba4 040e 	sub.w	r4, r4, lr
 80008dc:	fa1f fe83 	uxth.w	lr, r3
 80008e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008e4:	fb09 4413 	mls	r4, r9, r3, r4
 80008e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f0:	45a4      	cmp	ip, r4
 80008f2:	d908      	bls.n	8000906 <__udivmoddi4+0x1ce>
 80008f4:	193c      	adds	r4, r7, r4
 80008f6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008fa:	f080 8082 	bcs.w	8000a02 <__udivmoddi4+0x2ca>
 80008fe:	45a4      	cmp	ip, r4
 8000900:	d97f      	bls.n	8000a02 <__udivmoddi4+0x2ca>
 8000902:	3b02      	subs	r3, #2
 8000904:	443c      	add	r4, r7
 8000906:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800090a:	eba4 040c 	sub.w	r4, r4, ip
 800090e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000912:	4564      	cmp	r4, ip
 8000914:	4673      	mov	r3, lr
 8000916:	46e1      	mov	r9, ip
 8000918:	d362      	bcc.n	80009e0 <__udivmoddi4+0x2a8>
 800091a:	d05f      	beq.n	80009dc <__udivmoddi4+0x2a4>
 800091c:	b15d      	cbz	r5, 8000936 <__udivmoddi4+0x1fe>
 800091e:	ebb8 0203 	subs.w	r2, r8, r3
 8000922:	eb64 0409 	sbc.w	r4, r4, r9
 8000926:	fa04 f606 	lsl.w	r6, r4, r6
 800092a:	fa22 f301 	lsr.w	r3, r2, r1
 800092e:	431e      	orrs	r6, r3
 8000930:	40cc      	lsrs	r4, r1
 8000932:	e9c5 6400 	strd	r6, r4, [r5]
 8000936:	2100      	movs	r1, #0
 8000938:	e74f      	b.n	80007da <__udivmoddi4+0xa2>
 800093a:	fbb1 fcf2 	udiv	ip, r1, r2
 800093e:	0c01      	lsrs	r1, r0, #16
 8000940:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000944:	b280      	uxth	r0, r0
 8000946:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800094a:	463b      	mov	r3, r7
 800094c:	4638      	mov	r0, r7
 800094e:	463c      	mov	r4, r7
 8000950:	46b8      	mov	r8, r7
 8000952:	46be      	mov	lr, r7
 8000954:	2620      	movs	r6, #32
 8000956:	fbb1 f1f7 	udiv	r1, r1, r7
 800095a:	eba2 0208 	sub.w	r2, r2, r8
 800095e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000962:	e766      	b.n	8000832 <__udivmoddi4+0xfa>
 8000964:	4601      	mov	r1, r0
 8000966:	e718      	b.n	800079a <__udivmoddi4+0x62>
 8000968:	4610      	mov	r0, r2
 800096a:	e72c      	b.n	80007c6 <__udivmoddi4+0x8e>
 800096c:	f1c6 0220 	rsb	r2, r6, #32
 8000970:	fa2e f302 	lsr.w	r3, lr, r2
 8000974:	40b7      	lsls	r7, r6
 8000976:	40b1      	lsls	r1, r6
 8000978:	fa20 f202 	lsr.w	r2, r0, r2
 800097c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000980:	430a      	orrs	r2, r1
 8000982:	fbb3 f8fe 	udiv	r8, r3, lr
 8000986:	b2bc      	uxth	r4, r7
 8000988:	fb0e 3318 	mls	r3, lr, r8, r3
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000992:	fb08 f904 	mul.w	r9, r8, r4
 8000996:	40b0      	lsls	r0, r6
 8000998:	4589      	cmp	r9, r1
 800099a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800099e:	b280      	uxth	r0, r0
 80009a0:	d93e      	bls.n	8000a20 <__udivmoddi4+0x2e8>
 80009a2:	1879      	adds	r1, r7, r1
 80009a4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009a8:	d201      	bcs.n	80009ae <__udivmoddi4+0x276>
 80009aa:	4589      	cmp	r9, r1
 80009ac:	d81f      	bhi.n	80009ee <__udivmoddi4+0x2b6>
 80009ae:	eba1 0109 	sub.w	r1, r1, r9
 80009b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009b6:	fb09 f804 	mul.w	r8, r9, r4
 80009ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80009be:	b292      	uxth	r2, r2
 80009c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009c4:	4542      	cmp	r2, r8
 80009c6:	d229      	bcs.n	8000a1c <__udivmoddi4+0x2e4>
 80009c8:	18ba      	adds	r2, r7, r2
 80009ca:	f109 31ff 	add.w	r1, r9, #4294967295
 80009ce:	d2c4      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d0:	4542      	cmp	r2, r8
 80009d2:	d2c2      	bcs.n	800095a <__udivmoddi4+0x222>
 80009d4:	f1a9 0102 	sub.w	r1, r9, #2
 80009d8:	443a      	add	r2, r7
 80009da:	e7be      	b.n	800095a <__udivmoddi4+0x222>
 80009dc:	45f0      	cmp	r8, lr
 80009de:	d29d      	bcs.n	800091c <__udivmoddi4+0x1e4>
 80009e0:	ebbe 0302 	subs.w	r3, lr, r2
 80009e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009e8:	3801      	subs	r0, #1
 80009ea:	46e1      	mov	r9, ip
 80009ec:	e796      	b.n	800091c <__udivmoddi4+0x1e4>
 80009ee:	eba7 0909 	sub.w	r9, r7, r9
 80009f2:	4449      	add	r1, r9
 80009f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fc:	fb09 f804 	mul.w	r8, r9, r4
 8000a00:	e7db      	b.n	80009ba <__udivmoddi4+0x282>
 8000a02:	4673      	mov	r3, lr
 8000a04:	e77f      	b.n	8000906 <__udivmoddi4+0x1ce>
 8000a06:	4650      	mov	r0, sl
 8000a08:	e766      	b.n	80008d8 <__udivmoddi4+0x1a0>
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	e6fd      	b.n	800080a <__udivmoddi4+0xd2>
 8000a0e:	443b      	add	r3, r7
 8000a10:	3a02      	subs	r2, #2
 8000a12:	e733      	b.n	800087c <__udivmoddi4+0x144>
 8000a14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a18:	443b      	add	r3, r7
 8000a1a:	e71c      	b.n	8000856 <__udivmoddi4+0x11e>
 8000a1c:	4649      	mov	r1, r9
 8000a1e:	e79c      	b.n	800095a <__udivmoddi4+0x222>
 8000a20:	eba1 0109 	sub.w	r1, r1, r9
 8000a24:	46c4      	mov	ip, r8
 8000a26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2a:	fb09 f804 	mul.w	r8, r9, r4
 8000a2e:	e7c4      	b.n	80009ba <__udivmoddi4+0x282>

08000a30 <__aeabi_idiv0>:
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000a34:	4901      	ldr	r1, [pc, #4]	@ (8000a3c <vApplicationIdleHook+0x8>)
 8000a36:	2000      	movs	r0, #0
 8000a38:	f00d bf48 	b.w	800e8cc <vTaskSetApplicationTaskTag>
 8000a3c:	08002475 	.word	0x08002475

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a44:	224c      	movs	r2, #76	@ 0x4c
 8000a46:	2100      	movs	r1, #0
 8000a48:	a809      	add	r0, sp, #36	@ 0x24
 8000a4a:	f024 fa2f 	bl	8024eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4e:	2220      	movs	r2, #32
 8000a50:	2100      	movs	r1, #0
 8000a52:	a801      	add	r0, sp, #4
 8000a54:	f024 fa2a 	bl	8024eac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a58:	2004      	movs	r0, #4
 8000a5a:	f009 fbff 	bl	800a25c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <SystemClock_Config+0xbc>)
 8000a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a66:	f022 0201 	bic.w	r2, r2, #1
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	4b22      	ldr	r3, [pc, #136]	@ (8000b00 <SystemClock_Config+0xc0>)
 8000a76:	699a      	ldr	r2, [r3, #24]
 8000a78:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000a7c:	619a      	str	r2, [r3, #24]
 8000a7e:	699a      	ldr	r2, [r3, #24]
 8000a80:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	0491      	lsls	r1, r2, #18
 8000a8c:	d5fc      	bpl.n	8000a88 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a92:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a96:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a9a:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9c:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9e:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa0:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000aaa:	23a0      	movs	r3, #160	@ 0xa0
 8000aac:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab0:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab2:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ab6:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aba:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000abe:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f009 fec6 	bl	800a850 <HAL_RCC_OscConfig>
 8000ac4:	b108      	cbz	r0, 8000aca <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000acc:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad6:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000adc:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae4:	f00a fa4c 	bl	800af80 <HAL_RCC_ClockConfig>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	b108      	cbz	r0, 8000af0 <SystemClock_Config+0xb0>
 8000aec:	b672      	cpsid	i
  while (1)
 8000aee:	e7fe      	b.n	8000aee <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000af0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000af4:	f00a f954 	bl	800ada0 <HAL_RCC_MCOConfig>
}
 8000af8:	b01d      	add	sp, #116	@ 0x74
 8000afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afc:	58000400 	.word	0x58000400
 8000b00:	58024800 	.word	0x58024800

08000b04 <main>:
{
 8000b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b08:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b0a:	2210      	movs	r2, #16
 8000b0c:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b0e:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b10:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b12:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b14:	f024 f9ca 	bl	8024eac <memset>
  HAL_MPU_Disable();
 8000b18:	f006 fda8 	bl	800766c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b1c:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000b20:	4bbe      	ldr	r3, [pc, #760]	@ (8000e1c <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b22:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b24:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b28:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b2a:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b2e:	f006 fdbb 	bl	80076a8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b32:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b34:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b36:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b3a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b3e:	f006 fdb3 	bl	80076a8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b42:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b44:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b46:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b4a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b4e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000b52:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000b54:	2318      	movs	r3, #24
 8000b56:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b5a:	f006 fda5 	bl	80076a8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b5e:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b60:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b62:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b66:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000b6a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b6c:	2312      	movs	r3, #18
 8000b6e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b78:	f006 fd96 	bl	80076a8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b80:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b82:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b86:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b88:	2311      	movs	r3, #17
 8000b8a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8e:	f006 fd8b 	bl	80076a8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b92:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b94:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b96:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b9a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000b9e:	4ba0      	ldr	r3, [pc, #640]	@ (8000e20 <main+0x31c>)
 8000ba0:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000ba2:	230e      	movs	r3, #14
 8000ba4:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ba8:	f006 fd7e 	bl	80076a8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bac:	4628      	mov	r0, r5
 8000bae:	f006 fd6b 	bl	8007688 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bb2:	4b9c      	ldr	r3, [pc, #624]	@ (8000e24 <main+0x320>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000bba:	d111      	bne.n	8000be0 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bc0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000bc4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bcc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bd0:	695a      	ldr	r2, [r3, #20]
 8000bd2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000bd6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bdc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000be0:	4a90      	ldr	r2, [pc, #576]	@ (8000e24 <main+0x320>)
 8000be2:	6953      	ldr	r3, [r2, #20]
 8000be4:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000be8:	d123      	bne.n	8000c32 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bee:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bf2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bf6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bfa:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bfe:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c02:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c04:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c08:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c0a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c0e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c10:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000c14:	d2f9      	bcs.n	8000c0a <main+0x106>
    } while(sets-- != 0U);
 8000c16:	3b20      	subs	r3, #32
 8000c18:	f113 0f20 	cmn.w	r3, #32
 8000c1c:	d1f2      	bne.n	8000c04 <main+0x100>
 8000c1e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c22:	6953      	ldr	r3, [r2, #20]
 8000c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c2e:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000c32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c36:	4d7c      	ldr	r5, [pc, #496]	@ (8000e28 <main+0x324>)
 8000c38:	682c      	ldr	r4, [r5, #0]
 8000c3a:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000c3e:	f000 8313 	beq.w	8001268 <main+0x764>
 8000c42:	3b01      	subs	r3, #1
 8000c44:	d2f8      	bcs.n	8000c38 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c46:	b672      	cpsid	i
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <main+0x144>
 8000c4a:	b672      	cpsid	i
 8000c4c:	e7fe      	b.n	8000c4c <main+0x148>
  hqspi.Instance = QUADSPI;
 8000c4e:	4877      	ldr	r0, [pc, #476]	@ (8000e2c <main+0x328>)
 8000c50:	4a77      	ldr	r2, [pc, #476]	@ (8000e30 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c52:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c54:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000c56:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c5a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c5e:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c62:	f009 fc17 	bl	800a494 <HAL_QSPI_Init>
 8000c66:	b108      	cbz	r0, 8000c6c <main+0x168>
 8000c68:	b672      	cpsid	i
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c6c:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c70:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000c72:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c76:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c7a:	f005 ffd7 	bl	8006c2c <BSP_QSPI_Init>
 8000c7e:	b108      	cbz	r0, 8000c84 <main+0x180>
 8000c80:	b672      	cpsid	i
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c84:	f005 ff7e 	bl	8006b84 <BSP_QSPI_EnableMemoryMappedMode>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b108      	cbz	r0, 8000c90 <main+0x18c>
 8000c8c:	b672      	cpsid	i
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000c90:	4868      	ldr	r0, [pc, #416]	@ (8000e34 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c92:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c96:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000e40 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000c9a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c9e:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ca2:	f006 fd8e 	bl	80077c2 <HAL_DMA2D_Init>
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	b108      	cbz	r0, 8000cae <main+0x1aa>
 8000caa:	b672      	cpsid	i
  while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	4861      	ldr	r0, [pc, #388]	@ (8000e38 <main+0x334>)
 8000cb4:	f007 fc68 	bl	8008588 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000cb8:	2014      	movs	r0, #20
 8000cba:	f006 fc5b 	bl	8007574 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	462a      	mov	r2, r5
 8000cc2:	485d      	ldr	r0, [pc, #372]	@ (8000e38 <main+0x334>)
 8000cc4:	f007 fc60 	bl	8008588 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f006 fc53 	bl	8007574 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000cce:	2224      	movs	r2, #36	@ 0x24
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	a817      	add	r0, sp, #92	@ 0x5c
 8000cd4:	f024 f8ea 	bl	8024eac <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000cd8:	2218      	movs	r2, #24
 8000cda:	4621      	mov	r1, r4
 8000cdc:	a811      	add	r0, sp, #68	@ 0x44
 8000cde:	f024 f8e5 	bl	8024eac <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000ce2:	2234      	movs	r2, #52	@ 0x34
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	a82d      	add	r0, sp, #180	@ 0xb4
 8000ce8:	f024 f8e0 	bl	8024eac <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000cec:	4621      	mov	r1, r4
 8000cee:	222c      	movs	r2, #44	@ 0x2c
 8000cf0:	a820      	add	r0, sp, #128	@ 0x80
 8000cf2:	f024 f8db 	bl	8024eac <memset>
  hdsi.Instance = DSI;
 8000cf6:	4f51      	ldr	r7, [pc, #324]	@ (8000e3c <main+0x338>)
 8000cf8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cfc:	a90e      	add	r1, sp, #56	@ 0x38
 8000cfe:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000d00:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d02:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 8000d06:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000d08:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000d0c:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d10:	f006 fea4 	bl	8007a5c <HAL_DSI_Init>
 8000d14:	b108      	cbz	r0, 8000d1a <main+0x216>
 8000d16:	b672      	cpsid	i
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d1a:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d1e:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d22:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d26:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000d2a:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d2c:	a917      	add	r1, sp, #92	@ 0x5c
 8000d2e:	4638      	mov	r0, r7
 8000d30:	f007 f900 	bl	8007f34 <HAL_DSI_ConfigHostTimeouts>
 8000d34:	b108      	cbz	r0, 8000d3a <main+0x236>
 8000d36:	b672      	cpsid	i
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d3a:	2321      	movs	r3, #33	@ 0x21
 8000d3c:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d3e:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d40:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d42:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d46:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000d48:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d4c:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d4e:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d52:	f007 f8b2 	bl	8007eba <HAL_DSI_ConfigPhyTimer>
 8000d56:	b108      	cbz	r0, 8000d5c <main+0x258>
 8000d58:	b672      	cpsid	i
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	4837      	ldr	r0, [pc, #220]	@ (8000e3c <main+0x338>)
 8000d60:	f007 f89a 	bl	8007e98 <HAL_DSI_ConfigFlowControl>
 8000d64:	b108      	cbz	r0, 8000d6a <main+0x266>
 8000d66:	b672      	cpsid	i
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d6a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d6e:	4833      	ldr	r0, [pc, #204]	@ (8000e3c <main+0x338>)
 8000d70:	f007 fa69 	bl	8008246 <HAL_DSI_SetLowPowerRXFilter>
 8000d74:	4601      	mov	r1, r0
 8000d76:	b108      	cbz	r0, 8000d7c <main+0x278>
 8000d78:	b672      	cpsid	i
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d7c:	482f      	ldr	r0, [pc, #188]	@ (8000e3c <main+0x338>)
 8000d7e:	f006 fe0a 	bl	8007996 <HAL_DSI_ConfigErrorMonitor>
 8000d82:	b108      	cbz	r0, 8000d88 <main+0x284>
 8000d84:	b672      	cpsid	i
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8c:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d90:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d94:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d9c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000da0:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000da4:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000da8:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000dac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000db0:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000db4:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000db8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dbc:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc4:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000dc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000dcc:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000dce:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000dd6:	4819      	ldr	r0, [pc, #100]	@ (8000e3c <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000dd8:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ddc:	f007 f828 	bl	8007e30 <HAL_DSI_ConfigCommand>
 8000de0:	b108      	cbz	r0, 8000de6 <main+0x2e2>
 8000de2:	b672      	cpsid	i
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000de6:	2305      	movs	r3, #5
 8000de8:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000dec:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000dee:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000df0:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000df2:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000df4:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000df8:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dfa:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000dfe:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000e00:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e04:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000e08:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e0c:	480b      	ldr	r0, [pc, #44]	@ (8000e3c <main+0x338>)
 8000e0e:	f006 ff9d 	bl	8007d4c <HAL_DSI_ConfigAdaptedCommandMode>
 8000e12:	4601      	mov	r1, r0
 8000e14:	b1b0      	cbz	r0, 8000e44 <main+0x340>
 8000e16:	b672      	cpsid	i
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <main+0x314>
 8000e1a:	bf00      	nop
 8000e1c:	0300001b 	.word	0x0300001b
 8000e20:	10040000 	.word	0x10040000
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	24009a9c 	.word	0x24009a9c
 8000e30:	52005000 	.word	0x52005000
 8000e34:	24009cdc 	.word	0x24009cdc
 8000e38:	58021800 	.word	0x58021800
 8000e3c:	24009cc0 	.word	0x24009cc0
 8000e40:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e44:	4871      	ldr	r0, [pc, #452]	@ (800100c <main+0x508>)
 8000e46:	f006 ff70 	bl	8007d2a <HAL_DSI_SetGenericVCID>
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	b108      	cbz	r0, 8000e52 <main+0x34e>
 8000e4e:	b672      	cpsid	i
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e52:	2234      	movs	r2, #52	@ 0x34
 8000e54:	4601      	mov	r1, r0
 8000e56:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000e58:	4d6d      	ldr	r5, [pc, #436]	@ (8001010 <main+0x50c>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e5a:	f024 f827 	bl	8024eac <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e5e:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 8001058 <main+0x554>
 8000e62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000e66:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000e6a:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e6e:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000e70:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000e72:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e76:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000e7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e7e:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e82:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000e86:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e8a:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000e8e:	f240 1893 	movw	r8, #403	@ 0x193
 8000e92:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000e96:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000e9a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e9e:	f008 fed3 	bl	8009c48 <HAL_LTDC_Init>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	b108      	cbz	r0, 8000eaa <main+0x3a6>
 8000ea6:	b672      	cpsid	i
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000eaa:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000eac:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000eae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000eb2:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000eb6:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000eba:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000ebc:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000ec0:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000eca:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000ece:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ed2:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000ed4:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ed8:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000eda:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ede:	f008 ff68 	bl	8009db2 <HAL_LTDC_ConfigLayer>
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	b108      	cbz	r0, 8000eea <main+0x3e6>
 8000ee6:	b672      	cpsid	i
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000eea:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000eec:	4847      	ldr	r0, [pc, #284]	@ (800100c <main+0x508>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000eee:	6993      	ldr	r3, [r2, #24]
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000ef6:	f007 f883 	bl	8008000 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000efa:	4946      	ldr	r1, [pc, #280]	@ (8001014 <main+0x510>)
  IOCtx.GetTick     = BSP_GetTick;
 8000efc:	4b46      	ldr	r3, [pc, #280]	@ (8001018 <main+0x514>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000efe:	4847      	ldr	r0, [pc, #284]	@ (800101c <main+0x518>)
  IOCtx.GetTick     = BSP_GetTick;
 8000f00:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000f02:	4b47      	ldr	r3, [pc, #284]	@ (8001020 <main+0x51c>)
  IOCtx.Address     = 0;
 8000f04:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000f06:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000f08:	4b46      	ldr	r3, [pc, #280]	@ (8001024 <main+0x520>)
 8000f0a:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000f0c:	f005 fc30 	bl	8006770 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000f10:	4632      	mov	r2, r6
 8000f12:	4621      	mov	r1, r4
 8000f14:	4841      	ldr	r0, [pc, #260]	@ (800101c <main+0x518>)
 8000f16:	f005 f89b 	bl	8006050 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000f1a:	2328      	movs	r3, #40	@ 0x28
 8000f1c:	2215      	movs	r2, #21
 8000f1e:	4621      	mov	r1, r4
 8000f20:	483a      	ldr	r0, [pc, #232]	@ (800100c <main+0x508>)
 8000f22:	9400      	str	r4, [sp, #0]
 8000f24:	f007 f89f 	bl	8008066 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f28:	a92d      	add	r1, sp, #180	@ 0xb4
 8000f2a:	4838      	ldr	r0, [pc, #224]	@ (800100c <main+0x508>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000f2c:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000f2e:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000f32:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000f36:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000f3a:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000f3e:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f42:	f006 ff75 	bl	8007e30 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000f46:	4622      	mov	r2, r4
 8000f48:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	f008 ff5d 	bl	8009e0c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000f52:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000f54:	4834      	ldr	r0, [pc, #208]	@ (8001028 <main+0x524>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000f56:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f58:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <main+0x528>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f62:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000f64:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f66:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f6a:	f006 fbc9 	bl	8007700 <HAL_CRC_Init>
 8000f6e:	b108      	cbz	r0, 8000f74 <main+0x470>
 8000f70:	b672      	cpsid	i
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000f74:	482e      	ldr	r0, [pc, #184]	@ (8001030 <main+0x52c>)
 8000f76:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <main+0x530>)
 8000f78:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f7a:	f008 f85f 	bl	800903c <HAL_JPEG_Init>
 8000f7e:	b108      	cbz	r0, 8000f84 <main+0x480>
 8000f80:	b672      	cpsid	i
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <main+0x47e>
  huart1.Instance = USART1;
 8000f84:	4c2c      	ldr	r4, [pc, #176]	@ (8001038 <main+0x534>)
  huart1.Init.BaudRate = 115200;
 8000f86:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f8a:	492c      	ldr	r1, [pc, #176]	@ (800103c <main+0x538>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8e:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8000f90:	e9c4 1300 	strd	r1, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f94:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f96:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9a:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9c:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa0:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa4:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fa8:	f00b fde5 	bl	800cb76 <HAL_UART_Init>
 8000fac:	4601      	mov	r1, r0
 8000fae:	b108      	cbz	r0, 8000fb4 <main+0x4b0>
 8000fb0:	b672      	cpsid	i
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	f00b fe4c 	bl	800cc52 <HAL_UARTEx_SetTxFifoThreshold>
 8000fba:	4601      	mov	r1, r0
 8000fbc:	b108      	cbz	r0, 8000fc2 <main+0x4be>
 8000fbe:	b672      	cpsid	i
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f00b fe65 	bl	800cc92 <HAL_UARTEx_SetRxFifoThreshold>
 8000fc8:	b108      	cbz	r0, 8000fce <main+0x4ca>
 8000fca:	b672      	cpsid	i
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f00b fe24 	bl	800cc1c <HAL_UARTEx_DisableFifoMode>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b108      	cbz	r0, 8000fdc <main+0x4d8>
 8000fd8:	b672      	cpsid	i
  while (1)
 8000fda:	e7fe      	b.n	8000fda <main+0x4d6>
  MX_TouchGFX_Init();
 8000fdc:	f000 fddc 	bl	8001b98 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000fe0:	f000 fdd9 	bl	8001b96 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000fe4:	f00b ff18 	bl	800ce18 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fe8:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <main+0x53c>)
 8000fea:	4621      	mov	r1, r4
 8000fec:	4815      	ldr	r0, [pc, #84]	@ (8001044 <main+0x540>)
 8000fee:	f00b ff3f 	bl	800ce70 <osThreadNew>
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <main+0x544>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000ff4:	4a15      	ldr	r2, [pc, #84]	@ (800104c <main+0x548>)
 8000ff6:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000ff8:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000ffa:	4815      	ldr	r0, [pc, #84]	@ (8001050 <main+0x54c>)
 8000ffc:	f00b ff38 	bl	800ce70 <osThreadNew>
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <main+0x550>)
 8001002:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001004:	f00b ff1a 	bl	800ce3c <osKernelStart>
  while (1)
 8001008:	e7fe      	b.n	8001008 <main+0x504>
 800100a:	bf00      	nop
 800100c:	24009cc0 	.word	0x24009cc0
 8001010:	24009ae8 	.word	0x24009ae8
 8001014:	2400999c 	.word	0x2400999c
 8001018:	08006b55 	.word	0x08006b55
 800101c:	240099ac 	.word	0x240099ac
 8001020:	0800216d 	.word	0x0800216d
 8001024:	080021a5 	.word	0x080021a5
 8001028:	24009d44 	.word	0x24009d44
 800102c:	58024c00 	.word	0x58024c00
 8001030:	24009c68 	.word	0x24009c68
 8001034:	52003000 	.word	0x52003000
 8001038:	24009a08 	.word	0x24009a08
 800103c:	40011000 	.word	0x40011000
 8001040:	08027c60 	.word	0x08027c60
 8001044:	08001ba7 	.word	0x08001ba7
 8001048:	240099d0 	.word	0x240099d0
 800104c:	08027c3c 	.word	0x08027c3c
 8001050:	08003d11 	.word	0x08003d11
 8001054:	240099cc 	.word	0x240099cc
 8001058:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	2214      	movs	r2, #20
 800105e:	2100      	movs	r1, #0
 8001060:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f023 ff22 	bl	8024eac <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001068:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001076:	488d      	ldr	r0, [pc, #564]	@ (80012ac <main+0x7a8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	f04f 0900 	mov.w	r9, #0
 800107c:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001086:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800108e:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001094:	9304      	str	r3, [sp, #16]
 8001096:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	9305      	str	r3, [sp, #20]
 80010ae:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010b8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c4:	9306      	str	r3, [sp, #24]
 80010c6:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010d4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	9307      	str	r3, [sp, #28]
 80010de:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010ec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f4:	9308      	str	r3, [sp, #32]
 80010f6:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010fc:	f043 0304 	orr.w	r3, r3, #4
 8001100:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001104:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	9309      	str	r3, [sp, #36]	@ 0x24
 800110e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001110:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001118:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800111c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001124:	930a      	str	r3, [sp, #40]	@ 0x28
 8001126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001128:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001134:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800113e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800114c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	930c      	str	r3, [sp, #48]	@ 0x30
 8001156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001158:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001164:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	930d      	str	r3, [sp, #52]	@ 0x34
 800116e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001170:	f007 fa0a 	bl	8008588 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2108      	movs	r1, #8
 8001178:	484d      	ldr	r0, [pc, #308]	@ (80012b0 <main+0x7ac>)
 800117a:	f007 fa05 	bl	8008588 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001184:	484b      	ldr	r0, [pc, #300]	@ (80012b4 <main+0x7b0>)
 8001186:	f007 f9ff 	bl	8008588 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800118e:	a92d      	add	r1, sp, #180	@ 0xb4
 8001190:	4846      	ldr	r0, [pc, #280]	@ (80012ac <main+0x7a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800119a:	f007 f86b 	bl	8008274 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	a92d      	add	r1, sp, #180	@ 0xb4
 80011a0:	4845      	ldr	r0, [pc, #276]	@ (80012b8 <main+0x7b4>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011a2:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f007 f861 	bl	8008274 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80011b2:	a92d      	add	r1, sp, #180	@ 0xb4
 80011b4:	483e      	ldr	r0, [pc, #248]	@ (80012b0 <main+0x7ac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80011be:	f007 f859 	bl	8008274 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011c2:	a92d      	add	r1, sp, #180	@ 0xb4
 80011c4:	483b      	ldr	r0, [pc, #236]	@ (80012b4 <main+0x7b0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f007 f851 	bl	8008274 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011d2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011d6:	464a      	mov	r2, r9
 80011d8:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011da:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011dc:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80011de:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011e2:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80011e6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011ea:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011ec:	402b      	ands	r3, r5
 80011ee:	9303      	str	r3, [sp, #12]
 80011f0:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011f2:	f006 f9e9 	bl	80075c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80011f6:	207a      	movs	r0, #122	@ 0x7a
 80011f8:	f006 fa18 	bl	800762c <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80011fc:	4a2f      	ldr	r2, [pc, #188]	@ (80012bc <main+0x7b8>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011fe:	4830      	ldr	r0, [pc, #192]	@ (80012c0 <main+0x7bc>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001200:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001202:	6813      	ldr	r3, [r2, #0]
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800120a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <main+0x7c0>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001210:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001214:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001218:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 800121a:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800121e:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001222:	2320      	movs	r3, #32
 8001224:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001228:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800122c:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001234:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001238:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 800123a:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 800123e:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8001242:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001246:	f00a ff8d 	bl	800c164 <HAL_SDRAM_Init>
 800124a:	4681      	mov	r9, r0
 800124c:	2800      	cmp	r0, #0
 800124e:	f47f acfc 	bne.w	8000c4a <main+0x146>
  BSP_SDRAM_DeInit(0);
 8001252:	f005 fea5 	bl	8006fa0 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001256:	4648      	mov	r0, r9
 8001258:	f005 fef0 	bl	800703c <BSP_SDRAM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2800      	cmp	r0, #0
 8001260:	f43f acf5 	beq.w	8000c4e <main+0x14a>
 8001264:	b672      	cpsid	i
  while (1)
 8001266:	e7fe      	b.n	8001266 <main+0x762>
  HAL_Init();
 8001268:	f006 f944 	bl	80074f4 <HAL_Init>
  SystemClock_Config();
 800126c:	f7ff fbe8 	bl	8000a40 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001270:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001274:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001276:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800127a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800127e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 800128a:	f007 f98b 	bl	80085a4 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800128e:	4621      	mov	r1, r4
 8001290:	4620      	mov	r0, r4
 8001292:	f007 f995 	bl	80085c0 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001296:	4c0c      	ldr	r4, [pc, #48]	@ (80012c8 <main+0x7c4>)
timeout = 0xFFFF;
 8001298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800129c:	6822      	ldr	r2, [r4, #0]
 800129e:	0412      	lsls	r2, r2, #16
 80012a0:	f53f aedc 	bmi.w	800105c <main+0x558>
 80012a4:	3b01      	subs	r3, #1
 80012a6:	d2f9      	bcs.n	800129c <main+0x798>
 80012a8:	b672      	cpsid	i
  while (1)
 80012aa:	e7fe      	b.n	80012aa <main+0x7a6>
 80012ac:	58022400 	.word	0x58022400
 80012b0:	58021800 	.word	0x58021800
 80012b4:	58021400 	.word	0x58021400
 80012b8:	58020000 	.word	0x58020000
 80012bc:	52004000 	.word	0x52004000
 80012c0:	240099d4 	.word	0x240099d4
 80012c4:	52004140 	.word	0x52004140
 80012c8:	58024400 	.word	0x58024400

080012cc <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 80012cc:	6802      	ldr	r2, [r0, #0]
 80012ce:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d101      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012d4:	f006 b93c 	b.w	8007550 <HAL_IncTick>
}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40001000 	.word	0x40001000

080012e0 <Error_Handler>:
 80012e0:	b672      	cpsid	i
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <Error_Handler+0x2>

080012e4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x2c>)
{
 80012e6:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012e8:	210f      	movs	r1, #15
 80012ea:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80012f2:	f042 0202 	orr.w	r2, r2, #2
 80012f6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fa:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130a:	f006 b95d 	b.w	80075c8 <HAL_NVIC_SetPriority>
 800130e:	bf00      	nop
 8001310:	58024400 	.word	0x58024400

08001314 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001314:	6802      	ldr	r2, [r0, #0]
{
 8001316:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_CRC_MspInit+0x2c>)
 800131a:	429a      	cmp	r2, r3
 800131c:	d10d      	bne.n	800133a <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800131e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001322:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001326:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800132a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800133a:	b002      	add	sp, #8
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	58024c00 	.word	0x58024c00

08001344 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <HAL_DMA2D_MspInit+0x40>)
{
 8001346:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001348:	6802      	ldr	r2, [r0, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d117      	bne.n	800137e <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001350:	2107      	movs	r1, #7
 8001352:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001354:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001358:	f042 0210 	orr.w	r2, r2, #16
 800135c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001360:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001362:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 800136e:	f006 f92b 	bl	80075c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001372:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001374:	b003      	add	sp, #12
 8001376:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800137a:	f006 b957 	b.w	800762c <HAL_NVIC_EnableIRQ>
}
 800137e:	b003      	add	sp, #12
 8001380:	f85d fb04 	ldr.w	pc, [sp], #4
 8001384:	52001000 	.word	0x52001000
 8001388:	58024400 	.word	0x58024400

0800138c <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800138c:	b510      	push	{r4, lr}
 800138e:	b0ba      	sub	sp, #232	@ 0xe8
 8001390:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	2214      	movs	r2, #20
 8001394:	2100      	movs	r1, #0
 8001396:	a803      	add	r0, sp, #12
 8001398:	f023 fd88 	bl	8024eac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	22c8      	movs	r2, #200	@ 0xc8
 800139e:	2100      	movs	r1, #0
 80013a0:	a808      	add	r0, sp, #32
 80013a2:	f023 fd83 	bl	8024eac <memset>
  if(hdsi->Instance==DSI)
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ac:	d138      	bne.n	8001420 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013b2:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ba:	f00a f863 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	b108      	cbz	r0, 80013c4 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80013c0:	f7ff ff8e 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013c8:	a903      	add	r1, sp, #12
 80013ca:	4817      	ldr	r0, [pc, #92]	@ (8001428 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80013cc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013d0:	f042 0210 	orr.w	r2, r2, #16
 80013d4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80013d8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013dc:	f002 0210 	and.w	r2, r2, #16
 80013e0:	9201      	str	r2, [sp, #4]
 80013e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001404:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800140a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800140c:	f006 ff32 	bl	8008274 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001410:	207b      	movs	r0, #123	@ 0x7b
 8001412:	4622      	mov	r2, r4
 8001414:	2107      	movs	r1, #7
 8001416:	f006 f8d7 	bl	80075c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800141a:	207b      	movs	r0, #123	@ 0x7b
 800141c:	f006 f906 	bl	800762c <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 8001420:	b03a      	add	sp, #232	@ 0xe8
 8001422:	bd10      	pop	{r4, pc}
 8001424:	58024400 	.word	0x58024400
 8001428:	58022400 	.word	0x58022400

0800142c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 800142c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 800142e:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <HAL_JPEG_MspInit+0xf4>)
{
 8001430:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001432:	6802      	ldr	r2, [r0, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d170      	bne.n	800151a <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001438:	4b3a      	ldr	r3, [pc, #232]	@ (8001524 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800143a:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 800143c:	4c3a      	ldr	r4, [pc, #232]	@ (8001528 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800143e:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001442:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001446:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001534 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800144a:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 800144c:	f042 0220 	orr.w	r2, r2, #32
 8001450:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001454:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001456:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800145a:	f003 0320 	and.w	r3, r3, #32
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001462:	2311      	movs	r3, #17
 8001464:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800146e:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001472:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001474:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001476:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800147a:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800147e:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001482:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001486:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800148a:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800148e:	f008 fd1a 	bl	8009ec6 <HAL_MDMA_Init>
 8001492:	b108      	cbz	r0, 8001498 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001494:	f7ff ff24 	bl	80012e0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001498:	2200      	movs	r2, #0
 800149a:	4823      	ldr	r0, [pc, #140]	@ (8001528 <HAL_JPEG_MspInit+0xfc>)
 800149c:	4611      	mov	r1, r2
 800149e:	f008 fda0 	bl	8009fe2 <HAL_MDMA_ConfigPostRequestMask>
 80014a2:	b108      	cbz	r0, 80014a8 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 80014a4:	f7ff ff1c 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014a8:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014aa:	2313      	movs	r3, #19
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014ae:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014b0:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014b2:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80014b6:	4c1e      	ldr	r4, [pc, #120]	@ (8001530 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014b8:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	22c0      	movs	r2, #192	@ 0xc0
 80014c0:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014c4:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014c6:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014c8:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014cc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80014d0:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014d4:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80014d8:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014dc:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80014de:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80014e2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014e6:	f008 fcee 	bl	8009ec6 <HAL_MDMA_Init>
 80014ea:	b108      	cbz	r0, 80014f0 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80014ec:	f7ff fef8 	bl	80012e0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80014f0:	2200      	movs	r2, #0
 80014f2:	480f      	ldr	r0, [pc, #60]	@ (8001530 <HAL_JPEG_MspInit+0x104>)
 80014f4:	4611      	mov	r1, r2
 80014f6:	f008 fd74 	bl	8009fe2 <HAL_MDMA_ConfigPostRequestMask>
 80014fa:	b108      	cbz	r0, 8001500 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80014fc:	f7ff fef0 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001500:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001508:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800150a:	f006 f85d 	bl	80075c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800150e:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001510:	b003      	add	sp, #12
 8001512:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001516:	f006 b889 	b.w	800762c <HAL_NVIC_EnableIRQ>
}
 800151a:	b003      	add	sp, #12
 800151c:	bd30      	pop	{r4, r5, pc}
 800151e:	bf00      	nop
 8001520:	52003000 	.word	0x52003000
 8001524:	58024400 	.word	0x58024400
 8001528:	24009bfc 	.word	0x24009bfc
 800152c:	520001c0 	.word	0x520001c0
 8001530:	24009b90 	.word	0x24009b90
 8001534:	52000200 	.word	0x52000200

08001538 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001538:	b510      	push	{r4, lr}
 800153a:	b0b4      	sub	sp, #208	@ 0xd0
 800153c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800153e:	22c8      	movs	r2, #200	@ 0xc8
 8001540:	2100      	movs	r1, #0
 8001542:	a802      	add	r0, sp, #8
 8001544:	f023 fcb2 	bl	8024eac <memset>
  if(hltdc->Instance==LTDC)
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <HAL_LTDC_MspInit+0x74>)
 800154c:	429a      	cmp	r2, r3
 800154e:	d12b      	bne.n	80015a8 <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001550:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001554:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001556:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001558:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800155a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800155e:	23a1      	movs	r3, #161	@ 0xa1
 8001560:	2205      	movs	r2, #5
 8001562:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001566:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001568:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800156c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001570:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001574:	f009 ff86 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	b108      	cbz	r0, 800157e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800157a:	f7ff feb1 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001580:	2058      	movs	r0, #88	@ 0x58
 8001582:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001584:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001588:	f042 0208 	orr.w	r2, r2, #8
 800158c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001590:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800159e:	f006 f813 	bl	80075c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015a2:	2058      	movs	r0, #88	@ 0x58
 80015a4:	f006 f842 	bl	800762c <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015a8:	b034      	add	sp, #208	@ 0xd0
 80015aa:	bd10      	pop	{r4, pc}
 80015ac:	50001000 	.word	0x50001000
 80015b0:	58024400 	.word	0x58024400

080015b4 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b0bf      	sub	sp, #252	@ 0xfc
 80015b8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ba:	2214      	movs	r2, #20
 80015bc:	2100      	movs	r1, #0
 80015be:	a807      	add	r0, sp, #28
 80015c0:	f023 fc74 	bl	8024eac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	22c8      	movs	r2, #200	@ 0xc8
 80015c6:	2100      	movs	r1, #0
 80015c8:	a80c      	add	r0, sp, #48	@ 0x30
 80015ca:	f023 fc6f 	bl	8024eac <memset>
  if(hqspi->Instance==QUADSPI)
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_QSPI_MspInit+0x16c>)
 80015d2:	429a      	cmp	r2, r3
 80015d4:	f040 80a1 	bne.w	800171a <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015dc:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015de:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e4:	f009 ff4e 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 80015e8:	b108      	cbz	r0, 80015ee <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80015ea:	f7ff fe79 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001724 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015f4:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fa:	a907      	add	r1, sp, #28
 80015fc:	484a      	ldr	r0, [pc, #296]	@ (8001728 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80015fe:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001600:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001604:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001608:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800160c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001610:	9201      	str	r2, [sp, #4]
 8001612:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800161c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001624:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001628:	9202      	str	r2, [sp, #8]
 800162a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800162c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001638:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800163c:	f002 0220 	and.w	r2, r2, #32
 8001640:	9203      	str	r2, [sp, #12]
 8001642:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001644:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001648:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800164c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001650:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001654:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001658:	9204      	str	r2, [sp, #16]
 800165a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001660:	f042 0202 	orr.w	r2, r2, #2
 8001664:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001668:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800166c:	f002 0202 	and.w	r2, r2, #2
 8001670:	9205      	str	r2, [sp, #20]
 8001672:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001678:	f042 0208 	orr.w	r2, r2, #8
 800167c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	9306      	str	r3, [sp, #24]
 800168a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001690:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001698:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169a:	f006 fdeb 	bl	8008274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800169e:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a0:	a907      	add	r1, sp, #28
 80016a2:	4821      	ldr	r0, [pc, #132]	@ (8001728 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016a4:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ae:	f006 fde1 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b2:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b4:	a907      	add	r1, sp, #28
 80016b6:	481d      	ldr	r0, [pc, #116]	@ (800172c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b8:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c2:	f006 fdd7 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ca:	a907      	add	r1, sp, #28
 80016cc:	4817      	ldr	r0, [pc, #92]	@ (800172c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ce:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d8:	f006 fdcc 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016dc:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016de:	a907      	add	r1, sp, #28
 80016e0:	4813      	ldr	r0, [pc, #76]	@ (8001730 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016e2:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ec:	f006 fdc2 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	a907      	add	r1, sp, #28
 80016f4:	480f      	ldr	r0, [pc, #60]	@ (8001734 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016f6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f006 fdb8 	bl	8008274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001704:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001708:	a907      	add	r1, sp, #28
 800170a:	480b      	ldr	r0, [pc, #44]	@ (8001738 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800170c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	f006 fdad 	bl	8008274 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800171a:	b03f      	add	sp, #252	@ 0xfc
 800171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171e:	bf00      	nop
 8001720:	52005000 	.word	0x52005000
 8001724:	58024400 	.word	0x58024400
 8001728:	58021800 	.word	0x58021800
 800172c:	58021400 	.word	0x58021400
 8001730:	58021c00 	.word	0x58021c00
 8001734:	58020400 	.word	0x58020400
 8001738:	58020c00 	.word	0x58020c00

0800173c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b510      	push	{r4, lr}
 800173e:	b0ba      	sub	sp, #232	@ 0xe8
 8001740:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	2214      	movs	r2, #20
 8001744:	2100      	movs	r1, #0
 8001746:	a803      	add	r0, sp, #12
 8001748:	f023 fbb0 	bl	8024eac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800174c:	22c8      	movs	r2, #200	@ 0xc8
 800174e:	2100      	movs	r1, #0
 8001750:	a808      	add	r0, sp, #32
 8001752:	f023 fbab 	bl	8024eac <memset>
  if(huart->Instance==USART1)
 8001756:	6822      	ldr	r2, [r4, #0]
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_UART_MspInit+0x88>)
 800175a:	429a      	cmp	r2, r3
 800175c:	d130      	bne.n	80017c0 <HAL_UART_MspInit+0x84>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800175e:	2201      	movs	r2, #1
 8001760:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001764:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001768:	f009 fe8c 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 800176c:	b108      	cbz	r0, 8001772 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 800176e:	f7ff fdb7 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	a903      	add	r1, sp, #12
 8001776:	4815      	ldr	r0, [pc, #84]	@ (80017cc <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001778:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800177c:	f042 0210 	orr.w	r2, r2, #16
 8001780:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001784:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001788:	f002 0210 	and.w	r2, r2, #16
 800178c:	9201      	str	r2, [sp, #4]
 800178e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	9302      	str	r3, [sp, #8]
 80017aa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b8:	2307      	movs	r3, #7
 80017ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f006 fd5a 	bl	8008274 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80017c0:	b03a      	add	sp, #232	@ 0xe8
 80017c2:	bd10      	pop	{r4, pc}
 80017c4:	40011000 	.word	0x40011000
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58020000 	.word	0x58020000

080017d0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017d4:	2100      	movs	r1, #0
 80017d6:	2214      	movs	r2, #20
 80017d8:	a801      	add	r0, sp, #4
 80017da:	f023 fb67 	bl	8024eac <memset>
  if (FMC_Initialized) {
 80017de:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <HAL_SDRAM_MspInit+0x10c>)
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	2900      	cmp	r1, #0
 80017e4:	d177      	bne.n	80018d6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80017e6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80017ea:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	22c0      	movs	r2, #192	@ 0xc0
 80017ee:	f023 fb5d 	bl	8024eac <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80017f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017f6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80017fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fe:	f009 fe41 	bl	800b484 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	b108      	cbz	r0, 8001808 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001804:	f7ff fd6c 	bl	80012e0 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001808:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2600      	movs	r6, #0
 800180e:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001810:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001814:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001816:	a901      	add	r1, sp, #4
 8001818:	4832      	ldr	r0, [pc, #200]	@ (80018e4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800181a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800181e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001822:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001826:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001834:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800183c:	f006 fd1a 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001840:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	a901      	add	r1, sp, #4
 8001844:	4828      	ldr	r0, [pc, #160]	@ (80018e8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001846:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f006 fd10 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001854:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001858:	a901      	add	r1, sp, #4
 800185a:	4824      	ldr	r0, [pc, #144]	@ (80018ec <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800185c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001866:	f006 fd05 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800186a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800186e:	a901      	add	r1, sp, #4
 8001870:	481f      	ldr	r0, [pc, #124]	@ (80018f0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001872:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800187c:	f006 fcfa 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001880:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001884:	a901      	add	r1, sp, #4
 8001886:	481b      	ldr	r0, [pc, #108]	@ (80018f4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001888:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001892:	f006 fcef 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001896:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189a:	a901      	add	r1, sp, #4
 800189c:	4816      	ldr	r0, [pc, #88]	@ (80018f8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800189e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a8:	f006 fce4 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80018ac:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b0:	a901      	add	r1, sp, #4
 80018b2:	4812      	ldr	r0, [pc, #72]	@ (80018fc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018be:	f006 fcd9 	bl	8008274 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018c2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c4:	a901      	add	r1, sp, #4
 80018c6:	480e      	ldr	r0, [pc, #56]	@ (8001900 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f006 fccf 	bl	8008274 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018d6:	b039      	add	sp, #228	@ 0xe4
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	bf00      	nop
 80018dc:	24009d6c 	.word	0x24009d6c
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58022000 	.word	0x58022000
 80018e8:	58020400 	.word	0x58020400
 80018ec:	58021000 	.word	0x58021000
 80018f0:	58021c00 	.word	0x58021c00
 80018f4:	58021800 	.word	0x58021800
 80018f8:	58020c00 	.word	0x58020c00
 80018fc:	58021400 	.word	0x58021400
 8001900:	58020800 	.word	0x58020800

08001904 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_SDRAM_MspDeInit+0x6c>)
 8001906:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001908:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800190a:	bb82      	cbnz	r2, 800196e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 800190c:	4a19      	ldr	r2, [pc, #100]	@ (8001974 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 800190e:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001910:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001914:	4818      	ldr	r0, [pc, #96]	@ (8001978 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001916:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001918:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 800191c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001920:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001924:	f006 fd8e 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001928:	2160      	movs	r1, #96	@ 0x60
 800192a:	4814      	ldr	r0, [pc, #80]	@ (800197c <HAL_SDRAM_MspDeInit+0x78>)
 800192c:	f006 fd8a 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001930:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001934:	4812      	ldr	r0, [pc, #72]	@ (8001980 <HAL_SDRAM_MspDeInit+0x7c>)
 8001936:	f006 fd85 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800193a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <HAL_SDRAM_MspDeInit+0x80>)
 8001940:	f006 fd80 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001944:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001948:	480f      	ldr	r0, [pc, #60]	@ (8001988 <HAL_SDRAM_MspDeInit+0x84>)
 800194a:	f006 fd7b 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800194e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001952:	480e      	ldr	r0, [pc, #56]	@ (800198c <HAL_SDRAM_MspDeInit+0x88>)
 8001954:	f006 fd76 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001958:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800195c:	480c      	ldr	r0, [pc, #48]	@ (8001990 <HAL_SDRAM_MspDeInit+0x8c>)
 800195e:	f006 fd71 	bl	8008444 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001962:	4621      	mov	r1, r4
 8001964:	480b      	ldr	r0, [pc, #44]	@ (8001994 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800196a:	f006 bd6b 	b.w	8008444 <HAL_GPIO_DeInit>
}
 800196e:	bd10      	pop	{r4, pc}
 8001970:	24009d68 	.word	0x24009d68
 8001974:	58024400 	.word	0x58024400
 8001978:	58022000 	.word	0x58022000
 800197c:	58020400 	.word	0x58020400
 8001980:	58021000 	.word	0x58021000
 8001984:	58021c00 	.word	0x58021c00
 8001988:	58021800 	.word	0x58021800
 800198c:	58020c00 	.word	0x58020c00
 8001990:	58021400 	.word	0x58021400
 8001994:	58020800 	.word	0x58020800

08001998 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001998:	280f      	cmp	r0, #15
{
 800199a:	b510      	push	{r4, lr}
 800199c:	4604      	mov	r4, r0
 800199e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a0:	d902      	bls.n	80019a8 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80019a2:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80019a4:	b00a      	add	sp, #40	@ 0x28
 80019a6:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80019a8:	4601      	mov	r1, r0
 80019aa:	2200      	movs	r2, #0
 80019ac:	2036      	movs	r0, #54	@ 0x36
 80019ae:	f005 fe0b 	bl	80075c8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019b2:	2036      	movs	r0, #54	@ 0x36
 80019b4:	f005 fe3a 	bl	800762c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80019b8:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ba:	4669      	mov	r1, sp
 80019bc:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80019be:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019c0:	4b17      	ldr	r3, [pc, #92]	@ (8001a20 <HAL_InitTick+0x88>)
 80019c2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80019c6:	f042 0210 	orr.w	r2, r2, #16
 80019ca:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80019ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019da:	f009 fc3d 	bl	800b258 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019de:	9b07      	ldr	r3, [sp, #28]
 80019e0:	b9c3      	cbnz	r3, 8001a14 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019e2:	f009 fc15 	bl	800b210 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80019e6:	4c0f      	ldr	r4, [pc, #60]	@ (8001a24 <HAL_InitTick+0x8c>)
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_InitTick+0x90>)
 80019ea:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019ec:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80019f0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_InitTick+0x94>)
 80019f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019f8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80019fa:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80019fc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019fe:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001a00:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a04:	f00a fd8c 	bl	800c520 <HAL_TIM_Base_Init>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d1ca      	bne.n	80019a2 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f00a fc51 	bl	800c2b4 <HAL_TIM_Base_Start_IT>
 8001a12:	e7c7      	b.n	80019a4 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a14:	f009 fbfc 	bl	800b210 <HAL_RCC_GetPCLK1Freq>
 8001a18:	0040      	lsls	r0, r0, #1
 8001a1a:	e7e4      	b.n	80019e6 <HAL_InitTick+0x4e>
 8001a1c:	240000a4 	.word	0x240000a4
 8001a20:	58024400 	.word	0x58024400
 8001a24:	24009d70 	.word	0x24009d70
 8001a28:	40001000 	.word	0x40001000
 8001a2c:	000f4240 	.word	0x000f4240

08001a30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler>

08001a32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler>

08001a34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler>

08001a36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <BusFault_Handler>

08001a38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler>

08001a3a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3a:	4770      	bx	lr

08001a3c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a3c:	4801      	ldr	r0, [pc, #4]	@ (8001a44 <TIM6_DAC_IRQHandler+0x8>)
 8001a3e:	f00a bc7b 	b.w	800c338 <HAL_TIM_IRQHandler>
 8001a42:	bf00      	nop
 8001a44:	24009d70 	.word	0x24009d70

08001a48 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a48:	4801      	ldr	r0, [pc, #4]	@ (8001a50 <LTDC_IRQHandler+0x8>)
 8001a4a:	f008 b955 	b.w	8009cf8 <HAL_LTDC_IRQHandler>
 8001a4e:	bf00      	nop
 8001a50:	24009ae8 	.word	0x24009ae8

08001a54 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a54:	4801      	ldr	r0, [pc, #4]	@ (8001a5c <DMA2D_IRQHandler+0x8>)
 8001a56:	f005 bef3 	b.w	8007840 <HAL_DMA2D_IRQHandler>
 8001a5a:	bf00      	nop
 8001a5c:	24009cdc 	.word	0x24009cdc

08001a60 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001a60:	4801      	ldr	r0, [pc, #4]	@ (8001a68 <JPEG_IRQHandler+0x8>)
 8001a62:	f008 b821 	b.w	8009aa8 <HAL_JPEG_IRQHandler>
 8001a66:	bf00      	nop
 8001a68:	24009c68 	.word	0x24009c68

08001a6c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <MDMA_IRQHandler+0x14>)
{
 8001a6e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a70:	f008 fb3c 	bl	800a0ec <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a74:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a7a:	f008 bb37 	b.w	800a0ec <HAL_MDMA_IRQHandler>
 8001a7e:	bf00      	nop
 8001a80:	24009b90 	.word	0x24009b90
 8001a84:	24009bfc 	.word	0x24009bfc

08001a88 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001a88:	4801      	ldr	r0, [pc, #4]	@ (8001a90 <DSI_IRQHandler+0x8>)
 8001a8a:	f006 b8dc 	b.w	8007c46 <HAL_DSI_IRQHandler>
 8001a8e:	bf00      	nop
 8001a90:	24009cc0 	.word	0x24009cc0

08001a94 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001a94:	2001      	movs	r0, #1
 8001a96:	4770      	bx	lr

08001a98 <_kill>:

int _kill(int pid, int sig)
{
 8001a98:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001a9a:	f023 fabb 	bl	8025014 <__errno>
 8001a9e:	2316      	movs	r3, #22
 8001aa0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa6:	bd08      	pop	{r3, pc}

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001aaa:	f023 fab3 	bl	8025014 <__errno>
 8001aae:	2316      	movs	r3, #22
 8001ab0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ab2:	e7fe      	b.n	8001ab2 <_exit+0xa>

08001ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	460d      	mov	r5, r1
 8001ab8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	460e      	mov	r6, r1
 8001abc:	1b73      	subs	r3, r6, r5
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	dc01      	bgt.n	8001ac6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001ac6:	f3af 8000 	nop.w
 8001aca:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	e7f5      	b.n	8001abc <_read+0x8>

08001ad0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	460d      	mov	r5, r1
 8001ad4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	460e      	mov	r6, r1
 8001ad8:	1b73      	subs	r3, r6, r5
 8001ada:	429c      	cmp	r4, r3
 8001adc:	dc01      	bgt.n	8001ae2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ade:	4620      	mov	r0, r4
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001ae2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001ae6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	e7f5      	b.n	8001ad8 <_write+0x8>

08001aec <_close>:

int _close(int file)
{
	return -1;
}
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	4770      	bx	lr

08001af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001af6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001af8:	604b      	str	r3, [r1, #4]
}
 8001afa:	4770      	bx	lr

08001afc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001afc:	2001      	movs	r0, #1
 8001afe:	4770      	bx	lr

08001b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	4770      	bx	lr

08001b04 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4a0b      	ldr	r2, [pc, #44]	@ (8001b34 <_sbrk+0x30>)
{
 8001b06:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b08:	6811      	ldr	r1, [r2, #0]
{
 8001b0a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b0c:	b909      	cbnz	r1, 8001b12 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b0e:	490a      	ldr	r1, [pc, #40]	@ (8001b38 <_sbrk+0x34>)
 8001b10:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	6810      	ldr	r0, [r2, #0]
 8001b14:	4909      	ldr	r1, [pc, #36]	@ (8001b3c <_sbrk+0x38>)
 8001b16:	4c0a      	ldr	r4, [pc, #40]	@ (8001b40 <_sbrk+0x3c>)
 8001b18:	4403      	add	r3, r0
 8001b1a:	1b09      	subs	r1, r1, r4
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	d906      	bls.n	8001b2e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b20:	f023 fa78 	bl	8025014 <__errno>
 8001b24:	230c      	movs	r3, #12
 8001b26:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b2c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b2e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b30:	e7fc      	b.n	8001b2c <_sbrk+0x28>
 8001b32:	bf00      	nop
 8001b34:	24009dbc 	.word	0x24009dbc
 8001b38:	24026658 	.word	0x24026658
 8001b3c:	24080000 	.word	0x24080000
 8001b40:	00001000 	.word	0x00001000

08001b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b48:	f005 fc64 	bl	8007414 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4e:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b54:	e002      	b.n	8001b5c <LoopCopyDataInit>

08001b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5a:	3304      	adds	r3, #4

08001b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b60:	d3f9      	bcc.n	8001b56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b64:	4c0a      	ldr	r4, [pc, #40]	@ (8001b90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b68:	e001      	b.n	8001b6e <LoopFillZerobss>

08001b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b6c:	3204      	adds	r2, #4

08001b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b70:	d3fb      	bcc.n	8001b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b72:	f023 fa55 	bl	8025020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b76:	f7fe ffc5 	bl	8000b04 <main>
  bx  lr
 8001b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b84:	2400016c 	.word	0x2400016c
  ldr r2, =_sidata
 8001b88:	0802cf44 	.word	0x0802cf44
  ldr r2, =_sbss
 8001b8c:	24009980 	.word	0x24009980
  ldr r4, =_ebss
 8001b90:	24026654 	.word	0x24026654

08001b94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC3_IRQHandler>

08001b96 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001b96:	4770      	bx	lr

08001b98 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001b98:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001b9a:	f001 fd2d 	bl	80035f8 <touchgfx_components_init>
    touchgfx_init();
}
 8001b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001ba2:	f001 bcb1 	b.w	8003508 <touchgfx_init>

08001ba6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001ba6:	f001 bd29 	b.w	80035fc <touchgfx_taskEntry>

08001baa <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001baa:	6840      	ldr	r0, [r0, #4]
    }
 8001bac:	4770      	bx	lr

08001bae <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001bae:	6041      	str	r1, [r0, #4]
    }
 8001bb0:	4770      	bx	lr

08001bb2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001bb2:	1a52      	subs	r2, r2, r1
 8001bb4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001bb8:	fbb2 f0f3 	udiv	r0, r2, r3
 8001bbc:	4770      	bx	lr
	...

08001bc0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001bc2:	68c0      	ldr	r0, [r0, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001bc8:	4358      	muls	r0, r3
 8001bca:	4770      	bx	lr
 8001bcc:	24009dc0 	.word	0x24009dc0

08001bd0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c50 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001bd8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001bdc:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bee:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001bfc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001c00:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c04:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001c06:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001c08:	2101      	movs	r1, #1
 8001c0a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001c0c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	2210      	movs	r2, #16
 8001c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c14:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c58 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	b983      	cbnz	r3, 8001c46 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001c24:	f009 fad2 	bl	800b1cc <HAL_RCC_GetHCLKFreq>
 8001c28:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001c2a:	f009 f907 	bl	800ae3c <HAL_RCC_GetSysClockFreq>
 8001c2e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001c32:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001c34:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c36:	f00a fc73 	bl	800c520 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001c3a:	4806      	ldr	r0, [pc, #24]	@ (8001c54 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001c3c:	b003      	add	sp, #12
 8001c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001c42:	f00a bafd 	b.w	800c240 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001c46:	f009 fae3 	bl	800b210 <HAL_RCC_GetPCLK1Freq>
 8001c4a:	0044      	lsls	r4, r0, #1
 8001c4c:	e7ed      	b.n	8001c2a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
 8001c54:	24009dc0 	.word	0x24009dc0
 8001c58:	0802894c 	.word	0x0802894c

08001c5c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001c5c:	b510      	push	{r4, lr}
 8001c5e:	4604      	mov	r4, r0
 8001c60:	2110      	movs	r1, #16
 8001c62:	f022 faef 	bl	8024244 <_ZdlPvj>
 8001c66:	4620      	mov	r0, r4
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001c6a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001c6c:	6803      	ldr	r3, [r0, #0]
{
 8001c6e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001c70:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001c72:	b131      	cbz	r1, 8001c82 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001c74:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001c76:	4798      	blx	r3
 8001c78:	6863      	ldr	r3, [r4, #4]
 8001c7a:	1b5b      	subs	r3, r3, r5
 8001c7c:	4403      	add	r3, r0
 8001c7e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001c80:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001c82:	4798      	blx	r3
 8001c84:	60a0      	str	r0, [r4, #8]
}
 8001c86:	e7fb      	b.n	8001c80 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001c88 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001c88:	4770      	bx	lr
	...

08001c8c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001c90:	460f      	mov	r7, r1
 8001c92:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001c94:	781d      	ldrb	r5, [r3, #0]
 8001c96:	b915      	cbnz	r5, 8001c9e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001c98:	2500      	movs	r5, #0
}
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001c9e:	4c07      	ldr	r4, [pc, #28]	@ (8001cbc <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	f005 fb5a 	bl	800735c <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f4      	beq.n	8001c98 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001cae:	6863      	ldr	r3, [r4, #4]
 8001cb0:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001cb2:	68a3      	ldr	r3, [r4, #8]
 8001cb4:	6033      	str	r3, [r6, #0]
            return true;
 8001cb6:	e7f0      	b.n	8001c9a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001cb8:	24009e1c 	.word	0x24009e1c
 8001cbc:	24009e0c 	.word	0x24009e0c

08001cc0 <_ZN20STM32TouchControllerD0Ev>:
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	2104      	movs	r1, #4
 8001cc6:	f022 fabd 	bl	8024244 <_ZdlPvj>
 8001cca:	4620      	mov	r0, r4
 8001ccc:	bd10      	pop	{r4, pc}
	...

08001cd0 <_ZN20STM32TouchController4initEv>:
{
 8001cd0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001cd4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001cd8:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001cda:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001cdc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001ce0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001cea:	f005 faa7 	bl	800723c <BSP_TS_Init>
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <_ZN20STM32TouchController4initEv+0x40>)
 8001cf0:	b910      	cbnz	r0, 8001cf8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
}
 8001cf6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1fb      	bne.n	8001cf6 <_ZN20STM32TouchController4initEv+0x26>
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <_ZN20STM32TouchController4initEv+0x44>)
 8001d00:	212e      	movs	r1, #46	@ 0x2e
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <_ZN20STM32TouchController4initEv+0x48>)
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <_ZN20STM32TouchController4initEv+0x4c>)
 8001d06:	f022 fe13 	bl	8024930 <__assert_func>
 8001d0a:	bf00      	nop
 8001d0c:	24009e18 	.word	0x24009e18
 8001d10:	24009e1c 	.word	0x24009e1c
 8001d14:	08025d97 	.word	0x08025d97
 8001d18:	08025daa 	.word	0x08025daa
 8001d1c:	08025dd4 	.word	0x08025dd4

08001d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001d20:	2803      	cmp	r0, #3
 8001d22:	d825      	bhi.n	8001d70 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001d24:	e8df f000 	tbb	[pc, r0]
 8001d28:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d2e:	2108      	movs	r1, #8
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d38:	480f      	ldr	r0, [pc, #60]	@ (8001d78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d3a:	f006 bc25 	b.w	8008588 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	fab2 f282 	clz	r2, r2
 8001d4a:	0952      	lsrs	r2, r2, #5
 8001d4c:	e7f4      	b.n	8001d38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	fab2 f282 	clz	r2, r2
 8001d5a:	0952      	lsrs	r2, r2, #5
 8001d5c:	e7ec      	b.n	8001d38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d5e:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d64:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	0952      	lsrs	r2, r2, #5
 8001d6e:	e7e4      	b.n	8001d3a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	24009e20 	.word	0x24009e20
 8001d78:	58022400 	.word	0x58022400
 8001d7c:	58021400 	.word	0x58021400

08001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001d80:	2803      	cmp	r0, #3
 8001d82:	d825      	bhi.n	8001dd0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001d84:	e8df f000 	tbb	[pc, r0]
 8001d88:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001d8e:	2108      	movs	r1, #8
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	3a00      	subs	r2, #0
 8001d94:	bf18      	it	ne
 8001d96:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001d98:	480f      	ldr	r0, [pc, #60]	@ (8001dd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001d9a:	f006 bbf5 	b.w	8008588 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001da0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	3a00      	subs	r2, #0
 8001da8:	bf18      	it	ne
 8001daa:	2201      	movne	r2, #1
 8001dac:	e7f4      	b.n	8001d98 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001db0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	3a00      	subs	r2, #0
 8001db8:	bf18      	it	ne
 8001dba:	2201      	movne	r2, #1
 8001dbc:	e7ec      	b.n	8001d98 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc4:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	3a00      	subs	r2, #0
 8001dca:	bf18      	it	ne
 8001dcc:	2201      	movne	r2, #1
 8001dce:	e7e4      	b.n	8001d9a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	24009e20 	.word	0x24009e20
 8001dd8:	58022400 	.word	0x58022400
 8001ddc:	58021400 	.word	0x58021400

08001de0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001de0:	2803      	cmp	r0, #3
 8001de2:	d811      	bhi.n	8001e08 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001de4:	e8df f000 	tbb	[pc, r0]
 8001de8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001dec:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001dee:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001df0:	f006 bbcf 	b.w	8008592 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df8:	e7f9      	b.n	8001dee <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001dfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dfe:	e7f6      	b.n	8001dee <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001e06:	e7f3      	b.n	8001df0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	58022400 	.word	0x58022400
 8001e10:	58021400 	.word	0x58021400

08001e14 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001e14:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001e16:	2803      	cmp	r0, #3
 8001e18:	d815      	bhi.n	8001e46 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001e1a:	e8df f000 	tbb	[pc, r0]
 8001e1e:	0a02      	.short	0x0a02
 8001e20:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e22:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e24:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e26:	f006 fba9 	bl	800857c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001e2a:	1e43      	subs	r3, r0, #1
 8001e2c:	4258      	negs	r0, r3
 8001e2e:	4158      	adcs	r0, r3
 8001e30:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e36:	e7f5      	b.n	8001e24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e3c:	e7f2      	b.n	8001e24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e42:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001e44:	e7ef      	b.n	8001e26 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001e46:	2000      	movs	r0, #0
 8001e48:	e7ef      	b.n	8001e2a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001e4a:	bf00      	nop
 8001e4c:	58022400 	.word	0x58022400
 8001e50:	58021400 	.word	0x58021400

08001e54 <_ZN8touchgfx4GPIO4initEv>:
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	4d08      	ldr	r5, [pc, #32]	@ (8001e78 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001e58:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001e5a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001e5c:	b2e0      	uxtb	r0, r4
 8001e5e:	f7ff ffd9 	bl	8001e14 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001e62:	b118      	cbz	r0, 8001e6c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001e68:	bf18      	it	ne
 8001e6a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001e6c:	3401      	adds	r4, #1
 8001e6e:	3504      	adds	r5, #4
 8001e70:	2c05      	cmp	r4, #5
 8001e72:	d1f3      	bne.n	8001e5c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
 8001e76:	bf00      	nop
 8001e78:	24009e20 	.word	0x24009e20

08001e7c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001e7c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001e7e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001e82:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001e86:	4770      	bx	lr

08001e88 <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001e88:	4770      	bx	lr

08001e8a <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	4770      	bx	lr
	...

08001e90 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001e90:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001e92:	3900      	subs	r1, #0
 8001e94:	4b02      	ldr	r3, [pc, #8]	@ (8001ea0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001e96:	bf18      	it	ne
 8001e98:	2101      	movne	r1, #1
 8001e9a:	7019      	strb	r1, [r3, #0]
    }
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	24025933 	.word	0x24025933

08001ea4 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001ea4:	4770      	bx	lr

08001ea6 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	4770      	bx	lr

08001eaa <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001eaa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001eac:	b10b      	cbz	r3, 8001eb2 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001eae:	4608      	mov	r0, r1
 8001eb0:	4718      	bx	r3
        }
    }
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001eb4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001eb8:	4770      	bx	lr

08001eba <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001eba:	6840      	ldr	r0, [r0, #4]
 8001ebc:	6803      	ldr	r3, [r0, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4718      	bx	r3

08001ec2 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001ec2:	4770      	bx	lr

08001ec4 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001ec4:	4770      	bx	lr
	...

08001ec8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001ec8:	4b01      	ldr	r3, [pc, #4]	@ (8001ed0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	24009e44 	.word	0x24009e44

08001ed4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ed4:	4770      	bx	lr

08001ed6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ed6:	f001 bc8e 	b.w	80037f6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001eda <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001eda:	f001 bc1f 	b.w	800371c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001ede <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001ede:	f001 bdef 	b.w	8003ac0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ee2 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001ee2:	f001 bde1 	b.w	8003aa8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001ee8 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001eec:	f001 fda4 	bl	8003a38 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ef0:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ef4:	b113      	cbz	r3, 8001efc <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001ef6:	4b02      	ldr	r3, [pc, #8]	@ (8001f00 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
    }
}
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	bf00      	nop
 8001f00:	2400000c 	.word	0x2400000c

08001f04 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f04:	f001 bc12 	b.w	800372c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001f08 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001f0c:	f00e f9c6 	bl	801029c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	4620      	mov	r0, r4
 8001f14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 8001f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001f1c:	4718      	bx	r3

08001f1e <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001f1e:	b510      	push	{r4, lr}
 8001f20:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001f22:	f00d fd21 	bl	800f968 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001f26:	6860      	ldr	r0, [r4, #4]
 8001f28:	6803      	ldr	r3, [r0, #0]
    }
 8001f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4718      	bx	r3

08001f32 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001f32:	f00d bbe1 	b.w	800f6f8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001f36 <_ZN11TouchGFXHALD0Ev>:
 8001f36:	b510      	push	{r4, lr}
 8001f38:	4604      	mov	r4, r0
 8001f3a:	2184      	movs	r1, #132	@ 0x84
 8001f3c:	f022 f982 	bl	8024244 <_ZdlPvj>
 8001f40:	4620      	mov	r0, r4
 8001f42:	bd10      	pop	{r4, pc}

08001f44 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001f44:	4b02      	ldr	r3, [pc, #8]	@ (8001f50 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001f4a:	f00d bc11 	b.w	800f770 <_ZN8touchgfx3HAL10beginFrameEv>
 8001f4e:	bf00      	nop
 8001f50:	2400000c 	.word	0x2400000c

08001f54 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4604      	mov	r4, r0
    mcuInstr.init();
 8001f58:	4d06      	ldr	r5, [pc, #24]	@ (8001f74 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001f5a:	f001 fc0d 	bl	8003778 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001f5e:	2300      	movs	r3, #0
    mcuInstr.init();
 8001f60:	4628      	mov	r0, r5
 8001f62:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001f66:	f7ff fe35 	bl	8001bd4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001f6a:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f6c:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f6e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	24009e34 	.word	0x24009e34

08001f78 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001f78:	6803      	ldr	r3, [r0, #0]
{
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f82:	4798      	blx	r3
    enableInterrupts();
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	4620      	mov	r0, r4
 8001f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f8a:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001f8c:	f000 ff66 	bl	8002e5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	4620      	mov	r0, r4
 8001f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f96:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2329      	movs	r3, #41	@ 0x29
 8001f9c:	2215      	movs	r2, #21
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001fa0:	9100      	str	r1, [sp, #0]
 8001fa2:	f006 f860 	bl	8008066 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001fa6:	f000 ff59 	bl	8002e5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	4620      	mov	r0, r4
 8001fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb0:	4798      	blx	r3
    for (;;)
 8001fb2:	e7f8      	b.n	8001fa6 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001fb4:	24009cc0 	.word	0x24009cc0

08001fb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 8001fb8:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001fbe:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001fc0:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001fc4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001fc6:	428c      	cmp	r4, r1
 8001fc8:	d009      	beq.n	8001fde <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001fca:	b93a      	cbnz	r2, 8001fdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001fcc:	490a      	ldr	r1, [pc, #40]	@ (8001ff8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fce:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001fd0:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fd2:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001fd4:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001fd6:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fd8:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 8001fda:	701a      	strb	r2, [r3, #0]
    }
 8001fdc:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d0fc      	beq.n	8001fdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fe2:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001fe4:	4904      	ldr	r1, [pc, #16]	@ (8001ff8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fe6:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001fe8:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fea:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001fec:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001fee:	2200      	movs	r2, #0
 8001ff0:	e7f3      	b.n	8001fda <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001ff2:	bf00      	nop
 8001ff4:	2402592c 	.word	0x2402592c
 8001ff8:	2402592a 	.word	0x2402592a
 8001ffc:	24025928 	.word	0x24025928

08002000 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002000:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	428b      	cmp	r3, r1
 8002008:	d803      	bhi.n	8002012 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800200a:	4b08      	ldr	r3, [pc, #32]	@ (800202c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	4293      	cmp	r3, r2
 8002010:	d905      	bls.n	800201e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002014:	21a3      	movs	r1, #163	@ 0xa3
 8002016:	4a07      	ldr	r2, [pc, #28]	@ (8002034 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8002018:	4807      	ldr	r0, [pc, #28]	@ (8002038 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800201a:	f022 fc89 	bl	8024930 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002020:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002024:	801a      	strh	r2, [r3, #0]
    }
 8002026:	bd08      	pop	{r3, pc}
 8002028:	24025928 	.word	0x24025928
 800202c:	2402592a 	.word	0x2402592a
 8002030:	08025e1e 	.word	0x08025e1e
 8002034:	08025e81 	.word	0x08025e81
 8002038:	08025ec4 	.word	0x08025ec4
 800203c:	2402592e 	.word	0x2402592e
 8002040:	24025930 	.word	0x24025930

08002044 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002044:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8002046:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800204a:	b118      	cbz	r0, 8002054 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 800204c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 800204e:	6803      	ldr	r3, [r0, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4718      	bx	r3
    }
 8002054:	4770      	bx	lr
	...

08002058 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	460d      	mov	r5, r1
 800205c:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002060:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002062:	b935      	cbnz	r5, 8002072 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002064:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8002066:	f240 21ff 	movw	r1, #767	@ 0x2ff
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 800206c:	480a      	ldr	r0, [pc, #40]	@ (8002098 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 800206e:	f022 fc5f 	bl	8024930 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002072:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8002076:	3a00      	subs	r2, #0
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800207a:	bf18      	it	ne
 800207c:	2201      	movne	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002080:	6803      	ldr	r3, [r0, #0]
}
 8002082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208a:	4718      	bx	r3
 800208c:	24009e44 	.word	0x24009e44
 8002090:	08025f17 	.word	0x08025f17
 8002094:	08025f4f 	.word	0x08025f4f
 8002098:	08025ec4 	.word	0x08025ec4
 800209c:	24025932 	.word	0x24025932

080020a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020a0:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 80020a2:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 80020a6:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80020a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 80020ac:	2300      	movs	r3, #0
 80020ae:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80020b2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 80020b6:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80020b8:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80020ba:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80020be:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80020c0:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80020c2:	8603      	strh	r3, [r0, #48]	@ 0x30
 80020c4:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 80020c6:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80020ca:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80020cc:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 80020ce:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 80020d2:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 80020d8:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80020dc:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 80020de:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80020e2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80020e6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80020ea:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 80020ee:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80020f2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 80020f6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 80020fa:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80020fc:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 80020fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002102:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 8002106:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800210a:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 800210e:	fbb2 f2f1 	udiv	r2, r2, r1
 8002112:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 8002116:	f04f 0214 	mov.w	r2, #20
 800211a:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 800211e:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8002120:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002122:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8002124:	8015      	strh	r5, [r2, #0]
 8002126:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 8002128:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800212a:	bf28      	it	cs
 800212c:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800212e:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002130:	bf38      	it	cc
 8002132:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002134:	8016      	strh	r6, [r2, #0]
 8002136:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002138:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800213c:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800213e:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8002140:	7013      	strb	r3, [r2, #0]
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8002144:	6003      	str	r3, [r0, #0]
}
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	01000001 	.word	0x01000001
 800214c:	01010000 	.word	0x01010000
 8002150:	24025934 	.word	0x24025934
 8002154:	24025928 	.word	0x24025928
 8002158:	2402592e 	.word	0x2402592e
 800215c:	2402592a 	.word	0x2402592a
 8002160:	24025930 	.word	0x24025930
 8002164:	2402592c 	.word	0x2402592c
 8002168:	08027ccc 	.word	0x08027ccc

0800216c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 800216c:	2b01      	cmp	r3, #1
    {
 800216e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002170:	d80e      	bhi.n	8002190 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	2215      	movs	r2, #21
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	460b      	mov	r3, r1
 800217a:	4601      	mov	r1, r0
 800217c:	4808      	ldr	r0, [pc, #32]	@ (80021a0 <DSI_IO_Write+0x34>)
 800217e:	f005 ff72 	bl	8008066 <HAL_DSI_ShortWrite>
 8002182:	b118      	cbz	r0, 800218c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002184:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8002188:	b002      	add	sp, #8
 800218a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 800218c:	2000      	movs	r0, #0
 800218e:	e7fb      	b.n	8002188 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002190:	e9cd 1200 	strd	r1, r2, [sp]
 8002194:	4601      	mov	r1, r0
 8002196:	2239      	movs	r2, #57	@ 0x39
 8002198:	4801      	ldr	r0, [pc, #4]	@ (80021a0 <DSI_IO_Write+0x34>)
 800219a:	f005 ff75 	bl	8008088 <HAL_DSI_LongWrite>
 800219e:	e7f0      	b.n	8002182 <DSI_IO_Write+0x16>
 80021a0:	24009cc0 	.word	0x24009cc0

080021a4 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 80021a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80021a6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80021aa:	2106      	movs	r1, #6
 80021ac:	9100      	str	r1, [sp, #0]
 80021ae:	4601      	mov	r1, r0
 80021b0:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <DSI_IO_Read+0x24>)
 80021b2:	f005 ffc9 	bl	8008148 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80021b6:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80021b8:	bf14      	ite	ne
 80021ba:	f06f 0007 	mvnne.w	r0, #7
 80021be:	2000      	moveq	r0, #0
 80021c0:	b005      	add	sp, #20
 80021c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80021c6:	bf00      	nop
 80021c8:	24009cc0 	.word	0x24009cc0

080021cc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80021cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80021ce:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021d2:	4c0b      	ldr	r4, [pc, #44]	@ (8002200 <LCD_ReqTear+0x34>)
 80021d4:	2239      	movs	r2, #57	@ 0x39
 80021d6:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80021d8:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021dc:	ab03      	add	r3, sp, #12
 80021de:	4620      	mov	r0, r4
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2344      	movs	r3, #68	@ 0x44
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2302      	movs	r3, #2
 80021e8:	f005 ff4e 	bl	8008088 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2335      	movs	r3, #53	@ 0x35
 80021f0:	2215      	movs	r2, #21
 80021f2:	4620      	mov	r0, r4
 80021f4:	9100      	str	r1, [sp, #0]
 80021f6:	f005 ff36 	bl	8008066 <HAL_DSI_ShortWrite>
    }
 80021fa:	b004      	add	sp, #16
 80021fc:	bd10      	pop	{r4, pc}
 80021fe:	bf00      	nop
 8002200:	24009cc0 	.word	0x24009cc0

08002204 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8002204:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8002206:	f7ff ffe1 	bl	80021cc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 800220c:	2202      	movs	r2, #2
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8002214:	2201      	movs	r2, #1
 8002216:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800221a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8002226:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800222a:	f042 0202 	orr.w	r2, r2, #2
 800222e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002232:	2203      	movs	r2, #3
 8002234:	4b02      	ldr	r3, [pc, #8]	@ (8002240 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8002236:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002238:	bd08      	pop	{r3, pc}
 800223a:	bf00      	nop
 800223c:	24009cc0 	.word	0x24009cc0
 8002240:	50001000 	.word	0x50001000

08002244 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002244:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <LCD_ReqEnable+0x20>)
    {
 8002246:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8002248:	7819      	ldrb	r1, [r3, #0]
 800224a:	b939      	cbnz	r1, 800225c <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 800224c:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 800224e:	4806      	ldr	r0, [pc, #24]	@ (8002268 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002250:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002252:	2329      	movs	r3, #41	@ 0x29
 8002254:	2215      	movs	r2, #21
 8002256:	9100      	str	r1, [sp, #0]
 8002258:	f005 ff05 	bl	8008066 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 800225c:	b003      	add	sp, #12
 800225e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002262:	bf00      	nop
 8002264:	24009e30 	.word	0x24009e30
 8002268:	24009cc0 	.word	0x24009cc0

0800226c <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 800226e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	232a      	movs	r3, #42	@ 0x2a
 8002274:	2239      	movs	r2, #57	@ 0x39
 8002276:	2100      	movs	r1, #0
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2304      	movs	r3, #4
 800227c:	4803      	ldr	r0, [pc, #12]	@ (800228c <LCD_SetUpdateRegionLeft+0x20>)
 800227e:	f005 ff03 	bl	8008088 <HAL_DSI_LongWrite>
    }
 8002282:	b003      	add	sp, #12
 8002284:	f85d fb04 	ldr.w	pc, [sp], #4
 8002288:	24000008 	.word	0x24000008
 800228c:	24009cc0 	.word	0x24009cc0

08002290 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002292:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	232a      	movs	r3, #42	@ 0x2a
 8002298:	2239      	movs	r2, #57	@ 0x39
 800229a:	2100      	movs	r1, #0
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2304      	movs	r3, #4
 80022a0:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <LCD_SetUpdateRegionRight+0x20>)
 80022a2:	f005 fef1 	bl	8008088 <HAL_DSI_LongWrite>
    }
 80022a6:	b003      	add	sp, #12
 80022a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80022ac:	24000004 	.word	0x24000004
 80022b0:	24009cc0 	.word	0x24009cc0

080022b4 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80022b4:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80022b6:	4d15      	ldr	r5, [pc, #84]	@ (800230c <HAL_DSI_TearingEffectCallback+0x58>)
 80022b8:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7ff fd30 	bl	8001d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80022c0:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 80022c2:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 80022c6:	3201      	adds	r2, #1
 80022c8:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80022d2:	f000 fdb7 	bl	8002e44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80022d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 80022d8:	682a      	ldr	r2, [r5, #0]
 80022da:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80022e2:	b173      	cbz	r3, 8002302 <HAL_DSI_TearingEffectCallback+0x4e>
 80022e4:	4d0b      	ldr	r5, [pc, #44]	@ (8002314 <HAL_DSI_TearingEffectCallback+0x60>)
 80022e6:	782b      	ldrb	r3, [r5, #0]
 80022e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022ec:	b94b      	cbnz	r3, 8002302 <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_DSI_TearingEffectCallback+0x64>)
 80022f0:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80022f2:	f7ff ffbb 	bl	800226c <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f005 fea5 	bl	8008046 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80022fc:	2301      	movs	r3, #1
 80022fe:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002300:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002302:	2000      	movs	r0, #0
    }
 8002304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002308:	f7ff bd3a 	b.w	8001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800230c:	24025934 	.word	0x24025934
 8002310:	2400000c 	.word	0x2400000c
 8002314:	24009e4c 	.word	0x24009e4c
 8002318:	24009e48 	.word	0x24009e48

0800231c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 800231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002320:	4e49      	ldr	r6, [pc, #292]	@ (8002448 <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 8002322:	b085      	sub	sp, #20
 8002324:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002326:	7833      	ldrb	r3, [r6, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8089 	beq.w	8002440 <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 800232e:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 800246c <HAL_DSI_EndOfRefreshCallback+0x150>
 8002332:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8002470 <HAL_DSI_EndOfRefreshCallback+0x154>
 8002336:	f8d9 5000 	ldr.w	r5, [r9]
 800233a:	4f44      	ldr	r7, [pc, #272]	@ (800244c <HAL_DSI_EndOfRefreshCallback+0x130>)
 800233c:	2d00      	cmp	r5, #0
 800233e:	d13e      	bne.n	80023be <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002340:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002342:	4e43      	ldr	r6, [pc, #268]	@ (8002450 <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8002344:	f005 f916 	bl	8007574 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	9500      	str	r5, [sp, #0]
 800234c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002350:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002352:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002356:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800235a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800235e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002362:	f002 0208 	and.w	r2, r2, #8
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800236a:	f8d8 2000 	ldr.w	r2, [r8]
 800236e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002372:	4838      	ldr	r0, [pc, #224]	@ (8002454 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002374:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002376:	4e38      	ldr	r6, [pc, #224]	@ (8002458 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8002378:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800237a:	4838      	ldr	r0, [pc, #224]	@ (800245c <HAL_DSI_EndOfRefreshCallback+0x140>)
 800237c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002380:	4837      	ldr	r0, [pc, #220]	@ (8002460 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8002382:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002386:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002388:	f041 0101 	orr.w	r1, r1, #1
 800238c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800238e:	9501      	str	r5, [sp, #4]
 8002390:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002394:	f042 0208 	orr.w	r2, r2, #8
 8002398:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800239c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80023a8:	f7ff ff72 	bl	8002290 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80023ac:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80023ae:	4620      	mov	r0, r4
                updateRegion = 1;
 80023b0:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80023b4:	b005      	add	sp, #20
 80023b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80023ba:	f005 be44 	b.w	8008046 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023be:	6803      	ldr	r3, [r0, #0]
 80023c0:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023c2:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023c4:	9502      	str	r5, [sp, #8]
 80023c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023ca:	4c26      	ldr	r4, [pc, #152]	@ (8002464 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80023d4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023d8:	f002 0208 	and.w	r2, r2, #8
 80023dc:	9202      	str	r2, [sp, #8]
 80023de:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023e0:	f8d8 2000 	ldr.w	r2, [r8]
 80023e4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023e8:	481a      	ldr	r0, [pc, #104]	@ (8002454 <HAL_DSI_EndOfRefreshCallback+0x138>)
 80023ea:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80023ec:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80023f0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80023f2:	481a      	ldr	r0, [pc, #104]	@ (800245c <HAL_DSI_EndOfRefreshCallback+0x140>)
 80023f4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80023f8:	4819      	ldr	r0, [pc, #100]	@ (8002460 <HAL_DSI_EndOfRefreshCallback+0x144>)
 80023fa:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80023fe:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002400:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002402:	f041 0101 	orr.w	r1, r1, #1
 8002406:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002408:	9503      	str	r5, [sp, #12]
 800240a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002416:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002422:	f7ff fcad 	bl	8001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002426:	f7ff ff0d 	bl	8002244 <LCD_ReqEnable>
        return instance;
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 800242c:	7035      	strb	r5, [r6, #0]
 800242e:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 8002430:	b134      	cbz	r4, 8002440 <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	4620      	mov	r0, r4
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4798      	blx	r3
        isFrontPorchEntered = true;
 800243a:	2301      	movs	r3, #1
 800243c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 8002440:	b005      	add	sp, #20
 8002442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002446:	bf00      	nop
 8002448:	24009e4c 	.word	0x24009e4c
 800244c:	24009e44 	.word	0x24009e44
 8002450:	01b201e2 	.word	0x01b201e2
 8002454:	50001000 	.word	0x50001000
 8002458:	019201e3 	.word	0x019201e3
 800245c:	01920003 	.word	0x01920003
 8002460:	09c004b3 	.word	0x09c004b3
 8002464:	019201e2 	.word	0x019201e2
 8002468:	24025934 	.word	0x24025934
 800246c:	24009e48 	.word	0x24009e48
 8002470:	24009ae8 	.word	0x24009ae8

08002474 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002474:	4601      	mov	r1, r0
 8002476:	b508      	push	{r3, lr}
        return instance;
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <IdleTaskHook+0x14>)
 800247a:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 800247c:	b101      	cbz	r1, 8002480 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800247e:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002480:	f00d ff26 	bl	80102d0 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002484:	2001      	movs	r0, #1
 8002486:	bd08      	pop	{r3, pc}
 8002488:	24025934 	.word	0x24025934

0800248c <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800248e:	2200      	movs	r2, #0
 8002490:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	4a02      	ldr	r2, [pc, #8]	@ (80024a0 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002496:	601a      	str	r2, [r3, #0]

}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	24009e34 	.word	0x24009e34
 80024a0:	08027c8c 	.word	0x08027c8c

080024a4 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80024a4:	6940      	ldr	r0, [r0, #20]
 80024a6:	4770      	bx	lr

080024a8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80024a8:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80024ac:	4770      	bx	lr

080024ae <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80024ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80024b0:	b923      	cbnz	r3, 80024bc <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80024b2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80024b4:	3800      	subs	r0, #0
 80024b6:	bf18      	it	ne
 80024b8:	2001      	movne	r0, #1
 80024ba:	4770      	bx	lr
 80024bc:	2001      	movs	r0, #1
}
 80024be:	4770      	bx	lr

080024c0 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80024c0:	6880      	ldr	r0, [r0, #8]
 80024c2:	4770      	bx	lr

080024c4 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80024c4:	4770      	bx	lr

080024c6 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80024c6:	3004      	adds	r0, #4
{
 80024c8:	b510      	push	{r4, lr}
 80024ca:	460c      	mov	r4, r1
    *data = videoInfo;
 80024cc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80024ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80024d2:	bd10      	pop	{r4, pc}

080024d4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80024d4:	4770      	bx	lr
	...

080024d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80024d8:	b508      	push	{r3, lr}
    assert(0);
 80024da:	4a03      	ldr	r2, [pc, #12]	@ (80024e8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80024dc:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 80024e0:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80024e2:	4803      	ldr	r0, [pc, #12]	@ (80024f0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80024e4:	f022 fa24 	bl	8024930 <__assert_func>
 80024e8:	08025f9d 	.word	0x08025f9d
 80024ec:	080279c2 	.word	0x080279c2
 80024f0:	08025ff8 	.word	0x08025ff8

080024f4 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80024f4:	b510      	push	{r4, lr}
 80024f6:	4604      	mov	r4, r0
 80024f8:	2148      	movs	r1, #72	@ 0x48
 80024fa:	f021 fea3 	bl	8024244 <_ZdlPvj>
 80024fe:	4620      	mov	r0, r4
 8002500:	bd10      	pop	{r4, pc}
	...

08002504 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002504:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002508:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 800250a:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800250c:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800250e:	6003      	str	r3, [r0, #0]
 8002510:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8002512:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002516:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800251a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800251e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002522:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002526:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 800252a:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800252e:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002532:	2001      	movs	r0, #1
 8002534:	f00a fd5a 	bl	800cfec <osSemaphoreNew>
 8002538:	4b02      	ldr	r3, [pc, #8]	@ (8002544 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800253a:	6018      	str	r0, [r3, #0]
}
 800253c:	4620      	mov	r0, r4
 800253e:	bd10      	pop	{r4, pc}
 8002540:	08027db8 	.word	0x08027db8
 8002544:	24009e6c 	.word	0x24009e6c

08002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002548:	b410      	push	{r4}
 800254a:	460c      	mov	r4, r1
 800254c:	4611      	mov	r1, r2
 800254e:	461a      	mov	r2, r3
    if (reader != 0)
 8002550:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002552:	b13b      	cbz	r3, 8002564 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002554:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002556:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002558:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800255a:	4420      	add	r0, r4
}
 800255c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002560:	f022 bcac 	b.w	8024ebc <strncmp>
        src = (const char*)movieData + offset;
 8002564:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002566:	e7f8      	b.n	800255a <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002568 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002568:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800256a:	b510      	push	{r4, lr}
    if (reader != 0)
 800256c:	b173      	cbz	r3, 800258c <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800256e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002570:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002572:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002574:	1853      	adds	r3, r2, r1
 8002576:	5c52      	ldrb	r2, [r2, r1]
 8002578:	7898      	ldrb	r0, [r3, #2]
 800257a:	785c      	ldrb	r4, [r3, #1]
 800257c:	0400      	lsls	r0, r0, #16
 800257e:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002582:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002584:	78db      	ldrb	r3, [r3, #3]
 8002586:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800258a:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 800258c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800258e:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002590:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002592:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002594:	7898      	ldrb	r0, [r3, #2]
 8002596:	0400      	lsls	r0, r0, #16
 8002598:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800259c:	e7f1      	b.n	8002582 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800259e <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800259e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80025a0:	b143      	cbz	r3, 80025b4 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80025a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80025a4:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80025a6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80025a8:	185a      	adds	r2, r3, r1
 80025aa:	5c58      	ldrb	r0, [r3, r1]
 80025ac:	7852      	ldrb	r2, [r2, #1]
 80025ae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80025b2:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80025b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80025b6:	185a      	adds	r2, r3, r1
        val |= d[0];
 80025b8:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80025ba:	7853      	ldrb	r3, [r2, #1]
 80025bc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80025c0:	4770      	bx	lr
	...

080025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	4604      	mov	r4, r0
    if (reader != 0)
 80025c8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80025ca:	460d      	mov	r5, r1
 80025cc:	4616      	mov	r6, r2
    if (reader != 0)
 80025ce:	b1d8      	cbz	r0, 8002608 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80025d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d208      	bcs.n	80025e8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025d6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80025d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002610 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80025da:	21a0      	movs	r1, #160	@ 0xa0
 80025dc:	480d      	ldr	r0, [pc, #52]	@ (8002614 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80025e4:	f022 f9a4 	bl	8024930 <__assert_func>
        reader->seek(offset);
 80025e8:	6803      	ldr	r3, [r0, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80025ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80025f0:	4632      	mov	r2, r6
 80025f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025f4:	6803      	ldr	r3, [r0, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	4798      	blx	r3
 80025fa:	b910      	cbnz	r0, 8002602 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80025fc:	230d      	movs	r3, #13
 80025fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002602:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002604:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002606:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002608:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800260a:	4408      	add	r0, r1
 800260c:	e7fb      	b.n	8002606 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800260e:	bf00      	nop
 8002610:	0802605f 	.word	0x0802605f
 8002614:	08025ff8 	.word	0x08025ff8
 8002618:	0802604c 	.word	0x0802604c

0800261c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 800261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002620:	6943      	ldr	r3, [r0, #20]
{
 8002622:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002624:	b92b      	cbnz	r3, 8002632 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002626:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002628:	21e6      	movs	r1, #230	@ 0xe6
 800262a:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 800262c:	4822      	ldr	r0, [pc, #136]	@ (80026b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800262e:	f022 f97f 	bl	8024930 <__assert_func>
    readData(currentMovieOffset, 8);
 8002632:	2208      	movs	r2, #8
 8002634:	6981      	ldr	r1, [r0, #24]
 8002636:	f7ff ffc5 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800263a:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800263c:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002640:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002644:	3104      	adds	r1, #4
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff ff8e 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800264c:	69a3      	ldr	r3, [r4, #24]
 800264e:	4418      	add	r0, r3
 8002650:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002652:	f100 0208 	add.w	r2, r0, #8
 8002656:	429a      	cmp	r2, r3
 8002658:	d306      	bcc.n	8002668 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800265a:	2301      	movs	r3, #1
    return false;
 800265c:	2000      	movs	r0, #0
    frameNumber = 1;
 800265e:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002660:	6a23      	ldr	r3, [r4, #32]
 8002662:	61a3      	str	r3, [r4, #24]
}
 8002664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002668:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800266a:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800266e:	2208      	movs	r2, #8
 8002670:	4620      	mov	r0, r4
        frameNumber++;
 8002672:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002674:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002678:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800267a:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 800267c:	f7ff ffa2 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002680:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002684:	4620      	mov	r0, r4
 8002686:	4649      	mov	r1, r9
 8002688:	f7ff ff89 	bl	800259e <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800268c:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002690:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff ff83 	bl	800259e <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002698:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800269c:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800269e:	4620      	mov	r0, r4
 80026a0:	f7ff ff62 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80026a4:	45b0      	cmp	r8, r6
 80026a6:	d1d1      	bne.n	800264c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80026a8:	42bd      	cmp	r5, r7
 80026aa:	d1cf      	bne.n	800264c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7d9      	b.n	8002664 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80026b0:	080260a1 	.word	0x080260a1
 80026b4:	080260ea 	.word	0x080260ea
 80026b8:	08025ff8 	.word	0x08025ff8

080026bc <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80026bc:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	bf38      	it	cc
 80026c2:	2101      	movcc	r1, #1
 80026c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80026c6:	b570      	push	{r4, r5, r6, lr}
 80026c8:	460d      	mov	r5, r1
 80026ca:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80026cc:	4798      	blx	r3
 80026ce:	42a8      	cmp	r0, r5
 80026d0:	d204      	bcs.n	80026dc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	4620      	mov	r0, r4
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	4798      	blx	r3
 80026da:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026dc:	1e6b      	subs	r3, r5, #1
 80026de:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80026e0:	2210      	movs	r2, #16
 80026e2:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026e4:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80026e8:	f106 0108 	add.w	r1, r6, #8
 80026ec:	f7ff ff6a 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026f0:	f106 0110 	add.w	r1, r6, #16
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff37 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80026fa:	6a23      	ldr	r3, [r4, #32]
 80026fc:	3b04      	subs	r3, #4
 80026fe:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002700:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002704:	bd70      	pop	{r4, r5, r6, pc}
	...

08002708 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002708:	2100      	movs	r1, #0
    readData(0, 72);
 800270a:	2248      	movs	r2, #72	@ 0x48
{
 800270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002710:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8002712:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002714:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002718:	f7ff ff54 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 800271c:	69a6      	ldr	r6, [r4, #24]
 800271e:	2304      	movs	r3, #4
 8002720:	4a63      	ldr	r2, [pc, #396]	@ (80028b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002722:	4631      	mov	r1, r6
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ff0f 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800272a:	b148      	cbz	r0, 8002740 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 800272c:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800272e:	4a61      	ldr	r2, [pc, #388]	@ (80028b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002730:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002734:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002738:	4b5f      	ldr	r3, [pc, #380]	@ (80028b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800273a:	4860      	ldr	r0, [pc, #384]	@ (80028bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800273c:	f022 f8f8 	bl	8024930 <__assert_func>
    currentMovieOffset += 8;
 8002740:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002744:	2304      	movs	r3, #4
 8002746:	4a5e      	ldr	r2, [pc, #376]	@ (80028c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002748:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800274a:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 800274c:	f7ff fefc 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002750:	b138      	cbz	r0, 8002762 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002752:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002754:	4a57      	ldr	r2, [pc, #348]	@ (80028b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002756:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800275a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800275e:	4b59      	ldr	r3, [pc, #356]	@ (80028c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002760:	e7eb      	b.n	800273a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002762:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002766:	2304      	movs	r3, #4
 8002768:	4a57      	ldr	r2, [pc, #348]	@ (80028c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800276a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800276c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800276e:	f7ff feeb 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002772:	4607      	mov	r7, r0
 8002774:	b138      	cbz	r0, 8002786 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002776:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002778:	4a4e      	ldr	r2, [pc, #312]	@ (80028b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800277a:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800277e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002782:	4b52      	ldr	r3, [pc, #328]	@ (80028cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002784:	e7d9      	b.n	800273a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002786:	f106 0110 	add.w	r1, r6, #16
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff feec 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002790:	4605      	mov	r5, r0
 8002792:	b920      	cbnz	r0, 800279e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002794:	4b4e      	ldr	r3, [pc, #312]	@ (80028d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002796:	f240 1143 	movw	r1, #323	@ 0x143
 800279a:	4a46      	ldr	r2, [pc, #280]	@ (80028b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800279c:	e7cd      	b.n	800273a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800279e:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80027a2:	2304      	movs	r3, #4
 80027a4:	4a4b      	ldr	r2, [pc, #300]	@ (80028d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80027a6:	4620      	mov	r0, r4
 80027a8:	4641      	mov	r1, r8
 80027aa:	f7ff fecd 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d049      	beq.n	8002846 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80027b2:	2306      	movs	r3, #6
 80027b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80027b8:	2304      	movs	r3, #4
 80027ba:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80027bc:	f106 0118 	add.w	r1, r6, #24
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fec1 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d03f      	beq.n	800284a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80027ca:	2307      	movs	r3, #7
 80027cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80027d0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027d2:	4f42      	ldr	r7, [pc, #264]	@ (80028dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80027d4:	220c      	movs	r2, #12
 80027d6:	4620      	mov	r0, r4
 80027d8:	4629      	mov	r1, r5
 80027da:	f7ff fef3 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027de:	f105 0608 	add.w	r6, r5, #8
 80027e2:	2304      	movs	r3, #4
 80027e4:	463a      	mov	r2, r7
 80027e6:	4620      	mov	r0, r4
 80027e8:	4631      	mov	r1, r6
 80027ea:	f7ff fead 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027ee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d048      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d148      	bne.n	800288c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027fc:	42ab      	cmp	r3, r5
 80027fe:	d849      	bhi.n	8002894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002800:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002804:	3504      	adds	r5, #4
 8002806:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002808:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800280a:	4629      	mov	r1, r5
 800280c:	f7ff feac 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002810:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002812:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002814:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff fea6 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800281c:	4406      	add	r6, r0
    readData(listOffset, 4);
 800281e:	2204      	movs	r2, #4
 8002820:	4620      	mov	r0, r4
 8002822:	4631      	mov	r1, r6
 8002824:	f7ff fece 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002828:	2304      	movs	r3, #4
 800282a:	4a2d      	ldr	r2, [pc, #180]	@ (80028e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 800282c:	4631      	mov	r1, r6
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff fe8a 	bl	8002548 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002834:	2800      	cmp	r0, #0
 8002836:	d138      	bne.n	80028aa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002838:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800283a:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 800283c:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800283e:	69a3      	ldr	r3, [r4, #24]
 8002840:	6223      	str	r3, [r4, #32]
}
 8002842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002846:	2701      	movs	r7, #1
 8002848:	e7b6      	b.n	80027b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800284a:	2f00      	cmp	r7, #0
 800284c:	d0c0      	beq.n	80027d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800284e:	f106 0120 	add.w	r1, r6, #32
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fe88 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 800285c:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002860:	fbb0 f0f3 	udiv	r0, r0, r3
 8002864:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002866:	4620      	mov	r0, r4
 8002868:	f7ff fe7e 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 800286c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002870:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff fe78 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002878:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 800287c:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fe72 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002884:	6120      	str	r0, [r4, #16]
 8002886:	e7a3      	b.n	80027d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0b9      	beq.n	8002800 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 800288c:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800288e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002892:	e7d6      	b.n	8002842 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002894:	1d29      	adds	r1, r5, #4
 8002896:	4620      	mov	r0, r4
 8002898:	f7ff fe66 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 800289c:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800289e:	220c      	movs	r2, #12
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7ff fe8e 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80028a8:	e799      	b.n	80027de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80028aa:	230b      	movs	r3, #11
 80028ac:	e7ef      	b.n	800288e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80028ae:	bf00      	nop
 80028b0:	0802611d 	.word	0x0802611d
 80028b4:	0802613b 	.word	0x0802613b
 80028b8:	08026122 	.word	0x08026122
 80028bc:	08025ff8 	.word	0x08025ff8
 80028c0:	08026168 	.word	0x08026168
 80028c4:	0802616d 	.word	0x0802616d
 80028c8:	08026185 	.word	0x08026185
 80028cc:	0802618a 	.word	0x0802618a
 80028d0:	080261a0 	.word	0x080261a0
 80028d4:	080261ac 	.word	0x080261ac
 80028d8:	080261b1 	.word	0x080261b1
 80028dc:	080261b6 	.word	0x080261b6
 80028e0:	080261bb 	.word	0x080261bb

080028e4 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80028e4:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80028e8:	2200      	movs	r2, #0
 80028ea:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80028ec:	f7ff bf0c 	b.w	8002708 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080028f0 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028f0:	b510      	push	{r4, lr}
    movieData = 0;
 80028f2:	2300      	movs	r3, #0
{
 80028f4:	4604      	mov	r4, r0
 80028f6:	4608      	mov	r0, r1
    movieData = 0;
 80028f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80028fa:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028fc:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4798      	blx	r3
 8002902:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002904:	4620      	mov	r0, r4
}
 8002906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800290a:	f7ff befd 	b.w	8002708 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002910 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002910:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <JPEG_Decode_DMA+0x50>)
 8002914:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002916:	4d13      	ldr	r5, [pc, #76]	@ (8002964 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 8002918:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 800291a:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <JPEG_Decode_DMA+0x58>)
 800291c:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 800291e:	4b13      	ldr	r3, [pc, #76]	@ (800296c <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002920:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002922:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <JPEG_Decode_DMA+0x60>)
 8002926:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002928:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <JPEG_Decode_DMA+0x64>)
 800292a:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <JPEG_Decode_DMA+0x68>)
 800292e:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002932:	682a      	ldr	r2, [r5, #0]
 8002934:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002938:	701c      	strb	r4, [r3, #0]
 800293a:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 800293c:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002940:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002944:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002948:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <JPEG_Decode_DMA+0x70>)
 800294a:	68d2      	ldr	r2, [r2, #12]
 800294c:	436a      	muls	r2, r5
 800294e:	9200      	str	r2, [sp, #0]
 8002950:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f006 fd1f 	bl	8009398 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800295a:	4620      	mov	r0, r4
 800295c:	b003      	add	sp, #12
 800295e:	bd30      	pop	{r4, r5, pc}
 8002960:	24009e84 	.word	0x24009e84
 8002964:	24009e74 	.word	0x24009e74
 8002968:	24009e68 	.word	0x24009e68
 800296c:	24009e94 	.word	0x24009e94
 8002970:	24009e8c 	.word	0x24009e8c
 8002974:	24009e90 	.word	0x24009e90
 8002978:	24009e70 	.word	0x24009e70
 800297c:	24000010 	.word	0x24000010
 8002980:	24009e50 	.word	0x24009e50

08002984 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002984:	684b      	ldr	r3, [r1, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d115      	bne.n	80029b6 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800298a:	68cb      	ldr	r3, [r1, #12]
 800298c:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 800298e:	bf1e      	ittt	ne
 8002990:	f023 030f 	bicne.w	r3, r3, #15
 8002994:	3310      	addne	r3, #16
 8002996:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002998:	688b      	ldr	r3, [r1, #8]
 800299a:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 800299c:	bf1e      	ittt	ne
 800299e:	f023 030f 	bicne.w	r3, r3, #15
 80029a2:	3310      	addne	r3, #16
 80029a4:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80029a6:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80029a8:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80029aa:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80029ac:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80029ae:	4353      	muls	r3, r2
 80029b0:	4a0e      	ldr	r2, [pc, #56]	@ (80029ec <HAL_JPEG_InfoReadyCallback+0x68>)
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d10e      	bne.n	80029d8 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80029ba:	68cb      	ldr	r3, [r1, #12]
 80029bc:	071a      	lsls	r2, r3, #28
 80029be:	d003      	beq.n	80029c8 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80029c0:	f023 030f 	bic.w	r3, r3, #15
 80029c4:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029c6:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 80029c8:	688b      	ldr	r3, [r1, #8]
 80029ca:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80029cc:	bf1e      	ittt	ne
 80029ce:	f023 0307 	bicne.w	r3, r3, #7
 80029d2:	3308      	addne	r3, #8
 80029d4:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80029d6:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1fc      	bne.n	80029d6 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80029dc:	68cb      	ldr	r3, [r1, #12]
 80029de:	0758      	lsls	r0, r3, #29
 80029e0:	d0f2      	beq.n	80029c8 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029e2:	f023 0307 	bic.w	r3, r3, #7
 80029e6:	3308      	adds	r3, #8
 80029e8:	e7ed      	b.n	80029c6 <HAL_JPEG_InfoReadyCallback+0x42>
 80029ea:	bf00      	nop
 80029ec:	24009e7c 	.word	0x24009e7c

080029f0 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80029f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a20 <HAL_JPEG_GetDataCallback+0x30>)
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	440b      	add	r3, r1
    {
 80029f6:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80029f8:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80029fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002a24 <HAL_JPEG_GetDataCallback+0x34>)
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d20c      	bcs.n	8002a1c <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a02:	4c09      	ldr	r4, [pc, #36]	@ (8002a28 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002a04:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a06:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a08:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a0c:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a0e:	bf28      	it	cs
 8002a10:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a14:	6021      	str	r1, [r4, #0]
        }
    }
 8002a16:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a18:	f006 bd20 	b.w	800945c <HAL_JPEG_ConfigInputBuffer>
    }
 8002a1c:	bc30      	pop	{r4, r5}
 8002a1e:	4770      	bx	lr
 8002a20:	24009e94 	.word	0x24009e94
 8002a24:	24009e90 	.word	0x24009e90
 8002a28:	24009e8c 	.word	0x24009e8c

08002a2c <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a2e:	4c20      	ldr	r4, [pc, #128]	@ (8002ab0 <HAL_JPEG_DataReadyCallback+0x84>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	4d20      	ldr	r5, [pc, #128]	@ (8002ab4 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002a34:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a36:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a38:	4f1f      	ldr	r7, [pc, #124]	@ (8002ab8 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002a44:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002a46:	4b1d      	ldr	r3, [pc, #116]	@ (8002abc <HAL_JPEG_DataReadyCallback+0x90>)
 8002a48:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002a4a:	6822      	ldr	r2, [r4, #0]
 8002a4c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002a50:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	440a      	add	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002a5a:	6823      	ldr	r3, [r4, #0]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d901      	bls.n	8002a6a <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	5ceb      	ldrb	r3, [r5, r3]
 8002a70:	b133      	cbz	r3, 8002a80 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a72:	2102      	movs	r1, #2
 8002a74:	4630      	mov	r0, r6
 8002a76:	f006 fcc3 	bl	8009400 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_JPEG_DataReadyCallback+0x94>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a80:	6822      	ldr	r2, [r4, #0]
 8002a82:	4630      	mov	r0, r6
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002a8a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a8e:	6869      	ldr	r1, [r5, #4]
 8002a90:	435a      	muls	r2, r3
 8002a92:	f006 fce6 	bl	8009462 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002a96:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_JPEG_DataReadyCallback+0x98>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	7a1a      	ldrb	r2, [r3, #8]
 8002a9c:	b93a      	cbnz	r2, 8002aae <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002a9e:	7a9b      	ldrb	r3, [r3, #10]
 8002aa0:	b92b      	cbnz	r3, 8002aae <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002aa2:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002aa4:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002aa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002aaa:	f00a bb15 	b.w	800d0d8 <osSemaphoreRelease>
    }
 8002aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab0:	24009e74 	.word	0x24009e74
 8002ab4:	24000010 	.word	0x24000010
 8002ab8:	24009e50 	.word	0x24009e50
 8002abc:	24009e70 	.word	0x24009e70
 8002ac0:	24009e84 	.word	0x24009e84
 8002ac4:	24009e78 	.word	0x24009e78
 8002ac8:	24009e6c 	.word	0x24009e6c

08002acc <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002acc:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002ace:	e7fe      	b.n	8002ace <HAL_JPEG_ErrorCallback+0x2>

08002ad0 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002ad0:	4b01      	ldr	r3, [pc, #4]	@ (8002ad8 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    }
 8002ad6:	4770      	bx	lr
 8002ad8:	24009e88 	.word	0x24009e88

08002adc <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002adc:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002ade:	4d16      	ldr	r5, [pc, #88]	@ (8002b38 <JPEG_OutputHandler+0x5c>)
{
 8002ae0:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002ae2:	682b      	ldr	r3, [r5, #0]
 8002ae4:	b113      	cbz	r3, 8002aec <JPEG_OutputHandler+0x10>
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <JPEG_OutputHandler+0x60>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	bb1b      	cbnz	r3, 8002b34 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002aec:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <JPEG_OutputHandler+0x64>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	7a03      	ldrb	r3, [r0, #8]
 8002af2:	b963      	cbnz	r3, 8002b0e <JPEG_OutputHandler+0x32>
 8002af4:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <JPEG_OutputHandler+0x68>)
 8002af6:	4a14      	ldr	r2, [pc, #80]	@ (8002b48 <JPEG_OutputHandler+0x6c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d105      	bne.n	8002b0e <JPEG_OutputHandler+0x32>
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <JPEG_OutputHandler+0x60>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b913      	cbnz	r3, 8002b0e <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002b08:	6803      	ldr	r3, [r0, #0]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b4c <JPEG_OutputHandler+0x70>)
 8002b10:	6813      	ldr	r3, [r2, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10c      	bne.n	8002b30 <JPEG_OutputHandler+0x54>
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <JPEG_OutputHandler+0x74>)
 8002b18:	490b      	ldr	r1, [pc, #44]	@ (8002b48 <JPEG_OutputHandler+0x6c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	b933      	cbnz	r3, 8002b30 <JPEG_OutputHandler+0x54>
 8002b22:	682b      	ldr	r3, [r5, #0]
 8002b24:	b923      	cbnz	r3, 8002b30 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b26:	2102      	movs	r1, #2
 8002b28:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002b2a:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b2c:	f006 fec5 	bl	80098ba <HAL_JPEG_Resume>
        return 1;
 8002b30:	2002      	movs	r0, #2
    }

    return 2;
}
 8002b32:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002b34:	2001      	movs	r0, #1
 8002b36:	e7fc      	b.n	8002b32 <JPEG_OutputHandler+0x56>
 8002b38:	24009e88 	.word	0x24009e88
 8002b3c:	24009e64 	.word	0x24009e64
 8002b40:	24009e78 	.word	0x24009e78
 8002b44:	24009e68 	.word	0x24009e68
 8002b48:	24000010 	.word	0x24000010
 8002b4c:	24009e84 	.word	0x24009e84
 8002b50:	24009e74 	.word	0x24009e74

08002b54 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4605      	mov	r5, r0
    if (length == 0)
 8002b58:	2a00      	cmp	r2, #0
 8002b5a:	d037      	beq.n	8002bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d035      	beq.n	8002bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002b60:	481b      	ldr	r0, [pc, #108]	@ (8002bd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002b62:	2403      	movs	r4, #3
 8002b64:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b66:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002b68:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b6a:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b6e:	bf18      	it	ne
 8002b70:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b74:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b76:	bf18      	it	ne
 8002b78:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b7a:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002b7c:	0924      	lsrs	r4, r4, #4
 8002b7e:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002b80:	692c      	ldr	r4, [r5, #16]
 8002b82:	f014 040f 	ands.w	r4, r4, #15
 8002b86:	bf18      	it	ne
 8002b88:	f1c4 0410 	rsbne	r4, r4, #16
 8002b8c:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 8002b8e:	4811      	ldr	r0, [pc, #68]	@ (8002bd4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b90:	4c11      	ldr	r4, [pc, #68]	@ (8002bd8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 8002b92:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002b94:	4811      	ldr	r0, [pc, #68]	@ (8002bdc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002b96:	f7ff febb 	bl	8002910 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 8002b9a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002b9c:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b9e:	4d0f      	ldr	r5, [pc, #60]	@ (8002bdc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 8002ba0:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff ff9a 	bl	8002adc <JPEG_OutputHandler>
 8002ba8:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d105      	bne.n	8002bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f00a fa62 	bl	800d080 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d1ef      	bne.n	8002ba2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002bc6:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002bc8:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	bf00      	nop
 8002bd0:	24009e50 	.word	0x24009e50
 8002bd4:	24009e98 	.word	0x24009e98
 8002bd8:	24009e80 	.word	0x24009e80
 8002bdc:	24009c68 	.word	0x24009c68
 8002be0:	24009e78 	.word	0x24009e78
 8002be4:	24009e6c 	.word	0x24009e6c
 8002be8:	24009e88 	.word	0x24009e88
 8002bec:	24009e64 	.word	0x24009e64

08002bf0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002bf6:	6943      	ldr	r3, [r0, #20]
{
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460f      	mov	r7, r1
 8002bfe:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002c00:	b92b      	cbnz	r3, 8002c0e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002c02:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002c04:	21b2      	movs	r1, #178	@ 0xb2
 8002c06:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002c08:	4829      	ldr	r0, [pc, #164]	@ (8002cb0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002c0a:	f021 fe91 	bl	8024930 <__assert_func>
    readData(currentMovieOffset, 8);
 8002c0e:	2208      	movs	r2, #8
 8002c10:	6981      	ldr	r1, [r0, #24]
 8002c12:	f7ff fcd7 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002c16:	69a6      	ldr	r6, [r4, #24]
 8002c18:	4620      	mov	r0, r4
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	f7ff fcbf 	bl	800259e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c20:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002c22:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff fcba 	bl	800259e <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c2a:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c2c:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f7ff fc9a 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002c34:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c3a:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c3c:	180a      	adds	r2, r1, r0
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d226      	bcs.n	8002c90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002c42:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002c46:	459b      	cmp	fp, r3
 8002c48:	d117      	bne.n	8002c7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c4a:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002c4e:	459a      	cmp	sl, r3
 8002c50:	d113      	bne.n	8002c7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c52:	b190      	cbz	r0, 8002c7a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c54:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002c56:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff fcb3 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c60:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c62:	462a      	mov	r2, r5
 8002c64:	4620      	mov	r0, r4
 8002c66:	f8cd 8000 	str.w	r8, [sp]
 8002c6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002c6e:	463b      	mov	r3, r7
 8002c70:	f7ff ff70 	bl	8002b54 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002c74:	6963      	ldr	r3, [r4, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002c7a:	69a3      	ldr	r3, [r4, #24]
 8002c7c:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002c7e:	b905      	cbnz	r5, 8002c82 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002c80:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c82:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c86:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c8a:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c8c:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c8e:	d109      	bne.n	8002ca4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002c90:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002c92:	2001      	movs	r0, #1
        frameNumber = 1;
 8002c94:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002c96:	6a23      	ldr	r3, [r4, #32]
 8002c98:	61a3      	str	r3, [r4, #24]
}
 8002c9a:	f080 0001 	eor.w	r0, r0, #1
 8002c9e:	b005      	add	sp, #20
 8002ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e7f8      	b.n	8002c9a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002ca8:	080260a1 	.word	0x080260a1
 8002cac:	080261c0 	.word	0x080261c0
 8002cb0:	08025ff8 	.word	0x08025ff8

08002cb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002cb8:	6981      	ldr	r1, [r0, #24]
{
 8002cba:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002cbc:	2208      	movs	r2, #8
 8002cbe:	f7ff fc81 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002cc2:	69a7      	ldr	r7, [r4, #24]
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	1d39      	adds	r1, r7, #4
 8002cc8:	f7ff fc4e 	bl	8002568 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002ccc:	f107 0108 	add.w	r1, r7, #8
 8002cd0:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002cd2:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f7ff fc75 	bl	80025c4 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002cda:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002cdc:	b16e      	cbz	r6, 8002cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002cde:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ce0:	4c07      	ldr	r4, [pc, #28]	@ (8002d00 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002ce2:	4d08      	ldr	r5, [pc, #32]	@ (8002d04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002ce4:	4633      	mov	r3, r6
 8002ce6:	4807      	ldr	r0, [pc, #28]	@ (8002d04 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002ce8:	f7ff fe12 	bl	8002910 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002cec:	4628      	mov	r0, r5
 8002cee:	f7ff fef5 	bl	8002adc <JPEG_OutputHandler>
 8002cf2:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f8      	beq.n	8002cec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	24009e80 	.word	0x24009e80
 8002d04:	24009c68 	.word	0x24009c68

08002d08 <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 8002d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d0a:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d0c:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d0e:	4c15      	ldr	r4, [pc, #84]	@ (8002d64 <DMA2D_CopyBuffer+0x5c>)
 8002d10:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d12:	4e15      	ldr	r6, [pc, #84]	@ (8002d68 <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002d1a:	6863      	ldr	r3, [r4, #4]
 8002d1c:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d1e:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <DMA2D_CopyBuffer+0x64>)
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002d22:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d24:	68e2      	ldr	r2, [r4, #12]
 8002d26:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d28:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d2a:	1ab6      	subs	r6, r6, r2
 8002d2c:	42b7      	cmp	r7, r6
 8002d2e:	d315      	bcc.n	8002d5c <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d30:	68a4      	ldr	r4, [r4, #8]
 8002d32:	f1c4 0410 	rsb	r4, r4, #16
 8002d36:	432c      	orrs	r4, r5
 8002d38:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002d3a:	4c0d      	ldr	r4, [pc, #52]	@ (8002d70 <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d3c:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002d40:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d42:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002d44:	4421      	add	r1, r4
 8002d46:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002d4e:	4a09      	ldr	r2, [pc, #36]	@ (8002d74 <DMA2D_CopyBuffer+0x6c>)
 8002d50:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002d52:	6842      	ldr	r2, [r0, #4]
 8002d54:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <DMA2D_CopyBuffer+0x70>)
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d5c:	f045 0510 	orr.w	r5, r5, #16
 8002d60:	645d      	str	r5, [r3, #68]	@ 0x44
 8002d62:	e7ea      	b.n	8002d3a <DMA2D_CopyBuffer+0x32>
 8002d64:	24009e50 	.word	0x24009e50
 8002d68:	24009e7c 	.word	0x24009e7c
 8002d6c:	52001000 	.word	0x52001000
 8002d70:	24009e98 	.word	0x24009e98
 8002d74:	ff09000b 	.word	0xff09000b
 8002d78:	00012301 	.word	0x00012301

08002d7c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002d7e:	2200      	movs	r2, #0
 8002d80:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002d82:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002d84:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002d86:	3101      	adds	r1, #1
 8002d88:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	2901      	cmp	r1, #1
 8002d8e:	d900      	bls.n	8002d92 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002d90:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <DMA2D_ExternalJobCompleted+0x38>)
 8002d94:	4a08      	ldr	r2, [pc, #32]	@ (8002db8 <DMA2D_ExternalJobCompleted+0x3c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	68c2      	ldr	r2, [r0, #12]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <DMA2D_ExternalJobCompleted+0x40>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <DMA2D_ExternalJobCompleted+0x44>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f00a b994 	b.w	800d0d8 <osSemaphoreRelease>
 8002db0:	24009e68 	.word	0x24009e68
 8002db4:	24009e7c 	.word	0x24009e7c
 8002db8:	24009e50 	.word	0x24009e50
 8002dbc:	24009e64 	.word	0x24009e64
 8002dc0:	24009e6c 	.word	0x24009e6c

08002dc4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2200      	movs	r2, #0
{
 8002dc8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002dca:	4608      	mov	r0, r1
 8002dcc:	f00a f90e 	bl	800cfec <osSemaphoreNew>
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002dd2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002dd4:	b928      	cbnz	r0, 8002de2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002dd8:	2128      	movs	r1, #40	@ 0x28
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ddc:	480a      	ldr	r0, [pc, #40]	@ (8002e08 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002dde:	f021 fda7 	bl	8024930 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2104      	movs	r1, #4
 8002de6:	2001      	movs	r0, #1
 8002de8:	f00a f99f 	bl	800d12a <osMessageQueueNew>
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002dee:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002df0:	b918      	cbnz	r0, 8002dfa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002df4:	212c      	movs	r1, #44	@ 0x2c
 8002df6:	4a03      	ldr	r2, [pc, #12]	@ (8002e04 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002df8:	e7f0      	b.n	8002ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002dfa:	bd08      	pop	{r3, pc}
 8002dfc:	24009ea0 	.word	0x24009ea0
 8002e00:	0802621b 	.word	0x0802621b
 8002e04:	08026264 	.word	0x08026264
 8002e08:	08026293 	.word	0x08026293
 8002e0c:	24009e9c 	.word	0x24009e9c
 8002e10:	080262dd 	.word	0x080262dd

08002e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002e14:	4b02      	ldr	r3, [pc, #8]	@ (8002e20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002e16:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	f00a b930 	b.w	800d080 <osSemaphoreAcquire>
 8002e20:	24009ea0 	.word	0x24009ea0

08002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002e24:	4b01      	ldr	r3, [pc, #4]	@ (8002e2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f00a b956 	b.w	800d0d8 <osSemaphoreRelease>
 8002e2c:	24009ea0 	.word	0x24009ea0

08002e30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002e30:	4b02      	ldr	r3, [pc, #8]	@ (8002e3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002e32:	2100      	movs	r1, #0
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f00a b923 	b.w	800d080 <osSemaphoreAcquire>
 8002e3a:	bf00      	nop
 8002e3c:	24009ea0 	.word	0x24009ea0

08002e40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002e40:	f7ff bff0 	b.w	8002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002e44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002e44:	2300      	movs	r3, #0
 8002e46:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6800      	ldr	r0, [r0, #0]
 8002e4e:	f00a b9a7 	b.w	800d1a0 <osMessageQueuePut>
 8002e52:	bf00      	nop
 8002e54:	24009e9c 	.word	0x24009e9c
 8002e58:	24000030 	.word	0x24000030

08002e5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002e5c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4c07      	ldr	r4, [pc, #28]	@ (8002e80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002e62:	a901      	add	r1, sp, #4
 8002e64:	461a      	mov	r2, r3
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	f00a f9cb 	bl	800d202 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	2200      	movs	r2, #0
 8002e72:	a901      	add	r1, sp, #4
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	f00a f9c4 	bl	800d202 <osMessageQueueGet>
}
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	bf00      	nop
 8002e80:	24009e9c 	.word	0x24009e9c

08002e84 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002e84:	6803      	ldr	r3, [r0, #0]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	4718      	bx	r3

08002e8a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	4770      	bx	lr

08002e8e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002e8e:	e7fe      	b.n	8002e8e <DMA2D_XferErrorCallback>

08002e90 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002e90:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002e94:	4770      	bx	lr
	...

08002e98 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002ea4:	f00a f860 	bl	800cf68 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	6803      	ldr	r3, [r0, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4798      	blx	r3
 8002eb0:	b978      	cbnz	r0, 8002ed2 <_ZN8STM32DMA5startEv+0x3a>
 8002eb2:	7a63      	ldrb	r3, [r4, #9]
 8002eb4:	b16b      	cbz	r3, 8002ed2 <_ZN8STM32DMA5startEv+0x3a>
 8002eb6:	7a23      	ldrb	r3, [r4, #8]
 8002eb8:	b95b      	cbnz	r3, 8002ed2 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002eba:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002ec6:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002ece:	f00a b86e 	b.w	800cfae <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002ed2:	490b      	ldr	r1, [pc, #44]	@ (8002f00 <_ZN8STM32DMA5startEv+0x68>)
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f04 <_ZN8STM32DMA5startEv+0x6c>)
 8002ed6:	680b      	ldr	r3, [r1, #0]
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1f2      	bne.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
 8002ee0:	7a20      	ldrb	r0, [r4, #8]
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d1ef      	bne.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
 8002ee6:	7aa0      	ldrb	r0, [r4, #10]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d1ec      	bne.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002eec:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002eee:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ef2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002ef6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ef8:	f7ff ff06 	bl	8002d08 <DMA2D_CopyBuffer>
    }
 8002efc:	e7e3      	b.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
 8002efe:	bf00      	nop
 8002f00:	24009e68 	.word	0x24009e68
 8002f04:	24000010 	.word	0x24000010

08002f08 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <_ZN8STM32DMAD1Ev+0x1c>)
 8002f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002f16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f1a:	f3bf 8f6f 	isb	sy
}
 8002f1e:	4770      	bx	lr
 8002f20:	08027dfc 	.word	0x08027dfc
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
}
 8002f2c:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002f30:	f7ff ffea 	bl	8002f08 <_ZN8STM32DMAD1Ev>
 8002f34:	4620      	mov	r0, r4
 8002f36:	f021 f985 	bl	8024244 <_ZdlPvj>
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	bd10      	pop	{r4, pc}
	...

08002f40 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f40:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002f42:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002f50:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f54:	f002 0210 	and.w	r2, r2, #16
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002f5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f5e:	f042 0210 	orr.w	r2, r2, #16
 8002f62:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002f64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <_ZN8STM32DMA10initializeEv+0x48>)
 8002f6e:	4a07      	ldr	r2, [pc, #28]	@ (8002f8c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002f70:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002f72:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <_ZN8STM32DMA10initializeEv+0x50>)
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <_ZN8STM32DMA10initializeEv+0x54>)
 8002f78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	b002      	add	sp, #8
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
 8002f88:	24009cdc 	.word	0x24009cdc
 8002f8c:	080031dd 	.word	0x080031dd
 8002f90:	08002e8f 	.word	0x08002e8f
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002f98:	b508      	push	{r3, lr}
    switch (format)
 8002f9a:	280a      	cmp	r0, #10
 8002f9c:	d809      	bhi.n	8002fb2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002f9e:	e8df f000 	tbb	[pc, r0]
 8002fa2:	1006      	.short	0x1006
 8002fa4:	0808080e 	.word	0x0808080e
 8002fa8:	10101008 	.word	0x10101008
 8002fac:	10          	.byte	0x10
 8002fad:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002fae:	2002      	movs	r0, #2
}
 8002fb0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002fb4:	2191      	movs	r1, #145	@ 0x91
 8002fb6:	4a05      	ldr	r2, [pc, #20]	@ (8002fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002fb8:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002fba:	f021 fcb9 	bl	8024930 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e7f6      	b.n	8002fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002fc2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002fc4:	e7f4      	b.n	8002fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002fc6:	bf00      	nop
 8002fc8:	0802631f 	.word	0x0802631f
 8002fcc:	0802633a 	.word	0x0802633a
 8002fd0:	08026385 	.word	0x08026385

08002fd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fd8:	7f88      	ldrb	r0, [r1, #30]
 8002fda:	f7ff ffdd 	bl	8002f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fe0:	8aa5      	ldrh	r5, [r4, #20]
 8002fe2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fe4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fe6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fea:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fee:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ff0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ff2:	1b52      	subs	r2, r2, r5
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ff6:	6825      	ldr	r5, [r4, #0]
 8002ff8:	2d08      	cmp	r5, #8
 8002ffa:	d10e      	bne.n	800301a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ffc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ffe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003000:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003002:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8003004:	7f20      	ldrb	r0, [r4, #28]
 8003006:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800300a:	61da      	str	r2, [r3, #28]
        return color;
 800300c:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800300e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003012:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003014:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003016:	601a      	str	r2, [r3, #0]
    }
}
 8003018:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800301a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800301c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003024:	4a03      	ldr	r2, [pc, #12]	@ (8003034 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8003026:	e7f6      	b.n	8003016 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8003028:	52001000 	.word	0x52001000
 800302c:	00010009 	.word	0x00010009
 8003030:	00022301 	.word	0x00022301
 8003034:	00032301 	.word	0x00032301

08003038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003038:	b508      	push	{r3, lr}
    switch (format)
 800303a:	280b      	cmp	r0, #11
 800303c:	d80b      	bhi.n	8003056 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800303e:	e8df f000 	tbb	[pc, r0]
 8003042:	1206      	.short	0x1206
 8003044:	0a0a0a10 	.word	0x0a0a0a10
 8003048:	0808080a 	.word	0x0808080a
 800304c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800304e:	2002      	movs	r0, #2
}
 8003050:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003052:	2005      	movs	r0, #5
        break;
 8003054:	e7fc      	b.n	8003050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003058:	2170      	movs	r1, #112	@ 0x70
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800305c:	4805      	ldr	r0, [pc, #20]	@ (8003074 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800305e:	f021 fc67 	bl	8024930 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003062:	2000      	movs	r0, #0
 8003064:	e7f4      	b.n	8003050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003066:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003068:	e7f2      	b.n	8003050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800306a:	bf00      	nop
 800306c:	0802631f 	.word	0x0802631f
 8003070:	080263cd 	.word	0x080263cd
 8003074:	08026385 	.word	0x08026385

08003078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800307c:	7f4f      	ldrb	r7, [r1, #29]
{
 800307e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003080:	4638      	mov	r0, r7
 8003082:	f7ff ffd9 	bl	8003038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003086:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800308a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800308c:	4628      	mov	r0, r5
 800308e:	f7ff ffd3 	bl	8003038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8003092:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003094:	4628      	mov	r0, r5
 8003096:	f7ff ff7f 	bl	8002f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800309a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 800309e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030a2:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030a6:	4b45      	ldr	r3, [pc, #276]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80030a8:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030aa:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030ac:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030ae:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030b2:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030b6:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030bc:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030c2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030c6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030c8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80030ca:	f8d9 4000 	ldr.w	r4, [r9]
 80030ce:	f899 201c 	ldrb.w	r2, [r9, #28]
 80030d2:	2c80      	cmp	r4, #128	@ 0x80
 80030d4:	d022      	beq.n	800311c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80030d6:	d80f      	bhi.n	80030f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80030d8:	2c20      	cmp	r4, #32
 80030da:	d066      	beq.n	80031aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030dc:	2c40      	cmp	r4, #64	@ 0x40
 80030de:	d064      	beq.n	80031aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030e0:	2c04      	cmp	r4, #4
 80030e2:	d05c      	beq.n	800319e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030e4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80030e8:	4b34      	ldr	r3, [pc, #208]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030ea:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030ec:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80030f0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030f2:	d060      	beq.n	80031b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030f4:	4a32      	ldr	r2, [pc, #200]	@ (80031c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80030f6:	e03f      	b.n	8003178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80030f8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80030fc:	d004      	beq.n	8003108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80030fe:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003102:	d1ef      	bne.n	80030e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003104:	482f      	ldr	r0, [pc, #188]	@ (80031c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8003106:	e000      	b.n	800310a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003108:	482f      	ldr	r0, [pc, #188]	@ (80031c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800310a:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 800310e:	61da      	str	r2, [r3, #28]
 8003110:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003114:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003116:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003118:	6159      	str	r1, [r3, #20]
 800311a:	e02c      	b.n	8003176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800311c:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003120:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003124:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003128:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800312a:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800312c:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800312e:	1d21      	adds	r1, r4, #4
 8003130:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003132:	7821      	ldrb	r1, [r4, #0]
 8003134:	b141      	cbz	r1, 8003148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003136:	2901      	cmp	r1, #1
 8003138:	d021      	beq.n	800317e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800313a:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800313c:	f240 110b 	movw	r1, #267	@ 0x10b
 8003140:	4a23      	ldr	r2, [pc, #140]	@ (80031d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003142:	4824      	ldr	r0, [pc, #144]	@ (80031d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003144:	f021 fbf4 	bl	8024930 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	8861      	ldrh	r1, [r4, #2]
 800314c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003150:	3901      	subs	r1, #1
 8003152:	f022 0210 	bic.w	r2, r2, #16
 8003156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800315a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800315c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003160:	69d9      	ldr	r1, [r3, #28]
 8003162:	f041 0120 	orr.w	r1, r1, #32
 8003166:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003168:	69d9      	ldr	r1, [r3, #28]
 800316a:	0689      	lsls	r1, r1, #26
 800316c:	d4fc      	bmi.n	8003168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800316e:	2110      	movs	r1, #16
 8003170:	6099      	str	r1, [r3, #8]
            if (blend)
 8003172:	2a00      	cmp	r2, #0
 8003174:	d0be      	beq.n	80030f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003176:	4a18      	ldr	r2, [pc, #96]	@ (80031d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800317e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003180:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003182:	8860      	ldrh	r0, [r4, #2]
 8003184:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003188:	bf18      	it	ne
 800318a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800318c:	3801      	subs	r0, #1
 800318e:	f021 0110 	bic.w	r1, r1, #16
 8003192:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003196:	f041 0110 	orr.w	r1, r1, #16
 800319a:	61d9      	str	r1, [r3, #28]
                break;
 800319c:	e7df      	b.n	800315e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800319e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80031a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031a6:	61da      	str	r2, [r3, #28]
 80031a8:	e7b5      	b.n	8003116 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80031aa:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80031ae:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80031b0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80031b4:	e7f7      	b.n	80031a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80031b6:	f242 3201 	movw	r2, #8961	@ 0x2301
 80031ba:	e7dd      	b.n	8003178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80031bc:	52001000 	.word	0x52001000
 80031c0:	00012301 	.word	0x00012301
 80031c4:	00020009 	.word	0x00020009
 80031c8:	0002000a 	.word	0x0002000a
 80031cc:	08026417 	.word	0x08026417
 80031d0:	08026431 	.word	0x08026431
 80031d4:	08026385 	.word	0x08026385
 80031d8:	00022301 	.word	0x00022301

080031dc <DMA2D_XferCpltCallback>:
 80031dc:	4b02      	ldr	r3, [pc, #8]	@ (80031e8 <DMA2D_XferCpltCallback+0xc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80031e2:	6803      	ldr	r3, [r0, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4718      	bx	r3
 80031e8:	24025934 	.word	0x24025934

080031ec <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80031ec:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 80031f4:	b9d3      	cbnz	r3, 800322c <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80031fc:	4919      	ldr	r1, [pc, #100]	@ (8003264 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80031fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003200:	680b      	ldr	r3, [r1, #0]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d12a      	bne.n	8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800320a:	4818      	ldr	r0, [pc, #96]	@ (800326c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 800320c:	6800      	ldr	r0, [r0, #0]
 800320e:	bb38      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003210:	7a20      	ldrb	r0, [r4, #8]
 8003212:	bb28      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003214:	7aa0      	ldrb	r0, [r4, #10]
 8003216:	bb18      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003218:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 800321a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 800321e:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003220:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003228:	f7ff bd6e 	b.w	8002d08 <DMA2D_CopyBuffer>
        if (isRunning)
 800322c:	7a03      	ldrb	r3, [r0, #8]
 800322e:	b143      	cbz	r3, 8003242 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003230:	2300      	movs	r3, #0
 8003232:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800323a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800323e:	f7ff fd9d 	bl	8002d7c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003242:	6860      	ldr	r0, [r4, #4]
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4798      	blx	r3
 800324a:	b948      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800324c:	7a63      	ldrb	r3, [r4, #9]
 800324e:	b13b      	cbz	r3, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003250:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003252:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003256:	4620      	mov	r0, r4
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800325a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800325e:	4718      	bx	r3
    }
 8003260:	bd10      	pop	{r4, pc}
 8003262:	bf00      	nop
 8003264:	24009e68 	.word	0x24009e68
 8003268:	24000010 	.word	0x24000010
 800326c:	24009e64 	.word	0x24009e64

08003270 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003274:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <_ZN8STM32DMAC1Ev+0x40>)
 8003276:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003278:	2600      	movs	r6, #0
 800327a:	4625      	mov	r5, r4
 800327c:	2260      	movs	r2, #96	@ 0x60
 800327e:	6060      	str	r0, [r4, #4]
 8003280:	7226      	strb	r6, [r4, #8]
 8003282:	7266      	strb	r6, [r4, #9]
 8003284:	f845 3b20 	str.w	r3, [r5], #32
 8003288:	4629      	mov	r1, r5
 800328a:	f00d f963 	bl	8010554 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800328e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8003292:	60ee      	str	r6, [r5, #12]
 8003294:	3524      	adds	r5, #36	@ 0x24
 8003296:	429d      	cmp	r5, r3
 8003298:	d1fb      	bne.n	8003292 <_ZN8STM32DMAC1Ev+0x22>
 800329a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 800329e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80032a0:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80032a4:	f009 fe28 	bl	800cef8 <osMutexNew>
 80032a8:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80032ac:	4620      	mov	r0, r4
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	08027dfc 	.word	0x08027dfc

080032b4 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032b4:	4b03      	ldr	r3, [pc, #12]	@ (80032c4 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	07d2      	lsls	r2, r2, #31
 80032ba:	d4fc      	bmi.n	80032b6 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032bc:	2223      	movs	r2, #35	@ 0x23
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	52001000 	.word	0x52001000

080032c8 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032c8:	4a0b      	ldr	r2, [pc, #44]	@ (80032f8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80032ca:	6953      	ldr	r3, [r2, #20]
 80032cc:	03db      	lsls	r3, r3, #15
 80032ce:	d511      	bpl.n	80032f4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80032d0:	2900      	cmp	r1, #0
 80032d2:	dd0f      	ble.n	80032f4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80032d4:	f000 031f 	and.w	r3, r0, #31
 80032d8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80032da:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80032de:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80032e0:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80032e4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80032e6:	1a0b      	subs	r3, r1, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	dcf9      	bgt.n	80032e0 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80032ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032f0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80032fc:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032fe:	4c10      	ldr	r4, [pc, #64]	@ (8003340 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	07ed      	lsls	r5, r5, #31
 8003304:	d4fc      	bmi.n	8003300 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003306:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003308:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800330a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800330c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800330e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003312:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003316:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003318:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800331a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 800331c:	d00c      	beq.n	8003338 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800331e:	4909      	ldr	r1, [pc, #36]	@ (8003344 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003320:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003324:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003326:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800332a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800332e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003330:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003332:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003334:	6023      	str	r3, [r4, #0]
    }
}
 8003336:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003338:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 800333c:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800333e:	e7f9      	b.n	8003334 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003340:	52001000 	.word	0x52001000
 8003344:	00010009 	.word	0x00010009
 8003348:	00020001 	.word	0x00020001
 800334c:	00030001 	.word	0x00030001

08003350 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003350:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003352:	4c0e      	ldr	r4, [pc, #56]	@ (800338c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003354:	6825      	ldr	r5, [r4, #0]
 8003356:	07ed      	lsls	r5, r5, #31
 8003358:	d4fc      	bmi.n	8003354 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800335a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800335c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800335e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003360:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003362:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003366:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800336a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800336c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800336e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003370:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003372:	d007      	beq.n	8003384 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003374:	4a06      	ldr	r2, [pc, #24]	@ (8003390 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003376:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800337a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800337c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800337e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003380:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003382:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003386:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003388:	6025      	str	r5, [r4, #0]
}
 800338a:	e7fa      	b.n	8003382 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 800338c:	52001000 	.word	0x52001000
 8003390:	00020001 	.word	0x00020001
 8003394:	ff020001 	.word	0xff020001

08003398 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003398:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800339a:	4c0b      	ldr	r4, [pc, #44]	@ (80033c8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 800339c:	6825      	ldr	r5, [r4, #0]
 800339e:	07ed      	lsls	r5, r5, #31
 80033a0:	d4fc      	bmi.n	800339c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033a2:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033a4:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033a6:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033a8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033aa:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033b0:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033b2:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033b4:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80033b6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80033b8:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033ba:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80033be:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80033c0:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80033c2:	6023      	str	r3, [r4, #0]
}
 80033c4:	bd30      	pop	{r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	52001000 	.word	0x52001000
 80033cc:	00020001 	.word	0x00020001

080033d0 <_ZN8touchgfx9TypedTextD1Ev>:
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
    }
 80033d0:	4770      	bx	lr

080033d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80033d2:	2001      	movs	r0, #1
 80033d4:	4770      	bx	lr

080033d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80033d6:	200c      	movs	r0, #12
 80033d8:	4770      	bx	lr

080033da <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80033da:	230c      	movs	r3, #12
 80033dc:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033e0:	3008      	adds	r0, #8
 80033e2:	4770      	bx	lr

080033e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80033e4:	230c      	movs	r3, #12
 80033e6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033ea:	3008      	adds	r0, #8
 80033ec:	4770      	bx	lr

080033ee <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80033ee:	2001      	movs	r0, #1
 80033f0:	4770      	bx	lr

080033f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80033f2:	f44f 60d1 	mov.w	r0, #1672	@ 0x688
 80033f6:	4770      	bx	lr

080033f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033f8:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 80033fc:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003400:	3008      	adds	r0, #8
 8003402:	4770      	bx	lr

08003404 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003404:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 8003408:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800340c:	3008      	adds	r0, #8
 800340e:	4770      	bx	lr

08003410 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003410:	2001      	movs	r0, #1
 8003412:	4770      	bx	lr

08003414 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003414:	2010      	movs	r0, #16
 8003416:	4770      	bx	lr

08003418 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003418:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800341c:	3008      	adds	r0, #8
 800341e:	4770      	bx	lr

08003420 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003420:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003424:	3008      	adds	r0, #8
 8003426:	4770      	bx	lr

08003428 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
    }
 800342c:	2108      	movs	r1, #8
 800342e:	f020 ff09 	bl	8024244 <_ZdlPvj>
 8003432:	4620      	mov	r0, r4
 8003434:	bd10      	pop	{r4, pc}

08003436 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8003436:	4608      	mov	r0, r1
 8003438:	f000 be40 	b.w	80040bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

0800343c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800343c:	4b03      	ldr	r3, [pc, #12]	@ (800344c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800343e:	b510      	push	{r4, lr}
 8003440:	4604      	mov	r4, r0
 8003442:	6003      	str	r3, [r0, #0]
 8003444:	f00b feb1 	bl	800f1aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003448:	4620      	mov	r0, r4
 800344a:	bd10      	pop	{r4, pc}
 800344c:	08027eb4 	.word	0x08027eb4

08003450 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003450:	b510      	push	{r4, lr}
 8003452:	4604      	mov	r4, r0
 8003454:	f7ff fff2 	bl	800343c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003458:	2114      	movs	r1, #20
 800345a:	4620      	mov	r0, r4
 800345c:	f020 fef2 	bl	8024244 <_ZdlPvj>
 8003460:	4620      	mov	r0, r4
 8003462:	bd10      	pop	{r4, pc}

08003464 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003466:	b510      	push	{r4, lr}
 8003468:	4604      	mov	r4, r0
 800346a:	6003      	str	r3, [r0, #0]
 800346c:	f00b fe9d 	bl	800f1aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003470:	4620      	mov	r0, r4
 8003472:	bd10      	pop	{r4, pc}
 8003474:	08027e80 	.word	0x08027e80

08003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003478:	b510      	push	{r4, lr}
 800347a:	4604      	mov	r4, r0
 800347c:	f7ff fff2 	bl	8003464 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003480:	f44f 61d2 	mov.w	r1, #1680	@ 0x690
 8003484:	4620      	mov	r0, r4
 8003486:	f020 fedd 	bl	8024244 <_ZdlPvj>
 800348a:	4620      	mov	r0, r4
 800348c:	bd10      	pop	{r4, pc}
	...

08003490 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003490:	4b03      	ldr	r3, [pc, #12]	@ (80034a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003492:	b510      	push	{r4, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	6003      	str	r3, [r0, #0]
 8003498:	f00b fe87 	bl	800f1aa <_ZN8touchgfx17AbstractPartitionD1Ev>
 800349c:	4620      	mov	r0, r4
 800349e:	bd10      	pop	{r4, pc}
 80034a0:	08027e4c 	.word	0x08027e4c

080034a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80034a4:	b510      	push	{r4, lr}
 80034a6:	4604      	mov	r4, r0
 80034a8:	f7ff fff2 	bl	8003490 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034ac:	2118      	movs	r1, #24
 80034ae:	4620      	mov	r0, r4
 80034b0:	f020 fec8 	bl	8024244 <_ZdlPvj>
 80034b4:	4620      	mov	r0, r4
 80034b6:	bd10      	pop	{r4, pc}

080034b8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80034b8:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <_ZN12FrontendHeapD1Ev+0x24>)
 80034ba:	b510      	push	{r4, lr}
 80034bc:	4604      	mov	r4, r0
 80034be:	6003      	str	r3, [r0, #0]
 80034c0:	f200 60bc 	addw	r0, r0, #1724	@ 0x6bc
 80034c4:	f7ff ffba 	bl	800343c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034c8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80034cc:	f7ff ffca 	bl	8003464 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034d0:	f104 0014 	add.w	r0, r4, #20
 80034d4:	f7ff ffdc 	bl	8003490 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034d8:	4620      	mov	r0, r4
 80034da:	bd10      	pop	{r4, pc}
 80034dc:	08027ee8 	.word	0x08027ee8

080034e0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034e0:	b508      	push	{r3, lr}
 80034e2:	4802      	ldr	r0, [pc, #8]	@ (80034ec <__tcf_0+0xc>)
 80034e4:	f7ff ffe8 	bl	80034b8 <_ZN12FrontendHeapD1Ev>
 80034e8:	bd08      	pop	{r3, pc}
 80034ea:	bf00      	nop
 80034ec:	2400ad64 	.word	0x2400ad64

080034f0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80034f0:	b510      	push	{r4, lr}
 80034f2:	4604      	mov	r4, r0
 80034f4:	f7ff ffe0 	bl	80034b8 <_ZN12FrontendHeapD1Ev>
 80034f8:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 80034fc:	4620      	mov	r0, r4
 80034fe:	f020 fea1 	bl	8024244 <_ZdlPvj>
 8003502:	4620      	mov	r0, r4
 8003504:	bd10      	pop	{r4, pc}
	...

08003508 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800350c:	f000 fc54 	bl	8003db8 <_ZN14BitmapDatabase11getInstanceEv>
 8003510:	2400      	movs	r4, #0
 8003512:	4605      	mov	r5, r0
 8003514:	f000 fc54 	bl	8003dc0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003518:	4623      	mov	r3, r4
 800351a:	4601      	mov	r1, r0
 800351c:	4622      	mov	r2, r4
 800351e:	4628      	mov	r0, r5
 8003520:	9400      	str	r4, [sp, #0]
 8003522:	f016 f899 	bl	8019658 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003526:	4b27      	ldr	r3, [pc, #156]	@ (80035c4 <touchgfx_init+0xbc>)
 8003528:	4a27      	ldr	r2, [pc, #156]	@ (80035c8 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800352a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800352c:	4d27      	ldr	r5, [pc, #156]	@ (80035cc <touchgfx_init+0xc4>)
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	f001 fc56 	bl	8004de0 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003534:	4b26      	ldr	r3, [pc, #152]	@ (80035d0 <touchgfx_init+0xc8>)
 8003536:	4a27      	ldr	r2, [pc, #156]	@ (80035d4 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003538:	4827      	ldr	r0, [pc, #156]	@ (80035d8 <touchgfx_init+0xd0>)
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	f015 ff2e 	bl	801939c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	f3bf 8f5b 	dmb	ish
 8003546:	07db      	lsls	r3, r3, #31
 8003548:	d435      	bmi.n	80035b6 <touchgfx_init+0xae>
 800354a:	4628      	mov	r0, r5
 800354c:	f020 fe7c 	bl	8024248 <__cxa_guard_acquire>
 8003550:	b388      	cbz	r0, 80035b6 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003552:	4c22      	ldr	r4, [pc, #136]	@ (80035dc <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003554:	4b22      	ldr	r3, [pc, #136]	@ (80035e0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003556:	f204 66d4 	addw	r6, r4, #1748	@ 0x6d4
        : presenterStorage(pres),
 800355a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800355e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003562:	f204 67bc 	addw	r7, r4, #1724	@ 0x6bc
 8003566:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003568:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800356a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800356e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003570:	6126      	str	r6, [r4, #16]
 8003572:	f00b fe1b 	bl	800f1ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003576:	4b1b      	ldr	r3, [pc, #108]	@ (80035e4 <touchgfx_init+0xdc>)
 8003578:	4640      	mov	r0, r8
 800357a:	6163      	str	r3, [r4, #20]
 800357c:	f00b fe16 	bl	800f1ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003580:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <touchgfx_init+0xe0>)
 8003582:	4638      	mov	r0, r7
 8003584:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003586:	f00b fe11 	bl	800f1ac <_ZN8touchgfx17AbstractPartitionC1Ev>
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <touchgfx_init+0xe4>)
 800358c:	f504 60da 	add.w	r0, r4, #1744	@ 0x6d0
 8003590:	f8c4 36bc 	str.w	r3, [r4, #1724]	@ 0x6bc
 8003594:	f002 f810 	bl	80055b8 <_ZN5ModelC1Ev>
 8003598:	4622      	mov	r2, r4
 800359a:	f504 61da 	add.w	r1, r4, #1744	@ 0x6d0
 800359e:	4630      	mov	r0, r6
 80035a0:	f002 f800 	bl	80055a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f000 fd89 	bl	80040bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80035aa:	4811      	ldr	r0, [pc, #68]	@ (80035f0 <touchgfx_init+0xe8>)
 80035ac:	f021 f9de 	bl	802496c <atexit>
 80035b0:	4628      	mov	r0, r5
 80035b2:	f020 fe55 	bl	8024260 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80035b6:	480f      	ldr	r0, [pc, #60]	@ (80035f4 <touchgfx_init+0xec>)
}
 80035b8:	b002      	add	sp, #8
 80035ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80035be:	f7fe bcc9 	b.w	8001f54 <_ZN11TouchGFXHAL10initializeEv>
 80035c2:	bf00      	nop
 80035c4:	24025998 	.word	0x24025998
 80035c8:	24009f28 	.word	0x24009f28
 80035cc:	2400ad60 	.word	0x2400ad60
 80035d0:	24009f48 	.word	0x24009f48
 80035d4:	24009f2c 	.word	0x24009f2c
 80035d8:	24000034 	.word	0x24000034
 80035dc:	2400ad64 	.word	0x2400ad64
 80035e0:	08027ee8 	.word	0x08027ee8
 80035e4:	08027e4c 	.word	0x08027e4c
 80035e8:	08027e80 	.word	0x08027e80
 80035ec:	08027eb4 	.word	0x08027eb4
 80035f0:	080034e1 	.word	0x080034e1
 80035f4:	24009ea4 	.word	0x24009ea4

080035f8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80035f8:	4770      	bx	lr
	...

080035fc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80035fc:	4801      	ldr	r0, [pc, #4]	@ (8003604 <touchgfx_taskEntry+0x8>)
 80035fe:	f7fe bcbb 	b.w	8001f78 <_ZN11TouchGFXHAL9taskEntryEv>
 8003602:	bf00      	nop
 8003604:	24009ea4 	.word	0x24009ea4

08003608 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003608:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 800360a:	4c0e      	ldr	r4, [pc, #56]	@ (8003644 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 800360c:	4b0e      	ldr	r3, [pc, #56]	@ (8003648 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800360e:	4e0f      	ldr	r6, [pc, #60]	@ (800364c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003610:	4620      	mov	r0, r4
static LCD24bpp display;
 8003612:	4d0f      	ldr	r5, [pc, #60]	@ (8003650 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003614:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003616:	f7ff fe2b 	bl	8003270 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800361a:	4628      	mov	r0, r5
 800361c:	f019 fe86 	bl	801d32c <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003620:	480c      	ldr	r0, [pc, #48]	@ (8003654 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003622:	f013 fc57 	bl	8016ed4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003626:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800362a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800362e:	4621      	mov	r1, r4
 8003630:	4809      	ldr	r0, [pc, #36]	@ (8003658 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003632:	e9cd 3200 	strd	r3, r2, [sp]
 8003636:	4633      	mov	r3, r6
 8003638:	462a      	mov	r2, r5
 800363a:	f7fe fd31 	bl	80020a0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800363e:	b002      	add	sp, #8
 8003640:	bd70      	pop	{r4, r5, r6, pc}
 8003642:	bf00      	nop
 8003644:	24009fb4 	.word	0x24009fb4
 8003648:	08027cb4 	.word	0x08027cb4
 800364c:	2400ad5c 	.word	0x2400ad5c
 8003650:	24009f48 	.word	0x24009f48
 8003654:	24009f2c 	.word	0x24009f2c
 8003658:	24009ea4 	.word	0x24009ea4

0800365c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800365c:	4801      	ldr	r0, [pc, #4]	@ (8003664 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800365e:	f7ff bc53 	b.w	8002f08 <_ZN8STM32DMAD1Ev>
 8003662:	bf00      	nop
 8003664:	24009fb4 	.word	0x24009fb4

08003668 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003668:	2000      	movs	r0, #0
 800366a:	4770      	bx	lr

0800366c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800366c:	8081      	strh	r1, [r0, #4]
    }
 800366e:	4770      	bx	lr

08003670 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003670:	80c1      	strh	r1, [r0, #6]
    }
 8003672:	4770      	bx	lr

08003674 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003674:	8101      	strh	r1, [r0, #8]
    }
 8003676:	4770      	bx	lr

08003678 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003678:	8141      	strh	r1, [r0, #10]
    }
 800367a:	4770      	bx	lr

0800367c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800367c:	4770      	bx	lr

0800367e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800367e:	4770      	bx	lr

08003680 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003680:	4770      	bx	lr

08003682 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003682:	4770      	bx	lr

08003684 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003684:	4770      	bx	lr

08003686 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003686:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003688:	88c4      	ldrh	r4, [r0, #6]
 800368a:	6803      	ldr	r3, [r0, #0]
 800368c:	1b12      	subs	r2, r2, r4
 800368e:	8884      	ldrh	r4, [r0, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003692:	1b09      	subs	r1, r1, r4
 8003694:	b212      	sxth	r2, r2
    }
 8003696:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800369a:	b209      	sxth	r1, r1
 800369c:	4718      	bx	r3

0800369e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800369e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036a2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
 80036a8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80036aa:	6813      	ldr	r3, [r2, #0]
 80036ac:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80036ae:	6010      	str	r0, [r2, #0]
    }
 80036b0:	4770      	bx	lr

080036b2 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80036b2:	2000      	movs	r0, #0
 80036b4:	4770      	bx	lr

080036b6 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80036b6:	888b      	ldrh	r3, [r1, #4]
 80036b8:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80036ba:	2001      	movs	r0, #1
 80036bc:	4770      	bx	lr

080036be <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80036be:	4770      	bx	lr

080036c0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80036c0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80036c4:	4770      	bx	lr

080036c6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80036c6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80036ca:	4770      	bx	lr

080036cc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80036cc:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036ce:	2200      	movs	r2, #0
        return rect.width;
 80036d0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80036d4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80036d8:	8002      	strh	r2, [r0, #0]
 80036da:	8042      	strh	r2, [r0, #2]
 80036dc:	8084      	strh	r4, [r0, #4]
 80036de:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80036e0:	bd10      	pop	{r4, pc}

080036e2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80036e2:	2200      	movs	r2, #0
 80036e4:	8002      	strh	r2, [r0, #0]
 80036e6:	8042      	strh	r2, [r0, #2]
 80036e8:	8082      	strh	r2, [r0, #4]
 80036ea:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80036ec:	4770      	bx	lr

080036ee <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80036ee:	7701      	strb	r1, [r0, #28]
    }
 80036f0:	4770      	bx	lr

080036f2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80036f2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80036f6:	4770      	bx	lr

080036f8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80036f8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80036fc:	4770      	bx	lr

080036fe <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80036fe:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003702:	4770      	bx	lr

08003704 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003704:	2001      	movs	r0, #1
 8003706:	4770      	bx	lr

08003708 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003708:	3098      	adds	r0, #152	@ 0x98
 800370a:	4770      	bx	lr

0800370c <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 800370c:	308c      	adds	r0, #140	@ 0x8c
 800370e:	4770      	bx	lr

08003710 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003710:	3084      	adds	r0, #132	@ 0x84
 8003712:	4770      	bx	lr

08003714 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003714:	4770      	bx	lr

08003716 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003716:	4770      	bx	lr

08003718 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003718:	4770      	bx	lr
	...

0800371c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	4b02      	ldr	r3, [pc, #8]	@ (8003728 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800371e:	2290      	movs	r2, #144	@ 0x90
 8003720:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 800372c:	4770      	bx	lr

0800372e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800372e:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003730:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003734:	4770      	bx	lr

08003736 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003736:	4770      	bx	lr

08003738 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003738:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800373c:	4611      	mov	r1, r2
 800373e:	6840      	ldr	r0, [r0, #4]
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4718      	bx	r3

08003746 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003746:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800374a:	4770      	bx	lr

0800374c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800374c:	b510      	push	{r4, lr}
 800374e:	4604      	mov	r4, r0
 8003750:	2148      	movs	r1, #72	@ 0x48
 8003752:	f020 fd77 	bl	8024244 <_ZdlPvj>
 8003756:	4620      	mov	r0, r4
 8003758:	bd10      	pop	{r4, pc}

0800375a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 800375a:	b510      	push	{r4, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	212c      	movs	r1, #44	@ 0x2c
 8003760:	f020 fd70 	bl	8024244 <_ZdlPvj>
 8003764:	4620      	mov	r0, r4
 8003766:	bd10      	pop	{r4, pc}

08003768 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003768:	b510      	push	{r4, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	21bc      	movs	r1, #188	@ 0xbc
 800376e:	f020 fd69 	bl	8024244 <_ZdlPvj>
 8003772:	4620      	mov	r0, r4
 8003774:	bd10      	pop	{r4, pc}
	...

08003778 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003778:	b538      	push	{r3, r4, r5, lr}
 800377a:	4604      	mov	r4, r0
    HAL::initialize();
 800377c:	f00c f811 	bl	800f7a2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8003784:	f012 f938 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8003788:	4601      	mov	r1, r0
 800378a:	4620      	mov	r0, r4
 800378c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	4908      	ldr	r1, [pc, #32]	@ (80037b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003792:	4620      	mov	r0, r4
 8003794:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 8003798:	2300      	movs	r3, #0
 800379a:	461a      	mov	r2, r3
 800379c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800379e:	6863      	ldr	r3, [r4, #4]
 80037a0:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80037a2:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80037a6:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80037a8:	4a05      	ldr	r2, [pc, #20]	@ (80037c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80037ae:	4a05      	ldr	r2, [pc, #20]	@ (80037c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80037b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	d0119400 	.word	0xd0119400
 80037b8:	2400b69c 	.word	0x2400b69c
 80037bc:	2400b654 	.word	0x2400b654
 80037c0:	d0000000 	.word	0xd0000000
 80037c4:	00119400 	.word	0x00119400

080037c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	4604      	mov	r4, r0
 80037cc:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80037ce:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295
 80037d4:	f009 fbc8 	bl	800cf68 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80037d8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037da:	f009 fbe8 	bl	800cfae <osMutexRelease>
        streams[handle].isActive = false;
 80037de:	2324      	movs	r3, #36	@ 0x24
 80037e0:	fb03 4505 	mla	r5, r3, r5, r4
 80037e4:	2300      	movs	r3, #0
 80037e6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80037ea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80037ee:	b90b      	cbnz	r3, 80037f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80037f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80037f2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80037f4:	bd38      	pop	{r3, r4, r5, pc}

080037f6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80037f6:	f00b bf85 	b.w	800f704 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080037fa <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80037fa:	f00c b8f4 	b.w	800f9e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080037fe <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80037fe:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003802:	b112      	cbz	r2, 800380a <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003804:	6803      	ldr	r3, [r0, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	4718      	bx	r3
    }
 800380a:	4770      	bx	lr

0800380c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800380c:	4a12      	ldr	r2, [pc, #72]	@ (8003858 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800380e:	6953      	ldr	r3, [r2, #20]
 8003810:	03db      	lsls	r3, r3, #15
{
 8003812:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003814:	d51e      	bpl.n	8003854 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003816:	2300      	movs	r3, #0
 8003818:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800381c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003820:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003824:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003828:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800382c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003830:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003832:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003836:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003838:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800383c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800383e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003842:	d2f9      	bcs.n	8003838 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003844:	3b20      	subs	r3, #32
 8003846:	f113 0f20 	cmn.w	r3, #32
 800384a:	d1f2      	bne.n	8003832 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800384c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003850:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003854:	bd70      	pop	{r4, r5, r6, pc}
 8003856:	bf00      	nop
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800385c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800385e:	b131      	cbz	r1, 800386e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003862:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003866:	4a04      	ldr	r2, [pc, #16]	@ (8003878 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003868:	4804      	ldr	r0, [pc, #16]	@ (800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800386a:	f021 f861 	bl	8024930 <__assert_func>
    }
 800386e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003872:	bd08      	pop	{r3, pc}
 8003874:	0802646f 	.word	0x0802646f
 8003878:	08026483 	.word	0x08026483
 800387c:	0802660d 	.word	0x0802660d

08003880 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003880:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003882:	b131      	cbz	r1, 8003892 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003886:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800388a:	4a06      	ldr	r2, [pc, #24]	@ (80038a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800388c:	4806      	ldr	r0, [pc, #24]	@ (80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800388e:	f021 f84f 	bl	8024930 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003892:	6840      	ldr	r0, [r0, #4]
 8003894:	4611      	mov	r1, r2
 8003896:	6803      	ldr	r3, [r0, #0]
    }
 8003898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	4718      	bx	r3
 80038a0:	0802646f 	.word	0x0802646f
 80038a4:	08026657 	.word	0x08026657
 80038a8:	0802660d 	.word	0x0802660d

080038ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80038ac:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80038ae:	b129      	cbz	r1, 80038bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80038b0:	4b03      	ldr	r3, [pc, #12]	@ (80038c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80038b2:	2179      	movs	r1, #121	@ 0x79
 80038b4:	4a03      	ldr	r2, [pc, #12]	@ (80038c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80038b6:	4804      	ldr	r0, [pc, #16]	@ (80038c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80038b8:	f021 f83a 	bl	8024930 <__assert_func>
    }
 80038bc:	68c0      	ldr	r0, [r0, #12]
 80038be:	bd08      	pop	{r3, pc}
 80038c0:	0802646f 	.word	0x0802646f
 80038c4:	08026805 	.word	0x08026805
 80038c8:	0802660d 	.word	0x0802660d

080038cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80038d0:	b129      	cbz	r1, 80038de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80038d4:	21a2      	movs	r1, #162	@ 0xa2
 80038d6:	4a19      	ldr	r2, [pc, #100]	@ (800393c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80038d8:	4819      	ldr	r0, [pc, #100]	@ (8003940 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80038da:	f021 f829 	bl	8024930 <__assert_func>
        switch (cmd)
 80038de:	2a05      	cmp	r2, #5
 80038e0:	d815      	bhi.n	800390e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80038e2:	e8df f002 	tbb	[pc, r2]
 80038e6:	1103      	.short	0x1103
 80038e8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80038ec:	6840      	ldr	r0, [r0, #4]
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	4798      	blx	r3
 80038f4:	b158      	cbz	r0, 800390e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80038fc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003900:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003902:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003906:	e002      	b.n	800390e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003908:	2300      	movs	r3, #0
 800390a:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800390e:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003910:	6203      	str	r3, [r0, #32]
 8003912:	e7f5      	b.n	8003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003914:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003916:	2301      	movs	r3, #1
 8003918:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 800391c:	e7f0      	b.n	8003900 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800391e:	2300      	movs	r3, #0
 8003920:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003924:	2301      	movs	r3, #1
 8003926:	6203      	str	r3, [r0, #32]
            break;
 8003928:	e7f1      	b.n	800390e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 800392a:	3b00      	subs	r3, #0
 800392c:	bf18      	it	ne
 800392e:	2301      	movne	r3, #1
 8003930:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003934:	e7eb      	b.n	800390e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003936:	bf00      	nop
 8003938:	0802646f 	.word	0x0802646f
 800393c:	080269ba 	.word	0x080269ba
 8003940:	0802660d 	.word	0x0802660d

08003944 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003944:	b510      	push	{r4, lr}
 8003946:	460c      	mov	r4, r1
 8003948:	4611      	mov	r1, r2
 800394a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800394c:	b12c      	cbz	r4, 800395a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003950:	2190      	movs	r1, #144	@ 0x90
 8003952:	4a06      	ldr	r2, [pc, #24]	@ (800396c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003954:	4806      	ldr	r0, [pc, #24]	@ (8003970 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003956:	f020 ffeb 	bl	8024930 <__assert_func>
        stream.frameNumber = 0;
 800395a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800395c:	6840      	ldr	r0, [r0, #4]
 800395e:	6803      	ldr	r3, [r0, #0]
    }
 8003960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4718      	bx	r3
 8003968:	0802646f 	.word	0x0802646f
 800396c:	08026b8e 	.word	0x08026b8e
 8003970:	0802660d 	.word	0x0802660d

08003974 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003974:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003976:	b129      	cbz	r1, 8003984 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003978:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800397a:	2182      	movs	r1, #130	@ 0x82
 800397c:	4a05      	ldr	r2, [pc, #20]	@ (8003994 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800397e:	4806      	ldr	r0, [pc, #24]	@ (8003998 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003980:	f020 ffd6 	bl	8024930 <__assert_func>
        stream.tickCount = 0;
 8003984:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003988:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800398c:	bd08      	pop	{r3, pc}
 800398e:	bf00      	nop
 8003990:	0802646f 	.word	0x0802646f
 8003994:	08026d69 	.word	0x08026d69
 8003998:	0802660d 	.word	0x0802660d

0800399c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800399c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80039a4:	b153      	cbz	r3, 80039bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80039a6:	f04f 31ff 	mov.w	r1, #4294967295
 80039aa:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80039ac:	f009 fadc 	bl	800cf68 <osMutexAcquire>
            firstDrawThisFrame = false;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80039bc:	bd10      	pop	{r4, pc}

080039be <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80039be:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80039c2:	b11a      	cbz	r2, 80039cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80039c4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80039c8:	b102      	cbz	r2, 80039cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80039ca:	6018      	str	r0, [r3, #0]
        }
    }
 80039cc:	4770      	bx	lr
	...

080039d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80039d0:	b510      	push	{r4, lr}
 80039d2:	4604      	mov	r4, r0
 80039d4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80039d6:	b129      	cbz	r1, 80039e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80039d8:	4b13      	ldr	r3, [pc, #76]	@ (8003a28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80039da:	21d0      	movs	r1, #208	@ 0xd0
 80039dc:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80039de:	4814      	ldr	r0, [pc, #80]	@ (8003a30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80039e0:	f020 ffa6 	bl	8024930 <__assert_func>
        if (stream.isPlaying)
 80039e4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80039e8:	b133      	cbz	r3, 80039f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80039f2:	6963      	ldr	r3, [r4, #20]
 80039f4:	4413      	add	r3, r2
 80039f6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80039f8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80039fc:	b90b      	cbnz	r3, 8003a02 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80039fe:	2001      	movs	r0, #1
    }
 8003a00:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003a06:	6803      	ldr	r3, [r0, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003a0c:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003a0e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003a12:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d1f1      	bne.n	80039fe <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003a1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ee      	bne.n	8003a00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003a22:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003a26:	e7eb      	b.n	8003a00 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003a28:	0802646f 	.word	0x0802646f
 8003a2c:	08026f25 	.word	0x08026f25
 8003a30:	0802660d 	.word	0x0802660d
 8003a34:	24025934 	.word	0x24025934

08003a38 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003a38:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003a3a:	4c1a      	ldr	r4, [pc, #104]	@ (8003aa4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003a3c:	4605      	mov	r5, r0
    HAL::endFrame();
 8003a3e:	f00b fea3 	bl	800f788 <_ZN8touchgfx3HAL8endFrameEv>
 8003a42:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003a46:	b913      	cbnz	r3, 8003a4e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003a48:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003a4c:	b1ab      	cbz	r3, 8003a7a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003a4e:	69e1      	ldr	r1, [r4, #28]
 8003a50:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003a54:	4353      	muls	r3, r2
 8003a56:	6922      	ldr	r2, [r4, #16]
 8003a58:	434a      	muls	r2, r1
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d30d      	bcc.n	8003a7a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003a5e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003a62:	b138      	cbz	r0, 8003a74 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003a6a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003a6c:	bf98      	it	ls
 8003a6e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003a72:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003a7a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003a7c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003a7e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003a82:	f009 fb29 	bl	800d0d8 <osSemaphoreRelease>
        if (uiHasMutex)
 8003a86:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003a8a:	b12b      	cbz	r3, 8003a98 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003a8c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a8e:	f009 fa8e 	bl	800cfae <osMutexRelease>
            uiHasMutex = false;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003a98:	6868      	ldr	r0, [r5, #4]
 8003a9a:	6803      	ldr	r3, [r0, #0]
}
 8003a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	4718      	bx	r3
 8003aa4:	2400b654 	.word	0x2400b654

08003aa8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	@ (8003abc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003aaa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003ab2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ab6:	f3bf 8f6f 	isb	sy
}
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100

08003ac0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac0:	4b02      	ldr	r3, [pc, #8]	@ (8003acc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003ac2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003ad4:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003ad8:	b9d8      	cbnz	r0, 8003b12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ade:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003ae0:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003ae2:	60d8      	str	r0, [r3, #12]
 8003ae4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ae6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003aea:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003aec:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003af0:	6158      	str	r0, [r3, #20]
 8003af2:	6198      	str	r0, [r3, #24]
 8003af4:	61d8      	str	r0, [r3, #28]
 8003af6:	6218      	str	r0, [r3, #32]
 8003af8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003afa:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003afc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b00:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003b04:	443c      	add	r4, r7
 8003b06:	42a2      	cmp	r2, r4
 8003b08:	d90a      	bls.n	8003b20 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003b0c:	2152      	movs	r1, #82	@ 0x52
 8003b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003b10:	e003      	b.n	8003b1a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003b14:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003b18:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b1a:	480b      	ldr	r0, [pc, #44]	@ (8003b48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003b1c:	f020 ff08 	bl	8024930 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003b20:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003b22:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003b24:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003b28:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003b2c:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003b2e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003b32:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003b34:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b38:	0802727d 	.word	0x0802727d
 8003b3c:	080272b8 	.word	0x080272b8
 8003b40:	080270c6 	.word	0x080270c6
 8003b44:	080270f6 	.word	0x080270f6
 8003b48:	0802660d 	.word	0x0802660d

08003b4c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003b4c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003b4e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b50:	4e12      	ldr	r6, [pc, #72]	@ (8003b9c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003b52:	4604      	mov	r4, r0
 8003b54:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003b56:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003b58:	6003      	str	r3, [r0, #0]
 8003b5a:	6833      	ldr	r3, [r6, #0]
 8003b5c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b60:	b10a      	cbz	r2, 8003b66 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003b62:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b64:	b900      	cbnz	r0, 8003b68 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003b66:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003b68:	6803      	ldr	r3, [r0, #0]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	4798      	blx	r3
 8003b6e:	1e43      	subs	r3, r0, #1
 8003b70:	425d      	negs	r5, r3
 8003b72:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003b74:	6833      	ldr	r3, [r6, #0]
 8003b76:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003b78:	b130      	cbz	r0, 8003b88 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003b7a:	6803      	ldr	r3, [r0, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	4798      	blx	r3
 8003b80:	2801      	cmp	r0, #1
 8003b82:	bf08      	it	eq
 8003b84:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003b88:	b92d      	cbnz	r5, 8003b96 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003b8c:	2127      	movs	r1, #39	@ 0x27
 8003b8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ba8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003b90:	4806      	ldr	r0, [pc, #24]	@ (8003bac <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003b92:	f020 fecd 	bl	8024930 <__assert_func>
    }
 8003b96:	4620      	mov	r0, r4
 8003b98:	bd70      	pop	{r4, r5, r6, pc}
 8003b9a:	bf00      	nop
 8003b9c:	24025934 	.word	0x24025934
 8003ba0:	08027efc 	.word	0x08027efc
 8003ba4:	0802745b 	.word	0x0802745b
 8003ba8:	080274b9 	.word	0x080274b9
 8003bac:	080274f2 	.word	0x080274f2

08003bb0 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003bb0:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003bb2:	4e25      	ldr	r6, [pc, #148]	@ (8003c48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003bb4:	6835      	ldr	r5, [r6, #0]
 8003bb6:	f3bf 8f5b 	dmb	ish
 8003bba:	f015 0501 	ands.w	r5, r5, #1
 8003bbe:	d140      	bne.n	8003c42 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f020 fb41 	bl	8024248 <__cxa_guard_acquire>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d03b      	beq.n	8003c42 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 8003bca:	4c20      	ldr	r4, [pc, #128]	@ (8003c4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003bcc:	4b20      	ldr	r3, [pc, #128]	@ (8003c50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 8003bce:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003bd2:	6125      	str	r5, [r4, #16]
 8003bd4:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003bd6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003bd8:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003bda:	e9c4 3500 	strd	r3, r5, [r4]
 8003bde:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003be2:	f013 fc5c 	bl	801749e <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003be6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bea:	f00e f8f3 	bl	8011dd4 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003bee:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003bf0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003bf2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003bf4:	4b18      	ldr	r3, [pc, #96]	@ (8003c58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003bf6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003bfa:	f7ff ffa7 	bl	8003b4c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003bfe:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003c00:	4817      	ldr	r0, [pc, #92]	@ (8003c60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003c02:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003c06:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003c08:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003c0c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003c10:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8003c14:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003c18:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003c1c:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003c26:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003c2a:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003c2e:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003c32:	4b0c      	ldr	r3, [pc, #48]	@ (8003c64 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 8003c34:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003c38:	f020 fe98 	bl	802496c <atexit>
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	f020 fb0f 	bl	8024260 <__cxa_guard_release>
}
 8003c42:	4802      	ldr	r0, [pc, #8]	@ (8003c4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
 8003c46:	bf00      	nop
 8003c48:	2400b594 	.word	0x2400b594
 8003c4c:	2400b598 	.word	0x2400b598
 8003c50:	08028cf8 	.word	0x08028cf8
 8003c54:	08027f1c 	.word	0x08027f1c
 8003c58:	08027f94 	.word	0x08027f94
 8003c5c:	08028d44 	.word	0x08028d44
 8003c60:	08003719 	.word	0x08003719
 8003c64:	08028d7c 	.word	0x08028d7c

08003c68 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003c6e:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c70:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003c74:	f04f 31ff 	mov.w	r1, #4294967295
 8003c78:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003c7a:	f009 fa01 	bl	800d080 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c82:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c84:	f009 f970 	bl	800cf68 <osMutexAcquire>
                if (stream.doDecode)
 8003c88:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003c8c:	b343      	cbz	r3, 8003ce0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003c8e:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003c90:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003c94:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003c96:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003c9a:	f1b8 0f00 	cmp.w	r8, #0
 8003c9e:	d023      	beq.n	8003ce8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003cb2:	9700      	str	r7, [sp, #0]
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003cba:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003cbe:	68a1      	ldr	r1, [r4, #8]
 8003cc0:	47c0      	blx	r8
                    stream.frameCount++;
 8003cc2:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003cc4:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003cc8:	3301      	adds	r3, #1
 8003cca:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003ccc:	b1f0      	cbz	r0, 8003d0c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	4798      	blx	r3
 8003cd6:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003cd8:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003cda:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003cdc:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003ce0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003ce2:	f009 f964 	bl	800cfae <osMutexRelease>
        while (1)
 8003ce6:	e7c5      	b.n	8003c74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003ce8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d0de      	beq.n	8003cac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003cee:	4628      	mov	r0, r5
 8003cf0:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003cf4:	4798      	blx	r3
 8003cf6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003cf8:	4401      	add	r1, r0
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003cfe:	6923      	ldr	r3, [r4, #16]
 8003d00:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003d02:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003d06:	4413      	add	r3, r2
 8003d08:	6123      	str	r3, [r4, #16]
 8003d0a:	e7cf      	b.n	8003cac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	e7e3      	b.n	8003cd8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003d10 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003d10:	4801      	ldr	r0, [pc, #4]	@ (8003d18 <videoTaskFunc+0x8>)
{
 8003d12:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003d14:	f7ff ffa8 	bl	8003c68 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003d18:	2400b654 	.word	0x2400b654

08003d1c <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003d1c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003d1e:	4814      	ldr	r0, [pc, #80]	@ (8003d70 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d20:	2500      	movs	r5, #0
 8003d22:	f7fe fbef 	bl	8002504 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d26:	4c13      	ldr	r4, [pc, #76]	@ (8003d74 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003d28:	4b13      	ldr	r3, [pc, #76]	@ (8003d78 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d2a:	462a      	mov	r2, r5
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d36:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d38:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d3a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d3c:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003d40:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d44:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d48:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d50:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003d54:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003d58:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d5c:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d60:	f009 f944 	bl	800cfec <osSemaphoreNew>
 8003d64:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003d66:	4628      	mov	r0, r5
 8003d68:	f009 f8c6 	bl	800cef8 <osMutexNew>
 8003d6c:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	2400b69c 	.word	0x2400b69c
 8003d74:	2400b654 	.word	0x2400b654
 8003d78:	08027fe0 	.word	0x08027fe0

08003d7c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId MODE = 0;     // verdana_20_4bpp
    static const touchgfx::FontId KEYBOARD = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d7c:	4770      	bx	lr

08003d7e <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003d7e:	b508      	push	{r3, lr}
    switch (typography)
 8003d80:	2905      	cmp	r1, #5
 8003d82:	d810      	bhi.n	8003da6 <_ZN23ApplicationFontProvider7getFontEt+0x28>
 8003d84:	e8df f001 	tbb	[pc, r1]
 8003d88:	0b07030b 	.word	0x0b07030b
 8003d8c:	0b0b      	.short	0x0b0b
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d8e:	f001 f873 	bl	8004e78 <_ZN17TypedTextDatabase8getFontsEv>
 8003d92:	6840      	ldr	r0, [r0, #4]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8003d94:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003d96:	f001 f86f 	bl	8004e78 <_ZN17TypedTextDatabase8getFontsEv>
 8003d9a:	6880      	ldr	r0, [r0, #8]
 8003d9c:	e7fa      	b.n	8003d94 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d9e:	f001 f86b 	bl	8004e78 <_ZN17TypedTextDatabase8getFontsEv>
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	e7f6      	b.n	8003d94 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 8003da6:	2000      	movs	r0, #0
 8003da8:	e7f4      	b.n	8003d94 <_ZN23ApplicationFontProvider7getFontEt+0x16>

08003daa <_ZN23ApplicationFontProviderD0Ev>:
 8003daa:	b510      	push	{r4, lr}
 8003dac:	4604      	mov	r4, r0
 8003dae:	2104      	movs	r1, #4
 8003db0:	f020 fa48 	bl	8024244 <_ZdlPvj>
 8003db4:	4620      	mov	r0, r4
 8003db6:	bd10      	pop	{r4, pc}

08003db8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003db8:	4800      	ldr	r0, [pc, #0]	@ (8003dbc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003dba:	4770      	bx	lr
 8003dbc:	08028030 	.word	0x08028030

08003dc0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003dc0:	200f      	movs	r0, #15
 8003dc2:	4770      	bx	lr

08003dc4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003dc4:	b513      	push	{r0, r1, r4, lr}
 8003dc6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003dc8:	b151      	cbz	r1, 8003de0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dca:	6803      	ldr	r3, [r0, #0]
 8003dcc:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003dce:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003dd0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dd4:	689c      	ldr	r4, [r3, #8]
 8003dd6:	f10d 0303 	add.w	r3, sp, #3
 8003dda:	47a0      	blx	r4
        return glyph;
    }
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd10      	pop	{r4, pc}
            return 0;
 8003de0:	4608      	mov	r0, r1
 8003de2:	e7fb      	b.n	8003ddc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003de4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003de4:	89c0      	ldrh	r0, [r0, #14]
 8003de6:	4770      	bx	lr

08003de8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003de8:	8a00      	ldrh	r0, [r0, #16]
 8003dea:	4770      	bx	lr

08003dec <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003dec:	88c0      	ldrh	r0, [r0, #6]
 8003dee:	4770      	bx	lr

08003df0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003df0:	8880      	ldrh	r0, [r0, #4]
 8003df2:	4770      	bx	lr

08003df4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003df4:	7a80      	ldrb	r0, [r0, #10]
    }
 8003df6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003dfa:	4770      	bx	lr

08003dfc <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003dfc:	7a80      	ldrb	r0, [r0, #10]
    }
 8003dfe:	09c0      	lsrs	r0, r0, #7
 8003e00:	4770      	bx	lr

08003e02 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003e02:	2000      	movs	r0, #0
 8003e04:	4770      	bx	lr
	...

08003e08 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003e08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003e10 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	00000000 	.word	0x00000000

08003e14 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003e14:	4770      	bx	lr

08003e16 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003e16:	4770      	bx	lr

08003e18 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003e18:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003e1c:	6808      	ldr	r0, [r1, #0]
 8003e1e:	6849      	ldr	r1, [r1, #4]
 8003e20:	c303      	stmia	r3!, {r0, r1}
    }
 8003e22:	4770      	bx	lr

08003e24 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003e24:	4770      	bx	lr

08003e26 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003e26:	4770      	bx	lr

08003e28 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003e28:	6041      	str	r1, [r0, #4]
    }
 8003e2a:	4770      	bx	lr

08003e2c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e2c:	4770      	bx	lr

08003e2e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003e2e:	4770      	bx	lr

08003e30 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003e30:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003e32:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003e36:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003e40:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003e44:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	08003ef1 	.word	0x08003ef1

08003e50 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003e50:	2301      	movs	r3, #1
 8003e52:	7203      	strb	r3, [r0, #8]
    }
 8003e54:	4770      	bx	lr

08003e56 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003e56:	4770      	bx	lr

08003e58 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003e58:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003e5a:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003e5c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003e5e:	68c2      	ldr	r2, [r0, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	1054      	asrs	r4, r2, #1
 8003e64:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003e68:	07d2      	lsls	r2, r2, #31
 8003e6a:	bf48      	it	mi
 8003e6c:	590a      	ldrmi	r2, [r1, r4]
    }
 8003e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003e72:	bf48      	it	mi
 8003e74:	58d3      	ldrmi	r3, [r2, r3]
 8003e76:	4718      	bx	r3

08003e78 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003e78:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003e7a:	6840      	ldr	r0, [r0, #4]
 8003e7c:	b130      	cbz	r0, 8003e8c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	b91a      	cbnz	r2, 8003e8a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003e82:	68d8      	ldr	r0, [r3, #12]
 8003e84:	f000 0001 	and.w	r0, r0, #1
 8003e88:	4770      	bx	lr
 8003e8a:	2001      	movs	r0, #1
    }
 8003e8c:	4770      	bx	lr

08003e8e <_ZN8touchgfx12NoTransitionD0Ev>:
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	4604      	mov	r4, r0
 8003e92:	210c      	movs	r1, #12
 8003e94:	f020 f9d6 	bl	8024244 <_ZdlPvj>
 8003e98:	4620      	mov	r0, r4
 8003e9a:	bd10      	pop	{r4, pc}

08003e9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	f020 f9cf 	bl	8024244 <_ZdlPvj>
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	bd10      	pop	{r4, pc}

08003eaa <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	4604      	mov	r4, r0
 8003eae:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003eb2:	f020 f9c7 	bl	8024244 <_ZdlPvj>
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	bd10      	pop	{r4, pc}

08003eba <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003eba:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003ebc:	f011 fd9c 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8003ec0:	6803      	ldr	r3, [r0, #0]
    }
 8003ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	4718      	bx	r3

08003eca <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003ece:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003ed2:	b158      	cbz	r0, 8003eec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003ed4:	6803      	ldr	r3, [r0, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4798      	blx	r3
 8003eda:	b138      	cbz	r0, 8003eec <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003edc:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003ee0:	6803      	ldr	r3, [r0, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003eec:	bd10      	pop	{r4, pc}
	...

08003ef0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003ef0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ef4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ef8:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003efa:	68b0      	ldr	r0, [r6, #8]
 8003efc:	6803      	ldr	r3, [r0, #0]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	4798      	blx	r3
 8003f02:	f5b0 6fd1 	cmp.w	r0, #1672	@ 0x688
 8003f06:	d205      	bcs.n	8003f14 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003f08:	4b44      	ldr	r3, [pc, #272]	@ (800401c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003f0a:	21a3      	movs	r1, #163	@ 0xa3
 8003f0c:	4a44      	ldr	r2, [pc, #272]	@ (8004020 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f0e:	4845      	ldr	r0, [pc, #276]	@ (8004024 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003f10:	f020 fd0e 	bl	8024930 <__assert_func>
 8003f14:	6870      	ldr	r0, [r6, #4]
 8003f16:	6803      	ldr	r3, [r0, #0]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4798      	blx	r3
 8003f1c:	280f      	cmp	r0, #15
 8003f1e:	d803      	bhi.n	8003f28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003f20:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003f22:	21a4      	movs	r1, #164	@ 0xa4
 8003f24:	4a3e      	ldr	r2, [pc, #248]	@ (8004020 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003f26:	e7f2      	b.n	8003f0e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f28:	68f0      	ldr	r0, [r6, #12]
 8003f2a:	6803      	ldr	r3, [r0, #0]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	4798      	blx	r3
 8003f30:	280b      	cmp	r0, #11
 8003f32:	d803      	bhi.n	8003f3c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003f34:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003f36:	21a5      	movs	r1, #165	@ 0xa5
 8003f38:	4a39      	ldr	r2, [pc, #228]	@ (8004020 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003f3a:	e7e8      	b.n	8003f0e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003f3c:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004034 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003f40:	f011 fd5a 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003f44:	3004      	adds	r0, #4
 8003f46:	f011 fd7c 	bl	8015a42 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f4a:	f8d9 0000 	ldr.w	r0, [r9]
 8003f4e:	b110      	cbz	r0, 8003f56 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003f50:	6803      	ldr	r3, [r0, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4798      	blx	r3
    if (*currentTrans)
 8003f56:	f8d9 0000 	ldr.w	r0, [r9]
 8003f5a:	b110      	cbz	r0, 8003f62 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003f5c:	6803      	ldr	r3, [r0, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4798      	blx	r3
    if (*currentScreen)
 8003f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004038 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003f66:	f8d8 0000 	ldr.w	r0, [r8]
 8003f6a:	b110      	cbz	r0, 8003f72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4798      	blx	r3
    if (*currentPresenter)
 8003f72:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f76:	b110      	cbz	r0, 8003f7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003f78:	6803      	ldr	r3, [r0, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4798      	blx	r3
    if (*currentScreen)
 8003f7e:	f8d8 0000 	ldr.w	r0, [r8]
 8003f82:	b110      	cbz	r0, 8003f8a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003f84:	6803      	ldr	r3, [r0, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4798      	blx	r3
    if (*currentPresenter)
 8003f8a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f8e:	b110      	cbz	r0, 8003f96 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003f90:	6803      	ldr	r3, [r0, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003f96:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003f98:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003f9a:	f04f 0b00 	mov.w	fp, #0
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	4798      	blx	r3
 8003fa4:	4b22      	ldr	r3, [pc, #136]	@ (8004030 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	f8c0 b004 	str.w	fp, [r0, #4]
 8003fac:	f880 b008 	strb.w	fp, [r0, #8]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003fb4:	68b0      	ldr	r0, [r6, #8]
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	4798      	blx	r3
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	f001 fc1f 	bl	8005800 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003fc2:	6870      	ldr	r0, [r6, #4]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	4798      	blx	r3
 8003fcc:	4606      	mov	r6, r0
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f001 fb18 	bl	8005604 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003fd4:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fd6:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fda:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003fdc:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003fe0:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003fe4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003fe8:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003fea:	f8c6 a008 	str.w	sl, [r6, #8]
 8003fee:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003ff0:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003ff2:	4798      	blx	r3
    newPresenter->activate();
 8003ff4:	6833      	ldr	r3, [r6, #0]
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f013 fea6 	bl	8017d50 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	4620      	mov	r0, r4
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4798      	blx	r3
    newTransition->invalidate();
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	4620      	mov	r0, r4
 8004010:	695b      	ldr	r3, [r3, #20]
}
 8004012:	b001      	add	sp, #4
 8004014:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	4718      	bx	r3
 800401a:	bf00      	nop
 800401c:	08027562 	.word	0x08027562
 8004020:	080275f0 	.word	0x080275f0
 8004024:	080276c2 	.word	0x080276c2
 8004028:	08027717 	.word	0x08027717
 800402c:	080277ba 	.word	0x080277ba
 8004030:	080281e0 	.word	0x080281e0
 8004034:	2402597c 	.word	0x2402597c
 8004038:	24025978 	.word	0x24025978

0800403c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004044:	b10a      	cbz	r2, 800404a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004046:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004048:	b900      	cbnz	r0, 800404c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800404a:	6898      	ldr	r0, [r3, #8]
    }
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	24025934 	.word	0x24025934

08004054 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	4617      	mov	r7, r2
 8004058:	4604      	mov	r4, r0
 800405a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800405c:	f011 fd92 	bl	8015b84 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004060:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8004062:	2500      	movs	r5, #0
        instance = this;
 8004064:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004066:	4629      	mov	r1, r5
      model(m)
 8004068:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800406a:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 800406c:	4b11      	ldr	r3, [pc, #68]	@ (80040b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800406e:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8004072:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800407a:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800407c:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8004080:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004082:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004086:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004088:	4628      	mov	r0, r5
 800408a:	f000 fea9 	bl	8004de0 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800408e:	f7ff ffd5 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8004092:	f01a fa4c 	bl	801e52e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004096:	f7ff ffd1 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800409a:	f01a fabf 	bl	801e61c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800409e:	f7ff ffcd 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 80040a2:	f01a fac7 	bl	801e634 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80040a6:	4620      	mov	r0, r4
 80040a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040aa:	bf00      	nop
 80040ac:	24025988 	.word	0x24025988
 80040b0:	0802818c 	.word	0x0802818c
 80040b4:	08028174 	.word	0x08028174
 80040b8:	24025934 	.word	0x24025934

080040bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80040bc:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80040be:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80040c2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80040c6:	2300      	movs	r3, #0
 80040c8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80040cc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80040d0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	08003ef1 	.word	0x08003ef1

080040dc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80040dc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80040de:	4770      	bx	lr

080040e0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80040e0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80040e2:	4770      	bx	lr

080040e4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80040e4:	4770      	bx	lr

080040e6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 80040e6:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80040e8:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 80040ea:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80040ec:	0ad2      	lsrs	r2, r2, #11
{
 80040ee:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 80040f0:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 80040f2:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 80040f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 80040f8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 80040fc:	4418      	add	r0, r3
 80040fe:	bd10      	pop	{r4, pc}

08004100 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8004104:	b1ba      	cbz	r2, 8004136 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004106:	7b10      	ldrb	r0, [r2, #12]
 8004108:	b168      	cbz	r0, 8004126 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800410a:	7b53      	ldrb	r3, [r2, #13]
 800410c:	7ad2      	ldrb	r2, [r2, #11]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004114:	431a      	orrs	r2, r3
 8004116:	6a23      	ldr	r3, [r4, #32]
 8004118:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 800411c:	881a      	ldrh	r2, [r3, #0]
 800411e:	428a      	cmp	r2, r1
 8004120:	d102      	bne.n	8004128 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004122:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8004126:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8004128:	d805      	bhi.n	8004136 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800412a:	3801      	subs	r0, #1
 800412c:	3304      	adds	r3, #4
 800412e:	b280      	uxth	r0, r0
 8004130:	2800      	cmp	r0, #0
 8004132:	d1f3      	bne.n	800411c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004134:	e7f7      	b.n	8004126 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004136:	2000      	movs	r0, #0
 8004138:	e7f5      	b.n	8004126 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800413a <_ZN8touchgfx13GeneratedFontD0Ev>:
 800413a:	b510      	push	{r4, lr}
 800413c:	4604      	mov	r4, r0
 800413e:	212c      	movs	r1, #44	@ 0x2c
 8004140:	f020 f880 	bl	8024244 <_ZdlPvj>
 8004144:	4620      	mov	r0, r4
 8004146:	bd10      	pop	{r4, pc}

08004148 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004148:	b530      	push	{r4, r5, lr}
 800414a:	b08b      	sub	sp, #44	@ 0x2c
 800414c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800414e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8004152:	9508      	str	r5, [sp, #32]
 8004154:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8004158:	9507      	str	r5, [sp, #28]
 800415a:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800415e:	9506      	str	r5, [sp, #24]
 8004160:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8004164:	9505      	str	r5, [sp, #20]
 8004166:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800416a:	9504      	str	r5, [sp, #16]
 800416c:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004170:	9503      	str	r5, [sp, #12]
 8004172:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8004176:	9502      	str	r5, [sp, #8]
 8004178:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800417c:	9501      	str	r5, [sp, #4]
 800417e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8004182:	9500      	str	r5, [sp, #0]
 8004184:	f013 fa48 	bl	8017618 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800418a:	4620      	mov	r0, r4
      arabicTable(formsTable)
 800418c:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800418e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004190:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8004192:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004194:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8004196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004198:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800419a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800419c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800419e:	b00b      	add	sp, #44	@ 0x2c
 80041a0:	bd30      	pop	{r4, r5, pc}
 80041a2:	bf00      	nop
 80041a4:	08028204 	.word	0x08028204

080041a8 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80041a8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80041aa:	4770      	bx	lr

080041ac <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80041ac:	4770      	bx	lr

080041ae <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80041ae:	4770      	bx	lr

080041b0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80041b0:	4770      	bx	lr

080041b2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80041b2:	4770      	bx	lr

080041b4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80041b4:	4770      	bx	lr

080041b6 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80041b6:	b530      	push	{r4, r5, lr}
 80041b8:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80041ba:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80041bc:	4604      	mov	r4, r0
        rect.width = width;
 80041be:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80041c0:	466d      	mov	r5, sp
 80041c2:	4601      	mov	r1, r0
 80041c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c8:	343c      	adds	r4, #60	@ 0x3c
 80041ca:	4628      	mov	r0, r5
 80041cc:	4798      	blx	r3
 80041ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80041d6:	b005      	add	sp, #20
 80041d8:	bd30      	pop	{r4, r5, pc}

080041da <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80041da:	b530      	push	{r4, r5, lr}
 80041dc:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80041de:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80041e0:	4604      	mov	r4, r0
        rect.height = height;
 80041e2:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80041e4:	466d      	mov	r5, sp
 80041e6:	4601      	mov	r1, r0
 80041e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ec:	343c      	adds	r4, #60	@ 0x3c
 80041ee:	4628      	mov	r0, r5
 80041f0:	4798      	blx	r3
 80041f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80041f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80041fa:	b005      	add	sp, #20
 80041fc:	bd30      	pop	{r4, r5, pc}

080041fe <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80041fe:	2200      	movs	r2, #0
 8004200:	8002      	strh	r2, [r0, #0]
 8004202:	8042      	strh	r2, [r0, #2]
 8004204:	8082      	strh	r2, [r0, #4]
 8004206:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004208:	4770      	bx	lr

0800420a <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800420a:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 800420e:	4770      	bx	lr

08004210 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8004210:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004212:	b570      	push	{r4, r5, r6, lr}
 8004214:	4604      	mov	r4, r0
        setX(x);
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004218:	4615      	mov	r5, r2
        setX(x);
 800421a:	4798      	blx	r3
        setBaselineY(baselineY);
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8004224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8004228:	4718      	bx	r3

0800422a <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800422a:	2000      	movs	r0, #0
 800422c:	4770      	bx	lr

0800422e <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800422e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8004230:	4770      	bx	lr

08004232 <_ZN15Screen1ViewBase11NameClickedEv>:
     * Virtual Action Handlers
     */
    virtual void NameClicked()
    {
        // Override and implement this function in Screen1
    }
 8004232:	4770      	bx	lr

08004234 <_ZN15Screen1ViewBase10AgeClickedEv>:
    virtual void AgeClicked()
    {
        // Override and implement this function in Screen1
    }
 8004234:	4770      	bx	lr

08004236 <_ZN15Screen1ViewBase9OkClickedEv>:
    virtual void OkClicked()
    {
        // Override and implement this function in Screen1
    }
 8004236:	4770      	bx	lr

08004238 <_ZN15Screen1ViewBase11ExitClickedEv>:
    virtual void ExitClicked()
    {
        // Override and implement this function in Screen1
    }
 8004238:	4770      	bx	lr

0800423a <_ZN15Screen1ViewBase11SendClickedEv>:
    virtual void SendClicked()
    {
        // Override and implement this function in Screen1
    }
 800423a:	4770      	bx	lr

0800423c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800423c:	4770      	bx	lr

0800423e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 800423e:	4770      	bx	lr

08004240 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004240:	4770      	bx	lr

08004242 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 8004242:	4770      	bx	lr

08004244 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8004244:	4770      	bx	lr

08004246 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8004246:	4770      	bx	lr

08004248 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
     *
     * @see setPressed
     */
    bool getPressed() const
    {
        return pressed;
 8004248:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800424c:	b14b      	cbz	r3, 8004262 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 800424e:	f100 026c 	add.w	r2, r0, #108	@ 0x6c
 8004252:	6812      	ldr	r2, [r2, #0]
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004254:	65c2      	str	r2, [r0, #92]	@ 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004256:	b13b      	cbz	r3, 8004268 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 8004258:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 800425c:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 800425e:	6603      	str	r3, [r0, #96]	@ 0x60
        T::handlePressedUpdated();
    }
 8004260:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 8004262:	f100 0268 	add.w	r2, r0, #104	@ 0x68
 8004266:	e7f4      	b.n	8004252 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 8004268:	f100 0370 	add.w	r3, r0, #112	@ 0x70
 800426c:	e7f6      	b.n	800425c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>

0800426e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800426e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004270:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004272:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004274:	68c2      	ldr	r2, [r0, #12]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	1055      	asrs	r5, r2, #1
 800427a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800427e:	07d2      	lsls	r2, r2, #31
 8004280:	bf48      	it	mi
 8004282:	5962      	ldrmi	r2, [r4, r5]
    }
 8004284:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004286:	bf48      	it	mi
 8004288:	58d3      	ldrmi	r3, [r2, r3]
 800428a:	4718      	bx	r3

0800428c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800428c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800428e:	6840      	ldr	r0, [r0, #4]
 8004290:	b130      	cbz	r0, 80042a0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	b91a      	cbnz	r2, 800429e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004296:	68d8      	ldr	r0, [r3, #12]
 8004298:	f000 0001 	and.w	r0, r0, #1
 800429c:	4770      	bx	lr
 800429e:	2001      	movs	r0, #1
    }
 80042a0:	4770      	bx	lr

080042a2 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80042a2:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042a4:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80042a6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80042a8:	68c2      	ldr	r2, [r0, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	1055      	asrs	r5, r2, #1
 80042ae:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80042b2:	07d2      	lsls	r2, r2, #31
 80042b4:	bf48      	it	mi
 80042b6:	5962      	ldrmi	r2, [r4, r5]
    }
 80042b8:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80042ba:	bf48      	it	mi
 80042bc:	58d3      	ldrmi	r3, [r2, r3]
 80042be:	4718      	bx	r3

080042c0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80042c0:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80042c2:	6840      	ldr	r0, [r0, #4]
 80042c4:	b130      	cbz	r0, 80042d4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	b91a      	cbnz	r2, 80042d2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 80042ca:	68d8      	ldr	r0, [r3, #12]
 80042cc:	f000 0001 	and.w	r0, r0, #1
 80042d0:	4770      	bx	lr
 80042d2:	2001      	movs	r0, #1
    }
 80042d4:	4770      	bx	lr

080042d6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80042d6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80042da:	f880 305a 	strb.w	r3, [r0, #90]	@ 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 80042de:	4770      	bx	lr

080042e0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4604      	mov	r4, r0
 80042e4:	214c      	movs	r1, #76	@ 0x4c
 80042e6:	f01f ffad 	bl	8024244 <_ZdlPvj>
 80042ea:	4620      	mov	r0, r4
 80042ec:	bd10      	pop	{r4, pc}

080042ee <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 80042ee:	b510      	push	{r4, lr}
 80042f0:	4604      	mov	r4, r0
 80042f2:	2178      	movs	r1, #120	@ 0x78
 80042f4:	f01f ffa6 	bl	8024244 <_ZdlPvj>
 80042f8:	4620      	mov	r0, r4
 80042fa:	bd10      	pop	{r4, pc}

080042fc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4604      	mov	r4, r0
 8004300:	2110      	movs	r1, #16
 8004302:	f01f ff9f 	bl	8024244 <_ZdlPvj>
 8004306:	4620      	mov	r0, r4
 8004308:	bd10      	pop	{r4, pc}

0800430a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	2110      	movs	r1, #16
 8004310:	f01f ff98 	bl	8024244 <_ZdlPvj>
 8004314:	4620      	mov	r0, r4
 8004316:	bd10      	pop	{r4, pc}

08004318 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8004318:	b510      	push	{r4, lr}
 800431a:	4604      	mov	r4, r0
}
 800431c:	f44f 618c 	mov.w	r1, #1120	@ 0x460
 8004320:	f01f ff90 	bl	8024244 <_ZdlPvj>
 8004324:	4620      	mov	r0, r4
 8004326:	bd10      	pop	{r4, pc}

08004328 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8004328:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 800432a:	f7ff fa68 	bl	80037fe <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800432e:	bd08      	pop	{r3, pc}

08004330 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8004334:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004336:	b150      	cbz	r0, 800434e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8004338:	6803      	ldr	r3, [r0, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4798      	blx	r3
 800433e:	b130      	cbz	r0, 800434e <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8004340:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004342:	4621      	mov	r1, r4
 8004344:	6803      	ldr	r3, [r0, #0]
        }
    }
 8004346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4718      	bx	r3
    }
 800434e:	bd10      	pop	{r4, pc}

08004350 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButtonName)
 8004350:	f500 730a 	add.w	r3, r0, #552	@ 0x228
 8004354:	4299      	cmp	r1, r3
{
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	4604      	mov	r4, r0
 800435a:	460d      	mov	r5, r1
    if (&src == &flexButtonName)
 800435c:	d102      	bne.n	8004364 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    {
        //Interaction1
        //When flexButtonName clicked call virtual function
        //Call NameClicked
        NameClicked();
 800435e:	6803      	ldr	r3, [r0, #0]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	4798      	blx	r3
    }
    if (&src == &flexButtonAge)
 8004364:	f504 7328 	add.w	r3, r4, #672	@ 0x2a0
 8004368:	429d      	cmp	r5, r3
 800436a:	d105      	bne.n	8004378 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x28>
    {
        //Interaction2
        //When flexButtonAge clicked call virtual function
        //Call AgeClicked
        AgeClicked();
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	4620      	mov	r0, r4
 8004370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
}
 8004372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        AgeClicked();
 8004376:	4718      	bx	r3
}
 8004378:	bd70      	pop	{r4, r5, r6, pc}

0800437a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &OKButton)
 800437a:	f500 7346 	add.w	r3, r0, #792	@ 0x318
 800437e:	4299      	cmp	r1, r3
{
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4604      	mov	r4, r0
 8004384:	460d      	mov	r5, r1
    if (&src == &OKButton)
 8004386:	d102      	bne.n	800438e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    {
        //Interaction3
        //When OKButton clicked call virtual function
        //Call OkClicked
        OkClicked();
 8004388:	6803      	ldr	r3, [r0, #0]
 800438a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438c:	4798      	blx	r3
    }
    if (&src == &ExitButton)
 800438e:	f504 7358 	add.w	r3, r4, #864	@ 0x360
 8004392:	429d      	cmp	r5, r3
 8004394:	d103      	bne.n	800439e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction4
        //When ExitButton clicked call virtual function
        //Call ExitClicked
        ExitClicked();
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	4620      	mov	r0, r4
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	4798      	blx	r3
    }
    if (&src == &buttonWithSend)
 800439e:	f504 736a 	add.w	r3, r4, #936	@ 0x3a8
 80043a2:	429d      	cmp	r5, r3
 80043a4:	d105      	bne.n	80043b2 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x38>
    {
        //Interaction5
        //When buttonWithSend clicked call virtual function
        //Call SendClicked
        SendClicked();
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	4620      	mov	r0, r4
 80043aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
}
 80043ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SendClicked();
 80043b0:	4718      	bx	r3
}
 80043b2:	bd70      	pop	{r4, r5, r6, pc}

080043b4 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043b4:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80043b6:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043b8:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 80043ba:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80043bc:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80043be:	b28d      	uxth	r5, r1
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b92b      	cbnz	r3, 80043d0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80043c6:	216c      	movs	r1, #108	@ 0x6c
 80043c8:	4a10      	ldr	r2, [pc, #64]	@ (800440c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80043ca:	4811      	ldr	r0, [pc, #68]	@ (8004410 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80043cc:	f020 fab0 	bl	8024930 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80043d0:	4910      	ldr	r1, [pc, #64]	@ (8004414 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80043d2:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80043d4:	8809      	ldrh	r1, [r1, #0]
 80043d6:	4291      	cmp	r1, r2
 80043d8:	d803      	bhi.n	80043e2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80043da:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80043dc:	216d      	movs	r1, #109	@ 0x6d
 80043de:	4a0b      	ldr	r2, [pc, #44]	@ (800440c <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80043e0:	e7f3      	b.n	80043ca <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 80043e2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80043e6:	4b0d      	ldr	r3, [pc, #52]	@ (800441c <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80043ee:	6803      	ldr	r3, [r0, #0]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	4798      	blx	r3
 80043f4:	1a29      	subs	r1, r5, r0
 80043f6:	4633      	mov	r3, r6
 80043f8:	4620      	mov	r0, r4
 80043fa:	b209      	sxth	r1, r1
    }
 80043fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004400:	4718      	bx	r3
 8004402:	bf00      	nop
 8004404:	2402598c 	.word	0x2402598c
 8004408:	0802785d 	.word	0x0802785d
 800440c:	0802789f 	.word	0x0802789f
 8004410:	080278da 	.word	0x080278da
 8004414:	24025990 	.word	0x24025990
 8004418:	0802792f 	.word	0x0802792f
 800441c:	24025994 	.word	0x24025994

08004420 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8004420:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004422:	b570      	push	{r4, r5, r6, lr}
 8004424:	4604      	mov	r4, r0
 8004426:	460d      	mov	r5, r1
        return pressed;
 8004428:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800442c:	b90b      	cbnz	r3, 8004432 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 800442e:	b116      	cbz	r6, 8004436 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8004430:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004432:	2e00      	cmp	r6, #0
 8004434:	d0fc      	beq.n	8004430 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8004436:	fab3 f383 	clz	r3, r3
        handlePressedUpdated();
 800443a:	4620      	mov	r0, r4
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004448:	4798      	blx	r3
            invalidate();
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	4620      	mov	r0, r4
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8004452:	2e00      	cmp	r6, #0
 8004454:	d0ec      	beq.n	8004430 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8004456:	792b      	ldrb	r3, [r5, #4]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d1e9      	bne.n	8004430 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	4620      	mov	r0, r4
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8004464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8004468:	4718      	bx	r3

0800446a <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800446a:	2200      	movs	r2, #0
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8004470:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8004472:	e9c0 2100 	strd	r2, r1, [r0]
    }
 8004476:	4770      	bx	lr

08004478 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8004478:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 800447a:	b570      	push	{r4, r5, r6, lr}
 800447c:	4604      	mov	r4, r0
        setX(x);
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8004480:	4615      	mov	r5, r2
        setX(x);
 8004482:	4798      	blx	r3
        setY(y);
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800448c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004490:	4718      	bx	r3

08004492 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	4604      	mov	r4, r0
 8004496:	461d      	mov	r5, r3
 8004498:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800449c:	f7ff ffec 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	4629      	mov	r1, r5
 80044a4:	4620      	mov	r0, r4
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	4798      	blx	r3
        setHeight(height);
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	4631      	mov	r1, r6
 80044ae:	4620      	mov	r0, r4
 80044b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80044b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80044b6:	4718      	bx	r3

080044b8 <_ZN8touchgfx6WidgetC1Ev>:
 80044b8:	2200      	movs	r2, #0
 80044ba:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80044be:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80044c2:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80044c6:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80044ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ce:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 80044d0:	4a01      	ldr	r2, [pc, #4]	@ (80044d8 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80044d2:	6002      	str	r2, [r0, #0]
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	0802826c 	.word	0x0802826c

080044dc <_ZN8touchgfx3BoxC1Ev>:
    Box()
 80044dc:	b510      	push	{r4, lr}
 80044de:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 80044e0:	2226      	movs	r2, #38	@ 0x26
 80044e2:	2100      	movs	r1, #0
 80044e4:	f020 fce2 	bl	8024eac <memset>
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7ff ffe5 	bl	80044b8 <_ZN8touchgfx6WidgetC1Ev>
 80044ee:	4b04      	ldr	r3, [pc, #16]	@ (8004500 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 80044f0:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	23ff      	movs	r3, #255	@ 0xff
 80044f6:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 80044fa:	2300      	movs	r3, #0
 80044fc:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	08028ea4 	.word	0x08028ea4

08004504 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8004504:	b510      	push	{r4, lr}
 8004506:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004508:	2226      	movs	r2, #38	@ 0x26
 800450a:	2100      	movs	r1, #0
 800450c:	f020 fcce 	bl	8024eac <memset>
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff ffd1 	bl	80044b8 <_ZN8touchgfx6WidgetC1Ev>
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8004518:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 800451c:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800451e:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8004520:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8004522:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004528:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 800452a:	2300      	movs	r3, #0
 800452c:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004530:	f04f 32ff 	mov.w	r2, #4294967295
 8004534:	8723      	strh	r3, [r4, #56]	@ 0x38
 8004536:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8004538:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 800453c:	bd10      	pop	{r4, pc}
 800453e:	bf00      	nop
 8004540:	08028e14 	.word	0x08028e14
 8004544:	08028164 	.word	0x08028164

08004548 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 800454a:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 800454c:	4606      	mov	r6, r0
 800454e:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	428b      	cmp	r3, r1
 8004554:	d92a      	bls.n	80045ac <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004556:	4b17      	ldr	r3, [pc, #92]	@ (80045b4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	b92b      	cbnz	r3, 8004568 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 800455c:	4b16      	ldr	r3, [pc, #88]	@ (80045b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 800455e:	216c      	movs	r1, #108	@ 0x6c
 8004560:	4a16      	ldr	r2, [pc, #88]	@ (80045bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 8004562:	4817      	ldr	r0, [pc, #92]	@ (80045c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8004564:	f020 f9e4 	bl	8024930 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004568:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800456c:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004574:	4b14      	ldr	r3, [pc, #80]	@ (80045c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	f000 fc6e 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	4607      	mov	r7, r0
 8004580:	4628      	mov	r0, r5
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	4798      	blx	r3
 8004586:	682b      	ldr	r3, [r5, #0]
 8004588:	4604      	mov	r4, r0
 800458a:	4639      	mov	r1, r7
 800458c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800458e:	4628      	mov	r0, r5
 8004590:	4798      	blx	r3
 8004592:	fb14 f400 	smulbb	r4, r4, r0
 8004596:	682b      	ldr	r3, [r5, #0]
 8004598:	4639      	mov	r1, r7
 800459a:	b2a4      	uxth	r4, r4
 800459c:	4628      	mov	r0, r5
 800459e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a0:	4798      	blx	r3
 80045a2:	1823      	adds	r3, r4, r0
 80045a4:	b21b      	sxth	r3, r3
 80045a6:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80045aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ac:	2300      	movs	r3, #0
 80045ae:	e7fa      	b.n	80045a6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 80045b0:	24025990 	.word	0x24025990
 80045b4:	2402598c 	.word	0x2402598c
 80045b8:	0802785d 	.word	0x0802785d
 80045bc:	0802789f 	.word	0x0802789f
 80045c0:	080278da 	.word	0x080278da
 80045c4:	24025994 	.word	0x24025994
 80045c8:	24025998 	.word	0x24025998

080045cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
        : pressed(false), alpha(255), action(0)
 80045cc:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
    BoxWithBorderButtonStyle()
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	8583      	strh	r3, [r0, #44]	@ 0x2c
        touchable = touch;
 80045d4:	f240 1301 	movw	r3, #257	@ 0x101
          firstChild(0)
 80045d8:	2500      	movs	r5, #0
        : T(), up(), down()
 80045da:	4606      	mov	r6, r0
 80045dc:	8483      	strh	r3, [r0, #36]	@ 0x24
    BoxWithBorderButtonStyle()
 80045de:	4604      	mov	r4, r0
        : T(), up(), down()
 80045e0:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x5c>)
 80045e2:	6285      	str	r5, [r0, #40]	@ 0x28
 80045e4:	6305      	str	r5, [r0, #48]	@ 0x30
        : x(0), y(0), width(0), height(0)
 80045e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80045ea:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 80045ee:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 80045f2:	e9c0 5507 	strd	r5, r5, [r0, #28]
 80045f6:	f846 3b34 	str.w	r3, [r6], #52
        : Box(), borderColor(0), borderSize(0)
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7ff ff6e 	bl	80044dc <_ZN8touchgfx3BoxC1Ev>
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x60>)
        borderBox.setXY(0, 0);
 8004602:	462a      	mov	r2, r5
 8004604:	4629      	mov	r1, r5
 8004606:	4630      	mov	r0, r6
 8004608:	6363      	str	r3, [r4, #52]	@ 0x34
        : color(col)
 800460a:	6625      	str	r5, [r4, #96]	@ 0x60
 800460c:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
        : color(0)
 8004610:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8004614:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
 8004618:	f7ff ff2e 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800461c:	4620      	mov	r0, r4
 800461e:	4631      	mov	r1, r6
 8004620:	f00a fdd6 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8004624:	4620      	mov	r0, r4
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	08028364 	.word	0x08028364
 800462c:	08028f0c 	.word	0x08028f0c

08004630 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004634:	4604      	mov	r4, r0
 8004636:	b095      	sub	sp, #84	@ 0x54
        : presenter(0)
 8004638:	2500      	movs	r5, #0
 800463a:	f013 f9dd 	bl	80179f8 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800463e:	46a2      	mov	sl, r4
 8004640:	4b83      	ldr	r3, [pc, #524]	@ (8004850 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8004642:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004646:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800464a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800464c:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8004650:	f84a 3b40 	str.w	r3, [sl], #64
 8004654:	4650      	mov	r0, sl
 8004656:	f7ff ff41 	bl	80044dc <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 800465a:	2226      	movs	r2, #38	@ 0x26
 800465c:	4629      	mov	r1, r5
 800465e:	4630      	mov	r0, r6
 8004660:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8004664:	f020 fc22 	bl	8024eac <memset>
 8004668:	4630      	mov	r0, r6
 800466a:	f104 08cc 	add.w	r8, r4, #204	@ 0xcc
 800466e:	f7ff ff23 	bl	80044b8 <_ZN8touchgfx6WidgetC1Ev>
 8004672:	4b78      	ldr	r3, [pc, #480]	@ (8004854 <_ZN15Screen1ViewBaseC1Ev+0x224>)
    {
        Image::setBitmap(bmp);
 8004674:	a912      	add	r1, sp, #72	@ 0x48
 8004676:	4630      	mov	r0, r6
        : Widget(), bitmap(bmp), alpha(255)
 8004678:	66e3      	str	r3, [r4, #108]	@ 0x6c
        color = newColor;
 800467a:	f04f 4b7f 	mov.w	fp, #4278190080	@ 0xff000000
 800467e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004682:	f884 7094 	strb.w	r7, [r4, #148]	@ 0x94
 8004686:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800468a:	4f73      	ldr	r7, [pc, #460]	@ (8004858 <_ZN15Screen1ViewBaseC1Ev+0x228>)
        Image::setBitmap(bmp);
 800468c:	f00e f96c 	bl	8012968 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004690:	4648      	mov	r0, r9
 8004692:	f7ff ff23 	bl	80044dc <_ZN8touchgfx3BoxC1Ev>
 8004696:	4640      	mov	r0, r8
 8004698:	f8c4 7098 	str.w	r7, [r4, #152]	@ 0x98
        : color(col)
 800469c:	f8c4 50c4 	str.w	r5, [r4, #196]	@ 0xc4
 80046a0:	f8a4 50c8 	strh.w	r5, [r4, #200]	@ 0xc8
 80046a4:	f7ff ff1a 	bl	80044dc <_ZN8touchgfx3BoxC1Ev>
        : TextArea()
 80046a8:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 80046ac:	f8c4 70cc 	str.w	r7, [r4, #204]	@ 0xcc
 80046b0:	4618      	mov	r0, r3
 80046b2:	f8c4 50f8 	str.w	r5, [r4, #248]	@ 0xf8
 80046b6:	f8a4 50fc 	strh.w	r5, [r4, #252]	@ 0xfc
        : TextAreaWithWildcardBase(), wc1(0)
 80046ba:	4f68      	ldr	r7, [pc, #416]	@ (800485c <_ZN15Screen1ViewBaseC1Ev+0x22c>)
        : TextArea()
 80046bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80046be:	f7ff ff21 	bl	8004504 <_ZN8touchgfx8TextAreaC1Ev>
 80046c2:	f504 73a6 	add.w	r3, r4, #332	@ 0x14c
        : TextAreaWithWildcardBase(), wc1(0)
 80046c6:	f8c4 7100 	str.w	r7, [r4, #256]	@ 0x100
 80046ca:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
        : TextArea()
 80046ce:	4618      	mov	r0, r3
 80046d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046d2:	f7ff ff17 	bl	8004504 <_ZN8touchgfx8TextAreaC1Ev>
 80046d6:	f504 73cc 	add.w	r3, r4, #408	@ 0x198
        : TextAreaWithWildcardBase(), wc1(0)
 80046da:	f8c4 714c 	str.w	r7, [r4, #332]	@ 0x14c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80046de:	1d27      	adds	r7, r4, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f8c4 5194 	str.w	r5, [r4, #404]	@ 0x194
 80046e6:	9303      	str	r3, [sp, #12]
 80046e8:	f7ff ff0c 	bl	8004504 <_ZN8touchgfx8TextAreaC1Ev>
 80046ec:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 80046f0:	4618      	mov	r0, r3
 80046f2:	9304      	str	r3, [sp, #16]
 80046f4:	f7ff ff06 	bl	8004504 <_ZN8touchgfx8TextAreaC1Ev>
 80046f8:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 80046fc:	4618      	mov	r0, r3
 80046fe:	9305      	str	r3, [sp, #20]
 8004700:	f7ff ff64 	bl	80045cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8004704:	f504 7328 	add.w	r3, r4, #672	@ 0x2a0
 8004708:	4618      	mov	r0, r3
 800470a:	9306      	str	r3, [sp, #24]
 800470c:	f7ff ff5e 	bl	80045cc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8004710:	f504 7346 	add.w	r3, r4, #792	@ 0x318
 8004714:	4618      	mov	r0, r3
 8004716:	9307      	str	r3, [sp, #28]
 8004718:	f00e fa68 	bl	8012bec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800471c:	f504 7358 	add.w	r3, r4, #864	@ 0x360
 8004720:	4618      	mov	r0, r3
 8004722:	9308      	str	r3, [sp, #32]
 8004724:	f00e fa62 	bl	8012bec <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004728:	f504 736a 	add.w	r3, r4, #936	@ 0x3a8
 800472c:	4618      	mov	r0, r3
 800472e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004730:	f00e fa5c 	bl	8012bec <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004734:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <_ZN15Screen1ViewBaseC1Ev+0x230>)
    __background.setPosition(0, 0, 800, 480);
 8004736:	462a      	mov	r2, r5
 8004738:	4650      	mov	r0, sl
 800473a:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
 800473e:	4629      	mov	r1, r5
 8004740:	4b48      	ldr	r3, [pc, #288]	@ (8004864 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 8004742:	f8c4 4444 	str.w	r4, [r4, #1092]	@ 0x444
 8004746:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
 800474a:	4b47      	ldr	r3, [pc, #284]	@ (8004868 <_ZN15Screen1ViewBaseC1Ev+0x238>)
 800474c:	f8c4 544c 	str.w	r5, [r4, #1100]	@ 0x44c
 8004750:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8004754:	4b45      	ldr	r3, [pc, #276]	@ (800486c <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8004756:	f8c4 4454 	str.w	r4, [r4, #1108]	@ 0x454
 800475a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
 800475e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004762:	f8c4 545c 	str.w	r5, [r4, #1116]	@ 0x45c
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800476c:	f7ff fe91 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004770:	4651      	mov	r1, sl
 8004772:	4638      	mov	r0, r7
 8004774:	f8c4 b068 	str.w	fp, [r4, #104]	@ 0x68
 8004778:	f00a fd2a 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 800477c:	462a      	mov	r2, r5
 800477e:	4630      	mov	r0, r6
 8004780:	4629      	mov	r1, r5
 8004782:	f7ff fe79 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_LIGHT_ID));
 8004786:	4630      	mov	r0, r6
 8004788:	a912      	add	r1, sp, #72	@ 0x48
 800478a:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
 800478e:	f00e f8eb 	bl	8012968 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004792:	4631      	mov	r1, r6
 8004794:	4638      	mov	r0, r7
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8004796:	f04f 0605 	mov.w	r6, #5
 800479a:	f00a fd19 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(349, 85, 382, 67);
 800479e:	2343      	movs	r3, #67	@ 0x43
 80047a0:	f04f 3aff 	mov.w	sl, #4294967295
 80047a4:	2255      	movs	r2, #85	@ 0x55
 80047a6:	4648      	mov	r0, r9
 80047a8:	f240 115d 	movw	r1, #349	@ 0x15d
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	f44f 73bf 	mov.w	r3, #382	@ 0x17e
 80047b2:	f7ff fe6e 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 80047b6:	4649      	mov	r1, r9
 80047b8:	4638      	mov	r0, r7
 80047ba:	f8a4 60c8 	strh.w	r6, [r4, #200]	@ 0xc8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80047be:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8004884 <_ZN15Screen1ViewBaseC1Ev+0x254>
        borderColor = colorBorder;
 80047c2:	e9c4 ab30 	strd	sl, fp, [r4, #192]	@ 0xc0
 80047c6:	f00a fd03 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder2.setPosition(349, 268, 382, 68);
 80047ca:	2344      	movs	r3, #68	@ 0x44
 80047cc:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80047d0:	4640      	mov	r0, r8
 80047d2:	f240 115d 	movw	r1, #349	@ 0x15d
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	f44f 73bf 	mov.w	r3, #382	@ 0x17e
 80047dc:	f7ff fe59 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 80047e0:	4641      	mov	r1, r8
 80047e2:	4638      	mov	r0, r7
        borderSize = size;
 80047e4:	f8a4 60fc 	strh.w	r6, [r4, #252]	@ 0xfc
        boundingArea = calculateBoundingArea();
 80047e8:	ae0c      	add	r6, sp, #48	@ 0x30
    Unicode::snprintf(textAreaNameBuffer, TEXTAREANAME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7ORA).getText());
 80047ea:	f504 787c 	add.w	r8, r4, #1008	@ 0x3f0
        borderColor = colorBorder;
 80047ee:	e9c4 ab3d 	strd	sl, fp, [r4, #244]	@ 0xf4
 80047f2:	f00a fced 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaName.setPosition(363, 96, 355, 43);
 80047f6:	232b      	movs	r3, #43	@ 0x2b
 80047f8:	2260      	movs	r2, #96	@ 0x60
 80047fa:	f240 116b 	movw	r1, #363	@ 0x16b
 80047fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	f240 1363 	movw	r3, #355	@ 0x163
 8004806:	f7ff fe44 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 800480a:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
 800480e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004810:	4630      	mov	r0, r6
 8004812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8004816:	f8c4 b130 	str.w	fp, [r4, #304]	@ 0x130
        linespace = space;
 800481a:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
        boundingArea = calculateBoundingArea();
 800481e:	4798      	blx	r3
 8004820:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 8004824:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004828:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800482c:	f8d9 3000 	ldr.w	r3, [r9]
 8004830:	b92b      	cbnz	r3, 800483e <_ZN15Screen1ViewBaseC1Ev+0x20e>
 8004832:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <_ZN15Screen1ViewBaseC1Ev+0x240>)
 8004834:	2160      	movs	r1, #96	@ 0x60
 8004836:	4a0f      	ldr	r2, [pc, #60]	@ (8004874 <_ZN15Screen1ViewBaseC1Ev+0x244>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004838:	480f      	ldr	r0, [pc, #60]	@ (8004878 <_ZN15Screen1ViewBaseC1Ev+0x248>)
 800483a:	f020 f879 	bl	8024930 <__assert_func>
 800483e:	4b0f      	ldr	r3, [pc, #60]	@ (800487c <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	2b09      	cmp	r3, #9
 8004844:	d820      	bhi.n	8004888 <_ZN15Screen1ViewBaseC1Ev+0x258>
 8004846:	4b0e      	ldr	r3, [pc, #56]	@ (8004880 <_ZN15Screen1ViewBaseC1Ev+0x250>)
 8004848:	2161      	movs	r1, #97	@ 0x61
 800484a:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <_ZN15Screen1ViewBaseC1Ev+0x244>)
 800484c:	e7f4      	b.n	8004838 <_ZN15Screen1ViewBaseC1Ev+0x208>
 800484e:	bf00      	nop
 8004850:	08028430 	.word	0x08028430
 8004854:	08028f74 	.word	0x08028f74
 8004858:	08028f0c 	.word	0x08028f0c
 800485c:	080282d4 	.word	0x080282d4
 8004860:	08028400 	.word	0x08028400
 8004864:	08004351 	.word	0x08004351
 8004868:	08028418 	.word	0x08028418
 800486c:	0800437b 	.word	0x0800437b
 8004870:	0802785d 	.word	0x0802785d
 8004874:	0802796d 	.word	0x0802796d
 8004878:	080278da 	.word	0x080278da
 800487c:	24025990 	.word	0x24025990
 8004880:	0802792f 	.word	0x0802792f
 8004884:	2402598c 	.word	0x2402598c
        return texts->getText(typedTextId);
 8004888:	4bb5      	ldr	r3, [pc, #724]	@ (8004b60 <_ZN15Screen1ViewBaseC1Ev+0x530>)
 800488a:	2109      	movs	r1, #9
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f000 fae3 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaNameBuffer, TEXTAREANAME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7ORA).getText());
 8004892:	4ab4      	ldr	r2, [pc, #720]	@ (8004b64 <_ZN15Screen1ViewBaseC1Ev+0x534>)
 8004894:	4603      	mov	r3, r0
 8004896:	2114      	movs	r1, #20
 8004898:	4640      	mov	r0, r8
 800489a:	f014 fd71 	bl	8019380 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 800489e:	230b      	movs	r3, #11
        wc1 = value;
 80048a0:	f8c4 8148 	str.w	r8, [r4, #328]	@ 0x148
    textAreaName.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NYHC));
 80048a4:	a912      	add	r1, sp, #72	@ 0x48
 80048a6:	f8df 82d0 	ldr.w	r8, [pc, #720]	@ 8004b78 <_ZN15Screen1ViewBaseC1Ev+0x548>
 80048aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80048ac:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 80048b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80048b4:	f00d fe34 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80048b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80048ba:	4638      	mov	r0, r7
 80048bc:	f00a fc88 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaAge.setPosition(363, 281, 355, 42);
 80048c0:	232a      	movs	r3, #42	@ 0x2a
 80048c2:	f240 1219 	movw	r2, #281	@ 0x119
 80048c6:	f240 116b 	movw	r1, #363	@ 0x16b
 80048ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f240 1363 	movw	r3, #355	@ 0x163
 80048d2:	f7ff fdde 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 80048d6:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
 80048da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048dc:	4630      	mov	r0, r6
 80048de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 80048e2:	f8c4 b17c 	str.w	fp, [r4, #380]	@ 0x17c
    Unicode::snprintf(textAreaAgeBuffer, TEXTAREAAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_0VF5).getText());
 80048e6:	f504 6b83 	add.w	fp, r4, #1048	@ 0x418
        linespace = space;
 80048ea:	f8a4 5180 	strh.w	r5, [r4, #384]	@ 0x180
        boundingArea = calculateBoundingArea();
 80048ee:	4798      	blx	r3
 80048f0:	f504 73c4 	add.w	r3, r4, #392	@ 0x188
 80048f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80048f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80048fc:	f8d9 3000 	ldr.w	r3, [r9]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d096      	beq.n	8004832 <_ZN15Screen1ViewBaseC1Ev+0x202>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004904:	4a98      	ldr	r2, [pc, #608]	@ (8004b68 <_ZN15Screen1ViewBaseC1Ev+0x538>)
 8004906:	8813      	ldrh	r3, [r2, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d99c      	bls.n	8004846 <_ZN15Screen1ViewBaseC1Ev+0x216>
        return texts->getText(typedTextId);
 800490c:	4b94      	ldr	r3, [pc, #592]	@ (8004b60 <_ZN15Screen1ViewBaseC1Ev+0x530>)
 800490e:	2108      	movs	r1, #8
        borderDown = borderColorPressed;
 8004910:	f8df 9268 	ldr.w	r9, [pc, #616]	@ 8004b7c <_ZN15Screen1ViewBaseC1Ev+0x54c>
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	f000 fa9f 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 800491a:	4a92      	ldr	r2, [pc, #584]	@ (8004b64 <_ZN15Screen1ViewBaseC1Ev+0x534>)
 800491c:	4603      	mov	r3, r0
 800491e:	2114      	movs	r1, #20
 8004920:	4658      	mov	r0, fp
 8004922:	f014 fd2d 	bl	8019380 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004926:	230a      	movs	r3, #10
    textAreaAge.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C0KS));
 8004928:	a912      	add	r1, sp, #72	@ 0x48
 800492a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800492c:	f8c4 b194 	str.w	fp, [r4, #404]	@ 0x194
 8004930:	f04f 0b07 	mov.w	fp, #7
 8004934:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8004938:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800493c:	f00d fdf0 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004942:	4638      	mov	r0, r7
 8004944:	f00a fc44 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3.setXY(127, 98);
 8004948:	2262      	movs	r2, #98	@ 0x62
 800494a:	9803      	ldr	r0, [sp, #12]
 800494c:	217f      	movs	r1, #127	@ 0x7f
 800494e:	f7ff fd93 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8004952:	9903      	ldr	r1, [sp, #12]
 8004954:	4630      	mov	r0, r6
        linespace = space;
 8004956:	f8a4 51cc 	strh.w	r5, [r4, #460]	@ 0x1cc
        color = newColor;
 800495a:	f8c4 a1c8 	str.w	sl, [r4, #456]	@ 0x1c8
        boundingArea = calculateBoundingArea();
 800495e:	f00d fb37 	bl	8011fd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004962:	f504 73ea 	add.w	r3, r4, #468	@ 0x1d4
 8004966:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800496a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_51BA));
 800496e:	a912      	add	r1, sp, #72	@ 0x48
 8004970:	9803      	ldr	r0, [sp, #12]
 8004972:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004976:	f8ad b04c 	strh.w	fp, [sp, #76]	@ 0x4c
 800497a:	f00d fdd1 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800497e:	9903      	ldr	r1, [sp, #12]
 8004980:	4638      	mov	r0, r7
 8004982:	f00a fc25 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea4.setXY(147, 278);
 8004986:	f44f 728b 	mov.w	r2, #278	@ 0x116
 800498a:	9804      	ldr	r0, [sp, #16]
 800498c:	2193      	movs	r1, #147	@ 0x93
 800498e:	f7ff fd73 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004992:	4b76      	ldr	r3, [pc, #472]	@ (8004b6c <_ZN15Screen1ViewBaseC1Ev+0x53c>)
        boundingArea = calculateBoundingArea();
 8004994:	9904      	ldr	r1, [sp, #16]
 8004996:	4630      	mov	r0, r6
        color = newColor;
 8004998:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
        linespace = space;
 800499c:	f8a4 5214 	strh.w	r5, [r4, #532]	@ 0x214
        boundingArea = calculateBoundingArea();
 80049a0:	f00d fb16 	bl	8011fd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80049a4:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 80049a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80049ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80049b0:	2306      	movs	r3, #6
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NDY2));
 80049b2:	a912      	add	r1, sp, #72	@ 0x48
 80049b4:	9804      	ldr	r0, [sp, #16]
 80049b6:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 80049ba:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80049be:	f00d fdaf 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80049c2:	9904      	ldr	r1, [sp, #16]
 80049c4:	4638      	mov	r0, r7
 80049c6:	f00a fc03 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderBox.setPosition(x, y, width, height);
 80049ca:	2343      	movs	r3, #67	@ 0x43
 80049cc:	4629      	mov	r1, r5
 80049ce:	462a      	mov	r2, r5
 80049d0:	f504 7017 	add.w	r0, r4, #604	@ 0x25c
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	f240 137d 	movw	r3, #381	@ 0x17d
        borderDown = borderColorPressed;
 80049da:	f8df 81a4 	ldr.w	r8, [pc, #420]	@ 8004b80 <_ZN15Screen1ViewBaseC1Ev+0x550>
        borderBox.setPosition(x, y, width, height);
 80049de:	f7ff fd58 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
        borderSize = size;
 80049e2:	f04f 0305 	mov.w	r3, #5
        down = colorPressed;
 80049e6:	4a62      	ldr	r2, [pc, #392]	@ (8004b70 <_ZN15Screen1ViewBaseC1Ev+0x540>)
 80049e8:	f8a4 328c 	strh.w	r3, [r4, #652]	@ 0x28c
 80049ec:	4b61      	ldr	r3, [pc, #388]	@ (8004b74 <_ZN15Screen1ViewBaseC1Ev+0x544>)
        handlePressedUpdated();
 80049ee:	f8d4 6228 	ldr.w	r6, [r4, #552]	@ 0x228
 80049f2:	9805      	ldr	r0, [sp, #20]
        down = colorPressed;
 80049f4:	e9c4 32a4 	strd	r3, r2, [r4, #656]	@ 0x290
        borderDown = borderColorPressed;
 80049f8:	e9c4 98a6 	strd	r9, r8, [r4, #664]	@ 0x298
        handlePressedUpdated();
 80049fc:	f7ff fc24 	bl	8004248 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
        alpha = newAlpha;
 8004a00:	f884 5255 	strb.w	r5, [r4, #597]	@ 0x255
        handleAlphaUpdated();
 8004a04:	9805      	ldr	r0, [sp, #20]
 8004a06:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
    flexButtonName.setAction(flexButtonCallback);
 8004a0a:	f504 6688 	add.w	r6, r4, #1088	@ 0x440
 8004a0e:	4798      	blx	r3
    flexButtonName.setPosition(350, 85, 381, 67);
 8004a10:	2143      	movs	r1, #67	@ 0x43
        action = &callback;
 8004a12:	f8c4 6258 	str.w	r6, [r4, #600]	@ 0x258
 8004a16:	f240 137d 	movw	r3, #381	@ 0x17d
 8004a1a:	2255      	movs	r2, #85	@ 0x55
 8004a1c:	9805      	ldr	r0, [sp, #20]
 8004a1e:	9100      	str	r1, [sp, #0]
 8004a20:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8004a24:	f7ff fd35 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a28:	9905      	ldr	r1, [sp, #20]
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f00a fbd0 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderBox.setPosition(x, y, width, height);
 8004a30:	2144      	movs	r1, #68	@ 0x44
 8004a32:	462a      	mov	r2, r5
 8004a34:	f504 7035 	add.w	r0, r4, #724	@ 0x2d4
 8004a38:	9100      	str	r1, [sp, #0]
 8004a3a:	f240 137d 	movw	r3, #381	@ 0x17d
 8004a3e:	4629      	mov	r1, r5
 8004a40:	f7ff fd27 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a44:	f04f 0105 	mov.w	r1, #5
        down = colorPressed;
 8004a48:	4a49      	ldr	r2, [pc, #292]	@ (8004b70 <_ZN15Screen1ViewBaseC1Ev+0x540>)
 8004a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b74 <_ZN15Screen1ViewBaseC1Ev+0x544>)
 8004a4c:	f8a4 1304 	strh.w	r1, [r4, #772]	@ 0x304
        handlePressedUpdated();
 8004a50:	9806      	ldr	r0, [sp, #24]
        borderDown = borderColorPressed;
 8004a52:	e9c4 98c4 	strd	r9, r8, [r4, #784]	@ 0x310
        handlePressedUpdated();
 8004a56:	f8d4 82a0 	ldr.w	r8, [r4, #672]	@ 0x2a0
    OKButton.setAction(buttonCallback);
 8004a5a:	f504 698a 	add.w	r9, r4, #1104	@ 0x450
        down = colorPressed;
 8004a5e:	e9c4 32c2 	strd	r3, r2, [r4, #776]	@ 0x308
        handlePressedUpdated();
 8004a62:	f7ff fbf1 	bl	8004248 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
        alpha = newAlpha;
 8004a66:	f884 52cd 	strb.w	r5, [r4, #717]	@ 0x2cd
        handleAlphaUpdated();
 8004a6a:	9806      	ldr	r0, [sp, #24]
 8004a6c:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8004a70:	f04f 0801 	mov.w	r8, #1
 8004a74:	4798      	blx	r3
    flexButtonAge.setPosition(350, 268, 381, 68);
 8004a76:	2344      	movs	r3, #68	@ 0x44
        action = &callback;
 8004a78:	f8c4 62d0 	str.w	r6, [r4, #720]	@ 0x2d0
 8004a7c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8004a80:	9806      	ldr	r0, [sp, #24]
 8004a82:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	f240 137d 	movw	r3, #381	@ 0x17d
 8004a8c:	f7ff fd01 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004a90:	9906      	ldr	r1, [sp, #24]
 8004a92:	4638      	mov	r0, r7
 8004a94:	2602      	movs	r6, #2
 8004a96:	f00a fb9b 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    OKButton.setXY(550, 421);
 8004a9a:	9807      	ldr	r0, [sp, #28]
 8004a9c:	f240 12a5 	movw	r2, #421	@ 0x1a5
 8004aa0:	f240 2126 	movw	r1, #550	@ 0x226
 8004aa4:	f7ff fce8 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
    OKButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8004aa8:	a811      	add	r0, sp, #68	@ 0x44
 8004aaa:	aa12      	add	r2, sp, #72	@ 0x48
 8004aac:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	9807      	ldr	r0, [sp, #28]
 8004ab4:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8004ab8:	f00d fd8f 	bl	80125da <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8004abc:	f04f 0105 	mov.w	r1, #5
        updateTextPosition();
 8004ac0:	9807      	ldr	r0, [sp, #28]
 8004ac2:	f8a4 1350 	strh.w	r1, [r4, #848]	@ 0x350
 8004ac6:	f7ff fd3f 	bl	8004548 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004aca:	9907      	ldr	r1, [sp, #28]
 8004acc:	4638      	mov	r0, r7
        visible = vis;
 8004ace:	f884 533d 	strb.w	r5, [r4, #829]	@ 0x33d
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004ad2:	f8c4 9340 	str.w	r9, [r4, #832]	@ 0x340
        colorPressed = col;
 8004ad6:	e9c4 aad5 	strd	sl, sl, [r4, #852]	@ 0x354
 8004ada:	f00a fb79 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ExitButton.setXY(7, 424);
 8004ade:	4659      	mov	r1, fp
 8004ae0:	9808      	ldr	r0, [sp, #32]
 8004ae2:	f44f 72d4 	mov.w	r2, #424	@ 0x1a8
 8004ae6:	f7ff fcc7 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8004aea:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8004aee:	2604      	movs	r6, #4
    ExitButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8004af0:	aa12      	add	r2, sp, #72	@ 0x48
 8004af2:	a911      	add	r1, sp, #68	@ 0x44
 8004af4:	9808      	ldr	r0, [sp, #32]
 8004af6:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8004afa:	f00d fd6e 	bl	80125da <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004afe:	9808      	ldr	r0, [sp, #32]
 8004b00:	f8a4 6398 	strh.w	r6, [r4, #920]	@ 0x398
 8004b04:	f7ff fd20 	bl	8004548 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004b08:	9908      	ldr	r1, [sp, #32]
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	f884 5385 	strb.w	r5, [r4, #901]	@ 0x385
 8004b10:	f8c4 9388 	str.w	r9, [r4, #904]	@ 0x388
 8004b14:	2503      	movs	r5, #3
        colorPressed = col;
 8004b16:	e9c4 aae7 	strd	sl, sl, [r4, #924]	@ 0x39c
 8004b1a:	f00a fb59 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonWithSend.setXY(276, 381);
 8004b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b20:	f240 127d 	movw	r2, #381	@ 0x17d
 8004b24:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004b28:	f7ff fca6 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithSend.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_ACTION_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_SMALL_ROUNDED_PRESSED_ID));
 8004b2c:	aa12      	add	r2, sp, #72	@ 0x48
 8004b2e:	a911      	add	r1, sp, #68	@ 0x44
 8004b30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b32:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8004b36:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8004b3a:	f00d fd4e 	bl	80125da <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b40:	f8a4 53e0 	strh.w	r5, [r4, #992]	@ 0x3e0
 8004b44:	f7ff fd00 	bl	8004548 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004b48:	4638      	mov	r0, r7
 8004b4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b4c:	f8c4 93d0 	str.w	r9, [r4, #976]	@ 0x3d0
        colorPressed = col;
 8004b50:	e9c4 aaf9 	strd	sl, sl, [r4, #996]	@ 0x3e4
 8004b54:	f00a fb3c 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004b58:	4620      	mov	r0, r4
 8004b5a:	b015      	add	sp, #84	@ 0x54
 8004b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b60:	24025998 	.word	0x24025998
 8004b64:	080279b8 	.word	0x080279b8
 8004b68:	24025990 	.word	0x24025990
 8004b6c:	fffffcfc 	.word	0xfffffcfc
 8004b70:	ff0099cc 	.word	0xff0099cc
 8004b74:	ff006699 	.word	0xff006699
 8004b78:	08028164 	.word	0x08028164
 8004b7c:	ff003366 	.word	0xff003366
 8004b80:	ff336699 	.word	0xff336699

08004b84 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004b84:	4770      	bx	lr
	...

08004b88 <_Z23getFont_verdana_10_4bppv>:
{
 8004b88:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004b8a:	4d16      	ldr	r5, [pc, #88]	@ (8004be4 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004b8c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004b8e:	682c      	ldr	r4, [r5, #0]
 8004b90:	f3bf 8f5b 	dmb	ish
 8004b94:	f014 0401 	ands.w	r4, r4, #1
 8004b98:	d120      	bne.n	8004bdc <_Z23getFont_verdana_10_4bppv+0x54>
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f01f fb54 	bl	8024248 <__cxa_guard_acquire>
 8004ba0:	b1e0      	cbz	r0, 8004bdc <_Z23getFont_verdana_10_4bppv+0x54>
 8004ba2:	233f      	movs	r3, #63	@ 0x3f
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	4910      	ldr	r1, [pc, #64]	@ (8004be8 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004baa:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <_Z23getFont_verdana_10_4bppv+0x64>)
 8004bac:	4810      	ldr	r0, [pc, #64]	@ (8004bf0 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004bae:	9308      	str	r3, [sp, #32]
 8004bb0:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004bb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004bb4:	9405      	str	r4, [sp, #20]
 8004bb6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004bba:	2304      	movs	r3, #4
 8004bbc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004bc0:	230a      	movs	r3, #10
 8004bc2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004bcc:	f7ff fabc 	bl	8004148 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004bd0:	4809      	ldr	r0, [pc, #36]	@ (8004bf8 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004bd2:	f01f fecb 	bl	802496c <atexit>
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f01f fb42 	bl	8024260 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004bdc:	4804      	ldr	r0, [pc, #16]	@ (8004bf0 <_Z23getFont_verdana_10_4bppv+0x68>)
 8004bde:	b00f      	add	sp, #60	@ 0x3c
 8004be0:	bd30      	pop	{r4, r5, pc}
 8004be2:	bf00      	nop
 8004be4:	2400b6e4 	.word	0x2400b6e4
 8004be8:	0802c638 	.word	0x0802c638
 8004bec:	0802cd10 	.word	0x0802cd10
 8004bf0:	2400b6e8 	.word	0x2400b6e8
 8004bf4:	0802cef8 	.word	0x0802cef8
 8004bf8:	08004b85 	.word	0x08004b85

08004bfc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004bfc:	4770      	bx	lr
	...

08004c00 <_Z23getFont_verdana_20_4bppv>:
{
 8004c00:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004c02:	4d17      	ldr	r5, [pc, #92]	@ (8004c60 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8004c04:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004c06:	682c      	ldr	r4, [r5, #0]
 8004c08:	f3bf 8f5b 	dmb	ish
 8004c0c:	f014 0401 	ands.w	r4, r4, #1
 8004c10:	d122      	bne.n	8004c58 <_Z23getFont_verdana_20_4bppv+0x58>
 8004c12:	4628      	mov	r0, r5
 8004c14:	f01f fb18 	bl	8024248 <__cxa_guard_acquire>
 8004c18:	b1f0      	cbz	r0, 8004c58 <_Z23getFont_verdana_20_4bppv+0x58>
 8004c1a:	233f      	movs	r3, #63	@ 0x3f
 8004c1c:	226e      	movs	r2, #110	@ 0x6e
 8004c1e:	4911      	ldr	r1, [pc, #68]	@ (8004c64 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c22:	4b11      	ldr	r3, [pc, #68]	@ (8004c68 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004c24:	4811      	ldr	r0, [pc, #68]	@ (8004c6c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004c26:	9308      	str	r3, [sp, #32]
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <_Z23getFont_verdana_20_4bppv+0x70>)
 8004c2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8004c2c:	9307      	str	r3, [sp, #28]
 8004c2e:	2301      	movs	r3, #1
 8004c30:	9401      	str	r4, [sp, #4]
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004c38:	2304      	movs	r3, #4
 8004c3a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004c3e:	2314      	movs	r3, #20
 8004c40:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	2318      	movs	r3, #24
 8004c48:	f7ff fa7e 	bl	8004148 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004c4c:	4809      	ldr	r0, [pc, #36]	@ (8004c74 <_Z23getFont_verdana_20_4bppv+0x74>)
 8004c4e:	f01f fe8d 	bl	802496c <atexit>
 8004c52:	4628      	mov	r0, r5
 8004c54:	f01f fb04 	bl	8024260 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004c58:	4804      	ldr	r0, [pc, #16]	@ (8004c6c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004c5a:	b00f      	add	sp, #60	@ 0x3c
 8004c5c:	bd30      	pop	{r4, r5, pc}
 8004c5e:	bf00      	nop
 8004c60:	2400b714 	.word	0x2400b714
 8004c64:	0802c648 	.word	0x0802c648
 8004c68:	0802cd14 	.word	0x0802cd14
 8004c6c:	2400b718 	.word	0x2400b718
 8004c70:	0802cefc 	.word	0x0802cefc
 8004c74:	08004bfd 	.word	0x08004bfd

08004c78 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 14, 48, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004c78:	4770      	bx	lr
	...

08004c7c <_Z23getFont_verdana_40_4bppv>:
{
 8004c7c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 14, 48, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004c7e:	4d17      	ldr	r5, [pc, #92]	@ (8004cdc <_Z23getFont_verdana_40_4bppv+0x60>)
{
 8004c80:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 14, 48, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004c82:	682c      	ldr	r4, [r5, #0]
 8004c84:	f3bf 8f5b 	dmb	ish
 8004c88:	f014 0401 	ands.w	r4, r4, #1
 8004c8c:	d122      	bne.n	8004cd4 <_Z23getFont_verdana_40_4bppv+0x58>
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f01f fada 	bl	8024248 <__cxa_guard_acquire>
 8004c94:	b1f0      	cbz	r0, 8004cd4 <_Z23getFont_verdana_40_4bppv+0x58>
 8004c96:	233f      	movs	r3, #63	@ 0x3f
 8004c98:	2201      	movs	r2, #1
 8004c9a:	4911      	ldr	r1, [pc, #68]	@ (8004ce0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8004c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004ca0:	4811      	ldr	r0, [pc, #68]	@ (8004ce8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004ca2:	9308      	str	r3, [sp, #32]
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <_Z23getFont_verdana_40_4bppv+0x70>)
 8004ca6:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ca8:	9405      	str	r4, [sp, #20]
 8004caa:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004cae:	2304      	movs	r3, #4
 8004cb0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004cb4:	2328      	movs	r3, #40	@ 0x28
 8004cb6:	220e      	movs	r2, #14
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	2330      	movs	r3, #48	@ 0x30
 8004cbc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004cc0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004cc4:	f7ff fa40 	bl	8004148 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004cc8:	4809      	ldr	r0, [pc, #36]	@ (8004cf0 <_Z23getFont_verdana_40_4bppv+0x74>)
 8004cca:	f01f fe4f 	bl	802496c <atexit>
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f01f fac6 	bl	8024260 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004cd4:	4804      	ldr	r0, [pc, #16]	@ (8004ce8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004cd6:	b00f      	add	sp, #60	@ 0x3c
 8004cd8:	bd30      	pop	{r4, r5, pc}
 8004cda:	bf00      	nop
 8004cdc:	2400b744 	.word	0x2400b744
 8004ce0:	0802cc4c 	.word	0x0802cc4c
 8004ce4:	0802ceec 	.word	0x0802ceec
 8004ce8:	2400b748 	.word	0x2400b748
 8004cec:	0802cf10 	.word	0x0802cf10
 8004cf0:	08004c79 	.word	0x08004c79

08004cf4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4770      	bx	lr

08004cf8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	4770      	bx	lr

08004cfc <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004cfc:	b40e      	push	{r1, r2, r3}
 8004cfe:	b503      	push	{r0, r1, lr}
 8004d00:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004d02:	2100      	movs	r1, #0
{
 8004d04:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004d08:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004d0a:	f011 ff03 	bl	8016b14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004d0e:	b002      	add	sp, #8
 8004d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d14:	b003      	add	sp, #12
 8004d16:	4770      	bx	lr

08004d18 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004d18:	b40c      	push	{r2, r3}
 8004d1a:	b507      	push	{r0, r1, r2, lr}
 8004d1c:	ab04      	add	r3, sp, #16
 8004d1e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004d22:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004d24:	f011 fef6 	bl	8016b14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004d28:	b003      	add	sp, #12
 8004d2a:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d2e:	b002      	add	sp, #8
 8004d30:	4770      	bx	lr
	...

08004d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004d34:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004d36:	b510      	push	{r4, lr}
 8004d38:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004d3a:	b373      	cbz	r3, 8004d9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004d3c:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8004d3e:	b92b      	cbnz	r3, 8004d4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004d40:	4b18      	ldr	r3, [pc, #96]	@ (8004da4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004d42:	21c5      	movs	r1, #197	@ 0xc5
 8004d44:	4a18      	ldr	r2, [pc, #96]	@ (8004da8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004d46:	4819      	ldr	r0, [pc, #100]	@ (8004dac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004d48:	f01f fdf2 	bl	8024930 <__assert_func>
            return buffer[pos];
 8004d4c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004d4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004d52:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004d54:	b30b      	cbz	r3, 8004d9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004d56:	f013 fd59 	bl	801880c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004d5a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d803      	bhi.n	8004d68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004d60:	4b13      	ldr	r3, [pc, #76]	@ (8004db0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004d62:	21cb      	movs	r1, #203	@ 0xcb
 8004d64:	4a13      	ldr	r2, [pc, #76]	@ (8004db4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004d66:	e7ee      	b.n	8004d46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004d68:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004d6a:	f640 103f 	movw	r0, #2367	@ 0x93f
 8004d6e:	1c53      	adds	r3, r2, #1
 8004d70:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	4619      	mov	r1, r3
 8004d76:	bf88      	it	hi
 8004d78:	f1a3 010a 	subhi.w	r1, r3, #10
 8004d7c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004d80:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004d82:	4281      	cmp	r1, r0
 8004d84:	d109      	bne.n	8004d9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004d86:	2b0a      	cmp	r3, #10
 8004d88:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004d8c:	bf28      	it	cs
 8004d8e:	2300      	movcs	r3, #0
            return buffer[pos];
 8004d90:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8004d92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004d96:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004d98:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004d9a:	4620      	mov	r0, r4
}
 8004d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004da0:	f013 bc36 	b.w	8018610 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004da4:	080279bb 	.word	0x080279bb
 8004da8:	080279c4 	.word	0x080279c4
 8004dac:	08027a6f 	.word	0x08027a6f
 8004db0:	08027ac7 	.word	0x08027ac7
 8004db4:	08027ad5 	.word	0x08027ad5

08004db8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004db8:	f013 bbf3 	b.w	80185a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004dbc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004dbc:	b510      	push	{r4, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	ac02      	add	r4, sp, #8
 8004dc2:	e884 0006 	stmia.w	r4, {r1, r2}
 8004dc6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004dc8:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004dca:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004dcc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	9b08      	ldr	r3, [sp, #32]
 8004dd6:	f010 f9cf 	bl	8015178 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004dda:	b006      	add	sp, #24
 8004ddc:	bd10      	pop	{r4, pc}
	...

08004de0 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004de0:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004de2:	bb18      	cbnz	r0, 8004e2c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004de4:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004de6:	4813      	ldr	r0, [pc, #76]	@ (8004e34 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004de8:	681c      	ldr	r4, [r3, #0]
 8004dea:	4913      	ldr	r1, [pc, #76]	@ (8004e38 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004dec:	b1b4      	cbz	r4, 8004e1c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	4422      	add	r2, r4
 8004df2:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004df4:	6862      	ldr	r2, [r4, #4]
 8004df6:	4422      	add	r2, r4
 8004df8:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004dfa:	68a2      	ldr	r2, [r4, #8]
 8004dfc:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004e04:	f000 f838 	bl	8004e78 <_ZN17TypedTextDatabase8getFontsEv>
 8004e08:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004e0a:	f000 f833 	bl	8004e74 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e40 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004e10:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004e14:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004e18:	8018      	strh	r0, [r3, #0]
    }
}
 8004e1a:	e007      	b.n	8004e2c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e4c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004e1e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004e22:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004e26:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004e28:	2c00      	cmp	r4, #0
 8004e2a:	d1e8      	bne.n	8004dfe <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	bf00      	nop
 8004e30:	2400b780 	.word	0x2400b780
 8004e34:	2400b778 	.word	0x2400b778
 8004e38:	2400b774 	.word	0x2400b774
 8004e3c:	2400b77c 	.word	0x2400b77c
 8004e40:	2402598c 	.word	0x2402598c
 8004e44:	24025994 	.word	0x24025994
 8004e48:	24025990 	.word	0x24025990
 8004e4c:	9042a2f4 	.word	0x9042a2f4
 8004e50:	9042a2c4 	.word	0x9042a2c4
 8004e54:	9042a360 	.word	0x9042a360

08004e58 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004e58:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004e60:	4b03      	ldr	r3, [pc, #12]	@ (8004e70 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	2400b774 	.word	0x2400b774
 8004e70:	2400b778 	.word	0x2400b778

08004e74 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004e74:	200c      	movs	r0, #12
 8004e76:	4770      	bx	lr

08004e78 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004e78:	4800      	ldr	r0, [pc, #0]	@ (8004e7c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004e7a:	4770      	bx	lr
 8004e7c:	2400b784 	.word	0x2400b784

08004e80 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004e80:	b510      	push	{r4, lr}
};
 8004e82:	4c05      	ldr	r4, [pc, #20]	@ (8004e98 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004e84:	f7ff febc 	bl	8004c00 <_Z23getFont_verdana_20_4bppv>
};
 8004e88:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004e8a:	f7ff fef7 	bl	8004c7c <_Z23getFont_verdana_40_4bppv>
};
 8004e8e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004e90:	f7ff fe7a 	bl	8004b88 <_Z23getFont_verdana_10_4bppv>
};
 8004e94:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004e96:	bd10      	pop	{r4, pc}
 8004e98:	2400b784 	.word	0x2400b784

08004e9c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004e9c:	b510      	push	{r4, lr}
    pointArray = 0;
 8004e9e:	2400      	movs	r4, #0
 8004ea0:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004ea2:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004ea4:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004ea6:	601c      	str	r4, [r3, #0]
}
 8004ea8:	bd10      	pop	{r4, pc}

08004eaa <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004eaa:	4770      	bx	lr

08004eac <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004eac:	4770      	bx	lr

08004eae <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 8004eae:	4770      	bx	lr

08004eb0 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8004eb0:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004eb2:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004eb4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004eb6:	68c2      	ldr	r2, [r0, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	1055      	asrs	r5, r2, #1
 8004ebc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004ec0:	07d2      	lsls	r2, r2, #31
 8004ec2:	bf48      	it	mi
 8004ec4:	5962      	ldrmi	r2, [r4, r5]
    }
 8004ec6:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004ec8:	bf48      	it	mi
 8004eca:	58d3      	ldrmi	r3, [r2, r3]
 8004ecc:	4718      	bx	r3

08004ece <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
    virtual bool isValid() const
 8004ece:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004ed0:	6840      	ldr	r0, [r0, #4]
 8004ed2:	b130      	cbz	r0, 8004ee2 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x14>
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	b91a      	cbnz	r2, 8004ee0 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x12>
 8004ed8:	68d8      	ldr	r0, [r3, #12]
 8004eda:	f000 0001 	and.w	r0, r0, #1
 8004ede:	4770      	bx	lr
 8004ee0:	2001      	movs	r0, #1
    }
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 8004ee4:	b410      	push	{r4}
        (pobject->*pmemfun)();
 8004ee6:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8004ee8:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8004eea:	68c2      	ldr	r2, [r0, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	1054      	asrs	r4, r2, #1
 8004ef0:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8004ef4:	07d2      	lsls	r2, r2, #31
 8004ef6:	bf48      	it	mi
 8004ef8:	590a      	ldrmi	r2, [r1, r4]
    }
 8004efa:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8004efe:	bf48      	it	mi
 8004f00:	58d3      	ldrmi	r3, [r2, r3]
 8004f02:	4718      	bx	r3

08004f04 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
    virtual bool isValid() const
 8004f04:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004f06:	6840      	ldr	r0, [r0, #4]
 8004f08:	b130      	cbz	r0, 8004f18 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x14>
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	b91a      	cbnz	r2, 8004f16 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x12>
 8004f0e:	68d8      	ldr	r0, [r3, #12]
 8004f10:	f000 0001 	and.w	r0, r0, #1
 8004f14:	4770      	bx	lr
 8004f16:	2001      	movs	r0, #1
    }
 8004f18:	4770      	bx	lr

08004f1a <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004f1a:	b510      	push	{r4, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	2110      	movs	r1, #16
 8004f20:	f01f f990 	bl	8024244 <_ZdlPvj>
 8004f24:	4620      	mov	r0, r4
 8004f26:	bd10      	pop	{r4, pc}

08004f28 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	2110      	movs	r1, #16
 8004f2e:	f01f f989 	bl	8024244 <_ZdlPvj>
 8004f32:	4620      	mov	r0, r4
 8004f34:	bd10      	pop	{r4, pc}

08004f36 <_ZN14CustomKeyboardD0Ev>:
 8004f36:	b510      	push	{r4, lr}
 8004f38:	4604      	mov	r4, r0
 8004f3a:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8004f3e:	f01f f981 	bl	8024244 <_ZdlPvj>
 8004f42:	4620      	mov	r0, r4
 8004f44:	bd10      	pop	{r4, pc}
	...

08004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>:
    add(keyboard);
    add(modeBtnTextArea);
}

void CustomKeyboard::setKeyMappingList()
{
 8004f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f4a:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <_ZN14CustomKeyboard17setKeyMappingListEv+0x54>)
 8004f4c:	4604      	mov	r4, r0
    if (alphaKeys)
 8004f4e:	f890 21c0 	ldrb.w	r2, [r0, #448]	@ 0x1c0
 8004f52:	f500 709c 	add.w	r0, r0, #312	@ 0x138
 8004f56:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
        : typedTextId(id)
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	b18a      	cbz	r2, 8004f82 <_ZN14CustomKeyboard17setKeyMappingListEv+0x3a>
 8004f5e:	2300      	movs	r3, #0
    {
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8004f60:	4669      	mov	r1, sp
 8004f62:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f66:	f00d fadb 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        if (uppercaseKeys)
 8004f6a:	f894 31c1 	ldrb.w	r3, [r4, #449]	@ 0x1c1
 8004f6e:	b133      	cbz	r3, 8004f7e <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
        {
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8004f70:	490b      	ldr	r1, [pc, #44]	@ (8004fa0 <_ZN14CustomKeyboard17setKeyMappingListEv+0x58>)
        {
            keyboard.setKeymappingList(&keyMappingListNumUpper);
        }
        else
        {
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8004f72:	4628      	mov	r0, r5
        }
    }
}
 8004f74:	b003      	add	sp, #12
 8004f76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8004f7a:	f00e b9ef 	b.w	801335c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 8004f7e:	4909      	ldr	r1, [pc, #36]	@ (8004fa4 <_ZN14CustomKeyboard17setKeyMappingListEv+0x5c>)
 8004f80:	e7f7      	b.n	8004f72 <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
 8004f82:	2302      	movs	r3, #2
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 8004f84:	4669      	mov	r1, sp
 8004f86:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004f8a:	f00d fac9 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        if (uppercaseKeys)
 8004f8e:	f894 31c1 	ldrb.w	r3, [r4, #449]	@ 0x1c1
 8004f92:	b10b      	cbz	r3, 8004f98 <_ZN14CustomKeyboard17setKeyMappingListEv+0x50>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 8004f94:	4904      	ldr	r1, [pc, #16]	@ (8004fa8 <_ZN14CustomKeyboard17setKeyMappingListEv+0x60>)
 8004f96:	e7ec      	b.n	8004f72 <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8004f98:	4904      	ldr	r1, [pc, #16]	@ (8004fac <_ZN14CustomKeyboard17setKeyMappingListEv+0x64>)
 8004f9a:	e7ea      	b.n	8004f72 <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
 8004f9c:	08028164 	.word	0x08028164
 8004fa0:	08028634 	.word	0x08028634
 8004fa4:	080286b4 	.word	0x080286b4
 8004fa8:	08028534 	.word	0x08028534
 8004fac:	080285b4 	.word	0x080285b4

08004fb0 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:

void CustomKeyboard::backspacePressedHandler()
{
 8004fb0:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 8004fb2:	f8b0 5062 	ldrh.w	r5, [r0, #98]	@ 0x62
 8004fb6:	4604      	mov	r4, r0
    uint16_t pos = keyboard.getBufferPosition();
    if (pos > 0)
 8004fb8:	b1ad      	cbz	r5, 8004fe6 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x36>
    {
        //Delete the previous entry in the buffer and decrement the position.
        buffer[pos - 1] = 0;
 8004fba:	f105 0387 	add.w	r3, r5, #135	@ 0x87
 8004fbe:	2200      	movs	r2, #0
        keyboard.setBufferPosition(pos - 1);
 8004fc0:	1e69      	subs	r1, r5, #1
        buffer[pos - 1] = 0;
 8004fc2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
        keyboard.setBufferPosition(pos - 1);
 8004fc6:	302c      	adds	r0, #44	@ 0x2c
 8004fc8:	b289      	uxth	r1, r1
        buffer[pos - 1] = 0;
 8004fca:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 8004fcc:	f00e f9c2 	bl	8013354 <_ZN8touchgfx8Keyboard17setBufferPositionEt>

        //Change keymappings if we have reached the first position.
        if (1 == pos)
 8004fd0:	2d01      	cmp	r5, #1
 8004fd2:	d108      	bne.n	8004fe6 <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x36>
        {
            firstCharacterEntry = true;
            uppercaseKeys = true;
            setKeyMappingList();
 8004fd4:	4620      	mov	r0, r4
            firstCharacterEntry = true;
 8004fd6:	f884 51c2 	strb.w	r5, [r4, #450]	@ 0x1c2
            uppercaseKeys = true;
 8004fda:	f884 51c1 	strb.w	r5, [r4, #449]	@ 0x1c1
        }
    }
}
 8004fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            setKeyMappingList();
 8004fe2:	f7ff bfb1 	b.w	8004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 8004fe6:	bd38      	pop	{r3, r4, r5, pc}

08004fe8 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:

void CustomKeyboard::capslockPressedHandler()
{
    uppercaseKeys = !uppercaseKeys;
 8004fe8:	f890 21c1 	ldrb.w	r2, [r0, #449]	@ 0x1c1
 8004fec:	f082 0201 	eor.w	r2, r2, #1
 8004ff0:	f880 21c1 	strb.w	r2, [r0, #449]	@ 0x1c1
    setKeyMappingList();
 8004ff4:	f7ff bfa8 	b.w	8004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>

08004ff8 <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
    alphaKeys = !alphaKeys;

    // if we have changed back to alpha and still has no chars in the buffer,
    // we show upper case letters.
    if (firstCharacterEntry && alphaKeys)
 8004ff8:	f890 21c2 	ldrb.w	r2, [r0, #450]	@ 0x1c2
    alphaKeys = !alphaKeys;
 8004ffc:	f890 11c0 	ldrb.w	r1, [r0, #448]	@ 0x1c0
    {
        uppercaseKeys = true;
 8005000:	2a00      	cmp	r2, #0
    alphaKeys = !alphaKeys;
 8005002:	f081 0101 	eor.w	r1, r1, #1
        uppercaseKeys = true;
 8005006:	bf18      	it	ne
 8005008:	460a      	movne	r2, r1
    alphaKeys = !alphaKeys;
 800500a:	f880 11c0 	strb.w	r1, [r0, #448]	@ 0x1c0
    if (firstCharacterEntry && alphaKeys)
 800500e:	f880 21c1 	strb.w	r2, [r0, #449]	@ 0x1c1
    }
    else
    {
        uppercaseKeys = false;
    }
    setKeyMappingList();
 8005012:	f7ff bf99 	b.w	8004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>

08005016 <_ZN14CustomKeyboard17keyPressedhandlerEt>:
}

void CustomKeyboard::keyPressedhandler(Unicode::UnicodeChar keyChar)
{
    // After the first keypress, the keyboard will shift to lowercase.
    if (firstCharacterEntry && keyChar != 0)
 8005016:	f890 21c2 	ldrb.w	r2, [r0, #450]	@ 0x1c2
 800501a:	b13a      	cbz	r2, 800502c <_ZN14CustomKeyboard17keyPressedhandlerEt+0x16>
 800501c:	b131      	cbz	r1, 800502c <_ZN14CustomKeyboard17keyPressedhandlerEt+0x16>
    {
        firstCharacterEntry = false;
 800501e:	2200      	movs	r2, #0
 8005020:	f880 21c2 	strb.w	r2, [r0, #450]	@ 0x1c2
        uppercaseKeys = false;
 8005024:	f880 21c1 	strb.w	r2, [r0, #449]	@ 0x1c1
        setKeyMappingList();
 8005028:	f7ff bf8e 	b.w	8004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>
    }
}
 800502c:	4770      	bx	lr

0800502e <_ZN14CustomKeyboard11clearBufferEv>:
{
	return keyboard.getBuffer();
}

void CustomKeyboard::clearBuffer ()
{
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
	memset(buffer, 0, BUFFER_SIZE+1);
 8005032:	2213      	movs	r2, #19
 8005034:	2100      	movs	r1, #0
 8005036:	f500 708a 	add.w	r0, r0, #276	@ 0x114
 800503a:	f01f ff37 	bl	8024eac <memset>
	keyboard.setBufferPosition(0);
 800503e:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8005042:	2100      	movs	r1, #0
 8005044:	f00e f986 	bl	8013354 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
    firstCharacterEntry = true;
 8005048:	2301      	movs	r3, #1
    uppercaseKeys = true;
    setKeyMappingList();
 800504a:	4620      	mov	r0, r4
    firstCharacterEntry = true;
 800504c:	f884 31c2 	strb.w	r3, [r4, #450]	@ 0x1c2
    uppercaseKeys = true;
 8005050:	f884 31c1 	strb.w	r3, [r4, #449]	@ 0x1c1
 8005054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setKeyMappingList();
 8005058:	f7ff bf76 	b.w	8004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>

0800505c <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 800505c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    firstCharacterEntry(false)
 8005060:	4b4c      	ldr	r3, [pc, #304]	@ (8005194 <_ZN14CustomKeyboardC1Ev+0x138>)
        : x(0), y(0), width(0), height(0)
 8005062:	2500      	movs	r5, #0
 8005064:	4606      	mov	r6, r0
          touchable(false),
 8005066:	f44f 7780 	mov.w	r7, #256	@ 0x100
CustomKeyboard::CustomKeyboard() : keyboard(),
 800506a:	4604      	mov	r4, r0
 800506c:	6285      	str	r5, [r0, #40]	@ 0x28
 800506e:	8487      	strh	r7, [r0, #36]	@ 0x24
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005070:	f04f 38ff 	mov.w	r8, #4294967295
        : x(0), y(0), width(0), height(0)
 8005074:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005078:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 800507c:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 8005080:	e9c0 5507 	strd	r5, r5, [r0, #28]
    firstCharacterEntry(false)
 8005084:	f846 3b2c 	str.w	r3, [r6], #44
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005088:	4630      	mov	r0, r6
 800508a:	f00d fe95 	bl	8012db8 <_ZN8touchgfx8KeyboardC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800508e:	4b42      	ldr	r3, [pc, #264]	@ (8005198 <_ZN14CustomKeyboardC1Ev+0x13c>)
        : pobject(pObject), pmemfun(pmemfun_0)
 8005090:	4a42      	ldr	r2, [pc, #264]	@ (800519c <_ZN14CustomKeyboardC1Ev+0x140>)
    keyboard.setLayout(&layout);
 8005092:	4630      	mov	r0, r6
 8005094:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8005098:	4b41      	ldr	r3, [pc, #260]	@ (80051a0 <_ZN14CustomKeyboardC1Ev+0x144>)
    layout.callbackAreaArray[0].callback = &capslockPressed;
 800509a:	4942      	ldr	r1, [pc, #264]	@ (80051a4 <_ZN14CustomKeyboardC1Ev+0x148>)
 800509c:	f8c4 3160 	str.w	r3, [r4, #352]	@ 0x160
 80050a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
          touchable(false),
 80050a4:	f8a4 715c 	strh.w	r7, [r4, #348]	@ 0x15c
    alphaKeys(true),
 80050a8:	2701      	movs	r7, #1
 80050aa:	f8a4 3164 	strh.w	r3, [r4, #356]	@ 0x164
 80050ae:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
        : color(col)
 80050b2:	f8c4 5168 	str.w	r5, [r4, #360]	@ 0x168
 80050b6:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
 80050ba:	4b3b      	ldr	r3, [pc, #236]	@ (80051a8 <_ZN14CustomKeyboardC1Ev+0x14c>)
 80050bc:	f8a4 5170 	strh.w	r5, [r4, #368]	@ 0x170
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80050c0:	f8c4 5174 	str.w	r5, [r4, #372]	@ 0x174
 80050c4:	e9c4 3460 	strd	r3, r4, [r4, #384]	@ 0x180
 80050c8:	e9c4 3464 	strd	r3, r4, [r4, #400]	@ 0x190
 80050cc:	e9c4 3468 	strd	r3, r4, [r4, #416]	@ 0x1a0
 80050d0:	4b36      	ldr	r3, [pc, #216]	@ (80051ac <_ZN14CustomKeyboardC1Ev+0x150>)
 80050d2:	e9c4 356a 	strd	r3, r5, [r4, #424]	@ 0x1a8
        : pobject(pObject), pmemfun(pmemfun_1)
 80050d6:	4b36      	ldr	r3, [pc, #216]	@ (80051b0 <_ZN14CustomKeyboardC1Ev+0x154>)
        : pobject(pObject), pmemfun(pmemfun_0)
 80050d8:	e9c4 2562 	strd	r2, r5, [r4, #392]	@ 0x188
        : pobject(pObject), pmemfun(pmemfun_1)
 80050dc:	e9c4 346c 	strd	r3, r4, [r4, #432]	@ 0x1b0
        : pobject(pObject), pmemfun(pmemfun_0)
 80050e0:	4a34      	ldr	r2, [pc, #208]	@ (80051b4 <_ZN14CustomKeyboardC1Ev+0x158>)
        : pobject(pObject), pmemfun(pmemfun_1)
 80050e2:	4b35      	ldr	r3, [pc, #212]	@ (80051b8 <_ZN14CustomKeyboardC1Ev+0x15c>)
        : pobject(pObject), pmemfun(pmemfun_0)
 80050e4:	e9c4 2566 	strd	r2, r5, [r4, #408]	@ 0x198
        : x(0), y(0), width(0), height(0)
 80050e8:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
    layout.callbackAreaArray[0].callback = &capslockPressed;
 80050ec:	f504 72c0 	add.w	r2, r4, #384	@ 0x180
 80050f0:	e9c4 5551 	strd	r5, r5, [r4, #324]	@ 0x144
          nextSibling(0),
 80050f4:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
          cachedAbsX(0),
 80050f8:	e9c4 5555 	strd	r5, r5, [r4, #340]	@ 0x154
              text(0)
 80050fc:	e9c4 855e 	strd	r8, r5, [r4, #376]	@ 0x178
        : pobject(pObject), pmemfun(pmemfun_1)
 8005100:	e9c4 356e 	strd	r3, r5, [r4, #440]	@ 0x1b8
 8005104:	68cb      	ldr	r3, [r1, #12]
    firstCharacterEntry(false)
 8005106:	f884 51c2 	strb.w	r5, [r4, #450]	@ 0x1c2
    alphaKeys(true),
 800510a:	f8a4 71c0 	strh.w	r7, [r4, #448]	@ 0x1c0
    layout.callbackAreaArray[0].callback = &capslockPressed;
 800510e:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 8005110:	f504 72c8 	add.w	r2, r4, #400	@ 0x190
 8005114:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 8005116:	f504 72d0 	add.w	r2, r4, #416	@ 0x1a0
 800511a:	629a      	str	r2, [r3, #40]	@ 0x28
    keyboard.setLayout(&layout);
 800511c:	f00d fec5 	bl	8012eaa <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 8005120:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
    keyboard.setPosition(0, 0, 320, 240);
 8005124:	462a      	mov	r2, r5
 8005126:	4629      	mov	r1, r5
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 8005128:	65a3      	str	r3, [r4, #88]	@ 0x58
 800512a:	23f0      	movs	r3, #240	@ 0xf0
 800512c:	4630      	mov	r0, r6
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8005134:	f7ff f9ad 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
    keyboard.setTextIndentation();
 8005138:	4630      	mov	r0, r6
 800513a:	f00d fee7 	bl	8012f0c <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 800513e:	f504 738a 	add.w	r3, r4, #276	@ 0x114
 8005142:	4629      	mov	r1, r5
 8005144:	2224      	movs	r2, #36	@ 0x24
 8005146:	4618      	mov	r0, r3
    modeBtnTextArea.setPosition(5, 196, 56, 40);
 8005148:	f504 759c 	add.w	r5, r4, #312	@ 0x138
    memset(buffer, 0, sizeof(buffer));
 800514c:	f01f feae 	bl	8024eac <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8005150:	2212      	movs	r2, #18
 8005152:	4601      	mov	r1, r0
 8005154:	4630      	mov	r0, r6
 8005156:	f00d fe9d 	bl	8012e94 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    modeBtnTextArea.setPosition(5, 196, 56, 40);
 800515a:	2328      	movs	r3, #40	@ 0x28
 800515c:	22c4      	movs	r2, #196	@ 0xc4
 800515e:	2105      	movs	r1, #5
 8005160:	4628      	mov	r0, r5
    uppercaseKeys = true;
 8005162:	f884 71c1 	strb.w	r7, [r4, #449]	@ 0x1c1
    firstCharacterEntry = true;
 8005166:	f884 71c2 	strb.w	r7, [r4, #450]	@ 0x1c2
    modeBtnTextArea.setPosition(5, 196, 56, 40);
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2338      	movs	r3, #56	@ 0x38
 800516e:	f7ff f990 	bl	8004492 <_ZN8touchgfx8Drawable11setPositionEssss>
    setKeyMappingList();
 8005172:	4620      	mov	r0, r4
        color = newColor;
 8005174:	f8c4 8168 	str.w	r8, [r4, #360]	@ 0x168
 8005178:	f7ff fee6 	bl	8004f48 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 800517c:	4631      	mov	r1, r6
 800517e:	4620      	mov	r0, r4
 8005180:	f00a f826 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f00a f822 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800518c:	4620      	mov	r0, r4
 800518e:	b002      	add	sp, #8
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	080284a8 	.word	0x080284a8
 8005198:	08028e14 	.word	0x08028e14
 800519c:	08004fe9 	.word	0x08004fe9
 80051a0:	08028164 	.word	0x08028164
 80051a4:	24000038 	.word	0x24000038
 80051a8:	08028478 	.word	0x08028478
 80051ac:	08004ff9 	.word	0x08004ff9
 80051b0:	08028490 	.word	0x08028490
 80051b4:	08004fb1 	.word	0x08004fb1
 80051b8:	08005017 	.word	0x08005017

080051bc <_ZN14CustomKeyboard9getBufferEv>:
}
 80051bc:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80051be:	4770      	bx	lr

080051c0 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 80051c0:	4be5      	ldr	r3, [pc, #916]	@ (8005558 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x398>)
 80051c2:	f04f 0201 	mov.w	r2, #1
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80051c6:	201a      	movs	r0, #26
 80051c8:	210b      	movs	r1, #11
 80051ca:	f04f 0c3f 	mov.w	ip, #63	@ 0x3f
 80051ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d2:	2502      	movs	r5, #2
 80051d4:	243d      	movs	r4, #61	@ 0x3d
 80051d6:	f04f 0807 	mov.w	r8, #7
 80051da:	275b      	movs	r7, #91	@ 0x5b
 80051dc:	731d      	strb	r5, [r3, #12]
 80051de:	2503      	movs	r5, #3
 80051e0:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80051e4:	2677      	movs	r6, #119	@ 0x77
 80051e6:	761d      	strb	r5, [r3, #24]
 80051e8:	2504      	movs	r5, #4
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	f04f 09af 	mov.w	r9, #175	@ 0xaf
 80051f0:	f883 5024 	strb.w	r5, [r3, #36]	@ 0x24
 80051f4:	2505      	movs	r5, #5
 80051f6:	2228      	movs	r2, #40	@ 0x28
 80051f8:	f8a3 8002 	strh.w	r8, [r3, #2]
 80051fc:	f883 5030 	strb.w	r5, [r3, #48]	@ 0x30
 8005200:	2506      	movs	r5, #6
 8005202:	809c      	strh	r4, [r3, #4]
 8005204:	f04f 0acb 	mov.w	sl, #203	@ 0xcb
 8005208:	80d8      	strh	r0, [r3, #6]
 800520a:	f240 1b1f 	movw	fp, #287	@ 0x11f
 800520e:	811a      	strh	r2, [r3, #8]
 8005210:	8159      	strh	r1, [r3, #10]
 8005212:	f8a3 e00e 	strh.w	lr, [r3, #14]
 8005216:	821c      	strh	r4, [r3, #16]
 8005218:	8258      	strh	r0, [r3, #18]
 800521a:	829a      	strh	r2, [r3, #20]
 800521c:	82d9      	strh	r1, [r3, #22]
 800521e:	f8a3 c01a 	strh.w	ip, [r3, #26]
 8005222:	839c      	strh	r4, [r3, #28]
 8005224:	83d8      	strh	r0, [r3, #30]
 8005226:	841a      	strh	r2, [r3, #32]
 8005228:	8459      	strh	r1, [r3, #34]	@ 0x22
 800522a:	84df      	strh	r7, [r3, #38]	@ 0x26
 800522c:	851c      	strh	r4, [r3, #40]	@ 0x28
 800522e:	8558      	strh	r0, [r3, #42]	@ 0x2a
 8005230:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8005232:	85d9      	strh	r1, [r3, #46]	@ 0x2e
 8005234:	869c      	strh	r4, [r3, #52]	@ 0x34
 8005236:	86d8      	strh	r0, [r3, #54]	@ 0x36
 8005238:	871a      	strh	r2, [r3, #56]	@ 0x38
 800523a:	8759      	strh	r1, [r3, #58]	@ 0x3a
 800523c:	865e      	strh	r6, [r3, #50]	@ 0x32
 800523e:	f883 503c 	strb.w	r5, [r3, #60]	@ 0x3c
 8005242:	2593      	movs	r5, #147	@ 0x93
 8005244:	f8a3 904a 	strh.w	r9, [r3, #74]	@ 0x4a
 8005248:	f04f 0908 	mov.w	r9, #8
 800524c:	f8a3 a056 	strh.w	sl, [r3, #86]	@ 0x56
 8005250:	f04f 0a0a 	mov.w	sl, #10
 8005254:	f883 9054 	strb.w	r9, [r3, #84]	@ 0x54
 8005258:	f04f 0909 	mov.w	r9, #9
 800525c:	f883 a06c 	strb.w	sl, [r3, #108]	@ 0x6c
 8005260:	f240 1a03 	movw	sl, #259	@ 0x103
 8005264:	f883 9060 	strb.w	r9, [r3, #96]	@ 0x60
 8005268:	f04f 09e7 	mov.w	r9, #231	@ 0xe7
 800526c:	87dd      	strh	r5, [r3, #62]	@ 0x3e
 800526e:	f8a3 4040 	strh.w	r4, [r3, #64]	@ 0x40
 8005272:	f8a3 0042 	strh.w	r0, [r3, #66]	@ 0x42
 8005276:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 800527a:	f8a3 1046 	strh.w	r1, [r3, #70]	@ 0x46
 800527e:	f883 8048 	strb.w	r8, [r3, #72]	@ 0x48
 8005282:	f8a3 404c 	strh.w	r4, [r3, #76]	@ 0x4c
 8005286:	f8a3 004e 	strh.w	r0, [r3, #78]	@ 0x4e
 800528a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800528e:	f8a3 1052 	strh.w	r1, [r3, #82]	@ 0x52
 8005292:	f8a3 4058 	strh.w	r4, [r3, #88]	@ 0x58
 8005296:	f8a3 005a 	strh.w	r0, [r3, #90]	@ 0x5a
 800529a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800529e:	f8a3 105e 	strh.w	r1, [r3, #94]	@ 0x5e
 80052a2:	f8a3 4064 	strh.w	r4, [r3, #100]	@ 0x64
 80052a6:	f8a3 0066 	strh.w	r0, [r3, #102]	@ 0x66
 80052aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80052ae:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
 80052b2:	f8a3 a06e 	strh.w	sl, [r3, #110]	@ 0x6e
 80052b6:	f8a3 4070 	strh.w	r4, [r3, #112]	@ 0x70
 80052ba:	f8a3 0072 	strh.w	r0, [r3, #114]	@ 0x72
 80052be:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 80052c2:	f8a3 1076 	strh.w	r1, [r3, #118]	@ 0x76
 80052c6:	f883 1078 	strb.w	r1, [r3, #120]	@ 0x78
 80052ca:	f8a3 b07a 	strh.w	fp, [r3, #122]	@ 0x7a
 80052ce:	f04f 0b10 	mov.w	fp, #16
 80052d2:	f8a3 407c 	strh.w	r4, [r3, #124]	@ 0x7c
 80052d6:	f04f 040c 	mov.w	r4, #12
 80052da:	f8a3 9062 	strh.w	r9, [r3, #98]	@ 0x62
 80052de:	f8a3 007e 	strh.w	r0, [r3, #126]	@ 0x7e
 80052e2:	f8a3 8086 	strh.w	r8, [r3, #134]	@ 0x86
 80052e6:	f04f 080d 	mov.w	r8, #13
 80052ea:	f883 4084 	strb.w	r4, [r3, #132]	@ 0x84
 80052ee:	2469      	movs	r4, #105	@ 0x69
 80052f0:	f883 8090 	strb.w	r8, [r3, #144]	@ 0x90
 80052f4:	f04f 080e 	mov.w	r8, #14
 80052f8:	f8a3 e092 	strh.w	lr, [r3, #146]	@ 0x92
 80052fc:	f04f 0e0f 	mov.w	lr, #15
 8005300:	f883 b0b4 	strb.w	fp, [r3, #180]	@ 0xb4
 8005304:	f04f 0b11 	mov.w	fp, #17
 8005308:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 800530c:	f8a3 1082 	strh.w	r1, [r3, #130]	@ 0x82
 8005310:	f8a3 4088 	strh.w	r4, [r3, #136]	@ 0x88
 8005314:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
 8005318:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
 800531c:	f8a3 108e 	strh.w	r1, [r3, #142]	@ 0x8e
 8005320:	f8a3 4094 	strh.w	r4, [r3, #148]	@ 0x94
 8005324:	f8a3 0096 	strh.w	r0, [r3, #150]	@ 0x96
 8005328:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
 800532c:	f8a3 109a 	strh.w	r1, [r3, #154]	@ 0x9a
 8005330:	f8a3 c09e 	strh.w	ip, [r3, #158]	@ 0x9e
 8005334:	f8a3 40a0 	strh.w	r4, [r3, #160]	@ 0xa0
 8005338:	f8a3 00a2 	strh.w	r0, [r3, #162]	@ 0xa2
 800533c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 8005340:	f8a3 10a6 	strh.w	r1, [r3, #166]	@ 0xa6
 8005344:	f8a3 70aa 	strh.w	r7, [r3, #170]	@ 0xaa
 8005348:	f8a3 40ac 	strh.w	r4, [r3, #172]	@ 0xac
 800534c:	f8a3 00ae 	strh.w	r0, [r3, #174]	@ 0xae
 8005350:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8005354:	f8a3 10b2 	strh.w	r1, [r3, #178]	@ 0xb2
 8005358:	f8a3 40b8 	strh.w	r4, [r3, #184]	@ 0xb8
 800535c:	f8a3 00ba 	strh.w	r0, [r3, #186]	@ 0xba
 8005360:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
 8005364:	f8a3 10be 	strh.w	r1, [r3, #190]	@ 0xbe
 8005368:	f883 809c 	strb.w	r8, [r3, #156]	@ 0x9c
 800536c:	f883 e0a8 	strb.w	lr, [r3, #168]	@ 0xa8
 8005370:	f8a3 60b6 	strh.w	r6, [r3, #182]	@ 0xb6
 8005374:	f883 b0c0 	strb.w	fp, [r3, #192]	@ 0xc0
 8005378:	f04f 0b12 	mov.w	fp, #18
 800537c:	f8a3 a0f2 	strh.w	sl, [r3, #242]	@ 0xf2
 8005380:	f04f 0a16 	mov.w	sl, #22
 8005384:	f883 b0cc 	strb.w	fp, [r3, #204]	@ 0xcc
 8005388:	f04f 0baf 	mov.w	fp, #175	@ 0xaf
 800538c:	f883 a0fc 	strb.w	sl, [r3, #252]	@ 0xfc
 8005390:	f240 1a1f 	movw	sl, #287	@ 0x11f
 8005394:	f8a3 b0ce 	strh.w	fp, [r3, #206]	@ 0xce
 8005398:	f04f 0b13 	mov.w	fp, #19
 800539c:	f8a3 50c2 	strh.w	r5, [r3, #194]	@ 0xc2
 80053a0:	f883 b0d8 	strb.w	fp, [r3, #216]	@ 0xd8
 80053a4:	f04f 0bcb 	mov.w	fp, #203	@ 0xcb
 80053a8:	f8a3 40c4 	strh.w	r4, [r3, #196]	@ 0xc4
 80053ac:	f8a3 b0da 	strh.w	fp, [r3, #218]	@ 0xda
 80053b0:	f04f 0b14 	mov.w	fp, #20
 80053b4:	f8a3 00c6 	strh.w	r0, [r3, #198]	@ 0xc6
 80053b8:	f883 b0e4 	strb.w	fp, [r3, #228]	@ 0xe4
 80053bc:	f04f 0b15 	mov.w	fp, #21
 80053c0:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
 80053c4:	f8a3 10ca 	strh.w	r1, [r3, #202]	@ 0xca
 80053c8:	f8a3 40d0 	strh.w	r4, [r3, #208]	@ 0xd0
 80053cc:	f8a3 00d2 	strh.w	r0, [r3, #210]	@ 0xd2
 80053d0:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 80053d4:	f8a3 10d6 	strh.w	r1, [r3, #214]	@ 0xd6
 80053d8:	f8a3 40dc 	strh.w	r4, [r3, #220]	@ 0xdc
 80053dc:	f8a3 00de 	strh.w	r0, [r3, #222]	@ 0xde
 80053e0:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
 80053e4:	f8a3 10e2 	strh.w	r1, [r3, #226]	@ 0xe2
 80053e8:	f8a3 40e8 	strh.w	r4, [r3, #232]	@ 0xe8
 80053ec:	f8a3 00ea 	strh.w	r0, [r3, #234]	@ 0xea
 80053f0:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
 80053f4:	f8a3 10ee 	strh.w	r1, [r3, #238]	@ 0xee
 80053f8:	f883 b0f0 	strb.w	fp, [r3, #240]	@ 0xf0
 80053fc:	f04f 0baf 	mov.w	fp, #175	@ 0xaf
 8005400:	f8a3 40f4 	strh.w	r4, [r3, #244]	@ 0xf4
 8005404:	f8a3 00f6 	strh.w	r0, [r3, #246]	@ 0xf6
 8005408:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 800540c:	f8a3 10fa 	strh.w	r1, [r3, #250]	@ 0xfa
 8005410:	f8a3 4100 	strh.w	r4, [r3, #256]	@ 0x100
 8005414:	2417      	movs	r4, #23
 8005416:	f8a3 90e6 	strh.w	r9, [r3, #230]	@ 0xe6
 800541a:	f8a3 a0fe 	strh.w	sl, [r3, #254]	@ 0xfe
 800541e:	f8a3 0102 	strh.w	r0, [r3, #258]	@ 0x102
 8005422:	f8a3 512e 	strh.w	r5, [r3, #302]	@ 0x12e
 8005426:	251b      	movs	r5, #27
 8005428:	f883 4108 	strb.w	r4, [r3, #264]	@ 0x108
 800542c:	2495      	movs	r4, #149	@ 0x95
 800542e:	f8a3 c10a 	strh.w	ip, [r3, #266]	@ 0x10a
 8005432:	f04f 0c18 	mov.w	ip, #24
 8005436:	f8a3 7116 	strh.w	r7, [r3, #278]	@ 0x116
 800543a:	2719      	movs	r7, #25
 800543c:	f883 5138 	strb.w	r5, [r3, #312]	@ 0x138
 8005440:	251c      	movs	r5, #28
 8005442:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
 8005446:	f8a3 1106 	strh.w	r1, [r3, #262]	@ 0x106
 800544a:	f8a3 410c 	strh.w	r4, [r3, #268]	@ 0x10c
 800544e:	f8a3 010e 	strh.w	r0, [r3, #270]	@ 0x10e
 8005452:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
 8005456:	f8a3 1112 	strh.w	r1, [r3, #274]	@ 0x112
 800545a:	f8a3 4118 	strh.w	r4, [r3, #280]	@ 0x118
 800545e:	f8a3 011a 	strh.w	r0, [r3, #282]	@ 0x11a
 8005462:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
 8005466:	f8a3 111e 	strh.w	r1, [r3, #286]	@ 0x11e
 800546a:	f8a3 4124 	strh.w	r4, [r3, #292]	@ 0x124
 800546e:	f8a3 0126 	strh.w	r0, [r3, #294]	@ 0x126
 8005472:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
 8005476:	f8a3 112a 	strh.w	r1, [r3, #298]	@ 0x12a
 800547a:	f883 012c 	strb.w	r0, [r3, #300]	@ 0x12c
 800547e:	f8a3 4130 	strh.w	r4, [r3, #304]	@ 0x130
 8005482:	f8a3 0132 	strh.w	r0, [r3, #306]	@ 0x132
 8005486:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
 800548a:	f8a3 1136 	strh.w	r1, [r3, #310]	@ 0x136
 800548e:	f8a3 b13a 	strh.w	fp, [r3, #314]	@ 0x13a
 8005492:	f04f 0bcb 	mov.w	fp, #203	@ 0xcb
 8005496:	f8a3 413c 	strh.w	r4, [r3, #316]	@ 0x13c
 800549a:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 800549e:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
 80054a2:	f8a3 1142 	strh.w	r1, [r3, #322]	@ 0x142
 80054a6:	f883 c114 	strb.w	ip, [r3, #276]	@ 0x114
 80054aa:	f883 7120 	strb.w	r7, [r3, #288]	@ 0x120
 80054ae:	f8a3 6122 	strh.w	r6, [r3, #290]	@ 0x122
 80054b2:	f883 5144 	strb.w	r5, [r3, #324]	@ 0x144
 80054b6:	251d      	movs	r5, #29
 80054b8:	f8a3 114e 	strh.w	r1, [r3, #334]	@ 0x14e
 80054bc:	f8a3 115a 	strh.w	r1, [r3, #346]	@ 0x15a
 80054c0:	211e      	movs	r1, #30
 80054c2:	f8a3 4148 	strh.w	r4, [r3, #328]	@ 0x148
 80054c6:	f883 115c 	strb.w	r1, [r3, #348]	@ 0x15c
 80054ca:	213e      	movs	r1, #62	@ 0x3e
 80054cc:	f8a3 014a 	strh.w	r0, [r3, #330]	@ 0x14a
 80054d0:	f8a3 115e 	strh.w	r1, [r3, #350]	@ 0x15e
 80054d4:	21c1      	movs	r1, #193	@ 0xc1
 80054d6:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
 80054da:	f8a3 1160 	strh.w	r1, [r3, #352]	@ 0x160
 80054de:	21fc      	movs	r1, #252	@ 0xfc
 80054e0:	f8a3 4154 	strh.w	r4, [r3, #340]	@ 0x154
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 80054e4:	f04f 040d 	mov.w	r4, #13
 80054e8:	f8a3 0156 	strh.w	r0, [r3, #342]	@ 0x156
 80054ec:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
 80054f0:	f8a3 1162 	strh.w	r1, [r3, #354]	@ 0x162
 80054f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
 80054f8:	f8a3 b146 	strh.w	fp, [r3, #326]	@ 0x146
};
 80054fc:	f883 5150 	strb.w	r5, [r3, #336]	@ 0x150
 8005500:	f8a3 9152 	strh.w	r9, [r3, #338]	@ 0x152
 8005504:	f8a3 8166 	strh.w	r8, [r3, #358]	@ 0x166
 8005508:	4b14      	ldr	r3, [pc, #80]	@ (800555c <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x39c>)
 800550a:	4815      	ldr	r0, [pc, #84]	@ (8005560 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a0>)
};
 800550c:	819c      	strh	r4, [r3, #12]
 800550e:	4c15      	ldr	r4, [pc, #84]	@ (8005564 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a4>)
 8005510:	4915      	ldr	r1, [pc, #84]	@ (8005568 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a8>)
 8005512:	e9c3 4004 	strd	r4, r0, [r3, #16]
 8005516:	f04f 040a 	mov.w	r4, #10
 800551a:	839c      	strh	r4, [r3, #28]
 800551c:	4c13      	ldr	r4, [pc, #76]	@ (800556c <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3ac>)
 800551e:	e9c3 1000 	strd	r1, r0, [r3]
 8005522:	e9c3 4008 	strd	r4, r0, [r3, #32]
 8005526:	2100      	movs	r1, #0
 8005528:	f04f 000c 	mov.w	r0, #12
 800552c:	6199      	str	r1, [r3, #24]
 800552e:	8598      	strh	r0, [r3, #44]	@ 0x2c
 8005530:	6099      	str	r1, [r3, #8]
 8005532:	6299      	str	r1, [r3, #40]	@ 0x28
 8005534:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b0>)
 8005536:	480f      	ldr	r0, [pc, #60]	@ (8005574 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b4>)
 8005538:	831a      	strh	r2, [r3, #24]
 800553a:	4a0f      	ldr	r2, [pc, #60]	@ (8005578 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b8>)
 800553c:	f8a3 e012 	strh.w	lr, [r3, #18]
 8005540:	6158      	str	r0, [r3, #20]
 8005542:	61da      	str	r2, [r3, #28]
 8005544:	f04f 0201 	mov.w	r2, #1
        : color(col)
 8005548:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800554a:	841a      	strh	r2, [r3, #32]
 800554c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8005550:	625a      	str	r2, [r3, #36]	@ 0x24
 8005552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005556:	bf00      	nop
 8005558:	2400b7c0 	.word	0x2400b7c0
 800555c:	2400b790 	.word	0x2400b790
 8005560:	00280038 	.word	0x00280038
 8005564:	00950102 	.word	0x00950102
 8005568:	00950005 	.word	0x00950005
 800556c:	00c10005 	.word	0x00c10005
 8005570:	24000038 	.word	0x24000038
 8005574:	0134000a 	.word	0x0134000a
 8005578:	08028164 	.word	0x08028164

0800557c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800557c:	4770      	bx	lr

0800557e <_ZN19FrontendApplicationD0Ev>:
 800557e:	b510      	push	{r4, lr}
 8005580:	4604      	mov	r4, r0
 8005582:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005586:	f01e fe5d 	bl	8024244 <_ZdlPvj>
 800558a:	4620      	mov	r0, r4
 800558c:	bd10      	pop	{r4, pc}

0800558e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800558e:	b510      	push	{r4, lr}
 8005590:	4604      	mov	r4, r0
    {
        model.tick();
 8005592:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8005596:	f000 f812 	bl	80055be <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800559a:	4620      	mov	r0, r4
    }
 800559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80055a0:	f010 baac 	b.w	8015afc <_ZN8touchgfx11Application15handleTickEventEv>

080055a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80055a4:	b510      	push	{r4, lr}
 80055a6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80055a8:	f7fe fd54 	bl	8004054 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80055ac:	4b01      	ldr	r3, [pc, #4]	@ (80055b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80055ae:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80055b0:	6023      	str	r3, [r4, #0]
}
 80055b2:	bd10      	pop	{r4, pc}
 80055b4:	0802873c 	.word	0x0802873c

080055b8 <_ZN5ModelC1Ev>:
 extern UART_HandleTypeDef huart1;

}


Model::Model() : modelListener(0)
 80055b8:	2200      	movs	r2, #0
 80055ba:	6002      	str	r2, [r0, #0]
{


}
 80055bc:	4770      	bx	lr

080055be <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80055be:	4770      	bx	lr

080055c0 <_ZN5Model8sendDataEPc>:

void Model::sendData(char *data){
 80055c0:	b510      	push	{r4, lr}
 80055c2:	460c      	mov	r4, r1

	HAL_UART_Transmit(&huart1,(uint8_t *)data,strlen(data),100);
 80055c4:	4608      	mov	r0, r1
 80055c6:	f7fa fe8b 	bl	80002e0 <strlen>
 80055ca:	2364      	movs	r3, #100	@ 0x64
 80055cc:	b282      	uxth	r2, r0
 80055ce:	4621      	mov	r1, r4
 80055d0:	4802      	ldr	r0, [pc, #8]	@ (80055dc <_ZN5Model8sendDataEPc+0x1c>)


}
 80055d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t *)data,strlen(data),100);
 80055d6:	f007 ba1e 	b.w	800ca16 <HAL_UART_Transmit>
 80055da:	bf00      	nop
 80055dc:	24009a08 	.word	0x24009a08

080055e0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80055e0:	4770      	bx	lr

080055e2 <_ZThn4_N16Screen1PresenterD1Ev>:
 80055e2:	3804      	subs	r0, #4
 80055e4:	4770      	bx	lr

080055e6 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::activate()
{


}
 80055e6:	4770      	bx	lr

080055e8 <_ZN16Screen1PresenterD0Ev>:
 80055e8:	b510      	push	{r4, lr}
 80055ea:	4604      	mov	r4, r0
 80055ec:	2110      	movs	r1, #16
 80055ee:	f01e fe29 	bl	8024244 <_ZdlPvj>
 80055f2:	4620      	mov	r0, r4
 80055f4:	bd10      	pop	{r4, pc}

080055f6 <_ZThn4_N16Screen1PresenterD0Ev>:
 80055f6:	f1a0 0004 	sub.w	r0, r0, #4
 80055fa:	e7f5      	b.n	80055e8 <_ZN16Screen1PresenterD0Ev>

080055fc <_ZN16Screen1Presenter8sendDataEPc>:

void  Screen1Presenter::sendData(char *data){



	model->sendData(data);
 80055fc:	6880      	ldr	r0, [r0, #8]
 80055fe:	f7ff bfdf 	b.w	80055c0 <_ZN5Model8sendDataEPc>
	...

08005604 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8005604:	2200      	movs	r2, #0
    : view(v)
 8005606:	60c1      	str	r1, [r0, #12]
 8005608:	6082      	str	r2, [r0, #8]
 800560a:	4a02      	ldr	r2, [pc, #8]	@ (8005614 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 800560c:	6002      	str	r2, [r0, #0]
 800560e:	321c      	adds	r2, #28
 8005610:	6042      	str	r2, [r0, #4]
}
 8005612:	4770      	bx	lr
 8005614:	08028790 	.word	0x08028790

08005618 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8005618:	4770      	bx	lr

0800561a <_ZN11Screen1View11NameClickedEv>:

void Screen1View::NameClicked(){
 800561a:	b570      	push	{r4, r5, r6, lr}
        visible = vis;
 800561c:	2501      	movs	r5, #1
 800561e:	4604      	mov	r4, r0
 8005620:	2600      	movs	r6, #0

	keyboard.setVisible(true);
	keyboard.invalidate();
 8005622:	f500 608c 	add.w	r0, r0, #1120	@ 0x460
 8005626:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 800562a:	f011 fb9e 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
	OKButton.setVisible(true);
	OKButton.invalidate();
 800562e:	f504 7046 	add.w	r0, r4, #792	@ 0x318
 8005632:	f884 533d 	strb.w	r5, [r4, #829]	@ 0x33d
 8005636:	f011 fb98 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
	 buttonWithSend.setVisible(false);
	 buttonWithSend.invalidate();
 800563a:	f504 706a 	add.w	r0, r4, #936	@ 0x3a8
 800563e:	f884 63cd 	strb.w	r6, [r4, #973]	@ 0x3cd
 8005642:	f011 fb92 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
	ExitButton.setVisible(true);
	ExitButton.invalidate();
 8005646:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800564a:	f884 5385 	strb.w	r5, [r4, #901]	@ 0x385
 800564e:	f011 fb8c 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

	namemod = 1;
 8005652:	f8c4 5624 	str.w	r5, [r4, #1572]	@ 0x624
	agemod = 0;
 8005656:	f8c4 6628 	str.w	r6, [r4, #1576]	@ 0x628

}
 800565a:	bd70      	pop	{r4, r5, r6, pc}

0800565c <_ZN11Screen1View10AgeClickedEv>:


void Screen1View::AgeClicked(){
 800565c:	b570      	push	{r4, r5, r6, lr}
 800565e:	2501      	movs	r5, #1
 8005660:	4604      	mov	r4, r0
 8005662:	2600      	movs	r6, #0
	keyboard.setVisible(true);
		keyboard.invalidate();
 8005664:	f500 608c 	add.w	r0, r0, #1120	@ 0x460
 8005668:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 800566c:	f011 fb7d 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
		OKButton.setVisible(true);
		OKButton.invalidate();
 8005670:	f504 7046 	add.w	r0, r4, #792	@ 0x318
 8005674:	f884 533d 	strb.w	r5, [r4, #829]	@ 0x33d
 8005678:	f011 fb77 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

		 buttonWithSend.setVisible(false);
		 buttonWithSend.invalidate();
 800567c:	f504 706a 	add.w	r0, r4, #936	@ 0x3a8
 8005680:	f884 63cd 	strb.w	r6, [r4, #973]	@ 0x3cd
 8005684:	f011 fb71 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

		ExitButton.setVisible(true);
		ExitButton.invalidate();
 8005688:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 800568c:	f884 5385 	strb.w	r5, [r4, #901]	@ 0x385
 8005690:	f011 fb6b 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

		namemod = 0;
 8005694:	f8c4 6624 	str.w	r6, [r4, #1572]	@ 0x624
		agemod = 1;
 8005698:	f8c4 5628 	str.w	r5, [r4, #1576]	@ 0x628

}
 800569c:	bd70      	pop	{r4, r5, r6, pc}

0800569e <_ZN11Screen1View11ExitClickedEv>:

				keyboard.clearBuffer();

}

void Screen1View::ExitClicked(){
 800569e:	b538      	push	{r3, r4, r5, lr}
 80056a0:	2500      	movs	r5, #0
 80056a2:	4604      	mov	r4, r0

	keyboard.setVisible(false);
			keyboard.invalidate();
 80056a4:	f500 608c 	add.w	r0, r0, #1120	@ 0x460
 80056a8:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 80056ac:	f011 fb5d 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
			OKButton.setVisible(false);
			OKButton.invalidate();
 80056b0:	f504 7046 	add.w	r0, r4, #792	@ 0x318
 80056b4:	f884 533d 	strb.w	r5, [r4, #829]	@ 0x33d
 80056b8:	f011 fb57 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

			ExitButton.setVisible(false);
			ExitButton.invalidate();
 80056bc:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 80056c0:	f884 5385 	strb.w	r5, [r4, #901]	@ 0x385
 80056c4:	f011 fb51 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
 80056c8:	2301      	movs	r3, #1

			buttonWithSend.setVisible(true);
				 buttonWithSend.invalidate();
 80056ca:	f504 706a 	add.w	r0, r4, #936	@ 0x3a8
 80056ce:	f884 33cd 	strb.w	r3, [r4, #973]	@ 0x3cd
 80056d2:	f011 fb4a 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

			namemod = agemod = 0;
 80056d6:	f8c4 5628 	str.w	r5, [r4, #1576]	@ 0x628
 80056da:	f8c4 5624 	str.w	r5, [r4, #1572]	@ 0x624

}
 80056de:	bd38      	pop	{r3, r4, r5, pc}

080056e0 <_ZN11Screen1View9OkClickedEv>:
void Screen1View::OkClicked(){
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	2600      	movs	r6, #0
				keyboard.invalidate();
 80056e4:	f500 658c 	add.w	r5, r0, #1120	@ 0x460
void Screen1View::OkClicked(){
 80056e8:	4604      	mov	r4, r0
 80056ea:	f880 6485 	strb.w	r6, [r0, #1157]	@ 0x485
				keyboard.invalidate();
 80056ee:	4628      	mov	r0, r5
 80056f0:	f011 fb3b 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
				OKButton.invalidate();
 80056f4:	f504 7046 	add.w	r0, r4, #792	@ 0x318
 80056f8:	f884 633d 	strb.w	r6, [r4, #829]	@ 0x33d
 80056fc:	f011 fb35 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
				ExitButton.invalidate();
 8005700:	f504 7058 	add.w	r0, r4, #864	@ 0x360
 8005704:	f884 6385 	strb.w	r6, [r4, #901]	@ 0x385
 8005708:	f011 fb2f 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
 800570c:	2301      	movs	r3, #1
					 buttonWithSend.invalidate();
 800570e:	f504 706a 	add.w	r0, r4, #936	@ 0x3a8
 8005712:	f884 33cd 	strb.w	r3, [r4, #973]	@ 0x3cd
 8005716:	f011 fb28 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
				if (namemod){
 800571a:	f8d4 3624 	ldr.w	r3, [r4, #1572]	@ 0x624
 800571e:	b163      	cbz	r3, 800573a <_ZN11Screen1View9OkClickedEv+0x5a>
					Unicode::strncpy(textAreaNameBuffer, keyboard.getBuffer(), TEXTAREANAME_SIZE);
 8005720:	4628      	mov	r0, r5
 8005722:	f7ff fd4b 	bl	80051bc <_ZN14CustomKeyboard9getBufferEv>
 8005726:	2214      	movs	r2, #20
 8005728:	4601      	mov	r1, r0
 800572a:	f504 707c 	add.w	r0, r4, #1008	@ 0x3f0
 800572e:	f013 fab6 	bl	8018c9e <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
					textAreaName.invalidate();
 8005732:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 8005736:	f011 fb18 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
				if (agemod){
 800573a:	f8d4 3628 	ldr.w	r3, [r4, #1576]	@ 0x628
 800573e:	b163      	cbz	r3, 800575a <_ZN11Screen1View9OkClickedEv+0x7a>
					Unicode::strncpy(textAreaAgeBuffer, keyboard.getBuffer(), TEXTAREAAGE_SIZE);
 8005740:	4628      	mov	r0, r5
 8005742:	f7ff fd3b 	bl	80051bc <_ZN14CustomKeyboard9getBufferEv>
 8005746:	2214      	movs	r2, #20
 8005748:	4601      	mov	r1, r0
 800574a:	f504 6083 	add.w	r0, r4, #1048	@ 0x418
 800574e:	f013 faa6 	bl	8018c9e <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
					textAreaAge.invalidate();
 8005752:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8005756:	f011 fb08 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
				keyboard.clearBuffer();
 800575a:	4628      	mov	r0, r5
}
 800575c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				keyboard.clearBuffer();
 8005760:	f7ff bc65 	b.w	800502e <_ZN14CustomKeyboard11clearBufferEv>

08005764 <_ZN11Screen1View11SendClickedEv>:

void Screen1View::SendClicked(){
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	f500 737c 	add.w	r3, r0, #1008	@ 0x3f0
 800576c:	4604      	mov	r4, r0
 800576e:	f200 625d 	addw	r2, r0, #1629	@ 0x65d
		int i=0;

		do
		{

			namebuf[i] = (char) textAreaNameBuffer[i];
 8005772:	8819      	ldrh	r1, [r3, #0]
 8005774:	f802 1f01 	strb.w	r1, [r2, #1]!
			i++;
		} while(textAreaNameBuffer[i] != 0);
 8005778:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 800577c:	2900      	cmp	r1, #0
 800577e:	d1f8      	bne.n	8005772 <_ZN11Screen1View11SendClickedEv+0xe>
 8005780:	f504 6383 	add.w	r3, r4, #1048	@ 0x418
 8005784:	f204 6271 	addw	r2, r4, #1649	@ 0x671

		i=0;
		do
				{

					agebuf[i] = (char) textAreaAgeBuffer[i];
 8005788:	8819      	ldrh	r1, [r3, #0]
 800578a:	f802 1f01 	strb.w	r1, [r2, #1]!
					i++;
				} while(textAreaAgeBuffer[i] != 0);
 800578e:	f833 5f02 	ldrh.w	r5, [r3, #2]!
 8005792:	2d00      	cmp	r5, #0
 8005794:	d1f8      	bne.n	8005788 <_ZN11Screen1View11SendClickedEv+0x24>

			sprintf(dataBuffer,"Name: %s, Age:%s \r\n",namebuf,agebuf);
 8005796:	f204 682c 	addw	r8, r4, #1580	@ 0x62c
 800579a:	f204 675e 	addw	r7, r4, #1630	@ 0x65e
 800579e:	f204 6672 	addw	r6, r4, #1650	@ 0x672
 80057a2:	490b      	ldr	r1, [pc, #44]	@ (80057d0 <_ZN11Screen1View11SendClickedEv+0x6c>)
 80057a4:	463a      	mov	r2, r7
 80057a6:	4640      	mov	r0, r8
 80057a8:	4633      	mov	r3, r6
 80057aa:	f01f fa85 	bl	8024cb8 <siprintf>

			presenter->sendData(dataBuffer);
 80057ae:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80057b0:	4641      	mov	r1, r8
 80057b2:	6803      	ldr	r3, [r0, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	4798      	blx	r3

			memset(namebuf,'\0',TEXTAREANAME_SIZE);
 80057b8:	4629      	mov	r1, r5
 80057ba:	2214      	movs	r2, #20
 80057bc:	4638      	mov	r0, r7
 80057be:	f01f fb75 	bl	8024eac <memset>
			memset(agebuf,'\0',TEXTAREANAME_SIZE);
 80057c2:	4629      	mov	r1, r5
 80057c4:	4630      	mov	r0, r6
 80057c6:	2214      	movs	r2, #20

}
 80057c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			memset(agebuf,'\0',TEXTAREANAME_SIZE);
 80057cc:	f01f bb6e 	b.w	8024eac <memset>
 80057d0:	08027ba7 	.word	0x08027ba7

080057d4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80057d4:	4b03      	ldr	r3, [pc, #12]	@ (80057e4 <_ZN11Screen1ViewD1Ev+0x10>)
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	6003      	str	r3, [r0, #0]
 80057dc:	f7fe fd32 	bl	8004244 <_ZN15Screen1ViewBaseD1Ev>
 80057e0:	4620      	mov	r0, r4
 80057e2:	bd10      	pop	{r4, pc}
 80057e4:	080287bc 	.word	0x080287bc

080057e8 <_ZN11Screen1ViewD0Ev>:
 80057e8:	b510      	push	{r4, lr}
 80057ea:	4604      	mov	r4, r0
 80057ec:	f7ff fff2 	bl	80057d4 <_ZN11Screen1ViewD1Ev>
 80057f0:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 80057f4:	4620      	mov	r0, r4
 80057f6:	f01e fd25 	bl	8024244 <_ZdlPvj>
 80057fa:	4620      	mov	r0, r4
 80057fc:	bd10      	pop	{r4, pc}
	...

08005800 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4604      	mov	r4, r0
 8005804:	f7fe ff14 	bl	8004630 <_ZN15Screen1ViewBaseC1Ev>
 8005808:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <_ZN11Screen1ViewC1Ev+0x50>)
 800580a:	f504 658c 	add.w	r5, r4, #1120	@ 0x460
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	4628      	mov	r0, r5
 8005812:	f7ff fc23 	bl	800505c <_ZN14CustomKeyboardC1Ev>
        rect.x = x;
 8005816:	4a0f      	ldr	r2, [pc, #60]	@ (8005854 <_ZN11Screen1ViewC1Ev+0x54>)
        setX(x);
 8005818:	f8d4 3460 	ldr.w	r3, [r4, #1120]	@ 0x460
        setWidth(width);
 800581c:	4628      	mov	r0, r5
        rect.x = x;
 800581e:	f8c4 2464 	str.w	r2, [r4, #1124]	@ 0x464
        setWidth(width);
 8005822:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	4798      	blx	r3
        setHeight(height);
 800582a:	f8d4 3460 	ldr.w	r3, [r4, #1120]	@ 0x460
 800582e:	4628      	mov	r0, r5
 8005830:	21f0      	movs	r1, #240	@ 0xf0
 8005832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005834:	4798      	blx	r3
 8005836:	4629      	mov	r1, r5
 8005838:	1d20      	adds	r0, r4, #4
 800583a:	f009 fcc9 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        visible = vis;
 800583e:	2300      	movs	r3, #0
	keyboard.invalidate();
 8005840:	4628      	mov	r0, r5
 8005842:	f884 3485 	strb.w	r3, [r4, #1157]	@ 0x485
 8005846:	f011 fa90 	bl	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800584a:	4620      	mov	r0, r4
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	bf00      	nop
 8005850:	080287bc 	.word	0x080287bc
 8005854:	00100050 	.word	0x00100050

08005858 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8005858:	f7fe bcf5 	b.w	8004246 <_ZN15Screen1ViewBase11setupScreenEv>

0800585c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800585c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800585e:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8005862:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8005864:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8005866:	2302      	movs	r3, #2
 8005868:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800586a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800586e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8005872:	4770      	bx	lr

08005874 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8005874:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8005878:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800587a:	bf04      	itt	eq
 800587c:	2300      	moveq	r3, #0
 800587e:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8005882:	2000      	movs	r0, #0
 8005884:	4770      	bx	lr

08005886 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8005886:	2000      	movs	r0, #0
 8005888:	4770      	bx	lr

0800588a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800588a:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800588c:	6904      	ldr	r4, [r0, #16]
 800588e:	8900      	ldrh	r0, [r0, #8]
 8005890:	46a4      	mov	ip, r4
}
 8005892:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005896:	4760      	bx	ip

08005898 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005898:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800589a:	68c4      	ldr	r4, [r0, #12]
 800589c:	8900      	ldrh	r0, [r0, #8]
 800589e:	46a4      	mov	ip, r4
}
 80058a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80058a4:	4760      	bx	ip

080058a6 <FT6X06_GestureConfig>:
{
 80058a6:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80058a8:	f100 0518 	add.w	r5, r0, #24
{
 80058ac:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80058ae:	7809      	ldrb	r1, [r1, #0]
 80058b0:	4628      	mov	r0, r5
 80058b2:	f000 f911 	bl	8005ad8 <ft6x06_radian_value>
 80058b6:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80058b8:	7931      	ldrb	r1, [r6, #4]
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f918 	bl	8005af0 <ft6x06_offset_left_right>
 80058c0:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80058c2:	7a31      	ldrb	r1, [r6, #8]
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 f91f 	bl	8005b08 <ft6x06_offset_up_down>
 80058ca:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80058cc:	7b31      	ldrb	r1, [r6, #12]
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 f926 	bl	8005b20 <ft6x06_disatnce_left_right>
 80058d4:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80058d6:	7c31      	ldrb	r1, [r6, #16]
 80058d8:	4628      	mov	r0, r5
 80058da:	f000 f92d 	bl	8005b38 <ft6x06_distance_up_down>
 80058de:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80058e0:	7d31      	ldrb	r1, [r6, #20]
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 f934 	bl	8005b50 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80058e8:	42c4      	cmn	r4, r0
}
 80058ea:	bf14      	ite	ne
 80058ec:	f04f 30ff 	movne.w	r0, #4294967295
 80058f0:	2000      	moveq	r0, #0
 80058f2:	bd70      	pop	{r4, r5, r6, pc}

080058f4 <FT6X06_ReadID>:
{
 80058f4:	b513      	push	{r0, r1, r4, lr}
 80058f6:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80058f8:	3018      	adds	r0, #24
 80058fa:	f10d 0107 	add.w	r1, sp, #7
 80058fe:	f000 f93f 	bl	8005b80 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8005902:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005906:	6023      	str	r3, [r4, #0]
}
 8005908:	b002      	add	sp, #8
 800590a:	bd10      	pop	{r4, pc}

0800590c <FT6X06_GetState>:
{
 800590c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800590e:	f100 0518 	add.w	r5, r0, #24
{
 8005912:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005914:	a901      	add	r1, sp, #4
 8005916:	4628      	mov	r0, r5
 8005918:	f000 f8d1 	bl	8005abe <ft6x06_td_status>
 800591c:	bb08      	cbnz	r0, 8005962 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800591e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005922:	2b02      	cmp	r3, #2
 8005924:	bf98      	it	ls
 8005926:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005928:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800592a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800592c:	2103      	movs	r1, #3
 800592e:	4628      	mov	r0, r5
 8005930:	eb0d 0203 	add.w	r2, sp, r3
 8005934:	f000 f8b0 	bl	8005a98 <ft6x06_read_reg>
 8005938:	b9b0      	cbnz	r0, 8005968 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800593a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800593e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005948:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800594a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800594e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005950:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800595a:	4313      	orrs	r3, r2
 800595c:	60a3      	str	r3, [r4, #8]
}
 800595e:	b003      	add	sp, #12
 8005960:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	e7df      	b.n	8005928 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800596c:	e7f7      	b.n	800595e <FT6X06_GetState+0x52>

0800596e <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800596e:	3018      	adds	r0, #24
 8005970:	f000 b8a0 	b.w	8005ab4 <ft6x06_gest_id>

08005974 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005974:	2101      	movs	r1, #1
 8005976:	3018      	adds	r0, #24
 8005978:	f000 b8f6 	b.w	8005b68 <ft6x06_g_mode>

0800597c <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800597c:	2100      	movs	r1, #0
 800597e:	3018      	adds	r0, #24
 8005980:	f000 b8f2 	b.w	8005b68 <ft6x06_g_mode>

08005984 <FT6X06_Init>:
{
 8005984:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8005986:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800598a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800598c:	b96b      	cbnz	r3, 80059aa <FT6X06_Init+0x26>
    pObj->IO.Init();
 800598e:	6803      	ldr	r3, [r0, #0]
 8005990:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005992:	4620      	mov	r0, r4
 8005994:	f7ff fff2 	bl	800597c <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8005998:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800599a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800599e:	bf18      	it	ne
 80059a0:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80059a2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80059a6:	4240      	negs	r0, r0
}
 80059a8:	bd10      	pop	{r4, pc}
 80059aa:	2000      	movs	r0, #0
  return ret;
 80059ac:	e7fc      	b.n	80059a8 <FT6X06_Init+0x24>

080059ae <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 80059ae:	2000      	movs	r0, #0
 80059b0:	4770      	bx	lr

080059b2 <FT6X06_GetMultiTouchState>:
{
 80059b2:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80059b4:	f100 0518 	add.w	r5, r0, #24
{
 80059b8:	b085      	sub	sp, #20
 80059ba:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80059bc:	4628      	mov	r0, r5
 80059be:	a901      	add	r1, sp, #4
 80059c0:	f000 f87d 	bl	8005abe <ft6x06_td_status>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d145      	bne.n	8005a54 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80059c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	bf98      	it	ls
 80059d0:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80059d2:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80059d4:	230c      	movs	r3, #12
 80059d6:	aa01      	add	r2, sp, #4
 80059d8:	2103      	movs	r1, #3
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f85c 	bl	8005a98 <ft6x06_read_reg>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d13a      	bne.n	8005a5a <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80059e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80059e8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80059ec:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80059ee:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80059f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80059f4:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80059f6:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80059f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80059fc:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005a00:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005a02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a0c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005a0e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005a12:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8005a14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005a18:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8005a1a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005a22:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005a24:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005a26:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005a2a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005a2c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005a2e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005a32:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005a34:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a3e:	430b      	orrs	r3, r1
 8005a40:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005a42:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005a46:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8005a48:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005a50:	b005      	add	sp, #20
 8005a52:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	e7bb      	b.n	80059d2 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005a5e:	e7f7      	b.n	8005a50 <FT6X06_GetMultiTouchState+0x9e>

08005a60 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005a60:	b190      	cbz	r0, 8005a88 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005a62:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005a64:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005a66:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8005a68:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005a6a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8005a6c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005a6e:	68ca      	ldr	r2, [r1, #12]
 8005a70:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005a72:	690a      	ldr	r2, [r1, #16]
 8005a74:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005a76:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8005a78:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8005a7a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005a7c:	4a04      	ldr	r2, [pc, #16]	@ (8005a90 <FT6X06_RegisterBusIO+0x30>)
 8005a7e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005a80:	4a04      	ldr	r2, [pc, #16]	@ (8005a94 <FT6X06_RegisterBusIO+0x34>)
 8005a82:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005a84:	b103      	cbz	r3, 8005a88 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8005a86:	4718      	bx	r3
}
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	0800588b 	.word	0x0800588b
 8005a94:	08005899 	.word	0x08005899

08005a98 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005a98:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005a9a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005a9e:	46a4      	mov	ip, r4
}
 8005aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005aa4:	4760      	bx	ip

08005aa6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005aa6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005aa8:	6804      	ldr	r4, [r0, #0]
 8005aaa:	6880      	ldr	r0, [r0, #8]
 8005aac:	46a4      	mov	ip, r4
}
 8005aae:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005ab2:	4760      	bx	ip

08005ab4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005ab4:	2301      	movs	r3, #1
{
 8005ab6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7ff bfed 	b.w	8005a98 <ft6x06_read_reg>

08005abe <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005abe:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005ac0:	460a      	mov	r2, r1
{
 8005ac2:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	f7ff ffe6 	bl	8005a98 <ft6x06_read_reg>
  
  if(ret == 0)
 8005acc:	b918      	cbnz	r0, 8005ad6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8005ace:	7823      	ldrb	r3, [r4, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8005ad6:	bd10      	pop	{r4, pc}

08005ad8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005ad8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005ada:	2301      	movs	r3, #1
{
 8005adc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005ae0:	f10d 0207 	add.w	r2, sp, #7
 8005ae4:	2191      	movs	r1, #145	@ 0x91
 8005ae6:	f7ff ffde 	bl	8005aa6 <ft6x06_write_reg>
}
 8005aea:	b003      	add	sp, #12
 8005aec:	f85d fb04 	ldr.w	pc, [sp], #4

08005af0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005af0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005af2:	2301      	movs	r3, #1
{
 8005af4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005af8:	f10d 0207 	add.w	r2, sp, #7
 8005afc:	2192      	movs	r1, #146	@ 0x92
 8005afe:	f7ff ffd2 	bl	8005aa6 <ft6x06_write_reg>
}
 8005b02:	b003      	add	sp, #12
 8005b04:	f85d fb04 	ldr.w	pc, [sp], #4

08005b08 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005b08:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005b0a:	2301      	movs	r3, #1
{
 8005b0c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005b10:	f10d 0207 	add.w	r2, sp, #7
 8005b14:	2193      	movs	r1, #147	@ 0x93
 8005b16:	f7ff ffc6 	bl	8005aa6 <ft6x06_write_reg>
}
 8005b1a:	b003      	add	sp, #12
 8005b1c:	f85d fb04 	ldr.w	pc, [sp], #4

08005b20 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005b20:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005b22:	2301      	movs	r3, #1
{
 8005b24:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005b28:	f10d 0207 	add.w	r2, sp, #7
 8005b2c:	2194      	movs	r1, #148	@ 0x94
 8005b2e:	f7ff ffba 	bl	8005aa6 <ft6x06_write_reg>
}
 8005b32:	b003      	add	sp, #12
 8005b34:	f85d fb04 	ldr.w	pc, [sp], #4

08005b38 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005b38:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005b3a:	2301      	movs	r3, #1
{
 8005b3c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005b40:	f10d 0207 	add.w	r2, sp, #7
 8005b44:	2195      	movs	r1, #149	@ 0x95
 8005b46:	f7ff ffae 	bl	8005aa6 <ft6x06_write_reg>
}
 8005b4a:	b003      	add	sp, #12
 8005b4c:	f85d fb04 	ldr.w	pc, [sp], #4

08005b50 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005b50:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005b52:	2301      	movs	r3, #1
{
 8005b54:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005b58:	f10d 0207 	add.w	r2, sp, #7
 8005b5c:	2196      	movs	r1, #150	@ 0x96
 8005b5e:	f7ff ffa2 	bl	8005aa6 <ft6x06_write_reg>
}
 8005b62:	b003      	add	sp, #12
 8005b64:	f85d fb04 	ldr.w	pc, [sp], #4

08005b68 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005b68:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005b6a:	2301      	movs	r3, #1
{
 8005b6c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005b70:	f10d 0207 	add.w	r2, sp, #7
 8005b74:	21a4      	movs	r1, #164	@ 0xa4
 8005b76:	f7ff ff96 	bl	8005aa6 <ft6x06_write_reg>
}
 8005b7a:	b003      	add	sp, #12
 8005b7c:	f85d fb04 	ldr.w	pc, [sp], #4

08005b80 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005b80:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005b82:	2301      	movs	r3, #1
 8005b84:	21a8      	movs	r1, #168	@ 0xa8
 8005b86:	f7ff bf87 	b.w	8005a98 <ft6x06_read_reg>
	...

08005b8c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005b8c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4b07      	ldr	r3, [pc, #28]	@ (8005bb0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005b92:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8005b96:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005b98:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005b9a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8005b9c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ba2:	f006 fb15 	bl	800c1d0 <HAL_SDRAM_SendCommand>
 8005ba6:	3800      	subs	r0, #0
 8005ba8:	bf18      	it	ne
 8005baa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005bac:	4240      	negs	r0, r0
 8005bae:	bd08      	pop	{r3, pc}
 8005bb0:	2400b928 	.word	0x2400b928

08005bb4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005bb4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4b08      	ldr	r3, [pc, #32]	@ (8005bdc <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8005bba:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005bc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bca:	4619      	mov	r1, r3
 8005bcc:	f006 fb00 	bl	800c1d0 <HAL_SDRAM_SendCommand>
 8005bd0:	3800      	subs	r0, #0
 8005bd2:	bf18      	it	ne
 8005bd4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005bd6:	4240      	negs	r0, r0
 8005bd8:	bd08      	pop	{r3, pc}
 8005bda:	bf00      	nop
 8005bdc:	2400b928 	.word	0x2400b928

08005be0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8005be0:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005be2:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8005be6:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005be8:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8005bea:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005bec:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8005bee:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8005bf0:	6991      	ldr	r1, [r2, #24]
 8005bf2:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005bf4:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8005bf6:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005bf8:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005bfa:	4907      	ldr	r1, [pc, #28]	@ (8005c18 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8005bfc:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8005bfe:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005c00:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8005c02:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c0a:	f006 fae1 	bl	800c1d0 <HAL_SDRAM_SendCommand>
 8005c0e:	3800      	subs	r0, #0
 8005c10:	bf18      	it	ne
 8005c12:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005c14:	4240      	negs	r0, r0
 8005c16:	bd10      	pop	{r4, pc}
 8005c18:	2400b928 	.word	0x2400b928

08005c1c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8005c1c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8005c1e:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8005c20:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8005c24:	2108      	movs	r1, #8
 8005c26:	2200      	movs	r2, #0
 8005c28:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c30:	4619      	mov	r1, r3
 8005c32:	f006 facd 	bl	800c1d0 <HAL_SDRAM_SendCommand>
 8005c36:	3800      	subs	r0, #0
 8005c38:	bf18      	it	ne
 8005c3a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005c3c:	4240      	negs	r0, r0
 8005c3e:	bd08      	pop	{r3, pc}
 8005c40:	2400b928 	.word	0x2400b928

08005c44 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8005c44:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8005c46:	f006 fae2 	bl	800c20e <HAL_SDRAM_ProgramRefreshRate>
 8005c4a:	3800      	subs	r0, #0
 8005c4c:	bf18      	it	ne
 8005c4e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005c50:	4240      	negs	r0, r0
 8005c52:	bd08      	pop	{r3, pc}

08005c54 <IS42S32800J_Init>:
{
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005c58:	6809      	ldr	r1, [r1, #0]
{
 8005c5a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005c5c:	f7ff ff96 	bl	8005b8c <IS42S32800J_ClockEnable>
 8005c60:	b110      	cbz	r0, 8005c68 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8005c62:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005c66:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8005c68:	f001 fc7e 	bl	8007568 <HAL_GetTick>
 8005c6c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8005c6e:	f001 fc7b 	bl	8007568 <HAL_GetTick>
 8005c72:	4286      	cmp	r6, r0
 8005c74:	d0fb      	beq.n	8005c6e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005c76:	6821      	ldr	r1, [r4, #0]
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7ff ff9b 	bl	8005bb4 <IS42S32800J_Precharge>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d1ef      	bne.n	8005c62 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8005c82:	4628      	mov	r0, r5
 8005c84:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005c88:	f7ff ffc8 	bl	8005c1c <IS42S32800J_RefreshMode>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d1e8      	bne.n	8005c62 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8005c90:	4621      	mov	r1, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	f7ff ffa4 	bl	8005be0 <IS42S32800J_ModeRegConfig>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d1e2      	bne.n	8005c62 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8005c9c:	68a1      	ldr	r1, [r4, #8]
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f7ff ffd0 	bl	8005c44 <IS42S32800J_RefreshRate>
 8005ca4:	3800      	subs	r0, #0
 8005ca6:	bf18      	it	ne
 8005ca8:	2001      	movne	r0, #1
 8005caa:	4240      	negs	r0, r0
  return ret;
 8005cac:	e7db      	b.n	8005c66 <IS42S32800J_Init+0x12>

08005cae <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005cae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005cba:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005cbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cc2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8005cc6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005cca:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8005ccc:	2000      	movs	r0, #0
 8005cce:	4770      	bx	lr

08005cd0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005cd0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005cd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8005cd6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005cd8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005cdc:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005cde:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005ce0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8005ce2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005ce4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005ce6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8005ce8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cea:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005cec:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8005cee:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005cf0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8005cf2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005cf4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005cf6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005cfa:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8005cfe:	2310      	movs	r3, #16
 8005d00:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005d06:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8005d08:	f240 1301 	movw	r3, #257	@ 0x101
 8005d0c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d12:	f004 fd0b 	bl	800a72c <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8005d16:	2800      	cmp	r0, #0

}
 8005d18:	bf14      	ite	ne
 8005d1a:	f06f 0004 	mvnne.w	r0, #4
 8005d1e:	2000      	moveq	r0, #0
 8005d20:	b015      	add	sp, #84	@ 0x54
 8005d22:	f85d fb04 	ldr.w	pc, [sp], #4

08005d26 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005d26:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d28:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005d2c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005d2e:	bf18      	it	ne
 8005d30:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005d34:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005d36:	bf08      	it	eq
 8005d38:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8005d3c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d3e:	a906      	add	r1, sp, #24
{
 8005d40:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005d42:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8005d44:	2306      	movs	r3, #6
 8005d46:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005d48:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005d4a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8005d4e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8005d50:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005d52:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005d54:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d58:	f004 fbe8 	bl	800a52c <HAL_QSPI_Command>
 8005d5c:	bb20      	cbnz	r0, 8005da8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005d5e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8005d62:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005d64:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005d66:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005d6a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d6c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005d6e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005d72:	f04f 0310 	mov.w	r3, #16
 8005d76:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005d7a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d7e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005d80:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005d84:	bf14      	ite	ne
 8005d86:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8005d8a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d8e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005d90:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005d92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005d96:	f004 fcc9 	bl	800a72c <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	bf14      	ite	ne
 8005d9e:	f06f 0004 	mvnne.w	r0, #4
 8005da2:	2000      	moveq	r0, #0
}
 8005da4:	b015      	add	sp, #84	@ 0x54
 8005da6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005da8:	f06f 0001 	mvn.w	r0, #1
 8005dac:	e7fa      	b.n	8005da4 <MT25TL01G_WriteEnable+0x7e>

08005dae <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005dae:	2903      	cmp	r1, #3
{
 8005db0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005db2:	bf18      	it	ne
 8005db4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005db8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005dba:	bf08      	it	eq
 8005dbc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005dc4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8005dc6:	23b7      	movs	r3, #183	@ 0xb7
 8005dc8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005dca:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005dcc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005dd0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005dd2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005dd4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005dd6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8005dda:	f7ff ffa4 	bl	8005d26 <MT25TL01G_WriteEnable>
 8005dde:	b118      	cbz	r0, 8005de8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8005de0:	f06f 0001 	mvn.w	r0, #1
}
 8005de4:	b00f      	add	sp, #60	@ 0x3c
 8005de6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dec:	4669      	mov	r1, sp
 8005dee:	4620      	mov	r0, r4
 8005df0:	f004 fb9c 	bl	800a52c <HAL_QSPI_Command>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d1f3      	bne.n	8005de0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f7ff ff68 	bl	8005cd0 <MT25TL01G_AutoPollingMemReady>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d0ef      	beq.n	8005de4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8005e04:	e7ec      	b.n	8005de0 <MT25TL01G_Enter4BytesAddressMode+0x32>

08005e06 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005e06:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8005e0c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e12:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005e14:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e16:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005e18:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005e1a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005e1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005e20:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005e22:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005e24:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005e26:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e2a:	f004 fb7f 	bl	800a52c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005e2e:	2800      	cmp	r0, #0
}
 8005e30:	bf14      	ite	ne
 8005e32:	f06f 0001 	mvnne.w	r0, #1
 8005e36:	2000      	moveq	r0, #0
 8005e38:	b00f      	add	sp, #60	@ 0x3c
 8005e3a:	f85d fb04 	ldr.w	pc, [sp], #4

08005e3e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005e3e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8005e44:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e46:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e4a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005e4c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e4e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005e50:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005e52:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005e54:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005e58:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005e5a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005e5c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005e5e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e62:	f004 fb63 	bl	800a52c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005e66:	2800      	cmp	r0, #0
}
 8005e68:	bf14      	ite	ne
 8005e6a:	f06f 0001 	mvnne.w	r0, #1
 8005e6e:	2000      	moveq	r0, #0
 8005e70:	b00f      	add	sp, #60	@ 0x3c
 8005e72:	f85d fb04 	ldr.w	pc, [sp], #4

08005e76 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005e76:	b500      	push	{lr}
 8005e78:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005e7a:	2903      	cmp	r1, #3
 8005e7c:	d80e      	bhi.n	8005e9c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005e7e:	e8df f001 	tbb	[pc, r1]
 8005e82:	2902      	.short	0x2902
 8005e84:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005e86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e8a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005e8c:	230e      	movs	r3, #14
 8005e8e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005e90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e94:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005e96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005e9c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005e9e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005ea2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005ea6:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005ea8:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005eaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005eae:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005eb0:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005eb2:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005eb6:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005eb8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005eba:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005ebc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005ec0:	f004 fc85 	bl	800a7ce <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005ec4:	2800      	cmp	r0, #0
}
 8005ec6:	bf14      	ite	ne
 8005ec8:	f06f 0005 	mvnne.w	r0, #5
 8005ecc:	2000      	moveq	r0, #0
 8005ece:	b011      	add	sp, #68	@ 0x44
 8005ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ed8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8005eda:	233d      	movs	r3, #61	@ 0x3d
 8005edc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ee2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ee8:	e7d7      	b.n	8005e9a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005eea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005eee:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8005ef0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005ef2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005ef4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005ef8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005efa:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005efe:	e7cc      	b.n	8005e9a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005f00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f04:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005f06:	23ed      	movs	r3, #237	@ 0xed
 8005f08:	e7f3      	b.n	8005ef2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08005f0a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005f0a:	b500      	push	{lr}
 8005f0c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005f0e:	2903      	cmp	r1, #3
 8005f10:	d80e      	bhi.n	8005f30 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8005f12:	e8df f001 	tbb	[pc, r1]
 8005f16:	2502      	.short	0x2502
 8005f18:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f1e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8005f20:	230c      	movs	r3, #12
 8005f22:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f28:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005f2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005f2e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005f30:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005f32:	466a      	mov	r2, sp
 8005f34:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005f36:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005f38:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005f3c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005f42:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005f44:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005f48:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005f4c:	f004 fc3f 	bl	800a7ce <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005f50:	2800      	cmp	r0, #0
}
 8005f52:	bf14      	ite	ne
 8005f54:	f06f 0005 	mvnne.w	r0, #5
 8005f58:	2000      	moveq	r0, #0
 8005f5a:	b011      	add	sp, #68	@ 0x44
 8005f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f64:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005f66:	23bc      	movs	r3, #188	@ 0xbc
 8005f68:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8005f6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f6e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005f70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f74:	e7db      	b.n	8005f2e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005f76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f7a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005f7c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005f7e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005f80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005f84:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005f86:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005f8a:	e7d0      	b.n	8005f2e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005f8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f90:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005f92:	23eb      	movs	r3, #235	@ 0xeb
 8005f94:	e7f3      	b.n	8005f7e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08005f96 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005f96:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f98:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005f9c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005f9e:	bf18      	it	ne
 8005fa0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005fa4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005fa6:	bf08      	it	eq
 8005fa8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fac:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005fae:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005fb0:	2366      	movs	r3, #102	@ 0x66
 8005fb2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005fb4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005fb6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005fba:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005fbc:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005fbe:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005fc0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fc4:	f004 fab2 	bl	800a52c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005fc8:	2800      	cmp	r0, #0
}
 8005fca:	bf14      	ite	ne
 8005fcc:	f06f 0001 	mvnne.w	r0, #1
 8005fd0:	2000      	moveq	r0, #0
 8005fd2:	b00f      	add	sp, #60	@ 0x3c
 8005fd4:	f85d fb04 	ldr.w	pc, [sp], #4

08005fd8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005fd8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fda:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005fde:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005fe0:	bf18      	it	ne
 8005fe2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005fe6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005fe8:	bf08      	it	eq
 8005fea:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fee:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005ff0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8005ff2:	2399      	movs	r3, #153	@ 0x99
 8005ff4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005ff6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005ff8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005ffc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005ffe:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006000:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006002:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006006:	f004 fa91 	bl	800a52c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800600a:	2800      	cmp	r0, #0
}
 800600c:	bf14      	ite	ne
 800600e:	f06f 0001 	mvnne.w	r0, #1
 8006012:	2000      	moveq	r0, #0
 8006014:	b00f      	add	sp, #60	@ 0x3c
 8006016:	f85d fb04 	ldr.w	pc, [sp], #4

0800601a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800601a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800601c:	6884      	ldr	r4, [r0, #8]
 800601e:	8800      	ldrh	r0, [r0, #0]
 8006020:	46a4      	mov	ip, r4
}
 8006022:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006026:	4760      	bx	ip

08006028 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006028:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800602a:	6844      	ldr	r4, [r0, #4]
 800602c:	8800      	ldrh	r0, [r0, #0]
 800602e:	46a4      	mov	ip, r4
}
 8006030:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006034:	4760      	bx	ip

08006036 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8006036:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8006038:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800603a:	4604      	mov	r4, r0
 800603c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800603e:	4798      	blx	r3
 8006040:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	4798      	blx	r3
 8006046:	1b83      	subs	r3, r0, r6
 8006048:	42ab      	cmp	r3, r5
 800604a:	d3fa      	bcc.n	8006042 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800604c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006050 <OTM8009A_Init>:
{
 8006050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006054:	2300      	movs	r3, #0
 8006056:	f100 0510 	add.w	r5, r0, #16
{
 800605a:	4607      	mov	r7, r0
 800605c:	460e      	mov	r6, r1
 800605e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006060:	4619      	mov	r1, r3
 8006062:	4ade      	ldr	r2, [pc, #888]	@ (80063dc <OTM8009A_Init+0x38c>)
 8006064:	4628      	mov	r0, r5
 8006066:	f000 fb99 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800606a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800606c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800606e:	4adc      	ldr	r2, [pc, #880]	@ (80063e0 <OTM8009A_Init+0x390>)
 8006070:	21ff      	movs	r1, #255	@ 0xff
 8006072:	4628      	mov	r0, r5
 8006074:	f000 fb92 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006078:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800607a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800607c:	4ad9      	ldr	r2, [pc, #868]	@ (80063e4 <OTM8009A_Init+0x394>)
 800607e:	4619      	mov	r1, r3
 8006080:	4628      	mov	r0, r5
 8006082:	f000 fb8b 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006086:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006088:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800608a:	4ad7      	ldr	r2, [pc, #860]	@ (80063e8 <OTM8009A_Init+0x398>)
 800608c:	21ff      	movs	r1, #255	@ 0xff
 800608e:	4628      	mov	r0, r5
 8006090:	f000 fb84 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006094:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006096:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006098:	4ad2      	ldr	r2, [pc, #840]	@ (80063e4 <OTM8009A_Init+0x394>)
 800609a:	4619      	mov	r1, r3
 800609c:	4628      	mov	r0, r5
 800609e:	f000 fb7d 	bl	800679c <otm8009a_write_reg>
 80060a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80060a4:	2300      	movs	r3, #0
 80060a6:	4ad1      	ldr	r2, [pc, #836]	@ (80063ec <OTM8009A_Init+0x39c>)
 80060a8:	21c4      	movs	r1, #196	@ 0xc4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 fb76 	bl	800679c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80060b0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80060b2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff ffbe 	bl	8006036 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80060ba:	2300      	movs	r3, #0
 80060bc:	4acc      	ldr	r2, [pc, #816]	@ (80063f0 <OTM8009A_Init+0x3a0>)
 80060be:	4628      	mov	r0, r5
 80060c0:	4619      	mov	r1, r3
 80060c2:	f000 fb6b 	bl	800679c <otm8009a_write_reg>
 80060c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80060c8:	2300      	movs	r3, #0
 80060ca:	4aca      	ldr	r2, [pc, #808]	@ (80063f4 <OTM8009A_Init+0x3a4>)
 80060cc:	21c4      	movs	r1, #196	@ 0xc4
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 fb64 	bl	800679c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80060d4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80060d6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ffac 	bl	8006036 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80060de:	2300      	movs	r3, #0
 80060e0:	4ac5      	ldr	r2, [pc, #788]	@ (80063f8 <OTM8009A_Init+0x3a8>)
 80060e2:	4628      	mov	r0, r5
 80060e4:	4619      	mov	r1, r3
 80060e6:	f000 fb59 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80060ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80060ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80060ee:	4ac3      	ldr	r2, [pc, #780]	@ (80063fc <OTM8009A_Init+0x3ac>)
 80060f0:	21c5      	movs	r1, #197	@ 0xc5
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 fb52 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80060f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80060fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80060fc:	4ac0      	ldr	r2, [pc, #768]	@ (8006400 <OTM8009A_Init+0x3b0>)
 80060fe:	4619      	mov	r1, r3
 8006100:	4628      	mov	r0, r5
 8006102:	f000 fb4b 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006106:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006108:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800610a:	4abe      	ldr	r2, [pc, #760]	@ (8006404 <OTM8009A_Init+0x3b4>)
 800610c:	21c5      	movs	r1, #197	@ 0xc5
 800610e:	4628      	mov	r0, r5
 8006110:	f000 fb44 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006114:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006116:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006118:	4abb      	ldr	r2, [pc, #748]	@ (8006408 <OTM8009A_Init+0x3b8>)
 800611a:	4619      	mov	r1, r3
 800611c:	4628      	mov	r0, r5
 800611e:	f000 fb3d 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006122:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006124:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006126:	4ab9      	ldr	r2, [pc, #740]	@ (800640c <OTM8009A_Init+0x3bc>)
 8006128:	21c0      	movs	r1, #192	@ 0xc0
 800612a:	4628      	mov	r0, r5
 800612c:	f000 fb36 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006130:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006132:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006134:	4aa9      	ldr	r2, [pc, #676]	@ (80063dc <OTM8009A_Init+0x38c>)
 8006136:	4619      	mov	r1, r3
 8006138:	4628      	mov	r0, r5
 800613a:	f000 fb2f 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800613e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006140:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8006142:	4ab3      	ldr	r2, [pc, #716]	@ (8006410 <OTM8009A_Init+0x3c0>)
 8006144:	21d9      	movs	r1, #217	@ 0xd9
 8006146:	4628      	mov	r0, r5
 8006148:	f000 fb28 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800614c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800614e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006150:	4ab0      	ldr	r2, [pc, #704]	@ (8006414 <OTM8009A_Init+0x3c4>)
 8006152:	4619      	mov	r1, r3
 8006154:	4628      	mov	r0, r5
 8006156:	f000 fb21 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800615a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800615c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800615e:	4aae      	ldr	r2, [pc, #696]	@ (8006418 <OTM8009A_Init+0x3c8>)
 8006160:	21c1      	movs	r1, #193	@ 0xc1
 8006162:	4628      	mov	r0, r5
 8006164:	f000 fb1a 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006168:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800616a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800616c:	4aab      	ldr	r2, [pc, #684]	@ (800641c <OTM8009A_Init+0x3cc>)
 800616e:	4619      	mov	r1, r3
 8006170:	4628      	mov	r0, r5
 8006172:	f000 fb13 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006176:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8006178:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800617a:	4aa9      	ldr	r2, [pc, #676]	@ (8006420 <OTM8009A_Init+0x3d0>)
 800617c:	21c5      	movs	r1, #197	@ 0xc5
 800617e:	4628      	mov	r0, r5
 8006180:	f000 fb0c 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006184:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8006186:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006188:	4aa6      	ldr	r2, [pc, #664]	@ (8006424 <OTM8009A_Init+0x3d4>)
 800618a:	4619      	mov	r1, r3
 800618c:	4628      	mov	r0, r5
 800618e:	f000 fb05 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006192:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006194:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006196:	4a9b      	ldr	r2, [pc, #620]	@ (8006404 <OTM8009A_Init+0x3b4>)
 8006198:	21c5      	movs	r1, #197	@ 0xc5
 800619a:	4628      	mov	r0, r5
 800619c:	f000 fafe 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80061a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80061a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80061a4:	4a8d      	ldr	r2, [pc, #564]	@ (80063dc <OTM8009A_Init+0x38c>)
 80061a6:	4619      	mov	r1, r3
 80061a8:	4628      	mov	r0, r5
 80061aa:	f000 faf7 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80061ae:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80061b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80061b2:	4a9d      	ldr	r2, [pc, #628]	@ (8006428 <OTM8009A_Init+0x3d8>)
 80061b4:	21d8      	movs	r1, #216	@ 0xd8
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 faf0 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80061bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80061be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80061c0:	4a9a      	ldr	r2, [pc, #616]	@ (800642c <OTM8009A_Init+0x3dc>)
 80061c2:	4619      	mov	r1, r3
 80061c4:	4628      	mov	r0, r5
 80061c6:	f000 fae9 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80061ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80061cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80061ce:	4a98      	ldr	r2, [pc, #608]	@ (8006430 <OTM8009A_Init+0x3e0>)
 80061d0:	21c5      	movs	r1, #197	@ 0xc5
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 fae2 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80061d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80061da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80061dc:	4a95      	ldr	r2, [pc, #596]	@ (8006434 <OTM8009A_Init+0x3e4>)
 80061de:	4619      	mov	r1, r3
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 fadb 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80061e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80061e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80061ea:	4a93      	ldr	r2, [pc, #588]	@ (8006438 <OTM8009A_Init+0x3e8>)
 80061ec:	21c0      	movs	r1, #192	@ 0xc0
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fad4 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80061f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80061f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80061f8:	4a90      	ldr	r2, [pc, #576]	@ (800643c <OTM8009A_Init+0x3ec>)
 80061fa:	4619      	mov	r1, r3
 80061fc:	4628      	mov	r0, r5
 80061fe:	f000 facd 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006202:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006204:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006206:	4a8e      	ldr	r2, [pc, #568]	@ (8006440 <OTM8009A_Init+0x3f0>)
 8006208:	21c5      	movs	r1, #197	@ 0xc5
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fac6 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006210:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006212:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006214:	4a8b      	ldr	r2, [pc, #556]	@ (8006444 <OTM8009A_Init+0x3f4>)
 8006216:	4619      	mov	r1, r3
 8006218:	4628      	mov	r0, r5
 800621a:	f000 fabf 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800621e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006220:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006222:	4a89      	ldr	r2, [pc, #548]	@ (8006448 <OTM8009A_Init+0x3f8>)
 8006224:	21c4      	movs	r1, #196	@ 0xc4
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fab8 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800622c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800622e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8006230:	4a78      	ldr	r2, [pc, #480]	@ (8006414 <OTM8009A_Init+0x3c4>)
 8006232:	4619      	mov	r1, r3
 8006234:	4628      	mov	r0, r5
 8006236:	f000 fab1 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800623a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800623c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800623e:	4a83      	ldr	r2, [pc, #524]	@ (800644c <OTM8009A_Init+0x3fc>)
 8006240:	21c1      	movs	r1, #193	@ 0xc1
 8006242:	4628      	mov	r0, r5
 8006244:	f000 faaa 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006248:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800624a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800624c:	4a80      	ldr	r2, [pc, #512]	@ (8006450 <OTM8009A_Init+0x400>)
 800624e:	4619      	mov	r1, r3
 8006250:	4628      	mov	r0, r5
 8006252:	f000 faa3 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006256:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8006258:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800625a:	4a7e      	ldr	r2, [pc, #504]	@ (8006454 <OTM8009A_Init+0x404>)
 800625c:	21b3      	movs	r1, #179	@ 0xb3
 800625e:	4628      	mov	r0, r5
 8006260:	f000 fa9c 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006264:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8006266:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006268:	4a5e      	ldr	r2, [pc, #376]	@ (80063e4 <OTM8009A_Init+0x394>)
 800626a:	4619      	mov	r1, r3
 800626c:	4628      	mov	r0, r5
 800626e:	f000 fa95 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006272:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006274:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006276:	4a78      	ldr	r2, [pc, #480]	@ (8006458 <OTM8009A_Init+0x408>)
 8006278:	21ce      	movs	r1, #206	@ 0xce
 800627a:	4628      	mov	r0, r5
 800627c:	f000 fa8e 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006280:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8006282:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006284:	4a75      	ldr	r2, [pc, #468]	@ (800645c <OTM8009A_Init+0x40c>)
 8006286:	4619      	mov	r1, r3
 8006288:	4628      	mov	r0, r5
 800628a:	f000 fa87 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800628e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006290:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006292:	4a73      	ldr	r2, [pc, #460]	@ (8006460 <OTM8009A_Init+0x410>)
 8006294:	21ce      	movs	r1, #206	@ 0xce
 8006296:	4628      	mov	r0, r5
 8006298:	f000 fa80 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800629c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800629e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80062a0:	4a70      	ldr	r2, [pc, #448]	@ (8006464 <OTM8009A_Init+0x414>)
 80062a2:	4619      	mov	r1, r3
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 fa79 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80062aa:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80062ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80062ae:	4a6e      	ldr	r2, [pc, #440]	@ (8006468 <OTM8009A_Init+0x418>)
 80062b0:	21ce      	movs	r1, #206	@ 0xce
 80062b2:	4628      	mov	r0, r5
 80062b4:	f000 fa72 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80062b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80062ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80062bc:	4a6b      	ldr	r2, [pc, #428]	@ (800646c <OTM8009A_Init+0x41c>)
 80062be:	4619      	mov	r1, r3
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 fa6b 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80062c6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80062c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80062ca:	4a69      	ldr	r2, [pc, #420]	@ (8006470 <OTM8009A_Init+0x420>)
 80062cc:	21cf      	movs	r1, #207	@ 0xcf
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 fa64 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80062d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80062d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80062d8:	4a66      	ldr	r2, [pc, #408]	@ (8006474 <OTM8009A_Init+0x424>)
 80062da:	4619      	mov	r1, r3
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 fa5d 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80062e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80062e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80062e6:	4a64      	ldr	r2, [pc, #400]	@ (8006478 <OTM8009A_Init+0x428>)
 80062e8:	21cf      	movs	r1, #207	@ 0xcf
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 fa56 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80062f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80062f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80062f4:	4a3b      	ldr	r2, [pc, #236]	@ (80063e4 <OTM8009A_Init+0x394>)
 80062f6:	4619      	mov	r1, r3
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 fa4f 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80062fe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006300:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006302:	4a5e      	ldr	r2, [pc, #376]	@ (800647c <OTM8009A_Init+0x42c>)
 8006304:	21cb      	movs	r1, #203	@ 0xcb
 8006306:	4628      	mov	r0, r5
 8006308:	f000 fa48 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800630c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800630e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006310:	4a5b      	ldr	r2, [pc, #364]	@ (8006480 <OTM8009A_Init+0x430>)
 8006312:	4619      	mov	r1, r3
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fa41 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800631a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800631c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800631e:	4a59      	ldr	r2, [pc, #356]	@ (8006484 <OTM8009A_Init+0x434>)
 8006320:	21cb      	movs	r1, #203	@ 0xcb
 8006322:	4628      	mov	r0, r5
 8006324:	f000 fa3a 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006328:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800632a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800632c:	4a4b      	ldr	r2, [pc, #300]	@ (800645c <OTM8009A_Init+0x40c>)
 800632e:	4619      	mov	r1, r3
 8006330:	4628      	mov	r0, r5
 8006332:	f000 fa33 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006336:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006338:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800633a:	4a53      	ldr	r2, [pc, #332]	@ (8006488 <OTM8009A_Init+0x438>)
 800633c:	21cb      	movs	r1, #203	@ 0xcb
 800633e:	4628      	mov	r0, r5
 8006340:	f000 fa2c 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006344:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006346:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006348:	4a46      	ldr	r2, [pc, #280]	@ (8006464 <OTM8009A_Init+0x414>)
 800634a:	4619      	mov	r1, r3
 800634c:	4628      	mov	r0, r5
 800634e:	f000 fa25 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006352:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006354:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006356:	4a4d      	ldr	r2, [pc, #308]	@ (800648c <OTM8009A_Init+0x43c>)
 8006358:	21cb      	movs	r1, #203	@ 0xcb
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fa1e 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006360:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006362:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006364:	4a41      	ldr	r2, [pc, #260]	@ (800646c <OTM8009A_Init+0x41c>)
 8006366:	4619      	mov	r1, r3
 8006368:	4628      	mov	r0, r5
 800636a:	f000 fa17 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800636e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006370:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006372:	4a47      	ldr	r2, [pc, #284]	@ (8006490 <OTM8009A_Init+0x440>)
 8006374:	21cb      	movs	r1, #203	@ 0xcb
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fa10 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800637c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800637e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006380:	4a3c      	ldr	r2, [pc, #240]	@ (8006474 <OTM8009A_Init+0x424>)
 8006382:	4619      	mov	r1, r3
 8006384:	4628      	mov	r0, r5
 8006386:	f000 fa09 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800638a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800638c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800638e:	4a41      	ldr	r2, [pc, #260]	@ (8006494 <OTM8009A_Init+0x444>)
 8006390:	21cb      	movs	r1, #203	@ 0xcb
 8006392:	4628      	mov	r0, r5
 8006394:	f000 fa02 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006398:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800639a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800639c:	4a3e      	ldr	r2, [pc, #248]	@ (8006498 <OTM8009A_Init+0x448>)
 800639e:	4619      	mov	r1, r3
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f9fb 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063a6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80063a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063aa:	4a3c      	ldr	r2, [pc, #240]	@ (800649c <OTM8009A_Init+0x44c>)
 80063ac:	21cb      	movs	r1, #203	@ 0xcb
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 f9f4 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80063b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063b8:	4a39      	ldr	r2, [pc, #228]	@ (80064a0 <OTM8009A_Init+0x450>)
 80063ba:	4619      	mov	r1, r3
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 f9ed 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063c2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80063c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063c6:	4a37      	ldr	r2, [pc, #220]	@ (80064a4 <OTM8009A_Init+0x454>)
 80063c8:	21cb      	movs	r1, #203	@ 0xcb
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f9e6 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80063d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063d4:	4a03      	ldr	r2, [pc, #12]	@ (80063e4 <OTM8009A_Init+0x394>)
 80063d6:	4619      	mov	r1, r3
 80063d8:	4628      	mov	r0, r5
 80063da:	e065      	b.n	80064a8 <OTM8009A_Init+0x458>
 80063dc:	08028909 	.word	0x08028909
 80063e0:	08028905 	.word	0x08028905
 80063e4:	0802890a 	.word	0x0802890a
 80063e8:	08028903 	.word	0x08028903
 80063ec:	0802890b 	.word	0x0802890b
 80063f0:	0802890c 	.word	0x0802890c
 80063f4:	0802890d 	.word	0x0802890d
 80063f8:	0802890e 	.word	0x0802890e
 80063fc:	0802890f 	.word	0x0802890f
 8006400:	08028910 	.word	0x08028910
 8006404:	08028911 	.word	0x08028911
 8006408:	08028912 	.word	0x08028912
 800640c:	08028913 	.word	0x08028913
 8006410:	08028914 	.word	0x08028914
 8006414:	08028917 	.word	0x08028917
 8006418:	08028918 	.word	0x08028918
 800641c:	08028919 	.word	0x08028919
 8006420:	0802891a 	.word	0x0802891a
 8006424:	0802891b 	.word	0x0802891b
 8006428:	08028901 	.word	0x08028901
 800642c:	0802891c 	.word	0x0802891c
 8006430:	0802891d 	.word	0x0802891d
 8006434:	0802891e 	.word	0x0802891e
 8006438:	0802891f 	.word	0x0802891f
 800643c:	08028920 	.word	0x08028920
 8006440:	08028921 	.word	0x08028921
 8006444:	08028915 	.word	0x08028915
 8006448:	08028922 	.word	0x08028922
 800644c:	08028923 	.word	0x08028923
 8006450:	08028924 	.word	0x08028924
 8006454:	080288ff 	.word	0x080288ff
 8006458:	080288f9 	.word	0x080288f9
 800645c:	08028925 	.word	0x08028925
 8006460:	080288eb 	.word	0x080288eb
 8006464:	08028926 	.word	0x08028926
 8006468:	080288dd 	.word	0x080288dd
 800646c:	08028927 	.word	0x08028927
 8006470:	080288d3 	.word	0x080288d3
 8006474:	08028928 	.word	0x08028928
 8006478:	08028935 	.word	0x08028935
 800647c:	080288c9 	.word	0x080288c9
 8006480:	08028929 	.word	0x08028929
 8006484:	080288ba 	.word	0x080288ba
 8006488:	080288ab 	.word	0x080288ab
 800648c:	080288a1 	.word	0x080288a1
 8006490:	08028892 	.word	0x08028892
 8006494:	08028883 	.word	0x08028883
 8006498:	0802892a 	.word	0x0802892a
 800649c:	08028879 	.word	0x08028879
 80064a0:	0802892b 	.word	0x0802892b
 80064a4:	0802886f 	.word	0x0802886f
 80064a8:	f000 f978 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80064ac:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80064ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80064b0:	4a8e      	ldr	r2, [pc, #568]	@ (80066ec <OTM8009A_Init+0x69c>)
 80064b2:	21cc      	movs	r1, #204	@ 0xcc
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 f971 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80064ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80064bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80064be:	4a8c      	ldr	r2, [pc, #560]	@ (80066f0 <OTM8009A_Init+0x6a0>)
 80064c0:	4619      	mov	r1, r3
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 f96a 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80064c8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80064ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80064cc:	4a89      	ldr	r2, [pc, #548]	@ (80066f4 <OTM8009A_Init+0x6a4>)
 80064ce:	21cc      	movs	r1, #204	@ 0xcc
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f963 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80064d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80064d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80064da:	4a87      	ldr	r2, [pc, #540]	@ (80066f8 <OTM8009A_Init+0x6a8>)
 80064dc:	4619      	mov	r1, r3
 80064de:	4628      	mov	r0, r5
 80064e0:	f000 f95c 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80064e4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80064e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80064e8:	4a84      	ldr	r2, [pc, #528]	@ (80066fc <OTM8009A_Init+0x6ac>)
 80064ea:	21cc      	movs	r1, #204	@ 0xcc
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 f955 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80064f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80064f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80064f6:	4a82      	ldr	r2, [pc, #520]	@ (8006700 <OTM8009A_Init+0x6b0>)
 80064f8:	4619      	mov	r1, r3
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f94e 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006500:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006502:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006504:	4a7f      	ldr	r2, [pc, #508]	@ (8006704 <OTM8009A_Init+0x6b4>)
 8006506:	21cc      	movs	r1, #204	@ 0xcc
 8006508:	4628      	mov	r0, r5
 800650a:	f000 f947 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800650e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006510:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006512:	4a7d      	ldr	r2, [pc, #500]	@ (8006708 <OTM8009A_Init+0x6b8>)
 8006514:	4619      	mov	r1, r3
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f940 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800651c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800651e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006520:	4a7a      	ldr	r2, [pc, #488]	@ (800670c <OTM8009A_Init+0x6bc>)
 8006522:	21cc      	movs	r1, #204	@ 0xcc
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f939 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800652a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800652c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800652e:	4a78      	ldr	r2, [pc, #480]	@ (8006710 <OTM8009A_Init+0x6c0>)
 8006530:	4619      	mov	r1, r3
 8006532:	4628      	mov	r0, r5
 8006534:	f000 f932 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006538:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800653a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800653c:	4a75      	ldr	r2, [pc, #468]	@ (8006714 <OTM8009A_Init+0x6c4>)
 800653e:	21cc      	movs	r1, #204	@ 0xcc
 8006540:	4628      	mov	r0, r5
 8006542:	f000 f92b 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006546:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8006548:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800654a:	4a73      	ldr	r2, [pc, #460]	@ (8006718 <OTM8009A_Init+0x6c8>)
 800654c:	4619      	mov	r1, r3
 800654e:	4628      	mov	r0, r5
 8006550:	f000 f924 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006554:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006556:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006558:	4a70      	ldr	r2, [pc, #448]	@ (800671c <OTM8009A_Init+0x6cc>)
 800655a:	21c5      	movs	r1, #197	@ 0xc5
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f91d 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006562:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006564:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006566:	4a6e      	ldr	r2, [pc, #440]	@ (8006720 <OTM8009A_Init+0x6d0>)
 8006568:	4619      	mov	r1, r3
 800656a:	4628      	mov	r0, r5
 800656c:	f000 f916 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006570:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006572:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006574:	4a6b      	ldr	r2, [pc, #428]	@ (8006724 <OTM8009A_Init+0x6d4>)
 8006576:	21f5      	movs	r1, #245	@ 0xf5
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f90f 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800657e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006580:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006582:	4a69      	ldr	r2, [pc, #420]	@ (8006728 <OTM8009A_Init+0x6d8>)
 8006584:	4619      	mov	r1, r3
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f908 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800658c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800658e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006590:	4a66      	ldr	r2, [pc, #408]	@ (800672c <OTM8009A_Init+0x6dc>)
 8006592:	21c6      	movs	r1, #198	@ 0xc6
 8006594:	4628      	mov	r0, r5
 8006596:	f000 f901 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800659a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800659c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800659e:	4a64      	ldr	r2, [pc, #400]	@ (8006730 <OTM8009A_Init+0x6e0>)
 80065a0:	4619      	mov	r1, r3
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f8fa 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80065a8:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80065ac:	4a61      	ldr	r2, [pc, #388]	@ (8006734 <OTM8009A_Init+0x6e4>)
 80065ae:	21ff      	movs	r1, #255	@ 0xff
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f8f3 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80065b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065ba:	4a5d      	ldr	r2, [pc, #372]	@ (8006730 <OTM8009A_Init+0x6e0>)
 80065bc:	4619      	mov	r1, r3
 80065be:	4628      	mov	r0, r5
 80065c0:	f000 f8ec 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065c8:	4a59      	ldr	r2, [pc, #356]	@ (8006730 <OTM8009A_Init+0x6e0>)
 80065ca:	4619      	mov	r1, r3
 80065cc:	4628      	mov	r0, r5
 80065ce:	f000 f8e5 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80065d2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80065d6:	4a58      	ldr	r2, [pc, #352]	@ (8006738 <OTM8009A_Init+0x6e8>)
 80065d8:	21e1      	movs	r1, #225	@ 0xe1
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 f8de 	bl	800679c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80065e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80065e4:	4a52      	ldr	r2, [pc, #328]	@ (8006730 <OTM8009A_Init+0x6e0>)
 80065e6:	4619      	mov	r1, r3
 80065e8:	4628      	mov	r0, r5
 80065ea:	f000 f8d7 	bl	800679c <otm8009a_write_reg>
 80065ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80065f0:	2310      	movs	r3, #16
 80065f2:	4a52      	ldr	r2, [pc, #328]	@ (800673c <OTM8009A_Init+0x6ec>)
 80065f4:	21e2      	movs	r1, #226	@ 0xe2
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 f8d0 	bl	800679c <otm8009a_write_reg>
 80065fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80065fe:	2300      	movs	r3, #0
 8006600:	4a4f      	ldr	r2, [pc, #316]	@ (8006740 <OTM8009A_Init+0x6f0>)
 8006602:	2111      	movs	r1, #17
 8006604:	4628      	mov	r0, r5
 8006606:	f000 f8c9 	bl	800679c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800660a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800660c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800660e:	4638      	mov	r0, r7
 8006610:	f7ff fd11 	bl	8006036 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8006614:	4f4b      	ldr	r7, [pc, #300]	@ (8006744 <OTM8009A_Init+0x6f4>)
 8006616:	2e00      	cmp	r6, #0
 8006618:	d061      	beq.n	80066de <OTM8009A_Init+0x68e>
 800661a:	2e02      	cmp	r6, #2
 800661c:	d107      	bne.n	800662e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800661e:	2300      	movs	r3, #0
 8006620:	4a49      	ldr	r2, [pc, #292]	@ (8006748 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006622:	213a      	movs	r1, #58	@ 0x3a
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f8b9 	bl	800679c <otm8009a_write_reg>
 800662a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800662c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800662e:	f1b8 0f01 	cmp.w	r8, #1
 8006632:	d157      	bne.n	80066e4 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006634:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006636:	f10d 0207 	add.w	r2, sp, #7
 800663a:	2136      	movs	r1, #54	@ 0x36
 800663c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800663e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006642:	2300      	movs	r3, #0
 8006644:	f000 f8aa 	bl	800679c <otm8009a_write_reg>
 8006648:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800664a:	2304      	movs	r3, #4
 800664c:	4a3f      	ldr	r2, [pc, #252]	@ (800674c <OTM8009A_Init+0x6fc>)
 800664e:	212a      	movs	r1, #42	@ 0x2a
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f8a3 	bl	800679c <otm8009a_write_reg>
 8006656:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006658:	2304      	movs	r3, #4
 800665a:	4a3d      	ldr	r2, [pc, #244]	@ (8006750 <OTM8009A_Init+0x700>)
 800665c:	212b      	movs	r1, #43	@ 0x2b
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f89c 	bl	800679c <otm8009a_write_reg>
 8006664:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006666:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800666a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800666c:	2300      	movs	r3, #0
 800666e:	4a39      	ldr	r2, [pc, #228]	@ (8006754 <OTM8009A_Init+0x704>)
 8006670:	2151      	movs	r1, #81	@ 0x51
 8006672:	4628      	mov	r0, r5
 8006674:	f000 f892 	bl	800679c <otm8009a_write_reg>
 8006678:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800667a:	4633      	mov	r3, r6
 800667c:	4a36      	ldr	r2, [pc, #216]	@ (8006758 <OTM8009A_Init+0x708>)
 800667e:	2153      	movs	r1, #83	@ 0x53
 8006680:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006682:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006684:	f000 f88a 	bl	800679c <otm8009a_write_reg>
 8006688:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800668a:	4633      	mov	r3, r6
 800668c:	4a33      	ldr	r2, [pc, #204]	@ (800675c <OTM8009A_Init+0x70c>)
 800668e:	2155      	movs	r1, #85	@ 0x55
 8006690:	4628      	mov	r0, r5
 8006692:	f000 f883 	bl	800679c <otm8009a_write_reg>
 8006696:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006698:	4633      	mov	r3, r6
 800669a:	4a31      	ldr	r2, [pc, #196]	@ (8006760 <OTM8009A_Init+0x710>)
 800669c:	215e      	movs	r1, #94	@ 0x5e
 800669e:	4628      	mov	r0, r5
 80066a0:	f000 f87c 	bl	800679c <otm8009a_write_reg>
 80066a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80066a6:	4633      	mov	r3, r6
 80066a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006764 <OTM8009A_Init+0x714>)
 80066aa:	2129      	movs	r1, #41	@ 0x29
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 f875 	bl	800679c <otm8009a_write_reg>
 80066b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80066b4:	4633      	mov	r3, r6
 80066b6:	4631      	mov	r1, r6
 80066b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006730 <OTM8009A_Init+0x6e0>)
 80066ba:	4628      	mov	r0, r5
 80066bc:	f000 f86e 	bl	800679c <otm8009a_write_reg>
 80066c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80066c2:	4633      	mov	r3, r6
 80066c4:	4a28      	ldr	r2, [pc, #160]	@ (8006768 <OTM8009A_Init+0x718>)
 80066c6:	212c      	movs	r1, #44	@ 0x2c
 80066c8:	4628      	mov	r0, r5
 80066ca:	f000 f867 	bl	800679c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80066ce:	42c4      	cmn	r4, r0
}
 80066d0:	bf14      	ite	ne
 80066d2:	f04f 30ff 	movne.w	r0, #4294967295
 80066d6:	4630      	moveq	r0, r6
 80066d8:	b002      	add	sp, #8
 80066da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80066de:	4633      	mov	r3, r6
 80066e0:	4a22      	ldr	r2, [pc, #136]	@ (800676c <OTM8009A_Init+0x71c>)
 80066e2:	e79e      	b.n	8006622 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80066e4:	2300      	movs	r3, #0
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	e7bf      	b.n	800666a <OTM8009A_Init+0x61a>
 80066ea:	bf00      	nop
 80066ec:	08028865 	.word	0x08028865
 80066f0:	08028929 	.word	0x08028929
 80066f4:	08028856 	.word	0x08028856
 80066f8:	08028925 	.word	0x08028925
 80066fc:	08028847 	.word	0x08028847
 8006700:	08028926 	.word	0x08028926
 8006704:	0802883d 	.word	0x0802883d
 8006708:	08028927 	.word	0x08028927
 800670c:	0802882e 	.word	0x0802882e
 8006710:	08028928 	.word	0x08028928
 8006714:	0802881f 	.word	0x0802881f
 8006718:	08028915 	.word	0x08028915
 800671c:	08028936 	.word	0x08028936
 8006720:	08028937 	.word	0x08028937
 8006724:	08028938 	.word	0x08028938
 8006728:	08028939 	.word	0x08028939
 800672c:	0802893a 	.word	0x0802893a
 8006730:	08028909 	.word	0x08028909
 8006734:	0802881c 	.word	0x0802881c
 8006738:	0802880c 	.word	0x0802880c
 800673c:	080287fc 	.word	0x080287fc
 8006740:	0802892c 	.word	0x0802892c
 8006744:	2400b938 	.word	0x2400b938
 8006748:	0802892d 	.word	0x0802892d
 800674c:	0802893f 	.word	0x0802893f
 8006750:	0802893b 	.word	0x0802893b
 8006754:	0802892f 	.word	0x0802892f
 8006758:	08028930 	.word	0x08028930
 800675c:	08028931 	.word	0x08028931
 8006760:	08028932 	.word	0x08028932
 8006764:	08028933 	.word	0x08028933
 8006768:	08028934 	.word	0x08028934
 800676c:	0802892e 	.word	0x0802892e

08006770 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006770:	b160      	cbz	r0, 800678c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006772:	684b      	ldr	r3, [r1, #4]
 8006774:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006776:	688b      	ldr	r3, [r1, #8]
 8006778:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800677a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800677c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800677e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006780:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <OTM8009A_RegisterBusIO+0x24>)
 8006782:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006784:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <OTM8009A_RegisterBusIO+0x28>)
 8006786:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8006788:	2000      	movs	r0, #0
 800678a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	0800601b 	.word	0x0800601b
 8006798:	08006029 	.word	0x08006029

0800679c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800679c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800679e:	6804      	ldr	r4, [r0, #0]
 80067a0:	6880      	ldr	r0, [r0, #8]
 80067a2:	46a4      	mov	ip, r4
}
 80067a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80067a8:	4760      	bx	ip
	...

080067ac <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80067ac:	4a10      	ldr	r2, [pc, #64]	@ (80067f0 <BSP_I2C4_DeInit+0x44>)
{
 80067ae:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80067b0:	6813      	ldr	r3, [r2, #0]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80067b6:	b10b      	cbz	r3, 80067bc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80067b8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80067ba:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80067bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80067c0:	480c      	ldr	r0, [pc, #48]	@ (80067f4 <BSP_I2C4_DeInit+0x48>)
 80067c2:	f001 fe3f 	bl	8008444 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80067c6:	480b      	ldr	r0, [pc, #44]	@ (80067f4 <BSP_I2C4_DeInit+0x48>)
 80067c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80067cc:	f001 fe3a 	bl	8008444 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80067d0:	4a09      	ldr	r2, [pc, #36]	@ (80067f8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80067d2:	480a      	ldr	r0, [pc, #40]	@ (80067fc <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80067d4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80067d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80067e0:	f002 f880 	bl	80088e4 <HAL_I2C_DeInit>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d0e7      	beq.n	80067b8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80067e8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80067ec:	e7e5      	b.n	80067ba <BSP_I2C4_DeInit+0xe>
 80067ee:	bf00      	nop
 80067f0:	2400c39c 	.word	0x2400c39c
 80067f4:	58020c00 	.word	0x58020c00
 80067f8:	58024400 	.word	0x58024400
 80067fc:	2400b944 	.word	0x2400b944

08006800 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006800:	2300      	movs	r3, #0
 8006802:	2201      	movs	r2, #1
{
 8006804:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8006806:	6041      	str	r1, [r0, #4]
{
 8006808:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800680a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800680c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8006810:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006814:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006818:	f002 f80e 	bl	8008838 <HAL_I2C_Init>
 800681c:	4601      	mov	r1, r0
 800681e:	b108      	cbz	r0, 8006824 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8006820:	2001      	movs	r0, #1
}
 8006822:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006824:	4620      	mov	r0, r4
 8006826:	f002 fa34 	bl	8008c92 <HAL_I2CEx_ConfigAnalogFilter>
 800682a:	4601      	mov	r1, r0
 800682c:	2800      	cmp	r0, #0
 800682e:	d1f7      	bne.n	8006820 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8006830:	4620      	mov	r0, r4
 8006832:	f002 fa54 	bl	8008cde <HAL_I2CEx_ConfigDigitalFilter>
 8006836:	3800      	subs	r0, #0
 8006838:	bf18      	it	ne
 800683a:	2001      	movne	r0, #1
 800683c:	e7f1      	b.n	8006822 <MX_I2C4_Init+0x22>
	...

08006840 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8006840:	4ba2      	ldr	r3, [pc, #648]	@ (8006acc <BSP_I2C4_Init+0x28c>)
 8006842:	48a3      	ldr	r0, [pc, #652]	@ (8006ad0 <BSP_I2C4_Init+0x290>)
{
 8006844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006848:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 800684a:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 800684c:	4ba1      	ldr	r3, [pc, #644]	@ (8006ad4 <BSP_I2C4_Init+0x294>)
 800684e:	681c      	ldr	r4, [r3, #0]
 8006850:	b11c      	cbz	r4, 800685a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006852:	2000      	movs	r0, #0
}
 8006854:	b013      	add	sp, #76	@ 0x4c
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800685e:	f002 fa13 	bl	8008c88 <HAL_I2C_GetState>
 8006862:	2800      	cmp	r0, #0
 8006864:	d1f5      	bne.n	8006852 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006866:	4d9c      	ldr	r5, [pc, #624]	@ (8006ad8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006868:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800686c:	2702      	movs	r7, #2
 800686e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006870:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006874:	a90d      	add	r1, sp, #52	@ 0x34
 8006876:	4899      	ldr	r0, [pc, #612]	@ (8006adc <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006878:	f043 0308 	orr.w	r3, r3, #8
 800687c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006880:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	930a      	str	r3, [sp, #40]	@ 0x28
 800688a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800688c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006890:	f043 0308 	orr.w	r3, r3, #8
 8006894:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006898:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800689c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80068a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80068aa:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80068ae:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80068b2:	f001 fcdf 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80068b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80068ba:	a90d      	add	r1, sp, #52	@ 0x34
 80068bc:	4887      	ldr	r0, [pc, #540]	@ (8006adc <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80068be:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80068c0:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80068c4:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80068c8:	f001 fcd4 	bl	8008274 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80068cc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80068d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80068d8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80068dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80068e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80068e4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80068e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ec:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80068f0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80068f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80068fc:	f004 fc9a 	bl	800b234 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006900:	2800      	cmp	r0, #0
 8006902:	d06d      	beq.n	80069e0 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006904:	4b76      	ldr	r3, [pc, #472]	@ (8006ae0 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 8006906:	4622      	mov	r2, r4
 8006908:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 800690a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800690e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006912:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 8006ae8 <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006916:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800691a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800691e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8006922:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006924:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006928:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800692c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8006930:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8006934:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006936:	4b6b      	ldr	r3, [pc, #428]	@ (8006ae4 <BSP_I2C4_Init+0x2a4>)
 8006938:	681b      	ldr	r3, [r3, #0]
{
 800693a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800693c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8006940:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8006944:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006948:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800694c:	d35b      	bcc.n	8006a06 <BSP_I2C4_Init+0x1c6>
 800694e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006950:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006952:	9d00      	ldr	r5, [sp, #0]
 8006954:	42bd      	cmp	r5, r7
 8006956:	d850      	bhi.n	80069fa <BSP_I2C4_Init+0x1ba>
 8006958:	42be      	cmp	r6, r7
 800695a:	d34e      	bcc.n	80069fa <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 800695c:	4591      	cmp	r9, r2
 800695e:	d04c      	beq.n	80069fa <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006960:	2514      	movs	r5, #20
 8006962:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8006966:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006968:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800696a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800696e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006970:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006974:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006978:	d93c      	bls.n	80069f4 <BSP_I2C4_Init+0x1b4>
 800697a:	4a5a      	ldr	r2, [pc, #360]	@ (8006ae4 <BSP_I2C4_Init+0x2a4>)
 800697c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800697e:	4b59      	ldr	r3, [pc, #356]	@ (8006ae4 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006980:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8006984:	4958      	ldr	r1, [pc, #352]	@ (8006ae8 <BSP_I2C4_Init+0x2a8>)
 8006986:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800698c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	f04f 33ff 	mov.w	r3, #4294967295
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 80069a2:	3301      	adds	r3, #1
 80069a4:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80069a6:	9b06      	ldr	r3, [sp, #24]
 80069a8:	429f      	cmp	r7, r3
 80069aa:	d138      	bne.n	8006a1e <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80069b0:	d816      	bhi.n	80069e0 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80069b2:	2114      	movs	r1, #20
 80069b4:	9a00      	ldr	r2, [sp, #0]
 80069b6:	4b4c      	ldr	r3, [pc, #304]	@ (8006ae8 <BSP_I2C4_Init+0x2a8>)
 80069b8:	434a      	muls	r2, r1
 80069ba:	1899      	adds	r1, r3, r2
 80069bc:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80069be:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80069c0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80069c4:	684b      	ldr	r3, [r1, #4]
 80069c6:	051b      	lsls	r3, r3, #20
 80069c8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80069cc:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80069ce:	688b      	ldr	r3, [r1, #8]
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80069d6:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80069d8:	68cb      	ldr	r3, [r1, #12]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80069de:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80069e0:	4621      	mov	r1, r4
 80069e2:	483b      	ldr	r0, [pc, #236]	@ (8006ad0 <BSP_I2C4_Init+0x290>)
 80069e4:	f7ff ff0c 	bl	8006800 <MX_I2C4_Init>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	f43f af32 	beq.w	8006852 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80069ee:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80069f2:	e72f      	b.n	8006854 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 80069f4:	4691      	mov	r9, r2
 80069f6:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80069fa:	f10e 0e01 	add.w	lr, lr, #1
 80069fe:	440f      	add	r7, r1
 8006a00:	f1be 0f10 	cmp.w	lr, #16
 8006a04:	d1a5      	bne.n	8006952 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006a06:	f1bc 0f10 	cmp.w	ip, #16
 8006a0a:	4488      	add	r8, r1
 8006a0c:	d198      	bne.n	8006940 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006a0e:	3201      	adds	r2, #1
 8006a10:	4401      	add	r1, r0
 8006a12:	2a10      	cmp	r2, #16
 8006a14:	d191      	bne.n	800693a <BSP_I2C4_Init+0xfa>
 8006a16:	f1ba 0f00 	cmp.w	sl, #0
 8006a1a:	d1ae      	bne.n	800697a <BSP_I2C4_Init+0x13a>
 8006a1c:	e7af      	b.n	800697e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006a1e:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006a20:	f04f 0c00 	mov.w	ip, #0
 8006a24:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006a26:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006a2a:	441d      	add	r5, r3
 8006a2c:	eb03 060b 	add.w	r6, r3, fp
 8006a30:	9503      	str	r5, [sp, #12]
 8006a32:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 8006a36:	9d02      	ldr	r5, [sp, #8]
 8006a38:	9608      	str	r6, [sp, #32]
 8006a3a:	1aed      	subs	r5, r5, r3
 8006a3c:	006d      	lsls	r5, r5, #1
 8006a3e:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006a40:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006a42:	f240 5214 	movw	r2, #1300	@ 0x514
 8006a46:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006a4a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006a4e:	4295      	cmp	r5, r2
 8006a50:	d930      	bls.n	8006ab4 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006a52:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006a56:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8006a5a:	d22b      	bcs.n	8006ab4 <BSP_I2C4_Init+0x274>
 8006a5c:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006a5e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006a62:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a66:	442e      	add	r6, r5
 8006a68:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006a6c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8006a70:	f240 4212 	movw	r2, #1042	@ 0x412
 8006a74:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006a78:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006a7c:	4592      	cmp	sl, r2
 8006a7e:	d812      	bhi.n	8006aa6 <BSP_I2C4_Init+0x266>
 8006a80:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8006a84:	d30f      	bcc.n	8006aa6 <BSP_I2C4_Init+0x266>
 8006a86:	4540      	cmp	r0, r8
 8006a88:	d20d      	bcs.n	8006aa6 <BSP_I2C4_Init+0x266>
              error = -error;
 8006a8a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8006a8e:	bf28      	it	cs
 8006a90:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8006a92:	9a04      	ldr	r2, [sp, #16]
 8006a94:	4592      	cmp	sl, r2
 8006a96:	d206      	bcs.n	8006aa6 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8006a98:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 8006a9a:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 8006a9e:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006aa0:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8006aa2:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8006aa4:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006aa6:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8006aaa:	4498      	add	r8, r3
 8006aac:	441e      	add	r6, r3
 8006aae:	eba9 0903 	sub.w	r9, r9, r3
 8006ab2:	d1db      	bne.n	8006a6c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006ab4:	9a01      	ldr	r2, [sp, #4]
 8006ab6:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8006aba:	441d      	add	r5, r3
 8006abc:	eba2 0203 	sub.w	r2, r2, r3
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	d1be      	bne.n	8006a42 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006ac4:	3701      	adds	r7, #1
 8006ac6:	3114      	adds	r1, #20
 8006ac8:	e76d      	b.n	80069a6 <BSP_I2C4_Init+0x166>
 8006aca:	bf00      	nop
 8006acc:	58001c00 	.word	0x58001c00
 8006ad0:	2400b944 	.word	0x2400b944
 8006ad4:	2400c39c 	.word	0x2400c39c
 8006ad8:	58024400 	.word	0x58024400
 8006adc:	58020c00 	.word	0x58020c00
 8006ae0:	3b9aca00 	.word	0x3b9aca00
 8006ae4:	2400b998 	.word	0x2400b998
 8006ae8:	2400b99c 	.word	0x2400b99c

08006aec <BSP_I2C4_WriteReg>:
{
 8006aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006aee:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006af2:	9200      	str	r2, [sp, #0]
 8006af4:	460a      	mov	r2, r1
 8006af6:	4601      	mov	r1, r0
 8006af8:	4808      	ldr	r0, [pc, #32]	@ (8006b1c <BSP_I2C4_WriteReg+0x30>)
 8006afa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006afe:	2301      	movs	r3, #1
 8006b00:	f001 ff0a 	bl	8008918 <HAL_I2C_Mem_Write>
 8006b04:	b140      	cbz	r0, 8006b18 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006b06:	4805      	ldr	r0, [pc, #20]	@ (8006b1c <BSP_I2C4_WriteReg+0x30>)
 8006b08:	f002 f8c1 	bl	8008c8e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006b0c:	2804      	cmp	r0, #4
 8006b0e:	bf14      	ite	ne
 8006b10:	f06f 0003 	mvnne.w	r0, #3
 8006b14:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006b18:	b004      	add	sp, #16
 8006b1a:	bd10      	pop	{r4, pc}
 8006b1c:	2400b944 	.word	0x2400b944

08006b20 <BSP_I2C4_ReadReg>:
{
 8006b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006b22:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006b26:	9200      	str	r2, [sp, #0]
 8006b28:	460a      	mov	r2, r1
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4808      	ldr	r0, [pc, #32]	@ (8006b50 <BSP_I2C4_ReadReg+0x30>)
 8006b2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b32:	2301      	movs	r3, #1
 8006b34:	f001 ffca 	bl	8008acc <HAL_I2C_Mem_Read>
 8006b38:	b140      	cbz	r0, 8006b4c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006b3a:	4805      	ldr	r0, [pc, #20]	@ (8006b50 <BSP_I2C4_ReadReg+0x30>)
 8006b3c:	f002 f8a7 	bl	8008c8e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006b40:	2804      	cmp	r0, #4
 8006b42:	bf14      	ite	ne
 8006b44:	f06f 0003 	mvnne.w	r0, #3
 8006b48:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006b4c:	b004      	add	sp, #16
 8006b4e:	bd10      	pop	{r4, pc}
 8006b50:	2400b944 	.word	0x2400b944

08006b54 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006b54:	f000 bd08 	b.w	8007568 <HAL_GetTick>

08006b58 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8006b58:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006b5a:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8006b5e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006b60:	684a      	ldr	r2, [r1, #4]
 8006b62:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006b64:	2201      	movs	r2, #1
 8006b66:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8006b68:	688a      	ldr	r2, [r1, #8]
 8006b6a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8006b6c:	680a      	ldr	r2, [r1, #0]
 8006b6e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006b70:	2200      	movs	r2, #0
 8006b72:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8006b76:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8006b78:	68ca      	ldr	r2, [r1, #12]
 8006b7a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8006b7c:	f003 bc8a 	b.w	800a494 <HAL_QSPI_Init>
 8006b80:	52005000 	.word	0x52005000

08006b84 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006b84:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006b86:	b988      	cbnz	r0, 8006bac <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006b88:	4c0a      	ldr	r4, [pc, #40]	@ (8006bb4 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8006b8a:	480b      	ldr	r0, [pc, #44]	@ (8006bb8 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006b8c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006b8e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006b90:	b94b      	cbnz	r3, 8006ba6 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006b92:	f7ff f9ba 	bl	8005f0a <MT25TL01G_EnableMemoryMappedModeSTR>
 8006b96:	b110      	cbz	r0, 8006b9e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b98:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8006b9c:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006b9e:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8006ba0:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006ba2:	7023      	strb	r3, [r4, #0]
 8006ba4:	e7fa      	b.n	8006b9c <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006ba6:	f7ff f966 	bl	8005e76 <MT25TL01G_EnableMemoryMappedModeDTR>
 8006baa:	e7f4      	b.n	8006b96 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8006bac:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006bb0:	e7f4      	b.n	8006b9c <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8006bb2:	bf00      	nop
 8006bb4:	2400c3a0 	.word	0x2400c3a0
 8006bb8:	24009a9c 	.word	0x24009a9c

08006bbc <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006bc2:	bb30      	cbnz	r0, 8006c12 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006bc4:	4d17      	ldr	r5, [pc, #92]	@ (8006c24 <BSP_QSPI_ConfigFlash+0x68>)
 8006bc6:	782b      	ldrb	r3, [r5, #0]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d025      	beq.n	8006c18 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006bcc:	fab2 f382 	clz	r3, r2
 8006bd0:	4e15      	ldr	r6, [pc, #84]	@ (8006c28 <BSP_QSPI_ConfigFlash+0x6c>)
 8006bd2:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006bd4:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006bda:	f003 fc5b 	bl	800a494 <HAL_QSPI_Init>
 8006bde:	b9f0      	cbnz	r0, 8006c1e <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006be0:	786b      	ldrb	r3, [r5, #1]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d10f      	bne.n	8006c06 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8006be6:	2c03      	cmp	r4, #3
 8006be8:	d105      	bne.n	8006bf6 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006bea:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006bec:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8006bee:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006bf0:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006bf2:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8006bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7ff f921 	bl	8005e3e <MT25TL01G_ExitQPIMode>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d0f4      	beq.n	8006bea <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c00:	f06f 0004 	mvn.w	r0, #4
 8006c04:	e7f6      	b.n	8006bf4 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8006c06:	2c03      	cmp	r4, #3
 8006c08:	d1ef      	bne.n	8006bea <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff f8fb 	bl	8005e06 <MT25TL01G_EnterQPIMode>
 8006c10:	e7f4      	b.n	8006bfc <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8006c12:	f06f 0001 	mvn.w	r0, #1
 8006c16:	e7ed      	b.n	8006bf4 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8006c18:	f06f 0019 	mvn.w	r0, #25
 8006c1c:	e7ea      	b.n	8006bf4 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006c1e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006c22:	e7e7      	b.n	8006bf4 <BSP_QSPI_ConfigFlash+0x38>
 8006c24:	2400c3a0 	.word	0x2400c3a0
 8006c28:	24009a9c 	.word	0x24009a9c

08006c2c <BSP_QSPI_Init>:
{
 8006c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006c34:	2800      	cmp	r0, #0
 8006c36:	f040 81ac 	bne.w	8006f92 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8006c3a:	4d03      	ldr	r5, [pc, #12]	@ (8006c48 <BSP_QSPI_Init+0x1c>)
 8006c3c:	782f      	ldrb	r7, [r5, #0]
 8006c3e:	b12f      	cbz	r7, 8006c4c <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8006c40:	2000      	movs	r0, #0
}
 8006c42:	b024      	add	sp, #144	@ 0x90
 8006c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c48:	2400c3a0 	.word	0x2400c3a0
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006c4c:	4bc3      	ldr	r3, [pc, #780]	@ (8006f5c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006c4e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006c52:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006c54:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8006c56:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8006c5a:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006c5e:	48c0      	ldr	r0, [pc, #768]	@ (8006f60 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006c60:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8006c64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c68:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006c6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006c70:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006c74:	9201      	str	r2, [sp, #4]
 8006c76:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8006c78:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8006c80:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006c82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006c86:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8006c88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006c8c:	f042 0202 	orr.w	r2, r2, #2
 8006c90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006c94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006c98:	f002 0202 	and.w	r2, r2, #2
 8006c9c:	9202      	str	r2, [sp, #8]
 8006c9e:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006ca0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ca8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006cac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006cb0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006cb4:	9203      	str	r2, [sp, #12]
 8006cb6:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8006cb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006cbc:	f042 0208 	orr.w	r2, r2, #8
 8006cc0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006cc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006cc8:	f002 0208 	and.w	r2, r2, #8
 8006ccc:	9204      	str	r2, [sp, #16]
 8006cce:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8006cd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006cd4:	f042 0220 	orr.w	r2, r2, #32
 8006cd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006cdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ce0:	f002 0220 	and.w	r2, r2, #32
 8006ce4:	9205      	str	r2, [sp, #20]
 8006ce6:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8006ce8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006cec:	f042 0220 	orr.w	r2, r2, #32
 8006cf0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006cf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006cf8:	f002 0220 	and.w	r2, r2, #32
 8006cfc:	9206      	str	r2, [sp, #24]
 8006cfe:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8006d00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d04:	f042 0220 	orr.w	r2, r2, #32
 8006d08:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006d0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d10:	f002 0220 	and.w	r2, r2, #32
 8006d14:	9207      	str	r2, [sp, #28]
 8006d16:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8006d18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d20:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d28:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006d2c:	9208      	str	r2, [sp, #32]
 8006d2e:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8006d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006d3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d40:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006d44:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8006d48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d50:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006d54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d58:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006d5c:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006d60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d68:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d70:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006d74:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006d76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8006d78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d80:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006d90:	2302      	movs	r3, #2
 8006d92:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d96:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006d98:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006d9a:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006d9e:	f001 fa69 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006da2:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006da4:	a916      	add	r1, sp, #88	@ 0x58
 8006da6:	486f      	ldr	r0, [pc, #444]	@ (8006f64 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006da8:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8006daa:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006dae:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006db2:	f001 fa5f 	bl	8008274 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006db6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006dba:	a916      	add	r1, sp, #88	@ 0x58
 8006dbc:	486a      	ldr	r0, [pc, #424]	@ (8006f68 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006dbe:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006dc0:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006dc2:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006dc4:	f001 fa56 	bl	8008274 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006dc8:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8006dca:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006dce:	4867      	ldr	r0, [pc, #412]	@ (8006f6c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006dd0:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006dd4:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006dd6:	f001 fa4d 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8006dda:	a916      	add	r1, sp, #88	@ 0x58
 8006ddc:	4864      	ldr	r0, [pc, #400]	@ (8006f70 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006dde:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006de2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8006de6:	f001 fa45 	bl	8008274 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006dea:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006dec:	a916      	add	r1, sp, #88	@ 0x58
 8006dee:	485f      	ldr	r0, [pc, #380]	@ (8006f6c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006df0:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006df2:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006df4:	f001 fa3e 	bl	8008274 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006df8:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006dfa:	a916      	add	r1, sp, #88	@ 0x58
 8006dfc:	485c      	ldr	r0, [pc, #368]	@ (8006f70 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006dfe:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006e00:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006e02:	f001 fa37 	bl	8008274 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006e06:	a916      	add	r1, sp, #88	@ 0x58
 8006e08:	4856      	ldr	r0, [pc, #344]	@ (8006f64 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8006e0a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006e0e:	f001 fa31 	bl	8008274 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006e12:	a916      	add	r1, sp, #88	@ 0x58
 8006e14:	4856      	ldr	r0, [pc, #344]	@ (8006f70 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8006e16:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006e1a:	f001 fa2b 	bl	8008274 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006e1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006e22:	a916      	add	r1, sp, #88	@ 0x58
 8006e24:	484f      	ldr	r0, [pc, #316]	@ (8006f64 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006e26:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006e28:	f001 fa24 	bl	8008274 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006e2c:	463a      	mov	r2, r7
 8006e2e:	210f      	movs	r1, #15
 8006e30:	205c      	movs	r0, #92	@ 0x5c
 8006e32:	f000 fbc9 	bl	80075c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8006e36:	205c      	movs	r0, #92	@ 0x5c
 8006e38:	f000 fbf8 	bl	800762c <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8006e3c:	a811      	add	r0, sp, #68	@ 0x44
 8006e3e:	f7fe ff36 	bl	8005cae <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006e42:	7863      	ldrb	r3, [r4, #1]
 8006e44:	4a4b      	ldr	r2, [pc, #300]	@ (8006f74 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8006e46:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006e4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006e4e:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e52:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006e56:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8006e5a:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006e5e:	a90d      	add	r1, sp, #52	@ 0x34
 8006e60:	4845      	ldr	r0, [pc, #276]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006e62:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006e64:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006e66:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006e68:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006e6c:	f7ff fe74 	bl	8006b58 <MX_QSPI_Init>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	f040 8091 	bne.w	8006f98 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006e76:	2103      	movs	r1, #3
 8006e78:	483f      	ldr	r0, [pc, #252]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006e7a:	f7ff f88c 	bl	8005f96 <MT25TL01G_ResetEnable>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f040 8084 	bne.w	8006f8c <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006e84:	2103      	movs	r1, #3
 8006e86:	483c      	ldr	r0, [pc, #240]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006e88:	f7ff f8a6 	bl	8005fd8 <MT25TL01G_ResetMemory>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d17d      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006e90:	7869      	ldrb	r1, [r5, #1]
 8006e92:	4839      	ldr	r0, [pc, #228]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006e94:	f7fe ff1c 	bl	8005cd0 <MT25TL01G_AutoPollingMemReady>
 8006e98:	4601      	mov	r1, r0
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d176      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8006e9e:	4836      	ldr	r0, [pc, #216]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006ea0:	f7ff f879 	bl	8005f96 <MT25TL01G_ResetEnable>
 8006ea4:	4601      	mov	r1, r0
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	d170      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8006eaa:	4833      	ldr	r0, [pc, #204]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006eac:	f7ff f894 	bl	8005fd8 <MT25TL01G_ResetMemory>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d16a      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006eb6:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8006eb8:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006eba:	482f      	ldr	r0, [pc, #188]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006ebc:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006ebe:	f7fe ff07 	bl	8005cd0 <MT25TL01G_AutoPollingMemReady>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d162      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006ec6:	7869      	ldrb	r1, [r5, #1]
 8006ec8:	482b      	ldr	r0, [pc, #172]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006eca:	f7fe ff70 	bl	8005dae <MT25TL01G_Enter4BytesAddressMode>
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d15c      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006ed2:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8006ed6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8006eda:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006edc:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006ee0:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006ee2:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ee4:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006ee6:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006ee8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8006eec:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8006eee:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006ef0:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006ef4:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006ef8:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006efc:	481e      	ldr	r0, [pc, #120]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006efe:	f003 fb15 	bl	800a52c <HAL_QSPI_Command>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d142      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0a:	f10d 0102 	add.w	r1, sp, #2
 8006f0e:	481a      	ldr	r0, [pc, #104]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006f10:	f003 fbac 	bl	800a66c <HAL_QSPI_Receive>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d139      	bne.n	8006f8c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006f18:	7869      	ldrb	r1, [r5, #1]
 8006f1a:	4817      	ldr	r0, [pc, #92]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006f1c:	f7fe ff03 	bl	8005d26 <MT25TL01G_WriteEnable>
 8006f20:	bba0      	cbnz	r0, 8006f8c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8006f22:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f28:	a916      	add	r1, sp, #88	@ 0x58
 8006f2a:	4813      	ldr	r0, [pc, #76]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8006f2c:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8006f2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006f32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f36:	051b      	lsls	r3, r3, #20
 8006f38:	0d1b      	lsrs	r3, r3, #20
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f42:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f46:	f003 faf1 	bl	800a52c <HAL_QSPI_Command>
 8006f4a:	b9f8      	cbnz	r0, 8006f8c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f50:	f10d 0102 	add.w	r1, sp, #2
 8006f54:	4808      	ldr	r0, [pc, #32]	@ (8006f78 <BSP_QSPI_Init+0x34c>)
 8006f56:	f003 fb2d 	bl	800a5b4 <HAL_QSPI_Transmit>
 8006f5a:	e00f      	b.n	8006f7c <BSP_QSPI_Init+0x350>
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	58020400 	.word	0x58020400
 8006f64:	58021800 	.word	0x58021800
 8006f68:	58020c00 	.word	0x58020c00
 8006f6c:	58021c00 	.word	0x58021c00
 8006f70:	58021400 	.word	0x58021400
 8006f74:	08028944 	.word	0x08028944
 8006f78:	24009a9c 	.word	0x24009a9c
 8006f7c:	b930      	cbnz	r0, 8006f8c <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006f7e:	7862      	ldrb	r2, [r4, #1]
 8006f80:	7821      	ldrb	r1, [r4, #0]
 8006f82:	f7ff fe1b 	bl	8006bbc <BSP_QSPI_ConfigFlash>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f ae5a 	beq.w	8006c40 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8006f8c:	f06f 0004 	mvn.w	r0, #4
 8006f90:	e657      	b.n	8006c42 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8006f92:	f06f 0001 	mvn.w	r0, #1
 8006f96:	e654      	b.n	8006c42 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006f98:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006f9c:	e651      	b.n	8006c42 <BSP_QSPI_Init+0x16>
 8006f9e:	bf00      	nop

08006fa0 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8006fa0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	b970      	cbnz	r0, 8006fc4 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8006fa6:	4b09      	ldr	r3, [pc, #36]	@ (8006fcc <BSP_SDRAM_DeInit+0x2c>)
 8006fa8:	4809      	ldr	r0, [pc, #36]	@ (8006fd0 <BSP_SDRAM_DeInit+0x30>)
 8006faa:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8006fac:	f005 f902 	bl	800c1b4 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8006fb0:	207a      	movs	r0, #122	@ 0x7a
 8006fb2:	f000 fb49 	bl	8007648 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8006fb6:	4807      	ldr	r0, [pc, #28]	@ (8006fd4 <BSP_SDRAM_DeInit+0x34>)
 8006fb8:	4b07      	ldr	r3, [pc, #28]	@ (8006fd8 <BSP_SDRAM_DeInit+0x38>)
 8006fba:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006fbc:	f002 fff2 	bl	8009fa4 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8006fc0:	4620      	mov	r0, r4
}
 8006fc2:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006fc4:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006fc8:	e7fb      	b.n	8006fc2 <BSP_SDRAM_DeInit+0x22>
 8006fca:	bf00      	nop
 8006fcc:	52004140 	.word	0x52004140
 8006fd0:	2400c4a4 	.word	0x2400c4a4
 8006fd4:	2400c3ac 	.word	0x2400c3ac
 8006fd8:	52000040 	.word	0x52000040

08006fdc <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006fdc:	2201      	movs	r2, #1
 8006fde:	4915      	ldr	r1, [pc, #84]	@ (8007034 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006fe0:	4b15      	ldr	r3, [pc, #84]	@ (8007038 <MX_SDRAM_Init+0x5c>)
{
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006fe6:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006fe8:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006fea:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006fee:	2104      	movs	r1, #4
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006ff6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8006ffa:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006ffe:	2200      	movs	r2, #0
 8007000:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8007004:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007008:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800700c:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800700e:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8007010:	2207      	movs	r2, #7
 8007012:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8007014:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007018:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800701a:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800701c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8007020:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007024:	f005 f89e 	bl	800c164 <HAL_SDRAM_Init>
}
 8007028:	3800      	subs	r0, #0
 800702a:	bf18      	it	ne
 800702c:	2001      	movne	r0, #1
 800702e:	b008      	add	sp, #32
 8007030:	bd10      	pop	{r4, pc}
 8007032:	bf00      	nop
 8007034:	52004140 	.word	0x52004140
 8007038:	2400c4a4 	.word	0x2400c4a4

0800703c <BSP_SDRAM_Init>:
{
 800703c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800703e:	4605      	mov	r5, r0
{
 8007040:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8007042:	2800      	cmp	r0, #0
 8007044:	f040 80dd 	bne.w	8007202 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8007048:	4b71      	ldr	r3, [pc, #452]	@ (8007210 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800704a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800704c:	a909      	add	r1, sp, #36	@ 0x24
 800704e:	4871      	ldr	r0, [pc, #452]	@ (8007214 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007050:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8007054:	4c70      	ldr	r4, [pc, #448]	@ (8007218 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8007056:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800705a:	4e70      	ldr	r6, [pc, #448]	@ (800721c <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800705c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007060:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007064:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007068:	9201      	str	r2, [sp, #4]
 800706a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800706c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8007078:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800707c:	f002 0201 	and.w	r2, r2, #1
 8007080:	9202      	str	r2, [sp, #8]
 8007082:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007084:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007088:	f042 0208 	orr.w	r2, r2, #8
 800708c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007090:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007094:	f002 0208 	and.w	r2, r2, #8
 8007098:	9203      	str	r2, [sp, #12]
 800709a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800709c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070a0:	f042 0210 	orr.w	r2, r2, #16
 80070a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070ac:	f002 0210 	and.w	r2, r2, #16
 80070b0:	9204      	str	r2, [sp, #16]
 80070b2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80070b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070b8:	f042 0220 	orr.w	r2, r2, #32
 80070bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070c4:	f002 0220 	and.w	r2, r2, #32
 80070c8:	9205      	str	r2, [sp, #20]
 80070ca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80070cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070dc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80070e0:	9206      	str	r2, [sp, #24]
 80070e2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80070ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80070f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80070f4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80070f8:	9207      	str	r2, [sp, #28]
 80070fa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80070fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007104:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007108:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800710a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800710e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007112:	9308      	str	r3, [sp, #32]
 8007114:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007116:	2301      	movs	r3, #1
 8007118:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800711c:	230c      	movs	r3, #12
 800711e:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8007122:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007126:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007128:	f001 f8a4 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800712c:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007130:	a909      	add	r1, sp, #36	@ 0x24
 8007132:	483b      	ldr	r0, [pc, #236]	@ (8007220 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007134:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007136:	f001 f89d 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800713a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800713e:	a909      	add	r1, sp, #36	@ 0x24
 8007140:	4838      	ldr	r0, [pc, #224]	@ (8007224 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007142:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007144:	f001 f896 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8007148:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800714c:	a909      	add	r1, sp, #36	@ 0x24
 800714e:	4836      	ldr	r0, [pc, #216]	@ (8007228 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8007150:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007152:	f001 f88f 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8007156:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800715a:	a909      	add	r1, sp, #36	@ 0x24
 800715c:	4833      	ldr	r0, [pc, #204]	@ (800722c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800715e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8007160:	f001 f888 	bl	8008274 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8007164:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8007168:	a909      	add	r1, sp, #36	@ 0x24
 800716a:	4831      	ldr	r0, [pc, #196]	@ (8007230 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800716c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800716e:	f001 f881 	bl	8008274 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8007172:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007176:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800717a:	f240 2002 	movw	r0, #514	@ 0x202
 800717e:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8007182:	6334      	str	r4, [r6, #48]	@ 0x30
 8007184:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8007186:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800718a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800718e:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8007190:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8007192:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8007194:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8007196:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800719a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800719e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80071a2:	4b24      	ldr	r3, [pc, #144]	@ (8007234 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80071a4:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80071a6:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80071a8:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80071ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80071b0:	f002 fef8 	bl	8009fa4 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80071b4:	4620      	mov	r0, r4
 80071b6:	f002 fe86 	bl	8009ec6 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80071ba:	462a      	mov	r2, r5
 80071bc:	210f      	movs	r1, #15
 80071be:	207a      	movs	r0, #122	@ 0x7a
 80071c0:	f000 fa02 	bl	80075c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80071c4:	207a      	movs	r0, #122	@ 0x7a
 80071c6:	f000 fa31 	bl	800762c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ff06 	bl	8006fdc <MX_SDRAM_Init>
 80071d0:	b9d0      	cbnz	r0, 8007208 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80071d2:	4919      	ldr	r1, [pc, #100]	@ (8007238 <BSP_SDRAM_Init+0x1fc>)
 80071d4:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80071d6:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80071da:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80071de:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80071e0:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80071e4:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80071e6:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80071ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80071ee:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80071f0:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80071f2:	f7fe fd2f 	bl	8005c54 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80071f6:	2800      	cmp	r0, #0
 80071f8:	bf18      	it	ne
 80071fa:	f06f 0004 	mvnne.w	r0, #4
}
 80071fe:	b00f      	add	sp, #60	@ 0x3c
 8007200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8007202:	f06f 0001 	mvn.w	r0, #1
 8007206:	e7fa      	b.n	80071fe <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800720c:	e7f7      	b.n	80071fe <BSP_SDRAM_Init+0x1c2>
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
 8007214:	58020c00 	.word	0x58020c00
 8007218:	2400c418 	.word	0x2400c418
 800721c:	2400c4a4 	.word	0x2400c4a4
 8007220:	58021000 	.word	0x58021000
 8007224:	58021400 	.word	0x58021400
 8007228:	58021800 	.word	0x58021800
 800722c:	58021c00 	.word	0x58021c00
 8007230:	58022000 	.word	0x58022000
 8007234:	52000040 	.word	0x52000040
 8007238:	2400c484 	.word	0x2400c484

0800723c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800723c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	460c      	mov	r4, r1
 8007242:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007244:	4606      	mov	r6, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	d15c      	bne.n	8007304 <BSP_TS_Init+0xc8>
 800724a:	680b      	ldr	r3, [r1, #0]
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8007252:	d257      	bcs.n	8007304 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007254:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8007256:	1e51      	subs	r1, r2, #1
 8007258:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800725c:	d252      	bcs.n	8007304 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800725e:	4293      	cmp	r3, r2
 8007260:	bf28      	it	cs
 8007262:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8007264:	68e2      	ldr	r2, [r4, #12]
 8007266:	429a      	cmp	r2, r3
 8007268:	d84c      	bhi.n	8007304 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800726a:	2370      	movs	r3, #112	@ 0x70
 800726c:	2254      	movs	r2, #84	@ 0x54
 800726e:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007348 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8007276:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800727a:	4b2e      	ldr	r3, [pc, #184]	@ (8007334 <BSP_TS_Init+0xf8>)
 800727c:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800727e:	4b2e      	ldr	r3, [pc, #184]	@ (8007338 <BSP_TS_Init+0xfc>)
 8007280:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8007282:	4b2e      	ldr	r3, [pc, #184]	@ (800733c <BSP_TS_Init+0x100>)
 8007284:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8007286:	4b2e      	ldr	r3, [pc, #184]	@ (8007340 <BSP_TS_Init+0x104>)
 8007288:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800728a:	4b2e      	ldr	r3, [pc, #184]	@ (8007344 <BSP_TS_Init+0x108>)
 800728c:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800728e:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007292:	a906      	add	r1, sp, #24
 8007294:	482c      	ldr	r0, [pc, #176]	@ (8007348 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8007296:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800729a:	f7fe fbe1 	bl	8005a60 <FT6X06_RegisterBusIO>
 800729e:	b9c0      	cbnz	r0, 80072d2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80072a0:	4669      	mov	r1, sp
 80072a2:	4829      	ldr	r0, [pc, #164]	@ (8007348 <BSP_TS_Init+0x10c>)
 80072a4:	f7fe fb26 	bl	80058f4 <FT6X06_ReadID>
 80072a8:	b998      	cbnz	r0, 80072d2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 80072aa:	9b00      	ldr	r3, [sp, #0]
 80072ac:	2b11      	cmp	r3, #17
 80072ae:	d110      	bne.n	80072d2 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80072b0:	a903      	add	r1, sp, #12
 80072b2:	4825      	ldr	r0, [pc, #148]	@ (8007348 <BSP_TS_Init+0x10c>)
 80072b4:	f7fe fad2 	bl	800585c <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80072b8:	4f24      	ldr	r7, [pc, #144]	@ (800734c <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80072ba:	4b25      	ldr	r3, [pc, #148]	@ (8007350 <BSP_TS_Init+0x114>)
 80072bc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007358 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80072c0:	4821      	ldr	r0, [pc, #132]	@ (8007348 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80072c2:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 80072c6:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4798      	blx	r3
 80072ce:	4605      	mov	r5, r0
 80072d0:	b1d8      	cbz	r0, 800730a <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80072d2:	b116      	cbz	r6, 80072da <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80072d4:	f04f 35ff 	mov.w	r5, #4294967295
 80072d8:	e010      	b.n	80072fc <BSP_TS_Init+0xc0>
 80072da:	2601      	movs	r6, #1
 80072dc:	e7d7      	b.n	800728e <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80072de:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80072e0:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80072e2:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80072e4:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80072e6:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80072e8:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80072ea:	68e3      	ldr	r3, [r4, #12]
 80072ec:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80072ee:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80072f0:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80072f2:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80072f4:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80072f6:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80072f8:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 80072fc:	4628      	mov	r0, r5
 80072fe:	b00c      	add	sp, #48	@ 0x30
 8007300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007304:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8007308:	e7f8      	b.n	80072fc <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800730a:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800730c:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800730e:	4e11      	ldr	r6, [pc, #68]	@ (8007354 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007310:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007312:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8007318:	68a3      	ldr	r3, [r4, #8]
 800731a:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800731c:	68e3      	ldr	r3, [r4, #12]
 800731e:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007320:	f8d8 3000 	ldr.w	r3, [r8]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	4798      	blx	r3
 8007328:	2800      	cmp	r0, #0
 800732a:	dad8      	bge.n	80072de <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800732c:	f06f 0504 	mvn.w	r5, #4
 8007330:	e7e4      	b.n	80072fc <BSP_TS_Init+0xc0>
 8007332:	bf00      	nop
 8007334:	08006841 	.word	0x08006841
 8007338:	080067ad 	.word	0x080067ad
 800733c:	08006b21 	.word	0x08006b21
 8007340:	08006aed 	.word	0x08006aed
 8007344:	08006b55 	.word	0x08006b55
 8007348:	2400c4d8 	.word	0x2400c4d8
 800734c:	2400c500 	.word	0x2400c500
 8007350:	24000068 	.word	0x24000068
 8007354:	2400c504 	.word	0x2400c504
 8007358:	2400c52c 	.word	0x2400c52c

0800735c <BSP_TS_GetState>:
{
 800735c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735e:	460c      	mov	r4, r1
 8007360:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8007362:	2800      	cmp	r0, #0
 8007364:	d14d      	bne.n	8007402 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8007366:	4b28      	ldr	r3, [pc, #160]	@ (8007408 <BSP_TS_GetState+0xac>)
 8007368:	a901      	add	r1, sp, #4
 800736a:	4a28      	ldr	r2, [pc, #160]	@ (800740c <BSP_TS_GetState+0xb0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6810      	ldr	r0, [r2, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	4798      	blx	r3
 8007374:	2800      	cmp	r0, #0
 8007376:	db41      	blt.n	80073fc <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007378:	4925      	ldr	r1, [pc, #148]	@ (8007410 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800737a:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800737c:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800737e:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8007380:	2e00      	cmp	r6, #0
 8007382:	d037      	beq.n	80073f4 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007384:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8007386:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800738a:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800738e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007392:	bf02      	ittt	eq
 8007394:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 8007396:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8007398:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800739a:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800739e:	bf1c      	itt	ne
 80073a0:	f10e 3cff 	addne.w	ip, lr, #4294967295
 80073a4:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80073a8:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80073ac:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80073ae:	bf44      	itt	mi
 80073b0:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80073b4:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80073b6:	680f      	ldr	r7, [r1, #0]
 80073b8:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80073ba:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80073bc:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80073be:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80073c0:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80073c2:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80073c6:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80073ca:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80073cc:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80073ce:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80073d0:	bf8c      	ite	hi
 80073d2:	eba2 0c05 	subhi.w	ip, r2, r5
 80073d6:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80073da:	4283      	cmp	r3, r0
 80073dc:	bf8c      	ite	hi
 80073de:	1a1e      	subhi	r6, r3, r0
 80073e0:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80073e2:	4567      	cmp	r7, ip
 80073e4:	d301      	bcc.n	80073ea <BSP_TS_GetState+0x8e>
 80073e6:	42b7      	cmp	r7, r6
 80073e8:	d205      	bcs.n	80073f6 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80073ea:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80073ec:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80073ee:	2000      	movs	r0, #0
}
 80073f0:	b005      	add	sp, #20
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 80073f4:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80073f6:	e9c4 5001 	strd	r5, r0, [r4, #4]
 80073fa:	e7f8      	b.n	80073ee <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80073fc:	f06f 0004 	mvn.w	r0, #4
 8007400:	e7f6      	b.n	80073f0 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8007402:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007406:	e7f3      	b.n	80073f0 <BSP_TS_GetState+0x94>
 8007408:	2400c52c 	.word	0x2400c52c
 800740c:	2400c500 	.word	0x2400c500
 8007410:	2400c504 	.word	0x2400c504

08007414 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007414:	4b2d      	ldr	r3, [pc, #180]	@ (80074cc <SystemInit+0xb8>)
 8007416:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800741a:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800741e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	f042 0210 	orr.w	r2, r2, #16
 8007428:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800742a:	4a29      	ldr	r2, [pc, #164]	@ (80074d0 <SystemInit+0xbc>)
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	2b06      	cmp	r3, #6
 8007434:	d805      	bhi.n	8007442 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	f023 030f 	bic.w	r3, r3, #15
 800743c:	f043 0307 	orr.w	r3, r3, #7
 8007440:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007442:	4b24      	ldr	r3, [pc, #144]	@ (80074d4 <SystemInit+0xc0>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800744c:	2200      	movs	r2, #0
 800744e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007450:	4a21      	ldr	r2, [pc, #132]	@ (80074d8 <SystemInit+0xc4>)
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007456:	491e      	ldr	r1, [pc, #120]	@ (80074d0 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8007458:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800745a:	680a      	ldr	r2, [r1, #0]
 800745c:	0712      	lsls	r2, r2, #28
 800745e:	d505      	bpl.n	800746c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007460:	680a      	ldr	r2, [r1, #0]
 8007462:	f022 020f 	bic.w	r2, r2, #15
 8007466:	f042 0207 	orr.w	r2, r2, #7
 800746a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800746c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800746e:	491b      	ldr	r1, [pc, #108]	@ (80074dc <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8007470:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8007472:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007474:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8007476:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007478:	4919      	ldr	r1, [pc, #100]	@ (80074e0 <SystemInit+0xcc>)
 800747a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800747c:	4919      	ldr	r1, [pc, #100]	@ (80074e4 <SystemInit+0xd0>)
 800747e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007482:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007484:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007486:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007488:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800748a:	6819      	ldr	r1, [r3, #0]
 800748c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8007490:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007492:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8007494:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007498:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 800749c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80074a4:	4b10      	ldr	r3, [pc, #64]	@ (80074e8 <SystemInit+0xd4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f36f 030f 	bfc	r3, #0, #16
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b0:	d203      	bcs.n	80074ba <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80074b2:	4b0e      	ldr	r3, [pc, #56]	@ (80074ec <SystemInit+0xd8>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80074ba:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <SystemInit+0xdc>)
 80074bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80074c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80074c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80074c6:	4b01      	ldr	r3, [pc, #4]	@ (80074cc <SystemInit+0xb8>)
 80074c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80074ca:	4770      	bx	lr
 80074cc:	e000ed00 	.word	0xe000ed00
 80074d0:	52002000 	.word	0x52002000
 80074d4:	58024400 	.word	0x58024400
 80074d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80074dc:	02020200 	.word	0x02020200
 80074e0:	01ff0000 	.word	0x01ff0000
 80074e4:	01010280 	.word	0x01010280
 80074e8:	5c001000 	.word	0x5c001000
 80074ec:	51008000 	.word	0x51008000
 80074f0:	52004000 	.word	0x52004000

080074f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074f4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074f6:	2003      	movs	r0, #3
 80074f8:	f000 f854 	bl	80075a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074fc:	f003 fc9e 	bl	800ae3c <HAL_RCC_GetSysClockFreq>
 8007500:	490f      	ldr	r1, [pc, #60]	@ (8007540 <HAL_Init+0x4c>)
 8007502:	4a10      	ldr	r2, [pc, #64]	@ (8007544 <HAL_Init+0x50>)
 8007504:	698b      	ldr	r3, [r1, #24]
 8007506:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800750a:	5cd3      	ldrb	r3, [r2, r3]
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007512:	698b      	ldr	r3, [r1, #24]
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	5cd3      	ldrb	r3, [r2, r3]
 800751a:	4a0b      	ldr	r2, [pc, #44]	@ (8007548 <HAL_Init+0x54>)
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	fa20 f303 	lsr.w	r3, r0, r3
 8007524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <HAL_Init+0x58>)
 8007528:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800752a:	2000      	movs	r0, #0
 800752c:	f7fa fa34 	bl	8001998 <HAL_InitTick>
 8007530:	4604      	mov	r4, r0
 8007532:	b918      	cbnz	r0, 800753c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007534:	f7f9 fed6 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007538:	4620      	mov	r0, r4
 800753a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800753c:	2401      	movs	r4, #1
 800753e:	e7fb      	b.n	8007538 <HAL_Init+0x44>
 8007540:	58024400 	.word	0x58024400
 8007544:	0802894c 	.word	0x0802894c
 8007548:	24000098 	.word	0x24000098
 800754c:	2400009c 	.word	0x2400009c

08007550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8007550:	4a03      	ldr	r2, [pc, #12]	@ (8007560 <HAL_IncTick+0x10>)
 8007552:	4b04      	ldr	r3, [pc, #16]	@ (8007564 <HAL_IncTick+0x14>)
 8007554:	6811      	ldr	r1, [r2, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	440b      	add	r3, r1
 800755a:	6013      	str	r3, [r2, #0]
}
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	2400c530 	.word	0x2400c530
 8007564:	240000a0 	.word	0x240000a0

08007568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007568:	4b01      	ldr	r3, [pc, #4]	@ (8007570 <HAL_GetTick+0x8>)
 800756a:	6818      	ldr	r0, [r3, #0]
}
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	2400c530 	.word	0x2400c530

08007574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007578:	f7ff fff6 	bl	8007568 <HAL_GetTick>
 800757c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800757e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8007580:	bf1e      	ittt	ne
 8007582:	4b04      	ldrne	r3, [pc, #16]	@ (8007594 <HAL_Delay+0x20>)
 8007584:	781b      	ldrbne	r3, [r3, #0]
 8007586:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007588:	f7ff ffee 	bl	8007568 <HAL_GetTick>
 800758c:	1b43      	subs	r3, r0, r5
 800758e:	42a3      	cmp	r3, r4
 8007590:	d3fa      	bcc.n	8007588 <HAL_Delay+0x14>
  {
  }
}
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	240000a0 	.word	0x240000a0

08007598 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007598:	4b01      	ldr	r3, [pc, #4]	@ (80075a0 <HAL_GetREVID+0x8>)
 800759a:	6818      	ldr	r0, [r3, #0]
}
 800759c:	0c00      	lsrs	r0, r0, #16
 800759e:	4770      	bx	lr
 80075a0:	5c001000 	.word	0x5c001000

080075a4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a4:	4907      	ldr	r1, [pc, #28]	@ (80075c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075a6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80075b2:	0412      	lsls	r2, r2, #16
 80075b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80075bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80075c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80075c2:	4770      	bx	lr
 80075c4:	e000ed00 	.word	0xe000ed00

080075c8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075c8:	4b16      	ldr	r3, [pc, #88]	@ (8007624 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075ca:	b530      	push	{r4, r5, lr}
 80075cc:	68dc      	ldr	r4, [r3, #12]
 80075ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075d8:	2b04      	cmp	r3, #4
 80075da:	bf28      	it	cs
 80075dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075de:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075e0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075e4:	bf8c      	ite	hi
 80075e6:	3c03      	subhi	r4, #3
 80075e8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075ea:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80075ee:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075f0:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075f4:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075f8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075fc:	fa03 f304 	lsl.w	r3, r3, r4
 8007600:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007604:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007608:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800760a:	db06      	blt.n	800761a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800760c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8007610:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007614:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007618:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800761a:	f000 000f 	and.w	r0, r0, #15
 800761e:	4a02      	ldr	r2, [pc, #8]	@ (8007628 <HAL_NVIC_SetPriority+0x60>)
 8007620:	5413      	strb	r3, [r2, r0]
 8007622:	e7f9      	b.n	8007618 <HAL_NVIC_SetPriority+0x50>
 8007624:	e000ed00 	.word	0xe000ed00
 8007628:	e000ed14 	.word	0xe000ed14

0800762c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800762c:	2800      	cmp	r0, #0
 800762e:	db07      	blt.n	8007640 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007630:	2301      	movs	r3, #1
 8007632:	0941      	lsrs	r1, r0, #5
 8007634:	f000 001f 	and.w	r0, r0, #31
 8007638:	4a02      	ldr	r2, [pc, #8]	@ (8007644 <HAL_NVIC_EnableIRQ+0x18>)
 800763a:	4083      	lsls	r3, r0
 800763c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	e000e100 	.word	0xe000e100

08007648 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007648:	2800      	cmp	r0, #0
 800764a:	db0c      	blt.n	8007666 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800764c:	0943      	lsrs	r3, r0, #5
 800764e:	2201      	movs	r2, #1
 8007650:	f000 001f 	and.w	r0, r0, #31
 8007654:	4904      	ldr	r1, [pc, #16]	@ (8007668 <HAL_NVIC_DisableIRQ+0x20>)
 8007656:	3320      	adds	r3, #32
 8007658:	4082      	lsls	r2, r0
 800765a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800765e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007662:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8007666:	4770      	bx	lr
 8007668:	e000e100 	.word	0xe000e100

0800766c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800766c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007670:	4b04      	ldr	r3, [pc, #16]	@ (8007684 <HAL_MPU_Disable+0x18>)
 8007672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007674:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007678:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	e000ed00 	.word	0xe000ed00

08007688 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007688:	4b06      	ldr	r3, [pc, #24]	@ (80076a4 <HAL_MPU_Enable+0x1c>)
 800768a:	f040 0001 	orr.w	r0, r0, #1
 800768e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007694:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007698:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800769a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800769e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80076a2:	4770      	bx	lr
 80076a4:	e000ed00 	.word	0xe000ed00

080076a8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80076a8:	7843      	ldrb	r3, [r0, #1]
 80076aa:	4a14      	ldr	r2, [pc, #80]	@ (80076fc <HAL_MPU_ConfigRegion+0x54>)
 80076ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80076b0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80076bc:	6843      	ldr	r3, [r0, #4]
 80076be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80076c2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80076c4:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80076c6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80076c8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80076cc:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076ce:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80076d0:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076d2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80076d6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076d8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80076dc:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076de:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80076e2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80076e8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80076ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80076ee:	7a01      	ldrb	r1, [r0, #8]
 80076f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80076f4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	e000ed00 	.word	0xe000ed00

08007700 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007700:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007702:	4604      	mov	r4, r0
 8007704:	b908      	cbnz	r0, 800770a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8007706:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007708:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800770a:	7f43      	ldrb	r3, [r0, #29]
 800770c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007710:	b913      	cbnz	r3, 8007718 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8007712:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007714:	f7f9 fdfe 	bl	8001314 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007718:	2302      	movs	r3, #2
 800771a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800771c:	7923      	ldrb	r3, [r4, #4]
 800771e:	b9e3      	cbnz	r3, 800775a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	4a13      	ldr	r2, [pc, #76]	@ (8007770 <HAL_CRC_Init+0x70>)
 8007724:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	f022 0218 	bic.w	r2, r2, #24
 800772c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800772e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007730:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007732:	b9d2      	cbnz	r2, 800776a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007734:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007738:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800773a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	6961      	ldr	r1, [r4, #20]
 8007740:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007744:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007746:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007748:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007750:	430a      	orrs	r2, r1
 8007752:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007754:	2301      	movs	r3, #1
 8007756:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8007758:	e7d6      	b.n	8007708 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800775a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f808 	bl	8007774 <HAL_CRCEx_Polynomial_Set>
 8007764:	2800      	cmp	r0, #0
 8007766:	d0e2      	beq.n	800772e <HAL_CRC_Init+0x2e>
 8007768:	e7cd      	b.n	8007706 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800776a:	6922      	ldr	r2, [r4, #16]
 800776c:	e7e4      	b.n	8007738 <HAL_CRC_Init+0x38>
 800776e:	bf00      	nop
 8007770:	04c11db7 	.word	0x04c11db7

08007774 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007774:	07cb      	lsls	r3, r1, #31
{
 8007776:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007778:	d50d      	bpl.n	8007796 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800777a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800777c:	3b01      	subs	r3, #1
 800777e:	d31d      	bcc.n	80077bc <HAL_CRCEx_Polynomial_Set+0x48>
 8007780:	fa21 f403 	lsr.w	r4, r1, r3
 8007784:	07e4      	lsls	r4, r4, #31
 8007786:	d5f9      	bpl.n	800777c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8007788:	2a10      	cmp	r2, #16
 800778a:	d013      	beq.n	80077b4 <HAL_CRCEx_Polynomial_Set+0x40>
 800778c:	2a10      	cmp	r2, #16
 800778e:	d804      	bhi.n	800779a <HAL_CRCEx_Polynomial_Set+0x26>
 8007790:	b13a      	cbz	r2, 80077a2 <HAL_CRCEx_Polynomial_Set+0x2e>
 8007792:	2a08      	cmp	r2, #8
 8007794:	d010      	beq.n	80077b8 <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 8007796:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007798:	e00b      	b.n	80077b2 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800779a:	2a18      	cmp	r2, #24
 800779c:	d1fb      	bne.n	8007796 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800779e:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80077a0:	d8f9      	bhi.n	8007796 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80077a6:	6883      	ldr	r3, [r0, #8]
 80077a8:	f023 0318 	bic.w	r3, r3, #24
 80077ac:	4313      	orrs	r3, r2
 80077ae:	6083      	str	r3, [r0, #8]
 80077b0:	2000      	movs	r0, #0
}
 80077b2:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	e7f3      	b.n	80077a0 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80077b8:	2b0f      	cmp	r3, #15
 80077ba:	e7f1      	b.n	80077a0 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80077bc:	2a10      	cmp	r2, #16
 80077be:	d1e5      	bne.n	800778c <HAL_CRCEx_Polynomial_Set+0x18>
 80077c0:	e7e9      	b.n	8007796 <HAL_CRCEx_Polynomial_Set+0x22>

080077c2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80077c2:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80077c4:	4604      	mov	r4, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d036      	beq.n	8007838 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80077ca:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80077ce:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80077d2:	b91b      	cbnz	r3, 80077dc <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80077d4:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80077d8:	f7f9 fdb4 	bl	8001344 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077dc:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80077de:	69e0      	ldr	r0, [r4, #28]
 80077e0:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077e2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80077ea:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80077f2:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80077f6:	430a      	orrs	r2, r1
 80077f8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80077fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80077fc:	68a2      	ldr	r2, [r4, #8]
 80077fe:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8007802:	4302      	orrs	r2, r0
 8007804:	f021 0101 	bic.w	r1, r1, #1
 8007808:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800780a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800780c:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800780e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007810:	f36f 020f 	bfc	r2, #0, #16
 8007814:	430a      	orrs	r2, r1
 8007816:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007818:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800781a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800781e:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007822:	0552      	lsls	r2, r2, #21
 8007824:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007828:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800782a:	430a      	orrs	r2, r1
 800782c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800782e:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007830:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007832:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8007836:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007838:	2001      	movs	r0, #1
 800783a:	e7fc      	b.n	8007836 <HAL_DMA2D_Init+0x74>

0800783c <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800783c:	4770      	bx	lr

0800783e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800783e:	4770      	bx	lr

08007840 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007840:	6803      	ldr	r3, [r0, #0]
{
 8007842:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007844:	685e      	ldr	r6, [r3, #4]
{
 8007846:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007848:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800784a:	07f2      	lsls	r2, r6, #31
 800784c:	d514      	bpl.n	8007878 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800784e:	05e9      	lsls	r1, r5, #23
 8007850:	d512      	bpl.n	8007878 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007858:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800785a:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007862:	2201      	movs	r2, #1
 8007864:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007866:	2304      	movs	r3, #4
 8007868:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800786c:	2300      	movs	r3, #0
 800786e:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007872:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007874:	b103      	cbz	r3, 8007878 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8007876:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007878:	06b2      	lsls	r2, r6, #26
 800787a:	d516      	bpl.n	80078aa <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800787c:	04ab      	lsls	r3, r5, #18
 800787e:	d514      	bpl.n	80078aa <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007888:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800788a:	2220      	movs	r2, #32
 800788c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800788e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007890:	f043 0302 	orr.w	r3, r3, #2
 8007894:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007896:	2304      	movs	r3, #4
 8007898:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800789c:	2300      	movs	r3, #0
 800789e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80078a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078a4:	b10b      	cbz	r3, 80078aa <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80078a6:	4620      	mov	r0, r4
 80078a8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078aa:	0730      	lsls	r0, r6, #28
 80078ac:	d516      	bpl.n	80078dc <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80078ae:	0529      	lsls	r1, r5, #20
 80078b0:	d514      	bpl.n	80078dc <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80078bc:	2208      	movs	r2, #8
 80078be:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c2:	f043 0304 	orr.w	r3, r3, #4
 80078c6:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078c8:	2304      	movs	r3, #4
 80078ca:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80078ce:	2300      	movs	r3, #0
 80078d0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80078d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078d6:	b10b      	cbz	r3, 80078dc <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80078d8:	4620      	mov	r0, r4
 80078da:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80078dc:	0772      	lsls	r2, r6, #29
 80078de:	d50b      	bpl.n	80078f8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80078e0:	056b      	lsls	r3, r5, #21
 80078e2:	d509      	bpl.n	80078f8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80078e4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80078e6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80078f0:	2204      	movs	r2, #4
 80078f2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80078f4:	f7ff ffa2 	bl	800783c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80078f8:	07b0      	lsls	r0, r6, #30
 80078fa:	d514      	bpl.n	8007926 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80078fc:	05a9      	lsls	r1, r5, #22
 80078fe:	d512      	bpl.n	8007926 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007908:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800790a:	2202      	movs	r2, #2
 800790c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800790e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007910:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007912:	2301      	movs	r3, #1
 8007914:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007918:	2300      	movs	r3, #0
 800791a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800791e:	6a23      	ldr	r3, [r4, #32]
 8007920:	b10b      	cbz	r3, 8007926 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8007922:	4620      	mov	r0, r4
 8007924:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007926:	06f2      	lsls	r2, r6, #27
 8007928:	d513      	bpl.n	8007952 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800792a:	04eb      	lsls	r3, r5, #19
 800792c:	d511      	bpl.n	8007952 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800792e:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007930:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007938:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800793a:	2210      	movs	r2, #16
 800793c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800793e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007940:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007942:	2301      	movs	r3, #1
 8007944:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007948:	2300      	movs	r3, #0
 800794a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800794e:	f7ff ff76 	bl	800783e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007952:	bd70      	pop	{r4, r5, r6, pc}

08007954 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	4607      	mov	r7, r0
 800795a:	460d      	mov	r5, r1
 800795c:	4614      	mov	r4, r2
 800795e:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007960:	f7ff fe02 	bl	8007568 <HAL_GetTick>
 8007964:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800796a:	07d2      	lsls	r2, r2, #31
 800796c:	d50a      	bpl.n	8007984 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800796e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007972:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007974:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007976:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800797a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800797e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007984:	f7ff fdf0 	bl	8007568 <HAL_GetTick>
 8007988:	eba0 0008 	sub.w	r0, r0, r8
 800798c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007990:	d9e9      	bls.n	8007966 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007992:	2003      	movs	r0, #3
 8007994:	e7f4      	b.n	8007980 <DSI_ShortWrite.constprop.0+0x2c>

08007996 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007996:	7c03      	ldrb	r3, [r0, #16]
{
 8007998:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800799a:	2b01      	cmp	r3, #1
 800799c:	d05b      	beq.n	8007a56 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800799e:	6803      	ldr	r3, [r0, #0]
 80079a0:	2000      	movs	r0, #0
 80079a2:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80079a6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80079aa:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80079ac:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80079ae:	d507      	bpl.n	80079c0 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80079b0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80079b4:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80079b8:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80079bc:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80079c0:	0788      	lsls	r0, r1, #30
 80079c2:	d505      	bpl.n	80079d0 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80079c4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80079c8:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80079cc:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80079d0:	0748      	lsls	r0, r1, #29
 80079d2:	d505      	bpl.n	80079e0 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80079d4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80079d8:	f040 0001 	orr.w	r0, r0, #1
 80079dc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80079e0:	0708      	lsls	r0, r1, #28
 80079e2:	d505      	bpl.n	80079f0 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80079e4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80079e8:	f040 0002 	orr.w	r0, r0, #2
 80079ec:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80079f0:	06c8      	lsls	r0, r1, #27
 80079f2:	d505      	bpl.n	8007a00 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80079f4:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80079f8:	f040 000c 	orr.w	r0, r0, #12
 80079fc:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007a00:	0688      	lsls	r0, r1, #26
 8007a02:	d505      	bpl.n	8007a10 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007a04:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007a08:	f040 0010 	orr.w	r0, r0, #16
 8007a0c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007a10:	0648      	lsls	r0, r1, #25
 8007a12:	d505      	bpl.n	8007a20 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007a14:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007a18:	f040 0020 	orr.w	r0, r0, #32
 8007a1c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007a20:	0608      	lsls	r0, r1, #24
 8007a22:	d505      	bpl.n	8007a30 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007a24:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007a28:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8007a2c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007a30:	05c8      	lsls	r0, r1, #23
 8007a32:	d505      	bpl.n	8007a40 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007a34:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007a38:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8007a3c:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007a40:	0589      	lsls	r1, r1, #22
 8007a42:	d505      	bpl.n	8007a50 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007a44:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8007a48:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8007a4c:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007a50:	2000      	movs	r0, #0
 8007a52:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8007a54:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a56:	2002      	movs	r0, #2
}
 8007a58:	4770      	bx	lr
	...

08007a5c <HAL_DSI_Init>:
{
 8007a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007a5e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007a60:	4604      	mov	r4, r0
 8007a62:	2800      	cmp	r0, #0
 8007a64:	f000 80ea 	beq.w	8007c3c <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007a68:	7c43      	ldrb	r3, [r0, #17]
 8007a6a:	b90b      	cbnz	r3, 8007a70 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8007a6c:	f7f9 fc8e 	bl	800138c <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007a70:	2303      	movs	r3, #3
 8007a72:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007a74:	2300      	movs	r3, #0
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007a7e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007a82:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8007a86:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8007a8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007a92:	f7ff fd69 	bl	8007568 <HAL_GetTick>
 8007a96:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007a98:	6822      	ldr	r2, [r4, #0]
 8007a9a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8007a9e:	04d9      	lsls	r1, r3, #19
 8007aa0:	d56e      	bpl.n	8007b80 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007aa2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007aa6:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8007aaa:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8007aae:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007ab2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007ab6:	e9d5 0300 	ldrd	r0, r3, [r5]
 8007aba:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007abc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007ac0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007ac2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007ac6:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8007ade:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8007aea:	f7ff fd43 	bl	8007574 <HAL_Delay>
  tickstart = HAL_GetTick();
 8007aee:	f7ff fd3b 	bl	8007568 <HAL_GetTick>
 8007af2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007afa:	05d2      	lsls	r2, r2, #23
 8007afc:	d548      	bpl.n	8007b90 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8007afe:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b00:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	605a      	str	r2, [r3, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	f002 0201 	and.w	r2, r2, #1
 8007b12:	9202      	str	r2, [sp, #8]
 8007b14:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007b1c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b22:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007b24:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8007b26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007b2a:	f042 0202 	orr.w	r2, r2, #2
 8007b2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8007b32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007b36:	f042 0204 	orr.w	r2, r2, #4
 8007b3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8007b3e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007b42:	f022 0203 	bic.w	r2, r2, #3
 8007b46:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007b4a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007b54:	f7ff fd08 	bl	8007568 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007b58:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007b5a:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007b5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007b60:	079b      	lsls	r3, r3, #30
 8007b62:	d025      	beq.n	8007bb0 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b6a:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8007b6e:	2b94      	cmp	r3, #148	@ 0x94
 8007b70:	d025      	beq.n	8007bbe <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b72:	f7ff fcf9 	bl	8007568 <HAL_GetTick>
 8007b76:	1b80      	subs	r0, r0, r6
 8007b78:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007b7c:	d9f2      	bls.n	8007b64 <HAL_DSI_Init+0x108>
 8007b7e:	e014      	b.n	8007baa <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b80:	f7ff fcf2 	bl	8007568 <HAL_GetTick>
 8007b84:	1b80      	subs	r0, r0, r6
 8007b86:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007b8a:	d985      	bls.n	8007a98 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007b8c:	2003      	movs	r0, #3
 8007b8e:	e053      	b.n	8007c38 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b90:	f7ff fcea 	bl	8007568 <HAL_GetTick>
 8007b94:	1b80      	subs	r0, r0, r6
 8007b96:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007b9a:	d9ab      	bls.n	8007af4 <HAL_DSI_Init+0x98>
 8007b9c:	e7f6      	b.n	8007b8c <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007b9e:	f7ff fce3 	bl	8007568 <HAL_GetTick>
 8007ba2:	1b80      	subs	r0, r0, r6
 8007ba4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007ba8:	d902      	bls.n	8007bb0 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8007baa:	2300      	movs	r3, #0
 8007bac:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8007bae:	e7ed      	b.n	8007b8c <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bb6:	f003 0314 	and.w	r3, r3, #20
 8007bba:	2b14      	cmp	r3, #20
 8007bbc:	d1ef      	bne.n	8007b9e <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007bbe:	686b      	ldr	r3, [r5, #4]
 8007bc0:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007bc4:	4a1e      	ldr	r2, [pc, #120]	@ (8007c40 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8007bc6:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	bf38      	it	cc
 8007bcc:	2301      	movcc	r3, #1
 8007bce:	435a      	muls	r2, r3
 8007bd0:	68ab      	ldr	r3, [r5, #8]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	409a      	lsls	r2, r3
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	434b      	muls	r3, r1
 8007bdc:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007be6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007bea:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007bee:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007bf2:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007bf4:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007bf6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007bfa:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007bfe:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8007c02:	9003      	str	r0, [sp, #12]
 8007c04:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8007c06:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8007c08:	f022 0201 	bic.w	r2, r2, #1
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	f002 0201 	and.w	r2, r2, #1
 8007c14:	9203      	str	r2, [sp, #12]
 8007c16:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007c18:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007c1c:	f022 0203 	bic.w	r2, r2, #3
 8007c20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007c24:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8007c32:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007c34:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8007c36:	7463      	strb	r3, [r4, #17]
}
 8007c38:	b004      	add	sp, #16
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	e7fb      	b.n	8007c38 <HAL_DSI_Init+0x1dc>
 8007c40:	003d0900 	.word	0x003d0900

08007c44 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8007c44:	4770      	bx	lr

08007c46 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007c46:	6803      	ldr	r3, [r0, #0]
 8007c48:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007c4c:	07d1      	lsls	r1, r2, #31
{
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007c52:	d508      	bpl.n	8007c66 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007c54:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007c58:	07d2      	lsls	r2, r2, #31
 8007c5a:	d504      	bpl.n	8007c66 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007c62:	f7fa fb27 	bl	80022b4 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007c6c:	0791      	lsls	r1, r2, #30
 8007c6e:	d509      	bpl.n	8007c84 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007c70:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007c74:	0792      	lsls	r2, r2, #30
 8007c76:	d505      	bpl.n	8007c84 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007c78:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007c7a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007c7c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007c80:	f7fa fb4c 	bl	800231c <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007c84:	69a3      	ldr	r3, [r4, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d04e      	beq.n	8007d28 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007c90:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007c94:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007c96:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007c9a:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8007c9e:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007ca0:	b291      	uxth	r1, r2
 8007ca2:	b119      	cbz	r1, 8007cac <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007ca4:	6961      	ldr	r1, [r4, #20]
 8007ca6:	f041 0101 	orr.w	r1, r1, #1
 8007caa:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007cac:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8007cb0:	d003      	beq.n	8007cba <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007cb2:	6962      	ldr	r2, [r4, #20]
 8007cb4:	f042 0202 	orr.w	r2, r2, #2
 8007cb8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007cba:	07d8      	lsls	r0, r3, #31
 8007cbc:	d503      	bpl.n	8007cc6 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007cbe:	6962      	ldr	r2, [r4, #20]
 8007cc0:	f042 0204 	orr.w	r2, r2, #4
 8007cc4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007cc6:	0799      	lsls	r1, r3, #30
 8007cc8:	d503      	bpl.n	8007cd2 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007cca:	6962      	ldr	r2, [r4, #20]
 8007ccc:	f042 0208 	orr.w	r2, r2, #8
 8007cd0:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007cd2:	f013 0f0c 	tst.w	r3, #12
 8007cd6:	d003      	beq.n	8007ce0 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007cd8:	6962      	ldr	r2, [r4, #20]
 8007cda:	f042 0210 	orr.w	r2, r2, #16
 8007cde:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007ce0:	06da      	lsls	r2, r3, #27
 8007ce2:	d503      	bpl.n	8007cec <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007ce4:	6962      	ldr	r2, [r4, #20]
 8007ce6:	f042 0220 	orr.w	r2, r2, #32
 8007cea:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007cec:	0698      	lsls	r0, r3, #26
 8007cee:	d503      	bpl.n	8007cf8 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007cf0:	6962      	ldr	r2, [r4, #20]
 8007cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cf6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007cf8:	0659      	lsls	r1, r3, #25
 8007cfa:	d503      	bpl.n	8007d04 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007cfc:	6962      	ldr	r2, [r4, #20]
 8007cfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d02:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007d04:	061a      	lsls	r2, r3, #24
 8007d06:	d503      	bpl.n	8007d10 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007d08:	6962      	ldr	r2, [r4, #20]
 8007d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d0e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007d10:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8007d14:	d003      	beq.n	8007d1e <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d1c:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007d1e:	6963      	ldr	r3, [r4, #20]
 8007d20:	b113      	cbz	r3, 8007d28 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8007d22:	4620      	mov	r0, r4
 8007d24:	f7ff ff8e 	bl	8007c44 <HAL_DSI_ErrorCallback>
}
 8007d28:	bd10      	pop	{r4, pc}

08007d2a <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007d2a:	7c02      	ldrb	r2, [r0, #16]
{
 8007d2c:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007d2e:	2a01      	cmp	r2, #1
 8007d30:	d00a      	beq.n	8007d48 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8007d32:	6802      	ldr	r2, [r0, #0]
 8007d34:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007d36:	f020 0003 	bic.w	r0, r0, #3
 8007d3a:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007d3c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007d3e:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007d40:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007d42:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8007d44:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007d46:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007d48:	2002      	movs	r0, #2
}
 8007d4a:	4770      	bx	lr

08007d4c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007d4c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007d4e:	7c03      	ldrb	r3, [r0, #16]
{
 8007d50:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d069      	beq.n	8007e2a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007d56:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007d58:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d5c:	f042 0201 	orr.w	r2, r2, #1
 8007d60:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007d62:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007d66:	f022 0201 	bic.w	r2, r2, #1
 8007d6a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007d6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	f022 0203 	bic.w	r2, r2, #3
 8007d80:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	4302      	orrs	r2, r0
 8007d86:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	f022 0207 	bic.w	r2, r2, #7
 8007d8e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007d90:	6958      	ldr	r0, [r3, #20]
 8007d92:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007d96:	432a      	orrs	r2, r5
 8007d98:	694d      	ldr	r5, [r1, #20]
 8007d9a:	432a      	orrs	r2, r5
 8007d9c:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007d9e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007da0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007da2:	691a      	ldr	r2, [r3, #16]
 8007da4:	f022 020f 	bic.w	r2, r2, #15
 8007da8:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	4302      	orrs	r2, r0
 8007dae:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007db0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007db4:	f022 020e 	bic.w	r2, r2, #14
 8007db8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007dbc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007dc0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007dc4:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007dc6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007dca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007dcc:	f36f 020f 	bfc	r2, #0, #16
 8007dd0:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007dd2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007dd4:	4302      	orrs	r2, r0
 8007dd6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007dd8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007ddc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007de0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007de4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8007de8:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8007dec:	432a      	orrs	r2, r5
 8007dee:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8007df0:	432a      	orrs	r2, r5
 8007df2:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007df4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007df6:	432a      	orrs	r2, r5
 8007df8:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007dfa:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007dfc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007e00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007e02:	f022 0201 	bic.w	r2, r2, #1
 8007e06:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007e08:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007e0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007e12:	f042 0201 	orr.w	r2, r2, #1
 8007e16:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007e1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007e1e:	f042 0202 	orr.w	r2, r2, #2
 8007e22:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8007e26:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007e28:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007e2a:	2002      	movs	r0, #2
 8007e2c:	e7fc      	b.n	8007e28 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08007e30 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8007e30:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007e32:	7c03      	ldrb	r3, [r0, #16]
{
 8007e34:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d029      	beq.n	8007e8e <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	4b15      	ldr	r3, [pc, #84]	@ (8007e94 <HAL_DSI_ConfigCommand+0x64>)
 8007e3e:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8007e40:	4023      	ands	r3, r4
 8007e42:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007e44:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8007e46:	e9d1 3500 	ldrd	r3, r5, [r1]
 8007e4a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8007e4c:	688d      	ldr	r5, [r1, #8]
 8007e4e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8007e50:	68cd      	ldr	r5, [r1, #12]
 8007e52:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007e54:	690d      	ldr	r5, [r1, #16]
 8007e56:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8007e58:	694d      	ldr	r5, [r1, #20]
 8007e5a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8007e5c:	698d      	ldr	r5, [r1, #24]
 8007e5e:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8007e60:	69cd      	ldr	r5, [r1, #28]
 8007e62:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007e64:	6a0d      	ldr	r5, [r1, #32]
 8007e66:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8007e68:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8007e6a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8007e6c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8007e6e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8007e70:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007e72:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007e74:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007e76:	4323      	orrs	r3, r4
 8007e78:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8007e7a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007e7c:	f023 0302 	bic.w	r3, r3, #2
 8007e80:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007e82:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007e84:	430b      	orrs	r3, r1
 8007e86:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007e88:	2000      	movs	r0, #0
 8007e8a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8007e8c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007e8e:	2002      	movs	r0, #2
 8007e90:	e7fc      	b.n	8007e8c <HAL_DSI_ConfigCommand+0x5c>
 8007e92:	bf00      	nop
 8007e94:	fef080ff 	.word	0xfef080ff

08007e98 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007e98:	7c02      	ldrb	r2, [r0, #16]
{
 8007e9a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007e9c:	2a01      	cmp	r2, #1
 8007e9e:	d00a      	beq.n	8007eb6 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007ea0:	6802      	ldr	r2, [r0, #0]
 8007ea2:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007ea4:	f020 001f 	bic.w	r0, r0, #31
 8007ea8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007eaa:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007eac:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007eae:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8007eb0:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8007eb2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007eb4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007eb6:	2002      	movs	r0, #2
}
 8007eb8:	4770      	bx	lr

08007eba <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8007eba:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007ebc:	7c03      	ldrb	r3, [r0, #16]
{
 8007ebe:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d034      	beq.n	8007f2e <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007ec4:	e9d1 0300 	ldrd	r0, r3, [r1]
 8007ec8:	4298      	cmp	r0, r3
 8007eca:	bf38      	it	cc
 8007ecc:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007ed4:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007ed8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007edc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007ee0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007ee4:	4302      	orrs	r2, r0
 8007ee6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007eea:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007eee:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8007ef2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007ef6:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8007efa:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007efe:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007f00:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8007f04:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007f06:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007f08:	432a      	orrs	r2, r5
 8007f0a:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007f0c:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007f0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8007f12:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007f16:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007f1a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007f1e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007f22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007f26:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8007f2a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007f2c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007f2e:	2002      	movs	r0, #2
 8007f30:	e7fc      	b.n	8007f2c <HAL_DSI_ConfigPhyTimer+0x72>
	...

08007f34 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007f34:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f36:	7c03      	ldrb	r3, [r0, #16]
{
 8007f38:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d05b      	beq.n	8007ff6 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007f3e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007f40:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007f42:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007f44:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007f46:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007f4a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007f52:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007f54:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007f56:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007f5c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007f5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007f62:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007f64:	4a25      	ldr	r2, [pc, #148]	@ (8007ffc <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8007f66:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007f68:	4010      	ands	r0, r2
 8007f6a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007f6c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007f6e:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007f70:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007f72:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007f74:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007f76:	4010      	ands	r0, r2
 8007f78:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007f7a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007f7c:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007f7e:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007f80:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007f82:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007f86:	4010      	ands	r0, r2
 8007f88:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007f8c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007f90:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007f92:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007f94:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007f98:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007f9c:	4010      	ands	r0, r2
 8007f9e:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007fa2:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007fa6:	4328      	orrs	r0, r5
 8007fa8:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007fac:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007fb0:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8007fb4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007fb8:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007fbc:	698d      	ldr	r5, [r1, #24]
 8007fbe:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007fc0:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007fc2:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007fc4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007fc8:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007fcc:	4010      	ands	r0, r2
 8007fce:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007fd2:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007fd6:	4328      	orrs	r0, r5
 8007fd8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007fdc:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8007fe0:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007fe2:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007fe4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007fe8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007fec:	430a      	orrs	r2, r1
 8007fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8007ff2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007ff4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007ff6:	2002      	movs	r0, #2
 8007ff8:	e7fc      	b.n	8007ff4 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8007ffa:	bf00      	nop
 8007ffc:	ffff0000 	.word	0xffff0000

08008000 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008000:	7c03      	ldrb	r3, [r0, #16]
{
 8008002:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8008004:	2b01      	cmp	r3, #1
 8008006:	d01c      	beq.n	8008042 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8008008:	6802      	ldr	r2, [r0, #0]
 800800a:	2300      	movs	r3, #0
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	6851      	ldr	r1, [r2, #4]
 8008010:	f041 0101 	orr.w	r1, r1, #1
 8008014:	6051      	str	r1, [r2, #4]
 8008016:	6851      	ldr	r1, [r2, #4]
 8008018:	f001 0101 	and.w	r1, r1, #1
 800801c:	9100      	str	r1, [sp, #0]
 800801e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8008026:	f041 0108 	orr.w	r1, r1, #8
 800802a:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 800802e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008032:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8008034:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008036:	f002 0208 	and.w	r2, r2, #8
 800803a:	9201      	str	r2, [sp, #4]
 800803c:	9a01      	ldr	r2, [sp, #4]
}
 800803e:	b002      	add	sp, #8
 8008040:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008042:	2002      	movs	r0, #2
 8008044:	e7fb      	b.n	800803e <HAL_DSI_Start+0x3e>

08008046 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008046:	7c02      	ldrb	r2, [r0, #16]
{
 8008048:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800804a:	2a01      	cmp	r2, #1
 800804c:	d009      	beq.n	8008062 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800804e:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008050:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8008052:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8008056:	f042 0204 	orr.w	r2, r2, #4
 800805a:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800805e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008060:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008062:	2002      	movs	r0, #2
}
 8008064:	4770      	bx	lr

08008066 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8008066:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008068:	7c05      	ldrb	r5, [r0, #16]
{
 800806a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800806c:	2d01      	cmp	r5, #1
 800806e:	d009      	beq.n	8008084 <HAL_DSI_ShortWrite+0x1e>
 8008070:	2501      	movs	r5, #1
 8008072:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8008074:	9d06      	ldr	r5, [sp, #24]
 8008076:	9500      	str	r5, [sp, #0]
 8008078:	f7ff fc6c 	bl	8007954 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800807c:	2300      	movs	r3, #0
 800807e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8008080:	b003      	add	sp, #12
 8008082:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008084:	2002      	movs	r0, #2
 8008086:	e7fb      	b.n	8008080 <HAL_DSI_ShortWrite+0x1a>

08008088 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8008088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800808e:	7c03      	ldrb	r3, [r0, #16]
{
 8008090:	4606      	mov	r6, r0
 8008092:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8008094:	2b01      	cmp	r3, #1
{
 8008096:	4615      	mov	r5, r2
 8008098:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800809c:	d052      	beq.n	8008144 <HAL_DSI_LongWrite+0xbc>
 800809e:	2301      	movs	r3, #1
 80080a0:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80080a2:	f7ff fa61 	bl	8007568 <HAL_GetTick>
 80080a6:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80080a8:	6832      	ldr	r2, [r6, #0]
 80080aa:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80080ac:	f013 0a01 	ands.w	sl, r3, #1
 80080b0:	d019      	beq.n	80080e6 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80080b2:	2c03      	cmp	r4, #3
 80080b4:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 80080b6:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80080ba:	bf28      	it	cs
 80080bc:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 80080be:	4283      	cmp	r3, r0
 80080c0:	d11d      	bne.n	80080fe <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 80080c2:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 80080c4:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 80080c6:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80080ca:	bb10      	cbnz	r0, 8008112 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80080cc:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80080ce:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80080d2:	0223      	lsls	r3, r4, #8
 80080d4:	0224      	lsls	r4, r4, #8
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80080dc:	431d      	orrs	r5, r3
 80080de:	4325      	orrs	r5, r4
 80080e0:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080e2:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80080e4:	e009      	b.n	80080fa <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80080e6:	f7ff fa3f 	bl	8007568 <HAL_GetTick>
 80080ea:	eba0 000b 	sub.w	r0, r0, fp
 80080ee:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80080f2:	d9d9      	bls.n	80080a8 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80080f4:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80080f6:	f886 a010 	strb.w	sl, [r6, #16]
}
 80080fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80080fe:	f818 1003 	ldrb.w	r1, [r8, r3]
 8008102:	3301      	adds	r3, #1
 8008104:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8008108:	fa01 f10c 	lsl.w	r1, r1, ip
 800810c:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8008110:	e7d5      	b.n	80080be <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008112:	2804      	cmp	r0, #4
    fifoword = 0U;
 8008114:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8008118:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 800811a:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800811c:	bf28      	it	cs
 800811e:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008122:	f813 8001 	ldrb.w	r8, [r3, r1]
 8008126:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800812a:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800812c:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8008130:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008132:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8008136:	d1f4      	bne.n	8008122 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8008138:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 800813c:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 800813e:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8008142:	e7c2      	b.n	80080ca <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8008144:	2002      	movs	r0, #2
 8008146:	e7d8      	b.n	80080fa <HAL_DSI_LongWrite+0x72>

08008148 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8008148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800814c:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800814e:	7c03      	ldrb	r3, [r0, #16]
{
 8008150:	4605      	mov	r5, r0
 8008152:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8008154:	2b01      	cmp	r3, #1
{
 8008156:	4617      	mov	r7, r2
 8008158:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800815c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8008160:	d06f      	beq.n	8008242 <HAL_DSI_Read+0xfa>
 8008162:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8008164:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8008166:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8008168:	d90d      	bls.n	8008186 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800816a:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800816e:	2237      	movs	r2, #55	@ 0x37
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	b2f3      	uxtb	r3, r6
 8008174:	f7ff fbee 	bl	8007954 <DSI_ShortWrite.constprop.0>
 8008178:	b128      	cbz	r0, 8008186 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800817a:	2300      	movs	r3, #0

      return HAL_ERROR;
 800817c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800817e:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8008180:	b003      	add	sp, #12
 8008182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8008186:	f1b9 0f06 	cmp.w	r9, #6
 800818a:	d10f      	bne.n	80081ac <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800818c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800818e:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008190:	021b      	lsls	r3, r3, #8
 8008192:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8008196:	f043 0306 	orr.w	r3, r3, #6
 800819a:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800819c:	f7ff f9e4 	bl	8007568 <HAL_GetTick>
 80081a0:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	dc27      	bgt.n	80081f6 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 80081a6:	2000      	movs	r0, #0
 80081a8:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 80081aa:	e7e9      	b.n	8008180 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80081ac:	f1b9 0f04 	cmp.w	r9, #4
 80081b0:	d105      	bne.n	80081be <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081b2:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80081b4:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081b6:	f044 0404 	orr.w	r4, r4, #4
 80081ba:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 80081bc:	e7ee      	b.n	800819c <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80081be:	f1b9 0f14 	cmp.w	r9, #20
 80081c2:	d108      	bne.n	80081d6 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80081c4:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081c8:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80081ca:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081cc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80081d0:	f044 0414 	orr.w	r4, r4, #20
 80081d4:	e7f1      	b.n	80081ba <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80081d6:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80081da:	d1ce      	bne.n	800817a <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80081dc:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081e0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80081e2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80081e8:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80081ec:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80081f0:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80081f4:	e7e1      	b.n	80081ba <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80081f6:	682a      	ldr	r2, [r5, #0]
 80081f8:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80081fa:	f013 0310 	ands.w	r3, r3, #16
 80081fe:	d10d      	bne.n	800821c <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8008200:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8008202:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8008204:	4632      	mov	r2, r6
 8008206:	bf28      	it	cs
 8008208:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800820a:	00d9      	lsls	r1, r3, #3
 800820c:	fa20 f101 	lsr.w	r1, r0, r1
 8008210:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8008212:	3301      	adds	r3, #1
 8008214:	429a      	cmp	r2, r3
 8008216:	d1f8      	bne.n	800820a <HAL_DSI_Read+0xc2>
 8008218:	4417      	add	r7, r2
 800821a:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800821c:	f7ff f9a4 	bl	8007568 <HAL_GetTick>
 8008220:	1b00      	subs	r0, r0, r4
 8008222:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008226:	d903      	bls.n	8008230 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8008228:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800822a:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800822c:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800822e:	e7a7      	b.n	8008180 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8008234:	0652      	lsls	r2, r2, #25
 8008236:	d4b4      	bmi.n	80081a2 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8008238:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800823c:	069b      	lsls	r3, r3, #26
 800823e:	d49c      	bmi.n	800817a <HAL_DSI_Read+0x32>
 8008240:	e7af      	b.n	80081a2 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8008242:	2002      	movs	r0, #2
 8008244:	e79c      	b.n	8008180 <HAL_DSI_Read+0x38>

08008246 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008246:	7c02      	ldrb	r2, [r0, #16]
{
 8008248:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800824a:	2a01      	cmp	r2, #1
 800824c:	d00f      	beq.n	800826e <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800824e:	6802      	ldr	r2, [r0, #0]
 8008250:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008254:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8008258:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800825c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008260:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008264:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008266:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800826a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800826c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800826e:	2002      	movs	r0, #2
}
 8008270:	4770      	bx	lr
	...

08008274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008278:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800827a:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8008440 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800827e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008282:	680a      	ldr	r2, [r1, #0]
 8008284:	fa32 f503 	lsrs.w	r5, r2, r3
 8008288:	d102      	bne.n	8008290 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800828a:	b003      	add	sp, #12
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008290:	2501      	movs	r5, #1
 8008292:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8008296:	ea18 0202 	ands.w	r2, r8, r2
 800829a:	f000 80bb 	beq.w	8008414 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800829e:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082a0:	2703      	movs	r7, #3
 80082a2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082a6:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082aa:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082ae:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082b0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80082b4:	2f01      	cmp	r7, #1
 80082b6:	d834      	bhi.n	8008322 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80082b8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80082ba:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80082be:	68cf      	ldr	r7, [r1, #12]
 80082c0:	fa07 f70e 	lsl.w	r7, r7, lr
 80082c4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80082c8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80082ca:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80082cc:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082d0:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80082d4:	409f      	lsls	r7, r3
 80082d6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80082da:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80082dc:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082de:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80082e0:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80082e4:	688f      	ldr	r7, [r1, #8]
 80082e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80082ea:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80082ee:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082f0:	d119      	bne.n	8008326 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80082f2:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082f6:	f003 0a07 	and.w	sl, r3, #7
 80082fa:	f04f 0b0f 	mov.w	fp, #15
 80082fe:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8008302:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8008306:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800830a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800830e:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008312:	690f      	ldr	r7, [r1, #16]
 8008314:	fa07 f70a 	lsl.w	r7, r7, sl
 8008318:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 800831c:	f8c8 7020 	str.w	r7, [r8, #32]
 8008320:	e001      	b.n	8008326 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008322:	2d03      	cmp	r5, #3
 8008324:	d1da      	bne.n	80082dc <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8008326:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008328:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800832c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008330:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008334:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8008338:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800833a:	d06b      	beq.n	8008414 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800833c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8008340:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008344:	f003 0c03 	and.w	ip, r3, #3
 8008348:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800834c:	f045 0502 	orr.w	r5, r5, #2
 8008350:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008354:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008358:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800835c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008360:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008364:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008368:	f005 0502 	and.w	r5, r5, #2
 800836c:	9501      	str	r5, [sp, #4]
 800836e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008370:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008372:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008376:	4d31      	ldr	r5, [pc, #196]	@ (800843c <HAL_GPIO_Init+0x1c8>)
 8008378:	42a8      	cmp	r0, r5
 800837a:	d04d      	beq.n	8008418 <HAL_GPIO_Init+0x1a4>
 800837c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008380:	42a8      	cmp	r0, r5
 8008382:	d04b      	beq.n	800841c <HAL_GPIO_Init+0x1a8>
 8008384:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008388:	42a8      	cmp	r0, r5
 800838a:	d049      	beq.n	8008420 <HAL_GPIO_Init+0x1ac>
 800838c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008390:	42a8      	cmp	r0, r5
 8008392:	d047      	beq.n	8008424 <HAL_GPIO_Init+0x1b0>
 8008394:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008398:	42a8      	cmp	r0, r5
 800839a:	d045      	beq.n	8008428 <HAL_GPIO_Init+0x1b4>
 800839c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80083a0:	42a8      	cmp	r0, r5
 80083a2:	d043      	beq.n	800842c <HAL_GPIO_Init+0x1b8>
 80083a4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80083a8:	42a8      	cmp	r0, r5
 80083aa:	d041      	beq.n	8008430 <HAL_GPIO_Init+0x1bc>
 80083ac:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80083b0:	42a8      	cmp	r0, r5
 80083b2:	d03f      	beq.n	8008434 <HAL_GPIO_Init+0x1c0>
 80083b4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80083b8:	42a8      	cmp	r0, r5
 80083ba:	d03d      	beq.n	8008438 <HAL_GPIO_Init+0x1c4>
 80083bc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80083c0:	42a8      	cmp	r0, r5
 80083c2:	bf14      	ite	ne
 80083c4:	250a      	movne	r5, #10
 80083c6:	2509      	moveq	r5, #9
 80083c8:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083cc:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80083d0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083d4:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80083d6:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80083da:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80083dc:	bf0c      	ite	eq
 80083de:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80083e0:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083e2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80083e6:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80083e8:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80083ea:	bf0c      	ite	eq
 80083ec:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80083ee:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083f0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80083f4:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80083f6:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80083fa:	bf0c      	ite	eq
 80083fc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80083fe:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008400:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8008402:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8008406:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 800840a:	bf54      	ite	pl
 800840c:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800840e:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8008410:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8008414:	3301      	adds	r3, #1
 8008416:	e734      	b.n	8008282 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008418:	2500      	movs	r5, #0
 800841a:	e7d5      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 800841c:	2501      	movs	r5, #1
 800841e:	e7d3      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 8008420:	2502      	movs	r5, #2
 8008422:	e7d1      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 8008424:	2503      	movs	r5, #3
 8008426:	e7cf      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 8008428:	2504      	movs	r5, #4
 800842a:	e7cd      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 800842c:	2505      	movs	r5, #5
 800842e:	e7cb      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 8008430:	2506      	movs	r5, #6
 8008432:	e7c9      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 8008434:	2507      	movs	r5, #7
 8008436:	e7c7      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 8008438:	2508      	movs	r5, #8
 800843a:	e7c5      	b.n	80083c8 <HAL_GPIO_Init+0x154>
 800843c:	58020000 	.word	0x58020000
 8008440:	58024400 	.word	0x58024400

08008444 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008448:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800844a:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800844e:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008452:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008456:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800845a:	fa31 f302 	lsrs.w	r3, r1, r2
 800845e:	d101      	bne.n	8008464 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008464:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8008468:	ea1c 0601 	ands.w	r6, ip, r1
 800846c:	d070      	beq.n	8008550 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800846e:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008472:	f002 0703 	and.w	r7, r2, #3
 8008476:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800847a:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800847c:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008480:	fa08 f907 	lsl.w	r9, r8, r7
 8008484:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008488:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800848c:	4b3a      	ldr	r3, [pc, #232]	@ (8008578 <HAL_GPIO_DeInit+0x134>)
 800848e:	4298      	cmp	r0, r3
 8008490:	d060      	beq.n	8008554 <HAL_GPIO_DeInit+0x110>
 8008492:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008496:	4298      	cmp	r0, r3
 8008498:	d05e      	beq.n	8008558 <HAL_GPIO_DeInit+0x114>
 800849a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800849e:	4298      	cmp	r0, r3
 80084a0:	d05c      	beq.n	800855c <HAL_GPIO_DeInit+0x118>
 80084a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084a6:	4298      	cmp	r0, r3
 80084a8:	d05a      	beq.n	8008560 <HAL_GPIO_DeInit+0x11c>
 80084aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084ae:	4298      	cmp	r0, r3
 80084b0:	d058      	beq.n	8008564 <HAL_GPIO_DeInit+0x120>
 80084b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084b6:	4298      	cmp	r0, r3
 80084b8:	d056      	beq.n	8008568 <HAL_GPIO_DeInit+0x124>
 80084ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084be:	4298      	cmp	r0, r3
 80084c0:	d054      	beq.n	800856c <HAL_GPIO_DeInit+0x128>
 80084c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084c6:	4298      	cmp	r0, r3
 80084c8:	d052      	beq.n	8008570 <HAL_GPIO_DeInit+0x12c>
 80084ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084ce:	4298      	cmp	r0, r3
 80084d0:	d050      	beq.n	8008574 <HAL_GPIO_DeInit+0x130>
 80084d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084d6:	4298      	cmp	r0, r3
 80084d8:	bf14      	ite	ne
 80084da:	230a      	movne	r3, #10
 80084dc:	2309      	moveq	r3, #9
 80084de:	40bb      	lsls	r3, r7
 80084e0:	4573      	cmp	r3, lr
 80084e2:	d117      	bne.n	8008514 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80084e4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80084e8:	ea23 0306 	bic.w	r3, r3, r6
 80084ec:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80084f0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80084f4:	ea23 0306 	bic.w	r3, r3, r6
 80084f8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	ea23 0306 	bic.w	r3, r3, r6
 8008502:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	ea23 0306 	bic.w	r3, r3, r6
 800850a:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800850c:	68ab      	ldr	r3, [r5, #8]
 800850e:	ea23 0309 	bic.w	r3, r3, r9
 8008512:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008514:	0053      	lsls	r3, r2, #1
 8008516:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008518:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800851a:	fa0b f303 	lsl.w	r3, fp, r3
 800851e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008522:	431d      	orrs	r5, r3
 8008524:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008526:	f002 0507 	and.w	r5, r2, #7
 800852a:	6a37      	ldr	r7, [r6, #32]
 800852c:	00ad      	lsls	r5, r5, #2
 800852e:	fa08 f505 	lsl.w	r5, r8, r5
 8008532:	ea27 0705 	bic.w	r7, r7, r5
 8008536:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008538:	68c5      	ldr	r5, [r0, #12]
 800853a:	ea25 0503 	bic.w	r5, r5, r3
 800853e:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008540:	6845      	ldr	r5, [r0, #4]
 8008542:	ea25 050c 	bic.w	r5, r5, ip
 8008546:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008548:	6885      	ldr	r5, [r0, #8]
 800854a:	ea25 0303 	bic.w	r3, r5, r3
 800854e:	6083      	str	r3, [r0, #8]
    position++;
 8008550:	3201      	adds	r2, #1
 8008552:	e782      	b.n	800845a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008554:	2300      	movs	r3, #0
 8008556:	e7c2      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008558:	2301      	movs	r3, #1
 800855a:	e7c0      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 800855c:	2302      	movs	r3, #2
 800855e:	e7be      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008560:	2303      	movs	r3, #3
 8008562:	e7bc      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008564:	2304      	movs	r3, #4
 8008566:	e7ba      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008568:	2305      	movs	r3, #5
 800856a:	e7b8      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 800856c:	2306      	movs	r3, #6
 800856e:	e7b6      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008570:	2307      	movs	r3, #7
 8008572:	e7b4      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008574:	2308      	movs	r3, #8
 8008576:	e7b2      	b.n	80084de <HAL_GPIO_DeInit+0x9a>
 8008578:	58020000 	.word	0x58020000

0800857c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800857c:	6903      	ldr	r3, [r0, #16]
 800857e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008580:	bf14      	ite	ne
 8008582:	2001      	movne	r0, #1
 8008584:	2000      	moveq	r0, #0
 8008586:	4770      	bx	lr

08008588 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008588:	b10a      	cbz	r2, 800858e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800858a:	6181      	str	r1, [r0, #24]
  }
}
 800858c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800858e:	0409      	lsls	r1, r1, #16
 8008590:	e7fb      	b.n	800858a <HAL_GPIO_WritePin+0x2>

08008592 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008592:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008594:	ea01 0203 	and.w	r2, r1, r3
 8008598:	ea21 0103 	bic.w	r1, r1, r3
 800859c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085a0:	6181      	str	r1, [r0, #24]
}
 80085a2:	4770      	bx	lr

080085a4 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80085a4:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <HAL_HSEM_FastTake+0x14>)
 80085a6:	3020      	adds	r0, #32
 80085a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 80085ac:	4b03      	ldr	r3, [pc, #12]	@ (80085bc <HAL_HSEM_FastTake+0x18>)
 80085ae:	1ac0      	subs	r0, r0, r3
 80085b0:	bf18      	it	ne
 80085b2:	2001      	movne	r0, #1
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	58026400 	.word	0x58026400
 80085bc:	80000300 	.word	0x80000300

080085c0 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80085c0:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 80085c4:	4b01      	ldr	r3, [pc, #4]	@ (80085cc <HAL_HSEM_Release+0xc>)
 80085c6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 80085ca:	4770      	bx	lr
 80085cc:	58026400 	.word	0x58026400

080085d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085d0:	6803      	ldr	r3, [r0, #0]
 80085d2:	699a      	ldr	r2, [r3, #24]
 80085d4:	0791      	lsls	r1, r2, #30
 80085d6:	d501      	bpl.n	80085dc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085d8:	2200      	movs	r2, #0
 80085da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	07d2      	lsls	r2, r2, #31
 80085e0:	d403      	bmi.n	80085ea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	619a      	str	r2, [r3, #24]
  }
}
 80085ea:	4770      	bx	lr

080085ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085ec:	b530      	push	{r4, r5, lr}
 80085ee:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085f0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80085f4:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085f6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80085f8:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80085fe:	4a05      	ldr	r2, [pc, #20]	@ (8008614 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008600:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008602:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008606:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800860a:	ea20 0002 	bic.w	r0, r0, r2
 800860e:	4303      	orrs	r3, r0
 8008610:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008612:	bd30      	pop	{r4, r5, pc}
 8008614:	03ff63ff 	.word	0x03ff63ff

08008618 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8008618:	6803      	ldr	r3, [r0, #0]
{
 800861a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800861e:	699c      	ldr	r4, [r3, #24]
{
 8008620:	4605      	mov	r5, r0
 8008622:	460f      	mov	r7, r1
 8008624:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008626:	f014 0410 	ands.w	r4, r4, #16
 800862a:	d06f      	beq.n	800870c <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 800862c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800862e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008630:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008632:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	0690      	lsls	r0, r2, #26
 800863a:	d461      	bmi.n	8008700 <I2C_IsErrorOccurred+0xe8>
 800863c:	f1b8 0f00 	cmp.w	r8, #0
 8008640:	d035      	beq.n	80086ae <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8008642:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8008646:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008648:	682e      	ldr	r6, [r5, #0]
 800864a:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800864c:	05d9      	lsls	r1, r3, #23
 800864e:	d505      	bpl.n	800865c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008650:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008654:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008658:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800865a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800865c:	055a      	lsls	r2, r3, #21
 800865e:	d505      	bpl.n	800866c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008664:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008668:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800866a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800866c:	059b      	lsls	r3, r3, #22
 800866e:	d54f      	bpl.n	8008710 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008670:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008674:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008678:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800867a:	4628      	mov	r0, r5
 800867c:	f7ff ffa8 	bl	80085d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008680:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8008682:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008684:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8008688:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800868c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008690:	f023 0301 	bic.w	r3, r3, #1
 8008694:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8008696:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8008698:	4323      	orrs	r3, r4
 800869a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800869c:	2320      	movs	r3, #32
 800869e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80086a8:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80086ac:	e032      	b.n	8008714 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80086ae:	1c7a      	adds	r2, r7, #1
 80086b0:	d0c1      	beq.n	8008636 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80086b2:	f7fe ff59 	bl	8007568 <HAL_GetTick>
 80086b6:	1b80      	subs	r0, r0, r6
 80086b8:	42b8      	cmp	r0, r7
 80086ba:	d801      	bhi.n	80086c0 <I2C_IsErrorOccurred+0xa8>
 80086bc:	2f00      	cmp	r7, #0
 80086be:	d1b9      	bne.n	8008634 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80086c4:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086c8:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80086ca:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80086cc:	0400      	lsls	r0, r0, #16
 80086ce:	d50a      	bpl.n	80086e6 <I2C_IsErrorOccurred+0xce>
 80086d0:	0449      	lsls	r1, r1, #17
 80086d2:	d408      	bmi.n	80086e6 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80086d4:	2a20      	cmp	r2, #32
 80086d6:	d006      	beq.n	80086e6 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80086d8:	685a      	ldr	r2, [r3, #4]
 80086da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80086de:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80086e0:	f7fe ff42 	bl	8007568 <HAL_GetTick>
 80086e4:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086e6:	682b      	ldr	r3, [r5, #0]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	069b      	lsls	r3, r3, #26
 80086ec:	d4a2      	bmi.n	8008634 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80086ee:	f7fe ff3b 	bl	8007568 <HAL_GetTick>
 80086f2:	1b80      	subs	r0, r0, r6
 80086f4:	2819      	cmp	r0, #25
 80086f6:	d9f6      	bls.n	80086e6 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80086f8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80086fa:	f04f 0801 	mov.w	r8, #1
 80086fe:	e799      	b.n	8008634 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8008700:	f1b8 0f00 	cmp.w	r8, #0
 8008704:	d19d      	bne.n	8008642 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008706:	2220      	movs	r2, #32
 8008708:	61da      	str	r2, [r3, #28]
 800870a:	e79a      	b.n	8008642 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800870c:	4620      	mov	r0, r4
 800870e:	e79b      	b.n	8008648 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008710:	2800      	cmp	r0, #0
 8008712:	d1b2      	bne.n	800867a <I2C_IsErrorOccurred+0x62>
}
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008718 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	460d      	mov	r5, r1
 800871e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	079b      	lsls	r3, r3, #30
 8008726:	d501      	bpl.n	800872c <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008728:	2000      	movs	r0, #0
 800872a:	e01f      	b.n	800876c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800872c:	4632      	mov	r2, r6
 800872e:	4629      	mov	r1, r5
 8008730:	4620      	mov	r0, r4
 8008732:	f7ff ff71 	bl	8008618 <I2C_IsErrorOccurred>
 8008736:	b9c0      	cbnz	r0, 800876a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8008738:	1c6a      	adds	r2, r5, #1
 800873a:	d0f1      	beq.n	8008720 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800873c:	f7fe ff14 	bl	8007568 <HAL_GetTick>
 8008740:	1b80      	subs	r0, r0, r6
 8008742:	42a8      	cmp	r0, r5
 8008744:	d801      	bhi.n	800874a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008746:	2d00      	cmp	r5, #0
 8008748:	d1ea      	bne.n	8008720 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	f013 0302 	ands.w	r3, r3, #2
 8008752:	d1e5      	bne.n	8008720 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008754:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8008756:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800875a:	f042 0220 	orr.w	r2, r2, #32
 800875e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008760:	2220      	movs	r2, #32
 8008762:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008766:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800876a:	2001      	movs	r0, #1
}
 800876c:	bd70      	pop	{r4, r5, r6, pc}

0800876e <I2C_WaitOnFlagUntilTimeout>:
{
 800876e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008772:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008776:	4604      	mov	r4, r0
 8008778:	460f      	mov	r7, r1
 800877a:	4616      	mov	r6, r2
 800877c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	ea37 0303 	bics.w	r3, r7, r3
 8008786:	bf0c      	ite	eq
 8008788:	2301      	moveq	r3, #1
 800878a:	2300      	movne	r3, #0
 800878c:	42b3      	cmp	r3, r6
 800878e:	d001      	beq.n	8008794 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008790:	2000      	movs	r0, #0
 8008792:	e025      	b.n	80087e0 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008794:	4642      	mov	r2, r8
 8008796:	4629      	mov	r1, r5
 8008798:	4620      	mov	r0, r4
 800879a:	f7ff ff3d 	bl	8008618 <I2C_IsErrorOccurred>
 800879e:	b9f0      	cbnz	r0, 80087de <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80087a0:	1c6b      	adds	r3, r5, #1
 80087a2:	d0ec      	beq.n	800877e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a4:	f7fe fee0 	bl	8007568 <HAL_GetTick>
 80087a8:	eba0 0008 	sub.w	r0, r0, r8
 80087ac:	42a8      	cmp	r0, r5
 80087ae:	d801      	bhi.n	80087b4 <I2C_WaitOnFlagUntilTimeout+0x46>
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	d1e4      	bne.n	800877e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	ea37 0303 	bics.w	r3, r7, r3
 80087bc:	bf0c      	ite	eq
 80087be:	2301      	moveq	r3, #1
 80087c0:	2300      	movne	r3, #0
 80087c2:	42b3      	cmp	r3, r6
 80087c4:	d1db      	bne.n	800877e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80087c8:	f043 0320 	orr.w	r3, r3, #32
 80087cc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087ce:	2320      	movs	r3, #32
 80087d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80087da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80087de:	2001      	movs	r0, #1
}
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080087e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4604      	mov	r4, r0
 80087e8:	460d      	mov	r5, r1
 80087ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	069b      	lsls	r3, r3, #26
 80087f2:	d501      	bpl.n	80087f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80087f4:	2000      	movs	r0, #0
 80087f6:	e01d      	b.n	8008834 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087f8:	4632      	mov	r2, r6
 80087fa:	4629      	mov	r1, r5
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff ff0b 	bl	8008618 <I2C_IsErrorOccurred>
 8008802:	b9b0      	cbnz	r0, 8008832 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008804:	f7fe feb0 	bl	8007568 <HAL_GetTick>
 8008808:	1b80      	subs	r0, r0, r6
 800880a:	42a8      	cmp	r0, r5
 800880c:	d801      	bhi.n	8008812 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800880e:	2d00      	cmp	r5, #0
 8008810:	d1ec      	bne.n	80087ec <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	f013 0320 	ands.w	r3, r3, #32
 800881a:	d1e7      	bne.n	80087ec <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800881c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800881e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008822:	f042 0220 	orr.w	r2, r2, #32
 8008826:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008828:	2220      	movs	r2, #32
 800882a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800882e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008832:	2001      	movs	r0, #1
}
 8008834:	bd70      	pop	{r4, r5, r6, pc}

08008836 <HAL_I2C_MspInit>:
}
 8008836:	4770      	bx	lr

08008838 <HAL_I2C_Init>:
{
 8008838:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800883a:	4604      	mov	r4, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d04e      	beq.n	80088de <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008840:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008844:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008848:	b91b      	cbnz	r3, 8008852 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800884a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800884e:	f7ff fff2 	bl	8008836 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008852:	2324      	movs	r3, #36	@ 0x24
 8008854:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008862:	6862      	ldr	r2, [r4, #4]
 8008864:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008868:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008870:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008872:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008876:	2901      	cmp	r1, #1
 8008878:	d106      	bne.n	8008888 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800887a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800887e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008886:	e007      	b.n	8008898 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008888:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800888c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800888e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008890:	d1f6      	bne.n	8008880 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008898:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800889a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800889c:	685a      	ldr	r2, [r3, #4]
 800889e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80088a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088a6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088ae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088b0:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80088b4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80088b6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80088bc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088be:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	f042 0201 	orr.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088d2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088d6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80088dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80088de:	2001      	movs	r0, #1
 80088e0:	e7fc      	b.n	80088dc <HAL_I2C_Init+0xa4>

080088e2 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80088e2:	4770      	bx	lr

080088e4 <HAL_I2C_DeInit>:
{
 80088e4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80088e6:	4604      	mov	r4, r0
 80088e8:	b198      	cbz	r0, 8008912 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80088ea:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80088ec:	2324      	movs	r3, #36	@ 0x24
 80088ee:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80088f2:	6813      	ldr	r3, [r2, #0]
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80088fa:	f7ff fff2 	bl	80088e2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088fe:	2000      	movs	r0, #0
 8008900:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8008902:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008906:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800890a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800890c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008910:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008912:	2001      	movs	r0, #1
 8008914:	e7fc      	b.n	8008910 <HAL_I2C_DeInit+0x2c>
	...

08008918 <HAL_I2C_Mem_Write>:
{
 8008918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800891e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008922:	4604      	mov	r4, r0
 8008924:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008926:	2b20      	cmp	r3, #32
{
 8008928:	4616      	mov	r6, r2
 800892a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800892e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008932:	f040 80c6 	bne.w	8008ac2 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8008936:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008938:	b113      	cbz	r3, 8008940 <HAL_I2C_Mem_Write+0x28>
 800893a:	f1ba 0f00 	cmp.w	sl, #0
 800893e:	d106      	bne.n	800894e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008944:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008946:	2001      	movs	r0, #1
}
 8008948:	b003      	add	sp, #12
 800894a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800894e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008952:	2b01      	cmp	r3, #1
 8008954:	f000 80b5 	beq.w	8008ac2 <HAL_I2C_Mem_Write+0x1aa>
 8008958:	f04f 0b01 	mov.w	fp, #1
 800895c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008960:	f7fe fe02 	bl	8007568 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008964:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008966:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008968:	9000      	str	r0, [sp, #0]
 800896a:	465a      	mov	r2, fp
 800896c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff fefc 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 8008976:	2800      	cmp	r0, #0
 8008978:	d1e5      	bne.n	8008946 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800897a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 800897c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800897e:	fa5f f289 	uxtb.w	r2, r9
 8008982:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008984:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008988:	2340      	movs	r3, #64	@ 0x40
 800898a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800898e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008990:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008992:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008994:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008996:	4b4c      	ldr	r3, [pc, #304]	@ (8008ac8 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8008998:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089a2:	f7ff fe23 	bl	80085ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a6:	462a      	mov	r2, r5
 80089a8:	4641      	mov	r1, r8
 80089aa:	4620      	mov	r0, r4
 80089ac:	f7ff feb4 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 80089b0:	bb18      	cbnz	r0, 80089fa <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089b2:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089b6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089b8:	d115      	bne.n	80089e6 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089ba:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	@ 0x80
 80089c0:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089c2:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80089c4:	4643      	mov	r3, r8
 80089c6:	9500      	str	r5, [sp, #0]
 80089c8:	f7ff fed1 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 80089cc:	b9a8      	cbnz	r0, 80089fa <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2bff      	cmp	r3, #255	@ 0xff
 80089d4:	d815      	bhi.n	8008a02 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80089d6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80089dc:	b292      	uxth	r2, r2
 80089de:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	9000      	str	r0, [sp, #0]
 80089e4:	e012      	b.n	8008a0c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80089e6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089e8:	4641      	mov	r1, r8
 80089ea:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80089ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089ee:	462a      	mov	r2, r5
 80089f0:	f7ff fe92 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 80089f4:	b908      	cbnz	r0, 80089fa <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	e7df      	b.n	80089ba <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80089fa:	2300      	movs	r3, #0
 80089fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008a00:	e7a1      	b.n	8008946 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a02:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a08:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a0a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7ff fdec 	bl	80085ec <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a14:	462a      	mov	r2, r5
 8008a16:	4641      	mov	r1, r8
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7ff fe7d 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d191      	bne.n	8008946 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a22:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008a24:	6822      	ldr	r2, [r4, #0]
 8008a26:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008a2a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008a2c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008a2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a30:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008a32:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008a34:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8008a36:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008a38:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008a3a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a3c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008a3e:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	b1b3      	cbz	r3, 8008a72 <HAL_I2C_Mem_Write+0x15a>
 8008a44:	b9aa      	cbnz	r2, 8008a72 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a46:	4643      	mov	r3, r8
 8008a48:	2180      	movs	r1, #128	@ 0x80
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	9500      	str	r5, [sp, #0]
 8008a4e:	f7ff fe8e 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f47f af77 	bne.w	8008946 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a58:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	2bff      	cmp	r3, #255	@ 0xff
 8008a5e:	d928      	bls.n	8008ab2 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a60:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a66:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a68:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7ff fdbd 	bl	80085ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008a72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1cc      	bne.n	8008a14 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a7a:	462a      	mov	r2, r5
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f7ff feb0 	bl	80087e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f47f af5e 	bne.w	8008946 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	2120      	movs	r1, #32
 8008a8e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008a96:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008a9a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008aa4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008aa8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008aac:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008ab0:	e74a      	b.n	8008948 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008ab2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ab4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008ab8:	b292      	uxth	r2, r2
 8008aba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	9000      	str	r0, [sp, #0]
 8008ac0:	e7d3      	b.n	8008a6a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8008ac2:	2002      	movs	r0, #2
 8008ac4:	e740      	b.n	8008948 <HAL_I2C_Mem_Write+0x30>
 8008ac6:	bf00      	nop
 8008ac8:	80002000 	.word	0x80002000

08008acc <HAL_I2C_Mem_Read>:
{
 8008acc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ad2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ada:	2b20      	cmp	r3, #32
{
 8008adc:	4616      	mov	r6, r2
 8008ade:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008ae2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ae6:	f040 80c9 	bne.w	8008c7c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8008aea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008aec:	b113      	cbz	r3, 8008af4 <HAL_I2C_Mem_Read+0x28>
 8008aee:	f1ba 0f00 	cmp.w	sl, #0
 8008af2:	d106      	bne.n	8008b02 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008af8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008afa:	2001      	movs	r0, #1
}
 8008afc:	b003      	add	sp, #12
 8008afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008b02:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	f000 80b8 	beq.w	8008c7c <HAL_I2C_Mem_Read+0x1b0>
 8008b0c:	f04f 0b01 	mov.w	fp, #1
 8008b10:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008b14:	f7fe fd28 	bl	8007568 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b18:	2319      	movs	r3, #25
 8008b1a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008b1c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b1e:	465a      	mov	r2, fp
 8008b20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008b24:	4620      	mov	r0, r4
 8008b26:	f7ff fe22 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d1e4      	bne.n	8008afa <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b30:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8008b32:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b34:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b36:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b3a:	2240      	movs	r2, #64	@ 0x40
 8008b3c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008b40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b42:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b44:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008b46:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b48:	4a4d      	ldr	r2, [pc, #308]	@ (8008c80 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8008b4a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b4e:	9200      	str	r2, [sp, #0]
 8008b50:	fa5f f289 	uxtb.w	r2, r9
 8008b54:	f7ff fd4a 	bl	80085ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b58:	462a      	mov	r2, r5
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f7ff fddb 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b62:	bb20      	cbnz	r0, 8008bae <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b64:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b68:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b6a:	d116      	bne.n	8008b9a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b6c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2140      	movs	r1, #64	@ 0x40
 8008b72:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b74:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b76:	4643      	mov	r3, r8
 8008b78:	9500      	str	r5, [sp, #0]
 8008b7a:	f7ff fdf8 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 8008b7e:	b9b0      	cbnz	r0, 8008bae <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b80:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2bff      	cmp	r3, #255	@ 0xff
 8008b86:	4b3f      	ldr	r3, [pc, #252]	@ (8008c84 <HAL_I2C_Mem_Read+0x1b8>)
 8008b88:	d815      	bhi.n	8008bb6 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008b8a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008b8c:	b292      	uxth	r2, r2
 8008b8e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b98:	e012      	b.n	8008bc0 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b9a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008ba0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	f7ff fdb8 	bl	8008718 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ba8:	b908      	cbnz	r0, 8008bae <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	e7de      	b.n	8008b6c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008bb4:	e7a1      	b.n	8008afa <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bb6:	22ff      	movs	r2, #255	@ 0xff
 8008bb8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f7ff fd12 	bl	80085ec <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008bc8:	4643      	mov	r3, r8
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2104      	movs	r1, #4
 8008bce:	4620      	mov	r0, r4
 8008bd0:	9500      	str	r5, [sp, #0]
 8008bd2:	f7ff fdcc 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d18f      	bne.n	8008afa <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008be0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008be2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008be4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008be6:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008be8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008bea:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008bec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8008bee:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008bf0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8008bf2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bf8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	b1b3      	cbz	r3, 8008c2c <HAL_I2C_Mem_Read+0x160>
 8008bfe:	b9aa      	cbnz	r2, 8008c2c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c00:	4643      	mov	r3, r8
 8008c02:	2180      	movs	r1, #128	@ 0x80
 8008c04:	4620      	mov	r0, r4
 8008c06:	9500      	str	r5, [sp, #0]
 8008c08:	f7ff fdb1 	bl	800876e <I2C_WaitOnFlagUntilTimeout>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f47f af74 	bne.w	8008afa <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2bff      	cmp	r3, #255	@ 0xff
 8008c18:	d928      	bls.n	8008c6c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c1a:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c20:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c22:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c24:	4639      	mov	r1, r7
 8008c26:	4620      	mov	r0, r4
 8008c28:	f7ff fce0 	bl	80085ec <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008c2c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1c9      	bne.n	8008bc8 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c34:	462a      	mov	r2, r5
 8008c36:	4641      	mov	r1, r8
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7ff fdd3 	bl	80087e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f47f af5b 	bne.w	8008afa <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	2120      	movs	r1, #32
 8008c48:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008c50:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008c54:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008c58:	f022 0201 	bic.w	r2, r2, #1
 8008c5c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008c5e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008c62:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c66:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008c6a:	e747      	b.n	8008afc <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008c6c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008c72:	b292      	uxth	r2, r2
 8008c74:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c76:	b2d2      	uxtb	r2, r2
 8008c78:	9000      	str	r0, [sp, #0]
 8008c7a:	e7d3      	b.n	8008c24 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008c7c:	2002      	movs	r0, #2
 8008c7e:	e73d      	b.n	8008afc <HAL_I2C_Mem_Read+0x30>
 8008c80:	80002000 	.word	0x80002000
 8008c84:	80002400 	.word	0x80002400

08008c88 <HAL_I2C_GetState>:
  return hi2c->State;
 8008c88:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008c8c:	4770      	bx	lr

08008c8e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008c8e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8008c90:	4770      	bx	lr

08008c92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c92:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c94:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008c98:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c9a:	2a20      	cmp	r2, #32
 8008c9c:	b2d4      	uxtb	r4, r2
 8008c9e:	d11c      	bne.n	8008cda <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ca0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008ca4:	2a01      	cmp	r2, #1
 8008ca6:	d018      	beq.n	8008cda <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ca8:	2224      	movs	r2, #36	@ 0x24
 8008caa:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cae:	6802      	ldr	r2, [r0, #0]
 8008cb0:	6810      	ldr	r0, [r2, #0]
 8008cb2:	f020 0001 	bic.w	r0, r0, #1
 8008cb6:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008cb8:	6810      	ldr	r0, [r2, #0]
 8008cba:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008cbe:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cc0:	6810      	ldr	r0, [r2, #0]
 8008cc2:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cc4:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8008cc6:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008cc8:	6811      	ldr	r1, [r2, #0]
 8008cca:	f041 0101 	orr.w	r1, r1, #1
 8008cce:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008cd0:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008cd4:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008cd8:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008cda:	2002      	movs	r0, #2
 8008cdc:	e7fc      	b.n	8008cd8 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08008cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cde:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ce0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008ce4:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ce6:	2a20      	cmp	r2, #32
 8008ce8:	b2d4      	uxtb	r4, r2
 8008cea:	d11b      	bne.n	8008d24 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cec:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008cf0:	2a01      	cmp	r2, #1
 8008cf2:	d017      	beq.n	8008d24 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008cf4:	2224      	movs	r2, #36	@ 0x24
 8008cf6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008cfa:	6802      	ldr	r2, [r0, #0]
 8008cfc:	6810      	ldr	r0, [r2, #0]
 8008cfe:	f020 0001 	bic.w	r0, r0, #1
 8008d02:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d04:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d06:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d0a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d0e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8008d10:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008d12:	6811      	ldr	r1, [r2, #0]
 8008d14:	f041 0101 	orr.w	r1, r1, #1
 8008d18:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008d1a:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008d1e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008d22:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008d24:	2002      	movs	r0, #2
 8008d26:	e7fc      	b.n	8008d22 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008d28 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8008d28:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8008d2a:	2401      	movs	r4, #1
 8008d2c:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8008d2e:	2500      	movs	r5, #0
 8008d30:	194e      	adds	r6, r1, r5
 8008d32:	443d      	add	r5, r7
 8008d34:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8008d36:	42be      	cmp	r6, r7
 8008d38:	d112      	bne.n	8008d60 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8008d3a:	2c10      	cmp	r4, #16
 8008d3c:	d108      	bne.n	8008d50 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8008d3e:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008d40:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8008d42:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8008d44:	601d      	str	r5, [r3, #0]
  p = 0;
 8008d46:	4623      	mov	r3, r4
  si = Huffsize[0];
 8008d48:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8008d4a:	5cc8      	ldrb	r0, [r1, r3]
 8008d4c:	b9d8      	cbnz	r0, 8008d86 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8008d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8008d50:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8008d52:	3401      	adds	r4, #1
 8008d54:	197e      	adds	r6, r7, r5
 8008d56:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8008d5a:	d9e9      	bls.n	8008d30 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8008d5c:	2001      	movs	r0, #1
 8008d5e:	e7f6      	b.n	8008d4e <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8008d60:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8008d64:	e7e7      	b.n	8008d36 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8008d66:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8008d6a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8008d6c:	5cc8      	ldrb	r0, [r1, r3]
 8008d6e:	19dc      	adds	r4, r3, r7
 8008d70:	42a8      	cmp	r0, r5
 8008d72:	d0f8      	beq.n	8008d66 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8008d74:	2d1f      	cmp	r5, #31
 8008d76:	d8f1      	bhi.n	8008d5c <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8008d78:	fa06 f005 	lsl.w	r0, r6, r5
 8008d7c:	42a0      	cmp	r0, r4
 8008d7e:	d9ed      	bls.n	8008d5c <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8008d80:	0064      	lsls	r4, r4, #1
    si++;
 8008d82:	3501      	adds	r5, #1
 8008d84:	e7e1      	b.n	8008d4a <JPEG_Bits_To_SizeCodes+0x22>
 8008d86:	1ae7      	subs	r7, r4, r3
 8008d88:	e7f0      	b.n	8008d6c <JPEG_Bits_To_SizeCodes+0x44>

08008d8a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d8c:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8008d90:	460d      	mov	r5, r1
 8008d92:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008d94:	ab01      	add	r3, sp, #4
 8008d96:	aa43      	add	r2, sp, #268	@ 0x10c
 8008d98:	a902      	add	r1, sp, #8
 8008d9a:	f7ff ffc5 	bl	8008d28 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008d9e:	b940      	cbnz	r0, 8008db2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 8008da0:	9e01      	ldr	r6, [sp, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	460a      	mov	r2, r1
 8008da6:	f104 010f 	add.w	r1, r4, #15
 8008daa:	360f      	adds	r6, #15
 8008dac:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8008dae:	42a1      	cmp	r1, r4
 8008db0:	d102      	bne.n	8008db8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008db2:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8008db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8008db8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008dbc:	2e0b      	cmp	r6, #11
 8008dbe:	d80a      	bhi.n	8008dd6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008dc0:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8008dc4:	f853 cb04 	ldr.w	ip, [r3], #4
 8008dc8:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008dcc:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008dd0:	3f01      	subs	r7, #1
 8008dd2:	55af      	strb	r7, [r5, r6]
      k++;
 8008dd4:	e7eb      	b.n	8008dae <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	e7eb      	b.n	8008db2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

08008dda <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008dda:	4603      	mov	r3, r0
 8008ddc:	4608      	mov	r0, r1
 8008dde:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008de0:	681c      	ldr	r4, [r3, #0]
{
 8008de2:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008de4:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d125      	bne.n	8008e38 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008dec:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8008df0:	a901      	add	r1, sp, #4
 8008df2:	f7ff ffca 	bl	8008d8a <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8008df6:	b9e8      	cbnz	r0, 8008e34 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8008df8:	aa01      	add	r2, sp, #4
 8008dfa:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008dfe:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8008e02:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8008e04:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8008e06:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008e08:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8008e0a:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008e0c:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8008e10:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008e12:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008e14:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008e18:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8008e1c:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008e1e:	7b13      	ldrb	r3, [r2, #12]
 8008e20:	021b      	lsls	r3, r3, #8
 8008e22:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008e26:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008e28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008e2c:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008e30:	42b4      	cmp	r4, r6
 8008e32:	d1e9      	bne.n	8008e08 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008e34:	b011      	add	sp, #68	@ 0x44
 8008e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8008e38:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d102      	bne.n	8008e46 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008e40:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8008e44:	e7d4      	b.n	8008df0 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8008e46:	2001      	movs	r0, #1
 8008e48:	e7f4      	b.n	8008e34 <JPEG_Set_HuffDC_Mem+0x5a>

08008e4a <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8008e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008e4e:	6804      	ldr	r4, [r0, #0]
{
 8008e50:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8008e54:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008e56:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d149      	bne.n	8008ef2 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008e5e:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008e62:	466b      	mov	r3, sp
 8008e64:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8008e68:	a901      	add	r1, sp, #4
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ff5c 	bl	8008d28 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d13a      	bne.n	8008eea <JPEG_Set_HuffAC_Mem+0xa0>
 8008e74:	9b00      	ldr	r3, [sp, #0]
 8008e76:	460d      	mov	r5, r1
 8008e78:	f106 0c0f 	add.w	ip, r6, #15
 8008e7c:	4617      	mov	r7, r2
 8008e7e:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008e80:	f04f 0e0a 	mov.w	lr, #10
 8008e84:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008e86:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8008e88:	4561      	cmp	r1, ip
 8008e8a:	d139      	bne.n	8008f00 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008e8c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008e90:	a942      	add	r1, sp, #264	@ 0x108
 8008e92:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8008e96:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008e98:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8008e9e:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8008ea2:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8008ea6:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008ea8:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008eac:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8008eae:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008eb2:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008eb4:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008eb8:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008eba:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8008ebe:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008ec0:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8008ec4:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008ec6:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008ec8:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008ecc:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8008ed0:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008ed2:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008edc:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008ede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ee2:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008ee6:	42b4      	cmp	r4, r6
 8008ee8:	d1e7      	bne.n	8008eba <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008eea:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8008eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8008ef2:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d10f      	bne.n	8008f1a <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008efa:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8008efe:	e7b0      	b.n	8008e62 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8008f00:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8008f04:	b15b      	cbz	r3, 8008f1e <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008f06:	2bf0      	cmp	r3, #240	@ 0xf0
 8008f08:	d015      	beq.n	8008f36 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8008f0a:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8008f0c:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008f10:	3b01      	subs	r3, #1
 8008f12:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008f16:	2ba1      	cmp	r3, #161	@ 0xa1
 8008f18:	d902      	bls.n	8008f20 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8008f1a:	2001      	movs	r0, #1
 8008f1c:	e7e5      	b.n	8008eea <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8008f1e:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008f20:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8008f24:	f857 8b04 	ldr.w	r8, [r7], #4
 8008f28:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008f2c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008f30:	3a01      	subs	r2, #1
 8008f32:	54f2      	strb	r2, [r6, r3]
      k++;
 8008f34:	e7a8      	b.n	8008e88 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8008f36:	23a1      	movs	r3, #161	@ 0xa1
 8008f38:	e7f2      	b.n	8008f20 <JPEG_Set_HuffAC_Mem+0xd6>

08008f3a <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8008f3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008f3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008f40:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008f42:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008f44:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008f46:	f002 0203 	and.w	r2, r2, #3
 8008f4a:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	bf0c      	ite	eq
 8008f50:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8008f54:	f022 0208 	bicne.w	r2, r2, #8
 8008f58:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	f022 0201 	bic.w	r2, r2, #1
 8008f60:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f64:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008f68:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f70:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f78:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f7c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008f80:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	f042 0201 	orr.w	r2, r2, #1
 8008f88:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008f8a:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008f8c:	f002 020c 	and.w	r2, r2, #12
 8008f90:	2a08      	cmp	r2, #8
 8008f92:	d104      	bne.n	8008f9e <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8008f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f96:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8008f9c:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008f9e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008fa0:	f002 020c 	and.w	r2, r2, #12
 8008fa4:	2a0c      	cmp	r2, #12
 8008fa6:	d1f9      	bne.n	8008f9c <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008faa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008fae:	e7f4      	b.n	8008f9a <JPEG_Init_Process+0x60>

08008fb0 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8008fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008fb2:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8008fb4:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008fb6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008fb8:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008fba:	42aa      	cmp	r2, r5
 8008fbc:	d313      	bcc.n	8008fe6 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008fbe:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008fc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008fc2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008fc4:	428b      	cmp	r3, r1
 8008fc6:	d30e      	bcc.n	8008fe6 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8008fc8:	4f18      	ldr	r7, [pc, #96]	@ (800902c <JPEG_DMA_StartProcess+0x7c>)
 8008fca:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008fcc:	4f18      	ldr	r7, [pc, #96]	@ (8009030 <JPEG_DMA_StartProcess+0x80>)
 8008fce:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008fd0:	4e18      	ldr	r6, [pc, #96]	@ (8009034 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008fd2:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008fd4:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8008fd6:	4e18      	ldr	r6, [pc, #96]	@ (8009038 <JPEG_DMA_StartProcess+0x88>)
 8008fd8:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8008fda:	b105      	cbz	r5, 8008fde <JPEG_DMA_StartProcess+0x2e>
 8008fdc:	b931      	cbnz	r1, 8008fec <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008fde:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008fe0:	f043 0304 	orr.w	r3, r3, #4
 8008fe4:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8008fe6:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8008fe8:	b003      	add	sp, #12
 8008fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008fec:	fbb2 f6f5 	udiv	r6, r2, r5
 8008ff0:	fb05 2516 	mls	r5, r5, r6, r2
 8008ff4:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008ff6:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008ff8:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8008ffa:	fbb3 f2f1 	udiv	r2, r3, r1
 8008ffe:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009002:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8009004:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009006:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8009008:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800900a:	9500      	str	r5, [sp, #0]
 800900c:	69e2      	ldr	r2, [r4, #28]
 800900e:	f001 f810 	bl	800a032 <HAL_MDMA_Start_IT>
 8009012:	2800      	cmp	r0, #0
 8009014:	d1e3      	bne.n	8008fde <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	9500      	str	r5, [sp, #0]
 800901a:	3240      	adds	r2, #64	@ 0x40
 800901c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800901e:	69a1      	ldr	r1, [r4, #24]
 8009020:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009022:	f001 f806 	bl	800a032 <HAL_MDMA_Start_IT>
 8009026:	2800      	cmp	r0, #0
 8009028:	d0de      	beq.n	8008fe8 <JPEG_DMA_StartProcess+0x38>
 800902a:	e7d8      	b.n	8008fde <JPEG_DMA_StartProcess+0x2e>
 800902c:	0800956f 	.word	0x0800956f
 8009030:	0800946b 	.word	0x0800946b
 8009034:	08009a2d 	.word	0x08009a2d
 8009038:	08009a1f 	.word	0x08009a1f

0800903c <HAL_JPEG_Init>:
{
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 800903e:	4605      	mov	r5, r0
 8009040:	2800      	cmp	r0, #0
 8009042:	f000 80f2 	beq.w	800922a <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009046:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 800904a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800904e:	b91b      	cbnz	r3, 8009058 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8009050:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8009054:	f7f8 f9ea 	bl	800142c <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8009058:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800905a:	2302      	movs	r3, #2
 800905c:	4a86      	ldr	r2, [pc, #536]	@ (8009278 <HAL_JPEG_Init+0x23c>)
 800905e:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8009062:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8009066:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009068:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	f023 0301 	bic.w	r3, r3, #1
 8009078:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800907a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800907c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009080:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009082:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009084:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009088:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800908a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800908c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009090:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009092:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009094:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009098:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800909a:	4b78      	ldr	r3, [pc, #480]	@ (800927c <HAL_JPEG_Init+0x240>)
 800909c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800909e:	4b78      	ldr	r3, [pc, #480]	@ (8009280 <HAL_JPEG_Init+0x244>)
 80090a0:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80090a2:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 80090a4:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090a8:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 80090aa:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090ac:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090b0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80090b4:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80090b6:	4333      	orrs	r3, r6
 80090b8:	7c56      	ldrb	r6, [r2, #17]
 80090ba:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090be:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80090c2:	4281      	cmp	r1, r0
 80090c4:	d1f0      	bne.n	80090a8 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090c6:	4b6f      	ldr	r3, [pc, #444]	@ (8009284 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80090c8:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80090cc:	4a6e      	ldr	r2, [pc, #440]	@ (8009288 <HAL_JPEG_Init+0x24c>)
 80090ce:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090d2:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80090d6:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80090da:	4610      	mov	r0, r2
 80090dc:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80090de:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80090e2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80090e6:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090ea:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80090ec:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090ee:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80090f2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80090f4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80090f8:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80090fc:	ea43 030c 	orr.w	r3, r3, ip
 8009100:	f890 c011 	ldrb.w	ip, [r0, #17]
 8009104:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009108:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 800910c:	42be      	cmp	r6, r7
 800910e:	d1ec      	bne.n	80090ea <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8009110:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8009114:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8009118:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800911c:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8009120:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8009124:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009128:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 800912c:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800912e:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009132:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009134:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009138:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800913c:	4333      	orrs	r3, r6
 800913e:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8009142:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009146:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 800914a:	4281      	cmp	r1, r0
 800914c:	d1ec      	bne.n	8009128 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 800914e:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8009152:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8009156:	4a4d      	ldr	r2, [pc, #308]	@ (800928c <HAL_JPEG_Init+0x250>)
 8009158:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800915c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800915e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8009162:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8009166:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800916a:	4013      	ands	r3, r2
  *address = value;
 800916c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009170:	2301      	movs	r3, #1
 8009172:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8009176:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800917a:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800917e:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8009182:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8009186:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800918c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8009190:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8009194:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8009196:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800919a:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800919e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80091a2:	4b3b      	ldr	r3, [pc, #236]	@ (8009290 <HAL_JPEG_Init+0x254>)
 80091a4:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 80091a8:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80091ac:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 80091b0:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 80091b4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80091b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 80091ba:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 80091be:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80091c2:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80091c4:	4a33      	ldr	r2, [pc, #204]	@ (8009294 <HAL_JPEG_Init+0x258>)
 80091c6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80091ca:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80091ce:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80091d2:	4b31      	ldr	r3, [pc, #196]	@ (8009298 <HAL_JPEG_Init+0x25c>)
 80091d4:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80091d8:	4b30      	ldr	r3, [pc, #192]	@ (800929c <HAL_JPEG_Init+0x260>)
 80091da:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80091de:	4b30      	ldr	r3, [pc, #192]	@ (80092a0 <HAL_JPEG_Init+0x264>)
 80091e0:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80091e4:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80091e8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80091ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80091ee:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80091f2:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80091f6:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80091f8:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80091fc:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80091fe:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8009202:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8009206:	4333      	orrs	r3, r6
 8009208:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 800920c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8009210:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8009214:	4281      	cmp	r1, r0
 8009216:	d1ec      	bne.n	80091f2 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8009218:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 800921c:	491a      	ldr	r1, [pc, #104]	@ (8009288 <HAL_JPEG_Init+0x24c>)
 800921e:	4628      	mov	r0, r5
 8009220:	f7ff fe13 	bl	8008e4a <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009224:	b118      	cbz	r0, 800922e <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009226:	2301      	movs	r3, #1
 8009228:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 800922a:	2001      	movs	r0, #1
}
 800922c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800922e:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8009232:	4918      	ldr	r1, [pc, #96]	@ (8009294 <HAL_JPEG_Init+0x258>)
 8009234:	4628      	mov	r0, r5
 8009236:	f7ff fe08 	bl	8008e4a <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 800923a:	2800      	cmp	r0, #0
 800923c:	d1f3      	bne.n	8009226 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800923e:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8009242:	490d      	ldr	r1, [pc, #52]	@ (8009278 <HAL_JPEG_Init+0x23c>)
 8009244:	4628      	mov	r0, r5
 8009246:	f7ff fdc8 	bl	8008dda <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 800924a:	2800      	cmp	r0, #0
 800924c:	d1eb      	bne.n	8009226 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800924e:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8009252:	4914      	ldr	r1, [pc, #80]	@ (80092a4 <HAL_JPEG_Init+0x268>)
 8009254:	4628      	mov	r0, r5
 8009256:	f7ff fdc0 	bl	8008dda <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800925a:	2800      	cmp	r0, #0
 800925c:	d1e3      	bne.n	8009226 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800925e:	6863      	ldr	r3, [r4, #4]
 8009260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009264:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009266:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8009268:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800926a:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800926c:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009270:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8009272:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8009274:	e7da      	b.n	800922c <HAL_JPEG_Init+0x1f0>
 8009276:	bf00      	nop
 8009278:	08028b9c 	.word	0x08028b9c
 800927c:	0802899c 	.word	0x0802899c
 8009280:	0802895c 	.word	0x0802895c
 8009284:	0b0a0908 	.word	0x0b0a0908
 8009288:	08028ace 	.word	0x08028ace
 800928c:	ffff0000 	.word	0xffff0000
 8009290:	09080706 	.word	0x09080706
 8009294:	08028a1c 	.word	0x08028a1c
 8009298:	01000404 	.word	0x01000404
 800929c:	05070403 	.word	0x05070403
 80092a0:	04040201 	.word	0x04040201
 80092a4:	08028b80 	.word	0x08028b80

080092a8 <HAL_JPEG_GetInfo>:
{
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d06f      	beq.n	8009390 <HAL_JPEG_GetInfo+0xe8>
 80092b0:	2900      	cmp	r1, #0
 80092b2:	d06d      	beq.n	8009390 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 80092b4:	6804      	ldr	r4, [r0, #0]
 80092b6:	6863      	ldr	r3, [r4, #4]
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	2b02      	cmp	r3, #2
 80092be:	d047      	beq.n	8009350 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	f013 0303 	ands.w	r3, r3, #3
 80092c6:	d005      	beq.n	80092d4 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80092c8:	6863      	ldr	r3, [r4, #4]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d15e      	bne.n	8009390 <HAL_JPEG_GetInfo+0xe8>
 80092d2:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80092d4:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80092d6:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80092d8:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80092dc:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80092de:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80092e0:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80092e2:	68e2      	ldr	r2, [r4, #12]
 80092e4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80092e8:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80092ea:	d13c      	bne.n	8009366 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80092ec:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80092ee:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80092f0:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80092f4:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80092f6:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80092f8:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80092fa:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80092fe:	d129      	bne.n	8009354 <HAL_JPEG_GetInfo+0xac>
 8009300:	4313      	orrs	r3, r2
 8009302:	f013 0f0f 	tst.w	r3, #15
 8009306:	bf0c      	ite	eq
 8009308:	2301      	moveq	r3, #1
 800930a:	2300      	movne	r3, #0
 800930c:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800930e:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	3450      	adds	r4, #80	@ 0x50
 8009314:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8009394 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8009318:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800931a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800931e:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8009322:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8009326:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 800932a:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800932c:	fa29 f206 	lsr.w	r2, r9, r6
 8009330:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8009332:	2a01      	cmp	r2, #1
 8009334:	d119      	bne.n	800936a <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8009336:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8009338:	3608      	adds	r6, #8
 800933a:	3701      	adds	r7, #1
 800933c:	2e20      	cmp	r6, #32
 800933e:	d1f5      	bne.n	800932c <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8009340:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8009342:	2d40      	cmp	r5, #64	@ 0x40
 8009344:	d1ed      	bne.n	8009322 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8009346:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8009348:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800934a:	610b      	str	r3, [r1, #16]
}
 800934c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009350:	2310      	movs	r3, #16
 8009352:	e7bf      	b.n	80092d4 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009354:	2d03      	cmp	r5, #3
 8009356:	d106      	bne.n	8009366 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009358:	4313      	orrs	r3, r2
 800935a:	f013 0f0f 	tst.w	r3, #15
 800935e:	bf0c      	ite	eq
 8009360:	2301      	moveq	r3, #1
 8009362:	2300      	movne	r3, #0
 8009364:	e7d3      	b.n	800930e <HAL_JPEG_GetInfo+0x66>
 8009366:	2300      	movs	r3, #0
 8009368:	e7d1      	b.n	800930e <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800936a:	fb0e fb02 	mul.w	fp, lr, r2
 800936e:	f897 a000 	ldrb.w	sl, [r7]
 8009372:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009374:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8009378:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800937c:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800937e:	bf8b      	itete	hi
 8009380:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8009384:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8009388:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800938a:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800938e:	e7d3      	b.n	8009338 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8009390:	2001      	movs	r0, #1
 8009392:	e7db      	b.n	800934c <HAL_JPEG_GetInfo+0xa4>
 8009394:	080289dc 	.word	0x080289dc

08009398 <HAL_JPEG_Decode_DMA>:
{
 8009398:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800939a:	4604      	mov	r4, r0
 800939c:	b348      	cbz	r0, 80093f2 <HAL_JPEG_Decode_DMA+0x5a>
 800939e:	b341      	cbz	r1, 80093f2 <HAL_JPEG_Decode_DMA+0x5a>
 80093a0:	b33b      	cbz	r3, 80093f2 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 80093a2:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 80093a6:	2d01      	cmp	r5, #1
 80093a8:	d028      	beq.n	80093fc <HAL_JPEG_Decode_DMA+0x64>
 80093aa:	2501      	movs	r5, #1
 80093ac:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80093b0:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 80093b4:	2d01      	cmp	r5, #1
 80093b6:	d11e      	bne.n	80093f6 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80093b8:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 80093ba:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80093bc:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80093c0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80093c2:	f025 050f 	bic.w	r5, r5, #15
 80093c6:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80093c8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80093ca:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80093ce:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80093d2:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 80093d4:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80093d6:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80093d8:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80093da:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 80093dc:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 80093de:	f7ff fdac 	bl	8008f3a <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80093e2:	f7ff fde5 	bl	8008fb0 <JPEG_DMA_StartProcess>
 80093e6:	b128      	cbz	r0, 80093f4 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80093e8:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80093ea:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80093ee:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80093f2:	2001      	movs	r0, #1
}
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80093f6:	2300      	movs	r3, #0
 80093f8:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80093fc:	2002      	movs	r0, #2
 80093fe:	e7f9      	b.n	80093f4 <HAL_JPEG_Decode_DMA+0x5c>

08009400 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009400:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009402:	f003 030c 	and.w	r3, r3, #12
 8009406:	2b0c      	cmp	r3, #12
 8009408:	d10d      	bne.n	8009426 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800940a:	07cb      	lsls	r3, r1, #31
 800940c:	d503      	bpl.n	8009416 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800940e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009414:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009416:	0789      	lsls	r1, r1, #30
 8009418:	d503      	bpl.n	8009422 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800941a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800941c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009420:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8009422:	2000      	movs	r0, #0
 8009424:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009426:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009428:	f003 030c 	and.w	r3, r3, #12
 800942c:	2b08      	cmp	r3, #8
 800942e:	d1f8      	bne.n	8009422 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009430:	f011 0301 	ands.w	r3, r1, #1
 8009434:	d004      	beq.n	8009440 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009436:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800943c:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800943e:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009440:	078a      	lsls	r2, r1, #30
 8009442:	d505      	bpl.n	8009450 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009444:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009446:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800944a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800944e:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009450:	6801      	ldr	r1, [r0, #0]
 8009452:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009454:	ea22 0303 	bic.w	r3, r2, r3
 8009458:	630b      	str	r3, [r1, #48]	@ 0x30
 800945a:	e7e2      	b.n	8009422 <HAL_JPEG_Pause+0x22>

0800945c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800945c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800945e:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8009460:	4770      	bx	lr

08009462 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009462:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8009464:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8009466:	4770      	bx	lr

08009468 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8009468:	4770      	bx	lr

0800946a <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800946a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800946c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800946e:	6803      	ldr	r3, [r0, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800947a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800947e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009480:	2301      	movs	r3, #1
 8009482:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009486:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009488:	f043 0304 	orr.w	r3, r3, #4
 800948c:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800948e:	f7f9 fb1d 	bl	8002acc <HAL_JPEG_ErrorCallback>
}
 8009492:	bd08      	pop	{r3, pc}

08009494 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009494:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8009496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009498:	4604      	mov	r4, r0
 800949a:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800949c:	b922      	cbnz	r2, 80094a8 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800949e:	2101      	movs	r1, #1
 80094a0:	f7ff ffae 	bl	8009400 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 80094a4:	2200      	movs	r2, #0
 80094a6:	e004      	b.n	80094b2 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80094a8:	6a03      	ldr	r3, [r0, #32]
 80094aa:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80094ac:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80094ae:	d924      	bls.n	80094fa <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 80094b0:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 80094b2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80094b4:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 80094b8:	d11e      	bne.n	80094f8 <JPEG_ReadInputData+0x64>
 80094ba:	b1ea      	cbz	r2, 80094f8 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 80094bc:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80094c0:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 80094c2:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80094c6:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 80094c8:	d826      	bhi.n	8009518 <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 80094ca:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80094cc:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80094ce:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80094d0:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 80094d2:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80094d4:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80094d6:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80094da:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80094de:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80094e0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80094e4:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80094e8:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80094ec:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 80094ee:	6a22      	ldr	r2, [r4, #32]
 80094f0:	f102 0204 	add.w	r2, r2, #4
 80094f4:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80094f6:	d1e8      	bne.n	80094ca <JPEG_ReadInputData+0x36>
}
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d1d2      	bne.n	80094a4 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80094fe:	6a01      	ldr	r1, [r0, #32]
 8009500:	f7f9 fa76 	bl	80029f0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8009504:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009506:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009508:	bf84      	itt	hi
 800950a:	f023 0303 	bichi.w	r3, r3, #3
 800950e:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009510:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8009512:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009514:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8009516:	e7cc      	b.n	80094b2 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8009518:	2a03      	cmp	r2, #3
 800951a:	d917      	bls.n	800954c <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 800951c:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800951e:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009520:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009522:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 8009524:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009526:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009528:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800952c:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009530:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009532:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009536:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800953a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800953e:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009540:	6a22      	ldr	r2, [r4, #32]
 8009542:	f102 0204 	add.w	r2, r2, #4
 8009546:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009548:	d8e8      	bhi.n	800951c <JPEG_ReadInputData+0x88>
 800954a:	e7d5      	b.n	80094f8 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 800954c:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800954e:	6a26      	ldr	r6, [r4, #32]
 8009550:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 8009552:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009554:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 8009556:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009558:	fa06 f607 	lsl.w	r6, r6, r7
 800955c:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8009560:	6a26      	ldr	r6, [r4, #32]
 8009562:	f106 0601 	add.w	r6, r6, #1
 8009566:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8009568:	d1f1      	bne.n	800954e <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 800956a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800956c:	e7c4      	b.n	80094f8 <JPEG_ReadInputData+0x64>

0800956e <JPEG_MDMAInCpltCallback>:
{
 800956e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009570:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009576:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800957a:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800957c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800957e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009582:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8009586:	041b      	lsls	r3, r3, #16
 8009588:	0c1b      	lsrs	r3, r3, #16
 800958a:	2b0c      	cmp	r3, #12
 800958c:	d11a      	bne.n	80095c4 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800958e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009590:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009592:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009594:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009596:	695a      	ldr	r2, [r3, #20]
 8009598:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800959a:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80095a2:	6a21      	ldr	r1, [r4, #32]
 80095a4:	f7f9 fa24 	bl	80029f0 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 80095a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80095aa:	42ab      	cmp	r3, r5
 80095ac:	d327      	bcc.n	80095fe <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 80095ae:	b95d      	cbnz	r5, 80095c8 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80095b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 80095b2:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80095b4:	f043 0304 	orr.w	r3, r3, #4
 80095b8:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80095ba:	2306      	movs	r3, #6
 80095bc:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 80095c0:	f7f9 fa84 	bl	8002acc <HAL_JPEG_ErrorCallback>
}
 80095c4:	b003      	add	sp, #12
 80095c6:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80095c8:	fbb3 f2f5 	udiv	r2, r3, r5
 80095cc:	fb05 3212 	mls	r2, r5, r2, r3
 80095d0:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80095d2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80095d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80095d6:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80095d8:	04db      	lsls	r3, r3, #19
 80095da:	d40a      	bmi.n	80095f2 <JPEG_MDMAInCpltCallback+0x84>
 80095dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80095de:	b143      	cbz	r3, 80095f2 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80095e0:	2101      	movs	r1, #1
 80095e2:	3240      	adds	r2, #64	@ 0x40
 80095e4:	9100      	str	r1, [sp, #0]
 80095e6:	69a1      	ldr	r1, [r4, #24]
 80095e8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80095ea:	f000 fd22 	bl	800a032 <HAL_MDMA_Start_IT>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1de      	bne.n	80095b0 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80095f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80095fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80095fc:	e7e2      	b.n	80095c4 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0e8      	beq.n	80095d4 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8009602:	079a      	lsls	r2, r3, #30
 8009604:	d0e6      	beq.n	80095d4 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	3304      	adds	r3, #4
 800960c:	e7e1      	b.n	80095d2 <JPEG_MDMAInCpltCallback+0x64>

0800960e <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800960e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009612:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009616:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8009618:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800961a:	4293      	cmp	r3, r2
 800961c:	d32a      	bcc.n	8009674 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 800961e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009620:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8009622:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009624:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8009626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8009628:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800962a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800962c:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800962e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009630:	69e0      	ldr	r0, [r4, #28]
 8009632:	4428      	add	r0, r5
 8009634:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8009638:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800963a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800963c:	69e0      	ldr	r0, [r4, #28]
 800963e:	4428      	add	r0, r5
 8009640:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009644:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009648:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800964a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800964c:	69e0      	ldr	r0, [r4, #28]
 800964e:	4428      	add	r0, r5
 8009650:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8009652:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009654:	f103 0304 	add.w	r3, r3, #4
 8009658:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800965a:	d1e1      	bne.n	8009620 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800965c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800965e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009660:	429a      	cmp	r2, r3
 8009662:	d106      	bne.n	8009672 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009664:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009666:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009668:	4620      	mov	r0, r4
 800966a:	f7f9 f9df 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009674:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009676:	4293      	cmp	r3, r2
 8009678:	d9fb      	bls.n	8009672 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800967a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800967c:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009682:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009684:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8009686:	d105      	bne.n	8009694 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009688:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800968a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800968c:	429f      	cmp	r7, r3
 800968e:	d119      	bne.n	80096c4 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009690:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009692:	e7e9      	b.n	8009668 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009694:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8009696:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800969a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800969c:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800969e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80096a0:	69e1      	ldr	r1, [r4, #28]
 80096a2:	4429      	add	r1, r5
 80096a4:	0a1d      	lsrs	r5, r3, #8
 80096a6:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80096a8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80096aa:	69e1      	ldr	r1, [r4, #28]
 80096ac:	4429      	add	r1, r5
 80096ae:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80096b0:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80096b2:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80096b4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80096b6:	69e1      	ldr	r1, [r4, #28]
 80096b8:	4429      	add	r1, r5
 80096ba:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 80096bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80096be:	3304      	adds	r3, #4
 80096c0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80096c2:	e7de      	b.n	8009682 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80096c4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80096c6:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80096c8:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 80096ca:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 80096cc:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 80096ce:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80096d0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80096d2:	d114      	bne.n	80096fe <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80096d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7f9 f9a8 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80096dc:	2300      	movs	r3, #0
 80096de:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80096e0:	1d2b      	adds	r3, r5, #4
 80096e2:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	d8c4      	bhi.n	8009672 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80096e8:	00da      	lsls	r2, r3, #3
 80096ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80096ec:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80096ee:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80096f0:	fa26 f202 	lsr.w	r2, r6, r2
 80096f4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80096f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80096f8:	3201      	adds	r2, #1
 80096fa:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80096fc:	e7f2      	b.n	80096e4 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80096fe:	f002 0303 	and.w	r3, r2, #3
 8009702:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009706:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	fa26 f303 	lsr.w	r3, r6, r3
 800970e:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8009712:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009714:	3301      	adds	r3, #1
 8009716:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009718:	e7d9      	b.n	80096ce <JPEG_StoreOutputData+0xc0>

0800971a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800971a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	2b02      	cmp	r3, #2
{
 8009722:	b510      	push	{r4, lr}
 8009724:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009726:	d114      	bne.n	8009752 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009728:	6803      	ldr	r3, [r0, #0]
 800972a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972c:	065b      	lsls	r3, r3, #25
 800972e:	d510      	bpl.n	8009752 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009730:	1d01      	adds	r1, r0, #4
 8009732:	f7ff fdb9 	bl	80092a8 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009736:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009738:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800973a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800973c:	f7f9 f922 	bl	8002984 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009748:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800974a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800974c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009750:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009752:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009754:	04d9      	lsls	r1, r3, #19
 8009756:	d407      	bmi.n	8009768 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800975c:	0792      	lsls	r2, r2, #30
 800975e:	d544      	bpl.n	80097ea <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009760:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff fe96 	bl	8009494 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009768:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800976a:	0499      	lsls	r1, r3, #18
 800976c:	d407      	bmi.n	800977e <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009772:	0712      	lsls	r2, r2, #28
 8009774:	d53e      	bpl.n	80097f4 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009776:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8009778:	4620      	mov	r0, r4
 800977a:	f7ff ff48 	bl	800960e <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009782:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009786:	2a20      	cmp	r2, #32
 8009788:	d13c      	bne.n	8009804 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	f022 0201 	bic.w	r2, r2, #1
 8009790:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009792:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009794:	f002 020c 	and.w	r2, r2, #12
 8009798:	2a08      	cmp	r2, #8
 800979a:	d103      	bne.n	80097a4 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800979c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800979e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80097a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80097a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097a6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80097aa:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 80097ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80097ae:	b133      	cbz	r3, 80097be <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80097b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80097b2:	4620      	mov	r0, r4
 80097b4:	69e1      	ldr	r1, [r4, #28]
 80097b6:	f7f9 f939 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 80097be:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80097c0:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80097c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80097c4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80097c8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80097cc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80097ce:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80097d8:	f04f 0201 	mov.w	r2, #1
 80097dc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80097e0:	d10d      	bne.n	80097fe <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80097e2:	f7f9 f975 	bl	8002ad0 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80097e6:	2001      	movs	r0, #1
}
 80097e8:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80097ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ec:	0758      	lsls	r0, r3, #29
 80097ee:	d5bb      	bpl.n	8009768 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80097f0:	2101      	movs	r1, #1
 80097f2:	e7b6      	b.n	8009762 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80097f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f6:	06db      	lsls	r3, r3, #27
 80097f8:	d5c1      	bpl.n	800977e <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80097fa:	2101      	movs	r1, #1
 80097fc:	e7bc      	b.n	8009778 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80097fe:	f7ff fe33 	bl	8009468 <HAL_JPEG_EncodeCpltCallback>
 8009802:	e7f0      	b.n	80097e6 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8009804:	2000      	movs	r0, #0
 8009806:	e7ef      	b.n	80097e8 <JPEG_Process+0xce>

08009808 <JPEG_DMA_PollResidualData>:
{
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	4604      	mov	r4, r0
 800980c:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800980e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009810:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009812:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8009816:	d122      	bne.n	800985e <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800981a:	06d0      	lsls	r0, r2, #27
 800981c:	d51f      	bpl.n	800985e <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 800981e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8009820:	69e1      	ldr	r1, [r4, #28]
 8009822:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009824:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8009826:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009828:	69e2      	ldr	r2, [r4, #28]
 800982a:	440a      	add	r2, r1
 800982c:	0a19      	lsrs	r1, r3, #8
 800982e:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009830:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009832:	69e2      	ldr	r2, [r4, #28]
 8009834:	440a      	add	r2, r1
 8009836:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009838:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800983a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800983c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800983e:	69e2      	ldr	r2, [r4, #28]
 8009840:	440a      	add	r2, r1
 8009842:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8009844:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009846:	3304      	adds	r3, #4
 8009848:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800984a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800984c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800984e:	429a      	cmp	r2, r3
 8009850:	d105      	bne.n	800985e <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009852:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009854:	4620      	mov	r0, r4
 8009856:	69e1      	ldr	r1, [r4, #28]
 8009858:	f7f9 f8e8 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800985c:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800985e:	3e01      	subs	r6, #1
 8009860:	d1d5      	bne.n	800980e <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009862:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009866:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009868:	06c9      	lsls	r1, r1, #27
 800986a:	d501      	bpl.n	8009870 <JPEG_DMA_PollResidualData+0x68>
 800986c:	0492      	lsls	r2, r2, #18
 800986e:	d420      	bmi.n	80098b2 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	f022 0201 	bic.w	r2, r2, #1
 8009876:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009878:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800987a:	b133      	cbz	r3, 800988a <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800987c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800987e:	4620      	mov	r0, r4
 8009880:	69e1      	ldr	r1, [r4, #28]
 8009882:	f7f9 f8d3 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800988a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800988c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800988e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009890:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009894:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009898:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800989a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80098a4:	f04f 0201 	mov.w	r2, #1
 80098a8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80098ac:	d102      	bne.n	80098b4 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80098ae:	f7f9 f90f 	bl	8002ad0 <HAL_JPEG_DecodeCpltCallback>
}
 80098b2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80098b4:	f7ff fdd8 	bl	8009468 <HAL_JPEG_EncodeCpltCallback>
}
 80098b8:	e7fb      	b.n	80098b2 <JPEG_DMA_PollResidualData+0xaa>

080098ba <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80098ba:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80098bc:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 80098c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 80098c6:	d014      	beq.n	80098f2 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80098c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80098ca:	f003 030c 	and.w	r3, r3, #12
 80098ce:	2b0c      	cmp	r3, #12
 80098d0:	d146      	bne.n	8009960 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80098d2:	07cb      	lsls	r3, r1, #31
 80098d4:	d520      	bpl.n	8009918 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80098d6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80098d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098dc:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80098de:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80098e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 80098e2:	b941      	cbnz	r1, 80098f6 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80098e4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80098e6:	f043 0304 	orr.w	r3, r3, #4
 80098ea:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80098ec:	2306      	movs	r3, #6
 80098ee:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80098f2:	2001      	movs	r0, #1
 80098f4:	e01d      	b.n	8009932 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80098f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80098f8:	fbb3 f2f1 	udiv	r2, r3, r1
 80098fc:	fb01 3212 	mls	r2, r1, r2, r3
 8009900:	1a9b      	subs	r3, r3, r2
 8009902:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8009904:	b143      	cbz	r3, 8009918 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	2101      	movs	r1, #1
 800990a:	3240      	adds	r2, #64	@ 0x40
 800990c:	9100      	str	r1, [sp, #0]
 800990e:	69a1      	ldr	r1, [r4, #24]
 8009910:	f000 fb8f 	bl	800a032 <HAL_MDMA_Start_IT>
 8009914:	2800      	cmp	r0, #0
 8009916:	d1e5      	bne.n	80098e4 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009918:	07a8      	lsls	r0, r5, #30
 800991a:	d509      	bpl.n	8009930 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800991c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800991e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009922:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009924:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009926:	0419      	lsls	r1, r3, #16
 8009928:	d505      	bpl.n	8009936 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800992a:	4620      	mov	r0, r4
 800992c:	f7ff ff6c 	bl	8009808 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8009930:	2000      	movs	r0, #0
}
 8009932:	b003      	add	sp, #12
 8009934:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009936:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009938:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800993a:	2900      	cmp	r1, #0
 800993c:	d0d2      	beq.n	80098e4 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800993e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009940:	fbb3 f2f1 	udiv	r2, r3, r1
 8009944:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009948:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800994a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800994c:	2201      	movs	r2, #1
 800994e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009950:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009952:	9200      	str	r2, [sp, #0]
 8009954:	69e2      	ldr	r2, [r4, #28]
 8009956:	f000 fb6c 	bl	800a032 <HAL_MDMA_Start_IT>
 800995a:	2800      	cmp	r0, #0
 800995c:	d0e8      	beq.n	8009930 <HAL_JPEG_Resume+0x76>
 800995e:	e7c1      	b.n	80098e4 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009960:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009962:	f003 030c 	and.w	r3, r3, #12
 8009966:	2b08      	cmp	r3, #8
 8009968:	d1e2      	bne.n	8009930 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800996a:	f011 0301 	ands.w	r3, r1, #1
 800996e:	d004      	beq.n	800997a <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009970:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009976:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009978:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800997a:	07aa      	lsls	r2, r5, #30
 800997c:	d505      	bpl.n	800998a <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800997e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009980:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009984:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009988:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800998a:	6821      	ldr	r1, [r4, #0]
 800998c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800998e:	4313      	orrs	r3, r2
 8009990:	630b      	str	r3, [r1, #48]	@ 0x30
 8009992:	e7cd      	b.n	8009930 <HAL_JPEG_Resume+0x76>

08009994 <JPEG_DMA_EndProcess>:
{
 8009994:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009996:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8009998:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800999a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80099a8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d105      	bne.n	80099ba <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80099ae:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80099b0:	69c1      	ldr	r1, [r0, #28]
 80099b2:	f7f9 f83b 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 80099be:	f015 0510 	ands.w	r5, r5, #16
 80099c2:	d124      	bne.n	8009a0e <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 80099c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80099c6:	b12b      	cbz	r3, 80099d4 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80099c8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80099ca:	4620      	mov	r0, r4
 80099cc:	69e1      	ldr	r1, [r4, #28]
 80099ce:	f7f9 f82d 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80099d2:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80099d4:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80099d6:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80099d8:	6813      	ldr	r3, [r2, #0]
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80099e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80099e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80099e4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80099e8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80099ec:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80099ee:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80099f8:	f04f 0201 	mov.w	r2, #1
 80099fc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009a00:	d102      	bne.n	8009a08 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009a02:	f7f9 f865 	bl	8002ad0 <HAL_JPEG_DecodeCpltCallback>
}
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009a08:	f7ff fd2e 	bl	8009468 <HAL_JPEG_EncodeCpltCallback>
 8009a0c:	e7fb      	b.n	8009a06 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009a0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a10:	049b      	lsls	r3, r3, #18
 8009a12:	d4f8      	bmi.n	8009a06 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8009a14:	4620      	mov	r0, r4
}
 8009a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8009a1a:	f7ff bef5 	b.w	8009808 <JPEG_DMA_PollResidualData>

08009a1e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009a1e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009a20:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009a22:	041b      	lsls	r3, r3, #16
 8009a24:	d501      	bpl.n	8009a2a <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8009a26:	f7ff bfb5 	b.w	8009994 <JPEG_DMA_EndProcess>
}
 8009a2a:	4770      	bx	lr

08009a2c <JPEG_MDMAOutCpltCallback>:
{
 8009a2c:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009a2e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a34:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009a38:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8009a3a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a3c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8009a40:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8009a44:	0412      	lsls	r2, r2, #16
 8009a46:	0c12      	lsrs	r2, r2, #16
 8009a48:	2a0c      	cmp	r2, #12
 8009a4a:	d125      	bne.n	8009a98 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8009a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a4e:	069a      	lsls	r2, r3, #26
 8009a50:	d424      	bmi.n	8009a9c <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009a52:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a54:	4620      	mov	r0, r4
 8009a56:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009a58:	695a      	ldr	r2, [r3, #20]
 8009a5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a5c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009a64:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009a66:	f7f8 ffe1 	bl	8002a2c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009a6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a6c:	049b      	lsls	r3, r3, #18
 8009a6e:	d415      	bmi.n	8009a9c <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009a70:	6821      	ldr	r1, [r4, #0]
 8009a72:	2301      	movs	r3, #1
 8009a74:	3144      	adds	r1, #68	@ 0x44
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009a7a:	69e2      	ldr	r2, [r4, #28]
 8009a7c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009a7e:	f000 fad8 	bl	800a032 <HAL_MDMA_Start_IT>
 8009a82:	b158      	cbz	r0, 8009a9c <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009a84:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009a86:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009a88:	f043 0304 	orr.w	r3, r3, #4
 8009a8c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009a8e:	2306      	movs	r3, #6
 8009a90:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009a94:	f7f9 f81a 	bl	8002acc <HAL_JPEG_ErrorCallback>
}
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009a9c:	6822      	ldr	r2, [r4, #0]
 8009a9e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009aa0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009aa6:	e7f7      	b.n	8009a98 <JPEG_MDMAOutCpltCallback+0x6c>

08009aa8 <HAL_JPEG_IRQHandler>:
{
 8009aa8:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8009aaa:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8009aae:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009ab0:	3b03      	subs	r3, #3
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d850      	bhi.n	8009b58 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009ab6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009ab8:	f003 030c 	and.w	r3, r3, #12
 8009abc:	2b08      	cmp	r3, #8
 8009abe:	d103      	bne.n	8009ac8 <HAL_JPEG_IRQHandler+0x20>
}
 8009ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009ac4:	f7ff be29 	b.w	800971a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009ac8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009aca:	f003 030c 	and.w	r3, r3, #12
 8009ace:	2b0c      	cmp	r3, #12
 8009ad0:	d142      	bne.n	8009b58 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009ad2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d114      	bne.n	8009b06 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009adc:	6803      	ldr	r3, [r0, #0]
 8009ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae0:	0659      	lsls	r1, r3, #25
 8009ae2:	d510      	bpl.n	8009b06 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009ae4:	1d01      	adds	r1, r0, #4
 8009ae6:	f7ff fbdf 	bl	80092a8 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009aea:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009aec:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009aee:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009af0:	f7f8 ff48 	bl	8002984 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009af8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009afc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b04:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b0a:	0692      	lsls	r2, r2, #26
 8009b0c:	d524      	bpl.n	8009b58 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009b0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009b10:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009b12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b16:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	f022 0201 	bic.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b22:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009b26:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b2a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009b2e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009b30:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d101      	bne.n	8009b3c <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8009b38:	f000 fac4 	bl	800a0c4 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8009b3c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009b3e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d103      	bne.n	8009b4e <HAL_JPEG_IRQHandler+0xa6>
}
 8009b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8009b4a:	f000 babb 	b.w	800a0c4 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8009b4e:	4620      	mov	r0, r4
}
 8009b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009b54:	f7ff bf1e 	b.w	8009994 <JPEG_DMA_EndProcess>
}
 8009b58:	bd10      	pop	{r4, pc}
	...

08009b5c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009b5c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009b5e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009b60:	3284      	adds	r2, #132	@ 0x84
 8009b62:	1883      	adds	r3, r0, r2
{
 8009b64:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009b66:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009b68:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009b6a:	684c      	ldr	r4, [r1, #4]
 8009b6c:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009b70:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b74:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009b76:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009b78:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b7a:	f106 0c01 	add.w	ip, r6, #1
 8009b7e:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009b80:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009b82:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009b86:	4465      	add	r5, ip
 8009b88:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009b8c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009b8e:	68c7      	ldr	r7, [r0, #12]
 8009b90:	68cd      	ldr	r5, [r1, #12]
 8009b92:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009b96:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009b98:	689d      	ldr	r5, [r3, #8]
 8009b9a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8009b9e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009ba0:	688d      	ldr	r5, [r1, #8]
 8009ba2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009ba6:	3501      	adds	r5, #1
 8009ba8:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8009bac:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009bae:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009bb2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009bb6:	698f      	ldr	r7, [r1, #24]
 8009bb8:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009bbc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009bbe:	691d      	ldr	r5, [r3, #16]
 8009bc0:	f025 0507 	bic.w	r5, r5, #7
 8009bc4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009bc6:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009bca:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8009bce:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009bd2:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009bd6:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009bda:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009bde:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8009be2:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009be4:	695d      	ldr	r5, [r3, #20]
 8009be6:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8009bea:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009bec:	694d      	ldr	r5, [r1, #20]
 8009bee:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009bf0:	69dd      	ldr	r5, [r3, #28]
 8009bf2:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8009bf6:	f025 0507 	bic.w	r5, r5, #7
 8009bfa:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009bfc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8009c00:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009c04:	bf88      	it	hi
 8009c06:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009c08:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009c0a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8009c0c:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009c0e:	bf9c      	itt	ls
 8009c10:	4d0c      	ldrls	r5, [pc, #48]	@ (8009c44 <LTDC_SetConfig+0xe8>)
 8009c12:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009c16:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009c18:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009c1a:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009c1e:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009c20:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009c22:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c24:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8009c26:	437d      	muls	r5, r7
 8009c28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009c2c:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009c2e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8009c30:	f36f 040a 	bfc	r4, #0, #11
 8009c34:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009c36:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009c38:	5883      	ldr	r3, [r0, r2]
 8009c3a:	f043 0301 	orr.w	r3, r3, #1
 8009c3e:	5083      	str	r3, [r0, r2]
}
 8009c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	08028bb8 	.word	0x08028bb8

08009c48 <HAL_LTDC_Init>:
{
 8009c48:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d04e      	beq.n	8009cee <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009c50:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009c54:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009c58:	b91b      	cbnz	r3, 8009c62 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8009c5a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009c5e:	f7f7 fc6b 	bl	8001538 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c62:	2302      	movs	r3, #2
 8009c64:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009c70:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009c72:	6999      	ldr	r1, [r3, #24]
 8009c74:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8009c78:	4302      	orrs	r2, r0
 8009c7a:	68e0      	ldr	r0, [r4, #12]
 8009c7c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009c7e:	6920      	ldr	r0, [r4, #16]
 8009c80:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009c82:	430a      	orrs	r2, r1
 8009c84:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009c86:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8009c8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009c8e:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009c90:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009c94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009c98:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009c9a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8009c9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009ca2:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009ca4:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8009ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009cac:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009cb0:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009cb4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009cb8:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009cbe:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8009cc0:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8009cc4:	432a      	orrs	r2, r5
 8009cc6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009cca:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009ccc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cd4:	f042 0206 	orr.w	r2, r2, #6
 8009cd8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8009cda:	699a      	ldr	r2, [r3, #24]
 8009cdc:	f042 0201 	orr.w	r2, r2, #1
 8009ce0:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ce2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ce4:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ce8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8009cec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009cee:	2001      	movs	r0, #1
 8009cf0:	e7fc      	b.n	8009cec <HAL_LTDC_Init+0xa4>

08009cf2 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8009cf4:	4770      	bx	lr

08009cf6 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009cf8:	6803      	ldr	r3, [r0, #0]
{
 8009cfa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009cfc:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8009cfe:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009d00:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009d02:	0772      	lsls	r2, r6, #29
 8009d04:	d514      	bpl.n	8009d30 <HAL_LTDC_IRQHandler+0x38>
 8009d06:	0769      	lsls	r1, r5, #29
 8009d08:	d512      	bpl.n	8009d30 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d0c:	f022 0204 	bic.w	r2, r2, #4
 8009d10:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009d12:	2204      	movs	r2, #4
 8009d14:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009d16:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8009d22:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009d24:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009d28:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009d2c:	f7ff ffe1 	bl	8009cf2 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009d30:	07b2      	lsls	r2, r6, #30
 8009d32:	d516      	bpl.n	8009d62 <HAL_LTDC_IRQHandler+0x6a>
 8009d34:	07ab      	lsls	r3, r5, #30
 8009d36:	d514      	bpl.n	8009d62 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009d38:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8009d3a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d3e:	f022 0202 	bic.w	r2, r2, #2
 8009d42:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009d44:	2202      	movs	r2, #2
 8009d46:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009d48:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009d52:	2304      	movs	r3, #4
 8009d54:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009d5e:	f7ff ffc8 	bl	8009cf2 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009d62:	07f0      	lsls	r0, r6, #31
 8009d64:	d510      	bpl.n	8009d88 <HAL_LTDC_IRQHandler+0x90>
 8009d66:	07e9      	lsls	r1, r5, #31
 8009d68:	d50e      	bpl.n	8009d88 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009d6a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009d6c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009d6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d70:	f022 0201 	bic.w	r2, r2, #1
 8009d74:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009d76:	2201      	movs	r2, #1
 8009d78:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8009d7a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009d7c:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009d80:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009d84:	f7ff ffb6 	bl	8009cf4 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009d88:	0732      	lsls	r2, r6, #28
 8009d8a:	d511      	bpl.n	8009db0 <HAL_LTDC_IRQHandler+0xb8>
 8009d8c:	072b      	lsls	r3, r5, #28
 8009d8e:	d50f      	bpl.n	8009db0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009d90:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009d92:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d96:	f022 0208 	bic.w	r2, r2, #8
 8009d9a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009da6:	2300      	movs	r3, #0
 8009da8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009dac:	f7ff ffa3 	bl	8009cf6 <HAL_LTDC_ReloadEventCallback>
}
 8009db0:	bd70      	pop	{r4, r5, r6, pc}

08009db2 <HAL_LTDC_ConfigLayer>:
{
 8009db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8009db6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8009dba:	4606      	mov	r6, r0
 8009dbc:	460f      	mov	r7, r1
 8009dbe:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	f04f 0002 	mov.w	r0, #2
 8009dc6:	d01f      	beq.n	8009e08 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009dc8:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8009dca:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009dce:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009dd0:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009dd4:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8009dd8:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009ddc:	3438      	adds	r4, #56	@ 0x38
 8009dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dea:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009dec:	4630      	mov	r0, r6
 8009dee:	4662      	mov	r2, ip
 8009df0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009df2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009df4:	f7ff feb2 	bl	8009b5c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009df8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8009dfa:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009dfc:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009e00:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009e04:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8009e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009e0c <HAL_LTDC_SetPitch>:
{
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8009e10:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 8009e14:	2801      	cmp	r0, #1
 8009e16:	f04f 0002 	mov.w	r0, #2
 8009e1a:	d026      	beq.n	8009e6a <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009e1c:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009e20:	2034      	movs	r0, #52	@ 0x34
 8009e22:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009e26:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009e28:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009e2a:	3284      	adds	r2, #132	@ 0x84
 8009e2c:	2807      	cmp	r0, #7
 8009e2e:	bf96      	itet	ls
 8009e30:	4c0e      	ldrls	r4, [pc, #56]	@ (8009e6c <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8009e32:	2401      	movhi	r4, #1
 8009e34:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009e36:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8009e38:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009e3a:	4402      	add	r2, r0
 8009e3c:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009e3e:	f36f 401c 	bfc	r0, #16, #13
 8009e42:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009e44:	480a      	ldr	r0, [pc, #40]	@ (8009e70 <HAL_LTDC_SetPitch+0x64>)
 8009e46:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8009e48:	f045 0501 	orr.w	r5, r5, #1
 8009e4c:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8009e4e:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8009e50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009e54:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009e56:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009e58:	f042 0201 	orr.w	r2, r2, #1
 8009e5c:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e5e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 8009e60:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009e66:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8009e6a:	bd30      	pop	{r4, r5, pc}
 8009e6c:	08028bb8 	.word	0x08028bb8
 8009e70:	50001000 	.word	0x50001000

08009e74 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8009e74:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009e76:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009e78:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009e7c:	6965      	ldr	r5, [r4, #20]
 8009e7e:	f363 0510 	bfi	r5, r3, #0, #17
 8009e82:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009e84:	9d03      	ldr	r5, [sp, #12]
 8009e86:	6963      	ldr	r3, [r4, #20]
 8009e88:	f105 35ff 	add.w	r5, r5, #4294967295
 8009e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e90:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009e94:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8009e96:	f04f 031f 	mov.w	r3, #31
 8009e9a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8009e9c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8009e9e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8009ea0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009ea2:	bf0c      	ite	eq
 8009ea4:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009ea8:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009eac:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8009eb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009eb4:	bf0c      	ite	eq
 8009eb6:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8009eba:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8009ebe:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8009ec0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8009ec2:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009ec4:	bd30      	pop	{r4, r5, pc}

08009ec6 <HAL_MDMA_Init>:
{
 8009ec6:	b538      	push	{r3, r4, r5, lr}
 8009ec8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009eca:	f7fd fb4d 	bl	8007568 <HAL_GetTick>
 8009ece:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d061      	beq.n	8009f98 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8009ed4:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8009ed6:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8009ed8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8009edc:	2302      	movs	r3, #2
 8009ede:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8009ee2:	68d3      	ldr	r3, [r2, #12]
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	68da      	ldr	r2, [r3, #12]
 8009eee:	07d2      	lsls	r2, r2, #31
 8009ef0:	d448      	bmi.n	8009f84 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8009ef2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8009efa:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	69e1      	ldr	r1, [r4, #28]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	6a21      	ldr	r1, [r4, #32]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009f12:	430a      	orrs	r2, r1
 8009f14:	68a1      	ldr	r1, [r4, #8]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009f1a:	3901      	subs	r1, #1
 8009f1c:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009f20:	6861      	ldr	r1, [r4, #4]
 8009f22:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8009f26:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009f28:	d103      	bne.n	8009f32 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8009f2a:	691a      	ldr	r2, [r3, #16]
 8009f2c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8009f30:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8009f32:	2200      	movs	r2, #0
 8009f34:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8009f36:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009f38:	2a00      	cmp	r2, #0
 8009f3a:	da04      	bge.n	8009f46 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009f3c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8009f3e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009f40:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8009f44:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8009f46:	b292      	uxth	r2, r2
 8009f48:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8009f4a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009f4c:	2a00      	cmp	r2, #0
 8009f4e:	da25      	bge.n	8009f9c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009f50:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009f52:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009f54:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8009f58:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009f5a:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009f5c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009f60:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009f64:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009f66:	f04f 0200 	mov.w	r2, #0
 8009f6a:	d019      	beq.n	8009fa0 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009f6c:	b2c9      	uxtb	r1, r1
 8009f6e:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009f70:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8009f72:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009f74:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8009f76:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8009f78:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8009f7a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8009f7e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8009f82:	e00a      	b.n	8009f9a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009f84:	f7fd faf0 	bl	8007568 <HAL_GetTick>
 8009f88:	1b40      	subs	r0, r0, r5
 8009f8a:	2805      	cmp	r0, #5
 8009f8c:	d9ad      	bls.n	8009eea <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8009f8e:	2340      	movs	r3, #64	@ 0x40
 8009f90:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009f92:	2303      	movs	r3, #3
 8009f94:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8009f98:	2001      	movs	r0, #1
}
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009f9c:	6a18      	ldr	r0, [r3, #32]
 8009f9e:	e7dd      	b.n	8009f5c <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8009fa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fa2:	e7e5      	b.n	8009f70 <HAL_MDMA_Init+0xaa>

08009fa4 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8009fa4:	b1d8      	cbz	r0, 8009fde <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8009fa6:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009fa8:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8009faa:	68d3      	ldr	r3, [r2, #12]
 8009fac:	f023 0301 	bic.w	r3, r3, #1
 8009fb0:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8009fb6:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8009fb8:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8009fba:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8009fbc:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8009fbe:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8009fc0:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8009fc2:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8009fc4:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8009fc6:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009fc8:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009fca:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8009fcc:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8009fce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8009fd2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8009fd6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8009fda:	4618      	mov	r0, r3
 8009fdc:	4770      	bx	lr
    return HAL_ERROR;
 8009fde:	2001      	movs	r0, #1
}
 8009fe0:	4770      	bx	lr

08009fe2 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8009fe2:	4603      	mov	r3, r0
{
 8009fe4:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8009fe6:	b300      	cbz	r0, 800a02a <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8009fe8:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8009fec:	2801      	cmp	r0, #1
 8009fee:	d01e      	beq.n	800a02e <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8009ff0:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009ff2:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8009ff6:	42a5      	cmp	r5, r4
 8009ff8:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8009ffa:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8009ffe:	d112      	bne.n	800a026 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a000:	681c      	ldr	r4, [r3, #0]
 800a002:	6925      	ldr	r5, [r4, #16]
 800a004:	006d      	lsls	r5, r5, #1
 800a006:	d407      	bmi.n	800a018 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800a008:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a00a:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a00c:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800a00e:	b939      	cbnz	r1, 800a020 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a010:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800a014:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a016:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800a01e:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a020:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a024:	e7f6      	b.n	800a014 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800a026:	4620      	mov	r0, r4
 800a028:	e7f6      	b.n	800a018 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800a02a:	2001      	movs	r0, #1
 800a02c:	e7f7      	b.n	800a01e <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800a02e:	2002      	movs	r0, #2
 800a030:	e7f5      	b.n	800a01e <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800a032 <HAL_MDMA_Start_IT>:
{
 800a032:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800a034:	4604      	mov	r4, r0
 800a036:	2800      	cmp	r0, #0
 800a038:	d042      	beq.n	800a0c0 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800a03a:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800a03e:	2d01      	cmp	r5, #1
 800a040:	d03c      	beq.n	800a0bc <HAL_MDMA_Start_IT+0x8a>
 800a042:	2501      	movs	r5, #1
 800a044:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a048:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800a04c:	2d01      	cmp	r5, #1
 800a04e:	f04f 0500 	mov.w	r5, #0
 800a052:	d131      	bne.n	800a0b8 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a054:	2602      	movs	r6, #2
 800a056:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a05a:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800a05c:	6805      	ldr	r5, [r0, #0]
 800a05e:	68ee      	ldr	r6, [r5, #12]
 800a060:	f026 0601 	bic.w	r6, r6, #1
 800a064:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a066:	9e06      	ldr	r6, [sp, #24]
 800a068:	9600      	str	r6, [sp, #0]
 800a06a:	f7ff ff03 	bl	8009e74 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a06e:	68eb      	ldr	r3, [r5, #12]
 800a070:	f043 0306 	orr.w	r3, r3, #6
 800a074:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800a076:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a078:	b11b      	cbz	r3, 800a082 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a07a:	68eb      	ldr	r3, [r5, #12]
 800a07c:	f043 0310 	orr.w	r3, r3, #16
 800a080:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a082:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a084:	b11b      	cbz	r3, 800a08e <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a086:	68eb      	ldr	r3, [r5, #12]
 800a088:	f043 0308 	orr.w	r3, r3, #8
 800a08c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800a08e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a090:	b11b      	cbz	r3, 800a09a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a092:	68eb      	ldr	r3, [r5, #12]
 800a094:	f043 0320 	orr.w	r3, r3, #32
 800a098:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800a09a:	68eb      	ldr	r3, [r5, #12]
 800a09c:	f043 0301 	orr.w	r3, r3, #1
 800a0a0:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0a8:	d103      	bne.n	800a0b2 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a0aa:	68eb      	ldr	r3, [r5, #12]
 800a0ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0b0:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800a0b2:	2000      	movs	r0, #0
}
 800a0b4:	b002      	add	sp, #8
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800a0b8:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800a0bc:	2002      	movs	r0, #2
 800a0be:	e7f9      	b.n	800a0b4 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	e7f7      	b.n	800a0b4 <HAL_MDMA_Start_IT+0x82>

0800a0c4 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800a0c4:	b128      	cbz	r0, 800a0d2 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a0c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d003      	beq.n	800a0d6 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a0ce:	2380      	movs	r3, #128	@ 0x80
 800a0d0:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800a0d6:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a0d8:	2304      	movs	r3, #4
 800a0da:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800a0de:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800a0e0:	68d3      	ldr	r3, [r2, #12]
 800a0e2:	f023 0301 	bic.w	r3, r3, #1
 800a0e6:	60d3      	str	r3, [r2, #12]
}
 800a0e8:	4770      	bx	lr
	...

0800a0ec <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a0ec:	2300      	movs	r3, #0
{
 800a0ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800a0f0:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a0f2:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0f6:	4b58      	ldr	r3, [pc, #352]	@ (800a258 <HAL_MDMA_IRQHandler+0x16c>)
{
 800a0f8:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a0fa:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a0fc:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a0fe:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a100:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a102:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800a106:	3a40      	subs	r2, #64	@ 0x40
 800a108:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800a10c:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a110:	4202      	tst	r2, r0
 800a112:	f000 809e 	beq.w	800a252 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	07d1      	lsls	r1, r2, #31
 800a11a:	d529      	bpl.n	800a170 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a11c:	68da      	ldr	r2, [r3, #12]
 800a11e:	0792      	lsls	r2, r2, #30
 800a120:	d526      	bpl.n	800a170 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a122:	68da      	ldr	r2, [r3, #12]
 800a124:	f022 0202 	bic.w	r2, r2, #2
 800a128:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800a12a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a12c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a12e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a130:	bf54      	ite	pl
 800a132:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a136:	f041 0102 	orrmi.w	r1, r1, #2
 800a13a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a13c:	0591      	lsls	r1, r2, #22
 800a13e:	d503      	bpl.n	800a148 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a140:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a142:	f041 0104 	orr.w	r1, r1, #4
 800a146:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a148:	05d0      	lsls	r0, r2, #23
 800a14a:	d503      	bpl.n	800a154 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a14c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a14e:	f041 0108 	orr.w	r1, r1, #8
 800a152:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a154:	0551      	lsls	r1, r2, #21
 800a156:	d503      	bpl.n	800a160 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a158:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a15a:	f041 0110 	orr.w	r1, r1, #16
 800a15e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a160:	0512      	lsls	r2, r2, #20
 800a162:	d503      	bpl.n	800a16c <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a164:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800a166:	f042 0220 	orr.w	r2, r2, #32
 800a16a:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a16c:	2201      	movs	r2, #1
 800a16e:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	06d0      	lsls	r0, r2, #27
 800a174:	d508      	bpl.n	800a188 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	0691      	lsls	r1, r2, #26
 800a17a:	d505      	bpl.n	800a188 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a17c:	2210      	movs	r2, #16
 800a17e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800a180:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a182:	b10b      	cbz	r3, 800a188 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800a184:	4620      	mov	r0, r4
 800a186:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	0712      	lsls	r2, r2, #28
 800a18e:	d508      	bpl.n	800a1a2 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a190:	68da      	ldr	r2, [r3, #12]
 800a192:	06d0      	lsls	r0, r2, #27
 800a194:	d505      	bpl.n	800a1a2 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a196:	2208      	movs	r2, #8
 800a198:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800a19a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a19c:	b10b      	cbz	r3, 800a1a2 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	0751      	lsls	r1, r2, #29
 800a1a8:	d508      	bpl.n	800a1bc <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	0712      	lsls	r2, r2, #28
 800a1ae:	d505      	bpl.n	800a1bc <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a1b0:	2204      	movs	r2, #4
 800a1b2:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a1b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a1b6:	b10b      	cbz	r3, 800a1bc <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	0790      	lsls	r0, r2, #30
 800a1c2:	d524      	bpl.n	800a20e <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	0751      	lsls	r1, r2, #29
 800a1c8:	d521      	bpl.n	800a20e <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a1d0:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a1d2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800a1d6:	2a04      	cmp	r2, #4
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	d10c      	bne.n	800a1f8 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800a1de:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800a1e0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800a1e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800a1e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d031      	beq.n	800a252 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800a1ee:	4620      	mov	r0, r4
}
 800a1f0:	b003      	add	sp, #12
 800a1f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800a1f6:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a1f8:	2102      	movs	r1, #2
 800a1fa:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800a1fc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800a1fe:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800a202:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800a206:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a208:	b10b      	cbz	r3, 800a20e <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800a20a:	4620      	mov	r0, r4
 800a20c:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a20e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a210:	b1fb      	cbz	r3, 800a252 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800a212:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800a216:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a21a:	2304      	movs	r3, #4
 800a21c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	68da      	ldr	r2, [r3, #12]
 800a224:	f022 0201 	bic.w	r2, r2, #1
 800a228:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800a22a:	9a01      	ldr	r2, [sp, #4]
 800a22c:	3201      	adds	r2, #1
 800a22e:	42aa      	cmp	r2, r5
 800a230:	9201      	str	r2, [sp, #4]
 800a232:	d802      	bhi.n	800a23a <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	07d2      	lsls	r2, r2, #31
 800a238:	d4f7      	bmi.n	800a22a <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800a23a:	2200      	movs	r2, #0
 800a23c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a244:	bf4c      	ite	mi
 800a246:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800a248:	2301      	movpl	r3, #1
 800a24a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800a24e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a250:	e7cb      	b.n	800a1ea <HAL_MDMA_IRQHandler+0xfe>
}
 800a252:	b003      	add	sp, #12
 800a254:	bd30      	pop	{r4, r5, pc}
 800a256:	bf00      	nop
 800a258:	2400009c 	.word	0x2400009c

0800a25c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a25c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a25e:	4d1c      	ldr	r5, [pc, #112]	@ (800a2d0 <HAL_PWREx_ConfigSupply+0x74>)
{
 800a260:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a262:	68eb      	ldr	r3, [r5, #12]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	2b06      	cmp	r3, #6
 800a26a:	d006      	beq.n	800a27a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a26c:	68e8      	ldr	r0, [r5, #12]
 800a26e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a272:	1b00      	subs	r0, r0, r4
 800a274:	bf18      	it	ne
 800a276:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a278:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a27a:	68eb      	ldr	r3, [r5, #12]
 800a27c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a280:	4303      	orrs	r3, r0
 800a282:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800a284:	f7fd f970 	bl	8007568 <HAL_GetTick>
 800a288:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a28a:	686b      	ldr	r3, [r5, #4]
 800a28c:	049a      	lsls	r2, r3, #18
 800a28e:	d508      	bpl.n	800a2a2 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a290:	f1a4 031d 	sub.w	r3, r4, #29
 800a294:	2b01      	cmp	r3, #1
 800a296:	d90c      	bls.n	800a2b2 <HAL_PWREx_ConfigSupply+0x56>
 800a298:	3c2d      	subs	r4, #45	@ 0x2d
 800a29a:	2c01      	cmp	r4, #1
 800a29c:	d909      	bls.n	800a2b2 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800a29e:	2000      	movs	r0, #0
 800a2a0:	e7ea      	b.n	800a278 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2a2:	f7fd f961 	bl	8007568 <HAL_GetTick>
 800a2a6:	1b80      	subs	r0, r0, r6
 800a2a8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a2ac:	d9ed      	bls.n	800a28a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	e7e2      	b.n	800a278 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800a2b2:	f7fd f959 	bl	8007568 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a2b6:	4d06      	ldr	r5, [pc, #24]	@ (800a2d0 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800a2b8:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a2ba:	68eb      	ldr	r3, [r5, #12]
 800a2bc:	03db      	lsls	r3, r3, #15
 800a2be:	d4ee      	bmi.n	800a29e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2c0:	f7fd f952 	bl	8007568 <HAL_GetTick>
 800a2c4:	1b00      	subs	r0, r0, r4
 800a2c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a2ca:	d9f6      	bls.n	800a2ba <HAL_PWREx_ConfigSupply+0x5e>
 800a2cc:	e7ef      	b.n	800a2ae <HAL_PWREx_ConfigSupply+0x52>
 800a2ce:	bf00      	nop
 800a2d0:	58024800 	.word	0x58024800

0800a2d4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a2d8:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800a2da:	b134      	cbz	r4, 800a2ea <QSPI_Config+0x16>
 800a2dc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800a2e0:	d003      	beq.n	800a2ea <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a2e2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a2e4:	6805      	ldr	r5, [r0, #0]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a2ea:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a2ee:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a2f2:	f1ba 0f00 	cmp.w	sl, #0
 800a2f6:	d052      	beq.n	800a39e <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a2f8:	694f      	ldr	r7, [r1, #20]
 800a2fa:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a2fe:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a300:	04bf      	lsls	r7, r7, #18
 800a302:	680b      	ldr	r3, [r1, #0]
 800a304:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 800a308:	ea4a 0a02 	orr.w	sl, sl, r2
 800a30c:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a310:	b34e      	cbz	r6, 800a366 <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a312:	688c      	ldr	r4, [r1, #8]
 800a314:	ea4a 0006 	orr.w	r0, sl, r6
 800a318:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a31a:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a31c:	f1bc 0f00 	cmp.w	ip, #0
 800a320:	d013      	beq.n	800a34a <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a322:	ea43 030c 	orr.w	r3, r3, ip
 800a326:	ea43 0309 	orr.w	r3, r3, r9
 800a32a:	ea43 0308 	orr.w	r3, r3, r8
 800a32e:	ea43 030e 	orr.w	r3, r3, lr
 800a332:	4323      	orrs	r3, r4
 800a334:	68cc      	ldr	r4, [r1, #12]
 800a336:	4323      	orrs	r3, r4
 800a338:	433b      	orrs	r3, r7
 800a33a:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a33c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a340:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a342:	d00e      	beq.n	800a362 <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a344:	684b      	ldr	r3, [r1, #4]
 800a346:	61ab      	str	r3, [r5, #24]
 800a348:	e00b      	b.n	800a362 <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a34a:	ea43 0309 	orr.w	r3, r3, r9
 800a34e:	ea43 0308 	orr.w	r3, r3, r8
 800a352:	ea43 030e 	orr.w	r3, r3, lr
 800a356:	4323      	orrs	r3, r4
 800a358:	433b      	orrs	r3, r7
 800a35a:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a35c:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800a35e:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800a362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a366:	f1bc 0f00 	cmp.w	ip, #0
 800a36a:	d00d      	beq.n	800a388 <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a36c:	ea43 030c 	orr.w	r3, r3, ip
 800a370:	68c8      	ldr	r0, [r1, #12]
 800a372:	ea43 0309 	orr.w	r3, r3, r9
 800a376:	ea43 0308 	orr.w	r3, r3, r8
 800a37a:	ea43 030e 	orr.w	r3, r3, lr
 800a37e:	4303      	orrs	r3, r0
 800a380:	433b      	orrs	r3, r7
 800a382:	ea43 030a 	orr.w	r3, r3, sl
 800a386:	e7d9      	b.n	800a33c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a388:	ea43 0309 	orr.w	r3, r3, r9
 800a38c:	ea43 0308 	orr.w	r3, r3, r8
 800a390:	ea43 000e 	orr.w	r0, r3, lr
 800a394:	ea40 0307 	orr.w	r3, r0, r7
 800a398:	ea43 030a 	orr.w	r3, r3, sl
 800a39c:	e7de      	b.n	800a35c <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a39e:	b316      	cbz	r6, 800a3e6 <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a3a0:	688b      	ldr	r3, [r1, #8]
 800a3a2:	4326      	orrs	r6, r4
 800a3a4:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3a6:	694f      	ldr	r7, [r1, #20]
 800a3a8:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a3aa:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3ac:	04bf      	lsls	r7, r7, #18
 800a3ae:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3b0:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800a3b2:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a3b6:	f1bc 0f00 	cmp.w	ip, #0
 800a3ba:	d00b      	beq.n	800a3d4 <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3bc:	ea43 030c 	orr.w	r3, r3, ip
 800a3c0:	68c8      	ldr	r0, [r1, #12]
 800a3c2:	ea43 0308 	orr.w	r3, r3, r8
 800a3c6:	ea43 030e 	orr.w	r3, r3, lr
 800a3ca:	4323      	orrs	r3, r4
 800a3cc:	4303      	orrs	r3, r0
 800a3ce:	433b      	orrs	r3, r7
 800a3d0:	4333      	orrs	r3, r6
 800a3d2:	e7b3      	b.n	800a33c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3d4:	ea43 0208 	orr.w	r2, r3, r8
 800a3d8:	ea42 020e 	orr.w	r2, r2, lr
 800a3dc:	4322      	orrs	r2, r4
 800a3de:	433a      	orrs	r2, r7
 800a3e0:	4332      	orrs	r2, r6
 800a3e2:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800a3e4:	e7bb      	b.n	800a35e <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a3e6:	f1bc 0f00 	cmp.w	ip, #0
 800a3ea:	d01a      	beq.n	800a422 <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3ec:	ea44 030c 	orr.w	r3, r4, ip
 800a3f0:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800a3f2:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a3f4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a3f8:	ea43 0302 	orr.w	r3, r3, r2
 800a3fc:	ea43 0304 	orr.w	r3, r3, r4
 800a400:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800a402:	ea43 0304 	orr.w	r3, r3, r4
 800a406:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800a408:	ea43 0304 	orr.w	r3, r3, r4
 800a40c:	68cc      	ldr	r4, [r1, #12]
 800a40e:	ea43 0304 	orr.w	r3, r3, r4
 800a412:	694c      	ldr	r4, [r1, #20]
 800a414:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800a418:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a41a:	d0a2      	beq.n	800a362 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a41c:	684b      	ldr	r3, [r1, #4]
 800a41e:	6183      	str	r3, [r0, #24]
 800a420:	e79f      	b.n	800a362 <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800a422:	2c00      	cmp	r4, #0
 800a424:	d09d      	beq.n	800a362 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a426:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800a428:	6800      	ldr	r0, [r0, #0]
 800a42a:	4323      	orrs	r3, r4
 800a42c:	4313      	orrs	r3, r2
 800a42e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800a430:	4313      	orrs	r3, r2
 800a432:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800a434:	4313      	orrs	r3, r2
 800a436:	694a      	ldr	r2, [r1, #20]
 800a438:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800a43c:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800a43e:	f8c0 c018 	str.w	ip, [r0, #24]
}
 800a442:	e78e      	b.n	800a362 <QSPI_Config+0x8e>

0800a444 <QSPI_WaitFlagStateUntilTimeout>:
{
 800a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a448:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a44c:	4604      	mov	r4, r0
 800a44e:	460e      	mov	r6, r1
 800a450:	4615      	mov	r5, r2
 800a452:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a454:	6822      	ldr	r2, [r4, #0]
 800a456:	6893      	ldr	r3, [r2, #8]
 800a458:	4233      	tst	r3, r6
 800a45a:	bf14      	ite	ne
 800a45c:	2301      	movne	r3, #1
 800a45e:	2300      	moveq	r3, #0
 800a460:	42ab      	cmp	r3, r5
 800a462:	d101      	bne.n	800a468 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800a464:	2000      	movs	r0, #0
 800a466:	e00f      	b.n	800a488 <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 800a468:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a46c:	d0f3      	beq.n	800a456 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a46e:	f7fd f87b 	bl	8007568 <HAL_GetTick>
 800a472:	1bc0      	subs	r0, r0, r7
 800a474:	4540      	cmp	r0, r8
 800a476:	d909      	bls.n	800a48c <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a478:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a47a:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a47c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a480:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a48c:	f1b8 0f00 	cmp.w	r8, #0
 800a490:	d1e0      	bne.n	800a454 <QSPI_WaitFlagStateUntilTimeout+0x10>
 800a492:	e7f1      	b.n	800a478 <QSPI_WaitFlagStateUntilTimeout+0x34>

0800a494 <HAL_QSPI_Init>:
{
 800a494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a496:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a498:	f7fd f866 	bl	8007568 <HAL_GetTick>
 800a49c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800a49e:	2c00      	cmp	r4, #0
 800a4a0:	d03f      	beq.n	800a522 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a4a2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a4a6:	b92b      	cbnz	r3, 800a4b4 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f7f7 f883 	bl	80015b4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800a4ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a4b2:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a4b4:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a4b6:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a4b8:	68a3      	ldr	r3, [r4, #8]
 800a4ba:	680a      	ldr	r2, [r1, #0]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800a4c2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a4c6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a4c8:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	2120      	movs	r1, #32
 800a4d0:	462b      	mov	r3, r5
 800a4d2:	f7ff ffb7 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800a4d6:	bb10      	cbnz	r0, 800a51e <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	69e5      	ldr	r5, [r4, #28]
 800a4dc:	68e3      	ldr	r3, [r4, #12]
 800a4de:	6811      	ldr	r1, [r2, #0]
 800a4e0:	432b      	orrs	r3, r5
 800a4e2:	6a25      	ldr	r5, [r4, #32]
 800a4e4:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800a4e8:	432b      	orrs	r3, r5
 800a4ea:	6865      	ldr	r5, [r4, #4]
 800a4ec:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800a4f0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a4f8:	6855      	ldr	r5, [r2, #4]
 800a4fa:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800a4fe:	430b      	orrs	r3, r1
 800a500:	6921      	ldr	r1, [r4, #16]
 800a502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a506:	4908      	ldr	r1, [pc, #32]	@ (800a528 <HAL_QSPI_Init+0x94>)
 800a508:	4029      	ands	r1, r5
 800a50a:	430b      	orrs	r3, r1
 800a50c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800a516:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a518:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800a51a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800a51e:	b003      	add	sp, #12
 800a520:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800a522:	2001      	movs	r0, #1
 800a524:	e7fb      	b.n	800a51e <HAL_QSPI_Init+0x8a>
 800a526:	bf00      	nop
 800a528:	ffe0f8fe 	.word	0xffe0f8fe

0800a52c <HAL_QSPI_Command>:
{
 800a52c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	4604      	mov	r4, r0
 800a532:	468a      	mov	sl, r1
 800a534:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800a536:	f7fd f817 	bl	8007568 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a53a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a53e:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800a540:	2b01      	cmp	r3, #1
 800a542:	d035      	beq.n	800a5b0 <HAL_QSPI_Command+0x84>
 800a544:	2301      	movs	r3, #1
 800a546:	2602      	movs	r6, #2
 800a548:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a54c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a550:	2b01      	cmp	r3, #1
 800a552:	fa5f f983 	uxtb.w	r9, r3
 800a556:	d129      	bne.n	800a5ac <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a558:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a55a:	4603      	mov	r3, r0
 800a55c:	2120      	movs	r1, #32
 800a55e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a560:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800a562:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a566:	f8cd 8000 	str.w	r8, [sp]
 800a56a:	f7ff ff6b 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a56e:	4605      	mov	r5, r0
 800a570:	b9a8      	cbnz	r0, 800a59e <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a572:	4602      	mov	r2, r0
 800a574:	4651      	mov	r1, sl
 800a576:	4620      	mov	r0, r4
 800a578:	f7ff feac 	bl	800a2d4 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800a57c:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800a580:	b95b      	cbnz	r3, 800a59a <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a582:	463b      	mov	r3, r7
 800a584:	464a      	mov	r2, r9
 800a586:	4631      	mov	r1, r6
 800a588:	4620      	mov	r0, r4
 800a58a:	f8cd 8000 	str.w	r8, [sp]
 800a58e:	f7ff ff59 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a592:	4605      	mov	r5, r0
 800a594:	b918      	cbnz	r0, 800a59e <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a59a:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	b002      	add	sp, #8
 800a5a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800a5ac:	4635      	mov	r5, r6
 800a5ae:	e7f6      	b.n	800a59e <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 800a5b0:	2502      	movs	r5, #2
 800a5b2:	e7f7      	b.n	800a5a4 <HAL_QSPI_Command+0x78>

0800a5b4 <HAL_QSPI_Transmit>:
{
 800a5b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	4688      	mov	r8, r1
 800a5bc:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800a5be:	f7fc ffd3 	bl	8007568 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a5c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a5c6:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800a5c8:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d04c      	beq.n	800a668 <HAL_QSPI_Transmit+0xb4>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a5d4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	b2d8      	uxtb	r0, r3
 800a5dc:	d142      	bne.n	800a664 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a5e2:	f1b8 0f00 	cmp.w	r8, #0
 800a5e6:	d038      	beq.n	800a65a <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800a5e8:	2312      	movs	r3, #18
 800a5ea:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a5ee:	692b      	ldr	r3, [r5, #16]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a5f4:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800a5f6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a5fe:	696b      	ldr	r3, [r5, #20]
 800a600:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800a604:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800a606:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a608:	b99b      	cbnz	r3, 800a632 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a60a:	4633      	mov	r3, r6
 800a60c:	2201      	movs	r2, #1
 800a60e:	2102      	movs	r1, #2
 800a610:	4620      	mov	r0, r4
 800a612:	9700      	str	r7, [sp, #0]
 800a614:	f7ff ff16 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800a618:	b910      	cbnz	r0, 800a620 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	2202      	movs	r2, #2
 800a61e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a620:	2301      	movs	r3, #1
 800a622:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a626:	2300      	movs	r3, #0
 800a628:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a62c:	b002      	add	sp, #8
 800a62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800a632:	4633      	mov	r3, r6
 800a634:	2201      	movs	r2, #1
 800a636:	2104      	movs	r1, #4
 800a638:	4620      	mov	r0, r4
 800a63a:	9700      	str	r7, [sp, #0]
 800a63c:	f7ff ff02 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800a640:	2800      	cmp	r0, #0
 800a642:	d1ed      	bne.n	800a620 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800a644:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800a64c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a64e:	3301      	adds	r3, #1
 800a650:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800a652:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a654:	3b01      	subs	r3, #1
 800a656:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a658:	e7d5      	b.n	800a606 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a65a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a65c:	f043 0308 	orr.w	r3, r3, #8
 800a660:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a662:	e7e0      	b.n	800a626 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800a664:	2002      	movs	r0, #2
 800a666:	e7de      	b.n	800a626 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800a668:	2002      	movs	r0, #2
 800a66a:	e7df      	b.n	800a62c <HAL_QSPI_Transmit+0x78>

0800a66c <HAL_QSPI_Receive>:
{
 800a66c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a670:	4604      	mov	r4, r0
 800a672:	4617      	mov	r7, r2
 800a674:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800a676:	f7fc ff77 	bl	8007568 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a67a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800a67c:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800a67e:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800a680:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800a684:	2b01      	cmp	r3, #1
 800a686:	d04f      	beq.n	800a728 <HAL_QSPI_Receive+0xbc>
 800a688:	2301      	movs	r3, #1
 800a68a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a68e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a692:	2b01      	cmp	r3, #1
 800a694:	b2d8      	uxtb	r0, r3
 800a696:	d145      	bne.n	800a724 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a698:	2300      	movs	r3, #0
 800a69a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800a69c:	f1b8 0f00 	cmp.w	r8, #0
 800a6a0:	d03b      	beq.n	800a71a <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800a6a2:	2322      	movs	r3, #34	@ 0x22
 800a6a4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800a6a8:	692b      	ldr	r3, [r5, #16]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a6ae:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800a6b0:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a6b8:	6969      	ldr	r1, [r5, #20]
 800a6ba:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800a6be:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800a6c2:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800a6c4:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800a6c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a6c8:	b99b      	cbnz	r3, 800a6f2 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800a6ca:	4633      	mov	r3, r6
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	2102      	movs	r1, #2
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	9700      	str	r7, [sp, #0]
 800a6d4:	f7ff feb6 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800a6d8:	b910      	cbnz	r0, 800a6e0 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	2202      	movs	r2, #2
 800a6de:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a6ec:	b002      	add	sp, #8
 800a6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800a6f2:	4633      	mov	r3, r6
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	2106      	movs	r1, #6
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	9700      	str	r7, [sp, #0]
 800a6fc:	f7ff fea2 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800a700:	2800      	cmp	r0, #0
 800a702:	d1ed      	bne.n	800a6e0 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800a704:	f895 2020 	ldrb.w	r2, [r5, #32]
 800a708:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a70a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800a70c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a70e:	3301      	adds	r3, #1
 800a710:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800a712:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a714:	3b01      	subs	r3, #1
 800a716:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a718:	e7d5      	b.n	800a6c6 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800a71a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a71c:	f043 0308 	orr.w	r3, r3, #8
 800a720:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800a722:	e7e0      	b.n	800a6e6 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800a724:	2002      	movs	r0, #2
 800a726:	e7de      	b.n	800a6e6 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800a728:	2002      	movs	r0, #2
 800a72a:	e7df      	b.n	800a6ec <HAL_QSPI_Receive+0x80>

0800a72c <HAL_QSPI_AutoPolling>:
{
 800a72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	461f      	mov	r7, r3
 800a734:	4689      	mov	r9, r1
 800a736:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800a738:	f7fc ff16 	bl	8007568 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a73c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a740:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800a742:	2b01      	cmp	r3, #1
 800a744:	d041      	beq.n	800a7ca <HAL_QSPI_AutoPolling+0x9e>
 800a746:	2301      	movs	r3, #1
 800a748:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a74c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a750:	2b01      	cmp	r3, #1
 800a752:	fa5f f883 	uxtb.w	r8, r3
 800a756:	d136      	bne.n	800a7c6 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a758:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a75a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a75c:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a75e:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a760:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a764:	4603      	mov	r3, r0
 800a766:	9700      	str	r7, [sp, #0]
 800a768:	4620      	mov	r0, r4
 800a76a:	f7ff fe6b 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a76e:	bb20      	cbnz	r0, 800a7ba <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a770:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a772:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a774:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a776:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a778:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a77a:	686b      	ldr	r3, [r5, #4]
 800a77c:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a77e:	68ab      	ldr	r3, [r5, #8]
 800a780:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a782:	6813      	ldr	r3, [r2, #0]
 800a784:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a788:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a78a:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a78c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a790:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a792:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800a796:	68eb      	ldr	r3, [r5, #12]
 800a798:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a79c:	f7ff fd9a 	bl	800a2d4 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a7a0:	4633      	mov	r3, r6
 800a7a2:	4642      	mov	r2, r8
 800a7a4:	2108      	movs	r1, #8
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	9700      	str	r7, [sp, #0]
 800a7aa:	f7ff fe4b 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800a7ae:	b920      	cbnz	r0, 800a7ba <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	2208      	movs	r2, #8
 800a7b4:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a7b6:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a7c0:	b003      	add	sp, #12
 800a7c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800a7c6:	2002      	movs	r0, #2
 800a7c8:	e7f7      	b.n	800a7ba <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800a7ca:	2002      	movs	r0, #2
 800a7cc:	e7f8      	b.n	800a7c0 <HAL_QSPI_AutoPolling+0x94>

0800a7ce <HAL_QSPI_MemoryMapped>:
{
 800a7ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	4616      	mov	r6, r2
 800a7d4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a7d6:	f7fc fec7 	bl	8007568 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a7da:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a7de:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a7e0:	2a01      	cmp	r2, #1
 800a7e2:	d033      	beq.n	800a84c <HAL_QSPI_MemoryMapped+0x7e>
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a7ea:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800a7ee:	2a01      	cmp	r2, #1
 800a7f0:	d12a      	bne.n	800a848 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a7f2:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a7f4:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a7f6:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a7f8:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a7fa:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a7fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a800:	9100      	str	r1, [sp, #0]
 800a802:	2120      	movs	r1, #32
 800a804:	f7ff fe1e 	bl	800a444 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a808:	4605      	mov	r5, r0
 800a80a:	b9b8      	cbnz	r0, 800a83c <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a80c:	6823      	ldr	r3, [r4, #0]
 800a80e:	6872      	ldr	r2, [r6, #4]
 800a810:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a812:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a814:	f020 0008 	bic.w	r0, r0, #8
 800a818:	ea40 0002 	orr.w	r0, r0, r2
 800a81c:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a81e:	d107      	bne.n	800a830 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a820:	6832      	ldr	r2, [r6, #0]
 800a822:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a824:	2210      	movs	r2, #16
 800a826:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a82e:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a830:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800a834:	4639      	mov	r1, r7
 800a836:	4620      	mov	r0, r4
 800a838:	f7ff fd4c 	bl	800a2d4 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800a83c:	2300      	movs	r3, #0
 800a83e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a842:	4628      	mov	r0, r5
 800a844:	b003      	add	sp, #12
 800a846:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800a848:	2502      	movs	r5, #2
 800a84a:	e7f7      	b.n	800a83c <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800a84c:	2502      	movs	r5, #2
 800a84e:	e7f8      	b.n	800a842 <HAL_QSPI_MemoryMapped+0x74>

0800a850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a852:	4604      	mov	r4, r0
 800a854:	2800      	cmp	r0, #0
 800a856:	d074      	beq.n	800a942 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a858:	6803      	ldr	r3, [r0, #0]
 800a85a:	07d8      	lsls	r0, r3, #31
 800a85c:	d45e      	bmi.n	800a91c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	0799      	lsls	r1, r3, #30
 800a862:	f100 80ad 	bmi.w	800a9c0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	06da      	lsls	r2, r3, #27
 800a86a:	d527      	bpl.n	800a8bc <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a86c:	4a9c      	ldr	r2, [pc, #624]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a86e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a870:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a876:	2b08      	cmp	r3, #8
 800a878:	d007      	beq.n	800a88a <HAL_RCC_OscConfig+0x3a>
 800a87a:	2b18      	cmp	r3, #24
 800a87c:	f040 8103 	bne.w	800aa86 <HAL_RCC_OscConfig+0x236>
 800a880:	f001 0303 	and.w	r3, r1, #3
 800a884:	2b01      	cmp	r3, #1
 800a886:	f040 80fe 	bne.w	800aa86 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a88a:	6813      	ldr	r3, [r2, #0]
 800a88c:	05db      	lsls	r3, r3, #23
 800a88e:	d502      	bpl.n	800a896 <HAL_RCC_OscConfig+0x46>
 800a890:	69e3      	ldr	r3, [r4, #28]
 800a892:	2b80      	cmp	r3, #128	@ 0x80
 800a894:	d155      	bne.n	800a942 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a896:	f7fc fe7f 	bl	8007598 <HAL_GetREVID>
 800a89a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a89e:	6a21      	ldr	r1, [r4, #32]
 800a8a0:	4298      	cmp	r0, r3
 800a8a2:	4b8f      	ldr	r3, [pc, #572]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a8a4:	f200 80e8 	bhi.w	800aa78 <HAL_RCC_OscConfig+0x228>
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	2920      	cmp	r1, #32
 800a8ac:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800a8b0:	bf0c      	ite	eq
 800a8b2:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800a8b6:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800a8ba:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	0719      	lsls	r1, r3, #28
 800a8c0:	f100 8123 	bmi.w	800ab0a <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	069a      	lsls	r2, r3, #26
 800a8c8:	f100 8144 	bmi.w	800ab54 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	075d      	lsls	r5, r3, #29
 800a8d0:	d51e      	bpl.n	800a910 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8d2:	4d84      	ldr	r5, [pc, #528]	@ (800aae4 <HAL_RCC_OscConfig+0x294>)
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8da:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8dc:	f7fc fe44 	bl	8007568 <HAL_GetTick>
 800a8e0:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8e2:	682b      	ldr	r3, [r5, #0]
 800a8e4:	05da      	lsls	r2, r3, #23
 800a8e6:	f140 815a 	bpl.w	800ab9e <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	4d7c      	ldr	r5, [pc, #496]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	f040 815c 	bne.w	800abac <HAL_RCC_OscConfig+0x35c>
 800a8f4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a8f6:	f043 0301 	orr.w	r3, r3, #1
 800a8fa:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8fc:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800a900:	f7fc fe32 	bl	8007568 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a904:	4e76      	ldr	r6, [pc, #472]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800a906:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a908:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800a90a:	079b      	lsls	r3, r3, #30
 800a90c:	f140 8174 	bpl.w	800abf8 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a910:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a912:	2900      	cmp	r1, #0
 800a914:	f040 8177 	bne.w	800ac06 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800a918:	2000      	movs	r0, #0
 800a91a:	e02b      	b.n	800a974 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a91c:	4a70      	ldr	r2, [pc, #448]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a91e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a920:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a926:	2b10      	cmp	r3, #16
 800a928:	d005      	beq.n	800a936 <HAL_RCC_OscConfig+0xe6>
 800a92a:	2b18      	cmp	r3, #24
 800a92c:	d10b      	bne.n	800a946 <HAL_RCC_OscConfig+0xf6>
 800a92e:	f001 0303 	and.w	r3, r1, #3
 800a932:	2b02      	cmp	r3, #2
 800a934:	d107      	bne.n	800a946 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a936:	6813      	ldr	r3, [r2, #0]
 800a938:	039a      	lsls	r2, r3, #14
 800a93a:	d590      	bpl.n	800a85e <HAL_RCC_OscConfig+0xe>
 800a93c:	6863      	ldr	r3, [r4, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d18d      	bne.n	800a85e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800a942:	2001      	movs	r0, #1
 800a944:	e016      	b.n	800a974 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a946:	6863      	ldr	r3, [r4, #4]
 800a948:	4d65      	ldr	r5, [pc, #404]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a94a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a94e:	d112      	bne.n	800a976 <HAL_RCC_OscConfig+0x126>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a956:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a958:	f7fc fe06 	bl	8007568 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a95c:	4e60      	ldr	r6, [pc, #384]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800a95e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a960:	6833      	ldr	r3, [r6, #0]
 800a962:	039b      	lsls	r3, r3, #14
 800a964:	f53f af7b 	bmi.w	800a85e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a968:	f7fc fdfe 	bl	8007568 <HAL_GetTick>
 800a96c:	1b40      	subs	r0, r0, r5
 800a96e:	2864      	cmp	r0, #100	@ 0x64
 800a970:	d9f6      	bls.n	800a960 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800a972:	2003      	movs	r0, #3
}
 800a974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a976:	b9a3      	cbnz	r3, 800a9a2 <HAL_RCC_OscConfig+0x152>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a986:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a988:	f7fc fdee 	bl	8007568 <HAL_GetTick>
 800a98c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a98e:	682b      	ldr	r3, [r5, #0]
 800a990:	039f      	lsls	r7, r3, #14
 800a992:	f57f af64 	bpl.w	800a85e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a996:	f7fc fde7 	bl	8007568 <HAL_GetTick>
 800a99a:	1b80      	subs	r0, r0, r6
 800a99c:	2864      	cmp	r0, #100	@ 0x64
 800a99e:	d9f6      	bls.n	800a98e <HAL_RCC_OscConfig+0x13e>
 800a9a0:	e7e7      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	d103      	bne.n	800a9b2 <HAL_RCC_OscConfig+0x162>
 800a9aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	e7ce      	b.n	800a950 <HAL_RCC_OscConfig+0x100>
 800a9b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9b6:	602b      	str	r3, [r5, #0]
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9be:	e7ca      	b.n	800a956 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9c0:	4947      	ldr	r1, [pc, #284]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a9c2:	68e2      	ldr	r2, [r4, #12]
 800a9c4:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9c6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a9c8:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a9cc:	d003      	beq.n	800a9d6 <HAL_RCC_OscConfig+0x186>
 800a9ce:	2b18      	cmp	r3, #24
 800a9d0:	d12a      	bne.n	800aa28 <HAL_RCC_OscConfig+0x1d8>
 800a9d2:	0780      	lsls	r0, r0, #30
 800a9d4:	d128      	bne.n	800aa28 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a9d6:	680b      	ldr	r3, [r1, #0]
 800a9d8:	075b      	lsls	r3, r3, #29
 800a9da:	d501      	bpl.n	800a9e0 <HAL_RCC_OscConfig+0x190>
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	d0b0      	beq.n	800a942 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a9e0:	4d3f      	ldr	r5, [pc, #252]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800a9e2:	682b      	ldr	r3, [r5, #0]
 800a9e4:	f023 0319 	bic.w	r3, r3, #25
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a9ec:	f7fc fdbc 	bl	8007568 <HAL_GetTick>
 800a9f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9f2:	682b      	ldr	r3, [r5, #0]
 800a9f4:	075f      	lsls	r7, r3, #29
 800a9f6:	d511      	bpl.n	800aa1c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9f8:	f7fc fdce 	bl	8007598 <HAL_GetREVID>
 800a9fc:	f241 0303 	movw	r3, #4099	@ 0x1003
 800aa00:	6922      	ldr	r2, [r4, #16]
 800aa02:	4298      	cmp	r0, r3
 800aa04:	686b      	ldr	r3, [r5, #4]
 800aa06:	d822      	bhi.n	800aa4e <HAL_RCC_OscConfig+0x1fe>
 800aa08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800aa0c:	2a40      	cmp	r2, #64	@ 0x40
 800aa0e:	bf0c      	ite	eq
 800aa10:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800aa14:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800aa18:	606b      	str	r3, [r5, #4]
 800aa1a:	e724      	b.n	800a866 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa1c:	f7fc fda4 	bl	8007568 <HAL_GetTick>
 800aa20:	1b80      	subs	r0, r0, r6
 800aa22:	2802      	cmp	r0, #2
 800aa24:	d9e5      	bls.n	800a9f2 <HAL_RCC_OscConfig+0x1a2>
 800aa26:	e7a4      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa28:	4d2d      	ldr	r5, [pc, #180]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa2a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aa2c:	b1a2      	cbz	r2, 800aa58 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aa2e:	f023 0319 	bic.w	r3, r3, #25
 800aa32:	4313      	orrs	r3, r2
 800aa34:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aa36:	f7fc fd97 	bl	8007568 <HAL_GetTick>
 800aa3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	0758      	lsls	r0, r3, #29
 800aa40:	d4da      	bmi.n	800a9f8 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa42:	f7fc fd91 	bl	8007568 <HAL_GetTick>
 800aa46:	1b80      	subs	r0, r0, r6
 800aa48:	2802      	cmp	r0, #2
 800aa4a:	d9f7      	bls.n	800aa3c <HAL_RCC_OscConfig+0x1ec>
 800aa4c:	e791      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa4e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800aa52:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aa56:	e7df      	b.n	800aa18 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aa5e:	f7fc fd83 	bl	8007568 <HAL_GetTick>
 800aa62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	0759      	lsls	r1, r3, #29
 800aa68:	f57f aefd 	bpl.w	800a866 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa6c:	f7fc fd7c 	bl	8007568 <HAL_GetTick>
 800aa70:	1b80      	subs	r0, r0, r6
 800aa72:	2802      	cmp	r0, #2
 800aa74:	d9f6      	bls.n	800aa64 <HAL_RCC_OscConfig+0x214>
 800aa76:	e77c      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800aa7e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800aa82:	60da      	str	r2, [r3, #12]
 800aa84:	e71a      	b.n	800a8bc <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aa86:	69e3      	ldr	r3, [r4, #28]
 800aa88:	4d15      	ldr	r5, [pc, #84]	@ (800aae0 <HAL_RCC_OscConfig+0x290>)
 800aa8a:	b36b      	cbz	r3, 800aae8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800aa8c:	682b      	ldr	r3, [r5, #0]
 800aa8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aa94:	f7fc fd68 	bl	8007568 <HAL_GetTick>
 800aa98:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	05df      	lsls	r7, r3, #23
 800aa9e:	d511      	bpl.n	800aac4 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aaa0:	f7fc fd7a 	bl	8007598 <HAL_GetREVID>
 800aaa4:	f241 0303 	movw	r3, #4099	@ 0x1003
 800aaa8:	6a22      	ldr	r2, [r4, #32]
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	d810      	bhi.n	800aad0 <HAL_RCC_OscConfig+0x280>
 800aaae:	686b      	ldr	r3, [r5, #4]
 800aab0:	2a20      	cmp	r2, #32
 800aab2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800aab6:	bf0c      	ite	eq
 800aab8:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800aabc:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800aac0:	606b      	str	r3, [r5, #4]
 800aac2:	e6fb      	b.n	800a8bc <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aac4:	f7fc fd50 	bl	8007568 <HAL_GetTick>
 800aac8:	1b80      	subs	r0, r0, r6
 800aaca:	2802      	cmp	r0, #2
 800aacc:	d9e5      	bls.n	800aa9a <HAL_RCC_OscConfig+0x24a>
 800aace:	e750      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aad0:	68eb      	ldr	r3, [r5, #12]
 800aad2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800aad6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aada:	60eb      	str	r3, [r5, #12]
 800aadc:	e6ee      	b.n	800a8bc <HAL_RCC_OscConfig+0x6c>
 800aade:	bf00      	nop
 800aae0:	58024400 	.word	0x58024400
 800aae4:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aaf0:	f7fc fd3a 	bl	8007568 <HAL_GetTick>
 800aaf4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aaf6:	682b      	ldr	r3, [r5, #0]
 800aaf8:	05d8      	lsls	r0, r3, #23
 800aafa:	f57f aedf 	bpl.w	800a8bc <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aafe:	f7fc fd33 	bl	8007568 <HAL_GetTick>
 800ab02:	1b80      	subs	r0, r0, r6
 800ab04:	2802      	cmp	r0, #2
 800ab06:	d9f6      	bls.n	800aaf6 <HAL_RCC_OscConfig+0x2a6>
 800ab08:	e733      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ab0a:	6963      	ldr	r3, [r4, #20]
 800ab0c:	4da3      	ldr	r5, [pc, #652]	@ (800ad9c <HAL_RCC_OscConfig+0x54c>)
 800ab0e:	b183      	cbz	r3, 800ab32 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800ab10:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ab12:	f043 0301 	orr.w	r3, r3, #1
 800ab16:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800ab18:	f7fc fd26 	bl	8007568 <HAL_GetTick>
 800ab1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ab1e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ab20:	079b      	lsls	r3, r3, #30
 800ab22:	f53f aecf 	bmi.w	800a8c4 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab26:	f7fc fd1f 	bl	8007568 <HAL_GetTick>
 800ab2a:	1b80      	subs	r0, r0, r6
 800ab2c:	2802      	cmp	r0, #2
 800ab2e:	d9f6      	bls.n	800ab1e <HAL_RCC_OscConfig+0x2ce>
 800ab30:	e71f      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800ab32:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ab34:	f023 0301 	bic.w	r3, r3, #1
 800ab38:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800ab3a:	f7fc fd15 	bl	8007568 <HAL_GetTick>
 800ab3e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ab40:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ab42:	079f      	lsls	r7, r3, #30
 800ab44:	f57f aebe 	bpl.w	800a8c4 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab48:	f7fc fd0e 	bl	8007568 <HAL_GetTick>
 800ab4c:	1b80      	subs	r0, r0, r6
 800ab4e:	2802      	cmp	r0, #2
 800ab50:	d9f6      	bls.n	800ab40 <HAL_RCC_OscConfig+0x2f0>
 800ab52:	e70e      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ab54:	69a3      	ldr	r3, [r4, #24]
 800ab56:	4d91      	ldr	r5, [pc, #580]	@ (800ad9c <HAL_RCC_OscConfig+0x54c>)
 800ab58:	b183      	cbz	r3, 800ab7c <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ab60:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ab62:	f7fc fd01 	bl	8007568 <HAL_GetTick>
 800ab66:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	0498      	lsls	r0, r3, #18
 800ab6c:	f53f aeae 	bmi.w	800a8cc <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab70:	f7fc fcfa 	bl	8007568 <HAL_GetTick>
 800ab74:	1b80      	subs	r0, r0, r6
 800ab76:	2802      	cmp	r0, #2
 800ab78:	d9f6      	bls.n	800ab68 <HAL_RCC_OscConfig+0x318>
 800ab7a:	e6fa      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab82:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800ab84:	f7fc fcf0 	bl	8007568 <HAL_GetTick>
 800ab88:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab8a:	682b      	ldr	r3, [r5, #0]
 800ab8c:	0499      	lsls	r1, r3, #18
 800ab8e:	f57f ae9d 	bpl.w	800a8cc <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab92:	f7fc fce9 	bl	8007568 <HAL_GetTick>
 800ab96:	1b80      	subs	r0, r0, r6
 800ab98:	2802      	cmp	r0, #2
 800ab9a:	d9f6      	bls.n	800ab8a <HAL_RCC_OscConfig+0x33a>
 800ab9c:	e6e9      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab9e:	f7fc fce3 	bl	8007568 <HAL_GetTick>
 800aba2:	1b80      	subs	r0, r0, r6
 800aba4:	2864      	cmp	r0, #100	@ 0x64
 800aba6:	f67f ae9c 	bls.w	800a8e2 <HAL_RCC_OscConfig+0x92>
 800abaa:	e6e2      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abac:	b9b3      	cbnz	r3, 800abdc <HAL_RCC_OscConfig+0x38c>
 800abae:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abb0:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abb4:	f023 0301 	bic.w	r3, r3, #1
 800abb8:	672b      	str	r3, [r5, #112]	@ 0x70
 800abba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800abbc:	f023 0304 	bic.w	r3, r3, #4
 800abc0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800abc2:	f7fc fcd1 	bl	8007568 <HAL_GetTick>
 800abc6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abc8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800abca:	0798      	lsls	r0, r3, #30
 800abcc:	f57f aea0 	bpl.w	800a910 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abd0:	f7fc fcca 	bl	8007568 <HAL_GetTick>
 800abd4:	1b80      	subs	r0, r0, r6
 800abd6:	42b8      	cmp	r0, r7
 800abd8:	d9f6      	bls.n	800abc8 <HAL_RCC_OscConfig+0x378>
 800abda:	e6ca      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abdc:	2b05      	cmp	r3, #5
 800abde:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800abe0:	d103      	bne.n	800abea <HAL_RCC_OscConfig+0x39a>
 800abe2:	f043 0304 	orr.w	r3, r3, #4
 800abe6:	672b      	str	r3, [r5, #112]	@ 0x70
 800abe8:	e684      	b.n	800a8f4 <HAL_RCC_OscConfig+0xa4>
 800abea:	f023 0301 	bic.w	r3, r3, #1
 800abee:	672b      	str	r3, [r5, #112]	@ 0x70
 800abf0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800abf2:	f023 0304 	bic.w	r3, r3, #4
 800abf6:	e680      	b.n	800a8fa <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abf8:	f7fc fcb6 	bl	8007568 <HAL_GetTick>
 800abfc:	1b40      	subs	r0, r0, r5
 800abfe:	42b8      	cmp	r0, r7
 800ac00:	f67f ae82 	bls.w	800a908 <HAL_RCC_OscConfig+0xb8>
 800ac04:	e6b5      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac06:	4d65      	ldr	r5, [pc, #404]	@ (800ad9c <HAL_RCC_OscConfig+0x54c>)
 800ac08:	692b      	ldr	r3, [r5, #16]
 800ac0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac0e:	2b18      	cmp	r3, #24
 800ac10:	d078      	beq.n	800ad04 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 800ac12:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac14:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800ac16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac1a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac1c:	d165      	bne.n	800acea <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800ac1e:	f7fc fca3 	bl	8007568 <HAL_GetTick>
 800ac22:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	0199      	lsls	r1, r3, #6
 800ac28:	d459      	bmi.n	800acde <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac2a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800ac2c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ac2e:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800ac32:	f023 0303 	bic.w	r3, r3, #3
 800ac36:	4313      	orrs	r3, r2
 800ac38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ac3a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ac3e:	62ab      	str	r3, [r5, #40]	@ 0x28
 800ac40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac42:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ac44:	3b01      	subs	r3, #1
 800ac46:	3a01      	subs	r2, #1
 800ac48:	025b      	lsls	r3, r3, #9
 800ac4a:	0412      	lsls	r2, r2, #16
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ac52:	4313      	orrs	r3, r2
 800ac54:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ac56:	3a01      	subs	r2, #1
 800ac58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ac60:	3a01      	subs	r2, #1
 800ac62:	0612      	lsls	r2, r2, #24
 800ac64:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac6c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac6e:	f023 0301 	bic.w	r3, r3, #1
 800ac72:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac74:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ac76:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800ac78:	f36f 03cf 	bfc	r3, #3, #13
 800ac7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ac80:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac82:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac84:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ac86:	f023 030c 	bic.w	r3, r3, #12
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac8e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac90:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800ac92:	f023 0302 	bic.w	r3, r3, #2
 800ac96:	4313      	orrs	r3, r2
 800ac98:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac9a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ac9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aca0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800aca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aca8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800acaa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800acb0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800acb2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800acb4:	f043 0301 	orr.w	r3, r3, #1
 800acb8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800acc0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800acc2:	f7fc fc51 	bl	8007568 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acc6:	4d35      	ldr	r5, [pc, #212]	@ (800ad9c <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800acc8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acca:	682b      	ldr	r3, [r5, #0]
 800accc:	019a      	lsls	r2, r3, #6
 800acce:	f53f ae23 	bmi.w	800a918 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acd2:	f7fc fc49 	bl	8007568 <HAL_GetTick>
 800acd6:	1b00      	subs	r0, r0, r4
 800acd8:	2802      	cmp	r0, #2
 800acda:	d9f6      	bls.n	800acca <HAL_RCC_OscConfig+0x47a>
 800acdc:	e649      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acde:	f7fc fc43 	bl	8007568 <HAL_GetTick>
 800ace2:	1b80      	subs	r0, r0, r6
 800ace4:	2802      	cmp	r0, #2
 800ace6:	d99d      	bls.n	800ac24 <HAL_RCC_OscConfig+0x3d4>
 800ace8:	e643      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800acea:	f7fc fc3d 	bl	8007568 <HAL_GetTick>
 800acee:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acf0:	682b      	ldr	r3, [r5, #0]
 800acf2:	019b      	lsls	r3, r3, #6
 800acf4:	f57f ae10 	bpl.w	800a918 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acf8:	f7fc fc36 	bl	8007568 <HAL_GetTick>
 800acfc:	1b00      	subs	r0, r0, r4
 800acfe:	2802      	cmp	r0, #2
 800ad00:	d9f6      	bls.n	800acf0 <HAL_RCC_OscConfig+0x4a0>
 800ad02:	e636      	b.n	800a972 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad04:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad06:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad08:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad0a:	f43f ae1a 	beq.w	800a942 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad12:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ad14:	4281      	cmp	r1, r0
 800ad16:	f47f ae14 	bne.w	800a942 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad1a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad20:	428a      	cmp	r2, r1
 800ad22:	f47f ae0e 	bne.w	800a942 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad26:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ad28:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800ad2c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad2e:	4291      	cmp	r1, r2
 800ad30:	f47f ae07 	bne.w	800a942 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad34:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ad36:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800ad3a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad3c:	4291      	cmp	r1, r2
 800ad3e:	f47f ae00 	bne.w	800a942 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad42:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ad44:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800ad48:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad4a:	4291      	cmp	r1, r2
 800ad4c:	f47f adf9 	bne.w	800a942 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad50:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ad52:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ad56:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	f47f adf2 	bne.w	800a942 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad5e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad60:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad62:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad66:	429a      	cmp	r2, r3
 800ad68:	f43f add6 	beq.w	800a918 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad6c:	4d0b      	ldr	r5, [pc, #44]	@ (800ad9c <HAL_RCC_OscConfig+0x54c>)
 800ad6e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ad70:	f023 0301 	bic.w	r3, r3, #1
 800ad74:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800ad76:	f7fc fbf7 	bl	8007568 <HAL_GetTick>
 800ad7a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad7c:	f7fc fbf4 	bl	8007568 <HAL_GetTick>
 800ad80:	42b0      	cmp	r0, r6
 800ad82:	d0fb      	beq.n	800ad7c <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad84:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ad86:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800ad88:	f36f 03cf 	bfc	r3, #3, #13
 800ad8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ad90:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad92:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800ad9a:	e5bd      	b.n	800a918 <HAL_RCC_OscConfig+0xc8>
 800ad9c:	58024400 	.word	0x58024400

0800ada0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4c23      	ldr	r4, [pc, #140]	@ (800ae30 <HAL_RCC_MCOConfig+0x90>)
 800ada4:	b088      	sub	sp, #32
 800ada6:	460e      	mov	r6, r1
 800ada8:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800adaa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800adae:	b9f8      	cbnz	r0, 800adf0 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800adb0:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adb4:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800adb8:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800adba:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800adbe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800adc2:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adcc:	2302      	movs	r3, #2
 800adce:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800add2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add4:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800add8:	4816      	ldr	r0, [pc, #88]	@ (800ae34 <HAL_RCC_MCOConfig+0x94>)
 800adda:	f7fd fa4b 	bl	8008274 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800ade4:	ea43 0106 	orr.w	r1, r3, r6
 800ade8:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800adea:	6121      	str	r1, [r4, #16]
  }
}
 800adec:	b008      	add	sp, #32
 800adee:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800adf0:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf8:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800adfa:	480f      	ldr	r0, [pc, #60]	@ (800ae38 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800adfc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800ae00:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ae18:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ae1a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ae1c:	f7fd fa2a 	bl	8008274 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800ae26:	ea43 0106 	orr.w	r1, r3, r6
 800ae2a:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800ae2e:	e7dc      	b.n	800adea <HAL_RCC_MCOConfig+0x4a>
 800ae30:	58024400 	.word	0x58024400
 800ae34:	58020000 	.word	0x58020000
 800ae38:	58020800 	.word	0x58020800

0800ae3c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae3c:	4b49      	ldr	r3, [pc, #292]	@ (800af64 <HAL_RCC_GetSysClockFreq+0x128>)
 800ae3e:	691a      	ldr	r2, [r3, #16]
 800ae40:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800ae44:	2a10      	cmp	r2, #16
{
 800ae46:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae48:	f000 8088 	beq.w	800af5c <HAL_RCC_GetSysClockFreq+0x120>
 800ae4c:	2a18      	cmp	r2, #24
 800ae4e:	d00c      	beq.n	800ae6a <HAL_RCC_GetSysClockFreq+0x2e>
 800ae50:	2a00      	cmp	r2, #0
 800ae52:	f040 8085 	bne.w	800af60 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	4843      	ldr	r0, [pc, #268]	@ (800af68 <HAL_RCC_GetSysClockFreq+0x12c>)
 800ae5a:	f012 0f20 	tst.w	r2, #32
 800ae5e:	d003      	beq.n	800ae68 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ae66:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800ae68:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae6a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ae6c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae6e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800ae70:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ae74:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800ae7a:	d0f5      	beq.n	800ae68 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae7c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae80:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae84:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae88:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae8c:	4362      	muls	r2, r4
 800ae8e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800ae92:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae98:	ee06 2a90 	vmov	s13, r2
 800ae9c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800aea0:	d04e      	beq.n	800af40 <HAL_RCC_GetSysClockFreq+0x104>
 800aea2:	2902      	cmp	r1, #2
 800aea4:	d03e      	beq.n	800af24 <HAL_RCC_GetSysClockFreq+0xe8>
 800aea6:	2900      	cmp	r1, #0
 800aea8:	d14a      	bne.n	800af40 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	0692      	lsls	r2, r2, #26
 800aeae:	d527      	bpl.n	800af00 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeb0:	6819      	ldr	r1, [r3, #0]
 800aeb2:	4a2d      	ldr	r2, [pc, #180]	@ (800af68 <HAL_RCC_GetSysClockFreq+0x12c>)
 800aeb4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aeba:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec0:	ee07 2a90 	vmov	s15, r2
 800aec4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800aec8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800aecc:	ee07 3a10 	vmov	s14, r3
 800aed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aed4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800aed8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800aedc:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800aee0:	4b20      	ldr	r3, [pc, #128]	@ (800af64 <HAL_RCC_GetSysClockFreq+0x128>)
 800aee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800aee8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800aeea:	ee07 3a10 	vmov	s14, r3
 800aeee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800aef2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aef6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800aefa:	ee17 0a90 	vmov	r0, s15
 800aefe:	e7b3      	b.n	800ae68 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af12:	ee77 7a86 	vadd.f32	s15, s15, s12
 800af16:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800af6c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af1a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800af1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800af22:	e7dd      	b.n	800aee0 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af2a:	ee07 3a90 	vmov	s15, r3
 800af2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af36:	ee77 7a86 	vadd.f32	s15, s15, s12
 800af3a:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800af70 <HAL_RCC_GetSysClockFreq+0x134>
 800af3e:	e7ec      	b.n	800af1a <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af46:	ee07 3a90 	vmov	s15, r3
 800af4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee77 7a86 	vadd.f32	s15, s15, s12
 800af56:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800af74 <HAL_RCC_GetSysClockFreq+0x138>
 800af5a:	e7de      	b.n	800af1a <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af5c:	4806      	ldr	r0, [pc, #24]	@ (800af78 <HAL_RCC_GetSysClockFreq+0x13c>)
 800af5e:	e783      	b.n	800ae68 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800af60:	4806      	ldr	r0, [pc, #24]	@ (800af7c <HAL_RCC_GetSysClockFreq+0x140>)
 800af62:	e781      	b.n	800ae68 <HAL_RCC_GetSysClockFreq+0x2c>
 800af64:	58024400 	.word	0x58024400
 800af68:	03d09000 	.word	0x03d09000
 800af6c:	4c742400 	.word	0x4c742400
 800af70:	4bbebc20 	.word	0x4bbebc20
 800af74:	4a742400 	.word	0x4a742400
 800af78:	017d7840 	.word	0x017d7840
 800af7c:	003d0900 	.word	0x003d0900

0800af80 <HAL_RCC_ClockConfig>:
{
 800af80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af84:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800af86:	4604      	mov	r4, r0
 800af88:	b910      	cbnz	r0, 800af90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800af8a:	2001      	movs	r0, #1
}
 800af8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af90:	4a88      	ldr	r2, [pc, #544]	@ (800b1b4 <HAL_RCC_ClockConfig+0x234>)
 800af92:	6813      	ldr	r3, [r2, #0]
 800af94:	f003 030f 	and.w	r3, r3, #15
 800af98:	428b      	cmp	r3, r1
 800af9a:	f0c0 8093 	bcc.w	800b0c4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	075f      	lsls	r7, r3, #29
 800afa2:	f100 809b 	bmi.w	800b0dc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afa6:	071e      	lsls	r6, r3, #28
 800afa8:	d50b      	bpl.n	800afc2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800afaa:	4983      	ldr	r1, [pc, #524]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800afac:	6960      	ldr	r0, [r4, #20]
 800afae:	69ca      	ldr	r2, [r1, #28]
 800afb0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800afb4:	4290      	cmp	r0, r2
 800afb6:	d904      	bls.n	800afc2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800afb8:	69ca      	ldr	r2, [r1, #28]
 800afba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800afbe:	4302      	orrs	r2, r0
 800afc0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afc2:	06d8      	lsls	r0, r3, #27
 800afc4:	d50b      	bpl.n	800afde <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800afc6:	497c      	ldr	r1, [pc, #496]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800afc8:	69a0      	ldr	r0, [r4, #24]
 800afca:	69ca      	ldr	r2, [r1, #28]
 800afcc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800afd0:	4290      	cmp	r0, r2
 800afd2:	d904      	bls.n	800afde <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800afd4:	69ca      	ldr	r2, [r1, #28]
 800afd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800afda:	4302      	orrs	r2, r0
 800afdc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800afde:	0699      	lsls	r1, r3, #26
 800afe0:	d50b      	bpl.n	800affa <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800afe2:	4975      	ldr	r1, [pc, #468]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800afe4:	69e0      	ldr	r0, [r4, #28]
 800afe6:	6a0a      	ldr	r2, [r1, #32]
 800afe8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800afec:	4290      	cmp	r0, r2
 800afee:	d904      	bls.n	800affa <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aff0:	6a0a      	ldr	r2, [r1, #32]
 800aff2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aff6:	4302      	orrs	r2, r0
 800aff8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800affa:	079a      	lsls	r2, r3, #30
 800affc:	d50b      	bpl.n	800b016 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800affe:	496e      	ldr	r1, [pc, #440]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b000:	68e0      	ldr	r0, [r4, #12]
 800b002:	698a      	ldr	r2, [r1, #24]
 800b004:	f002 020f 	and.w	r2, r2, #15
 800b008:	4290      	cmp	r0, r2
 800b00a:	d904      	bls.n	800b016 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b00c:	698a      	ldr	r2, [r1, #24]
 800b00e:	f022 020f 	bic.w	r2, r2, #15
 800b012:	4302      	orrs	r2, r0
 800b014:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b016:	07df      	lsls	r7, r3, #31
 800b018:	d46e      	bmi.n	800b0f8 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	079e      	lsls	r6, r3, #30
 800b01e:	f100 80a1 	bmi.w	800b164 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b022:	4964      	ldr	r1, [pc, #400]	@ (800b1b4 <HAL_RCC_ClockConfig+0x234>)
 800b024:	680a      	ldr	r2, [r1, #0]
 800b026:	f002 020f 	and.w	r2, r2, #15
 800b02a:	42aa      	cmp	r2, r5
 800b02c:	f200 80a8 	bhi.w	800b180 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b030:	0758      	lsls	r0, r3, #29
 800b032:	f100 80b1 	bmi.w	800b198 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b036:	0719      	lsls	r1, r3, #28
 800b038:	d50b      	bpl.n	800b052 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b03a:	495f      	ldr	r1, [pc, #380]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b03c:	6960      	ldr	r0, [r4, #20]
 800b03e:	69ca      	ldr	r2, [r1, #28]
 800b040:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b044:	4290      	cmp	r0, r2
 800b046:	d204      	bcs.n	800b052 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b048:	69ca      	ldr	r2, [r1, #28]
 800b04a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b04e:	4302      	orrs	r2, r0
 800b050:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b052:	06da      	lsls	r2, r3, #27
 800b054:	d50b      	bpl.n	800b06e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b056:	4958      	ldr	r1, [pc, #352]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b058:	69a0      	ldr	r0, [r4, #24]
 800b05a:	69ca      	ldr	r2, [r1, #28]
 800b05c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b060:	4290      	cmp	r0, r2
 800b062:	d204      	bcs.n	800b06e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b064:	69ca      	ldr	r2, [r1, #28]
 800b066:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b06a:	4302      	orrs	r2, r0
 800b06c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b06e:	069b      	lsls	r3, r3, #26
 800b070:	d50b      	bpl.n	800b08a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b072:	4a51      	ldr	r2, [pc, #324]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b074:	69e1      	ldr	r1, [r4, #28]
 800b076:	6a13      	ldr	r3, [r2, #32]
 800b078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b07c:	4299      	cmp	r1, r3
 800b07e:	d204      	bcs.n	800b08a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b080:	6a13      	ldr	r3, [r2, #32]
 800b082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b086:	430b      	orrs	r3, r1
 800b088:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b08a:	f7ff fed7 	bl	800ae3c <HAL_RCC_GetSysClockFreq>
 800b08e:	494a      	ldr	r1, [pc, #296]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b090:	4a4a      	ldr	r2, [pc, #296]	@ (800b1bc <HAL_RCC_ClockConfig+0x23c>)
 800b092:	698b      	ldr	r3, [r1, #24]
 800b094:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b098:	5cd3      	ldrb	r3, [r2, r3]
 800b09a:	f003 031f 	and.w	r3, r3, #31
 800b09e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0a0:	698b      	ldr	r3, [r1, #24]
 800b0a2:	f003 030f 	and.w	r3, r3, #15
 800b0a6:	5cd3      	ldrb	r3, [r2, r3]
 800b0a8:	4a45      	ldr	r2, [pc, #276]	@ (800b1c0 <HAL_RCC_ClockConfig+0x240>)
 800b0aa:	f003 031f 	and.w	r3, r3, #31
 800b0ae:	fa20 f303 	lsr.w	r3, r0, r3
 800b0b2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800b0b4:	4b43      	ldr	r3, [pc, #268]	@ (800b1c4 <HAL_RCC_ClockConfig+0x244>)
 800b0b6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800b0b8:	4b43      	ldr	r3, [pc, #268]	@ (800b1c8 <HAL_RCC_ClockConfig+0x248>)
}
 800b0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	f7f6 bc6a 	b.w	8001998 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0c4:	6813      	ldr	r3, [r2, #0]
 800b0c6:	f023 030f 	bic.w	r3, r3, #15
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ce:	6813      	ldr	r3, [r2, #0]
 800b0d0:	f003 030f 	and.w	r3, r3, #15
 800b0d4:	428b      	cmp	r3, r1
 800b0d6:	f47f af58 	bne.w	800af8a <HAL_RCC_ClockConfig+0xa>
 800b0da:	e760      	b.n	800af9e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0dc:	4936      	ldr	r1, [pc, #216]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b0de:	6920      	ldr	r0, [r4, #16]
 800b0e0:	698a      	ldr	r2, [r1, #24]
 800b0e2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b0e6:	4290      	cmp	r0, r2
 800b0e8:	f67f af5d 	bls.w	800afa6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0ec:	698a      	ldr	r2, [r1, #24]
 800b0ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b0f2:	4302      	orrs	r2, r0
 800b0f4:	618a      	str	r2, [r1, #24]
 800b0f6:	e756      	b.n	800afa6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b0f8:	4b2f      	ldr	r3, [pc, #188]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b0fa:	68a1      	ldr	r1, [r4, #8]
 800b0fc:	699a      	ldr	r2, [r3, #24]
 800b0fe:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800b102:	430a      	orrs	r2, r1
 800b104:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b106:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b108:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b10a:	2902      	cmp	r1, #2
 800b10c:	d11d      	bne.n	800b14a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b10e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b112:	f43f af3a 	beq.w	800af8a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b116:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b118:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b11c:	4f26      	ldr	r7, [pc, #152]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b11e:	f022 0207 	bic.w	r2, r2, #7
 800b122:	430a      	orrs	r2, r1
 800b124:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800b126:	f7fc fa1f 	bl	8007568 <HAL_GetTick>
 800b12a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	6862      	ldr	r2, [r4, #4]
 800b130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b134:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b138:	f43f af6f 	beq.w	800b01a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b13c:	f7fc fa14 	bl	8007568 <HAL_GetTick>
 800b140:	1b80      	subs	r0, r0, r6
 800b142:	4540      	cmp	r0, r8
 800b144:	d9f2      	bls.n	800b12c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800b146:	2003      	movs	r0, #3
 800b148:	e720      	b.n	800af8c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b14a:	2903      	cmp	r1, #3
 800b14c:	d102      	bne.n	800b154 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b14e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800b152:	e7de      	b.n	800b112 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b154:	2901      	cmp	r1, #1
 800b156:	d102      	bne.n	800b15e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b158:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b15c:	e7d9      	b.n	800b112 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b15e:	f012 0f04 	tst.w	r2, #4
 800b162:	e7d6      	b.n	800b112 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b164:	4914      	ldr	r1, [pc, #80]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b166:	68e0      	ldr	r0, [r4, #12]
 800b168:	698a      	ldr	r2, [r1, #24]
 800b16a:	f002 020f 	and.w	r2, r2, #15
 800b16e:	4290      	cmp	r0, r2
 800b170:	f4bf af57 	bcs.w	800b022 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b174:	698a      	ldr	r2, [r1, #24]
 800b176:	f022 020f 	bic.w	r2, r2, #15
 800b17a:	4302      	orrs	r2, r0
 800b17c:	618a      	str	r2, [r1, #24]
 800b17e:	e750      	b.n	800b022 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b180:	680a      	ldr	r2, [r1, #0]
 800b182:	f022 020f 	bic.w	r2, r2, #15
 800b186:	432a      	orrs	r2, r5
 800b188:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b18a:	680a      	ldr	r2, [r1, #0]
 800b18c:	f002 020f 	and.w	r2, r2, #15
 800b190:	42aa      	cmp	r2, r5
 800b192:	f47f aefa 	bne.w	800af8a <HAL_RCC_ClockConfig+0xa>
 800b196:	e74b      	b.n	800b030 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b198:	4907      	ldr	r1, [pc, #28]	@ (800b1b8 <HAL_RCC_ClockConfig+0x238>)
 800b19a:	6920      	ldr	r0, [r4, #16]
 800b19c:	698a      	ldr	r2, [r1, #24]
 800b19e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b1a2:	4290      	cmp	r0, r2
 800b1a4:	f4bf af47 	bcs.w	800b036 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b1a8:	698a      	ldr	r2, [r1, #24]
 800b1aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b1ae:	4302      	orrs	r2, r0
 800b1b0:	618a      	str	r2, [r1, #24]
 800b1b2:	e740      	b.n	800b036 <HAL_RCC_ClockConfig+0xb6>
 800b1b4:	52002000 	.word	0x52002000
 800b1b8:	58024400 	.word	0x58024400
 800b1bc:	0802894c 	.word	0x0802894c
 800b1c0:	24000098 	.word	0x24000098
 800b1c4:	2400009c 	.word	0x2400009c
 800b1c8:	240000a4 	.word	0x240000a4

0800b1cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1cc:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b1ce:	f7ff fe35 	bl	800ae3c <HAL_RCC_GetSysClockFreq>
 800b1d2:	4a0b      	ldr	r2, [pc, #44]	@ (800b200 <HAL_RCC_GetHCLKFreq+0x34>)
 800b1d4:	490b      	ldr	r1, [pc, #44]	@ (800b204 <HAL_RCC_GetHCLKFreq+0x38>)
 800b1d6:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1d8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b1da:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1de:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b1e2:	5ccb      	ldrb	r3, [r1, r3]
 800b1e4:	f003 031f 	and.w	r3, r3, #31
 800b1e8:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ec:	5c88      	ldrb	r0, [r1, r2]
 800b1ee:	4a06      	ldr	r2, [pc, #24]	@ (800b208 <HAL_RCC_GetHCLKFreq+0x3c>)
 800b1f0:	f000 001f 	and.w	r0, r0, #31
 800b1f4:	fa23 f000 	lsr.w	r0, r3, r0
 800b1f8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1fa:	4a04      	ldr	r2, [pc, #16]	@ (800b20c <HAL_RCC_GetHCLKFreq+0x40>)
 800b1fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b1fe:	bd08      	pop	{r3, pc}
 800b200:	58024400 	.word	0x58024400
 800b204:	0802894c 	.word	0x0802894c
 800b208:	24000098 	.word	0x24000098
 800b20c:	2400009c 	.word	0x2400009c

0800b210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b210:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b212:	f7ff ffdb 	bl	800b1cc <HAL_RCC_GetHCLKFreq>
 800b216:	4b05      	ldr	r3, [pc, #20]	@ (800b22c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b218:	4a05      	ldr	r2, [pc, #20]	@ (800b230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b220:	5cd3      	ldrb	r3, [r2, r3]
 800b222:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b226:	40d8      	lsrs	r0, r3
 800b228:	bd08      	pop	{r3, pc}
 800b22a:	bf00      	nop
 800b22c:	58024400 	.word	0x58024400
 800b230:	0802894c 	.word	0x0802894c

0800b234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b234:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b236:	f7ff ffc9 	bl	800b1cc <HAL_RCC_GetHCLKFreq>
 800b23a:	4b05      	ldr	r3, [pc, #20]	@ (800b250 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b23c:	4a05      	ldr	r2, [pc, #20]	@ (800b254 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b244:	5cd3      	ldrb	r3, [r2, r3]
 800b246:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b24a:	40d8      	lsrs	r0, r3
 800b24c:	bd08      	pop	{r3, pc}
 800b24e:	bf00      	nop
 800b250:	58024400 	.word	0x58024400
 800b254:	0802894c 	.word	0x0802894c

0800b258 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b258:	233f      	movs	r3, #63	@ 0x3f
 800b25a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b25c:	4b11      	ldr	r3, [pc, #68]	@ (800b2a4 <HAL_RCC_GetClockConfig+0x4c>)
 800b25e:	691a      	ldr	r2, [r3, #16]
 800b260:	f002 0207 	and.w	r2, r2, #7
 800b264:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b266:	699a      	ldr	r2, [r3, #24]
 800b268:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800b26c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b26e:	699a      	ldr	r2, [r3, #24]
 800b270:	f002 020f 	and.w	r2, r2, #15
 800b274:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b276:	699a      	ldr	r2, [r3, #24]
 800b278:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b27c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b27e:	69da      	ldr	r2, [r3, #28]
 800b280:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b284:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b286:	69da      	ldr	r2, [r3, #28]
 800b288:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b28c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b294:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b296:	4b04      	ldr	r3, [pc, #16]	@ (800b2a8 <HAL_RCC_GetClockConfig+0x50>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 030f 	and.w	r3, r3, #15
 800b29e:	600b      	str	r3, [r1, #0]
}
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	52002000 	.word	0x52002000

0800b2ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2ae:	4c39      	ldr	r4, [pc, #228]	@ (800b394 <RCCEx_PLL2_Config+0xe8>)
{
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b2b6:	f003 0303 	and.w	r3, r3, #3
 800b2ba:	2b03      	cmp	r3, #3
 800b2bc:	d067      	beq.n	800b38e <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b2c4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2c6:	f7fc f94f 	bl	8007568 <HAL_GetTick>
 800b2ca:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	011a      	lsls	r2, r3, #4
 800b2d0:	d449      	bmi.n	800b366 <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b2d2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b2d4:	6832      	ldr	r2, [r6, #0]
 800b2d6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b2da:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b2de:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2e0:	68b3      	ldr	r3, [r6, #8]
 800b2e2:	68f2      	ldr	r2, [r6, #12]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	3a01      	subs	r2, #1
 800b2e8:	025b      	lsls	r3, r3, #9
 800b2ea:	0412      	lsls	r2, r2, #16
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	6872      	ldr	r2, [r6, #4]
 800b2f6:	3a01      	subs	r2, #1
 800b2f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	6932      	ldr	r2, [r6, #16]
 800b300:	3a01      	subs	r2, #1
 800b302:	0612      	lsls	r2, r2, #24
 800b304:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b308:	4313      	orrs	r3, r2
 800b30a:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b30c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b30e:	6972      	ldr	r2, [r6, #20]
 800b310:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b314:	4313      	orrs	r3, r2
 800b316:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b318:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b31a:	69b2      	ldr	r2, [r6, #24]
 800b31c:	f023 0320 	bic.w	r3, r3, #32
 800b320:	4313      	orrs	r3, r2
 800b322:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b324:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b326:	f023 0310 	bic.w	r3, r3, #16
 800b32a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b32c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b32e:	69f2      	ldr	r2, [r6, #28]
 800b330:	f36f 03cf 	bfc	r3, #3, #13
 800b334:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b338:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b33a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b33c:	f043 0310 	orr.w	r3, r3, #16
 800b340:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b342:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b344:	b9b5      	cbnz	r5, 800b374 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b346:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b34a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b34c:	4c11      	ldr	r4, [pc, #68]	@ (800b394 <RCCEx_PLL2_Config+0xe8>)
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b354:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b356:	f7fc f907 	bl	8007568 <HAL_GetTick>
 800b35a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b35c:	6823      	ldr	r3, [r4, #0]
 800b35e:	011b      	lsls	r3, r3, #4
 800b360:	d50f      	bpl.n	800b382 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800b362:	2000      	movs	r0, #0
 800b364:	e005      	b.n	800b372 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b366:	f7fc f8ff 	bl	8007568 <HAL_GetTick>
 800b36a:	1bc0      	subs	r0, r0, r7
 800b36c:	2802      	cmp	r0, #2
 800b36e:	d9ad      	bls.n	800b2cc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800b370:	2003      	movs	r0, #3
}
 800b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b374:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b376:	bf0c      	ite	eq
 800b378:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b37c:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800b380:	e7e3      	b.n	800b34a <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b382:	f7fc f8f1 	bl	8007568 <HAL_GetTick>
 800b386:	1b40      	subs	r0, r0, r5
 800b388:	2802      	cmp	r0, #2
 800b38a:	d9e7      	bls.n	800b35c <RCCEx_PLL2_Config+0xb0>
 800b38c:	e7f0      	b.n	800b370 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800b38e:	2001      	movs	r0, #1
 800b390:	e7ef      	b.n	800b372 <RCCEx_PLL2_Config+0xc6>
 800b392:	bf00      	nop
 800b394:	58024400 	.word	0x58024400

0800b398 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b39a:	4c39      	ldr	r4, [pc, #228]	@ (800b480 <RCCEx_PLL3_Config+0xe8>)
{
 800b39c:	4606      	mov	r6, r0
 800b39e:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b3a2:	f003 0303 	and.w	r3, r3, #3
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d067      	beq.n	800b47a <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3b2:	f7fc f8d9 	bl	8007568 <HAL_GetTick>
 800b3b6:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b3b8:	6823      	ldr	r3, [r4, #0]
 800b3ba:	009a      	lsls	r2, r3, #2
 800b3bc:	d449      	bmi.n	800b452 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b3c0:	6832      	ldr	r2, [r6, #0]
 800b3c2:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800b3c6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b3ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3cc:	68b3      	ldr	r3, [r6, #8]
 800b3ce:	68f2      	ldr	r2, [r6, #12]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	3a01      	subs	r2, #1
 800b3d4:	025b      	lsls	r3, r3, #9
 800b3d6:	0412      	lsls	r2, r2, #16
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	6872      	ldr	r2, [r6, #4]
 800b3e2:	3a01      	subs	r2, #1
 800b3e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	6932      	ldr	r2, [r6, #16]
 800b3ec:	3a01      	subs	r2, #1
 800b3ee:	0612      	lsls	r2, r2, #24
 800b3f0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b3fa:	6972      	ldr	r2, [r6, #20]
 800b3fc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b400:	4313      	orrs	r3, r2
 800b402:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b404:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b406:	69b2      	ldr	r2, [r6, #24]
 800b408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b40c:	4313      	orrs	r3, r2
 800b40e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b410:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b416:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b418:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800b41a:	69f2      	ldr	r2, [r6, #28]
 800b41c:	f36f 03cf 	bfc	r3, #3, #13
 800b420:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b424:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b426:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b42c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b42e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b430:	b9b5      	cbnz	r5, 800b460 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b436:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b438:	4c11      	ldr	r4, [pc, #68]	@ (800b480 <RCCEx_PLL3_Config+0xe8>)
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b440:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b442:	f7fc f891 	bl	8007568 <HAL_GetTick>
 800b446:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	d50f      	bpl.n	800b46e <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800b44e:	2000      	movs	r0, #0
 800b450:	e005      	b.n	800b45e <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b452:	f7fc f889 	bl	8007568 <HAL_GetTick>
 800b456:	1bc0      	subs	r0, r0, r7
 800b458:	2802      	cmp	r0, #2
 800b45a:	d9ad      	bls.n	800b3b8 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800b45c:	2003      	movs	r0, #3
}
 800b45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b460:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b462:	bf0c      	ite	eq
 800b464:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b468:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800b46c:	e7e3      	b.n	800b436 <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b46e:	f7fc f87b 	bl	8007568 <HAL_GetTick>
 800b472:	1b40      	subs	r0, r0, r5
 800b474:	2802      	cmp	r0, #2
 800b476:	d9e7      	bls.n	800b448 <RCCEx_PLL3_Config+0xb0>
 800b478:	e7f0      	b.n	800b45c <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800b47a:	2001      	movs	r0, #1
 800b47c:	e7ef      	b.n	800b45e <RCCEx_PLL3_Config+0xc6>
 800b47e:	bf00      	nop
 800b480:	58024400 	.word	0x58024400

0800b484 <HAL_RCCEx_PeriphCLKConfig>:
{
 800b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b488:	6803      	ldr	r3, [r0, #0]
{
 800b48a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b48c:	011c      	lsls	r4, r3, #4
 800b48e:	d51e      	bpl.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b490:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b496:	d02a      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b498:	d80f      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x36>
 800b49a:	b1d3      	cbz	r3, 800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800b49c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b4a0:	d01d      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800b4a2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	05d8      	lsls	r0, r3, #23
 800b4a8:	d54f      	bpl.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b4aa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800b4ac:	2b04      	cmp	r3, #4
 800b4ae:	d84b      	bhi.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800b4b0:	e8df f003 	tbb	[pc, r3]
 800b4b4:	27443d22 	.word	0x27443d22
 800b4b8:	27          	.byte	0x27
 800b4b9:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b4ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b4be:	d1f0      	bne.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b4c0:	4a86      	ldr	r2, [pc, #536]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b4c2:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800b4c4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b4c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b4ce:	2600      	movs	r6, #0
 800b4d0:	e7e8      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4d2:	4a82      	ldr	r2, [pc, #520]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b4d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b4d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b4dc:	e7f0      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4de:	2102      	movs	r1, #2
 800b4e0:	3008      	adds	r0, #8
 800b4e2:	f7ff fee3 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4e6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1db      	bne.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800b4ec:	e7e8      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4ee:	2102      	movs	r1, #2
 800b4f0:	3028      	adds	r0, #40	@ 0x28
 800b4f2:	f7ff ff51 	bl	800b398 <RCCEx_PLL3_Config>
 800b4f6:	e7f6      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4f8:	4a78      	ldr	r2, [pc, #480]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b4fa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b4fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b500:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b502:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800b504:	bb1c      	cbnz	r4, 800b54e <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b506:	4a75      	ldr	r2, [pc, #468]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b508:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800b50a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b50c:	f023 0307 	bic.w	r3, r3, #7
 800b510:	430b      	orrs	r3, r1
 800b512:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	0599      	lsls	r1, r3, #22
 800b518:	d528      	bpl.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b51a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800b51c:	2b80      	cmp	r3, #128	@ 0x80
 800b51e:	d043      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800b520:	d817      	bhi.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800b522:	b3a3      	cbz	r3, 800b58e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800b524:	2b40      	cmp	r3, #64	@ 0x40
 800b526:	d038      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b528:	2601      	movs	r6, #1
 800b52a:	4634      	mov	r4, r6
 800b52c:	e01e      	b.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b52e:	2100      	movs	r1, #0
 800b530:	f105 0008 	add.w	r0, r5, #8
 800b534:	f7ff feba 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b538:	4604      	mov	r4, r0
        break;
 800b53a:	e7e3      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b53c:	2100      	movs	r1, #0
 800b53e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b542:	f7ff ff29 	bl	800b398 <RCCEx_PLL3_Config>
 800b546:	e7f7      	b.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b548:	2601      	movs	r6, #1
 800b54a:	4634      	mov	r4, r6
 800b54c:	e7e2      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800b54e:	4626      	mov	r6, r4
 800b550:	e7e0      	b.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800b552:	2bc0      	cmp	r3, #192	@ 0xc0
 800b554:	d002      	beq.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800b556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b55a:	d1e5      	bne.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800b55c:	bb54      	cbnz	r4, 800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b55e:	4a5f      	ldr	r2, [pc, #380]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b560:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b562:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b564:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800b568:	430b      	orrs	r3, r1
 800b56a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	055a      	lsls	r2, r3, #21
 800b570:	d531      	bpl.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b572:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800b576:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b57a:	d049      	beq.n	800b610 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b57c:	d81c      	bhi.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d039      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800b582:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b586:	d03c      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800b588:	2601      	movs	r6, #1
 800b58a:	4634      	mov	r4, r6
 800b58c:	e023      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b58e:	4a53      	ldr	r2, [pc, #332]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b590:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b596:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b598:	e7e0      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b59a:	2100      	movs	r1, #0
 800b59c:	f105 0008 	add.w	r0, r5, #8
 800b5a0:	f7ff fe84 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5a4:	4604      	mov	r4, r0
        break;
 800b5a6:	e7d9      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b5ae:	f7ff fef3 	bl	800b398 <RCCEx_PLL3_Config>
 800b5b2:	e7f7      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800b5b4:	4626      	mov	r6, r4
 800b5b6:	e7d9      	b.n	800b56c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b5b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b5bc:	d002      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800b5be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5c2:	d1e1      	bne.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800b5c4:	bb54      	cbnz	r4, 800b61c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b5c6:	4a45      	ldr	r2, [pc, #276]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b5c8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800b5cc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b5ce:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	051b      	lsls	r3, r3, #20
 800b5da:	d530      	bpl.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b5dc:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800b5e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5e4:	d045      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b5e6:	d81b      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800b5e8:	b3b3      	cbz	r3, 800b658 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b5ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ee:	d039      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800b5f0:	2601      	movs	r6, #1
 800b5f2:	4634      	mov	r4, r6
 800b5f4:	e023      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f6:	4a39      	ldr	r2, [pc, #228]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b5f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b5fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b600:	e7e0      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b602:	2100      	movs	r1, #0
 800b604:	f105 0008 	add.w	r0, r5, #8
 800b608:	f7ff fe50 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b60c:	4604      	mov	r4, r0
        break;
 800b60e:	e7d9      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b610:	2100      	movs	r1, #0
 800b612:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b616:	f7ff febf 	bl	800b398 <RCCEx_PLL3_Config>
 800b61a:	e7f7      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800b61c:	4626      	mov	r6, r4
 800b61e:	e7da      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b620:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b624:	d002      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b626:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b62a:	d1e1      	bne.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800b62c:	bb3c      	cbnz	r4, 800b67e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b62e:	4a2b      	ldr	r2, [pc, #172]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b630:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800b634:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b636:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800b63a:	430b      	orrs	r3, r1
 800b63c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	019f      	lsls	r7, r3, #6
 800b642:	d528      	bpl.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800b644:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b646:	2b20      	cmp	r3, #32
 800b648:	d03e      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800b64a:	d81a      	bhi.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b64c:	b1db      	cbz	r3, 800b686 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b64e:	2b10      	cmp	r3, #16
 800b650:	d034      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 800b652:	2601      	movs	r6, #1
 800b654:	4634      	mov	r4, r6
 800b656:	e01e      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b658:	4a20      	ldr	r2, [pc, #128]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b65a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b65c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b660:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b662:	e7e3      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b664:	2100      	movs	r1, #0
 800b666:	f105 0008 	add.w	r0, r5, #8
 800b66a:	f7ff fe1f 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b66e:	4604      	mov	r4, r0
        break;
 800b670:	e7dc      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b672:	2100      	movs	r1, #0
 800b674:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b678:	f7ff fe8e 	bl	800b398 <RCCEx_PLL3_Config>
 800b67c:	e7f7      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800b67e:	4626      	mov	r6, r4
 800b680:	e7dd      	b.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800b682:	2b30      	cmp	r3, #48	@ 0x30
 800b684:	d1e5      	bne.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800b686:	bb34      	cbnz	r4, 800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b688:	4a14      	ldr	r2, [pc, #80]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b68a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b68c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b68e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b692:	430b      	orrs	r3, r1
 800b694:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b696:	682b      	ldr	r3, [r5, #0]
 800b698:	04d8      	lsls	r0, r3, #19
 800b69a:	d530      	bpl.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b69c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b69e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6a2:	f000 8095 	beq.w	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b6a6:	d81b      	bhi.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 8084 	beq.w	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b6ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6b2:	f000 8086 	beq.w	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800b6b6:	2601      	movs	r6, #1
 800b6b8:	4634      	mov	r4, r6
 800b6ba:	e020      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6bc:	4a07      	ldr	r2, [pc, #28]	@ (800b6dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b6be:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b6c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b6c6:	e7de      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	f105 0008 	add.w	r0, r5, #8
 800b6ce:	f7ff fded 	bl	800b2ac <RCCEx_PLL2_Config>
 800b6d2:	4604      	mov	r4, r0
        break;
 800b6d4:	e7d7      	b.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800b6d6:	4626      	mov	r6, r4
 800b6d8:	e7dd      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800b6da:	bf00      	nop
 800b6dc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800b6e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6e4:	d002      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x268>
 800b6e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6ea:	d1e4      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800b6ec:	2c00      	cmp	r4, #0
 800b6ee:	d175      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b6f0:	4a93      	ldr	r2, [pc, #588]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b6f2:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800b6f4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b6f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6fa:	430b      	orrs	r3, r1
 800b6fc:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	0499      	lsls	r1, r3, #18
 800b702:	d50c      	bpl.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b704:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800b706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b70a:	f000 8081 	beq.w	800b810 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b70e:	d867      	bhi.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b710:	2b00      	cmp	r3, #0
 800b712:	d06d      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b718:	d073      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b71a:	2601      	movs	r6, #1
 800b71c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b71e:	682b      	ldr	r3, [r5, #0]
 800b720:	045a      	lsls	r2, r3, #17
 800b722:	d50e      	bpl.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b724:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800b728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b72c:	f000 8091 	beq.w	800b852 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b730:	d876      	bhi.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d07c      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b73a:	f000 8083 	beq.w	800b844 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b73e:	2601      	movs	r6, #1
 800b740:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800b742:	682b      	ldr	r3, [r5, #0]
 800b744:	015b      	lsls	r3, r3, #5
 800b746:	d515      	bpl.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800b748:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800b74a:	b14b      	cbz	r3, 800b760 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b74c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b750:	f040 8087 	bne.w	800b862 <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b754:	2101      	movs	r1, #1
 800b756:	f105 0008 	add.w	r0, r5, #8
 800b75a:	f7ff fda7 	bl	800b2ac <RCCEx_PLL2_Config>
 800b75e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b760:	2c00      	cmp	r4, #0
 800b762:	f040 8081 	bne.w	800b868 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b766:	4a76      	ldr	r2, [pc, #472]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b768:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b76a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b76c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b770:	430b      	orrs	r3, r1
 800b772:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	041f      	lsls	r7, r3, #16
 800b778:	d511      	bpl.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800b77a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b77c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b780:	d074      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b786:	d077      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d17c      	bne.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800b78c:	2c00      	cmp	r4, #0
 800b78e:	d17d      	bne.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b790:	4a6b      	ldr	r2, [pc, #428]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b792:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b794:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b796:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b79a:	430b      	orrs	r3, r1
 800b79c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	01d8      	lsls	r0, r3, #7
 800b7a2:	f140 8083 	bpl.w	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800b7a6:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	f200 80c4 	bhi.w	800b936 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b7ae:	e8df f003 	tbb	[pc, r3]
 800b7b2:	6f74      	.short	0x6f74
 800b7b4:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b6:	4a62      	ldr	r2, [pc, #392]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b7b8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b7ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7be:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b7c0:	e794      	b.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	f105 0008 	add.w	r0, r5, #8
 800b7c8:	f7ff fd70 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7cc:	4604      	mov	r4, r0
        break;
 800b7ce:	e78d      	b.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b7d6:	f7ff fddf 	bl	800b398 <RCCEx_PLL3_Config>
 800b7da:	e7f7      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800b7dc:	4626      	mov	r6, r4
 800b7de:	e78e      	b.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b7e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b7e4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800b7e8:	d002      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b7ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b7ee:	d194      	bne.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800b7f0:	b9a4      	cbnz	r4, 800b81c <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7f2:	4a53      	ldr	r2, [pc, #332]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b7f4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800b7f6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b7f8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b7fc:	430b      	orrs	r3, r1
 800b7fe:	6513      	str	r3, [r2, #80]	@ 0x50
 800b800:	e78d      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b802:	2101      	movs	r1, #1
 800b804:	f105 0008 	add.w	r0, r5, #8
 800b808:	f7ff fd50 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b80c:	4604      	mov	r4, r0
        break;
 800b80e:	e7ef      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b810:	2101      	movs	r1, #1
 800b812:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b816:	f7ff fdbf 	bl	800b398 <RCCEx_PLL3_Config>
 800b81a:	e7f7      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800b81c:	4626      	mov	r6, r4
 800b81e:	e77e      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b820:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b824:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b828:	d002      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b82a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b82e:	d186      	bne.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800b830:	b9ac      	cbnz	r4, 800b85e <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b832:	4a43      	ldr	r2, [pc, #268]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b834:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800b838:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b83a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b83e:	430b      	orrs	r3, r1
 800b840:	6593      	str	r3, [r2, #88]	@ 0x58
 800b842:	e77e      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b844:	2101      	movs	r1, #1
 800b846:	f105 0008 	add.w	r0, r5, #8
 800b84a:	f7ff fd2f 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b84e:	4604      	mov	r4, r0
        break;
 800b850:	e7ee      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b852:	2101      	movs	r1, #1
 800b854:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b858:	f7ff fd9e 	bl	800b398 <RCCEx_PLL3_Config>
 800b85c:	e7f7      	b.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800b85e:	4626      	mov	r6, r4
 800b860:	e76f      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800b862:	2601      	movs	r6, #1
 800b864:	4634      	mov	r4, r6
 800b866:	e785      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800b868:	4626      	mov	r6, r4
 800b86a:	e783      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b86c:	4a34      	ldr	r2, [pc, #208]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b86e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b874:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b876:	e789      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b878:	2101      	movs	r1, #1
 800b87a:	f105 0008 	add.w	r0, r5, #8
 800b87e:	f7ff fd15 	bl	800b2ac <RCCEx_PLL2_Config>
 800b882:	4604      	mov	r4, r0
        break;
 800b884:	e782      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800b886:	2601      	movs	r6, #1
 800b888:	4634      	mov	r4, r6
 800b88a:	e788      	b.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800b88c:	4626      	mov	r6, r4
 800b88e:	e786      	b.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b890:	4a2b      	ldr	r2, [pc, #172]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b892:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b898:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b89a:	2c00      	cmp	r4, #0
 800b89c:	d14e      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b89e:	4a28      	ldr	r2, [pc, #160]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b8a0:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b8a2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b8a4:	f023 0303 	bic.w	r3, r3, #3
 800b8a8:	430b      	orrs	r3, r1
 800b8aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	0259      	lsls	r1, r3, #9
 800b8b0:	d554      	bpl.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8b2:	4f24      	ldr	r7, [pc, #144]	@ (800b944 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8ba:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b8bc:	f7fb fe54 	bl	8007568 <HAL_GetTick>
 800b8c0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	05da      	lsls	r2, r3, #23
 800b8c6:	d541      	bpl.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800b8c8:	2c00      	cmp	r4, #0
 800b8ca:	d174      	bne.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b8ce:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800b8d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b8d4:	4042      	eors	r2, r0
 800b8d6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800b8da:	d00b      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8e4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800b8e8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b8ea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b8ec:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b8f0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800b8f2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b8f4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b8f8:	d048      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8fa:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800b8fe:	4910      	ldr	r1, [pc, #64]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b900:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b904:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800b908:	d151      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b90a:	6908      	ldr	r0, [r1, #16]
 800b90c:	4a0e      	ldr	r2, [pc, #56]	@ (800b948 <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b90e:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800b912:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800b916:	4302      	orrs	r2, r0
 800b918:	610a      	str	r2, [r1, #16]
 800b91a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b91e:	4a08      	ldr	r2, [pc, #32]	@ (800b940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b920:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800b922:	430b      	orrs	r3, r1
 800b924:	6713      	str	r3, [r2, #112]	@ 0x70
 800b926:	e019      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b928:	2102      	movs	r1, #2
 800b92a:	f105 0008 	add.w	r0, r5, #8
 800b92e:	f7ff fcbd 	bl	800b2ac <RCCEx_PLL2_Config>
 800b932:	4604      	mov	r4, r0
        break;
 800b934:	e7b1      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800b936:	2601      	movs	r6, #1
 800b938:	4634      	mov	r4, r6
 800b93a:	e7b7      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800b93c:	4626      	mov	r6, r4
 800b93e:	e7b5      	b.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b940:	58024400 	.word	0x58024400
 800b944:	58024800 	.word	0x58024800
 800b948:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b94c:	f7fb fe0c 	bl	8007568 <HAL_GetTick>
 800b950:	eba0 0008 	sub.w	r0, r0, r8
 800b954:	2864      	cmp	r0, #100	@ 0x64
 800b956:	d9b4      	bls.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800b958:	2603      	movs	r6, #3
 800b95a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	07d8      	lsls	r0, r3, #31
 800b960:	d509      	bpl.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b962:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800b966:	2b10      	cmp	r3, #16
 800b968:	d03e      	beq.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x564>
 800b96a:	d826      	bhi.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x536>
 800b96c:	b35b      	cbz	r3, 800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b96e:	2b08      	cmp	r3, #8
 800b970:	d033      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b972:	2601      	movs	r6, #1
 800b974:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	0799      	lsls	r1, r3, #30
 800b97a:	d54b      	bpl.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b97c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800b97e:	2b05      	cmp	r3, #5
 800b980:	d85e      	bhi.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b982:	e8df f003 	tbb	[pc, r3]
 800b986:	393f      	.short	0x393f
 800b988:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800b98c:	f7fb fdec 	bl	8007568 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b990:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800b994:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b996:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b99a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b99e:	079b      	lsls	r3, r3, #30
 800b9a0:	d4ab      	bmi.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9a2:	f7fb fde1 	bl	8007568 <HAL_GetTick>
 800b9a6:	1bc0      	subs	r0, r0, r7
 800b9a8:	4548      	cmp	r0, r9
 800b9aa:	d9f6      	bls.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b9ac:	e7d4      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9ae:	690a      	ldr	r2, [r1, #16]
 800b9b0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800b9b4:	e7b0      	b.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800b9b6:	4626      	mov	r6, r4
 800b9b8:	e7d0      	b.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b9ba:	f023 0208 	bic.w	r2, r3, #8
 800b9be:	2a20      	cmp	r2, #32
 800b9c0:	d001      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b9c2:	2b18      	cmp	r3, #24
 800b9c4:	d1d5      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800b9c6:	b9ac      	cbnz	r4, 800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b9c8:	4a20      	ldr	r2, [pc, #128]	@ (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b9ca:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800b9ce:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b9d0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800b9d4:	430b      	orrs	r3, r1
 800b9d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b9d8:	e7cd      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9da:	2101      	movs	r1, #1
 800b9dc:	f105 0008 	add.w	r0, r5, #8
 800b9e0:	f7ff fc64 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9e4:	4604      	mov	r4, r0
        break;
 800b9e6:	e7ee      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9e8:	2101      	movs	r1, #1
 800b9ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b9ee:	f7ff fcd3 	bl	800b398 <RCCEx_PLL3_Config>
 800b9f2:	e7f7      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800b9f4:	4626      	mov	r6, r4
 800b9f6:	e7be      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	f105 0008 	add.w	r0, r5, #8
 800b9fe:	f7ff fc55 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba02:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ba04:	b9fc      	cbnz	r4, 800ba46 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba06:	4a11      	ldr	r2, [pc, #68]	@ (800ba4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ba08:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800ba0a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ba0c:	f023 0307 	bic.w	r3, r3, #7
 800ba10:	430b      	orrs	r3, r1
 800ba12:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	075a      	lsls	r2, r3, #29
 800ba18:	d52b      	bpl.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba1a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ba1e:	2b05      	cmp	r3, #5
 800ba20:	f200 816e 	bhi.w	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800ba24:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ba28:	0014001a 	.word	0x0014001a
 800ba2c:	001a0166 	.word	0x001a0166
 800ba30:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba34:	2101      	movs	r1, #1
 800ba36:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ba3a:	f7ff fcad 	bl	800b398 <RCCEx_PLL3_Config>
 800ba3e:	e7e0      	b.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba40:	2601      	movs	r6, #1
 800ba42:	4634      	mov	r4, r6
 800ba44:	e7e6      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800ba46:	4626      	mov	r6, r4
 800ba48:	e7e4      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800ba4a:	bf00      	nop
 800ba4c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba50:	2101      	movs	r1, #1
 800ba52:	f105 0008 	add.w	r0, r5, #8
 800ba56:	f7ff fc29 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba5a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	f040 8152 	bne.w	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba62:	4aaa      	ldr	r2, [pc, #680]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ba64:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800ba68:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ba6a:	f023 0307 	bic.w	r3, r3, #7
 800ba6e:	430b      	orrs	r3, r1
 800ba70:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ba72:	682b      	ldr	r3, [r5, #0]
 800ba74:	069b      	lsls	r3, r3, #26
 800ba76:	d510      	bpl.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ba78:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800ba7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba80:	f000 8160 	beq.w	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800ba84:	f200 8144 	bhi.w	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 814a 	beq.w	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800ba8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba92:	f000 8150 	beq.w	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800ba96:	2601      	movs	r6, #1
 800ba98:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	065f      	lsls	r7, r3, #25
 800ba9e:	d510      	bpl.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800baa0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800baa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baa8:	f000 816e 	beq.w	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x904>
 800baac:	f200 8152 	bhi.w	800bd54 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 8158 	beq.w	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baba:	f000 815e 	beq.w	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800babe:	2601      	movs	r6, #1
 800bac0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	0618      	lsls	r0, r3, #24
 800bac6:	d510      	bpl.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bac8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800bacc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bad0:	f000 817c 	beq.w	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x948>
 800bad4:	f200 8160 	bhi.w	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 8166 	beq.w	800bdaa <HAL_RCCEx_PeriphCLKConfig+0x926>
 800bade:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bae2:	f000 816c 	beq.w	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800bae6:	2601      	movs	r6, #1
 800bae8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800baea:	682b      	ldr	r3, [r5, #0]
 800baec:	0719      	lsls	r1, r3, #28
 800baee:	d514      	bpl.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800baf0:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800baf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800baf8:	d107      	bne.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bafa:	2102      	movs	r1, #2
 800bafc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bb00:	f7ff fc4a 	bl	800b398 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800bb04:	2800      	cmp	r0, #0
 800bb06:	bf18      	it	ne
 800bb08:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bb0a:	4a80      	ldr	r2, [pc, #512]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bb0c:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800bb10:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bb12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bb16:	430b      	orrs	r3, r1
 800bb18:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	06da      	lsls	r2, r3, #27
 800bb1e:	d514      	bpl.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb20:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800bb24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb28:	d107      	bne.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bb30:	f7ff fc32 	bl	800b398 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800bb34:	2800      	cmp	r0, #0
 800bb36:	bf18      	it	ne
 800bb38:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb3a:	4a74      	ldr	r2, [pc, #464]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bb3c:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800bb40:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bb42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb46:	430b      	orrs	r3, r1
 800bb48:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb4a:	682b      	ldr	r3, [r5, #0]
 800bb4c:	031b      	lsls	r3, r3, #12
 800bb4e:	d51b      	bpl.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800bb50:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800bb54:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800bb58:	f000 8140 	beq.w	800bddc <HAL_RCCEx_PeriphCLKConfig+0x958>
 800bb5c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800bb60:	d007      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800bb62:	2900      	cmp	r1, #0
 800bb64:	f040 8140 	bne.w	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb68:	f105 0008 	add.w	r0, r5, #8
 800bb6c:	f7ff fb9e 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb70:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bb72:	2c00      	cmp	r4, #0
 800bb74:	f040 813b 	bne.w	800bdee <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb78:	4a64      	ldr	r2, [pc, #400]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bb7a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800bb7e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bb80:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800bb84:	430b      	orrs	r3, r1
 800bb86:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb88:	682b      	ldr	r3, [r5, #0]
 800bb8a:	035f      	lsls	r7, r3, #13
 800bb8c:	d50f      	bpl.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800bb8e:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800bb92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb96:	f000 813b 	beq.w	800be10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bb9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb9e:	f000 812d 	beq.w	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x978>
 800bba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bba6:	f000 8124 	beq.w	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800bbaa:	2601      	movs	r6, #1
 800bbac:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbae:	682b      	ldr	r3, [r5, #0]
 800bbb0:	03d8      	lsls	r0, r3, #15
 800bbb2:	d509      	bpl.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800bbb4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 8133 	beq.w	800be22 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800bbbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbc0:	f000 813d 	beq.w	800be3e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bbc4:	2601      	movs	r6, #1
 800bbc6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bbc8:	682b      	ldr	r3, [r5, #0]
 800bbca:	0099      	lsls	r1, r3, #2
 800bbcc:	d507      	bpl.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bbce:	2102      	movs	r1, #2
 800bbd0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bbd4:	f7ff fbe0 	bl	800b398 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	bf18      	it	ne
 800bbdc:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bbde:	e9d5 3100 	ldrd	r3, r1, [r5]
 800bbe2:	039a      	lsls	r2, r3, #14
 800bbe4:	f140 8143 	bpl.w	800be6e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800bbe8:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800bbec:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bbf0:	f000 813f 	beq.w	800be72 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800bbf4:	f200 812c 	bhi.w	800be50 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	f000 812f 	beq.w	800be5c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800bbfe:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bc00:	02df      	lsls	r7, r3, #11
 800bc02:	d506      	bpl.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc04:	4841      	ldr	r0, [pc, #260]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc06:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800bc08:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bc0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800bc0e:	4332      	orrs	r2, r6
 800bc10:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc12:	00de      	lsls	r6, r3, #3
 800bc14:	d507      	bpl.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc16:	483d      	ldr	r0, [pc, #244]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc18:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800bc1c:	6902      	ldr	r2, [r0, #16]
 800bc1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bc22:	4332      	orrs	r2, r6
 800bc24:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc26:	0298      	lsls	r0, r3, #10
 800bc28:	d506      	bpl.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc2a:	4838      	ldr	r0, [pc, #224]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc2c:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800bc2e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800bc30:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800bc34:	4332      	orrs	r2, r6
 800bc36:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc38:	005a      	lsls	r2, r3, #1
 800bc3a:	d509      	bpl.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc3c:	4a33      	ldr	r2, [pc, #204]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc3e:	6910      	ldr	r0, [r2, #16]
 800bc40:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800bc44:	6110      	str	r0, [r2, #16]
 800bc46:	6910      	ldr	r0, [r2, #16]
 800bc48:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800bc4c:	4330      	orrs	r0, r6
 800bc4e:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da06      	bge.n	800bc62 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc54:	482d      	ldr	r0, [pc, #180]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc56:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800bc58:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800bc5a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800bc5e:	4332      	orrs	r2, r6
 800bc60:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc62:	021f      	lsls	r7, r3, #8
 800bc64:	d507      	bpl.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc66:	4a29      	ldr	r2, [pc, #164]	@ (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800bc68:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800bc6c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bc6e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800bc72:	4303      	orrs	r3, r0
 800bc74:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc76:	07ce      	lsls	r6, r1, #31
 800bc78:	d506      	bpl.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	f105 0008 	add.w	r0, r5, #8
 800bc80:	f7ff fb14 	bl	800b2ac <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800bc84:	4607      	mov	r7, r0
 800bc86:	b900      	cbnz	r0, 800bc8a <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800bc88:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc8a:	686b      	ldr	r3, [r5, #4]
 800bc8c:	079c      	lsls	r4, r3, #30
 800bc8e:	d506      	bpl.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc90:	2101      	movs	r1, #1
 800bc92:	f105 0008 	add.w	r0, r5, #8
 800bc96:	f7ff fb09 	bl	800b2ac <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	b900      	cbnz	r0, 800bca0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800bc9e:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bca0:	686b      	ldr	r3, [r5, #4]
 800bca2:	0758      	lsls	r0, r3, #29
 800bca4:	d506      	bpl.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bca6:	2102      	movs	r1, #2
 800bca8:	f105 0008 	add.w	r0, r5, #8
 800bcac:	f7ff fafe 	bl	800b2ac <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	b900      	cbnz	r0, 800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800bcb4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcb6:	686b      	ldr	r3, [r5, #4]
 800bcb8:	0719      	lsls	r1, r3, #28
 800bcba:	d506      	bpl.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bcc2:	f7ff fb69 	bl	800b398 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	b900      	cbnz	r0, 800bccc <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800bcca:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bccc:	686b      	ldr	r3, [r5, #4]
 800bcce:	06da      	lsls	r2, r3, #27
 800bcd0:	d506      	bpl.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bcd8:	f7ff fb5e 	bl	800b398 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800bcdc:	4604      	mov	r4, r0
 800bcde:	b900      	cbnz	r0, 800bce2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800bce0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bce2:	686b      	ldr	r3, [r5, #4]
 800bce4:	069b      	lsls	r3, r3, #26
 800bce6:	f100 80ca 	bmi.w	800be7e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800bcea:	1e20      	subs	r0, r4, #0
 800bcec:	bf18      	it	ne
 800bcee:	2001      	movne	r0, #1
}
 800bcf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcf4:	2101      	movs	r1, #1
 800bcf6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bcfa:	f7ff fb4d 	bl	800b398 <RCCEx_PLL3_Config>
 800bcfe:	e6ac      	b.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd00:	2601      	movs	r6, #1
 800bd02:	4634      	mov	r4, r6
 800bd04:	e6b5      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800bd06:	4626      	mov	r6, r4
 800bd08:	e6b3      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800bd0a:	bf00      	nop
 800bd0c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bd10:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bd14:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800bd18:	d003      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800bd1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd1e:	f47f aeba 	bne.w	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800bd22:	b9ac      	cbnz	r4, 800bd50 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bd24:	4a5b      	ldr	r2, [pc, #364]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bd26:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800bd2a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800bd2c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800bd30:	430b      	orrs	r3, r1
 800bd32:	6553      	str	r3, [r2, #84]	@ 0x54
 800bd34:	e6b1      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd36:	2100      	movs	r1, #0
 800bd38:	f105 0008 	add.w	r0, r5, #8
 800bd3c:	f7ff fab6 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd40:	4604      	mov	r4, r0
        break;
 800bd42:	e7ee      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd44:	2102      	movs	r1, #2
 800bd46:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bd4a:	f7ff fb25 	bl	800b398 <RCCEx_PLL3_Config>
 800bd4e:	e7f7      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800bd50:	4626      	mov	r6, r4
 800bd52:	e6a2      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd54:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bd58:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800bd5c:	d003      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bd5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bd62:	f47f aeac 	bne.w	800babe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800bd66:	b9ac      	cbnz	r4, 800bd94 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd68:	4a4a      	ldr	r2, [pc, #296]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bd6a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800bd6e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bd70:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800bd74:	430b      	orrs	r3, r1
 800bd76:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd78:	e6a3      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f105 0008 	add.w	r0, r5, #8
 800bd80:	f7ff fa94 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd84:	4604      	mov	r4, r0
        break;
 800bd86:	e7ee      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd88:	2102      	movs	r1, #2
 800bd8a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bd8e:	f7ff fb03 	bl	800b398 <RCCEx_PLL3_Config>
 800bd92:	e7f7      	b.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800bd94:	4626      	mov	r6, r4
 800bd96:	e694      	b.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bd9c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800bda0:	d003      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0x926>
 800bda2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800bda6:	f47f ae9e 	bne.w	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800bdaa:	b9ac      	cbnz	r4, 800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bdac:	4a39      	ldr	r2, [pc, #228]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bdae:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800bdb2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bdb4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800bdb8:	430b      	orrs	r3, r1
 800bdba:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdbc:	e695      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	f105 0008 	add.w	r0, r5, #8
 800bdc4:	f7ff fa72 	bl	800b2ac <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdc8:	4604      	mov	r4, r0
        break;
 800bdca:	e7ee      	b.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdcc:	2102      	movs	r1, #2
 800bdce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bdd2:	f7ff fae1 	bl	800b398 <RCCEx_PLL3_Config>
 800bdd6:	e7f7      	b.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800bdd8:	4626      	mov	r6, r4
 800bdda:	e686      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bddc:	2102      	movs	r1, #2
 800bdde:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bde2:	f7ff fad9 	bl	800b398 <RCCEx_PLL3_Config>
 800bde6:	e6c3      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800bde8:	2601      	movs	r6, #1
 800bdea:	4634      	mov	r4, r6
 800bdec:	e6cc      	b.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800bdee:	4626      	mov	r6, r4
 800bdf0:	e6ca      	b.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdf2:	4a28      	ldr	r2, [pc, #160]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800bdf4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bdf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bdfc:	b97c      	cbnz	r4, 800be1e <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bdfe:	4a25      	ldr	r2, [pc, #148]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800be00:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800be04:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800be06:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800be0a:	430b      	orrs	r3, r1
 800be0c:	6553      	str	r3, [r2, #84]	@ 0x54
 800be0e:	e6ce      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be10:	2101      	movs	r1, #1
 800be12:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be16:	f7ff fabf 	bl	800b398 <RCCEx_PLL3_Config>
 800be1a:	4604      	mov	r4, r0
        break;
 800be1c:	e7ee      	b.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800be1e:	4626      	mov	r6, r4
 800be20:	e6c5      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be22:	4a1c      	ldr	r2, [pc, #112]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800be24:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800be26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800be2c:	b974      	cbnz	r4, 800be4c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be2e:	4a19      	ldr	r2, [pc, #100]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800be30:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800be32:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800be34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be38:	430b      	orrs	r3, r1
 800be3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be3c:	e6c4      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be3e:	2102      	movs	r1, #2
 800be40:	f105 0008 	add.w	r0, r5, #8
 800be44:	f7ff fa32 	bl	800b2ac <RCCEx_PLL2_Config>
 800be48:	4604      	mov	r4, r0
        break;
 800be4a:	e7ef      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800be4c:	4626      	mov	r6, r4
 800be4e:	e6bb      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800be50:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800be54:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800be58:	f47f aed1 	bne.w	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800be5c:	2c00      	cmp	r4, #0
 800be5e:	f47f aecf 	bne.w	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be62:	4c0c      	ldr	r4, [pc, #48]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800be64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800be6a:	4302      	orrs	r2, r0
 800be6c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800be6e:	4634      	mov	r4, r6
 800be70:	e6c6      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be72:	4f08      	ldr	r7, [pc, #32]	@ (800be94 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800be74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800be7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800be7c:	e7ee      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be7e:	2102      	movs	r1, #2
 800be80:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be84:	f7ff fa88 	bl	800b398 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800be88:	2800      	cmp	r0, #0
 800be8a:	f43f af2e 	beq.w	800bcea <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800be8e:	2001      	movs	r0, #1
 800be90:	e72e      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800be92:	bf00      	nop
 800be94:	58024400 	.word	0x58024400

0800be98 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800be98:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800be9a:	f7ff f997 	bl	800b1cc <HAL_RCC_GetHCLKFreq>
 800be9e:	4b05      	ldr	r3, [pc, #20]	@ (800beb4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800bea0:	4a05      	ldr	r2, [pc, #20]	@ (800beb8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800bea8:	5cd3      	ldrb	r3, [r2, r3]
 800beaa:	f003 031f 	and.w	r3, r3, #31
}
 800beae:	40d8      	lsrs	r0, r3
 800beb0:	bd08      	pop	{r3, pc}
 800beb2:	bf00      	nop
 800beb4:	58024400 	.word	0x58024400
 800beb8:	0802894c 	.word	0x0802894c

0800bebc <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bebc:	494f      	ldr	r1, [pc, #316]	@ (800bffc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800bebe:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bec0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bec2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bec4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800bec6:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800beca:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bece:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800bed0:	f000 8090 	beq.w	800bff4 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bed4:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bed8:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bedc:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bee0:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bee8:	4353      	muls	r3, r2
    switch (pllsource)
 800beea:	2c01      	cmp	r4, #1
 800beec:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bef0:	ee06 3a90 	vmov	s13, r3
 800bef4:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800bef8:	d06e      	beq.n	800bfd8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800befa:	2c02      	cmp	r4, #2
 800befc:	d05e      	beq.n	800bfbc <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800befe:	2c00      	cmp	r4, #0
 800bf00:	d16a      	bne.n	800bfd8 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf02:	680b      	ldr	r3, [r1, #0]
 800bf04:	069b      	lsls	r3, r3, #26
 800bf06:	d547      	bpl.n	800bf98 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf08:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf0a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf0c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800bf10:	4a3b      	ldr	r2, [pc, #236]	@ (800c000 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf12:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf16:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf18:	ee07 2a90 	vmov	s15, r2
 800bf1c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800bf20:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800bf24:	ee07 3a10 	vmov	s14, r3
 800bf28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf2c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bf30:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf34:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf38:	4a30      	ldr	r2, [pc, #192]	@ (800bffc <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800bf3a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800bf3c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bf40:	ee07 3a10 	vmov	s14, r3
 800bf44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf48:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bf50:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800bf54:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bf58:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800bf5a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bf5e:	ee07 3a10 	vmov	s14, r3
 800bf62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf66:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bf6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bf6e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800bf72:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bf76:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800bf78:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bf7c:	ee06 3a90 	vmov	s13, r3
 800bf80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bf84:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bf88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bf8c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800bf90:	ee17 3a90 	vmov	r3, s15
 800bf94:	6083      	str	r3, [r0, #8]
}
 800bf96:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf98:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800bf9a:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800bf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfae:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfb2:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800bfb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800bfba:	e7bd      	b.n	800bf38 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfbc:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800bfbe:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800bfc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc6:	ee07 3a90 	vmov	s15, r3
 800bfca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bfd6:	e7ec      	b.n	800bfb2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfd8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800bfda:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800bfde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe2:	ee07 3a90 	vmov	s15, r3
 800bfe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfee:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bff2:	e7de      	b.n	800bfb2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bff4:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bff8:	e7cc      	b.n	800bf94 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800bffa:	bf00      	nop
 800bffc:	58024400 	.word	0x58024400
 800c000:	03d09000 	.word	0x03d09000
 800c004:	4c742400 	.word	0x4c742400
 800c008:	4bbebc20 	.word	0x4bbebc20
 800c00c:	4a742400 	.word	0x4a742400

0800c010 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c010:	494f      	ldr	r1, [pc, #316]	@ (800c150 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800c012:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c014:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c016:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c018:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800c01a:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c01e:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c022:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800c024:	f000 8090 	beq.w	800c148 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c028:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c02c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c030:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c034:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c03c:	4353      	muls	r3, r2
    switch (pllsource)
 800c03e:	2c01      	cmp	r4, #1
 800c040:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c044:	ee06 3a90 	vmov	s13, r3
 800c048:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c04c:	d06e      	beq.n	800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800c04e:	2c02      	cmp	r4, #2
 800c050:	d05e      	beq.n	800c110 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800c052:	2c00      	cmp	r4, #0
 800c054:	d16a      	bne.n	800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c056:	680b      	ldr	r3, [r1, #0]
 800c058:	069b      	lsls	r3, r3, #26
 800c05a:	d547      	bpl.n	800c0ec <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c05c:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c05e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c060:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800c064:	4a3b      	ldr	r2, [pc, #236]	@ (800c154 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c066:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c06a:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c06c:	ee07 2a90 	vmov	s15, r2
 800c070:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c074:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c078:	ee07 3a10 	vmov	s14, r3
 800c07c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c080:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c084:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c088:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c08c:	4a30      	ldr	r2, [pc, #192]	@ (800c150 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800c08e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c090:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c094:	ee07 3a10 	vmov	s14, r3
 800c098:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c09c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c0a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c0a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c0a8:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c0ac:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c0ae:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c0b2:	ee07 3a10 	vmov	s14, r3
 800c0b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c0ba:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c0be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c0c2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c0c6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c0cc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c0d0:	ee06 3a90 	vmov	s13, r3
 800c0d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c0d8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c0dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c0e0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c0e4:	ee17 3a90 	vmov	r3, s15
 800c0e8:	6083      	str	r3, [r0, #8]
}
 800c0ea:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0ec:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0ee:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c158 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c102:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c106:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800c10a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800c10e:	e7bd      	b.n	800c08c <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c110:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c112:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c15c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800c116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c126:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c12a:	e7ec      	b.n	800c106 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c12c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c12e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c160 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800c132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c136:	ee07 3a90 	vmov	s15, r3
 800c13a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c142:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c146:	e7de      	b.n	800c106 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c148:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c14c:	e7cc      	b.n	800c0e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800c14e:	bf00      	nop
 800c150:	58024400 	.word	0x58024400
 800c154:	03d09000 	.word	0x03d09000
 800c158:	4c742400 	.word	0x4c742400
 800c15c:	4bbebc20 	.word	0x4bbebc20
 800c160:	4a742400 	.word	0x4a742400

0800c164 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c168:	4604      	mov	r4, r0
 800c16a:	b1f0      	cbz	r0, 800c1aa <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c16c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c170:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c174:	b91b      	cbnz	r3, 800c17e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c176:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c17a:	f7f5 fb29 	bl	80017d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c17e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c180:	1d21      	adds	r1, r4, #4
 800c182:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c184:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c188:	f000 fda3 	bl	800ccd2 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c18c:	6862      	ldr	r2, [r4, #4]
 800c18e:	4629      	mov	r1, r5
 800c190:	6820      	ldr	r0, [r4, #0]
 800c192:	f000 fdd4 	bl	800cd3e <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c196:	4a06      	ldr	r2, [pc, #24]	@ (800c1b0 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800c198:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c19a:	6813      	ldr	r3, [r2, #0]
 800c19c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c1a0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c1a8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c1aa:	2001      	movs	r0, #1
 800c1ac:	e7fc      	b.n	800c1a8 <HAL_SDRAM_Init+0x44>
 800c1ae:	bf00      	nop
 800c1b0:	52004000 	.word	0x52004000

0800c1b4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800c1b8:	f7f5 fba4 	bl	8001904 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800c1bc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c1c0:	f000 fdf3 	bl	800cdaa <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800c1ca:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800c1ce:	bd10      	pop	{r4, pc}

0800c1d0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c1d0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c1d2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c1da:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c1dc:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c1de:	d010      	beq.n	800c202 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c1e0:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c1e4:	2c01      	cmp	r4, #1
 800c1e6:	d110      	bne.n	800c20a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1e8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c1ea:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1ec:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c1f0:	f000 fdea 	bl	800cdc8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c1f4:	6833      	ldr	r3, [r6, #0]
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	d104      	bne.n	800c204 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c1fa:	2305      	movs	r3, #5
 800c1fc:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c200:	2000      	movs	r0, #0
}
 800c202:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c204:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c208:	e7fa      	b.n	800c200 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c20a:	2001      	movs	r0, #1
 800c20c:	e7f9      	b.n	800c202 <HAL_SDRAM_SendCommand+0x32>

0800c20e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c20e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c210:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c214:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c216:	2b02      	cmp	r3, #2
 800c218:	b2d8      	uxtb	r0, r3
 800c21a:	d00d      	beq.n	800c238 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c21c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c220:	2b01      	cmp	r3, #1
 800c222:	b2dd      	uxtb	r5, r3
 800c224:	d109      	bne.n	800c23a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c226:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c228:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c22a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c22e:	f000 fddd 	bl	800cdec <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c232:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c234:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c238:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c23a:	2001      	movs	r0, #1
 800c23c:	e7fc      	b.n	800c238 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800c23e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c23e:	4770      	bx	lr

0800c240 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c240:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c244:	2b01      	cmp	r3, #1
 800c246:	d12f      	bne.n	800c2a8 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c248:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c24a:	4a18      	ldr	r2, [pc, #96]	@ (800c2ac <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c24c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c250:	6803      	ldr	r3, [r0, #0]
 800c252:	4293      	cmp	r3, r2
 800c254:	d01a      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c25a:	d017      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c25c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c260:	4293      	cmp	r3, r2
 800c262:	d013      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c264:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c268:	4293      	cmp	r3, r2
 800c26a:	d00f      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c26c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c270:	4293      	cmp	r3, r2
 800c272:	d00b      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c274:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c278:	4293      	cmp	r3, r2
 800c27a:	d007      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c27c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c280:	4293      	cmp	r3, r2
 800c282:	d003      	beq.n	800c28c <HAL_TIM_Base_Start+0x4c>
 800c284:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c288:	4293      	cmp	r3, r2
 800c28a:	d107      	bne.n	800c29c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c28c:	6899      	ldr	r1, [r3, #8]
 800c28e:	4a08      	ldr	r2, [pc, #32]	@ (800c2b0 <HAL_TIM_Base_Start+0x70>)
 800c290:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c292:	2a06      	cmp	r2, #6
 800c294:	d006      	beq.n	800c2a4 <HAL_TIM_Base_Start+0x64>
 800c296:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c29a:	d003      	beq.n	800c2a4 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	f042 0201 	orr.w	r2, r2, #1
 800c2a2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	4770      	bx	lr
    return HAL_ERROR;
 800c2a8:	2001      	movs	r0, #1
}
 800c2aa:	4770      	bx	lr
 800c2ac:	40010000 	.word	0x40010000
 800c2b0:	00010007 	.word	0x00010007

0800c2b4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2b4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d133      	bne.n	800c324 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2bc:	2302      	movs	r3, #2
 800c2be:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2c2:	6803      	ldr	r3, [r0, #0]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	f042 0201 	orr.w	r2, r2, #1
 800c2ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2cc:	4a16      	ldr	r2, [pc, #88]	@ (800c328 <HAL_TIM_Base_Start_IT+0x74>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d01a      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2d6:	d017      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c2d8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d013      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c2e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d00f      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c2e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d00b      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c2f0:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d007      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c2f8:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d003      	beq.n	800c308 <HAL_TIM_Base_Start_IT+0x54>
 800c300:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c304:	4293      	cmp	r3, r2
 800c306:	d107      	bne.n	800c318 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c308:	6899      	ldr	r1, [r3, #8]
 800c30a:	4a08      	ldr	r2, [pc, #32]	@ (800c32c <HAL_TIM_Base_Start_IT+0x78>)
 800c30c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c30e:	2a06      	cmp	r2, #6
 800c310:	d006      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x6c>
 800c312:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c316:	d003      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	f042 0201 	orr.w	r2, r2, #1
 800c31e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c320:	2000      	movs	r0, #0
 800c322:	4770      	bx	lr
    return HAL_ERROR;
 800c324:	2001      	movs	r0, #1
}
 800c326:	4770      	bx	lr
 800c328:	40010000 	.word	0x40010000
 800c32c:	00010007 	.word	0x00010007

0800c330 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c330:	4770      	bx	lr

0800c332 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c332:	4770      	bx	lr

0800c334 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c334:	4770      	bx	lr

0800c336 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c336:	4770      	bx	lr

0800c338 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800c338:	6803      	ldr	r3, [r0, #0]
{
 800c33a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800c33c:	68dd      	ldr	r5, [r3, #12]
{
 800c33e:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800c340:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c342:	07b2      	lsls	r2, r6, #30
 800c344:	d50d      	bpl.n	800c362 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c346:	07a9      	lsls	r1, r5, #30
 800c348:	d50b      	bpl.n	800c362 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c34a:	f06f 0202 	mvn.w	r2, #2
 800c34e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c350:	2201      	movs	r2, #1
 800c352:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	079a      	lsls	r2, r3, #30
 800c358:	d075      	beq.n	800c446 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c35a:	f7ff ffea 	bl	800c332 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c35e:	2300      	movs	r3, #0
 800c360:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c362:	0773      	lsls	r3, r6, #29
 800c364:	d510      	bpl.n	800c388 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c366:	0768      	lsls	r0, r5, #29
 800c368:	d50e      	bpl.n	800c388 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c370:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c374:	2202      	movs	r2, #2
 800c376:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c37e:	d068      	beq.n	800c452 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c380:	f7ff ffd7 	bl	800c332 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c384:	2300      	movs	r3, #0
 800c386:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c388:	0731      	lsls	r1, r6, #28
 800c38a:	d50f      	bpl.n	800c3ac <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c38c:	072a      	lsls	r2, r5, #28
 800c38e:	d50d      	bpl.n	800c3ac <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c390:	6823      	ldr	r3, [r4, #0]
 800c392:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c396:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c39a:	2204      	movs	r2, #4
 800c39c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c39e:	69db      	ldr	r3, [r3, #28]
 800c3a0:	079b      	lsls	r3, r3, #30
 800c3a2:	d05c      	beq.n	800c45e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c3a4:	f7ff ffc5 	bl	800c332 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c3ac:	06f1      	lsls	r1, r6, #27
 800c3ae:	d510      	bpl.n	800c3d2 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c3b0:	06ea      	lsls	r2, r5, #27
 800c3b2:	d50e      	bpl.n	800c3d2 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3b4:	6823      	ldr	r3, [r4, #0]
 800c3b6:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3be:	2208      	movs	r2, #8
 800c3c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3c2:	69db      	ldr	r3, [r3, #28]
 800c3c4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c3c8:	d04f      	beq.n	800c46a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ca:	f7ff ffb2 	bl	800c332 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c3d2:	07f3      	lsls	r3, r6, #31
 800c3d4:	d508      	bpl.n	800c3e8 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c3d6:	07e8      	lsls	r0, r5, #31
 800c3d8:	d506      	bpl.n	800c3e8 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c3e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3e4:	f7f4 ff72 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3e8:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800c3ec:	d008      	beq.n	800c400 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3ee:	0629      	lsls	r1, r5, #24
 800c3f0:	d506      	bpl.n	800c400 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3f2:	6823      	ldr	r3, [r4, #0]
 800c3f4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800c3f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800c3fc:	f000 f8c1 	bl	800c582 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c400:	05f2      	lsls	r2, r6, #23
 800c402:	d508      	bpl.n	800c416 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c404:	062b      	lsls	r3, r5, #24
 800c406:	d506      	bpl.n	800c416 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800c40e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c410:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800c412:	f000 f8b7 	bl	800c584 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c416:	0670      	lsls	r0, r6, #25
 800c418:	d508      	bpl.n	800c42c <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c41a:	0669      	lsls	r1, r5, #25
 800c41c:	d506      	bpl.n	800c42c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800c424:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c426:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800c428:	f7ff ff85 	bl	800c336 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c42c:	06b2      	lsls	r2, r6, #26
 800c42e:	d522      	bpl.n	800c476 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c430:	06ab      	lsls	r3, r5, #26
 800c432:	d520      	bpl.n	800c476 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800c43a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c43c:	611a      	str	r2, [r3, #16]
}
 800c43e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800c442:	f000 b89d 	b.w	800c580 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c446:	f7ff ff73 	bl	800c330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7ff ff72 	bl	800c334 <HAL_TIM_PWM_PulseFinishedCallback>
 800c450:	e785      	b.n	800c35e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c452:	f7ff ff6d 	bl	800c330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c456:	4620      	mov	r0, r4
 800c458:	f7ff ff6c 	bl	800c334 <HAL_TIM_PWM_PulseFinishedCallback>
 800c45c:	e792      	b.n	800c384 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c45e:	f7ff ff67 	bl	800c330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c462:	4620      	mov	r0, r4
 800c464:	f7ff ff66 	bl	800c334 <HAL_TIM_PWM_PulseFinishedCallback>
 800c468:	e79e      	b.n	800c3a8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c46a:	f7ff ff61 	bl	800c330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c46e:	4620      	mov	r0, r4
 800c470:	f7ff ff60 	bl	800c334 <HAL_TIM_PWM_PulseFinishedCallback>
 800c474:	e7ab      	b.n	800c3ce <HAL_TIM_IRQHandler+0x96>
}
 800c476:	bd70      	pop	{r4, r5, r6, pc}

0800c478 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c478:	4a27      	ldr	r2, [pc, #156]	@ (800c518 <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800c47a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c47c:	4290      	cmp	r0, r2
 800c47e:	d012      	beq.n	800c4a6 <TIM_Base_SetConfig+0x2e>
 800c480:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800c484:	d00f      	beq.n	800c4a6 <TIM_Base_SetConfig+0x2e>
 800c486:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c48a:	4290      	cmp	r0, r2
 800c48c:	d00b      	beq.n	800c4a6 <TIM_Base_SetConfig+0x2e>
 800c48e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c492:	4290      	cmp	r0, r2
 800c494:	d007      	beq.n	800c4a6 <TIM_Base_SetConfig+0x2e>
 800c496:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c49a:	4290      	cmp	r0, r2
 800c49c:	d003      	beq.n	800c4a6 <TIM_Base_SetConfig+0x2e>
 800c49e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c4a2:	4290      	cmp	r0, r2
 800c4a4:	d108      	bne.n	800c4b8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800c4aa:	684a      	ldr	r2, [r1, #4]
 800c4ac:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4b2:	68ca      	ldr	r2, [r1, #12]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	e00a      	b.n	800c4ce <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c4b8:	4a18      	ldr	r2, [pc, #96]	@ (800c51c <TIM_Base_SetConfig+0xa4>)
 800c4ba:	4290      	cmp	r0, r2
 800c4bc:	d0f7      	beq.n	800c4ae <TIM_Base_SetConfig+0x36>
 800c4be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c4c2:	4290      	cmp	r0, r2
 800c4c4:	d0f3      	beq.n	800c4ae <TIM_Base_SetConfig+0x36>
 800c4c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c4ca:	4290      	cmp	r0, r2
 800c4cc:	d0ef      	beq.n	800c4ae <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4ce:	694a      	ldr	r2, [r1, #20]
 800c4d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4d4:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4d6:	688a      	ldr	r2, [r1, #8]
 800c4d8:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4da:	680a      	ldr	r2, [r1, #0]
 800c4dc:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4de:	4a0e      	ldr	r2, [pc, #56]	@ (800c518 <TIM_Base_SetConfig+0xa0>)
 800c4e0:	4290      	cmp	r0, r2
 800c4e2:	d00f      	beq.n	800c504 <TIM_Base_SetConfig+0x8c>
 800c4e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c4e8:	4290      	cmp	r0, r2
 800c4ea:	d00b      	beq.n	800c504 <TIM_Base_SetConfig+0x8c>
 800c4ec:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800c4f0:	4290      	cmp	r0, r2
 800c4f2:	d007      	beq.n	800c504 <TIM_Base_SetConfig+0x8c>
 800c4f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c4f8:	4290      	cmp	r0, r2
 800c4fa:	d003      	beq.n	800c504 <TIM_Base_SetConfig+0x8c>
 800c4fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c500:	4290      	cmp	r0, r2
 800c502:	d101      	bne.n	800c508 <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c504:	690a      	ldr	r2, [r1, #16]
 800c506:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c508:	6802      	ldr	r2, [r0, #0]
 800c50a:	f042 0204 	orr.w	r2, r2, #4
 800c50e:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c510:	2201      	movs	r2, #1
 800c512:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800c514:	6003      	str	r3, [r0, #0]
}
 800c516:	4770      	bx	lr
 800c518:	40010000 	.word	0x40010000
 800c51c:	40014000 	.word	0x40014000

0800c520 <HAL_TIM_Base_Init>:
{
 800c520:	b510      	push	{r4, lr}
  if (htim == NULL)
 800c522:	4604      	mov	r4, r0
 800c524:	b350      	cbz	r0, 800c57c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800c526:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c52a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c52e:	b91b      	cbnz	r3, 800c538 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c530:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c534:	f7ff fe83 	bl	800c23e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800c538:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c53a:	6820      	ldr	r0, [r4, #0]
 800c53c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800c53e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c542:	f7ff ff99 	bl	800c478 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c546:	2301      	movs	r3, #1
  return HAL_OK;
 800c548:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c54a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c54e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800c552:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800c556:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800c55a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800c55e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c562:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c566:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c56a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c56e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800c572:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800c576:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800c57a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c57c:	2001      	movs	r0, #1
 800c57e:	e7fc      	b.n	800c57a <HAL_TIM_Base_Init+0x5a>

0800c580 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800c580:	4770      	bx	lr

0800c582 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800c582:	4770      	bx	lr

0800c584 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800c584:	4770      	bx	lr
	...

0800c588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c588:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c58a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	e852 3f00 	ldrex	r3, [r2]
 800c590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c594:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c598:	6802      	ldr	r2, [r0, #0]
 800c59a:	2900      	cmp	r1, #0
 800c59c:	d1f5      	bne.n	800c58a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c59e:	4c0f      	ldr	r4, [pc, #60]	@ (800c5dc <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	f102 0308 	add.w	r3, r2, #8
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5aa:	f102 0c08 	add.w	ip, r2, #8
 800c5ae:	e84c 3100 	strex	r1, r3, [ip]
 800c5b2:	2900      	cmp	r1, #0
 800c5b4:	d1f4      	bne.n	800c5a0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d107      	bne.n	800c5cc <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5c0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c4:	e842 3100 	strex	r1, r3, [r2]
 800c5c8:	2900      	cmp	r1, #0
 800c5ca:	d1f7      	bne.n	800c5bc <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5cc:	2320      	movs	r3, #32
 800c5ce:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c5d6:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	bf00      	nop
 800c5dc:	effffffe 	.word	0xeffffffe

0800c5e0 <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5e0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5e2:	69c3      	ldr	r3, [r0, #28]
 800c5e4:	6881      	ldr	r1, [r0, #8]
{
 800c5e6:	b530      	push	{r4, r5, lr}
 800c5e8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5ea:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5ec:	6815      	ldr	r5, [r2, #0]
{
 800c5ee:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5f0:	4301      	orrs	r1, r0
 800c5f2:	6960      	ldr	r0, [r4, #20]
 800c5f4:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5f6:	48a5      	ldr	r0, [pc, #660]	@ (800c88c <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5f8:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5fa:	4028      	ands	r0, r5
 800c5fc:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5fe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c600:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c602:	6851      	ldr	r1, [r2, #4]
 800c604:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800c608:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c60a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c60c:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c60e:	49a0      	ldr	r1, [pc, #640]	@ (800c890 <UART_SetConfig+0x2b0>)
 800c610:	428a      	cmp	r2, r1
    tmpreg |= huart->Init.OneBitSampling;
 800c612:	bf1c      	itt	ne
 800c614:	6a21      	ldrne	r1, [r4, #32]
 800c616:	4308      	orrne	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c618:	6891      	ldr	r1, [r2, #8]
 800c61a:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800c61e:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c622:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c624:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c626:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c628:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800c62a:	f021 010f 	bic.w	r1, r1, #15
 800c62e:	4301      	orrs	r1, r0
 800c630:	62d1      	str	r1, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c632:	4998      	ldr	r1, [pc, #608]	@ (800c894 <UART_SetConfig+0x2b4>)
 800c634:	428a      	cmp	r2, r1
 800c636:	d112      	bne.n	800c65e <UART_SetConfig+0x7e>
 800c638:	4a97      	ldr	r2, [pc, #604]	@ (800c898 <UART_SetConfig+0x2b8>)
 800c63a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c63c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800c640:	2a18      	cmp	r2, #24
 800c642:	f000 8101 	beq.w	800c848 <UART_SetConfig+0x268>
 800c646:	d83b      	bhi.n	800c6c0 <UART_SetConfig+0xe0>
 800c648:	2a08      	cmp	r2, #8
 800c64a:	f000 80f5 	beq.w	800c838 <UART_SetConfig+0x258>
 800c64e:	2a10      	cmp	r2, #16
 800c650:	f000 813a 	beq.w	800c8c8 <UART_SetConfig+0x2e8>
 800c654:	2a00      	cmp	r2, #0
 800c656:	f000 80e9 	beq.w	800c82c <UART_SetConfig+0x24c>
        ret = HAL_ERROR;
 800c65a:	2001      	movs	r0, #1
 800c65c:	e06a      	b.n	800c734 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c65e:	498f      	ldr	r1, [pc, #572]	@ (800c89c <UART_SetConfig+0x2bc>)
 800c660:	428a      	cmp	r2, r1
 800c662:	d10d      	bne.n	800c680 <UART_SetConfig+0xa0>
 800c664:	4a8c      	ldr	r2, [pc, #560]	@ (800c898 <UART_SetConfig+0x2b8>)
 800c666:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c668:	f002 0207 	and.w	r2, r2, #7
 800c66c:	2a05      	cmp	r2, #5
 800c66e:	d8f4      	bhi.n	800c65a <UART_SetConfig+0x7a>
 800c670:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c674:	00e2007e 	.word	0x00e2007e
 800c678:	00ea012a 	.word	0x00ea012a
 800c67c:	002b0107 	.word	0x002b0107
 800c680:	4987      	ldr	r1, [pc, #540]	@ (800c8a0 <UART_SetConfig+0x2c0>)
 800c682:	428a      	cmp	r2, r1
 800c684:	d0ee      	beq.n	800c664 <UART_SetConfig+0x84>
 800c686:	4987      	ldr	r1, [pc, #540]	@ (800c8a4 <UART_SetConfig+0x2c4>)
 800c688:	428a      	cmp	r2, r1
 800c68a:	d0eb      	beq.n	800c664 <UART_SetConfig+0x84>
 800c68c:	4986      	ldr	r1, [pc, #536]	@ (800c8a8 <UART_SetConfig+0x2c8>)
 800c68e:	428a      	cmp	r2, r1
 800c690:	d0e8      	beq.n	800c664 <UART_SetConfig+0x84>
 800c692:	4986      	ldr	r1, [pc, #536]	@ (800c8ac <UART_SetConfig+0x2cc>)
 800c694:	428a      	cmp	r2, r1
 800c696:	d0cf      	beq.n	800c638 <UART_SetConfig+0x58>
 800c698:	4985      	ldr	r1, [pc, #532]	@ (800c8b0 <UART_SetConfig+0x2d0>)
 800c69a:	428a      	cmp	r2, r1
 800c69c:	d0e2      	beq.n	800c664 <UART_SetConfig+0x84>
 800c69e:	4985      	ldr	r1, [pc, #532]	@ (800c8b4 <UART_SetConfig+0x2d4>)
 800c6a0:	428a      	cmp	r2, r1
 800c6a2:	d0df      	beq.n	800c664 <UART_SetConfig+0x84>
 800c6a4:	4b7a      	ldr	r3, [pc, #488]	@ (800c890 <UART_SetConfig+0x2b0>)
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d1d7      	bne.n	800c65a <UART_SetConfig+0x7a>
 800c6aa:	4a7b      	ldr	r2, [pc, #492]	@ (800c898 <UART_SetConfig+0x2b8>)
 800c6ac:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c6ae:	f003 0307 	and.w	r3, r3, #7
 800c6b2:	2b05      	cmp	r3, #5
 800c6b4:	d8d1      	bhi.n	800c65a <UART_SetConfig+0x7a>
 800c6b6:	e8df f003 	tbb	[pc, r3]
 800c6ba:	4538      	.short	0x4538
 800c6bc:	0f594f4a 	.word	0x0f594f4a
 800c6c0:	2a20      	cmp	r2, #32
 800c6c2:	f000 80de 	beq.w	800c882 <UART_SetConfig+0x2a2>
 800c6c6:	2a28      	cmp	r2, #40	@ 0x28
 800c6c8:	d1c7      	bne.n	800c65a <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6ce:	f000 808a 	beq.w	800c7e6 <UART_SetConfig+0x206>
 800c6d2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c6d6:	e0c4      	b.n	800c862 <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 800c6d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6dc:	4b76      	ldr	r3, [pc, #472]	@ (800c8b8 <UART_SetConfig+0x2d8>)
 800c6de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6e0:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6e2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6e6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6ea:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6ee:	4299      	cmp	r1, r3
 800c6f0:	d8b3      	bhi.n	800c65a <UART_SetConfig+0x7a>
 800c6f2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c6f6:	d8b0      	bhi.n	800c65a <UART_SetConfig+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	f7f4 f804 	bl	8000708 <__aeabi_uldivmod>
 800c700:	462a      	mov	r2, r5
 800c702:	0209      	lsls	r1, r1, #8
 800c704:	086b      	lsrs	r3, r5, #1
 800c706:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c70a:	0200      	lsls	r0, r0, #8
 800c70c:	18c0      	adds	r0, r0, r3
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	f141 0100 	adc.w	r1, r1, #0
 800c716:	f7f3 fff7 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c71a:	4b68      	ldr	r3, [pc, #416]	@ (800c8bc <UART_SetConfig+0x2dc>)
 800c71c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c720:	429a      	cmp	r2, r3
 800c722:	d89a      	bhi.n	800c65a <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	60d8      	str	r0, [r3, #12]
 800c728:	e003      	b.n	800c732 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c72a:	f7ff fbb5 	bl	800be98 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800c72e:	2800      	cmp	r0, #0
 800c730:	d1d4      	bne.n	800c6dc <UART_SetConfig+0xfc>
          pclk = (uint32_t) HSI_VALUE;
 800c732:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800c734:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800c738:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800c73a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800c73c:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800c740:	b007      	add	sp, #28
 800c742:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c744:	4668      	mov	r0, sp
 800c746:	f7ff fbb9 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c74a:	9801      	ldr	r0, [sp, #4]
        break;
 800c74c:	e7ef      	b.n	800c72e <UART_SetConfig+0x14e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c74e:	a803      	add	r0, sp, #12
 800c750:	f7ff fc5e 	bl	800c010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c754:	9804      	ldr	r0, [sp, #16]
        break;
 800c756:	e7ea      	b.n	800c72e <UART_SetConfig+0x14e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c758:	6813      	ldr	r3, [r2, #0]
 800c75a:	4859      	ldr	r0, [pc, #356]	@ (800c8c0 <UART_SetConfig+0x2e0>)
 800c75c:	f013 0f20 	tst.w	r3, #32
 800c760:	d0bc      	beq.n	800c6dc <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c762:	6813      	ldr	r3, [r2, #0]
 800c764:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c768:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c76a:	e7b7      	b.n	800c6dc <UART_SetConfig+0xfc>
        pclk = (uint32_t) CSI_VALUE;
 800c76c:	4855      	ldr	r0, [pc, #340]	@ (800c8c4 <UART_SetConfig+0x2e4>)
 800c76e:	e7b5      	b.n	800c6dc <UART_SetConfig+0xfc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c774:	d155      	bne.n	800c822 <UART_SetConfig+0x242>
 800c776:	2300      	movs	r3, #0
    switch (clocksource)
 800c778:	2b08      	cmp	r3, #8
 800c77a:	f63f af6e 	bhi.w	800c65a <UART_SetConfig+0x7a>
 800c77e:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <UART_SetConfig+0x1a4>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c7b1 	.word	0x0800c7b1
 800c788:	0800c7bd 	.word	0x0800c7bd
 800c78c:	0800c65b 	.word	0x0800c65b
 800c790:	0800c65b 	.word	0x0800c65b
 800c794:	0800c7c3 	.word	0x0800c7c3
 800c798:	0800c65b 	.word	0x0800c65b
 800c79c:	0800c65b 	.word	0x0800c65b
 800c7a0:	0800c65b 	.word	0x0800c65b
 800c7a4:	0800c7cd 	.word	0x0800c7cd
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	e7e5      	b.n	800c778 <UART_SetConfig+0x198>
 800c7ac:	2308      	movs	r3, #8
 800c7ae:	e7e3      	b.n	800c778 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7b0:	f7fe fd2e 	bl	800b210 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7b4:	4603      	mov	r3, r0
    if (pclk != 0U)
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0bb      	beq.n	800c732 <UART_SetConfig+0x152>
 800c7ba:	e014      	b.n	800c7e6 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7bc:	f7fe fd3a 	bl	800b234 <HAL_RCC_GetPCLK2Freq>
 800c7c0:	e7f8      	b.n	800c7b4 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7c2:	4668      	mov	r0, sp
 800c7c4:	f7ff fb7a 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7c8:	9b01      	ldr	r3, [sp, #4]
        break;
 800c7ca:	e7f4      	b.n	800c7b6 <UART_SetConfig+0x1d6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7cc:	a803      	add	r0, sp, #12
 800c7ce:	f7ff fc1f 	bl	800c010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7d2:	9b04      	ldr	r3, [sp, #16]
        break;
 800c7d4:	e7ef      	b.n	800c7b6 <UART_SetConfig+0x1d6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7d6:	f013 0f20 	tst.w	r3, #32
 800c7da:	4b39      	ldr	r3, [pc, #228]	@ (800c8c0 <UART_SetConfig+0x2e0>)
 800c7dc:	d003      	beq.n	800c7e6 <UART_SetConfig+0x206>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c7de:	6812      	ldr	r2, [r2, #0]
 800c7e0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800c7e4:	40d3      	lsrs	r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7e6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c7e8:	4a33      	ldr	r2, [pc, #204]	@ (800c8b8 <UART_SetConfig+0x2d8>)
 800c7ea:	6861      	ldr	r1, [r4, #4]
 800c7ec:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800c7f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7f4:	084a      	lsrs	r2, r1, #1
 800c7f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7fa:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7fe:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c802:	f1a3 0110 	sub.w	r1, r3, #16
 800c806:	4291      	cmp	r1, r2
 800c808:	f63f af27 	bhi.w	800c65a <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c80c:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c810:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c814:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c816:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800c818:	4313      	orrs	r3, r2
 800c81a:	60cb      	str	r3, [r1, #12]
 800c81c:	e789      	b.n	800c732 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800c81e:	4b29      	ldr	r3, [pc, #164]	@ (800c8c4 <UART_SetConfig+0x2e4>)
 800c820:	e7e1      	b.n	800c7e6 <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c822:	f7fe fcf5 	bl	800b210 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c826:	2800      	cmp	r0, #0
 800c828:	d083      	beq.n	800c732 <UART_SetConfig+0x152>
 800c82a:	e01a      	b.n	800c862 <UART_SetConfig+0x282>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c82c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c830:	d0c4      	beq.n	800c7bc <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c832:	f7fe fcff 	bl	800b234 <HAL_RCC_GetPCLK2Freq>
        break;
 800c836:	e7f6      	b.n	800c826 <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c83c:	d0b4      	beq.n	800c7a8 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c83e:	4668      	mov	r0, sp
 800c840:	f7ff fb3c 	bl	800bebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c844:	9801      	ldr	r0, [sp, #4]
        break;
 800c846:	e7ee      	b.n	800c826 <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c84c:	4a12      	ldr	r2, [pc, #72]	@ (800c898 <UART_SetConfig+0x2b8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c84e:	6813      	ldr	r3, [r2, #0]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c850:	d0c1      	beq.n	800c7d6 <UART_SetConfig+0x1f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c852:	f013 0f20 	tst.w	r3, #32
 800c856:	481a      	ldr	r0, [pc, #104]	@ (800c8c0 <UART_SetConfig+0x2e0>)
 800c858:	d003      	beq.n	800c862 <UART_SetConfig+0x282>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c85a:	6813      	ldr	r3, [r2, #0]
 800c85c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c860:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c862:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c864:	4a14      	ldr	r2, [pc, #80]	@ (800c8b8 <UART_SetConfig+0x2d8>)
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c86c:	fbb0 f0f2 	udiv	r0, r0, r2
 800c870:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c874:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c878:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800c87c:	f1a0 0210 	sub.w	r2, r0, #16
 800c880:	e74e      	b.n	800c720 <UART_SetConfig+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c882:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c886:	d0ca      	beq.n	800c81e <UART_SetConfig+0x23e>
        pclk = (uint32_t) CSI_VALUE;
 800c888:	480e      	ldr	r0, [pc, #56]	@ (800c8c4 <UART_SetConfig+0x2e4>)
 800c88a:	e7ea      	b.n	800c862 <UART_SetConfig+0x282>
 800c88c:	cfff69f3 	.word	0xcfff69f3
 800c890:	58000c00 	.word	0x58000c00
 800c894:	40011000 	.word	0x40011000
 800c898:	58024400 	.word	0x58024400
 800c89c:	40004400 	.word	0x40004400
 800c8a0:	40004800 	.word	0x40004800
 800c8a4:	40004c00 	.word	0x40004c00
 800c8a8:	40005000 	.word	0x40005000
 800c8ac:	40011400 	.word	0x40011400
 800c8b0:	40007800 	.word	0x40007800
 800c8b4:	40007c00 	.word	0x40007c00
 800c8b8:	08028bc0 	.word	0x08028bc0
 800c8bc:	000ffcff 	.word	0x000ffcff
 800c8c0:	03d09000 	.word	0x03d09000
 800c8c4:	003d0900 	.word	0x003d0900
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8cc:	f43f af6e 	beq.w	800c7ac <UART_SetConfig+0x1cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8d0:	a803      	add	r0, sp, #12
 800c8d2:	f7ff fb9d 	bl	800c010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8d6:	9804      	ldr	r0, [sp, #16]
        break;
 800c8d8:	e7a5      	b.n	800c826 <UART_SetConfig+0x246>
 800c8da:	bf00      	nop

0800c8dc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c8de:	071a      	lsls	r2, r3, #28
{
 800c8e0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8e2:	d506      	bpl.n	800c8f2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8e4:	6801      	ldr	r1, [r0, #0]
 800c8e6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800c8e8:	684a      	ldr	r2, [r1, #4]
 800c8ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c8ee:	4322      	orrs	r2, r4
 800c8f0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8f2:	07dc      	lsls	r4, r3, #31
 800c8f4:	d506      	bpl.n	800c904 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8f6:	6801      	ldr	r1, [r0, #0]
 800c8f8:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800c8fa:	684a      	ldr	r2, [r1, #4]
 800c8fc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c900:	4322      	orrs	r2, r4
 800c902:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c904:	0799      	lsls	r1, r3, #30
 800c906:	d506      	bpl.n	800c916 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c908:	6801      	ldr	r1, [r0, #0]
 800c90a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800c90c:	684a      	ldr	r2, [r1, #4]
 800c90e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c912:	4322      	orrs	r2, r4
 800c914:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c916:	075a      	lsls	r2, r3, #29
 800c918:	d506      	bpl.n	800c928 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c91a:	6801      	ldr	r1, [r0, #0]
 800c91c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800c91e:	684a      	ldr	r2, [r1, #4]
 800c920:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c924:	4322      	orrs	r2, r4
 800c926:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c928:	06dc      	lsls	r4, r3, #27
 800c92a:	d506      	bpl.n	800c93a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c92c:	6801      	ldr	r1, [r0, #0]
 800c92e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800c930:	688a      	ldr	r2, [r1, #8]
 800c932:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c936:	4322      	orrs	r2, r4
 800c938:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c93a:	0699      	lsls	r1, r3, #26
 800c93c:	d506      	bpl.n	800c94c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c93e:	6801      	ldr	r1, [r0, #0]
 800c940:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800c942:	688a      	ldr	r2, [r1, #8]
 800c944:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c948:	4322      	orrs	r2, r4
 800c94a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c94c:	065a      	lsls	r2, r3, #25
 800c94e:	d510      	bpl.n	800c972 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c950:	6801      	ldr	r1, [r0, #0]
 800c952:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800c954:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c956:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c95a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800c95e:	ea42 0204 	orr.w	r2, r2, r4
 800c962:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c964:	d105      	bne.n	800c972 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c966:	684a      	ldr	r2, [r1, #4]
 800c968:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800c96a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800c96e:	4322      	orrs	r2, r4
 800c970:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c972:	061b      	lsls	r3, r3, #24
 800c974:	d506      	bpl.n	800c984 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c976:	6802      	ldr	r2, [r0, #0]
 800c978:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c97a:	6853      	ldr	r3, [r2, #4]
 800c97c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800c980:	430b      	orrs	r3, r1
 800c982:	6053      	str	r3, [r2, #4]
}
 800c984:	bd10      	pop	{r4, pc}

0800c986 <UART_WaitOnFlagUntilTimeout>:
{
 800c986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c98a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c98e:	4604      	mov	r4, r0
 800c990:	460d      	mov	r5, r1
 800c992:	4617      	mov	r7, r2
 800c994:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c996:	6822      	ldr	r2, [r4, #0]
 800c998:	69d3      	ldr	r3, [r2, #28]
 800c99a:	ea35 0303 	bics.w	r3, r5, r3
 800c99e:	bf0c      	ite	eq
 800c9a0:	2301      	moveq	r3, #1
 800c9a2:	2300      	movne	r3, #0
 800c9a4:	42bb      	cmp	r3, r7
 800c9a6:	d001      	beq.n	800c9ac <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e022      	b.n	800c9f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800c9ac:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c9b0:	d0f2      	beq.n	800c998 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9b2:	f7fa fdd9 	bl	8007568 <HAL_GetTick>
 800c9b6:	eba0 0008 	sub.w	r0, r0, r8
 800c9ba:	4548      	cmp	r0, r9
 800c9bc:	d829      	bhi.n	800ca12 <UART_WaitOnFlagUntilTimeout+0x8c>
 800c9be:	f1b9 0f00 	cmp.w	r9, #0
 800c9c2:	d026      	beq.n	800ca12 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c9c4:	6821      	ldr	r1, [r4, #0]
 800c9c6:	680b      	ldr	r3, [r1, #0]
 800c9c8:	075a      	lsls	r2, r3, #29
 800c9ca:	d5e4      	bpl.n	800c996 <UART_WaitOnFlagUntilTimeout+0x10>
 800c9cc:	2d80      	cmp	r5, #128	@ 0x80
 800c9ce:	d0e2      	beq.n	800c996 <UART_WaitOnFlagUntilTimeout+0x10>
 800c9d0:	2d40      	cmp	r5, #64	@ 0x40
 800c9d2:	d0e0      	beq.n	800c996 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c9d4:	69ce      	ldr	r6, [r1, #28]
 800c9d6:	f016 0608 	ands.w	r6, r6, #8
 800c9da:	d00c      	beq.n	800c9f6 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9dc:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800c9de:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c9e0:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800c9e2:	f7ff fdd1 	bl	800c588 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800c9e6:	2300      	movs	r3, #0
          return HAL_ERROR;
 800c9e8:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c9ea:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800c9ee:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9f6:	69cb      	ldr	r3, [r1, #28]
 800c9f8:	051b      	lsls	r3, r3, #20
 800c9fa:	d5cc      	bpl.n	800c996 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800ca00:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca02:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800ca04:	f7ff fdc0 	bl	800c588 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca08:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800ca0a:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca0e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800ca12:	2003      	movs	r0, #3
 800ca14:	e7ed      	b.n	800c9f2 <UART_WaitOnFlagUntilTimeout+0x6c>

0800ca16 <HAL_UART_Transmit>:
{
 800ca16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca1a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800ca1c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800ca20:	4604      	mov	r4, r0
 800ca22:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800ca24:	2b20      	cmp	r3, #32
{
 800ca26:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800ca28:	d146      	bne.n	800cab8 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800ca2a:	2900      	cmp	r1, #0
 800ca2c:	d046      	beq.n	800cabc <HAL_UART_Transmit+0xa6>
 800ca2e:	2a00      	cmp	r2, #0
 800ca30:	d044      	beq.n	800cabc <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca32:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca34:	2500      	movs	r5, #0
 800ca36:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca3a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800ca3e:	f7fa fd93 	bl	8007568 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca42:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800ca44:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800ca46:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800ca4e:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca52:	d103      	bne.n	800ca5c <HAL_UART_Transmit+0x46>
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	b90b      	cbnz	r3, 800ca5c <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 800ca58:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800ca5a:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800ca5c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca60:	464b      	mov	r3, r9
 800ca62:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800ca66:	b292      	uxth	r2, r2
 800ca68:	b942      	cbnz	r2, 800ca7c <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca6a:	2140      	movs	r1, #64	@ 0x40
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f7ff ff8a 	bl	800c986 <UART_WaitOnFlagUntilTimeout>
 800ca72:	2320      	movs	r3, #32
 800ca74:	b948      	cbnz	r0, 800ca8a <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800ca76:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800ca7a:	e009      	b.n	800ca90 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2180      	movs	r1, #128	@ 0x80
 800ca80:	4620      	mov	r0, r4
 800ca82:	f7ff ff80 	bl	800c986 <UART_WaitOnFlagUntilTimeout>
 800ca86:	b130      	cbz	r0, 800ca96 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 800ca88:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800ca8a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800ca8c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800ca90:	b003      	add	sp, #12
 800ca92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca96:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800ca98:	b95e      	cbnz	r6, 800cab2 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca9a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800ca9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800caa2:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800caa4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800caa8:	3a01      	subs	r2, #1
 800caaa:	b292      	uxth	r2, r2
 800caac:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 800cab0:	e7d4      	b.n	800ca5c <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cab2:	f816 3b01 	ldrb.w	r3, [r6], #1
 800cab6:	e7f4      	b.n	800caa2 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800cab8:	2002      	movs	r0, #2
 800caba:	e7e9      	b.n	800ca90 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 800cabc:	2001      	movs	r0, #1
 800cabe:	e7e7      	b.n	800ca90 <HAL_UART_Transmit+0x7a>

0800cac0 <UART_CheckIdleState>:
{
 800cac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cac2:	2600      	movs	r6, #0
{
 800cac4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cac6:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800caca:	f7fa fd4d 	bl	8007568 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cace:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cad0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	071a      	lsls	r2, r3, #28
 800cad6:	d51c      	bpl.n	800cb12 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cadc:	4632      	mov	r2, r6
 800cade:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	4603      	mov	r3, r0
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7ff ff4d 	bl	800c986 <UART_WaitOnFlagUntilTimeout>
 800caec:	b188      	cbz	r0, 800cb12 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800caee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf0:	e852 3f00 	ldrex	r3, [r2]
 800caf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf8:	e842 3100 	strex	r1, r3, [r2]
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d1f6      	bne.n	800caee <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800cb00:	2320      	movs	r3, #32
 800cb02:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800cb06:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800cb0e:	b002      	add	sp, #8
 800cb10:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	075b      	lsls	r3, r3, #29
 800cb18:	d524      	bpl.n	800cb64 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cb24:	4620      	mov	r0, r4
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	462b      	mov	r3, r5
 800cb2a:	f7ff ff2c 	bl	800c986 <UART_WaitOnFlagUntilTimeout>
 800cb2e:	b1c8      	cbz	r0, 800cb64 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb30:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb32:	e852 3f00 	ldrex	r3, [r2]
 800cb36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800cb3e:	6822      	ldr	r2, [r4, #0]
 800cb40:	2900      	cmp	r1, #0
 800cb42:	d1f5      	bne.n	800cb30 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb44:	f102 0308 	add.w	r3, r2, #8
 800cb48:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb50:	f102 0008 	add.w	r0, r2, #8
 800cb54:	e840 3100 	strex	r1, r3, [r0]
 800cb58:	2900      	cmp	r1, #0
 800cb5a:	d1f3      	bne.n	800cb44 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 800cb5c:	2320      	movs	r3, #32
 800cb5e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800cb62:	e7d0      	b.n	800cb06 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800cb64:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb66:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800cb68:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb6c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb70:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb72:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800cb74:	e7c8      	b.n	800cb08 <UART_CheckIdleState+0x48>

0800cb76 <HAL_UART_Init>:
{
 800cb76:	b510      	push	{r4, lr}
  if (huart == NULL)
 800cb78:	4604      	mov	r4, r0
 800cb7a:	b350      	cbz	r0, 800cbd2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800cb7c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800cb80:	b91b      	cbnz	r3, 800cb8a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800cb82:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800cb86:	f7f4 fdd9 	bl	800173c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800cb8a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800cb8c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cb8e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800cb92:	6813      	ldr	r3, [r2, #0]
 800cb94:	f023 0301 	bic.w	r3, r3, #1
 800cb98:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb9a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cb9c:	b113      	cbz	r3, 800cba4 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff fe9c 	bl	800c8dc <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cba4:	4620      	mov	r0, r4
 800cba6:	f7ff fd1b 	bl	800c5e0 <UART_SetConfig>
 800cbaa:	2801      	cmp	r0, #1
 800cbac:	d011      	beq.n	800cbd2 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbae:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800cbb0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbb8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbba:	689a      	ldr	r2, [r3, #8]
 800cbbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbc0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	f042 0201 	orr.w	r2, r2, #1
}
 800cbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800cbcc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800cbce:	f7ff bf77 	b.w	800cac0 <UART_CheckIdleState>
}
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	bd10      	pop	{r4, pc}
	...

0800cbd8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbd8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800cbda:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbdc:	b92b      	cbnz	r3, 800cbea <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cbe4:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cbe8:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbea:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbec:	4d09      	ldr	r5, [pc, #36]	@ (800cc14 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbee:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbf0:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbf2:	4c09      	ldr	r4, [pc, #36]	@ (800cc18 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbf4:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbf8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbfa:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800cbfc:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbfe:	011b      	lsls	r3, r3, #4
 800cc00:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc04:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc08:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc0a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc0c:	011b      	lsls	r3, r3, #4
 800cc0e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800cc12:	e7e7      	b.n	800cbe4 <UARTEx_SetNbDataToProcess+0xc>
 800cc14:	08028be0 	.word	0x08028be0
 800cc18:	08028bd8 	.word	0x08028bd8

0800cc1c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800cc1c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d014      	beq.n	800cc4e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc24:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cc26:	2324      	movs	r3, #36	@ 0x24
 800cc28:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc2c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800cc2e:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc30:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800cc34:	f023 0301 	bic.w	r3, r3, #1
 800cc38:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc3e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cc40:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800cc42:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800cc46:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	4770      	bx	lr
  __HAL_LOCK(huart);
 800cc4e:	2002      	movs	r0, #2
}
 800cc50:	4770      	bx	lr

0800cc52 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800cc52:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800cc54:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800cc58:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d017      	beq.n	800cc8e <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc5e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cc60:	2324      	movs	r3, #36	@ 0x24
 800cc62:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc66:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	f023 0301 	bic.w	r3, r3, #1
 800cc6e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc70:	68ab      	ldr	r3, [r5, #8]
 800cc72:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800cc76:	4319      	orrs	r1, r3
 800cc78:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cc7a:	f7ff ffad 	bl	800cbd8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800cc7e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc80:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cc82:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800cc86:	2000      	movs	r0, #0
 800cc88:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800cc8c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800cc8e:	2002      	movs	r0, #2
 800cc90:	e7fc      	b.n	800cc8c <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800cc92 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800cc92:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800cc94:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800cc98:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d017      	beq.n	800ccce <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc9e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800cca0:	2324      	movs	r3, #36	@ 0x24
 800cca2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cca6:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	f023 0301 	bic.w	r3, r3, #1
 800ccae:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ccb0:	68ab      	ldr	r3, [r5, #8]
 800ccb2:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800ccb6:	4319      	orrs	r1, r3
 800ccb8:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800ccba:	f7ff ff8d 	bl	800cbd8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800ccbe:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccc0:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ccc2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800ccce:	2002      	movs	r0, #2
 800ccd0:	e7fc      	b.n	800cccc <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800ccd2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800ccd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccd6:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800ccda:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800ccde:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800cce2:	ea43 0308 	orr.w	r3, r3, r8
 800cce6:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800ccea:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ccee:	6809      	ldr	r1, [r1, #0]
 800ccf0:	b981      	cbnz	r1, 800cd14 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccf2:	ea43 030e 	orr.w	r3, r3, lr
 800ccf6:	6801      	ldr	r1, [r0, #0]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	f36f 010e 	bfc	r1, #0, #15
 800ccfe:	ea43 030c 	orr.w	r3, r3, ip
 800cd02:	433b      	orrs	r3, r7
 800cd04:	4333      	orrs	r3, r6
 800cd06:	432b      	orrs	r3, r5
 800cd08:	4323      	orrs	r3, r4
 800cd0a:	430b      	orrs	r3, r1
 800cd0c:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800cd0e:	2000      	movs	r0, #0
 800cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cd14:	6801      	ldr	r1, [r0, #0]
 800cd16:	ea43 030e 	orr.w	r3, r3, lr
 800cd1a:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800cd1e:	430b      	orrs	r3, r1
 800cd20:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cd22:	ea42 030c 	orr.w	r3, r2, ip
 800cd26:	6841      	ldr	r1, [r0, #4]
 800cd28:	433b      	orrs	r3, r7
 800cd2a:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800cd2e:	4333      	orrs	r3, r6
 800cd30:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800cd34:	432b      	orrs	r3, r5
 800cd36:	4323      	orrs	r3, r4
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	6043      	str	r3, [r0, #4]
 800cd3c:	e7e7      	b.n	800cd0e <FMC_SDRAM_Init+0x3c>

0800cd3e <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd3e:	68cb      	ldr	r3, [r1, #12]
 800cd40:	f103 3cff 	add.w	ip, r3, #4294967295
 800cd44:	694b      	ldr	r3, [r1, #20]
{
 800cd46:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	684c      	ldr	r4, [r1, #4]
 800cd4c:	688f      	ldr	r7, [r1, #8]
 800cd4e:	690e      	ldr	r6, [r1, #16]
 800cd50:	051b      	lsls	r3, r3, #20
 800cd52:	698d      	ldr	r5, [r1, #24]
 800cd54:	3c01      	subs	r4, #1
 800cd56:	3f01      	subs	r7, #1
 800cd58:	3e01      	subs	r6, #1
 800cd5a:	3d01      	subs	r5, #1
 800cd5c:	6809      	ldr	r1, [r1, #0]
 800cd5e:	0124      	lsls	r4, r4, #4
 800cd60:	023f      	lsls	r7, r7, #8
 800cd62:	3901      	subs	r1, #1
 800cd64:	0436      	lsls	r6, r6, #16
 800cd66:	062d      	lsls	r5, r5, #24
 800cd68:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800cd6c:	b95a      	cbnz	r2, 800cd86 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd6e:	430b      	orrs	r3, r1
 800cd70:	6882      	ldr	r2, [r0, #8]
 800cd72:	4323      	orrs	r3, r4
 800cd74:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cd78:	433b      	orrs	r3, r7
 800cd7a:	4333      	orrs	r3, r6
 800cd7c:	432b      	orrs	r3, r5
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800cd82:	2000      	movs	r0, #0
 800cd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd86:	6882      	ldr	r2, [r0, #8]
 800cd88:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800cd8c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800cd90:	4313      	orrs	r3, r2
 800cd92:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cd94:	ea44 0307 	orr.w	r3, r4, r7
 800cd98:	68c2      	ldr	r2, [r0, #12]
 800cd9a:	430b      	orrs	r3, r1
 800cd9c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800cda0:	4333      	orrs	r3, r6
 800cda2:	432b      	orrs	r3, r5
 800cda4:	4313      	orrs	r3, r2
 800cda6:	60c3      	str	r3, [r0, #12]
 800cda8:	e7eb      	b.n	800cd82 <FMC_SDRAM_Timing_Init+0x44>

0800cdaa <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800cdaa:	4603      	mov	r3, r0
 800cdac:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800cdb0:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800cdb4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800cdb8:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800cdba:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800cdbe:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800cdc0:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800cdc2:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800cdc4:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800cdc6:	4770      	bx	lr

0800cdc8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cdc8:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cdca:	e9d1 3400 	ldrd	r3, r4, [r1]
 800cdce:	6902      	ldr	r2, [r0, #16]
 800cdd0:	4323      	orrs	r3, r4
 800cdd2:	68cc      	ldr	r4, [r1, #12]
 800cdd4:	f36f 0215 	bfc	r2, #0, #22
 800cdd8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800cddc:	4313      	orrs	r3, r2
 800cdde:	688a      	ldr	r2, [r1, #8]
 800cde0:	3a01      	subs	r2, #1
 800cde2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800cde6:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800cde8:	2000      	movs	r0, #0
 800cdea:	bd10      	pop	{r4, pc}

0800cdec <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cdec:	6943      	ldr	r3, [r0, #20]
 800cdee:	f36f 034d 	bfc	r3, #1, #13
 800cdf2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800cdf6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	4770      	bx	lr

0800cdfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cdfc:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800cdfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ce02:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ce04:	f001 fede 	bl	800ebc4 <xTaskGetSchedulerState>
 800ce08:	2801      	cmp	r0, #1
 800ce0a:	d003      	beq.n	800ce14 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ce0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ce10:	f000 bc48 	b.w	800d6a4 <xPortSysTickHandler>
}
 800ce14:	bd08      	pop	{r3, pc}
	...

0800ce18 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce18:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce1c:	b92b      	cbnz	r3, 800ce2a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ce1e:	4b06      	ldr	r3, [pc, #24]	@ (800ce38 <osKernelInitialize+0x20>)
 800ce20:	6818      	ldr	r0, [r3, #0]
 800ce22:	b928      	cbnz	r0, 800ce30 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ce24:	2201      	movs	r2, #1
 800ce26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ce28:	4770      	bx	lr
    stat = osErrorISR;
 800ce2a:	f06f 0005 	mvn.w	r0, #5
 800ce2e:	4770      	bx	lr
    } else {
      stat = osError;
 800ce30:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	2400cbf4 	.word	0x2400cbf4

0800ce3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce42:	b95c      	cbnz	r4, 800ce5c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800ce44:	4b08      	ldr	r3, [pc, #32]	@ (800ce68 <osKernelStart+0x2c>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	2a01      	cmp	r2, #1
 800ce4a:	d10a      	bne.n	800ce62 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce4c:	4a07      	ldr	r2, [pc, #28]	@ (800ce6c <osKernelStart+0x30>)
 800ce4e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ce50:	2202      	movs	r2, #2
 800ce52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ce54:	f001 fd56 	bl	800e904 <vTaskStartScheduler>
      stat = osOK;
 800ce58:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ce5a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ce5c:	f06f 0005 	mvn.w	r0, #5
 800ce60:	e7fb      	b.n	800ce5a <osKernelStart+0x1e>
      stat = osError;
 800ce62:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ce66:	e7f8      	b.n	800ce5a <osKernelStart+0x1e>
 800ce68:	2400cbf4 	.word	0x2400cbf4
 800ce6c:	e000ed00 	.word	0xe000ed00

0800ce70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce72:	4614      	mov	r4, r2
 800ce74:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ce76:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ce78:	460b      	mov	r3, r1
  hTask = NULL;
 800ce7a:	9205      	str	r2, [sp, #20]
 800ce7c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ce80:	b9fa      	cbnz	r2, 800cec2 <osThreadNew+0x52>
 800ce82:	b1f0      	cbz	r0, 800cec2 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ce84:	b354      	cbz	r4, 800cedc <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ce86:	69a5      	ldr	r5, [r4, #24]
 800ce88:	b125      	cbz	r5, 800ce94 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce8a:	1e69      	subs	r1, r5, #1
 800ce8c:	2937      	cmp	r1, #55	@ 0x37
 800ce8e:	d902      	bls.n	800ce96 <osThreadNew+0x26>
        return (NULL);
 800ce90:	2000      	movs	r0, #0
 800ce92:	e017      	b.n	800cec4 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800ce94:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ce96:	6862      	ldr	r2, [r4, #4]
 800ce98:	07d2      	lsls	r2, r2, #31
 800ce9a:	d4f9      	bmi.n	800ce90 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800ce9c:	6966      	ldr	r6, [r4, #20]
 800ce9e:	b19e      	cbz	r6, 800cec8 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cea0:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800cea2:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cea4:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800cea8:	b187      	cbz	r7, 800cecc <osThreadNew+0x5c>
 800ceaa:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800ceae:	d908      	bls.n	800cec2 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ceb0:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ceb2:	b134      	cbz	r4, 800cec2 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ceb4:	b12e      	cbz	r6, 800cec2 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ceb6:	9500      	str	r5, [sp, #0]
 800ceb8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800cebc:	f001 fb87 	bl	800e5ce <xTaskCreateStatic>
 800cec0:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cec2:	9805      	ldr	r0, [sp, #20]
}
 800cec4:	b007      	add	sp, #28
 800cec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800cec8:	2280      	movs	r2, #128	@ 0x80
 800ceca:	e7ea      	b.n	800cea2 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cecc:	f1bc 0f00 	cmp.w	ip, #0
 800ced0:	d1f7      	bne.n	800cec2 <osThreadNew+0x52>
 800ced2:	6924      	ldr	r4, [r4, #16]
 800ced4:	2c00      	cmp	r4, #0
 800ced6:	d1f4      	bne.n	800cec2 <osThreadNew+0x52>
 800ced8:	460c      	mov	r4, r1
 800ceda:	e001      	b.n	800cee0 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800cedc:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800cede:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cee0:	a905      	add	r1, sp, #20
 800cee2:	b292      	uxth	r2, r2
 800cee4:	e9cd 5100 	strd	r5, r1, [sp]
 800cee8:	4621      	mov	r1, r4
 800ceea:	f001 fba8 	bl	800e63e <xTaskCreate>
 800ceee:	2801      	cmp	r0, #1
            hTask = NULL;
 800cef0:	bf1c      	itt	ne
 800cef2:	2300      	movne	r3, #0
 800cef4:	9305      	strne	r3, [sp, #20]
 800cef6:	e7e4      	b.n	800cec2 <osThreadNew+0x52>

0800cef8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefa:	4605      	mov	r5, r0
 800cefc:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800cf00:	b117      	cbz	r7, 800cf08 <osMutexNew+0x10>
  hMutex = NULL;
 800cf02:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800cf04:	4620      	mov	r0, r4
 800cf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800cf08:	b320      	cbz	r0, 800cf54 <osMutexNew+0x5c>
      type = attr->attr_bits;
 800cf0a:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800cf0c:	0733      	lsls	r3, r6, #28
 800cf0e:	d4f8      	bmi.n	800cf02 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800cf10:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cf14:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800cf18:	b199      	cbz	r1, 800cf42 <osMutexNew+0x4a>
 800cf1a:	2b4f      	cmp	r3, #79	@ 0x4f
 800cf1c:	d9f1      	bls.n	800cf02 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800cf1e:	b1be      	cbz	r6, 800cf50 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800cf20:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf22:	f000 fec6 	bl	800dcb2 <xQueueCreateMutexStatic>
 800cf26:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d0ea      	beq.n	800cf02 <osMutexNew+0xa>
          name = attr->name;
 800cf2c:	682d      	ldr	r5, [r5, #0]
 800cf2e:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800cf30:	4629      	mov	r1, r5
 800cf32:	4620      	mov	r0, r4
 800cf34:	f001 f986 	bl	800e244 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	d0e3      	beq.n	800cf04 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cf3c:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800cf40:	e7e0      	b.n	800cf04 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1dd      	bne.n	800cf02 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800cf46:	b12e      	cbz	r6, 800cf54 <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800cf48:	2004      	movs	r0, #4
 800cf4a:	f000 fee6 	bl	800dd1a <xQueueCreateMutex>
 800cf4e:	e7ea      	b.n	800cf26 <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cf50:	2001      	movs	r0, #1
 800cf52:	e7e6      	b.n	800cf22 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800cf54:	2001      	movs	r0, #1
 800cf56:	f000 fee0 	bl	800dd1a <xQueueCreateMutex>
      if (hMutex != NULL) {
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d0d0      	beq.n	800cf02 <osMutexNew+0xa>
        if (attr != NULL) {
 800cf60:	2d00      	cmp	r5, #0
 800cf62:	d0e5      	beq.n	800cf30 <osMutexNew+0x38>
 800cf64:	2600      	movs	r6, #0
 800cf66:	e7e1      	b.n	800cf2c <osMutexNew+0x34>

0800cf68 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf6e:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800cf72:	f003 0201 	and.w	r2, r3, #1
 800cf76:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cf7a:	b995      	cbnz	r5, 800cfa2 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800cf7c:	2b01      	cmp	r3, #1
 800cf7e:	d913      	bls.n	800cfa8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800cf80:	b162      	cbz	r2, 800cf9c <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf82:	f001 f8f0 	bl	800e166 <xQueueTakeMutexRecursive>
 800cf86:	2801      	cmp	r0, #1
 800cf88:	d101      	bne.n	800cf8e <osMutexAcquire+0x26>
  stat = osOK;
 800cf8a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800cf8e:	2c00      	cmp	r4, #0
 800cf90:	bf14      	ite	ne
 800cf92:	f06f 0001 	mvnne.w	r0, #1
 800cf96:	f06f 0002 	mvneq.w	r0, #2
 800cf9a:	e7f7      	b.n	800cf8c <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cf9c:	f001 f826 	bl	800dfec <xQueueSemaphoreTake>
 800cfa0:	e7f1      	b.n	800cf86 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800cfa2:	f06f 0005 	mvn.w	r0, #5
 800cfa6:	e7f1      	b.n	800cf8c <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800cfa8:	f06f 0003 	mvn.w	r0, #3
 800cfac:	e7ee      	b.n	800cf8c <osMutexAcquire+0x24>

0800cfae <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cfae:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cfb0:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cfb4:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800cfb6:	f002 0301 	and.w	r3, r2, #1
 800cfba:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800cfbe:	b979      	cbnz	r1, 800cfe0 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800cfc0:	2a01      	cmp	r2, #1
 800cfc2:	d910      	bls.n	800cfe6 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800cfc4:	b13b      	cbz	r3, 800cfd6 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800cfc6:	f000 fe89 	bl	800dcdc <xQueueGiveMutexRecursive>
 800cfca:	2801      	cmp	r0, #1
  stat = osOK;
 800cfcc:	bf0c      	ite	eq
 800cfce:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800cfd0:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cfd4:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f000 fdb8 	bl	800db4e <xQueueGenericSend>
 800cfde:	e7f4      	b.n	800cfca <osMutexRelease+0x1c>
    stat = osErrorISR;
 800cfe0:	f06f 0005 	mvn.w	r0, #5
 800cfe4:	e7f6      	b.n	800cfd4 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800cfe6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cfea:	e7f3      	b.n	800cfd4 <osMutexRelease+0x26>

0800cfec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfee:	4604      	mov	r4, r0
 800cff0:	460e      	mov	r6, r1
 800cff2:	4615      	mov	r5, r2
 800cff4:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cff8:	b942      	cbnz	r2, 800d00c <osSemaphoreNew+0x20>
 800cffa:	b138      	cbz	r0, 800d00c <osSemaphoreNew+0x20>
 800cffc:	4288      	cmp	r0, r1
 800cffe:	d305      	bcc.n	800d00c <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800d000:	b155      	cbz	r5, 800d018 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d002:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800d006:	b12b      	cbz	r3, 800d014 <osSemaphoreNew+0x28>
 800d008:	2f4f      	cmp	r7, #79	@ 0x4f
 800d00a:	d822      	bhi.n	800d052 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800d00c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800d00e:	4620      	mov	r0, r4
 800d010:	b003      	add	sp, #12
 800d012:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d014:	2f00      	cmp	r7, #0
 800d016:	d1f9      	bne.n	800d00c <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800d018:	2c01      	cmp	r4, #1
 800d01a:	d00c      	beq.n	800d036 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d01c:	4620      	mov	r0, r4
 800d01e:	4631      	mov	r1, r6
 800d020:	f000 fd77 	bl	800db12 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800d024:	4604      	mov	r4, r0
 800d026:	2800      	cmp	r0, #0
 800d028:	d0f0      	beq.n	800d00c <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800d02a:	b985      	cbnz	r5, 800d04e <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800d02c:	4629      	mov	r1, r5
 800d02e:	4620      	mov	r0, r4
 800d030:	f001 f908 	bl	800e244 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800d034:	e7eb      	b.n	800d00e <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800d036:	2203      	movs	r2, #3
 800d038:	2100      	movs	r1, #0
 800d03a:	2001      	movs	r0, #1
 800d03c:	f000 fd20 	bl	800da80 <xQueueGenericCreate>
 800d040:	e00e      	b.n	800d060 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d042:	461a      	mov	r2, r3
 800d044:	f000 fd43 	bl	800dace <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800d048:	4604      	mov	r4, r0
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d0de      	beq.n	800d00c <osSemaphoreNew+0x20>
          name = attr->name;
 800d04e:	682d      	ldr	r5, [r5, #0]
 800d050:	e7ec      	b.n	800d02c <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800d052:	2801      	cmp	r0, #1
 800d054:	d1f5      	bne.n	800d042 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d056:	2103      	movs	r1, #3
 800d058:	9100      	str	r1, [sp, #0]
 800d05a:	4611      	mov	r1, r2
 800d05c:	f000 fcc2 	bl	800d9e4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800d060:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d062:	2800      	cmp	r0, #0
 800d064:	d0d2      	beq.n	800d00c <osSemaphoreNew+0x20>
 800d066:	2e00      	cmp	r6, #0
 800d068:	d0df      	beq.n	800d02a <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d06a:	2300      	movs	r3, #0
 800d06c:	461a      	mov	r2, r3
 800d06e:	4619      	mov	r1, r3
 800d070:	f000 fd6d 	bl	800db4e <xQueueGenericSend>
 800d074:	2801      	cmp	r0, #1
 800d076:	d0d8      	beq.n	800d02a <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800d078:	4620      	mov	r0, r4
 800d07a:	f001 f90d 	bl	800e298 <vQueueDelete>
      if (hSemaphore != NULL) {
 800d07e:	e7c5      	b.n	800d00c <osSemaphoreNew+0x20>

0800d080 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d080:	b513      	push	{r0, r1, r4, lr}
 800d082:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d084:	b328      	cbz	r0, 800d0d2 <osSemaphoreAcquire+0x52>
 800d086:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800d08a:	b1cb      	cbz	r3, 800d0c0 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800d08c:	bb09      	cbnz	r1, 800d0d2 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d08e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d090:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d092:	f001 f889 	bl	800e1a8 <xQueueReceiveFromISR>
 800d096:	2801      	cmp	r0, #1
 800d098:	d003      	beq.n	800d0a2 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800d09a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d09e:	b002      	add	sp, #8
 800d0a0:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	b90b      	cbnz	r3, 800d0aa <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	e7f9      	b.n	800d09e <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800d0aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d0b6:	f3bf 8f4f 	dsb	sy
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	e7f2      	b.n	800d0a6 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d0c0:	f000 ff94 	bl	800dfec <xQueueSemaphoreTake>
 800d0c4:	2801      	cmp	r0, #1
 800d0c6:	d0ee      	beq.n	800d0a6 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800d0c8:	2c00      	cmp	r4, #0
 800d0ca:	d0e6      	beq.n	800d09a <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800d0cc:	f06f 0001 	mvn.w	r0, #1
 800d0d0:	e7e5      	b.n	800d09e <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800d0d2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d0d6:	e7e2      	b.n	800d09e <osSemaphoreAcquire+0x1e>

0800d0d8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d0d8:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800d0da:	b318      	cbz	r0, 800d124 <osSemaphoreRelease+0x4c>
 800d0dc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800d0e0:	b1cb      	cbz	r3, 800d116 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800d0e2:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0e4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800d0e6:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d0e8:	f000 fe91 	bl	800de0e <xQueueGiveFromISR>
 800d0ec:	2801      	cmp	r0, #1
 800d0ee:	d004      	beq.n	800d0fa <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800d0f0:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800d0f4:	b003      	add	sp, #12
 800d0f6:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	b14b      	cbz	r3, 800d112 <osSemaphoreRelease+0x3a>
 800d0fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d106:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800d112:	2000      	movs	r0, #0
 800d114:	e7ee      	b.n	800d0f4 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d116:	461a      	mov	r2, r3
 800d118:	4619      	mov	r1, r3
 800d11a:	f000 fd18 	bl	800db4e <xQueueGenericSend>
 800d11e:	2801      	cmp	r0, #1
 800d120:	d0f7      	beq.n	800d112 <osSemaphoreRelease+0x3a>
 800d122:	e7e5      	b.n	800d0f0 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800d124:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d128:	e7e4      	b.n	800d0f4 <osSemaphoreRelease+0x1c>

0800d12a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d12a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d12c:	4605      	mov	r5, r0
 800d12e:	460e      	mov	r6, r1
 800d130:	4614      	mov	r4, r2
 800d132:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d136:	b11f      	cbz	r7, 800d140 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800d138:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800d13a:	4628      	mov	r0, r5
 800d13c:	b003      	add	sp, #12
 800d13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d140:	2800      	cmp	r0, #0
 800d142:	d0f9      	beq.n	800d138 <osMessageQueueNew+0xe>
 800d144:	2900      	cmp	r1, #0
 800d146:	d0f7      	beq.n	800d138 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800d148:	b1da      	cbz	r2, 800d182 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d14a:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800d14e:	b183      	cbz	r3, 800d172 <osMessageQueueNew+0x48>
 800d150:	2a4f      	cmp	r2, #79	@ 0x4f
 800d152:	d9f1      	bls.n	800d138 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d154:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d156:	2a00      	cmp	r2, #0
 800d158:	d0ee      	beq.n	800d138 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d15a:	434d      	muls	r5, r1
 800d15c:	6966      	ldr	r6, [r4, #20]
 800d15e:	42ae      	cmp	r6, r5
 800d160:	d3ea      	bcc.n	800d138 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d162:	9700      	str	r7, [sp, #0]
 800d164:	f000 fc3e 	bl	800d9e4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800d168:	4605      	mov	r5, r0
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d0e4      	beq.n	800d138 <osMessageQueueNew+0xe>
        name = attr->name;
 800d16e:	6824      	ldr	r4, [r4, #0]
 800d170:	e011      	b.n	800d196 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d172:	2a00      	cmp	r2, #0
 800d174:	d1e0      	bne.n	800d138 <osMessageQueueNew+0xe>
 800d176:	6923      	ldr	r3, [r4, #16]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d1dd      	bne.n	800d138 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d17c:	6963      	ldr	r3, [r4, #20]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1da      	bne.n	800d138 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800d182:	4628      	mov	r0, r5
 800d184:	2200      	movs	r2, #0
 800d186:	4631      	mov	r1, r6
 800d188:	f000 fc7a 	bl	800da80 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800d18c:	4605      	mov	r5, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	d0d2      	beq.n	800d138 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800d192:	2c00      	cmp	r4, #0
 800d194:	d1eb      	bne.n	800d16e <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800d196:	4621      	mov	r1, r4
 800d198:	4628      	mov	r0, r5
 800d19a:	f001 f853 	bl	800e244 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800d19e:	e7cc      	b.n	800d13a <osMessageQueueNew+0x10>

0800d1a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d1a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1a2:	461c      	mov	r4, r3
 800d1a4:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d1a8:	b1de      	cbz	r6, 800d1e2 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d1aa:	b338      	cbz	r0, 800d1fc <osMessageQueuePut+0x5c>
 800d1ac:	b331      	cbz	r1, 800d1fc <osMessageQueuePut+0x5c>
 800d1ae:	bb2b      	cbnz	r3, 800d1fc <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1b0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d1b2:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d1b4:	f000 fdce 	bl	800dd54 <xQueueGenericSendFromISR>
 800d1b8:	2801      	cmp	r0, #1
 800d1ba:	d003      	beq.n	800d1c4 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800d1bc:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d1c0:	b002      	add	sp, #8
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800d1c4:	9b01      	ldr	r3, [sp, #4]
 800d1c6:	b90b      	cbnz	r3, 800d1cc <osMessageQueuePut+0x2c>
  stat = osOK;
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	e7f9      	b.n	800d1c0 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800d1cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d1d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	e7f2      	b.n	800d1c8 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d1e2:	b158      	cbz	r0, 800d1fc <osMessageQueuePut+0x5c>
 800d1e4:	b151      	cbz	r1, 800d1fc <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d1e6:	4633      	mov	r3, r6
 800d1e8:	4622      	mov	r2, r4
 800d1ea:	f000 fcb0 	bl	800db4e <xQueueGenericSend>
 800d1ee:	2801      	cmp	r0, #1
 800d1f0:	d0ea      	beq.n	800d1c8 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800d1f2:	2c00      	cmp	r4, #0
 800d1f4:	d0e2      	beq.n	800d1bc <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800d1f6:	f06f 0001 	mvn.w	r0, #1
 800d1fa:	e7e1      	b.n	800d1c0 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800d1fc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d200:	e7de      	b.n	800d1c0 <osMessageQueuePut+0x20>

0800d202 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d202:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d204:	461c      	mov	r4, r3
 800d206:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800d20a:	b1db      	cbz	r3, 800d244 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d20c:	b330      	cbz	r0, 800d25c <osMessageQueueGet+0x5a>
 800d20e:	b329      	cbz	r1, 800d25c <osMessageQueueGet+0x5a>
 800d210:	bb24      	cbnz	r4, 800d25c <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d212:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800d214:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d216:	f000 ffc7 	bl	800e1a8 <xQueueReceiveFromISR>
 800d21a:	2801      	cmp	r0, #1
 800d21c:	d003      	beq.n	800d226 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800d21e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d222:	b003      	add	sp, #12
 800d224:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800d226:	9b01      	ldr	r3, [sp, #4]
 800d228:	b90b      	cbnz	r3, 800d22e <osMessageQueueGet+0x2c>
  stat = osOK;
 800d22a:	2000      	movs	r0, #0
 800d22c:	e7f9      	b.n	800d222 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800d22e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d236:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	e7f2      	b.n	800d22a <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d244:	b150      	cbz	r0, 800d25c <osMessageQueueGet+0x5a>
 800d246:	b149      	cbz	r1, 800d25c <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d248:	4622      	mov	r2, r4
 800d24a:	f000 fe31 	bl	800deb0 <xQueueReceive>
 800d24e:	2801      	cmp	r0, #1
 800d250:	d0eb      	beq.n	800d22a <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800d252:	2c00      	cmp	r4, #0
 800d254:	d0e3      	beq.n	800d21e <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800d256:	f06f 0001 	mvn.w	r0, #1
 800d25a:	e7e2      	b.n	800d222 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800d25c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d260:	e7df      	b.n	800d222 <osMessageQueueGet+0x20>
	...

0800d264 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d264:	4b03      	ldr	r3, [pc, #12]	@ (800d274 <vApplicationGetIdleTaskMemory+0x10>)
 800d266:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d268:	4b03      	ldr	r3, [pc, #12]	@ (800d278 <vApplicationGetIdleTaskMemory+0x14>)
 800d26a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d26c:	2380      	movs	r3, #128	@ 0x80
 800d26e:	6013      	str	r3, [r2, #0]
}
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	2400cb94 	.word	0x2400cb94
 800d278:	2400c994 	.word	0x2400c994

0800d27c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d27c:	4b03      	ldr	r3, [pc, #12]	@ (800d28c <vApplicationGetTimerTaskMemory+0x10>)
 800d27e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d280:	4b03      	ldr	r3, [pc, #12]	@ (800d290 <vApplicationGetTimerTaskMemory+0x14>)
 800d282:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d288:	6013      	str	r3, [r2, #0]
}
 800d28a:	4770      	bx	lr
 800d28c:	2400c934 	.word	0x2400c934
 800d290:	2400c534 	.word	0x2400c534

0800d294 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d294:	4b10      	ldr	r3, [pc, #64]	@ (800d2d8 <prvInsertBlockIntoFreeList+0x44>)
{
 800d296:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d298:	461a      	mov	r2, r3
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4283      	cmp	r3, r0
 800d29e:	d3fb      	bcc.n	800d298 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2a0:	6854      	ldr	r4, [r2, #4]
 800d2a2:	1911      	adds	r1, r2, r4
 800d2a4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2a6:	bf01      	itttt	eq
 800d2a8:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800d2aa:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2ac:	1909      	addeq	r1, r1, r4
 800d2ae:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2b0:	6844      	ldr	r4, [r0, #4]
 800d2b2:	1901      	adds	r1, r0, r4
 800d2b4:	428b      	cmp	r3, r1
 800d2b6:	d10c      	bne.n	800d2d2 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2b8:	4908      	ldr	r1, [pc, #32]	@ (800d2dc <prvInsertBlockIntoFreeList+0x48>)
 800d2ba:	6809      	ldr	r1, [r1, #0]
 800d2bc:	428b      	cmp	r3, r1
 800d2be:	d003      	beq.n	800d2c8 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2c0:	6859      	ldr	r1, [r3, #4]
 800d2c2:	4421      	add	r1, r4
 800d2c4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2c6:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2c8:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2ca:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2cc:	bf18      	it	ne
 800d2ce:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2d0:	bd10      	pop	{r4, pc}
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	e7f8      	b.n	800d2c8 <prvInsertBlockIntoFreeList+0x34>
 800d2d6:	bf00      	nop
 800d2d8:	2400cc10 	.word	0x2400cc10
 800d2dc:	2400cc0c 	.word	0x2400cc0c

0800d2e0 <pvPortMalloc>:
{
 800d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800d2e6:	f001 f9d9 	bl	800e69c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800d2ea:	4940      	ldr	r1, [pc, #256]	@ (800d3ec <pvPortMalloc+0x10c>)
 800d2ec:	4d40      	ldr	r5, [pc, #256]	@ (800d3f0 <pvPortMalloc+0x110>)
 800d2ee:	680b      	ldr	r3, [r1, #0]
 800d2f0:	b9f3      	cbnz	r3, 800d330 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800d2f2:	4a40      	ldr	r2, [pc, #256]	@ (800d3f4 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800d2f4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2f6:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2f8:	4e3f      	ldr	r6, [pc, #252]	@ (800d3f8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2fa:	bf1b      	ittet	ne
 800d2fc:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2fe:	4b3f      	ldrne	r3, [pc, #252]	@ (800d3fc <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d300:	4b3f      	ldreq	r3, [pc, #252]	@ (800d400 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d302:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800d306:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d308:	bf18      	it	ne
 800d30a:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d30c:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d30e:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800d310:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d312:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800d316:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d31a:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800d31c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d31e:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d322:	4b38      	ldr	r3, [pc, #224]	@ (800d404 <pvPortMalloc+0x124>)
 800d324:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d326:	4b38      	ldr	r3, [pc, #224]	@ (800d408 <pvPortMalloc+0x128>)
 800d328:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d32a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d32e:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d330:	682e      	ldr	r6, [r5, #0]
 800d332:	4226      	tst	r6, r4
 800d334:	d155      	bne.n	800d3e2 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800d336:	2c00      	cmp	r4, #0
 800d338:	d046      	beq.n	800d3c8 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800d33a:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d33e:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d340:	bf1c      	itt	ne
 800d342:	f023 0307 	bicne.w	r3, r3, #7
 800d346:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d04a      	beq.n	800d3e2 <pvPortMalloc+0x102>
 800d34c:	4f2e      	ldr	r7, [pc, #184]	@ (800d408 <pvPortMalloc+0x128>)
 800d34e:	683c      	ldr	r4, [r7, #0]
 800d350:	429c      	cmp	r4, r3
 800d352:	d346      	bcc.n	800d3e2 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800d354:	4a28      	ldr	r2, [pc, #160]	@ (800d3f8 <pvPortMalloc+0x118>)
 800d356:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d358:	6868      	ldr	r0, [r5, #4]
 800d35a:	4298      	cmp	r0, r3
 800d35c:	d204      	bcs.n	800d368 <pvPortMalloc+0x88>
 800d35e:	f8d5 c000 	ldr.w	ip, [r5]
 800d362:	f1bc 0f00 	cmp.w	ip, #0
 800d366:	d115      	bne.n	800d394 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800d368:	6809      	ldr	r1, [r1, #0]
 800d36a:	42a9      	cmp	r1, r5
 800d36c:	d039      	beq.n	800d3e2 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d36e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d370:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d374:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d376:	1ac2      	subs	r2, r0, r3
 800d378:	2a10      	cmp	r2, #16
 800d37a:	d912      	bls.n	800d3a2 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d37c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d37e:	0741      	lsls	r1, r0, #29
 800d380:	d00b      	beq.n	800d39a <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	f383 8811 	msr	BASEPRI, r3
 800d38a:	f3bf 8f6f 	isb	sy
 800d38e:	f3bf 8f4f 	dsb	sy
 800d392:	e7fe      	b.n	800d392 <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800d394:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800d396:	4665      	mov	r5, ip
 800d398:	e7de      	b.n	800d358 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d39a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d39c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d39e:	f7ff ff79 	bl	800d294 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3a2:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3a4:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3a6:	4917      	ldr	r1, [pc, #92]	@ (800d404 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3a8:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3aa:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3ac:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800d3ae:	4a17      	ldr	r2, [pc, #92]	@ (800d40c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3b0:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800d3b2:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800d3b4:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d3b6:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800d3b8:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3bc:	bf38      	it	cc
 800d3be:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d3c0:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3c4:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800d3c6:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800d3c8:	f001 fa0c 	bl	800e7e4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3cc:	0763      	lsls	r3, r4, #29
 800d3ce:	d00a      	beq.n	800d3e6 <pvPortMalloc+0x106>
 800d3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	e7fe      	b.n	800d3e0 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800d3e2:	2400      	movs	r4, #0
 800d3e4:	e7f0      	b.n	800d3c8 <pvPortMalloc+0xe8>
}
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ec:	2400cc0c 	.word	0x2400cc0c
 800d3f0:	2400cbf8 	.word	0x2400cbf8
 800d3f4:	2400cc18 	.word	0x2400cc18
 800d3f8:	2400cc10 	.word	0x2400cc10
 800d3fc:	240252b8 	.word	0x240252b8
 800d400:	000186a0 	.word	0x000186a0
 800d404:	2400cc04 	.word	0x2400cc04
 800d408:	2400cc08 	.word	0x2400cc08
 800d40c:	2400cc00 	.word	0x2400cc00

0800d410 <vPortFree>:
{
 800d410:	b510      	push	{r4, lr}
	if( pv != NULL )
 800d412:	4604      	mov	r4, r0
 800d414:	b390      	cbz	r0, 800d47c <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d416:	4a1a      	ldr	r2, [pc, #104]	@ (800d480 <vPortFree+0x70>)
 800d418:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d41c:	6812      	ldr	r2, [r2, #0]
 800d41e:	4213      	tst	r3, r2
 800d420:	d108      	bne.n	800d434 <vPortFree+0x24>
 800d422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	e7fe      	b.n	800d432 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d434:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800d438:	b141      	cbz	r1, 800d44c <vPortFree+0x3c>
 800d43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	e7fe      	b.n	800d44a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d44c:	ea23 0302 	bic.w	r3, r3, r2
 800d450:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800d454:	f001 f922 	bl	800e69c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d458:	4a0a      	ldr	r2, [pc, #40]	@ (800d484 <vPortFree+0x74>)
 800d45a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d45e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d462:	6811      	ldr	r1, [r2, #0]
 800d464:	440b      	add	r3, r1
 800d466:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d468:	f7ff ff14 	bl	800d294 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d46c:	4a06      	ldr	r2, [pc, #24]	@ (800d488 <vPortFree+0x78>)
 800d46e:	6813      	ldr	r3, [r2, #0]
 800d470:	3301      	adds	r3, #1
}
 800d472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800d476:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800d478:	f001 b9b4 	b.w	800e7e4 <xTaskResumeAll>
}
 800d47c:	bd10      	pop	{r4, pc}
 800d47e:	bf00      	nop
 800d480:	2400cbf8 	.word	0x2400cbf8
 800d484:	2400cc08 	.word	0x2400cc08
 800d488:	2400cbfc 	.word	0x2400cbfc

0800d48c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d48c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d490:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d494:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d496:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d498:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d49c:	2300      	movs	r3, #0
 800d49e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4a0:	4770      	bx	lr

0800d4a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d4a6:	4770      	bx	lr

0800d4a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4a8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4aa:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800d4ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4ae:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4b0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4b2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d4b4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d4b6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	6003      	str	r3, [r0, #0]
}
 800d4bc:	4770      	bx	lr

0800d4be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4be:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4c0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4c2:	1c63      	adds	r3, r4, #1
 800d4c4:	d10a      	bne.n	800d4dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4c6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4c8:	685a      	ldr	r2, [r3, #4]
 800d4ca:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4cc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4ce:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4d0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800d4d2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800d4d4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	6003      	str	r3, [r0, #0]
}
 800d4da:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4dc:	f100 0208 	add.w	r2, r0, #8
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	6852      	ldr	r2, [r2, #4]
 800d4e4:	6815      	ldr	r5, [r2, #0]
 800d4e6:	42a5      	cmp	r5, r4
 800d4e8:	d9fa      	bls.n	800d4e0 <vListInsert+0x22>
 800d4ea:	e7ed      	b.n	800d4c8 <vListInsert+0xa>

0800d4ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d4ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d4ee:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800d4f2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d4f4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d4f6:	6859      	ldr	r1, [r3, #4]
 800d4f8:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d4fa:	bf08      	it	eq
 800d4fc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d4fe:	2200      	movs	r2, #0
 800d500:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	3a01      	subs	r2, #1
 800d506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d508:	6818      	ldr	r0, [r3, #0]
}
 800d50a:	4770      	bx	lr

0800d50c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d50c:	4808      	ldr	r0, [pc, #32]	@ (800d530 <prvPortStartFirstTask+0x24>)
 800d50e:	6800      	ldr	r0, [r0, #0]
 800d510:	6800      	ldr	r0, [r0, #0]
 800d512:	f380 8808 	msr	MSP, r0
 800d516:	f04f 0000 	mov.w	r0, #0
 800d51a:	f380 8814 	msr	CONTROL, r0
 800d51e:	b662      	cpsie	i
 800d520:	b661      	cpsie	f
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	df00      	svc	0
 800d52c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d52e:	0000      	.short	0x0000
 800d530:	e000ed08 	.word	0xe000ed08

0800d534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d534:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d544 <vPortEnableVFP+0x10>
 800d538:	6801      	ldr	r1, [r0, #0]
 800d53a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d53e:	6001      	str	r1, [r0, #0]
 800d540:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d542:	0000      	.short	0x0000
 800d544:	e000ed88 	.word	0xe000ed88

0800d548 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800d548:	2300      	movs	r3, #0
{
 800d54a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800d54c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800d54e:	4b0d      	ldr	r3, [pc, #52]	@ (800d584 <prvTaskExitError+0x3c>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	3301      	adds	r3, #1
 800d554:	d008      	beq.n	800d568 <prvTaskExitError+0x20>
 800d556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	e7fe      	b.n	800d566 <prvTaskExitError+0x1e>
 800d568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0fc      	beq.n	800d578 <prvTaskExitError+0x30>
}
 800d57e:	b002      	add	sp, #8
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	240000a8 	.word	0x240000a8

0800d588 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d58c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d590:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800d594:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d596:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d598:	4b03      	ldr	r3, [pc, #12]	@ (800d5a8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d59a:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d59c:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d59e:	f06f 0302 	mvn.w	r3, #2
 800d5a2:	6203      	str	r3, [r0, #32]
}
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	0800d549 	.word	0x0800d549
 800d5ac:	00000000 	.word	0x00000000

0800d5b0 <SVC_Handler>:
	__asm volatile (
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <pxCurrentTCBConst2>)
 800d5b2:	6819      	ldr	r1, [r3, #0]
 800d5b4:	6808      	ldr	r0, [r1, #0]
 800d5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ba:	f380 8809 	msr	PSP, r0
 800d5be:	f3bf 8f6f 	isb	sy
 800d5c2:	f04f 0000 	mov.w	r0, #0
 800d5c6:	f380 8811 	msr	BASEPRI, r0
 800d5ca:	4770      	bx	lr
 800d5cc:	f3af 8000 	nop.w

0800d5d0 <pxCurrentTCBConst2>:
 800d5d0:	240257f8 	.word	0x240257f8

0800d5d4 <vPortEnterCritical>:
 800d5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800d5e4:	4a0a      	ldr	r2, [pc, #40]	@ (800d610 <vPortEnterCritical+0x3c>)
 800d5e6:	6813      	ldr	r3, [r2, #0]
 800d5e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800d5ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800d5ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800d5ee:	d10e      	bne.n	800d60e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d5f4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	b143      	cbz	r3, 800d60e <vPortEnterCritical+0x3a>
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	e7fe      	b.n	800d60c <vPortEnterCritical+0x38>
}
 800d60e:	4770      	bx	lr
 800d610:	240000a8 	.word	0x240000a8

0800d614 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800d614:	4a08      	ldr	r2, [pc, #32]	@ (800d638 <vPortExitCritical+0x24>)
 800d616:	6813      	ldr	r3, [r2, #0]
 800d618:	b943      	cbnz	r3, 800d62c <vPortExitCritical+0x18>
 800d61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	e7fe      	b.n	800d62a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800d62c:	3b01      	subs	r3, #1
 800d62e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d630:	b90b      	cbnz	r3, 800d636 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d632:	f383 8811 	msr	BASEPRI, r3
}
 800d636:	4770      	bx	lr
 800d638:	240000a8 	.word	0x240000a8
 800d63c:	00000000 	.word	0x00000000

0800d640 <PendSV_Handler>:
	__asm volatile
 800d640:	f3ef 8009 	mrs	r0, PSP
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	4b15      	ldr	r3, [pc, #84]	@ (800d6a0 <pxCurrentTCBConst>)
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	f01e 0f10 	tst.w	lr, #16
 800d650:	bf08      	it	eq
 800d652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65a:	6010      	str	r0, [r2, #0]
 800d65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d664:	f380 8811 	msr	BASEPRI, r0
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f001 f996 	bl	800e9a0 <vTaskSwitchContext>
 800d674:	f04f 0000 	mov.w	r0, #0
 800d678:	f380 8811 	msr	BASEPRI, r0
 800d67c:	bc09      	pop	{r0, r3}
 800d67e:	6819      	ldr	r1, [r3, #0]
 800d680:	6808      	ldr	r0, [r1, #0]
 800d682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d686:	f01e 0f10 	tst.w	lr, #16
 800d68a:	bf08      	it	eq
 800d68c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d690:	f380 8809 	msr	PSP, r0
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	f3af 8000 	nop.w

0800d6a0 <pxCurrentTCBConst>:
 800d6a0:	240257f8 	.word	0x240257f8

0800d6a4 <xPortSysTickHandler>:
{
 800d6a4:	b508      	push	{r3, lr}
	__asm volatile
 800d6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6aa:	f383 8811 	msr	BASEPRI, r3
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d6b6:	f000 ffff 	bl	800e6b8 <xTaskIncrementTick>
 800d6ba:	b128      	cbz	r0, 800d6c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d6c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	f383 8811 	msr	BASEPRI, r3
}
 800d6ce:	bd08      	pop	{r3, pc}

0800d6d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d6d4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6da:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6dc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6de:	4b04      	ldr	r3, [pc, #16]	@ (800d6f0 <vPortSetupTimerInterrupt+0x20>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ea:	2307      	movs	r3, #7
 800d6ec:	6113      	str	r3, [r2, #16]
}
 800d6ee:	4770      	bx	lr
 800d6f0:	2400009c 	.word	0x2400009c

0800d6f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800d6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6fa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800d6fe:	4a38      	ldr	r2, [pc, #224]	@ (800d7e0 <xPortStartScheduler+0xec>)
 800d700:	4291      	cmp	r1, r2
 800d702:	d108      	bne.n	800d716 <xPortStartScheduler+0x22>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	e7fe      	b.n	800d714 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d716:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800d71a:	4b32      	ldr	r3, [pc, #200]	@ (800d7e4 <xPortStartScheduler+0xf0>)
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d108      	bne.n	800d732 <xPortStartScheduler+0x3e>
 800d720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	e7fe      	b.n	800d730 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d732:	4b2d      	ldr	r3, [pc, #180]	@ (800d7e8 <xPortStartScheduler+0xf4>)
 800d734:	781a      	ldrb	r2, [r3, #0]
 800d736:	b2d2      	uxtb	r2, r2
 800d738:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d73a:	22ff      	movs	r2, #255	@ 0xff
 800d73c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d73e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d740:	4a2a      	ldr	r2, [pc, #168]	@ (800d7ec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d742:	b2db      	uxtb	r3, r3
 800d744:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d748:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d74c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d750:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d752:	2307      	movs	r3, #7
 800d754:	4a26      	ldr	r2, [pc, #152]	@ (800d7f0 <xPortStartScheduler+0xfc>)
 800d756:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d758:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d75c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d75e:	0609      	lsls	r1, r1, #24
 800d760:	d40a      	bmi.n	800d778 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d762:	2b03      	cmp	r3, #3
 800d764:	d011      	beq.n	800d78a <xPortStartScheduler+0x96>
 800d766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	e7fe      	b.n	800d776 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d778:	3b01      	subs	r3, #1
 800d77a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d77c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d780:	005b      	lsls	r3, r3, #1
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f88d 3003 	strb.w	r3, [sp, #3]
 800d788:	e7e6      	b.n	800d758 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d78a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d78e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d792:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d794:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d796:	9b01      	ldr	r3, [sp, #4]
 800d798:	4a13      	ldr	r2, [pc, #76]	@ (800d7e8 <xPortStartScheduler+0xf4>)
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d79e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d7a6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7aa:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d7b2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d7b6:	f7ff ff8b 	bl	800d6d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f4 <xPortStartScheduler+0x100>)
 800d7bc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d7be:	f7ff feb9 	bl	800d534 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7c2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d7c6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d7ca:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d7ce:	f7ff fe9d 	bl	800d50c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d7d2:	f001 f8e5 	bl	800e9a0 <vTaskSwitchContext>
}
 800d7d6:	4628      	mov	r0, r5
	prvTaskExitError();
 800d7d8:	f7ff feb6 	bl	800d548 <prvTaskExitError>
}
 800d7dc:	b003      	add	sp, #12
 800d7de:	bd30      	pop	{r4, r5, pc}
 800d7e0:	410fc271 	.word	0x410fc271
 800d7e4:	410fc270 	.word	0x410fc270
 800d7e8:	e000e400 	.word	0xe000e400
 800d7ec:	240252bc 	.word	0x240252bc
 800d7f0:	240252b8 	.word	0x240252b8
 800d7f4:	240000a8 	.word	0x240000a8

0800d7f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d7f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d7fc:	2b0f      	cmp	r3, #15
 800d7fe:	d90e      	bls.n	800d81e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d800:	4a11      	ldr	r2, [pc, #68]	@ (800d848 <vPortValidateInterruptPriority+0x50>)
 800d802:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d804:	4a11      	ldr	r2, [pc, #68]	@ (800d84c <vPortValidateInterruptPriority+0x54>)
 800d806:	7812      	ldrb	r2, [r2, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d908      	bls.n	800d81e <vPortValidateInterruptPriority+0x26>
 800d80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	e7fe      	b.n	800d81c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d81e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d822:	4a0b      	ldr	r2, [pc, #44]	@ (800d850 <vPortValidateInterruptPriority+0x58>)
 800d824:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d828:	6812      	ldr	r2, [r2, #0]
 800d82a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d82e:	4293      	cmp	r3, r2
 800d830:	d908      	bls.n	800d844 <vPortValidateInterruptPriority+0x4c>
 800d832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	e7fe      	b.n	800d842 <vPortValidateInterruptPriority+0x4a>
	}
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	e000e3f0 	.word	0xe000e3f0
 800d84c:	240252bc 	.word	0x240252bc
 800d850:	240252b8 	.word	0x240252b8

0800d854 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d854:	b510      	push	{r4, lr}
 800d856:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d858:	f7ff febc 	bl	800d5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d85c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d85e:	f7ff fed9 	bl	800d614 <vPortExitCritical>

	return xReturn;
}
 800d862:	fab4 f084 	clz	r0, r4
 800d866:	0940      	lsrs	r0, r0, #5
 800d868:	bd10      	pop	{r4, pc}

0800d86a <prvCopyDataToQueue>:
{
 800d86a:	b570      	push	{r4, r5, r6, lr}
 800d86c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d86e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d870:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d872:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d874:	b942      	cbnz	r2, 800d888 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d876:	6806      	ldr	r6, [r0, #0]
 800d878:	b99e      	cbnz	r6, 800d8a2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d87a:	6880      	ldr	r0, [r0, #8]
 800d87c:	f001 f9f0 	bl	800ec60 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d880:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d882:	3501      	adds	r5, #1
 800d884:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d886:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d888:	b96e      	cbnz	r6, 800d8a6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d88a:	6840      	ldr	r0, [r0, #4]
 800d88c:	f017 fbef 	bl	802506e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d890:	6863      	ldr	r3, [r4, #4]
 800d892:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d894:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d896:	68a2      	ldr	r2, [r4, #8]
 800d898:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d89a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d89c:	bf24      	itt	cs
 800d89e:	6823      	ldrcs	r3, [r4, #0]
 800d8a0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e7ed      	b.n	800d882 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d8a6:	68c0      	ldr	r0, [r0, #12]
 800d8a8:	f017 fbe1 	bl	802506e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d8ae:	68e3      	ldr	r3, [r4, #12]
 800d8b0:	4251      	negs	r1, r2
 800d8b2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d8b4:	6822      	ldr	r2, [r4, #0]
 800d8b6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d8b8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d8ba:	bf3e      	ittt	cc
 800d8bc:	68a3      	ldrcc	r3, [r4, #8]
 800d8be:	185b      	addcc	r3, r3, r1
 800d8c0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d8c2:	2e02      	cmp	r6, #2
 800d8c4:	d1ed      	bne.n	800d8a2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8c6:	b10d      	cbz	r5, 800d8cc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d8c8:	3d01      	subs	r5, #1
 800d8ca:	e7ea      	b.n	800d8a2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	e7d8      	b.n	800d882 <prvCopyDataToQueue+0x18>

0800d8d0 <prvCopyDataFromQueue>:
{
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d8d6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8d8:	b162      	cbz	r2, 800d8f4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8da:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8dc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8de:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8e0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8e2:	60dc      	str	r4, [r3, #12]
}
 800d8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8e8:	bf24      	itt	cs
 800d8ea:	6819      	ldrcs	r1, [r3, #0]
 800d8ec:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8ee:	68d9      	ldr	r1, [r3, #12]
 800d8f0:	f017 bbbd 	b.w	802506e <memcpy>
}
 800d8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <prvUnlockQueue>:
{
 800d8fa:	b570      	push	{r4, r5, r6, lr}
 800d8fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d8fe:	f7ff fe69 	bl	800d5d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d902:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d906:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d90a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d90c:	2d00      	cmp	r5, #0
 800d90e:	dd01      	ble.n	800d914 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d910:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d912:	b9b3      	cbnz	r3, 800d942 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800d914:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d916:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d91a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d91e:	f7ff fe79 	bl	800d614 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d922:	f7ff fe57 	bl	800d5d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d926:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d92a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d92c:	2d00      	cmp	r5, #0
 800d92e:	dd01      	ble.n	800d934 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	b97b      	cbnz	r3, 800d954 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d934:	23ff      	movs	r3, #255	@ 0xff
 800d936:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d93e:	f7ff be69 	b.w	800d614 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d942:	4630      	mov	r0, r6
 800d944:	f001 f8a8 	bl	800ea98 <xTaskRemoveFromEventList>
 800d948:	b108      	cbz	r0, 800d94e <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800d94a:	f001 f92f 	bl	800ebac <vTaskMissedYield>
			--cTxLock;
 800d94e:	3d01      	subs	r5, #1
 800d950:	b26d      	sxtb	r5, r5
 800d952:	e7db      	b.n	800d90c <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d954:	4630      	mov	r0, r6
 800d956:	f001 f89f 	bl	800ea98 <xTaskRemoveFromEventList>
 800d95a:	b108      	cbz	r0, 800d960 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d95c:	f001 f926 	bl	800ebac <vTaskMissedYield>
				--cRxLock;
 800d960:	3d01      	subs	r5, #1
 800d962:	b26d      	sxtb	r5, r5
 800d964:	e7e2      	b.n	800d92c <prvUnlockQueue+0x32>

0800d966 <xQueueGenericReset>:
{
 800d966:	b538      	push	{r3, r4, r5, lr}
 800d968:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d96a:	4604      	mov	r4, r0
 800d96c:	b940      	cbnz	r0, 800d980 <xQueueGenericReset+0x1a>
 800d96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	e7fe      	b.n	800d97e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d980:	f7ff fe28 	bl	800d5d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d984:	6822      	ldr	r2, [r4, #0]
 800d986:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d98a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d98c:	434b      	muls	r3, r1
 800d98e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d990:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d992:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d994:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d996:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d998:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d99a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d99c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d99e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d9a6:	b9a5      	cbnz	r5, 800d9d2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9a8:	6923      	ldr	r3, [r4, #16]
 800d9aa:	b173      	cbz	r3, 800d9ca <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ac:	f104 0010 	add.w	r0, r4, #16
 800d9b0:	f001 f872 	bl	800ea98 <xTaskRemoveFromEventList>
 800d9b4:	b148      	cbz	r0, 800d9ca <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d9b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d9ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d9ca:	f7ff fe23 	bl	800d614 <vPortExitCritical>
}
 800d9ce:	2001      	movs	r0, #1
 800d9d0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d9d2:	f104 0010 	add.w	r0, r4, #16
 800d9d6:	f7ff fd59 	bl	800d48c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d9da:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d9de:	f7ff fd55 	bl	800d48c <vListInitialise>
 800d9e2:	e7f2      	b.n	800d9ca <xQueueGenericReset+0x64>

0800d9e4 <xQueueGenericCreateStatic>:
	{
 800d9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9e6:	460d      	mov	r5, r1
 800d9e8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d9ea:	b940      	cbnz	r0, 800d9fe <xQueueGenericCreateStatic+0x1a>
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	e7fe      	b.n	800d9fc <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d9fe:	b943      	cbnz	r3, 800da12 <xQueueGenericCreateStatic+0x2e>
 800da00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	e7fe      	b.n	800da10 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da12:	b14a      	cbz	r2, 800da28 <xQueueGenericCreateStatic+0x44>
 800da14:	b991      	cbnz	r1, 800da3c <xQueueGenericCreateStatic+0x58>
 800da16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	e7fe      	b.n	800da26 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da28:	b141      	cbz	r1, 800da3c <xQueueGenericCreateStatic+0x58>
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	e7fe      	b.n	800da3a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da3c:	2350      	movs	r3, #80	@ 0x50
 800da3e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da40:	9b01      	ldr	r3, [sp, #4]
 800da42:	2b50      	cmp	r3, #80	@ 0x50
 800da44:	d008      	beq.n	800da58 <xQueueGenericCreateStatic+0x74>
 800da46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4a:	f383 8811 	msr	BASEPRI, r3
 800da4e:	f3bf 8f6f 	isb	sy
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	e7fe      	b.n	800da56 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da58:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800da5a:	2d00      	cmp	r5, #0
 800da5c:	bf08      	it	eq
 800da5e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da60:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da62:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800da66:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800da68:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800da6c:	4620      	mov	r0, r4
 800da6e:	f7ff ff7a 	bl	800d966 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800da72:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800da76:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800da78:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800da7c:	b003      	add	sp, #12
 800da7e:	bd30      	pop	{r4, r5, pc}

0800da80 <xQueueGenericCreate>:
	{
 800da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da82:	460d      	mov	r5, r1
 800da84:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da86:	4606      	mov	r6, r0
 800da88:	b940      	cbnz	r0, 800da9c <xQueueGenericCreate+0x1c>
 800da8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	e7fe      	b.n	800da9a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da9c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800da9e:	3050      	adds	r0, #80	@ 0x50
 800daa0:	f7ff fc1e 	bl	800d2e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800daa4:	4604      	mov	r4, r0
 800daa6:	b170      	cbz	r0, 800dac6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800daa8:	2300      	movs	r3, #0
 800daaa:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800daae:	b165      	cbz	r5, 800daca <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dab0:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dab4:	2101      	movs	r1, #1
 800dab6:	4620      	mov	r0, r4
 800dab8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800daba:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dabe:	f7ff ff52 	bl	800d966 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800dac2:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800dac6:	4620      	mov	r0, r4
 800dac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800daca:	4603      	mov	r3, r0
 800dacc:	e7f2      	b.n	800dab4 <xQueueGenericCreate+0x34>

0800dace <xQueueCreateCountingSemaphoreStatic>:
	{
 800dace:	b513      	push	{r0, r1, r4, lr}
 800dad0:	4613      	mov	r3, r2
 800dad2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800dad4:	b940      	cbnz	r0, 800dae8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800dad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dada:	f383 8811 	msr	BASEPRI, r3
 800dade:	f3bf 8f6f 	isb	sy
 800dae2:	f3bf 8f4f 	dsb	sy
 800dae6:	e7fe      	b.n	800dae6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dae8:	4288      	cmp	r0, r1
 800daea:	d208      	bcs.n	800dafe <xQueueCreateCountingSemaphoreStatic+0x30>
 800daec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf0:	f383 8811 	msr	BASEPRI, r3
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	f3bf 8f4f 	dsb	sy
 800dafc:	e7fe      	b.n	800dafc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dafe:	2202      	movs	r2, #2
 800db00:	9200      	str	r2, [sp, #0]
 800db02:	2200      	movs	r2, #0
 800db04:	4611      	mov	r1, r2
 800db06:	f7ff ff6d 	bl	800d9e4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800db0a:	b100      	cbz	r0, 800db0e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800db0c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800db0e:	b002      	add	sp, #8
 800db10:	bd10      	pop	{r4, pc}

0800db12 <xQueueCreateCountingSemaphore>:
	{
 800db12:	b510      	push	{r4, lr}
 800db14:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800db16:	b940      	cbnz	r0, 800db2a <xQueueCreateCountingSemaphore+0x18>
 800db18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db1c:	f383 8811 	msr	BASEPRI, r3
 800db20:	f3bf 8f6f 	isb	sy
 800db24:	f3bf 8f4f 	dsb	sy
 800db28:	e7fe      	b.n	800db28 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800db2a:	4288      	cmp	r0, r1
 800db2c:	d208      	bcs.n	800db40 <xQueueCreateCountingSemaphore+0x2e>
 800db2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db32:	f383 8811 	msr	BASEPRI, r3
 800db36:	f3bf 8f6f 	isb	sy
 800db3a:	f3bf 8f4f 	dsb	sy
 800db3e:	e7fe      	b.n	800db3e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800db40:	2202      	movs	r2, #2
 800db42:	2100      	movs	r1, #0
 800db44:	f7ff ff9c 	bl	800da80 <xQueueGenericCreate>
		if( xHandle != NULL )
 800db48:	b100      	cbz	r0, 800db4c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800db4a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800db4c:	bd10      	pop	{r4, pc}

0800db4e <xQueueGenericSend>:
{
 800db4e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800db52:	460f      	mov	r7, r1
 800db54:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800db56:	4604      	mov	r4, r0
{
 800db58:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800db5a:	b940      	cbnz	r0, 800db6e <xQueueGenericSend+0x20>
 800db5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db60:	f383 8811 	msr	BASEPRI, r3
 800db64:	f3bf 8f6f 	isb	sy
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	e7fe      	b.n	800db6c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db6e:	b951      	cbnz	r1, 800db86 <xQueueGenericSend+0x38>
 800db70:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800db72:	b143      	cbz	r3, 800db86 <xQueueGenericSend+0x38>
 800db74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	e7fe      	b.n	800db84 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db86:	2e02      	cmp	r6, #2
 800db88:	d10b      	bne.n	800dba2 <xQueueGenericSend+0x54>
 800db8a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d008      	beq.n	800dba2 <xQueueGenericSend+0x54>
 800db90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	e7fe      	b.n	800dba0 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dba2:	f001 f80f 	bl	800ebc4 <xTaskGetSchedulerState>
 800dba6:	4605      	mov	r5, r0
 800dba8:	b320      	cbz	r0, 800dbf4 <xQueueGenericSend+0xa6>
 800dbaa:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800dbac:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800dbb0:	f7ff fd10 	bl	800d5d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dbb4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dbb6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d227      	bcs.n	800dc0c <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbbc:	4632      	mov	r2, r6
 800dbbe:	4639      	mov	r1, r7
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f7ff fe52 	bl	800d86a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dbc8:	b11b      	cbz	r3, 800dbd2 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dbce:	f000 ff63 	bl	800ea98 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800dbd2:	b148      	cbz	r0, 800dbe8 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800dbd4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dbd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbdc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800dbe8:	f7ff fd14 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800dbec:	2001      	movs	r0, #1
}
 800dbee:	b004      	add	sp, #16
 800dbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbf4:	9b01      	ldr	r3, [sp, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d0d8      	beq.n	800dbac <xQueueGenericSend+0x5e>
 800dbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	e7fe      	b.n	800dc0a <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc0c:	2e02      	cmp	r6, #2
 800dc0e:	d0d5      	beq.n	800dbbc <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc10:	9b01      	ldr	r3, [sp, #4]
 800dc12:	b91b      	cbnz	r3, 800dc1c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800dc14:	f7ff fcfe 	bl	800d614 <vPortExitCritical>
					return errQUEUE_FULL;
 800dc18:	2000      	movs	r0, #0
 800dc1a:	e7e8      	b.n	800dbee <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800dc1c:	b915      	cbnz	r5, 800dc24 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc1e:	a802      	add	r0, sp, #8
 800dc20:	f000 ff7c 	bl	800eb1c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800dc24:	f7ff fcf6 	bl	800d614 <vPortExitCritical>
		vTaskSuspendAll();
 800dc28:	f000 fd38 	bl	800e69c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc2c:	f7ff fcd2 	bl	800d5d4 <vPortEnterCritical>
 800dc30:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dc34:	2bff      	cmp	r3, #255	@ 0xff
 800dc36:	d101      	bne.n	800dc3c <xQueueGenericSend+0xee>
 800dc38:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800dc3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dc40:	2bff      	cmp	r3, #255	@ 0xff
 800dc42:	d101      	bne.n	800dc48 <xQueueGenericSend+0xfa>
 800dc44:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800dc48:	f7ff fce4 	bl	800d614 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dc4c:	a901      	add	r1, sp, #4
 800dc4e:	a802      	add	r0, sp, #8
 800dc50:	f000 ff70 	bl	800eb34 <xTaskCheckForTimeOut>
 800dc54:	bb38      	cbnz	r0, 800dca6 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc56:	f7ff fcbd 	bl	800d5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc5a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dc5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d10e      	bne.n	800dc80 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800dc62:	f7ff fcd7 	bl	800d614 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dc66:	9901      	ldr	r1, [sp, #4]
 800dc68:	f104 0010 	add.w	r0, r4, #16
 800dc6c:	f000 fedc 	bl	800ea28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc70:	4620      	mov	r0, r4
 800dc72:	f7ff fe42 	bl	800d8fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc76:	f000 fdb5 	bl	800e7e4 <xTaskResumeAll>
 800dc7a:	b148      	cbz	r0, 800dc90 <xQueueGenericSend+0x142>
 800dc7c:	2501      	movs	r5, #1
 800dc7e:	e797      	b.n	800dbb0 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800dc80:	f7ff fcc8 	bl	800d614 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800dc84:	4620      	mov	r0, r4
 800dc86:	f7ff fe38 	bl	800d8fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc8a:	f000 fdab 	bl	800e7e4 <xTaskResumeAll>
 800dc8e:	e7f5      	b.n	800dc7c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800dc90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	f3bf 8f6f 	isb	sy
 800dca4:	e7ea      	b.n	800dc7c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800dca6:	4620      	mov	r0, r4
 800dca8:	f7ff fe27 	bl	800d8fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dcac:	f000 fd9a 	bl	800e7e4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800dcb0:	e7b2      	b.n	800dc18 <xQueueGenericSend+0xca>

0800dcb2 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dcb2:	2200      	movs	r2, #0
	{
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dcb8:	4611      	mov	r1, r2
 800dcba:	9000      	str	r0, [sp, #0]
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	f7ff fe91 	bl	800d9e4 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	b138      	cbz	r0, 800dcd6 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcc6:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dcc8:	461a      	mov	r2, r3
 800dcca:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dccc:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dcce:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dcd0:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dcd2:	f7ff ff3c 	bl	800db4e <xQueueGenericSend>
	}
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	b002      	add	sp, #8
 800dcda:	bd10      	pop	{r4, pc}

0800dcdc <xQueueGiveMutexRecursive>:
	{
 800dcdc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800dcde:	4604      	mov	r4, r0
 800dce0:	b940      	cbnz	r0, 800dcf4 <xQueueGiveMutexRecursive+0x18>
 800dce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dce6:	f383 8811 	msr	BASEPRI, r3
 800dcea:	f3bf 8f6f 	isb	sy
 800dcee:	f3bf 8f4f 	dsb	sy
 800dcf2:	e7fe      	b.n	800dcf2 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dcf4:	6885      	ldr	r5, [r0, #8]
 800dcf6:	f000 ff5f 	bl	800ebb8 <xTaskGetCurrentTaskHandle>
 800dcfa:	4285      	cmp	r5, r0
 800dcfc:	d10b      	bne.n	800dd16 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dcfe:	68e3      	ldr	r3, [r4, #12]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dd04:	b10b      	cbz	r3, 800dd0a <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800dd06:	2001      	movs	r0, #1
	}
 800dd08:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f7ff ff1d 	bl	800db4e <xQueueGenericSend>
 800dd14:	e7f7      	b.n	800dd06 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800dd16:	2000      	movs	r0, #0
		return xReturn;
 800dd18:	e7f6      	b.n	800dd08 <xQueueGiveMutexRecursive+0x2c>

0800dd1a <xQueueCreateMutex>:
	{
 800dd1a:	b570      	push	{r4, r5, r6, lr}
 800dd1c:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800dd1e:	2050      	movs	r0, #80	@ 0x50
 800dd20:	f7ff fade 	bl	800d2e0 <pvPortMalloc>
 800dd24:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800dd26:	b198      	cbz	r0, 800dd50 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd28:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800dd2a:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dd2c:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dd2e:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800dd32:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dd36:	f7ff fe16 	bl	800d966 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd3a:	462b      	mov	r3, r5
 800dd3c:	462a      	mov	r2, r5
 800dd3e:	4629      	mov	r1, r5
 800dd40:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800dd42:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd46:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dd48:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dd4a:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dd4c:	f7ff feff 	bl	800db4e <xQueueGenericSend>
	}
 800dd50:	4620      	mov	r0, r4
 800dd52:	bd70      	pop	{r4, r5, r6, pc}

0800dd54 <xQueueGenericSendFromISR>:
{
 800dd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd58:	4689      	mov	r9, r1
 800dd5a:	4617      	mov	r7, r2
 800dd5c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800dd5e:	4604      	mov	r4, r0
 800dd60:	b940      	cbnz	r0, 800dd74 <xQueueGenericSendFromISR+0x20>
 800dd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	e7fe      	b.n	800dd72 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd74:	b951      	cbnz	r1, 800dd8c <xQueueGenericSendFromISR+0x38>
 800dd76:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800dd78:	b143      	cbz	r3, 800dd8c <xQueueGenericSendFromISR+0x38>
 800dd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	e7fe      	b.n	800dd8a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dd8c:	2e02      	cmp	r6, #2
 800dd8e:	d10b      	bne.n	800dda8 <xQueueGenericSendFromISR+0x54>
 800dd90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d008      	beq.n	800dda8 <xQueueGenericSendFromISR+0x54>
 800dd96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	e7fe      	b.n	800dda6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dda8:	f7ff fd26 	bl	800d7f8 <vPortValidateInterruptPriority>
	__asm volatile
 800ddac:	f3ef 8811 	mrs	r8, BASEPRI
 800ddb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ddc0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ddc2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d301      	bcc.n	800ddcc <xQueueGenericSendFromISR+0x78>
 800ddc8:	2e02      	cmp	r6, #2
 800ddca:	d11e      	bne.n	800de0a <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ddcc:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800ddd6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddd8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ddda:	f7ff fd46 	bl	800d86a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ddde:	1c6b      	adds	r3, r5, #1
 800dde0:	d10e      	bne.n	800de00 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dde2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dde4:	b13b      	cbz	r3, 800ddf6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dde6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ddea:	f000 fe55 	bl	800ea98 <xTaskRemoveFromEventList>
 800ddee:	b110      	cbz	r0, 800ddf6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800ddf0:	b10f      	cbz	r7, 800ddf6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800ddf6:	2001      	movs	r0, #1
	__asm volatile
 800ddf8:	f388 8811 	msr	BASEPRI, r8
}
 800ddfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de00:	3501      	adds	r5, #1
 800de02:	b26d      	sxtb	r5, r5
 800de04:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800de08:	e7f5      	b.n	800ddf6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800de0a:	2000      	movs	r0, #0
 800de0c:	e7f4      	b.n	800ddf8 <xQueueGenericSendFromISR+0xa4>

0800de0e <xQueueGiveFromISR>:
{
 800de0e:	b570      	push	{r4, r5, r6, lr}
 800de10:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800de12:	4604      	mov	r4, r0
 800de14:	b940      	cbnz	r0, 800de28 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800de16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	e7fe      	b.n	800de26 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800de28:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800de2a:	b143      	cbz	r3, 800de3e <xQueueGiveFromISR+0x30>
 800de2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de30:	f383 8811 	msr	BASEPRI, r3
 800de34:	f3bf 8f6f 	isb	sy
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	e7fe      	b.n	800de3c <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800de3e:	6803      	ldr	r3, [r0, #0]
 800de40:	b953      	cbnz	r3, 800de58 <xQueueGiveFromISR+0x4a>
 800de42:	6883      	ldr	r3, [r0, #8]
 800de44:	b143      	cbz	r3, 800de58 <xQueueGiveFromISR+0x4a>
 800de46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	e7fe      	b.n	800de56 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de58:	f7ff fcce 	bl	800d7f8 <vPortValidateInterruptPriority>
	__asm volatile
 800de5c:	f3ef 8611 	mrs	r6, BASEPRI
 800de60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de70:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de74:	4293      	cmp	r3, r2
 800de76:	d919      	bls.n	800deac <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800de78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de7c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800de7e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800de80:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de82:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800de84:	d10d      	bne.n	800dea2 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800de88:	b13b      	cbz	r3, 800de9a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de8a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800de8e:	f000 fe03 	bl	800ea98 <xTaskRemoveFromEventList>
 800de92:	b110      	cbz	r0, 800de9a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800de94:	b10d      	cbz	r5, 800de9a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de96:	2301      	movs	r3, #1
 800de98:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800de9a:	2001      	movs	r0, #1
	__asm volatile
 800de9c:	f386 8811 	msr	BASEPRI, r6
}
 800dea0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dea2:	3301      	adds	r3, #1
 800dea4:	b25b      	sxtb	r3, r3
 800dea6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800deaa:	e7f6      	b.n	800de9a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800deac:	2000      	movs	r0, #0
 800deae:	e7f5      	b.n	800de9c <xQueueGiveFromISR+0x8e>

0800deb0 <xQueueReceive>:
{
 800deb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800deb4:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800deb6:	4604      	mov	r4, r0
{
 800deb8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800deba:	b940      	cbnz	r0, 800dece <xQueueReceive+0x1e>
	__asm volatile
 800debc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	e7fe      	b.n	800decc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dece:	b951      	cbnz	r1, 800dee6 <xQueueReceive+0x36>
 800ded0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ded2:	b143      	cbz	r3, 800dee6 <xQueueReceive+0x36>
 800ded4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	e7fe      	b.n	800dee4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dee6:	f000 fe6d 	bl	800ebc4 <xTaskGetSchedulerState>
 800deea:	4605      	mov	r5, r0
 800deec:	b318      	cbz	r0, 800df36 <xQueueReceive+0x86>
 800deee:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800def0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800def4:	f7ff fb6e 	bl	800d5d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800def8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800defa:	b347      	cbz	r7, 800df4e <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800defc:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800defe:	4631      	mov	r1, r6
 800df00:	4620      	mov	r0, r4
 800df02:	f7ff fce5 	bl	800d8d0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df06:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	b173      	cbz	r3, 800df2a <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df0c:	f104 0010 	add.w	r0, r4, #16
 800df10:	f000 fdc2 	bl	800ea98 <xTaskRemoveFromEventList>
 800df14:	b148      	cbz	r0, 800df2a <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800df16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800df1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800df22:	f3bf 8f4f 	dsb	sy
 800df26:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800df2a:	f7ff fb73 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800df2e:	2001      	movs	r0, #1
}
 800df30:	b004      	add	sp, #16
 800df32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df36:	9b01      	ldr	r3, [sp, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0d9      	beq.n	800def0 <xQueueReceive+0x40>
 800df3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	e7fe      	b.n	800df4c <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800df4e:	9b01      	ldr	r3, [sp, #4]
 800df50:	b91b      	cbnz	r3, 800df5a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800df52:	f7ff fb5f 	bl	800d614 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800df56:	2000      	movs	r0, #0
 800df58:	e7ea      	b.n	800df30 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800df5a:	b915      	cbnz	r5, 800df62 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df5c:	a802      	add	r0, sp, #8
 800df5e:	f000 fddd 	bl	800eb1c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800df62:	f7ff fb57 	bl	800d614 <vPortExitCritical>
		vTaskSuspendAll();
 800df66:	f000 fb99 	bl	800e69c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df6a:	f7ff fb33 	bl	800d5d4 <vPortEnterCritical>
 800df6e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800df72:	2bff      	cmp	r3, #255	@ 0xff
 800df74:	d101      	bne.n	800df7a <xQueueReceive+0xca>
 800df76:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800df7a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800df7e:	2bff      	cmp	r3, #255	@ 0xff
 800df80:	d101      	bne.n	800df86 <xQueueReceive+0xd6>
 800df82:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800df86:	f7ff fb45 	bl	800d614 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df8a:	a901      	add	r1, sp, #4
 800df8c:	a802      	add	r0, sp, #8
 800df8e:	f000 fdd1 	bl	800eb34 <xTaskCheckForTimeOut>
 800df92:	bb00      	cbnz	r0, 800dfd6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df94:	4620      	mov	r0, r4
 800df96:	f7ff fc5d 	bl	800d854 <prvIsQueueEmpty>
 800df9a:	b1b0      	cbz	r0, 800dfca <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df9c:	9901      	ldr	r1, [sp, #4]
 800df9e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dfa2:	f000 fd41 	bl	800ea28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7ff fca7 	bl	800d8fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dfac:	f000 fc1a 	bl	800e7e4 <xTaskResumeAll>
 800dfb0:	b948      	cbnz	r0, 800dfc6 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800dfb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dfb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	2501      	movs	r5, #1
 800dfc8:	e794      	b.n	800def4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff fc95 	bl	800d8fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfd0:	f000 fc08 	bl	800e7e4 <xTaskResumeAll>
 800dfd4:	e7f7      	b.n	800dfc6 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7ff fc8f 	bl	800d8fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfdc:	f000 fc02 	bl	800e7e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7ff fc37 	bl	800d854 <prvIsQueueEmpty>
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d0ed      	beq.n	800dfc6 <xQueueReceive+0x116>
 800dfea:	e7b4      	b.n	800df56 <xQueueReceive+0xa6>

0800dfec <xQueueSemaphoreTake>:
{
 800dfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfee:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800dff0:	4604      	mov	r4, r0
{
 800dff2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800dff4:	b940      	cbnz	r0, 800e008 <xQueueSemaphoreTake+0x1c>
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	e7fe      	b.n	800e006 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e008:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800e00a:	b145      	cbz	r5, 800e01e <xQueueSemaphoreTake+0x32>
 800e00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e010:	f383 8811 	msr	BASEPRI, r3
 800e014:	f3bf 8f6f 	isb	sy
 800e018:	f3bf 8f4f 	dsb	sy
 800e01c:	e7fe      	b.n	800e01c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e01e:	f000 fdd1 	bl	800ebc4 <xTaskGetSchedulerState>
 800e022:	4606      	mov	r6, r0
 800e024:	b320      	cbz	r0, 800e070 <xQueueSemaphoreTake+0x84>
 800e026:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800e028:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800e02a:	f7ff fad3 	bl	800d5d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e02e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e030:	b353      	cbz	r3, 800e088 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e032:	3b01      	subs	r3, #1
 800e034:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	b913      	cbnz	r3, 800e040 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e03a:	f000 fea1 	bl	800ed80 <pvTaskIncrementMutexHeldCount>
 800e03e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e040:	6923      	ldr	r3, [r4, #16]
 800e042:	b173      	cbz	r3, 800e062 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e044:	f104 0010 	add.w	r0, r4, #16
 800e048:	f000 fd26 	bl	800ea98 <xTaskRemoveFromEventList>
 800e04c:	b148      	cbz	r0, 800e062 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800e04e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e056:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e062:	f7ff fad7 	bl	800d614 <vPortExitCritical>
				return pdPASS;
 800e066:	2001      	movs	r0, #1
}
 800e068:	b005      	add	sp, #20
 800e06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06c:	4635      	mov	r5, r6
 800e06e:	e7db      	b.n	800e028 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e070:	9b01      	ldr	r3, [sp, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d0fa      	beq.n	800e06c <xQueueSemaphoreTake+0x80>
 800e076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	e7fe      	b.n	800e086 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e088:	9b01      	ldr	r3, [sp, #4]
 800e08a:	b953      	cbnz	r3, 800e0a2 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e08c:	2d00      	cmp	r5, #0
 800e08e:	d066      	beq.n	800e15e <xQueueSemaphoreTake+0x172>
 800e090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	e7fe      	b.n	800e0a0 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800e0a2:	b916      	cbnz	r6, 800e0aa <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0a4:	a802      	add	r0, sp, #8
 800e0a6:	f000 fd39 	bl	800eb1c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e0aa:	f7ff fab3 	bl	800d614 <vPortExitCritical>
		vTaskSuspendAll();
 800e0ae:	f000 faf5 	bl	800e69c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e0b2:	f7ff fa8f 	bl	800d5d4 <vPortEnterCritical>
 800e0b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e0ba:	2bff      	cmp	r3, #255	@ 0xff
 800e0bc:	d101      	bne.n	800e0c2 <xQueueSemaphoreTake+0xd6>
 800e0be:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800e0c2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e0c6:	2bff      	cmp	r3, #255	@ 0xff
 800e0c8:	d101      	bne.n	800e0ce <xQueueSemaphoreTake+0xe2>
 800e0ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e0ce:	f7ff faa1 	bl	800d614 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e0d2:	a901      	add	r1, sp, #4
 800e0d4:	a802      	add	r0, sp, #8
 800e0d6:	f000 fd2d 	bl	800eb34 <xTaskCheckForTimeOut>
 800e0da:	bb50      	cbnz	r0, 800e132 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f7ff fbb9 	bl	800d854 <prvIsQueueEmpty>
 800e0e2:	b300      	cbz	r0, 800e126 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	b93b      	cbnz	r3, 800e0f8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800e0e8:	f7ff fa74 	bl	800d5d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e0ec:	68a0      	ldr	r0, [r4, #8]
 800e0ee:	f000 fd79 	bl	800ebe4 <xTaskPriorityInherit>
 800e0f2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800e0f4:	f7ff fa8e 	bl	800d614 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0f8:	9901      	ldr	r1, [sp, #4]
 800e0fa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e0fe:	f000 fc93 	bl	800ea28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e102:	4620      	mov	r0, r4
 800e104:	f7ff fbf9 	bl	800d8fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e108:	f000 fb6c 	bl	800e7e4 <xTaskResumeAll>
 800e10c:	b948      	cbnz	r0, 800e122 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800e10e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e116:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	2601      	movs	r6, #1
 800e124:	e781      	b.n	800e02a <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff fbe7 	bl	800d8fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e12c:	f000 fb5a 	bl	800e7e4 <xTaskResumeAll>
 800e130:	e7f7      	b.n	800e122 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800e132:	4620      	mov	r0, r4
 800e134:	f7ff fbe1 	bl	800d8fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e138:	f000 fb54 	bl	800e7e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e13c:	4620      	mov	r0, r4
 800e13e:	f7ff fb89 	bl	800d854 <prvIsQueueEmpty>
 800e142:	2800      	cmp	r0, #0
 800e144:	d0ed      	beq.n	800e122 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800e146:	b165      	cbz	r5, 800e162 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800e148:	f7ff fa44 	bl	800d5d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e14c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e14e:	b119      	cbz	r1, 800e158 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e150:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e152:	6819      	ldr	r1, [r3, #0]
 800e154:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e158:	68a0      	ldr	r0, [r4, #8]
 800e15a:	f000 fdc3 	bl	800ece4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800e15e:	f7ff fa59 	bl	800d614 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e162:	2000      	movs	r0, #0
 800e164:	e780      	b.n	800e068 <xQueueSemaphoreTake+0x7c>

0800e166 <xQueueTakeMutexRecursive>:
	{
 800e166:	b570      	push	{r4, r5, r6, lr}
 800e168:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800e16a:	4604      	mov	r4, r0
 800e16c:	b940      	cbnz	r0, 800e180 <xQueueTakeMutexRecursive+0x1a>
 800e16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	e7fe      	b.n	800e17e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e180:	6886      	ldr	r6, [r0, #8]
 800e182:	f000 fd19 	bl	800ebb8 <xTaskGetCurrentTaskHandle>
 800e186:	4286      	cmp	r6, r0
 800e188:	d104      	bne.n	800e194 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e18a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800e18c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e18e:	3301      	adds	r3, #1
 800e190:	60e3      	str	r3, [r4, #12]
	}
 800e192:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e194:	4629      	mov	r1, r5
 800e196:	4620      	mov	r0, r4
 800e198:	f7ff ff28 	bl	800dfec <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800e19c:	2800      	cmp	r0, #0
 800e19e:	d0f8      	beq.n	800e192 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e1a0:	68e3      	ldr	r3, [r4, #12]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	60e3      	str	r3, [r4, #12]
 800e1a6:	e7f4      	b.n	800e192 <xQueueTakeMutexRecursive+0x2c>

0800e1a8 <xQueueReceiveFromISR>:
{
 800e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	4689      	mov	r9, r1
 800e1ae:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	b940      	cbnz	r0, 800e1c6 <xQueueReceiveFromISR+0x1e>
 800e1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1c6:	b951      	cbnz	r1, 800e1de <xQueueReceiveFromISR+0x36>
 800e1c8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e1ca:	b143      	cbz	r3, 800e1de <xQueueReceiveFromISR+0x36>
 800e1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d0:	f383 8811 	msr	BASEPRI, r3
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	e7fe      	b.n	800e1dc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1de:	f7ff fb0b 	bl	800d7f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e1e2:	f3ef 8711 	mrs	r7, BASEPRI
 800e1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1f6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1f8:	b30d      	cbz	r5, 800e23e <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1fa:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1fe:	4649      	mov	r1, r9
 800e200:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e202:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800e204:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e206:	f7ff fb63 	bl	800d8d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e20a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800e20c:	1c73      	adds	r3, r6, #1
 800e20e:	d111      	bne.n	800e234 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e210:	6923      	ldr	r3, [r4, #16]
 800e212:	b153      	cbz	r3, 800e22a <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e214:	f104 0010 	add.w	r0, r4, #16
 800e218:	f000 fc3e 	bl	800ea98 <xTaskRemoveFromEventList>
 800e21c:	b128      	cbz	r0, 800e22a <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800e21e:	f1b8 0f00 	cmp.w	r8, #0
 800e222:	d002      	beq.n	800e22a <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e224:	2301      	movs	r3, #1
 800e226:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800e22a:	2001      	movs	r0, #1
	__asm volatile
 800e22c:	f387 8811 	msr	BASEPRI, r7
}
 800e230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e234:	3601      	adds	r6, #1
 800e236:	b276      	sxtb	r6, r6
 800e238:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800e23c:	e7f5      	b.n	800e22a <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800e23e:	4628      	mov	r0, r5
 800e240:	e7f4      	b.n	800e22c <xQueueReceiveFromISR+0x84>
	...

0800e244 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e244:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e246:	4a07      	ldr	r2, [pc, #28]	@ (800e264 <vQueueAddToRegistry+0x20>)
	{
 800e248:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e24a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e24e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800e252:	b91d      	cbnz	r5, 800e25c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e254:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e258:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e25a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e25c:	3301      	adds	r3, #1
 800e25e:	2b08      	cmp	r3, #8
 800e260:	d1f3      	bne.n	800e24a <vQueueAddToRegistry+0x6>
 800e262:	e7fa      	b.n	800e25a <vQueueAddToRegistry+0x16>
 800e264:	240252c0 	.word	0x240252c0

0800e268 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e268:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e26a:	4a09      	ldr	r2, [pc, #36]	@ (800e290 <vQueueUnregisterQueue+0x28>)
	{
 800e26c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e26e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e272:	00dc      	lsls	r4, r3, #3
 800e274:	4281      	cmp	r1, r0
 800e276:	d106      	bne.n	800e286 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e278:	4a06      	ldr	r2, [pc, #24]	@ (800e294 <vQueueUnregisterQueue+0x2c>)
 800e27a:	2100      	movs	r1, #0
 800e27c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e280:	4422      	add	r2, r4
 800e282:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e284:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e286:	3301      	adds	r3, #1
 800e288:	2b08      	cmp	r3, #8
 800e28a:	d1f0      	bne.n	800e26e <vQueueUnregisterQueue+0x6>
 800e28c:	e7fa      	b.n	800e284 <vQueueUnregisterQueue+0x1c>
 800e28e:	bf00      	nop
 800e290:	240252c4 	.word	0x240252c4
 800e294:	240252c0 	.word	0x240252c0

0800e298 <vQueueDelete>:
{
 800e298:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800e29a:	b940      	cbnz	r0, 800e2ae <vQueueDelete+0x16>
	__asm volatile
 800e29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a0:	f383 8811 	msr	BASEPRI, r3
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	f3bf 8f4f 	dsb	sy
 800e2ac:	e7fe      	b.n	800e2ac <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800e2ae:	f7ff ffdb 	bl	800e268 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e2b2:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800e2b6:	b91b      	cbnz	r3, 800e2c0 <vQueueDelete+0x28>
}
 800e2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800e2bc:	f7ff b8a8 	b.w	800d410 <vPortFree>
}
 800e2c0:	bd10      	pop	{r4, pc}

0800e2c2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2c2:	b570      	push	{r4, r5, r6, lr}
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	460d      	mov	r5, r1
 800e2c8:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e2ca:	f7ff f983 	bl	800d5d4 <vPortEnterCritical>
 800e2ce:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e2d2:	2bff      	cmp	r3, #255	@ 0xff
 800e2d4:	d102      	bne.n	800e2dc <vQueueWaitForMessageRestricted+0x1a>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e2dc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e2e0:	2bff      	cmp	r3, #255	@ 0xff
 800e2e2:	d102      	bne.n	800e2ea <vQueueWaitForMessageRestricted+0x28>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e2ea:	f7ff f993 	bl	800d614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e2ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e2f0:	b92b      	cbnz	r3, 800e2fe <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e2fa:	f000 fbaf 	bl	800ea5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e2fe:	4620      	mov	r0, r4
	}
 800e300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800e304:	f7ff baf9 	b.w	800d8fa <prvUnlockQueue>

0800e308 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e30e:	f7ff f961 	bl	800d5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e312:	4b2f      	ldr	r3, [pc, #188]	@ (800e3d0 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800e314:	4e2f      	ldr	r6, [pc, #188]	@ (800e3d4 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	4f2f      	ldr	r7, [pc, #188]	@ (800e3d8 <prvAddNewTaskToReadyList+0xd0>)
 800e31a:	3201      	adds	r2, #1
 800e31c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800e31e:	6835      	ldr	r5, [r6, #0]
 800e320:	2d00      	cmp	r5, #0
 800e322:	d14a      	bne.n	800e3ba <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e324:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d11f      	bne.n	800e36c <prvAddNewTaskToReadyList+0x64>
 800e32c:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e32e:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e330:	4640      	mov	r0, r8
 800e332:	f7ff f8ab 	bl	800d48c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e336:	f108 0814 	add.w	r8, r8, #20
 800e33a:	2d38      	cmp	r5, #56	@ 0x38
 800e33c:	d1f7      	bne.n	800e32e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e33e:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800e400 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800e342:	4d26      	ldr	r5, [pc, #152]	@ (800e3dc <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800e344:	4640      	mov	r0, r8
 800e346:	f7ff f8a1 	bl	800d48c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e34a:	4628      	mov	r0, r5
 800e34c:	f7ff f89e 	bl	800d48c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e350:	4823      	ldr	r0, [pc, #140]	@ (800e3e0 <prvAddNewTaskToReadyList+0xd8>)
 800e352:	f7ff f89b 	bl	800d48c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e356:	4823      	ldr	r0, [pc, #140]	@ (800e3e4 <prvAddNewTaskToReadyList+0xdc>)
 800e358:	f7ff f898 	bl	800d48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e35c:	4822      	ldr	r0, [pc, #136]	@ (800e3e8 <prvAddNewTaskToReadyList+0xe0>)
 800e35e:	f7ff f895 	bl	800d48c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e362:	4b22      	ldr	r3, [pc, #136]	@ (800e3ec <prvAddNewTaskToReadyList+0xe4>)
 800e364:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e368:	4b21      	ldr	r3, [pc, #132]	@ (800e3f0 <prvAddNewTaskToReadyList+0xe8>)
 800e36a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800e36c:	4a21      	ldr	r2, [pc, #132]	@ (800e3f4 <prvAddNewTaskToReadyList+0xec>)
 800e36e:	6813      	ldr	r3, [r2, #0]
 800e370:	3301      	adds	r3, #1
 800e372:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800e374:	4a20      	ldr	r2, [pc, #128]	@ (800e3f8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e376:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800e378:	6811      	ldr	r1, [r2, #0]
 800e37a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e37c:	428b      	cmp	r3, r1
 800e37e:	d900      	bls.n	800e382 <prvAddNewTaskToReadyList+0x7a>
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	2014      	movs	r0, #20
 800e384:	1d21      	adds	r1, r4, #4
 800e386:	fb00 7003 	mla	r0, r0, r3, r7
 800e38a:	f7ff f88d 	bl	800d4a8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800e38e:	f7ff f941 	bl	800d614 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800e392:	4b1a      	ldr	r3, [pc, #104]	@ (800e3fc <prvAddNewTaskToReadyList+0xf4>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	b173      	cbz	r3, 800e3b6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e398:	6833      	ldr	r3, [r6, #0]
 800e39a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e39c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d209      	bcs.n	800e3b6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800e3a2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	f3bf 8f6f 	isb	sy
}
 800e3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800e3ba:	4b10      	ldr	r3, [pc, #64]	@ (800e3fc <prvAddNewTaskToReadyList+0xf4>)
 800e3bc:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800e3c0:	2a00      	cmp	r2, #0
 800e3c2:	d1d3      	bne.n	800e36c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3c4:	6832      	ldr	r2, [r6, #0]
 800e3c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d8cf      	bhi.n	800e36c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800e3cc:	6034      	str	r4, [r6, #0]
 800e3ce:	e7cd      	b.n	800e36c <prvAddNewTaskToReadyList+0x64>
 800e3d0:	24025324 	.word	0x24025324
 800e3d4:	240257f8 	.word	0x240257f8
 800e3d8:	24025398 	.word	0x24025398
 800e3dc:	24025370 	.word	0x24025370
 800e3e0:	24025354 	.word	0x24025354
 800e3e4:	24025340 	.word	0x24025340
 800e3e8:	24025328 	.word	0x24025328
 800e3ec:	2402536c 	.word	0x2402536c
 800e3f0:	24025368 	.word	0x24025368
 800e3f4:	24025308 	.word	0x24025308
 800e3f8:	2402531c 	.word	0x2402531c
 800e3fc:	24025318 	.word	0x24025318
 800e400:	24025384 	.word	0x24025384

0800e404 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e406:	4b15      	ldr	r3, [pc, #84]	@ (800e45c <prvAddCurrentTaskToDelayedList+0x58>)
{
 800e408:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e40a:	4d15      	ldr	r5, [pc, #84]	@ (800e460 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800e40c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800e40e:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e410:	6828      	ldr	r0, [r5, #0]
 800e412:	3004      	adds	r0, #4
 800e414:	f7ff f86a 	bl	800d4ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e418:	1c73      	adds	r3, r6, #1
 800e41a:	d107      	bne.n	800e42c <prvAddCurrentTaskToDelayedList+0x28>
 800e41c:	b137      	cbz	r7, 800e42c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e41e:	6829      	ldr	r1, [r5, #0]
 800e420:	4810      	ldr	r0, [pc, #64]	@ (800e464 <prvAddCurrentTaskToDelayedList+0x60>)
 800e422:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e428:	f7ff b83e 	b.w	800d4a8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e42c:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e42e:	682b      	ldr	r3, [r5, #0]
 800e430:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e432:	d307      	bcc.n	800e444 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e434:	4b0c      	ldr	r3, [pc, #48]	@ (800e468 <prvAddCurrentTaskToDelayedList+0x64>)
 800e436:	6818      	ldr	r0, [r3, #0]
 800e438:	6829      	ldr	r1, [r5, #0]
}
 800e43a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e43e:	3104      	adds	r1, #4
 800e440:	f7ff b83d 	b.w	800d4be <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e444:	4b09      	ldr	r3, [pc, #36]	@ (800e46c <prvAddCurrentTaskToDelayedList+0x68>)
 800e446:	6818      	ldr	r0, [r3, #0]
 800e448:	6829      	ldr	r1, [r5, #0]
 800e44a:	3104      	adds	r1, #4
 800e44c:	f7ff f837 	bl	800d4be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e450:	4b07      	ldr	r3, [pc, #28]	@ (800e470 <prvAddCurrentTaskToDelayedList+0x6c>)
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	42a2      	cmp	r2, r4
 800e456:	d900      	bls.n	800e45a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800e458:	601c      	str	r4, [r3, #0]
}
 800e45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e45c:	24025320 	.word	0x24025320
 800e460:	240257f8 	.word	0x240257f8
 800e464:	24025328 	.word	0x24025328
 800e468:	24025368 	.word	0x24025368
 800e46c:	2402536c 	.word	0x2402536c
 800e470:	24025304 	.word	0x24025304

0800e474 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e474:	4a06      	ldr	r2, [pc, #24]	@ (800e490 <prvResetNextTaskUnblockTime+0x1c>)
 800e476:	6813      	ldr	r3, [r2, #0]
 800e478:	6819      	ldr	r1, [r3, #0]
 800e47a:	4b06      	ldr	r3, [pc, #24]	@ (800e494 <prvResetNextTaskUnblockTime+0x20>)
 800e47c:	b919      	cbnz	r1, 800e486 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800e47e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e482:	601a      	str	r2, [r3, #0]
}
 800e484:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e486:	6812      	ldr	r2, [r2, #0]
 800e488:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e48a:	68d2      	ldr	r2, [r2, #12]
 800e48c:	6852      	ldr	r2, [r2, #4]
 800e48e:	e7f8      	b.n	800e482 <prvResetNextTaskUnblockTime+0xe>
 800e490:	2402536c 	.word	0x2402536c
 800e494:	24025304 	.word	0x24025304

0800e498 <prvDeleteTCB>:
	{
 800e498:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e49a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800e49e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4a0:	b93b      	cbnz	r3, 800e4b2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800e4a2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800e4a4:	f7fe ffb4 	bl	800d410 <vPortFree>
				vPortFree( pxTCB );
 800e4a8:	4620      	mov	r0, r4
	}
 800e4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800e4ae:	f7fe bfaf 	b.w	800d410 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d0f9      	beq.n	800e4aa <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d008      	beq.n	800e4cc <prvDeleteTCB+0x34>
 800e4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	e7fe      	b.n	800e4ca <prvDeleteTCB+0x32>
	}
 800e4cc:	bd10      	pop	{r4, pc}
	...

0800e4d0 <prvIdleTask>:
{
 800e4d0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4d2:	4c14      	ldr	r4, [pc, #80]	@ (800e524 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4d4:	4f14      	ldr	r7, [pc, #80]	@ (800e528 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800e4d6:	4d15      	ldr	r5, [pc, #84]	@ (800e52c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	b983      	cbnz	r3, 800e4fe <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e4dc:	4b14      	ldr	r3, [pc, #80]	@ (800e530 <prvIdleTask+0x60>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d909      	bls.n	800e4f8 <prvIdleTask+0x28>
				taskYIELD();
 800e4e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e4f0:	f3bf 8f4f 	dsb	sy
 800e4f4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800e4f8:	f7f2 fa9c 	bl	8000a34 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e4fc:	e7eb      	b.n	800e4d6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800e4fe:	f7ff f869 	bl	800d5d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e506:	1d30      	adds	r0, r6, #4
 800e508:	f7fe fff0 	bl	800d4ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	3b01      	subs	r3, #1
 800e510:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e512:	6823      	ldr	r3, [r4, #0]
 800e514:	3b01      	subs	r3, #1
 800e516:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800e518:	f7ff f87c 	bl	800d614 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800e51c:	4630      	mov	r0, r6
 800e51e:	f7ff ffbb 	bl	800e498 <prvDeleteTCB>
 800e522:	e7d9      	b.n	800e4d8 <prvIdleTask+0x8>
 800e524:	2402533c 	.word	0x2402533c
 800e528:	24025340 	.word	0x24025340
 800e52c:	24025324 	.word	0x24025324
 800e530:	24025398 	.word	0x24025398

0800e534 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e538:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e53a:	4607      	mov	r7, r0
 800e53c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e53e:	21a5      	movs	r1, #165	@ 0xa5
 800e540:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e542:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e544:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800e546:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e54a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e54c:	f016 fcae 	bl	8024eac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e550:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e552:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e554:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800e558:	b3b5      	cbz	r5, 800e5c8 <prvInitialiseNewTask.constprop.0+0x94>
 800e55a:	1e6b      	subs	r3, r5, #1
 800e55c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800e560:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e562:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e566:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800e56a:	b109      	cbz	r1, 800e570 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e56c:	42ab      	cmp	r3, r5
 800e56e:	d1f8      	bne.n	800e562 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e570:	2300      	movs	r3, #0
 800e572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e576:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800e578:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e57c:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e57e:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800e580:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e584:	bf28      	it	cs
 800e586:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e588:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e58a:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e58c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e590:	f7fe ff87 	bl	800d4a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e594:	f104 0018 	add.w	r0, r4, #24
 800e598:	f7fe ff83 	bl	800d4a2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800e59c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5a0:	4642      	mov	r2, r8
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e5a6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e5aa:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800e5ac:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e5b0:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5b4:	f7fe ffe8 	bl	800d588 <pxPortInitialiseStack>
 800e5b8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e5ba:	f1b9 0f00 	cmp.w	r9, #0
 800e5be:	d001      	beq.n	800e5c4 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e5c0:	f8c9 4000 	str.w	r4, [r9]
}
 800e5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5c8:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800e5cc:	e7d3      	b.n	800e576 <prvInitialiseNewTask.constprop.0+0x42>

0800e5ce <xTaskCreateStatic>:
	{
 800e5ce:	b570      	push	{r4, r5, r6, lr}
 800e5d0:	b086      	sub	sp, #24
 800e5d2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800e5d6:	b945      	cbnz	r5, 800e5ea <xTaskCreateStatic+0x1c>
 800e5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	e7fe      	b.n	800e5e8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800e5ea:	b944      	cbnz	r4, 800e5fe <xTaskCreateStatic+0x30>
 800e5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	e7fe      	b.n	800e5fc <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800e5fe:	2660      	movs	r6, #96	@ 0x60
 800e600:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e602:	9e05      	ldr	r6, [sp, #20]
 800e604:	2e60      	cmp	r6, #96	@ 0x60
 800e606:	d008      	beq.n	800e61a <xTaskCreateStatic+0x4c>
 800e608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f3bf 8f6f 	isb	sy
 800e614:	f3bf 8f4f 	dsb	sy
 800e618:	e7fe      	b.n	800e618 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e61a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e61c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e61e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e620:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e624:	ad04      	add	r5, sp, #16
 800e626:	9402      	str	r4, [sp, #8]
 800e628:	9501      	str	r5, [sp, #4]
 800e62a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e62c:	9500      	str	r5, [sp, #0]
 800e62e:	f7ff ff81 	bl	800e534 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e632:	4620      	mov	r0, r4
 800e634:	f7ff fe68 	bl	800e308 <prvAddNewTaskToReadyList>
	}
 800e638:	9804      	ldr	r0, [sp, #16]
 800e63a:	b006      	add	sp, #24
 800e63c:	bd70      	pop	{r4, r5, r6, pc}

0800e63e <xTaskCreate>:
	{
 800e63e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e642:	4607      	mov	r7, r0
 800e644:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e646:	0090      	lsls	r0, r2, #2
	{
 800e648:	4688      	mov	r8, r1
 800e64a:	4616      	mov	r6, r2
 800e64c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e64e:	f7fe fe47 	bl	800d2e0 <pvPortMalloc>
			if( pxStack != NULL )
 800e652:	4605      	mov	r5, r0
 800e654:	b920      	cbnz	r0, 800e660 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e656:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e65a:	b005      	add	sp, #20
 800e65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e660:	2060      	movs	r0, #96	@ 0x60
 800e662:	f7fe fe3d 	bl	800d2e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e666:	4604      	mov	r4, r0
 800e668:	b198      	cbz	r0, 800e692 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e66a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e66c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e66e:	4632      	mov	r2, r6
 800e670:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e672:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e678:	9002      	str	r0, [sp, #8]
 800e67a:	4638      	mov	r0, r7
 800e67c:	9301      	str	r3, [sp, #4]
 800e67e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	464b      	mov	r3, r9
 800e684:	f7ff ff56 	bl	800e534 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e688:	4620      	mov	r0, r4
 800e68a:	f7ff fe3d 	bl	800e308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e68e:	2001      	movs	r0, #1
 800e690:	e7e3      	b.n	800e65a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e692:	4628      	mov	r0, r5
 800e694:	f7fe febc 	bl	800d410 <vPortFree>
		if( pxNewTCB != NULL )
 800e698:	e7dd      	b.n	800e656 <xTaskCreate+0x18>
	...

0800e69c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e69c:	4a02      	ldr	r2, [pc, #8]	@ (800e6a8 <vTaskSuspendAll+0xc>)
 800e69e:	6813      	ldr	r3, [r2, #0]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	6013      	str	r3, [r2, #0]
}
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	24025300 	.word	0x24025300

0800e6ac <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e6ac:	4b01      	ldr	r3, [pc, #4]	@ (800e6b4 <xTaskGetTickCount+0x8>)
 800e6ae:	6818      	ldr	r0, [r3, #0]
}
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	24025320 	.word	0x24025320

0800e6b8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6b8:	4b3f      	ldr	r3, [pc, #252]	@ (800e7b8 <xTaskIncrementTick+0x100>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
{
 800e6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d172      	bne.n	800e7aa <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6c4:	4b3d      	ldr	r3, [pc, #244]	@ (800e7bc <xTaskIncrementTick+0x104>)
 800e6c6:	681c      	ldr	r4, [r3, #0]
 800e6c8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e6ca:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6cc:	b9bc      	cbnz	r4, 800e6fe <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800e6ce:	4b3c      	ldr	r3, [pc, #240]	@ (800e7c0 <xTaskIncrementTick+0x108>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	6812      	ldr	r2, [r2, #0]
 800e6d4:	b142      	cbz	r2, 800e6e8 <xTaskIncrementTick+0x30>
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	e7fe      	b.n	800e6e6 <xTaskIncrementTick+0x2e>
 800e6e8:	4a36      	ldr	r2, [pc, #216]	@ (800e7c4 <xTaskIncrementTick+0x10c>)
 800e6ea:	6819      	ldr	r1, [r3, #0]
 800e6ec:	6810      	ldr	r0, [r2, #0]
 800e6ee:	6018      	str	r0, [r3, #0]
 800e6f0:	6011      	str	r1, [r2, #0]
 800e6f2:	4a35      	ldr	r2, [pc, #212]	@ (800e7c8 <xTaskIncrementTick+0x110>)
 800e6f4:	6813      	ldr	r3, [r2, #0]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	6013      	str	r3, [r2, #0]
 800e6fa:	f7ff febb 	bl	800e474 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e6fe:	4d33      	ldr	r5, [pc, #204]	@ (800e7cc <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800e700:	f04f 0b00 	mov.w	fp, #0
 800e704:	4e32      	ldr	r6, [pc, #200]	@ (800e7d0 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e706:	682b      	ldr	r3, [r5, #0]
 800e708:	4f32      	ldr	r7, [pc, #200]	@ (800e7d4 <xTaskIncrementTick+0x11c>)
 800e70a:	429c      	cmp	r4, r3
 800e70c:	d212      	bcs.n	800e734 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	2114      	movs	r1, #20
 800e712:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e714:	434a      	muls	r2, r1
 800e716:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e718:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800e71a:	4a2f      	ldr	r2, [pc, #188]	@ (800e7d8 <xTaskIncrementTick+0x120>)
 800e71c:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800e71e:	bf28      	it	cs
 800e720:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800e724:	2a00      	cmp	r2, #0
 800e726:	bf18      	it	ne
 800e728:	f04f 0b01 	movne.w	fp, #1
}
 800e72c:	4658      	mov	r0, fp
 800e72e:	b003      	add	sp, #12
 800e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e734:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e7c0 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800e738:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e7e0 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e73c:	f8d9 2000 	ldr.w	r2, [r9]
 800e740:	6812      	ldr	r2, [r2, #0]
 800e742:	b91a      	cbnz	r2, 800e74c <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e744:	f04f 32ff 	mov.w	r2, #4294967295
 800e748:	602a      	str	r2, [r5, #0]
					break;
 800e74a:	e7e0      	b.n	800e70e <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e74c:	f8d9 2000 	ldr.w	r2, [r9]
 800e750:	68d2      	ldr	r2, [r2, #12]
 800e752:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e756:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e75a:	428c      	cmp	r4, r1
 800e75c:	d201      	bcs.n	800e762 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e75e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e760:	e7d5      	b.n	800e70e <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e762:	f108 0304 	add.w	r3, r8, #4
 800e766:	4618      	mov	r0, r3
 800e768:	9301      	str	r3, [sp, #4]
 800e76a:	f7fe febf 	bl	800d4ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e76e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e772:	b119      	cbz	r1, 800e77c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e774:	f108 0018 	add.w	r0, r8, #24
 800e778:	f7fe feb8 	bl	800d4ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e77c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e780:	f8da 1000 	ldr.w	r1, [sl]
 800e784:	4288      	cmp	r0, r1
 800e786:	d901      	bls.n	800e78c <xTaskIncrementTick+0xd4>
 800e788:	f8ca 0000 	str.w	r0, [sl]
 800e78c:	2314      	movs	r3, #20
 800e78e:	9901      	ldr	r1, [sp, #4]
 800e790:	fb03 6000 	mla	r0, r3, r0, r6
 800e794:	f7fe fe88 	bl	800d4a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e798:	6838      	ldr	r0, [r7, #0]
 800e79a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e79e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e7a0:	4291      	cmp	r1, r2
 800e7a2:	bf28      	it	cs
 800e7a4:	f04f 0b01 	movcs.w	fp, #1
 800e7a8:	e7c8      	b.n	800e73c <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e7aa:	4a0c      	ldr	r2, [pc, #48]	@ (800e7dc <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e7ac:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e7b0:	6813      	ldr	r3, [r2, #0]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	e7b9      	b.n	800e72c <xTaskIncrementTick+0x74>
 800e7b8:	24025300 	.word	0x24025300
 800e7bc:	24025320 	.word	0x24025320
 800e7c0:	2402536c 	.word	0x2402536c
 800e7c4:	24025368 	.word	0x24025368
 800e7c8:	2402530c 	.word	0x2402530c
 800e7cc:	24025304 	.word	0x24025304
 800e7d0:	24025398 	.word	0x24025398
 800e7d4:	240257f8 	.word	0x240257f8
 800e7d8:	24025310 	.word	0x24025310
 800e7dc:	24025314 	.word	0x24025314
 800e7e0:	2402531c 	.word	0x2402531c

0800e7e4 <xTaskResumeAll>:
{
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e7e8:	4c30      	ldr	r4, [pc, #192]	@ (800e8ac <xTaskResumeAll+0xc8>)
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	b943      	cbnz	r3, 800e800 <xTaskResumeAll+0x1c>
 800e7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f2:	f383 8811 	msr	BASEPRI, r3
 800e7f6:	f3bf 8f6f 	isb	sy
 800e7fa:	f3bf 8f4f 	dsb	sy
 800e7fe:	e7fe      	b.n	800e7fe <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e800:	f7fe fee8 	bl	800d5d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	3b01      	subs	r3, #1
 800e808:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e80a:	6824      	ldr	r4, [r4, #0]
 800e80c:	b12c      	cbz	r4, 800e81a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e80e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e810:	f7fe ff00 	bl	800d614 <vPortExitCritical>
}
 800e814:	4620      	mov	r0, r4
 800e816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e81a:	4b25      	ldr	r3, [pc, #148]	@ (800e8b0 <xTaskResumeAll+0xcc>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d0f5      	beq.n	800e80e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e822:	4d24      	ldr	r5, [pc, #144]	@ (800e8b4 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e824:	4e24      	ldr	r6, [pc, #144]	@ (800e8b8 <xTaskResumeAll+0xd4>)
 800e826:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e8c8 <xTaskResumeAll+0xe4>
 800e82a:	e01d      	b.n	800e868 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e82c:	68eb      	ldr	r3, [r5, #12]
 800e82e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e830:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e832:	f104 0018 	add.w	r0, r4, #24
 800e836:	f7fe fe59 	bl	800d4ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e83a:	4638      	mov	r0, r7
 800e83c:	f7fe fe56 	bl	800d4ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e840:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e842:	6832      	ldr	r2, [r6, #0]
 800e844:	4293      	cmp	r3, r2
 800e846:	d900      	bls.n	800e84a <xTaskResumeAll+0x66>
 800e848:	6033      	str	r3, [r6, #0]
 800e84a:	2014      	movs	r0, #20
 800e84c:	4639      	mov	r1, r7
 800e84e:	fb00 8003 	mla	r0, r0, r3, r8
 800e852:	f7fe fe29 	bl	800d4a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e856:	4b19      	ldr	r3, [pc, #100]	@ (800e8bc <xTaskResumeAll+0xd8>)
 800e858:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e85e:	429a      	cmp	r2, r3
 800e860:	d302      	bcc.n	800e868 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e862:	4b17      	ldr	r3, [pc, #92]	@ (800e8c0 <xTaskResumeAll+0xdc>)
 800e864:	2201      	movs	r2, #1
 800e866:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1de      	bne.n	800e82c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e86e:	b10c      	cbz	r4, 800e874 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e870:	f7ff fe00 	bl	800e474 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e874:	4d13      	ldr	r5, [pc, #76]	@ (800e8c4 <xTaskResumeAll+0xe0>)
 800e876:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e878:	b144      	cbz	r4, 800e88c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e87a:	4e11      	ldr	r6, [pc, #68]	@ (800e8c0 <xTaskResumeAll+0xdc>)
 800e87c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e87e:	f7ff ff1b 	bl	800e6b8 <xTaskIncrementTick>
 800e882:	b100      	cbz	r0, 800e886 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e884:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e886:	3c01      	subs	r4, #1
 800e888:	d1f9      	bne.n	800e87e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e88a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e88c:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c0 <xTaskResumeAll+0xdc>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d0bc      	beq.n	800e80e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e894:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e89c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e8a8:	2401      	movs	r4, #1
 800e8aa:	e7b1      	b.n	800e810 <xTaskResumeAll+0x2c>
 800e8ac:	24025300 	.word	0x24025300
 800e8b0:	24025324 	.word	0x24025324
 800e8b4:	24025354 	.word	0x24025354
 800e8b8:	2402531c 	.word	0x2402531c
 800e8bc:	240257f8 	.word	0x240257f8
 800e8c0:	24025310 	.word	0x24025310
 800e8c4:	24025314 	.word	0x24025314
 800e8c8:	24025398 	.word	0x24025398

0800e8cc <vTaskSetApplicationTaskTag>:
	{
 800e8cc:	b538      	push	{r3, r4, r5, lr}
 800e8ce:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	b908      	cbnz	r0, 800e8d8 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e8d4:	4b04      	ldr	r3, [pc, #16]	@ (800e8e8 <vTaskSetApplicationTaskTag+0x1c>)
 800e8d6:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e8d8:	f7fe fe7c 	bl	800d5d4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e8dc:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e8de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e8e2:	f7fe be97 	b.w	800d614 <vPortExitCritical>
 800e8e6:	bf00      	nop
 800e8e8:	240257f8 	.word	0x240257f8

0800e8ec <xTaskCallApplicationTaskHook>:
	{
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e8f0:	b90b      	cbnz	r3, 800e8f6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e8f2:	4b03      	ldr	r3, [pc, #12]	@ (800e900 <xTaskCallApplicationTaskHook+0x14>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f8:	b103      	cbz	r3, 800e8fc <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e8fa:	4718      	bx	r3
	}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	4770      	bx	lr
 800e900:	240257f8 	.word	0x240257f8

0800e904 <vTaskStartScheduler>:
{
 800e904:	b510      	push	{r4, lr}
 800e906:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e908:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e90a:	aa07      	add	r2, sp, #28
 800e90c:	a906      	add	r1, sp, #24
 800e90e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e910:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e914:	f7fe fca6 	bl	800d264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e918:	9b05      	ldr	r3, [sp, #20]
 800e91a:	9a07      	ldr	r2, [sp, #28]
 800e91c:	9302      	str	r3, [sp, #8]
 800e91e:	9b06      	ldr	r3, [sp, #24]
 800e920:	4919      	ldr	r1, [pc, #100]	@ (800e988 <vTaskStartScheduler+0x84>)
 800e922:	481a      	ldr	r0, [pc, #104]	@ (800e98c <vTaskStartScheduler+0x88>)
 800e924:	e9cd 4300 	strd	r4, r3, [sp]
 800e928:	4623      	mov	r3, r4
 800e92a:	f7ff fe50 	bl	800e5ce <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e92e:	b340      	cbz	r0, 800e982 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e930:	f000 fa84 	bl	800ee3c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e934:	2801      	cmp	r0, #1
 800e936:	d119      	bne.n	800e96c <vTaskStartScheduler+0x68>
 800e938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93c:	f383 8811 	msr	BASEPRI, r3
 800e940:	f3bf 8f6f 	isb	sy
 800e944:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e948:	f04f 32ff 	mov.w	r2, #4294967295
 800e94c:	4b10      	ldr	r3, [pc, #64]	@ (800e990 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e94e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e950:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e952:	4b10      	ldr	r3, [pc, #64]	@ (800e994 <vTaskStartScheduler+0x90>)
 800e954:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e956:	4b10      	ldr	r3, [pc, #64]	@ (800e998 <vTaskStartScheduler+0x94>)
 800e958:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e95a:	4b10      	ldr	r3, [pc, #64]	@ (800e99c <vTaskStartScheduler+0x98>)
 800e95c:	6818      	ldr	r0, [r3, #0]
 800e95e:	f7ff ffc5 	bl	800e8ec <xTaskCallApplicationTaskHook>
}
 800e962:	b008      	add	sp, #32
 800e964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e968:	f7fe bec4 	b.w	800d6f4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e96c:	3001      	adds	r0, #1
 800e96e:	d108      	bne.n	800e982 <vTaskStartScheduler+0x7e>
 800e970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e974:	f383 8811 	msr	BASEPRI, r3
 800e978:	f3bf 8f6f 	isb	sy
 800e97c:	f3bf 8f4f 	dsb	sy
 800e980:	e7fe      	b.n	800e980 <vTaskStartScheduler+0x7c>
}
 800e982:	b008      	add	sp, #32
 800e984:	bd10      	pop	{r4, pc}
 800e986:	bf00      	nop
 800e988:	08027bbb 	.word	0x08027bbb
 800e98c:	0800e4d1 	.word	0x0800e4d1
 800e990:	24025304 	.word	0x24025304
 800e994:	24025318 	.word	0x24025318
 800e998:	24025320 	.word	0x24025320
 800e99c:	240257f8 	.word	0x240257f8

0800e9a0 <vTaskSwitchContext>:
{
 800e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e9a2:	4b1c      	ldr	r3, [pc, #112]	@ (800ea14 <vTaskSwitchContext+0x74>)
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ea18 <vTaskSwitchContext+0x78>)
 800e9a8:	b112      	cbz	r2, 800e9b0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	601a      	str	r2, [r3, #0]
}
 800e9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e9b0:	4c1a      	ldr	r4, [pc, #104]	@ (800ea1c <vTaskSwitchContext+0x7c>)
 800e9b2:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b4:	4e1a      	ldr	r6, [pc, #104]	@ (800ea20 <vTaskSwitchContext+0x80>)
 800e9b6:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e9b8:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e9ba:	6820      	ldr	r0, [r4, #0]
 800e9bc:	f7ff ff96 	bl	800e8ec <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9c0:	6832      	ldr	r2, [r6, #0]
 800e9c2:	4918      	ldr	r1, [pc, #96]	@ (800ea24 <vTaskSwitchContext+0x84>)
 800e9c4:	fb07 f302 	mul.w	r3, r7, r2
 800e9c8:	58cd      	ldr	r5, [r1, r3]
 800e9ca:	18c8      	adds	r0, r1, r3
 800e9cc:	b1ad      	cbz	r5, 800e9fa <vTaskSwitchContext+0x5a>
 800e9ce:	6845      	ldr	r5, [r0, #4]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	686d      	ldr	r5, [r5, #4]
 800e9d4:	440b      	add	r3, r1
 800e9d6:	429d      	cmp	r5, r3
 800e9d8:	6045      	str	r5, [r0, #4]
 800e9da:	bf04      	itt	eq
 800e9dc:	686b      	ldreq	r3, [r5, #4]
 800e9de:	6043      	streq	r3, [r0, #4]
 800e9e0:	2314      	movs	r3, #20
 800e9e2:	fb03 1102 	mla	r1, r3, r2, r1
 800e9e6:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e9e8:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	6023      	str	r3, [r4, #0]
 800e9ee:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e9f0:	6820      	ldr	r0, [r4, #0]
}
 800e9f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e9f6:	f7ff bf79 	b.w	800e8ec <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9fa:	b942      	cbnz	r2, 800ea0e <vTaskSwitchContext+0x6e>
 800e9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	e7fe      	b.n	800ea0c <vTaskSwitchContext+0x6c>
 800ea0e:	3a01      	subs	r2, #1
 800ea10:	e7d8      	b.n	800e9c4 <vTaskSwitchContext+0x24>
 800ea12:	bf00      	nop
 800ea14:	24025300 	.word	0x24025300
 800ea18:	24025310 	.word	0x24025310
 800ea1c:	240257f8 	.word	0x240257f8
 800ea20:	2402531c 	.word	0x2402531c
 800ea24:	24025398 	.word	0x24025398

0800ea28 <vTaskPlaceOnEventList>:
{
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800ea2c:	b940      	cbnz	r0, 800ea40 <vTaskPlaceOnEventList+0x18>
 800ea2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	e7fe      	b.n	800ea3e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea40:	4b05      	ldr	r3, [pc, #20]	@ (800ea58 <vTaskPlaceOnEventList+0x30>)
 800ea42:	6819      	ldr	r1, [r3, #0]
 800ea44:	3118      	adds	r1, #24
 800ea46:	f7fe fd3a 	bl	800d4be <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	2101      	movs	r1, #1
}
 800ea4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea52:	f7ff bcd7 	b.w	800e404 <prvAddCurrentTaskToDelayedList>
 800ea56:	bf00      	nop
 800ea58:	240257f8 	.word	0x240257f8

0800ea5c <vTaskPlaceOnEventListRestricted>:
	{
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	460d      	mov	r5, r1
 800ea60:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800ea62:	b940      	cbnz	r0, 800ea76 <vTaskPlaceOnEventListRestricted+0x1a>
 800ea64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	e7fe      	b.n	800ea74 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea76:	4b07      	ldr	r3, [pc, #28]	@ (800ea94 <vTaskPlaceOnEventListRestricted+0x38>)
 800ea78:	6819      	ldr	r1, [r3, #0]
 800ea7a:	3118      	adds	r1, #24
 800ea7c:	f7fe fd14 	bl	800d4a8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ea80:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea82:	4621      	mov	r1, r4
 800ea84:	bf0c      	ite	eq
 800ea86:	4628      	moveq	r0, r5
 800ea88:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ea8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ea90:	f7ff bcb8 	b.w	800e404 <prvAddCurrentTaskToDelayedList>
 800ea94:	240257f8 	.word	0x240257f8

0800ea98 <xTaskRemoveFromEventList>:
{
 800ea98:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea9a:	68c3      	ldr	r3, [r0, #12]
 800ea9c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ea9e:	b944      	cbnz	r4, 800eab2 <xTaskRemoveFromEventList+0x1a>
 800eaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	e7fe      	b.n	800eab0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eab2:	f104 0518 	add.w	r5, r4, #24
 800eab6:	4628      	mov	r0, r5
 800eab8:	f7fe fd18 	bl	800d4ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eabc:	4b11      	ldr	r3, [pc, #68]	@ (800eb04 <xTaskRemoveFromEventList+0x6c>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	b9d3      	cbnz	r3, 800eaf8 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eac2:	1d25      	adds	r5, r4, #4
 800eac4:	4628      	mov	r0, r5
 800eac6:	f7fe fd11 	bl	800d4ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eaca:	4a0f      	ldr	r2, [pc, #60]	@ (800eb08 <xTaskRemoveFromEventList+0x70>)
 800eacc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800eace:	6811      	ldr	r1, [r2, #0]
 800ead0:	428b      	cmp	r3, r1
 800ead2:	d900      	bls.n	800ead6 <xTaskRemoveFromEventList+0x3e>
 800ead4:	6013      	str	r3, [r2, #0]
 800ead6:	2014      	movs	r0, #20
 800ead8:	4a0c      	ldr	r2, [pc, #48]	@ (800eb0c <xTaskRemoveFromEventList+0x74>)
 800eada:	4629      	mov	r1, r5
 800eadc:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eae0:	f7fe fce2 	bl	800d4a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eae4:	4b0a      	ldr	r3, [pc, #40]	@ (800eb10 <xTaskRemoveFromEventList+0x78>)
 800eae6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d906      	bls.n	800eafe <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	4b08      	ldr	r3, [pc, #32]	@ (800eb14 <xTaskRemoveFromEventList+0x7c>)
 800eaf4:	6018      	str	r0, [r3, #0]
}
 800eaf6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eaf8:	4629      	mov	r1, r5
 800eafa:	4807      	ldr	r0, [pc, #28]	@ (800eb18 <xTaskRemoveFromEventList+0x80>)
 800eafc:	e7f0      	b.n	800eae0 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800eafe:	2000      	movs	r0, #0
	return xReturn;
 800eb00:	e7f9      	b.n	800eaf6 <xTaskRemoveFromEventList+0x5e>
 800eb02:	bf00      	nop
 800eb04:	24025300 	.word	0x24025300
 800eb08:	2402531c 	.word	0x2402531c
 800eb0c:	24025398 	.word	0x24025398
 800eb10:	240257f8 	.word	0x240257f8
 800eb14:	24025310 	.word	0x24025310
 800eb18:	24025354 	.word	0x24025354

0800eb1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eb1c:	4b03      	ldr	r3, [pc, #12]	@ (800eb2c <vTaskInternalSetTimeOutState+0x10>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eb22:	4b03      	ldr	r3, [pc, #12]	@ (800eb30 <vTaskInternalSetTimeOutState+0x14>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6043      	str	r3, [r0, #4]
}
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	2402530c 	.word	0x2402530c
 800eb30:	24025320 	.word	0x24025320

0800eb34 <xTaskCheckForTimeOut>:
{
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800eb38:	4605      	mov	r5, r0
 800eb3a:	b940      	cbnz	r0, 800eb4e <xTaskCheckForTimeOut+0x1a>
 800eb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb40:	f383 8811 	msr	BASEPRI, r3
 800eb44:	f3bf 8f6f 	isb	sy
 800eb48:	f3bf 8f4f 	dsb	sy
 800eb4c:	e7fe      	b.n	800eb4c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800eb4e:	b941      	cbnz	r1, 800eb62 <xTaskCheckForTimeOut+0x2e>
 800eb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	e7fe      	b.n	800eb60 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800eb62:	f7fe fd37 	bl	800d5d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800eb66:	4b0f      	ldr	r3, [pc, #60]	@ (800eba4 <xTaskCheckForTimeOut+0x70>)
 800eb68:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	d010      	beq.n	800eb92 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb70:	480d      	ldr	r0, [pc, #52]	@ (800eba8 <xTaskCheckForTimeOut+0x74>)
 800eb72:	682e      	ldr	r6, [r5, #0]
 800eb74:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb76:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb78:	4286      	cmp	r6, r0
 800eb7a:	d001      	beq.n	800eb80 <xTaskCheckForTimeOut+0x4c>
 800eb7c:	428a      	cmp	r2, r1
 800eb7e:	d90f      	bls.n	800eba0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb80:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb82:	4283      	cmp	r3, r0
 800eb84:	d90a      	bls.n	800eb9c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800eb86:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb88:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800eb8a:	4413      	add	r3, r2
 800eb8c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb8e:	f7ff ffc5 	bl	800eb1c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800eb92:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800eb94:	f7fe fd3e 	bl	800d614 <vPortExitCritical>
}
 800eb98:	4620      	mov	r0, r4
 800eb9a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800eba0:	2401      	movs	r4, #1
 800eba2:	e7f7      	b.n	800eb94 <xTaskCheckForTimeOut+0x60>
 800eba4:	24025320 	.word	0x24025320
 800eba8:	2402530c 	.word	0x2402530c

0800ebac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ebac:	4b01      	ldr	r3, [pc, #4]	@ (800ebb4 <vTaskMissedYield+0x8>)
 800ebae:	2201      	movs	r2, #1
 800ebb0:	601a      	str	r2, [r3, #0]
}
 800ebb2:	4770      	bx	lr
 800ebb4:	24025310 	.word	0x24025310

0800ebb8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ebb8:	4b01      	ldr	r3, [pc, #4]	@ (800ebc0 <xTaskGetCurrentTaskHandle+0x8>)
 800ebba:	6818      	ldr	r0, [r3, #0]
	}
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	240257f8 	.word	0x240257f8

0800ebc4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ebc4:	4b05      	ldr	r3, [pc, #20]	@ (800ebdc <xTaskGetSchedulerState+0x18>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	b133      	cbz	r3, 800ebd8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebca:	4b05      	ldr	r3, [pc, #20]	@ (800ebe0 <xTaskGetSchedulerState+0x1c>)
 800ebcc:	6818      	ldr	r0, [r3, #0]
 800ebce:	fab0 f080 	clz	r0, r0
 800ebd2:	0940      	lsrs	r0, r0, #5
 800ebd4:	0040      	lsls	r0, r0, #1
 800ebd6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ebd8:	2001      	movs	r0, #1
	}
 800ebda:	4770      	bx	lr
 800ebdc:	24025318 	.word	0x24025318
 800ebe0:	24025300 	.word	0x24025300

0800ebe4 <xTaskPriorityInherit>:
	{
 800ebe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	b338      	cbz	r0, 800ec3a <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ebea:	4d1a      	ldr	r5, [pc, #104]	@ (800ec54 <xTaskPriorityInherit+0x70>)
 800ebec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ebee:	682a      	ldr	r2, [r5, #0]
 800ebf0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d226      	bcs.n	800ec44 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ebf6:	6982      	ldr	r2, [r0, #24]
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	db04      	blt.n	800ec06 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebfc:	682a      	ldr	r2, [r5, #0]
 800ebfe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ec00:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ec04:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec06:	2214      	movs	r2, #20
 800ec08:	4e13      	ldr	r6, [pc, #76]	@ (800ec58 <xTaskPriorityInherit+0x74>)
 800ec0a:	fb02 6303 	mla	r3, r2, r3, r6
 800ec0e:	6962      	ldr	r2, [r4, #20]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d113      	bne.n	800ec3c <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec14:	1d27      	adds	r7, r4, #4
 800ec16:	4638      	mov	r0, r7
 800ec18:	f7fe fc68 	bl	800d4ec <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec1c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec1e:	4a0f      	ldr	r2, [pc, #60]	@ (800ec5c <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec22:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec24:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec26:	428b      	cmp	r3, r1
 800ec28:	d900      	bls.n	800ec2c <xTaskPriorityInherit+0x48>
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	2014      	movs	r0, #20
 800ec2e:	4639      	mov	r1, r7
 800ec30:	fb00 6003 	mla	r0, r0, r3, r6
 800ec34:	f7fe fc38 	bl	800d4a8 <vListInsertEnd>
				xReturn = pdTRUE;
 800ec38:	2001      	movs	r0, #1
	}
 800ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec3c:	682b      	ldr	r3, [r5, #0]
 800ec3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec42:	e7f9      	b.n	800ec38 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800ec48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec4a:	4298      	cmp	r0, r3
 800ec4c:	bf2c      	ite	cs
 800ec4e:	2000      	movcs	r0, #0
 800ec50:	2001      	movcc	r0, #1
 800ec52:	e7f2      	b.n	800ec3a <xTaskPriorityInherit+0x56>
 800ec54:	240257f8 	.word	0x240257f8
 800ec58:	24025398 	.word	0x24025398
 800ec5c:	2402531c 	.word	0x2402531c

0800ec60 <xTaskPriorityDisinherit>:
	{
 800ec60:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ec62:	b908      	cbnz	r0, 800ec68 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800ec64:	2000      	movs	r0, #0
	}
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ec68:	4b1b      	ldr	r3, [pc, #108]	@ (800ecd8 <xTaskPriorityDisinherit+0x78>)
 800ec6a:	681c      	ldr	r4, [r3, #0]
 800ec6c:	4284      	cmp	r4, r0
 800ec6e:	d008      	beq.n	800ec82 <xTaskPriorityDisinherit+0x22>
 800ec70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	e7fe      	b.n	800ec80 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec82:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ec84:	b943      	cbnz	r3, 800ec98 <xTaskPriorityDisinherit+0x38>
 800ec86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	e7fe      	b.n	800ec96 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec98:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800ec9a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec9c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ec9e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eca0:	4291      	cmp	r1, r2
 800eca2:	d0df      	beq.n	800ec64 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1dd      	bne.n	800ec64 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca8:	1d25      	adds	r5, r4, #4
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f7fe fc1e 	bl	800d4ec <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecb0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ecba:	4a08      	ldr	r2, [pc, #32]	@ (800ecdc <xTaskPriorityDisinherit+0x7c>)
 800ecbc:	6811      	ldr	r1, [r2, #0]
 800ecbe:	428b      	cmp	r3, r1
 800ecc0:	d900      	bls.n	800ecc4 <xTaskPriorityDisinherit+0x64>
 800ecc2:	6013      	str	r3, [r2, #0]
 800ecc4:	4a06      	ldr	r2, [pc, #24]	@ (800ece0 <xTaskPriorityDisinherit+0x80>)
 800ecc6:	2014      	movs	r0, #20
 800ecc8:	4629      	mov	r1, r5
 800ecca:	fb00 2003 	mla	r0, r0, r3, r2
 800ecce:	f7fe fbeb 	bl	800d4a8 <vListInsertEnd>
					xReturn = pdTRUE;
 800ecd2:	2001      	movs	r0, #1
		return xReturn;
 800ecd4:	e7c7      	b.n	800ec66 <xTaskPriorityDisinherit+0x6>
 800ecd6:	bf00      	nop
 800ecd8:	240257f8 	.word	0x240257f8
 800ecdc:	2402531c 	.word	0x2402531c
 800ece0:	24025398 	.word	0x24025398

0800ece4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800ece4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ece6:	4604      	mov	r4, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d042      	beq.n	800ed72 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecec:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ecee:	b942      	cbnz	r2, 800ed02 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800ecf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	e7fe      	b.n	800ed00 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed02:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800ed04:	4299      	cmp	r1, r3
 800ed06:	bf38      	it	cc
 800ed08:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ed0a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ed0c:	428b      	cmp	r3, r1
 800ed0e:	d030      	beq.n	800ed72 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed10:	2a01      	cmp	r2, #1
 800ed12:	d12e      	bne.n	800ed72 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800ed14:	4a17      	ldr	r2, [pc, #92]	@ (800ed74 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800ed16:	6812      	ldr	r2, [r2, #0]
 800ed18:	4282      	cmp	r2, r0
 800ed1a:	d108      	bne.n	800ed2e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800ed1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	e7fe      	b.n	800ed2c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed2e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed30:	4d11      	ldr	r5, [pc, #68]	@ (800ed78 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed32:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed34:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800ed38:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed3a:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed3e:	bfa8      	it	ge
 800ed40:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed44:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed46:	bfa8      	it	ge
 800ed48:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d111      	bne.n	800ed72 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed4e:	1d06      	adds	r6, r0, #4
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7fe fbcb 	bl	800d4ec <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800ed56:	4a09      	ldr	r2, [pc, #36]	@ (800ed7c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800ed58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ed5a:	6811      	ldr	r1, [r2, #0]
 800ed5c:	428b      	cmp	r3, r1
 800ed5e:	d900      	bls.n	800ed62 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ed60:	6013      	str	r3, [r2, #0]
 800ed62:	2014      	movs	r0, #20
 800ed64:	4631      	mov	r1, r6
 800ed66:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800ed6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800ed6e:	f7fe bb9b 	b.w	800d4a8 <vListInsertEnd>
	}
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	240257f8 	.word	0x240257f8
 800ed78:	24025398 	.word	0x24025398
 800ed7c:	2402531c 	.word	0x2402531c

0800ed80 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ed80:	4b04      	ldr	r3, [pc, #16]	@ (800ed94 <pvTaskIncrementMutexHeldCount+0x14>)
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	b11a      	cbz	r2, 800ed8e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed86:	6819      	ldr	r1, [r3, #0]
 800ed88:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ed8a:	3201      	adds	r2, #1
 800ed8c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ed8e:	6818      	ldr	r0, [r3, #0]
	}
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	240257f8 	.word	0x240257f8

0800ed98 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ed98:	4291      	cmp	r1, r2
{
 800ed9a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed9c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed9e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800eda0:	d80a      	bhi.n	800edb8 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eda2:	1ad2      	subs	r2, r2, r3
 800eda4:	6983      	ldr	r3, [r0, #24]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d20d      	bcs.n	800edc6 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800edaa:	1d01      	adds	r1, r0, #4
 800edac:	4b07      	ldr	r3, [pc, #28]	@ (800edcc <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edae:	6818      	ldr	r0, [r3, #0]
 800edb0:	f7fe fb85 	bl	800d4be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800edb4:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800edb6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800edb8:	429a      	cmp	r2, r3
 800edba:	d201      	bcs.n	800edc0 <prvInsertTimerInActiveList+0x28>
 800edbc:	4299      	cmp	r1, r3
 800edbe:	d202      	bcs.n	800edc6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edc0:	1d01      	adds	r1, r0, #4
 800edc2:	4b03      	ldr	r3, [pc, #12]	@ (800edd0 <prvInsertTimerInActiveList+0x38>)
 800edc4:	e7f3      	b.n	800edae <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800edc6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800edc8:	e7f5      	b.n	800edb6 <prvInsertTimerInActiveList+0x1e>
 800edca:	bf00      	nop
 800edcc:	240258f8 	.word	0x240258f8
 800edd0:	240258fc 	.word	0x240258fc

0800edd4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800edd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800edd6:	4c11      	ldr	r4, [pc, #68]	@ (800ee1c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800edd8:	f7fe fbfc 	bl	800d5d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800eddc:	6825      	ldr	r5, [r4, #0]
 800edde:	b9bd      	cbnz	r5, 800ee10 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ede0:	4f0f      	ldr	r7, [pc, #60]	@ (800ee20 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ede2:	4e10      	ldr	r6, [pc, #64]	@ (800ee24 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ede4:	4638      	mov	r0, r7
 800ede6:	f7fe fb51 	bl	800d48c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800edea:	4630      	mov	r0, r6
 800edec:	f7fe fb4e 	bl	800d48c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800edf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ee28 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edf2:	4a0e      	ldr	r2, [pc, #56]	@ (800ee2c <prvCheckForValidListAndQueue+0x58>)
 800edf4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800edf6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edf8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800edfa:	4b0d      	ldr	r3, [pc, #52]	@ (800ee30 <prvCheckForValidListAndQueue+0x5c>)
 800edfc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ee34 <prvCheckForValidListAndQueue+0x60>)
 800ee00:	9500      	str	r5, [sp, #0]
 800ee02:	f7fe fdef 	bl	800d9e4 <xQueueGenericCreateStatic>
 800ee06:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee08:	b110      	cbz	r0, 800ee10 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee0a:	490b      	ldr	r1, [pc, #44]	@ (800ee38 <prvCheckForValidListAndQueue+0x64>)
 800ee0c:	f7ff fa1a 	bl	800e244 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ee10:	b003      	add	sp, #12
 800ee12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ee16:	f7fe bbfd 	b.w	800d614 <vPortExitCritical>
 800ee1a:	bf00      	nop
 800ee1c:	240258f4 	.word	0x240258f4
 800ee20:	24025914 	.word	0x24025914
 800ee24:	24025900 	.word	0x24025900
 800ee28:	240258fc 	.word	0x240258fc
 800ee2c:	2402584c 	.word	0x2402584c
 800ee30:	240258f8 	.word	0x240258f8
 800ee34:	240257fc 	.word	0x240257fc
 800ee38:	08027bc0 	.word	0x08027bc0

0800ee3c <xTimerCreateTimerTask>:
{
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ee40:	f7ff ffc8 	bl	800edd4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ee44:	4b12      	ldr	r3, [pc, #72]	@ (800ee90 <xTimerCreateTimerTask+0x54>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	b1b3      	cbz	r3, 800ee78 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee4a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee4c:	aa07      	add	r2, sp, #28
 800ee4e:	a906      	add	r1, sp, #24
 800ee50:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee52:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee56:	f7fe fa11 	bl	800d27c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee5a:	9b05      	ldr	r3, [sp, #20]
 800ee5c:	9a07      	ldr	r2, [sp, #28]
 800ee5e:	9302      	str	r3, [sp, #8]
 800ee60:	9b06      	ldr	r3, [sp, #24]
 800ee62:	490c      	ldr	r1, [pc, #48]	@ (800ee94 <xTimerCreateTimerTask+0x58>)
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	2302      	movs	r3, #2
 800ee68:	480b      	ldr	r0, [pc, #44]	@ (800ee98 <xTimerCreateTimerTask+0x5c>)
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	4623      	mov	r3, r4
 800ee6e:	f7ff fbae 	bl	800e5ce <xTaskCreateStatic>
 800ee72:	4b0a      	ldr	r3, [pc, #40]	@ (800ee9c <xTimerCreateTimerTask+0x60>)
 800ee74:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ee76:	b940      	cbnz	r0, 800ee8a <xTimerCreateTimerTask+0x4e>
 800ee78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7c:	f383 8811 	msr	BASEPRI, r3
 800ee80:	f3bf 8f6f 	isb	sy
 800ee84:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800ee88:	e7fe      	b.n	800ee88 <xTimerCreateTimerTask+0x4c>
}
 800ee8a:	2001      	movs	r0, #1
 800ee8c:	b008      	add	sp, #32
 800ee8e:	bd10      	pop	{r4, pc}
 800ee90:	240258f4 	.word	0x240258f4
 800ee94:	08027bc5 	.word	0x08027bc5
 800ee98:	0800ef99 	.word	0x0800ef99
 800ee9c:	240258f0 	.word	0x240258f0

0800eea0 <xTimerGenericCommand>:
{
 800eea0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eea2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800eea4:	4604      	mov	r4, r0
{
 800eea6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800eea8:	b940      	cbnz	r0, 800eebc <xTimerGenericCommand+0x1c>
 800eeaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeae:	f383 8811 	msr	BASEPRI, r3
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	e7fe      	b.n	800eeba <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800eebc:	4d0c      	ldr	r5, [pc, #48]	@ (800eef0 <xTimerGenericCommand+0x50>)
 800eebe:	6828      	ldr	r0, [r5, #0]
 800eec0:	b178      	cbz	r0, 800eee2 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eec2:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eec4:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eec6:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eeca:	dc0c      	bgt.n	800eee6 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eecc:	f7ff fe7a 	bl	800ebc4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eed0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eed2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eed4:	4669      	mov	r1, sp
 800eed6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eed8:	bf0c      	ite	eq
 800eeda:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eedc:	461a      	movne	r2, r3
 800eede:	f7fe fe36 	bl	800db4e <xQueueGenericSend>
}
 800eee2:	b004      	add	sp, #16
 800eee4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eee6:	2300      	movs	r3, #0
 800eee8:	4669      	mov	r1, sp
 800eeea:	f7fe ff33 	bl	800dd54 <xQueueGenericSendFromISR>
 800eeee:	e7f8      	b.n	800eee2 <xTimerGenericCommand+0x42>
 800eef0:	240258f4 	.word	0x240258f4

0800eef4 <prvSampleTimeNow>:
{
 800eef4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800eef8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800ef94 <prvSampleTimeNow+0xa0>
{
 800eefc:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800eefe:	f7ff fbd5 	bl	800e6ac <xTaskGetTickCount>
 800ef02:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800ef04:	f8d8 3000 	ldr.w	r3, [r8]
 800ef08:	4283      	cmp	r3, r0
 800ef0a:	d909      	bls.n	800ef20 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef0c:	4f1f      	ldr	r7, [pc, #124]	@ (800ef8c <prvSampleTimeNow+0x98>)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	b96a      	cbnz	r2, 800ef30 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800ef14:	4a1e      	ldr	r2, [pc, #120]	@ (800ef90 <prvSampleTimeNow+0x9c>)
 800ef16:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800ef1c:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800ef1e:	e000      	b.n	800ef22 <prvSampleTimeNow+0x2e>
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800ef24:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800ef26:	f8c8 5000 	str.w	r5, [r8]
}
 800ef2a:	b002      	add	sp, #8
 800ef2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef30:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef32:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef34:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef38:	f104 0a04 	add.w	sl, r4, #4
 800ef3c:	4650      	mov	r0, sl
 800ef3e:	f7fe fad5 	bl	800d4ec <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef42:	6a23      	ldr	r3, [r4, #32]
 800ef44:	4620      	mov	r0, r4
 800ef46:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef48:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ef4c:	075b      	lsls	r3, r3, #29
 800ef4e:	d5de      	bpl.n	800ef0e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef50:	69a3      	ldr	r3, [r4, #24]
 800ef52:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800ef54:	4599      	cmp	r9, r3
 800ef56:	d206      	bcs.n	800ef66 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef58:	4651      	mov	r1, sl
 800ef5a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef5c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef5e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef60:	f7fe faad 	bl	800d4be <vListInsert>
 800ef64:	e7d3      	b.n	800ef0e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef66:	2300      	movs	r3, #0
 800ef68:	464a      	mov	r2, r9
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	f7ff ff96 	bl	800eea0 <xTimerGenericCommand>
				configASSERT( xResult );
 800ef74:	2800      	cmp	r0, #0
 800ef76:	d1ca      	bne.n	800ef0e <prvSampleTimeNow+0x1a>
 800ef78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef7c:	f383 8811 	msr	BASEPRI, r3
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	e7fe      	b.n	800ef88 <prvSampleTimeNow+0x94>
 800ef8a:	bf00      	nop
 800ef8c:	240258fc 	.word	0x240258fc
 800ef90:	240258f8 	.word	0x240258f8
 800ef94:	240258ec 	.word	0x240258ec

0800ef98 <prvTimerTask>:
{
 800ef98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef9c:	4d6e      	ldr	r5, [pc, #440]	@ (800f158 <prvTimerTask+0x1c0>)
{
 800ef9e:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800efa0:	4e6e      	ldr	r6, [pc, #440]	@ (800f15c <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800efa2:	682b      	ldr	r3, [r5, #0]
 800efa4:	f8d3 8000 	ldr.w	r8, [r3]
 800efa8:	f1b8 0f00 	cmp.w	r8, #0
 800efac:	d035      	beq.n	800f01a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efae:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800efb0:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efb2:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800efb6:	f7ff fb71 	bl	800e69c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efba:	a804      	add	r0, sp, #16
 800efbc:	f7ff ff9a 	bl	800eef4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800efc0:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efc2:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d169      	bne.n	800f09c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800efc8:	2c00      	cmp	r4, #0
 800efca:	d14c      	bne.n	800f066 <prvTimerTask+0xce>
 800efcc:	4540      	cmp	r0, r8
 800efce:	d350      	bcc.n	800f072 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800efd0:	f7ff fc08 	bl	800e7e4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efd4:	682b      	ldr	r3, [r5, #0]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efda:	1d38      	adds	r0, r7, #4
 800efdc:	f7fe fa86 	bl	800d4ec <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efe0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800efe4:	0758      	lsls	r0, r3, #29
 800efe6:	d51a      	bpl.n	800f01e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800efe8:	69b9      	ldr	r1, [r7, #24]
 800efea:	4643      	mov	r3, r8
 800efec:	464a      	mov	r2, r9
 800efee:	4638      	mov	r0, r7
 800eff0:	4441      	add	r1, r8
 800eff2:	f7ff fed1 	bl	800ed98 <prvInsertTimerInActiveList>
 800eff6:	b1b0      	cbz	r0, 800f026 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eff8:	4623      	mov	r3, r4
 800effa:	4642      	mov	r2, r8
 800effc:	4621      	mov	r1, r4
 800effe:	4638      	mov	r0, r7
 800f000:	9400      	str	r4, [sp, #0]
 800f002:	f7ff ff4d 	bl	800eea0 <xTimerGenericCommand>
			configASSERT( xResult );
 800f006:	b970      	cbnz	r0, 800f026 <prvTimerTask+0x8e>
 800f008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f00c:	f383 8811 	msr	BASEPRI, r3
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	f3bf 8f4f 	dsb	sy
 800f018:	e7fe      	b.n	800f018 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f01a:	2401      	movs	r4, #1
 800f01c:	e7cb      	b.n	800efb6 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f01e:	f023 0301 	bic.w	r3, r3, #1
 800f022:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	4638      	mov	r0, r7
 800f02a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f02c:	2200      	movs	r2, #0
 800f02e:	a904      	add	r1, sp, #16
 800f030:	6830      	ldr	r0, [r6, #0]
 800f032:	f7fe ff3d 	bl	800deb0 <xQueueReceive>
 800f036:	2800      	cmp	r0, #0
 800f038:	d0b3      	beq.n	800efa2 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f03a:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f03c:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f03e:	2b00      	cmp	r3, #0
 800f040:	db2f      	blt.n	800f0a2 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f042:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f044:	6963      	ldr	r3, [r4, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d132      	bne.n	800f0b0 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f04a:	a803      	add	r0, sp, #12
 800f04c:	f7ff ff52 	bl	800eef4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800f050:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f052:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800f054:	2b09      	cmp	r3, #9
 800f056:	d8e9      	bhi.n	800f02c <prvTimerTask+0x94>
 800f058:	e8df f003 	tbb	[pc, r3]
 800f05c:	572e2e2e 	.word	0x572e2e2e
 800f060:	2e2e765e 	.word	0x2e2e765e
 800f064:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f066:	4b3e      	ldr	r3, [pc, #248]	@ (800f160 <prvTimerTask+0x1c8>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681c      	ldr	r4, [r3, #0]
 800f06c:	fab4 f484 	clz	r4, r4
 800f070:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f072:	4622      	mov	r2, r4
 800f074:	eba8 0109 	sub.w	r1, r8, r9
 800f078:	6830      	ldr	r0, [r6, #0]
 800f07a:	f7ff f922 	bl	800e2c2 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f07e:	f7ff fbb1 	bl	800e7e4 <xTaskResumeAll>
 800f082:	2800      	cmp	r0, #0
 800f084:	d1d2      	bne.n	800f02c <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800f086:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f08a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f08e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f092:	f3bf 8f4f 	dsb	sy
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	e7c7      	b.n	800f02c <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800f09c:	f7ff fba2 	bl	800e7e4 <xTaskResumeAll>
}
 800f0a0:	e7c4      	b.n	800f02c <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f0a2:	9b05      	ldr	r3, [sp, #20]
 800f0a4:	9907      	ldr	r1, [sp, #28]
 800f0a6:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f0a8:	9b04      	ldr	r3, [sp, #16]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	dbbe      	blt.n	800f02c <prvTimerTask+0x94>
 800f0ae:	e7c8      	b.n	800f042 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0b0:	1d20      	adds	r0, r4, #4
 800f0b2:	f7fe fa1b 	bl	800d4ec <uxListRemove>
 800f0b6:	e7c8      	b.n	800f04a <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0b8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0bc:	4620      	mov	r0, r4
 800f0be:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0c0:	f043 0301 	orr.w	r3, r3, #1
 800f0c4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0c8:	9b05      	ldr	r3, [sp, #20]
 800f0ca:	4419      	add	r1, r3
 800f0cc:	f7ff fe64 	bl	800ed98 <prvInsertTimerInActiveList>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d0ab      	beq.n	800f02c <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0d4:	6a23      	ldr	r3, [r4, #32]
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f0de:	0759      	lsls	r1, r3, #29
 800f0e0:	d5a4      	bpl.n	800f02c <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f0e2:	69a2      	ldr	r2, [r4, #24]
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	9905      	ldr	r1, [sp, #20]
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	440a      	add	r2, r1
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	f7ff fed6 	bl	800eea0 <xTimerGenericCommand>
							configASSERT( xResult );
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d199      	bne.n	800f02c <prvTimerTask+0x94>
 800f0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	e7fe      	b.n	800f108 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f10a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f10e:	f023 0301 	bic.w	r3, r3, #1
 800f112:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800f116:	e789      	b.n	800f02c <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f118:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f11c:	f043 0301 	orr.w	r3, r3, #1
 800f120:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f124:	9905      	ldr	r1, [sp, #20]
 800f126:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f128:	b941      	cbnz	r1, 800f13c <prvTimerTask+0x1a4>
 800f12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	e7fe      	b.n	800f13a <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f13c:	4603      	mov	r3, r0
 800f13e:	4401      	add	r1, r0
 800f140:	4620      	mov	r0, r4
 800f142:	f7ff fe29 	bl	800ed98 <prvInsertTimerInActiveList>
					break;
 800f146:	e771      	b.n	800f02c <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f148:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f14c:	079a      	lsls	r2, r3, #30
 800f14e:	d4de      	bmi.n	800f10e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800f150:	4620      	mov	r0, r4
 800f152:	f7fe f95d 	bl	800d410 <vPortFree>
 800f156:	e769      	b.n	800f02c <prvTimerTask+0x94>
 800f158:	240258fc 	.word	0x240258fc
 800f15c:	240258f4 	.word	0x240258f4
 800f160:	240258f8 	.word	0x240258f8

0800f164 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f164:	8880      	ldrh	r0, [r0, #4]
 800f166:	4770      	bx	lr

0800f168 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f168:	b570      	push	{r4, r5, r6, lr}
 800f16a:	6803      	ldr	r3, [r0, #0]
 800f16c:	460c      	mov	r4, r1
 800f16e:	2100      	movs	r1, #0
 800f170:	4605      	mov	r5, r0
 800f172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f174:	4798      	blx	r3
 800f176:	4606      	mov	r6, r0
 800f178:	682b      	ldr	r3, [r5, #0]
 800f17a:	4628      	mov	r0, r5
 800f17c:	1ba4      	subs	r4, r4, r6
 800f17e:	6a1b      	ldr	r3, [r3, #32]
 800f180:	b2a4      	uxth	r4, r4
 800f182:	4798      	blx	r3
 800f184:	fbb4 f0f0 	udiv	r0, r4, r0
 800f188:	bd70      	pop	{r4, r5, r6, pc}

0800f18a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f18a:	2300      	movs	r3, #0
 800f18c:	8083      	strh	r3, [r0, #4]
 800f18e:	4770      	bx	lr

0800f190 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f190:	b510      	push	{r4, lr}
 800f192:	6803      	ldr	r3, [r0, #0]
 800f194:	4604      	mov	r4, r0
 800f196:	8881      	ldrh	r1, [r0, #4]
 800f198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f19a:	4798      	blx	r3
 800f19c:	88a3      	ldrh	r3, [r4, #4]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	80a3      	strh	r3, [r4, #4]
 800f1a2:	bd10      	pop	{r4, pc}

0800f1a4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f1a4:	6803      	ldr	r3, [r0, #0]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a8:	4718      	bx	r3

0800f1aa <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f1aa:	4770      	bx	lr

0800f1ac <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f1ac:	4a02      	ldr	r2, [pc, #8]	@ (800f1b8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f1ae:	6002      	str	r2, [r0, #0]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	8082      	strh	r2, [r0, #4]
 800f1b4:	4770      	bx	lr
 800f1b6:	bf00      	nop
 800f1b8:	08028bf0 	.word	0x08028bf0

0800f1bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f1bc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f1be:	2000      	movs	r0, #0
 800f1c0:	b12b      	cbz	r3, 800f1ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f1c2:	b920      	cbnz	r0, 800f1ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f1c4:	1a5a      	subs	r2, r3, r1
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	4250      	negs	r0, r2
 800f1ca:	4150      	adcs	r0, r2
 800f1cc:	e7f8      	b.n	800f1c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f1ce:	4770      	bx	lr

0800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	6148      	str	r0, [r1, #20]
 800f1d4:	618b      	str	r3, [r1, #24]
 800f1d6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f1d8:	b913      	cbnz	r3, 800f1e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f1da:	6281      	str	r1, [r0, #40]	@ 0x28
 800f1dc:	4770      	bx	lr
 800f1de:	4613      	mov	r3, r2
 800f1e0:	699a      	ldr	r2, [r3, #24]
 800f1e2:	2a00      	cmp	r2, #0
 800f1e4:	d1fb      	bne.n	800f1de <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f1e6:	6199      	str	r1, [r3, #24]
 800f1e8:	4770      	bx	lr

0800f1ea <_ZN8touchgfx9Container9removeAllEv>:
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f1ee:	b123      	cbz	r3, 800f1fa <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f1f0:	6999      	ldr	r1, [r3, #24]
 800f1f2:	6281      	str	r1, [r0, #40]	@ 0x28
 800f1f4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f1f8:	e7f8      	b.n	800f1ec <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f1fa:	4770      	bx	lr

0800f1fc <_ZN8touchgfx9Container6unlinkEv>:
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	6283      	str	r3, [r0, #40]	@ 0x28
 800f200:	4770      	bx	lr

0800f202 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800f202:	2200      	movs	r2, #0
 800f204:	8002      	strh	r2, [r0, #0]
 800f206:	8042      	strh	r2, [r0, #2]
 800f208:	8082      	strh	r2, [r0, #4]
 800f20a:	80c2      	strh	r2, [r0, #6]
 800f20c:	4770      	bx	lr

0800f20e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800f20e:	b570      	push	{r4, r5, r6, lr}
 800f210:	460d      	mov	r5, r1
 800f212:	4616      	mov	r6, r2
 800f214:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f216:	b13c      	cbz	r4, 800f228 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800f218:	6823      	ldr	r3, [r4, #0]
 800f21a:	4620      	mov	r0, r4
 800f21c:	4632      	mov	r2, r6
 800f21e:	4629      	mov	r1, r5
 800f220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f222:	4798      	blx	r3
 800f224:	69a4      	ldr	r4, [r4, #24]
 800f226:	e7f6      	b.n	800f216 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800f228:	bd70      	pop	{r4, r5, r6, pc}

0800f22a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800f22a:	b538      	push	{r3, r4, r5, lr}
 800f22c:	460d      	mov	r5, r1
 800f22e:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f230:	b134      	cbz	r4, 800f240 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800f232:	682b      	ldr	r3, [r5, #0]
 800f234:	4621      	mov	r1, r4
 800f236:	4628      	mov	r0, r5
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	4798      	blx	r3
 800f23c:	69a4      	ldr	r4, [r4, #24]
 800f23e:	e7f7      	b.n	800f230 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800f240:	bd38      	pop	{r3, r4, r5, pc}

0800f242 <_ZN8touchgfx9ContainerD1Ev>:
 800f242:	4770      	bx	lr

0800f244 <_ZN8touchgfx9ContainerD0Ev>:
 800f244:	b510      	push	{r4, lr}
 800f246:	4604      	mov	r4, r0
 800f248:	212c      	movs	r1, #44	@ 0x2c
 800f24a:	f014 fffb 	bl	8024244 <_ZdlPvj>
 800f24e:	4620      	mov	r0, r4
 800f250:	bd10      	pop	{r4, pc}

0800f252 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800f252:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f254:	b19b      	cbz	r3, 800f27e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f256:	428b      	cmp	r3, r1
 800f258:	d109      	bne.n	800f26e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800f25a:	699a      	ldr	r2, [r3, #24]
 800f25c:	2100      	movs	r1, #0
 800f25e:	6159      	str	r1, [r3, #20]
 800f260:	6282      	str	r2, [r0, #40]	@ 0x28
 800f262:	b902      	cbnz	r2, 800f266 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800f264:	4770      	bx	lr
 800f266:	6199      	str	r1, [r3, #24]
 800f268:	4770      	bx	lr
 800f26a:	4613      	mov	r3, r2
 800f26c:	b13a      	cbz	r2, 800f27e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800f26e:	699a      	ldr	r2, [r3, #24]
 800f270:	428a      	cmp	r2, r1
 800f272:	d1fa      	bne.n	800f26a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800f274:	698a      	ldr	r2, [r1, #24]
 800f276:	619a      	str	r2, [r3, #24]
 800f278:	2300      	movs	r3, #0
 800f27a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800f27e:	4770      	bx	lr

0800f280 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800f280:	b410      	push	{r4}
 800f282:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800f284:	4604      	mov	r4, r0
 800f286:	b92b      	cbnz	r3, 800f294 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800f288:	6803      	ldr	r3, [r0, #0]
 800f28a:	4611      	mov	r1, r2
 800f28c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f292:	4718      	bx	r3
 800f294:	b941      	cbnz	r1, 800f2a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800f296:	6193      	str	r3, [r2, #24]
 800f298:	6282      	str	r2, [r0, #40]	@ 0x28
 800f29a:	6154      	str	r4, [r2, #20]
 800f29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d0f9      	beq.n	800f29c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800f2a8:	4299      	cmp	r1, r3
 800f2aa:	6998      	ldr	r0, [r3, #24]
 800f2ac:	d1f9      	bne.n	800f2a2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800f2ae:	6190      	str	r0, [r2, #24]
 800f2b0:	618a      	str	r2, [r1, #24]
 800f2b2:	e7f2      	b.n	800f29a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800f2b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800f2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b8:	461f      	mov	r7, r3
 800f2ba:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f2be:	460d      	mov	r5, r1
 800f2c0:	4616      	mov	r6, r2
 800f2c2:	b103      	cbz	r3, 800f2c6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800f2c4:	6038      	str	r0, [r7, #0]
 800f2c6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f2c8:	b314      	cbz	r4, 800f310 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800f2ca:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f2ce:	b1eb      	cbz	r3, 800f30c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f2d0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800f2d4:	428d      	cmp	r5, r1
 800f2d6:	db19      	blt.n	800f30c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f2d8:	b289      	uxth	r1, r1
 800f2da:	8923      	ldrh	r3, [r4, #8]
 800f2dc:	440b      	add	r3, r1
 800f2de:	b21b      	sxth	r3, r3
 800f2e0:	429d      	cmp	r5, r3
 800f2e2:	da13      	bge.n	800f30c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f2e4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f2e8:	4296      	cmp	r6, r2
 800f2ea:	db0f      	blt.n	800f30c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f2ec:	b292      	uxth	r2, r2
 800f2ee:	8963      	ldrh	r3, [r4, #10]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	b21b      	sxth	r3, r3
 800f2f4:	429e      	cmp	r6, r3
 800f2f6:	da09      	bge.n	800f30c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800f2f8:	6823      	ldr	r3, [r4, #0]
 800f2fa:	1ab2      	subs	r2, r6, r2
 800f2fc:	1a69      	subs	r1, r5, r1
 800f2fe:	4620      	mov	r0, r4
 800f300:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800f304:	b212      	sxth	r2, r2
 800f306:	463b      	mov	r3, r7
 800f308:	b209      	sxth	r1, r1
 800f30a:	47c0      	blx	r8
 800f30c:	69a4      	ldr	r4, [r4, #24]
 800f30e:	e7db      	b.n	800f2c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800f310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f314 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f318:	4c6d      	ldr	r4, [pc, #436]	@ (800f4d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800f31a:	b0a1      	sub	sp, #132	@ 0x84
 800f31c:	4606      	mov	r6, r0
 800f31e:	6824      	ldr	r4, [r4, #0]
 800f320:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800f322:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800f326:	2400      	movs	r4, #0
 800f328:	9303      	str	r3, [sp, #12]
 800f32a:	802c      	strh	r4, [r5, #0]
 800f32c:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800f32e:	802c      	strh	r4, [r5, #0]
 800f330:	601c      	str	r4, [r3, #0]
 800f332:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f336:	f7ff ffbd 	bl	800f2b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f33a:	f1b9 0f03 	cmp.w	r9, #3
 800f33e:	f340 80c1 	ble.w	800f4c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800f342:	4631      	mov	r1, r6
 800f344:	a80c      	add	r0, sp, #48	@ 0x30
 800f346:	f007 fdab 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f34a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800f34e:	9306      	str	r3, [sp, #24]
 800f350:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800f354:	9307      	str	r3, [sp, #28]
 800f356:	9b03      	ldr	r3, [sp, #12]
 800f358:	f8d3 a000 	ldr.w	sl, [r3]
 800f35c:	f1ba 0f00 	cmp.w	sl, #0
 800f360:	f000 80b3 	beq.w	800f4ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800f364:	4651      	mov	r1, sl
 800f366:	a810      	add	r0, sp, #64	@ 0x40
 800f368:	f007 fd9a 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f36c:	2002      	movs	r0, #2
 800f36e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800f372:	9b01      	ldr	r3, [sp, #4]
 800f374:	9a06      	ldr	r2, [sp, #24]
 800f376:	fb91 f1f0 	sdiv	r1, r1, r0
 800f37a:	189d      	adds	r5, r3, r2
 800f37c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800f380:	9a07      	ldr	r2, [sp, #28]
 800f382:	4419      	add	r1, r3
 800f384:	9b02      	ldr	r3, [sp, #8]
 800f386:	4413      	add	r3, r2
 800f388:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800f38c:	1a6d      	subs	r5, r5, r1
 800f38e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800f392:	fb92 f2f0 	sdiv	r2, r2, r0
 800f396:	440a      	add	r2, r1
 800f398:	1a9b      	subs	r3, r3, r2
 800f39a:	435b      	muls	r3, r3
 800f39c:	fb05 3505 	mla	r5, r5, r5, r3
 800f3a0:	4f4c      	ldr	r7, [pc, #304]	@ (800f4d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800f3a2:	ac10      	add	r4, sp, #64	@ 0x40
 800f3a4:	f1b9 0f0c 	cmp.w	r9, #12
 800f3a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f3aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3ac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f3ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3b0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f3b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3b4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f3b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f3bc:	f04f 0303 	mov.w	r3, #3
 800f3c0:	bfd8      	it	le
 800f3c2:	f109 32ff 	addle.w	r2, r9, #4294967295
 800f3c6:	f04f 0400 	mov.w	r4, #0
 800f3ca:	f8cd 9000 	str.w	r9, [sp]
 800f3ce:	bfcc      	ite	gt
 800f3d0:	4698      	movgt	r8, r3
 800f3d2:	fb92 f8f3 	sdivle	r8, r2, r3
 800f3d6:	1c63      	adds	r3, r4, #1
 800f3d8:	aa10      	add	r2, sp, #64	@ 0x40
 800f3da:	f004 0401 	and.w	r4, r4, #1
 800f3de:	f04f 0b00 	mov.w	fp, #0
 800f3e2:	9308      	str	r3, [sp, #32]
 800f3e4:	9b00      	ldr	r3, [sp, #0]
 800f3e6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800f3ea:	fb93 f3f8 	sdiv	r3, r3, r8
 800f3ee:	3404      	adds	r4, #4
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	9304      	str	r3, [sp, #16]
 800f3f4:	9a04      	ldr	r2, [sp, #16]
 800f3f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f3fa:	fb13 f302 	smulbb	r3, r3, r2
 800f3fe:	9a01      	ldr	r2, [sp, #4]
 800f400:	b29b      	uxth	r3, r3
 800f402:	1899      	adds	r1, r3, r2
 800f404:	9305      	str	r3, [sp, #20]
 800f406:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f40a:	b209      	sxth	r1, r1
 800f40c:	4299      	cmp	r1, r3
 800f40e:	db4d      	blt.n	800f4ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f410:	8932      	ldrh	r2, [r6, #8]
 800f412:	4413      	add	r3, r2
 800f414:	b21b      	sxth	r3, r3
 800f416:	4299      	cmp	r1, r3
 800f418:	da48      	bge.n	800f4ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f41a:	9b04      	ldr	r3, [sp, #16]
 800f41c:	6827      	ldr	r7, [r4, #0]
 800f41e:	fb17 f703 	smulbb	r7, r7, r3
 800f422:	9b02      	ldr	r3, [sp, #8]
 800f424:	b2bf      	uxth	r7, r7
 800f426:	18fa      	adds	r2, r7, r3
 800f428:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f42c:	b212      	sxth	r2, r2
 800f42e:	429a      	cmp	r2, r3
 800f430:	db3c      	blt.n	800f4ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f432:	8970      	ldrh	r0, [r6, #10]
 800f434:	4403      	add	r3, r0
 800f436:	b21b      	sxth	r3, r3
 800f438:	429a      	cmp	r2, r3
 800f43a:	da37      	bge.n	800f4ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f43c:	2300      	movs	r3, #0
 800f43e:	4630      	mov	r0, r6
 800f440:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f442:	ab0b      	add	r3, sp, #44	@ 0x2c
 800f444:	f7ff ff36 	bl	800f2b4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800f448:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f44a:	b37a      	cbz	r2, 800f4ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f44c:	4552      	cmp	r2, sl
 800f44e:	d02d      	beq.n	800f4ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800f450:	4611      	mov	r1, r2
 800f452:	a80e      	add	r0, sp, #56	@ 0x38
 800f454:	9209      	str	r2, [sp, #36]	@ 0x24
 800f456:	f007 fd23 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f45a:	f04f 0e02 	mov.w	lr, #2
 800f45e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800f462:	9a06      	ldr	r2, [sp, #24]
 800f464:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800f468:	9b01      	ldr	r3, [sp, #4]
 800f46a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800f46e:	4413      	add	r3, r2
 800f470:	9a07      	ldr	r2, [sp, #28]
 800f472:	fb91 f1fe 	sdiv	r1, r1, lr
 800f476:	fb9c fcfe 	sdiv	ip, ip, lr
 800f47a:	4401      	add	r1, r0
 800f47c:	1a58      	subs	r0, r3, r1
 800f47e:	9b02      	ldr	r3, [sp, #8]
 800f480:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800f484:	4413      	add	r3, r2
 800f486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f488:	448c      	add	ip, r1
 800f48a:	eba3 030c 	sub.w	r3, r3, ip
 800f48e:	435b      	muls	r3, r3
 800f490:	fb00 3300 	mla	r3, r0, r0, r3
 800f494:	42ab      	cmp	r3, r5
 800f496:	d208      	bcs.n	800f4aa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800f498:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f49a:	461d      	mov	r5, r3
 800f49c:	9803      	ldr	r0, [sp, #12]
 800f49e:	6001      	str	r1, [r0, #0]
 800f4a0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800f4a2:	9805      	ldr	r0, [sp, #20]
 800f4a4:	8008      	strh	r0, [r1, #0]
 800f4a6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800f4a8:	800f      	strh	r7, [r1, #0]
 800f4aa:	4692      	mov	sl, r2
 800f4ac:	f10b 0b01 	add.w	fp, fp, #1
 800f4b0:	3408      	adds	r4, #8
 800f4b2:	f1bb 0f04 	cmp.w	fp, #4
 800f4b6:	d19d      	bne.n	800f3f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800f4b8:	9b00      	ldr	r3, [sp, #0]
 800f4ba:	9c08      	ldr	r4, [sp, #32]
 800f4bc:	444b      	add	r3, r9
 800f4be:	4544      	cmp	r4, r8
 800f4c0:	9300      	str	r3, [sp, #0]
 800f4c2:	d188      	bne.n	800f3d6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800f4c4:	b021      	add	sp, #132	@ 0x84
 800f4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ca:	f04f 35ff 	mov.w	r5, #4294967295
 800f4ce:	e767      	b.n	800f3a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800f4d0:	24025934 	.word	0x24025934
 800f4d4:	08025d40 	.word	0x08025d40

0800f4d8 <_ZN8touchgfx4RectaNERKS0_>:
 800f4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4dc:	f9b1 7000 	ldrsh.w	r7, [r1]
 800f4e0:	888c      	ldrh	r4, [r1, #4]
 800f4e2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800f4e6:	443c      	add	r4, r7
 800f4e8:	b2a4      	uxth	r4, r4
 800f4ea:	fa0f f884 	sxth.w	r8, r4
 800f4ee:	45c1      	cmp	r9, r8
 800f4f0:	da2f      	bge.n	800f552 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f4f2:	8882      	ldrh	r2, [r0, #4]
 800f4f4:	444a      	add	r2, r9
 800f4f6:	b292      	uxth	r2, r2
 800f4f8:	fa0f fe82 	sxth.w	lr, r2
 800f4fc:	4577      	cmp	r7, lr
 800f4fe:	da28      	bge.n	800f552 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f500:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800f504:	88cb      	ldrh	r3, [r1, #6]
 800f506:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800f50a:	442b      	add	r3, r5
 800f50c:	b21b      	sxth	r3, r3
 800f50e:	429e      	cmp	r6, r3
 800f510:	da1f      	bge.n	800f552 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f512:	88c3      	ldrh	r3, [r0, #6]
 800f514:	4433      	add	r3, r6
 800f516:	b29b      	uxth	r3, r3
 800f518:	fa0f fc83 	sxth.w	ip, r3
 800f51c:	4565      	cmp	r5, ip
 800f51e:	da18      	bge.n	800f552 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800f520:	454f      	cmp	r7, r9
 800f522:	bfb8      	it	lt
 800f524:	464f      	movlt	r7, r9
 800f526:	42b5      	cmp	r5, r6
 800f528:	bfb8      	it	lt
 800f52a:	4635      	movlt	r5, r6
 800f52c:	45f0      	cmp	r8, lr
 800f52e:	bfd8      	it	le
 800f530:	4622      	movle	r2, r4
 800f532:	1bd2      	subs	r2, r2, r7
 800f534:	8082      	strh	r2, [r0, #4]
 800f536:	884a      	ldrh	r2, [r1, #2]
 800f538:	88c9      	ldrh	r1, [r1, #6]
 800f53a:	8007      	strh	r7, [r0, #0]
 800f53c:	440a      	add	r2, r1
 800f53e:	8045      	strh	r5, [r0, #2]
 800f540:	b292      	uxth	r2, r2
 800f542:	b211      	sxth	r1, r2
 800f544:	458c      	cmp	ip, r1
 800f546:	bfa8      	it	ge
 800f548:	4613      	movge	r3, r2
 800f54a:	1b5b      	subs	r3, r3, r5
 800f54c:	80c3      	strh	r3, [r0, #6]
 800f54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f552:	2300      	movs	r3, #0
 800f554:	8003      	strh	r3, [r0, #0]
 800f556:	8043      	strh	r3, [r0, #2]
 800f558:	8083      	strh	r3, [r0, #4]
 800f55a:	80c3      	strh	r3, [r0, #6]
 800f55c:	e7f7      	b.n	800f54e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800f55e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800f55e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	dd06      	ble.n	800f574 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800f566:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800f56a:	2800      	cmp	r0, #0
 800f56c:	bfcc      	ite	gt
 800f56e:	2000      	movgt	r0, #0
 800f570:	2001      	movle	r0, #1
 800f572:	4770      	bx	lr
 800f574:	2001      	movs	r0, #1
 800f576:	4770      	bx	lr

0800f578 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800f578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f57c:	2300      	movs	r3, #0
 800f57e:	4604      	mov	r4, r0
 800f580:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f582:	8003      	strh	r3, [r0, #0]
 800f584:	8043      	strh	r3, [r0, #2]
 800f586:	8083      	strh	r3, [r0, #4]
 800f588:	80c3      	strh	r3, [r0, #6]
 800f58a:	2d00      	cmp	r5, #0
 800f58c:	d040      	beq.n	800f610 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800f58e:	1d28      	adds	r0, r5, #4
 800f590:	f7ff ffe5 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f594:	b988      	cbnz	r0, 800f5ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f596:	4620      	mov	r0, r4
 800f598:	f7ff ffe1 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f59c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800f5a0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f5a4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800f5a8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800f5ac:	b138      	cbz	r0, 800f5be <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800f5ae:	8022      	strh	r2, [r4, #0]
 800f5b0:	8063      	strh	r3, [r4, #2]
 800f5b2:	f8a4 e004 	strh.w	lr, [r4, #4]
 800f5b6:	f8a4 c006 	strh.w	ip, [r4, #6]
 800f5ba:	69ad      	ldr	r5, [r5, #24]
 800f5bc:	e7e5      	b.n	800f58a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800f5be:	f9b4 0000 	ldrsh.w	r0, [r4]
 800f5c2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800f5c6:	4290      	cmp	r0, r2
 800f5c8:	4607      	mov	r7, r0
 800f5ca:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800f5ce:	460e      	mov	r6, r1
 800f5d0:	bfa8      	it	ge
 800f5d2:	4617      	movge	r7, r2
 800f5d4:	4299      	cmp	r1, r3
 800f5d6:	4472      	add	r2, lr
 800f5d8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800f5dc:	bfa8      	it	ge
 800f5de:	461e      	movge	r6, r3
 800f5e0:	4440      	add	r0, r8
 800f5e2:	4471      	add	r1, lr
 800f5e4:	4463      	add	r3, ip
 800f5e6:	b200      	sxth	r0, r0
 800f5e8:	8027      	strh	r7, [r4, #0]
 800f5ea:	b212      	sxth	r2, r2
 800f5ec:	8066      	strh	r6, [r4, #2]
 800f5ee:	b209      	sxth	r1, r1
 800f5f0:	b21b      	sxth	r3, r3
 800f5f2:	4290      	cmp	r0, r2
 800f5f4:	bfac      	ite	ge
 800f5f6:	ebc7 0200 	rsbge	r2, r7, r0
 800f5fa:	ebc7 0202 	rsblt	r2, r7, r2
 800f5fe:	4299      	cmp	r1, r3
 800f600:	bfac      	ite	ge
 800f602:	ebc6 0301 	rsbge	r3, r6, r1
 800f606:	ebc6 0303 	rsblt	r3, r6, r3
 800f60a:	80a2      	strh	r2, [r4, #4]
 800f60c:	80e3      	strh	r3, [r4, #6]
 800f60e:	e7d4      	b.n	800f5ba <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800f610:	4620      	mov	r0, r4
 800f612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f616 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f616:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f61a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f61e:	b383      	cbz	r3, 800f682 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f620:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f622:	b374      	cbz	r4, 800f682 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f624:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f628:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f62c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f630:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f634:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f638:	b303      	cbz	r3, 800f67c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f63a:	4668      	mov	r0, sp
 800f63c:	1d21      	adds	r1, r4, #4
 800f63e:	f8ad 5000 	strh.w	r5, [sp]
 800f642:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f646:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f64a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f64e:	f7ff ff43 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 800f652:	4668      	mov	r0, sp
 800f654:	f7ff ff83 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f658:	b980      	cbnz	r0, 800f67c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f65a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f65e:	4669      	mov	r1, sp
 800f660:	88a2      	ldrh	r2, [r4, #4]
 800f662:	4620      	mov	r0, r4
 800f664:	1a9b      	subs	r3, r3, r2
 800f666:	88e2      	ldrh	r2, [r4, #6]
 800f668:	f8ad 3000 	strh.w	r3, [sp]
 800f66c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f670:	1a9b      	subs	r3, r3, r2
 800f672:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f676:	6823      	ldr	r3, [r4, #0]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	4798      	blx	r3
 800f67c:	69a4      	ldr	r4, [r4, #24]
 800f67e:	2c00      	cmp	r4, #0
 800f680:	d1d8      	bne.n	800f634 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f682:	b002      	add	sp, #8
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f688 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f688:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f68a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f68e:	460d      	mov	r5, r1
 800f690:	4616      	mov	r6, r2
 800f692:	b323      	cbz	r3, 800f6de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f694:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f696:	b314      	cbz	r4, 800f6de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f698:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f69c:	b1eb      	cbz	r3, 800f6da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f69e:	6828      	ldr	r0, [r5, #0]
 800f6a0:	466b      	mov	r3, sp
 800f6a2:	6869      	ldr	r1, [r5, #4]
 800f6a4:	c303      	stmia	r3!, {r0, r1}
 800f6a6:	4668      	mov	r0, sp
 800f6a8:	1d21      	adds	r1, r4, #4
 800f6aa:	f7ff ff15 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 800f6ae:	4668      	mov	r0, sp
 800f6b0:	f7ff ff55 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 800f6b4:	b988      	cbnz	r0, 800f6da <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f6b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800f6ba:	4669      	mov	r1, sp
 800f6bc:	88a2      	ldrh	r2, [r4, #4]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	1a9b      	subs	r3, r3, r2
 800f6c2:	88e2      	ldrh	r2, [r4, #6]
 800f6c4:	f8ad 3000 	strh.w	r3, [sp]
 800f6c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f6cc:	1a9b      	subs	r3, r3, r2
 800f6ce:	4632      	mov	r2, r6
 800f6d0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f6d4:	6823      	ldr	r3, [r4, #0]
 800f6d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6d8:	4798      	blx	r3
 800f6da:	69a4      	ldr	r4, [r4, #24]
 800f6dc:	e7db      	b.n	800f696 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f6de:	b002      	add	sp, #8
 800f6e0:	bd70      	pop	{r4, r5, r6, pc}

0800f6e2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f6e2:	6803      	ldr	r3, [r0, #0]
 800f6e4:	b513      	push	{r0, r1, r4, lr}
 800f6e6:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	e9cd 3300 	strd	r3, r3, [sp]
 800f6f0:	466b      	mov	r3, sp
 800f6f2:	47a0      	blx	r4
 800f6f4:	b002      	add	sp, #8
 800f6f6:	bd10      	pop	{r4, pc}

0800f6f8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800f6fe:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800f702:	4770      	bx	lr

0800f704 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f704:	2301      	movs	r3, #1
 800f706:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800f70a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800f70e:	4770      	bx	lr

0800f710 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f710:	6843      	ldr	r3, [r0, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	725a      	strb	r2, [r3, #9]
 800f716:	6840      	ldr	r0, [r0, #4]
 800f718:	6803      	ldr	r3, [r0, #0]
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	4718      	bx	r3

0800f71e <_ZN8touchgfx3HAL8flushDMAEv>:
 800f71e:	6840      	ldr	r0, [r0, #4]
 800f720:	6803      	ldr	r3, [r0, #0]
 800f722:	689b      	ldr	r3, [r3, #8]
 800f724:	4718      	bx	r3

0800f726 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800f726:	b530      	push	{r4, r5, lr}
 800f728:	b08b      	sub	sp, #44	@ 0x2c
 800f72a:	6804      	ldr	r4, [r0, #0]
 800f72c:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800f730:	9509      	str	r5, [sp, #36]	@ 0x24
 800f732:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800f736:	9508      	str	r5, [sp, #32]
 800f738:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800f73c:	9507      	str	r5, [sp, #28]
 800f73e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800f742:	9506      	str	r5, [sp, #24]
 800f744:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800f748:	9505      	str	r5, [sp, #20]
 800f74a:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800f74e:	9504      	str	r5, [sp, #16]
 800f750:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800f754:	9503      	str	r5, [sp, #12]
 800f756:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800f75a:	9502      	str	r5, [sp, #8]
 800f75c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800f760:	e9cd 3500 	strd	r3, r5, [sp]
 800f764:	4613      	mov	r3, r2
 800f766:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800f768:	2200      	movs	r2, #0
 800f76a:	47a0      	blx	r4
 800f76c:	b00b      	add	sp, #44	@ 0x2c
 800f76e:	bd30      	pop	{r4, r5, pc}

0800f770 <_ZN8touchgfx3HAL10beginFrameEv>:
 800f770:	4b04      	ldr	r3, [pc, #16]	@ (800f784 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	b123      	cbz	r3, 800f780 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f776:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800f77a:	f080 0001 	eor.w	r0, r0, #1
 800f77e:	4770      	bx	lr
 800f780:	2001      	movs	r0, #1
 800f782:	4770      	bx	lr
 800f784:	24025932 	.word	0x24025932

0800f788 <_ZN8touchgfx3HAL8endFrameEv>:
 800f788:	b510      	push	{r4, lr}
 800f78a:	4604      	mov	r4, r0
 800f78c:	6840      	ldr	r0, [r0, #4]
 800f78e:	6803      	ldr	r3, [r0, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	4798      	blx	r3
 800f794:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800f798:	b113      	cbz	r3, 800f7a0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f79a:	2301      	movs	r3, #1
 800f79c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f7a0:	bd10      	pop	{r4, pc}

0800f7a2 <_ZN8touchgfx3HAL10initializeEv>:
 800f7a2:	b510      	push	{r4, lr}
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	f7f3 fb0d 	bl	8002dc4 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f7aa:	f7f2 fb53 	bl	8001e54 <_ZN8touchgfx4GPIO4initEv>
 800f7ae:	6860      	ldr	r0, [r4, #4]
 800f7b0:	6803      	ldr	r3, [r0, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	4798      	blx	r3
 800f7b6:	68e0      	ldr	r0, [r4, #12]
 800f7b8:	6803      	ldr	r3, [r0, #0]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	4798      	blx	r3
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7c8:	4718      	bx	r3
	...

0800f7cc <_ZN8touchgfx3HAL4tickEv>:
 800f7cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f7ce:	6803      	ldr	r3, [r0, #0]
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	4d62      	ldr	r5, [pc, #392]	@ (800f95c <_ZN8touchgfx3HAL4tickEv+0x190>)
 800f7d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f7d8:	4798      	blx	r3
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	f000 809e 	beq.w	800f91c <_ZN8touchgfx3HAL4tickEv+0x150>
 800f7e0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	d002      	beq.n	800f7ee <_ZN8touchgfx3HAL4tickEv+0x22>
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	f7f2 fa99 	bl	8001d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f7ee:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800f7f2:	2600      	movs	r6, #0
 800f7f4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f7f8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800f7fc:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800f800:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800f804:	b133      	cbz	r3, 800f814 <_ZN8touchgfx3HAL4tickEv+0x48>
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	4620      	mov	r0, r4
 800f80a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f80e:	4798      	blx	r3
 800f810:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f814:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800f818:	2601      	movs	r6, #1
 800f81a:	6862      	ldr	r2, [r4, #4]
 800f81c:	f083 0301 	eor.w	r3, r3, #1
 800f820:	702e      	strb	r6, [r5, #0]
 800f822:	7253      	strb	r3, [r2, #9]
 800f824:	f006 f8e8 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800f828:	6803      	ldr	r3, [r0, #0]
 800f82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f82c:	4798      	blx	r3
 800f82e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f832:	b90b      	cbnz	r3, 800f838 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800f834:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800f838:	f006 f8de 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800f83c:	6803      	ldr	r3, [r0, #0]
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	4798      	blx	r3
 800f842:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f844:	6803      	ldr	r3, [r0, #0]
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	4798      	blx	r3
 800f84a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f84e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800f852:	3b01      	subs	r3, #1
 800f854:	b2db      	uxtb	r3, r3
 800f856:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f85a:	b10a      	cbz	r2, 800f860 <_ZN8touchgfx3HAL4tickEv+0x94>
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1eb      	bne.n	800f838 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800f860:	4a3f      	ldr	r2, [pc, #252]	@ (800f960 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800f862:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800f866:	7813      	ldrb	r3, [r2, #0]
 800f868:	3301      	adds	r3, #1
 800f86a:	b25b      	sxtb	r3, r3
 800f86c:	4299      	cmp	r1, r3
 800f86e:	7013      	strb	r3, [r2, #0]
 800f870:	dc10      	bgt.n	800f894 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f872:	2300      	movs	r3, #0
 800f874:	68e0      	ldr	r0, [r4, #12]
 800f876:	a902      	add	r1, sp, #8
 800f878:	7013      	strb	r3, [r2, #0]
 800f87a:	aa03      	add	r2, sp, #12
 800f87c:	6803      	ldr	r3, [r0, #0]
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	4798      	blx	r3
 800f882:	6823      	ldr	r3, [r4, #0]
 800f884:	2800      	cmp	r0, #0
 800f886:	d059      	beq.n	800f93c <_ZN8touchgfx3HAL4tickEv+0x170>
 800f888:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f88c:	4620      	mov	r0, r4
 800f88e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f892:	4798      	blx	r3
 800f894:	2300      	movs	r3, #0
 800f896:	6960      	ldr	r0, [r4, #20]
 800f898:	f88d 3007 	strb.w	r3, [sp, #7]
 800f89c:	b158      	cbz	r0, 800f8b6 <_ZN8touchgfx3HAL4tickEv+0xea>
 800f89e:	6803      	ldr	r3, [r0, #0]
 800f8a0:	f10d 0107 	add.w	r1, sp, #7
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	4798      	blx	r3
 800f8a8:	b128      	cbz	r0, 800f8b6 <_ZN8touchgfx3HAL4tickEv+0xea>
 800f8aa:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f8ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f8b0:	6803      	ldr	r3, [r0, #0]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	4798      	blx	r3
 800f8b6:	f104 001c 	add.w	r0, r4, #28
 800f8ba:	f013 fea7 	bl	802360c <_ZN8touchgfx8Gestures4tickEv>
 800f8be:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800f8c2:	b30b      	cbz	r3, 800f908 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800f8c4:	6920      	ldr	r0, [r4, #16]
 800f8c6:	6803      	ldr	r3, [r0, #0]
 800f8c8:	691b      	ldr	r3, [r3, #16]
 800f8ca:	4798      	blx	r3
 800f8cc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	b903      	cbnz	r3, 800f8d4 <_ZN8touchgfx3HAL4tickEv+0x108>
 800f8d2:	6760      	str	r0, [r4, #116]	@ 0x74
 800f8d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f8d6:	4a23      	ldr	r2, [pc, #140]	@ (800f964 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800f8d8:	1af3      	subs	r3, r6, r3
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d914      	bls.n	800f908 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800f8de:	6920      	ldr	r0, [r4, #16]
 800f8e0:	6803      	ldr	r3, [r0, #0]
 800f8e2:	699b      	ldr	r3, [r3, #24]
 800f8e4:	4798      	blx	r3
 800f8e6:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f8e8:	2264      	movs	r2, #100	@ 0x64
 800f8ea:	1af3      	subs	r3, r6, r3
 800f8ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8f0:	fbb0 f0f3 	udiv	r0, r0, r3
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	dc26      	bgt.n	800f946 <_ZN8touchgfx3HAL4tickEv+0x17a>
 800f8f8:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800f8fc:	6920      	ldr	r0, [r4, #16]
 800f8fe:	2100      	movs	r1, #0
 800f900:	6803      	ldr	r3, [r0, #0]
 800f902:	69db      	ldr	r3, [r3, #28]
 800f904:	4798      	blx	r3
 800f906:	6766      	str	r6, [r4, #116]	@ 0x74
 800f908:	6823      	ldr	r3, [r4, #0]
 800f90a:	4620      	mov	r0, r4
 800f90c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f910:	4798      	blx	r3
 800f912:	f006 f871 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 800f916:	6803      	ldr	r3, [r0, #0]
 800f918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f91a:	4798      	blx	r3
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	4620      	mov	r0, r4
 800f920:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f924:	4798      	blx	r3
 800f926:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f92a:	2b02      	cmp	r3, #2
 800f92c:	d002      	beq.n	800f934 <_ZN8touchgfx3HAL4tickEv+0x168>
 800f92e:	2001      	movs	r0, #1
 800f930:	f7f2 fa26 	bl	8001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f934:	2300      	movs	r3, #0
 800f936:	702b      	strb	r3, [r5, #0]
 800f938:	b004      	add	sp, #16
 800f93a:	bd70      	pop	{r4, r5, r6, pc}
 800f93c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800f940:	4620      	mov	r0, r4
 800f942:	4798      	blx	r3
 800f944:	e7a6      	b.n	800f894 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f946:	2863      	cmp	r0, #99	@ 0x63
 800f948:	bfcb      	itete	gt
 800f94a:	2300      	movgt	r3, #0
 800f94c:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800f950:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800f954:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800f958:	e7d0      	b.n	800f8fc <_ZN8touchgfx3HAL4tickEv+0x130>
 800f95a:	bf00      	nop
 800f95c:	24025938 	.word	0x24025938
 800f960:	24025939 	.word	0x24025939
 800f964:	05f5e100 	.word	0x05f5e100

0800f968 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f968:	b510      	push	{r4, lr}
 800f96a:	4604      	mov	r4, r0
 800f96c:	f7f3 fa5a 	bl	8002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800f970:	2200      	movs	r2, #0
 800f972:	6863      	ldr	r3, [r4, #4]
 800f974:	729a      	strb	r2, [r3, #10]
 800f976:	bd10      	pop	{r4, pc}

0800f978 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f978:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800f97a:	301c      	adds	r0, #28
 800f97c:	f013 be44 	b.w	8023608 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f980 <_ZN8touchgfx3HAL5touchEll>:
 800f980:	b530      	push	{r4, r5, lr}
 800f982:	b087      	sub	sp, #28
 800f984:	4604      	mov	r4, r0
 800f986:	a804      	add	r0, sp, #16
 800f988:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f98c:	f005 fe3e 	bl	801560c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f990:	9b04      	ldr	r3, [sp, #16]
 800f992:	a906      	add	r1, sp, #24
 800f994:	a803      	add	r0, sp, #12
 800f996:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f99a:	9b05      	ldr	r3, [sp, #20]
 800f99c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f9a0:	f005 fe86 	bl	80156b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f9a4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800f9a8:	f104 001c 	add.w	r0, r4, #28
 800f9ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f9b0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f9b4:	b189      	cbz	r1, 800f9da <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f9b6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800f9c2:	462a      	mov	r2, r5
 800f9c4:	f013 fe30 	bl	8023628 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f9c8:	b128      	cbz	r0, 800f9d6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800f9ca:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f9ce:	6623      	str	r3, [r4, #96]	@ 0x60
 800f9d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f9d4:	6663      	str	r3, [r4, #100]	@ 0x64
 800f9d6:	b007      	add	sp, #28
 800f9d8:	bd30      	pop	{r4, r5, pc}
 800f9da:	f013 fe65 	bl	80236a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f9e4:	e7f1      	b.n	800f9ca <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f9e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f9e6:	b510      	push	{r4, lr}
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d046      	beq.n	800fa7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f9ec:	ea81 0002 	eor.w	r0, r1, r2
 800f9f0:	07c4      	lsls	r4, r0, #31
 800f9f2:	d508      	bpl.n	800fa06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f9f4:	440b      	add	r3, r1
 800f9f6:	3a01      	subs	r2, #1
 800f9f8:	428b      	cmp	r3, r1
 800f9fa:	d93e      	bls.n	800fa7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f9fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fa00:	f801 0b01 	strb.w	r0, [r1], #1
 800fa04:	e7f8      	b.n	800f9f8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800fa06:	07d0      	lsls	r0, r2, #31
 800fa08:	bf42      	ittt	mi
 800fa0a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800fa0e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800fa12:	f801 0b01 	strbmi.w	r0, [r1], #1
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d911      	bls.n	800fa3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fa1a:	ea81 0402 	eor.w	r4, r1, r2
 800fa1e:	4610      	mov	r0, r2
 800fa20:	07a4      	lsls	r4, r4, #30
 800fa22:	d022      	beq.n	800fa6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800fa24:	f023 0401 	bic.w	r4, r3, #1
 800fa28:	440c      	add	r4, r1
 800fa2a:	428c      	cmp	r4, r1
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	d904      	bls.n	800fa3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800fa30:	8812      	ldrh	r2, [r2, #0]
 800fa32:	3002      	adds	r0, #2
 800fa34:	f821 2b02 	strh.w	r2, [r1], #2
 800fa38:	e7f7      	b.n	800fa2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800fa3a:	f003 0301 	and.w	r3, r3, #1
 800fa3e:	f023 0003 	bic.w	r0, r3, #3
 800fa42:	4408      	add	r0, r1
 800fa44:	4288      	cmp	r0, r1
 800fa46:	4614      	mov	r4, r2
 800fa48:	d904      	bls.n	800fa54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800fa4a:	6824      	ldr	r4, [r4, #0]
 800fa4c:	3204      	adds	r2, #4
 800fa4e:	f841 4b04 	str.w	r4, [r1], #4
 800fa52:	e7f7      	b.n	800fa44 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800fa54:	f003 0303 	and.w	r3, r3, #3
 800fa58:	3a01      	subs	r2, #1
 800fa5a:	440b      	add	r3, r1
 800fa5c:	428b      	cmp	r3, r1
 800fa5e:	d90c      	bls.n	800fa7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800fa60:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800fa64:	f801 0b01 	strb.w	r0, [r1], #1
 800fa68:	e7f8      	b.n	800fa5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800fa6a:	0790      	lsls	r0, r2, #30
 800fa6c:	d0e7      	beq.n	800fa3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fa6e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800fa72:	3b02      	subs	r3, #2
 800fa74:	f821 0b02 	strh.w	r0, [r1], #2
 800fa78:	e7e1      	b.n	800fa3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800fa7a:	2001      	movs	r0, #1
 800fa7c:	bd10      	pop	{r4, pc}

0800fa7e <_ZN8touchgfx3HAL7noTouchEv>:
 800fa7e:	b510      	push	{r4, lr}
 800fa80:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800fa84:	4604      	mov	r4, r0
 800fa86:	b153      	cbz	r3, 800fa9e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800fa88:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800fa8c:	2101      	movs	r1, #1
 800fa8e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800fa92:	301c      	adds	r0, #28
 800fa94:	f013 fe08 	bl	80236a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800fa9e:	bd10      	pop	{r4, pc}

0800faa0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800faa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faa4:	b085      	sub	sp, #20
 800faa6:	4604      	mov	r4, r0
 800faa8:	2000      	movs	r0, #0
 800faaa:	4699      	mov	r9, r3
 800faac:	ad04      	add	r5, sp, #16
 800faae:	460f      	mov	r7, r1
 800fab0:	4690      	mov	r8, r2
 800fab2:	f845 0d04 	str.w	r0, [r5, #-4]!
 800fab6:	69a0      	ldr	r0, [r4, #24]
 800fab8:	6806      	ldr	r6, [r0, #0]
 800faba:	9501      	str	r5, [sp, #4]
 800fabc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800fac0:	9500      	str	r5, [sp, #0]
 800fac2:	6835      	ldr	r5, [r6, #0]
 800fac4:	47a8      	blx	r5
 800fac6:	4d10      	ldr	r5, [pc, #64]	@ (800fb08 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800fac8:	4606      	mov	r6, r0
 800faca:	f8a5 9000 	strh.w	r9, [r5]
 800face:	f7f4 fab5 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800fad2:	6803      	ldr	r3, [r0, #0]
 800fad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad6:	4798      	blx	r3
 800fad8:	b128      	cbz	r0, 800fae6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800fada:	2801      	cmp	r0, #1
 800fadc:	d00b      	beq.n	800faf6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800fade:	4630      	mov	r0, r6
 800fae0:	b005      	add	sp, #20
 800fae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fae6:	882b      	ldrh	r3, [r5, #0]
 800fae8:	fb08 7203 	mla	r2, r8, r3, r7
 800faec:	9b03      	ldr	r3, [sp, #12]
 800faee:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800faf2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800faf4:	e7f3      	b.n	800fade <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800faf6:	882a      	ldrh	r2, [r5, #0]
 800faf8:	9b03      	ldr	r3, [sp, #12]
 800fafa:	fb08 7202 	mla	r2, r8, r2, r7
 800fafe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fb02:	1a9a      	subs	r2, r3, r2
 800fb04:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800fb06:	e7ea      	b.n	800fade <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800fb08:	2402592e 	.word	0x2402592e

0800fb0c <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800fb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0e:	4b15      	ldr	r3, [pc, #84]	@ (800fb64 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800fb10:	460f      	mov	r7, r1
 800fb12:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800fb16:	4606      	mov	r6, r0
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800fb1c:	fb93 f4f4 	sdiv	r4, r3, r4
 800fb20:	f7f4 fa8c 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800fb24:	6803      	ldr	r3, [r0, #0]
 800fb26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb28:	4798      	blx	r3
 800fb2a:	2801      	cmp	r0, #1
 800fb2c:	d00b      	beq.n	800fb46 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800fb2e:	d303      	bcc.n	800fb38 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800fb30:	2802      	cmp	r0, #2
 800fb32:	d010      	beq.n	800fb56 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800fb34:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800fb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb38:	4b0b      	ldr	r3, [pc, #44]	@ (800fb68 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800fb3a:	437c      	muls	r4, r7
 800fb3c:	8819      	ldrh	r1, [r3, #0]
 800fb3e:	434c      	muls	r4, r1
 800fb40:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800fb44:	e7f6      	b.n	800fb34 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800fb46:	4b08      	ldr	r3, [pc, #32]	@ (800fb68 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800fb48:	437c      	muls	r4, r7
 800fb4a:	8819      	ldrh	r1, [r3, #0]
 800fb4c:	434c      	muls	r4, r1
 800fb4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fb52:	1b2d      	subs	r5, r5, r4
 800fb54:	e7ee      	b.n	800fb34 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800fb56:	4b04      	ldr	r3, [pc, #16]	@ (800fb68 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800fb58:	437c      	muls	r4, r7
 800fb5a:	8819      	ldrh	r1, [r3, #0]
 800fb5c:	434c      	muls	r4, r1
 800fb5e:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800fb62:	e7e7      	b.n	800fb34 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800fb64:	24025930 	.word	0x24025930
 800fb68:	2402592e 	.word	0x2402592e

0800fb6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800fb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb6e:	b08b      	sub	sp, #44	@ 0x2c
 800fb70:	4617      	mov	r7, r2
 800fb72:	4604      	mov	r4, r0
 800fb74:	460e      	mov	r6, r1
 800fb76:	461d      	mov	r5, r3
 800fb78:	f7f4 fa60 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800fb7c:	6803      	ldr	r3, [r0, #0]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb80:	4798      	blx	r3
 800fb82:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800fb86:	9007      	str	r0, [sp, #28]
 800fb88:	4631      	mov	r1, r6
 800fb8a:	6822      	ldr	r2, [r4, #0]
 800fb8c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fb90:	4b0c      	ldr	r3, [pc, #48]	@ (800fbc4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800fb92:	4620      	mov	r0, r4
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	9306      	str	r3, [sp, #24]
 800fb98:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800fb9c:	9305      	str	r3, [sp, #20]
 800fb9e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800fba2:	9304      	str	r3, [sp, #16]
 800fba4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fba8:	9303      	str	r3, [sp, #12]
 800fbaa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fbae:	9302      	str	r3, [sp, #8]
 800fbb0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800fbb4:	e9cd 5300 	strd	r5, r3, [sp]
 800fbb8:	463b      	mov	r3, r7
 800fbba:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	47a8      	blx	r5
 800fbc0:	b00b      	add	sp, #44	@ 0x2c
 800fbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbc4:	2402592e 	.word	0x2402592e

0800fbc8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800fbc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbcc:	4698      	mov	r8, r3
 800fbce:	6803      	ldr	r3, [r0, #0]
 800fbd0:	b08b      	sub	sp, #44	@ 0x2c
 800fbd2:	4617      	mov	r7, r2
 800fbd4:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800fbd6:	460e      	mov	r6, r1
 800fbd8:	4b13      	ldr	r3, [pc, #76]	@ (800fc28 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800fbda:	4604      	mov	r4, r0
 800fbdc:	f8b3 9000 	ldrh.w	r9, [r3]
 800fbe0:	f7f4 fa2c 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800fbe4:	6803      	ldr	r3, [r0, #0]
 800fbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbe8:	4798      	blx	r3
 800fbea:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800fbee:	2200      	movs	r2, #0
 800fbf0:	4631      	mov	r1, r6
 800fbf2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800fbf6:	2302      	movs	r3, #2
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800fbfe:	2301      	movs	r3, #1
 800fc00:	9305      	str	r3, [sp, #20]
 800fc02:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800fc06:	9304      	str	r3, [sp, #16]
 800fc08:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800fc0c:	9303      	str	r3, [sp, #12]
 800fc0e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800fc12:	9302      	str	r3, [sp, #8]
 800fc14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fc18:	e9cd 8300 	strd	r8, r3, [sp]
 800fc1c:	463b      	mov	r3, r7
 800fc1e:	47a8      	blx	r5
 800fc20:	b00b      	add	sp, #44	@ 0x2c
 800fc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc26:	bf00      	nop
 800fc28:	2402592e 	.word	0x2402592e

0800fc2c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800fc2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc30:	4698      	mov	r8, r3
 800fc32:	6803      	ldr	r3, [r0, #0]
 800fc34:	b087      	sub	sp, #28
 800fc36:	460e      	mov	r6, r1
 800fc38:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800fc3a:	4617      	mov	r7, r2
 800fc3c:	4b0f      	ldr	r3, [pc, #60]	@ (800fc7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800fc3e:	4604      	mov	r4, r0
 800fc40:	f8b3 9000 	ldrh.w	r9, [r3]
 800fc44:	f7f4 f9fa 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800fc48:	6803      	ldr	r3, [r0, #0]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4c:	4798      	blx	r3
 800fc4e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800fc52:	463a      	mov	r2, r7
 800fc54:	4631      	mov	r1, r6
 800fc56:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc5a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800fc5e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800fc62:	4620      	mov	r0, r4
 800fc64:	9302      	str	r3, [sp, #8]
 800fc66:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800fc6a:	9301      	str	r3, [sp, #4]
 800fc6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	4643      	mov	r3, r8
 800fc74:	47a8      	blx	r5
 800fc76:	b007      	add	sp, #28
 800fc78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc7c:	2402592e 	.word	0x2402592e

0800fc80 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	4604      	mov	r4, r0
 800fc86:	b08f      	sub	sp, #60	@ 0x3c
 800fc88:	4610      	mov	r0, r2
 800fc8a:	460d      	mov	r5, r1
 800fc8c:	4691      	mov	r9, r2
 800fc8e:	461e      	mov	r6, r3
 800fc90:	f009 fba6 	bl	80193e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	f000 809d 	beq.w	800fdd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800fc9a:	6823      	ldr	r3, [r4, #0]
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800fe38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800fca2:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800fca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca8:	4798      	blx	r3
 800fcaa:	6823      	ldr	r3, [r4, #0]
 800fcac:	4620      	mov	r0, r4
 800fcae:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800fe3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800fcb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcb4:	4798      	blx	r3
 800fcb6:	f8bb 3000 	ldrh.w	r3, [fp]
 800fcba:	4f5c      	ldr	r7, [pc, #368]	@ (800fe2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fcbc:	9301      	str	r3, [sp, #4]
 800fcbe:	f8ba 3000 	ldrh.w	r3, [sl]
 800fcc2:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	9302      	str	r3, [sp, #8]
 800fcca:	883b      	ldrh	r3, [r7, #0]
 800fccc:	9303      	str	r3, [sp, #12]
 800fcce:	4b58      	ldr	r3, [pc, #352]	@ (800fe30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fcd0:	881a      	ldrh	r2, [r3, #0]
 800fcd2:	9305      	str	r3, [sp, #20]
 800fcd4:	9204      	str	r2, [sp, #16]
 800fcd6:	f009 fcd3 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fcda:	8038      	strh	r0, [r7, #0]
 800fcdc:	4640      	mov	r0, r8
 800fcde:	f009 fd03 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fce2:	9b05      	ldr	r3, [sp, #20]
 800fce4:	b280      	uxth	r0, r0
 800fce6:	8018      	strh	r0, [r3, #0]
 800fce8:	4b52      	ldr	r3, [pc, #328]	@ (800fe34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d174      	bne.n	800fdda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800fcf0:	883b      	ldrh	r3, [r7, #0]
 800fcf2:	f8aa 0000 	strh.w	r0, [sl]
 800fcf6:	f8ab 3000 	strh.w	r3, [fp]
 800fcfa:	4648      	mov	r0, r9
 800fcfc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800fd00:	f009 fb6e 	bl	80193e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800fd04:	2200      	movs	r2, #0
 800fd06:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800fd0a:	4611      	mov	r1, r2
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800fd12:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800fd16:	f7f4 fbaf 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800fd20:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800fd24:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	dd5c      	ble.n	800fde6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fd2c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	dd58      	ble.n	800fde6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800fd34:	462a      	mov	r2, r5
 800fd36:	ab0a      	add	r3, sp, #40	@ 0x28
 800fd38:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fd3c:	6851      	ldr	r1, [r2, #4]
 800fd3e:	c303      	stmia	r3!, {r0, r1}
 800fd40:	4631      	mov	r1, r6
 800fd42:	a80a      	add	r0, sp, #40	@ 0x28
 800fd44:	f7ff fbc8 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 800fd48:	4b38      	ldr	r3, [pc, #224]	@ (800fe2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fd50:	4b37      	ldr	r3, [pc, #220]	@ (800fe30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fd52:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800fd56:	aa0a      	add	r2, sp, #40	@ 0x28
 800fd58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd5c:	910c      	str	r1, [sp, #48]	@ 0x30
 800fd5e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800fd62:	ab08      	add	r3, sp, #32
 800fd64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd68:	e883 0003 	stmia.w	r3, {r0, r1}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	a90c      	add	r1, sp, #48	@ 0x30
 800fd70:	f7ff fbb2 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 800fd74:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d13c      	bne.n	800fdf4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800fd80:	2600      	movs	r6, #0
 800fd82:	696b      	ldr	r3, [r5, #20]
 800fd84:	a908      	add	r1, sp, #32
 800fd86:	682a      	ldr	r2, [r5, #0]
 800fd88:	4628      	mov	r0, r5
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	616e      	str	r6, [r5, #20]
 800fd8e:	6892      	ldr	r2, [r2, #8]
 800fd90:	4790      	blx	r2
 800fd92:	9b05      	ldr	r3, [sp, #20]
 800fd94:	4652      	mov	r2, sl
 800fd96:	4649      	mov	r1, r9
 800fd98:	616b      	str	r3, [r5, #20]
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800fda0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800fda4:	f7f4 fb68 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 800fda8:	9a01      	ldr	r2, [sp, #4]
 800fdaa:	4b23      	ldr	r3, [pc, #140]	@ (800fe38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800fdac:	4620      	mov	r0, r4
 800fdae:	801a      	strh	r2, [r3, #0]
 800fdb0:	9a02      	ldr	r2, [sp, #8]
 800fdb2:	4b22      	ldr	r3, [pc, #136]	@ (800fe3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800fdb4:	801a      	strh	r2, [r3, #0]
 800fdb6:	9a03      	ldr	r2, [sp, #12]
 800fdb8:	4b1c      	ldr	r3, [pc, #112]	@ (800fe2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800fdba:	801a      	strh	r2, [r3, #0]
 800fdbc:	4b1c      	ldr	r3, [pc, #112]	@ (800fe30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800fdbe:	9a04      	ldr	r2, [sp, #16]
 800fdc0:	801a      	strh	r2, [r3, #0]
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800fdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdca:	4798      	blx	r3
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	4620      	mov	r0, r4
 800fdd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdd2:	4798      	blx	r3
 800fdd4:	b00f      	add	sp, #60	@ 0x3c
 800fdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdda:	883b      	ldrh	r3, [r7, #0]
 800fddc:	f8ab 0000 	strh.w	r0, [fp]
 800fde0:	f8aa 3000 	strh.w	r3, [sl]
 800fde4:	e789      	b.n	800fcfa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800fde6:	462a      	mov	r2, r5
 800fde8:	ab0a      	add	r3, sp, #40	@ 0x28
 800fdea:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800fdee:	6851      	ldr	r1, [r2, #4]
 800fdf0:	c303      	stmia	r3!, {r0, r1}
 800fdf2:	e7a9      	b.n	800fd48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800fdf4:	a807      	add	r0, sp, #28
 800fdf6:	f009 fd81 	bl	80198fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fdfa:	4606      	mov	r6, r0
 800fdfc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800fdfe:	6803      	ldr	r3, [r0, #0]
 800fe00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe02:	4798      	blx	r3
 800fe04:	4286      	cmp	r6, r0
 800fe06:	d1b8      	bne.n	800fd7a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800fe08:	f7f4 f918 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 800fe0c:	6803      	ldr	r3, [r0, #0]
 800fe0e:	4606      	mov	r6, r0
 800fe10:	a807      	add	r0, sp, #28
 800fe12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe14:	9305      	str	r3, [sp, #20]
 800fe16:	f009 fd71 	bl	80198fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800fe1a:	9b05      	ldr	r3, [sp, #20]
 800fe1c:	4601      	mov	r1, r0
 800fe1e:	4630      	mov	r0, r6
 800fe20:	4798      	blx	r3
 800fe22:	f080 0001 	eor.w	r0, r0, #1
 800fe26:	b2c0      	uxtb	r0, r0
 800fe28:	e7a8      	b.n	800fd7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800fe2a:	bf00      	nop
 800fe2c:	24025928 	.word	0x24025928
 800fe30:	2402592a 	.word	0x2402592a
 800fe34:	2402592c 	.word	0x2402592c
 800fe38:	2402592e 	.word	0x2402592e
 800fe3c:	24025930 	.word	0x24025930

0800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800fe40:	4b07      	ldr	r3, [pc, #28]	@ (800fe60 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800fe42:	b510      	push	{r4, lr}
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	4604      	mov	r4, r0
 800fe48:	b13b      	cbz	r3, 800fe5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fe4a:	6803      	ldr	r3, [r0, #0]
 800fe4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe4e:	4798      	blx	r3
 800fe50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fe52:	4283      	cmp	r3, r0
 800fe54:	d101      	bne.n	800fe5a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800fe56:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800fe58:	bd10      	pop	{r4, pc}
 800fe5a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800fe5c:	e7fc      	b.n	800fe58 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800fe5e:	bf00      	nop
 800fe60:	24025932 	.word	0x24025932

0800fe64 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe68:	461d      	mov	r5, r3
 800fe6a:	b08a      	sub	sp, #40	@ 0x28
 800fe6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe70:	4690      	mov	r8, r2
 800fe72:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800fe76:	2400      	movs	r4, #0
 800fe78:	4607      	mov	r7, r0
 800fe7a:	fb06 8505 	mla	r5, r6, r5, r8
 800fe7e:	9404      	str	r4, [sp, #16]
 800fe80:	f88d 4020 	strb.w	r4, [sp, #32]
 800fe84:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fe88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800fe8c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fe90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fe94:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fe98:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fe9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fea0:	f7ff ffce 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fea4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f8ad 601e 	strh.w	r6, [sp, #30]
 800feae:	a901      	add	r1, sp, #4
 800feb0:	9505      	str	r5, [sp, #20]
 800feb2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800feb6:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800feba:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800febe:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800fec2:	6803      	ldr	r3, [r0, #0]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	4798      	blx	r3
 800fec8:	b00a      	add	sp, #40	@ 0x28
 800feca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fece <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800fece:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fed2:	b08b      	sub	sp, #44	@ 0x2c
 800fed4:	2400      	movs	r4, #0
 800fed6:	4691      	mov	r9, r2
 800fed8:	461d      	mov	r5, r3
 800feda:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800fede:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fee2:	4688      	mov	r8, r1
 800fee4:	4607      	mov	r7, r0
 800fee6:	9404      	str	r4, [sp, #16]
 800fee8:	fb06 9505 	mla	r5, r6, r5, r9
 800feec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fef0:	f7ff ffa6 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fef4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fef8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ff02:	a901      	add	r1, sp, #4
 800ff04:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ff08:	9505      	str	r5, [sp, #20]
 800ff0a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ff0e:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ff12:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ff16:	f8cd 8010 	str.w	r8, [sp, #16]
 800ff1a:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ff1e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800ff22:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800ff26:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800ff2a:	6803      	ldr	r3, [r0, #0]
 800ff2c:	685b      	ldr	r3, [r3, #4]
 800ff2e:	4798      	blx	r3
 800ff30:	b00b      	add	sp, #44	@ 0x2c
 800ff32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ff38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800ff38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff3c:	b08a      	sub	sp, #40	@ 0x28
 800ff3e:	4698      	mov	r8, r3
 800ff40:	2300      	movs	r3, #0
 800ff42:	4606      	mov	r6, r0
 800ff44:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800ff48:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800ff4c:	2d0b      	cmp	r5, #11
 800ff4e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800ff52:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800ff56:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800ff5a:	9304      	str	r3, [sp, #16]
 800ff5c:	d137      	bne.n	800ffce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800ff5e:	2380      	movs	r3, #128	@ 0x80
 800ff60:	f88d 0020 	strb.w	r0, [sp, #32]
 800ff64:	4630      	mov	r0, r6
 800ff66:	9203      	str	r2, [sp, #12]
 800ff68:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ff6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ff70:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ff74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ff78:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ff7c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ff80:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ff84:	f7ff ff5c 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ff88:	2c0b      	cmp	r4, #11
 800ff8a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ff8e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ff92:	bf94      	ite	ls
 800ff94:	4b19      	ldrls	r3, [pc, #100]	@ (800fffc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ff96:	2100      	movhi	r1, #0
 800ff98:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800ff9c:	bf98      	it	ls
 800ff9e:	5d19      	ldrbls	r1, [r3, r4]
 800ffa0:	fb02 8307 	mla	r3, r2, r7, r8
 800ffa4:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800ffa8:	10c9      	asrs	r1, r1, #3
 800ffaa:	fb01 0003 	mla	r0, r1, r3, r0
 800ffae:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800ffb2:	a901      	add	r1, sp, #4
 800ffb4:	9005      	str	r0, [sp, #20]
 800ffb6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800ffba:	2300      	movs	r3, #0
 800ffbc:	6870      	ldr	r0, [r6, #4]
 800ffbe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ffc2:	6803      	ldr	r3, [r0, #0]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	4798      	blx	r3
 800ffc8:	b00a      	add	sp, #40	@ 0x28
 800ffca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffce:	2d02      	cmp	r5, #2
 800ffd0:	d109      	bne.n	800ffe6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800ffd2:	28ff      	cmp	r0, #255	@ 0xff
 800ffd4:	d105      	bne.n	800ffe2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800ffd6:	f1bc 0f00 	cmp.w	ip, #0
 800ffda:	bf14      	ite	ne
 800ffdc:	2340      	movne	r3, #64	@ 0x40
 800ffde:	2320      	moveq	r3, #32
 800ffe0:	e7be      	b.n	800ff60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ffe2:	2340      	movs	r3, #64	@ 0x40
 800ffe4:	e7bc      	b.n	800ff60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ffe6:	28ff      	cmp	r0, #255	@ 0xff
 800ffe8:	d105      	bne.n	800fff6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800ffea:	f1bc 0f00 	cmp.w	ip, #0
 800ffee:	bf14      	ite	ne
 800fff0:	2304      	movne	r3, #4
 800fff2:	2301      	moveq	r3, #1
 800fff4:	e7b4      	b.n	800ff60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800fff6:	2304      	movs	r3, #4
 800fff8:	e7b2      	b.n	800ff60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800fffa:	bf00      	nop
 800fffc:	08028cac 	.word	0x08028cac

08010000 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010004:	b08b      	sub	sp, #44	@ 0x2c
 8010006:	461d      	mov	r5, r3
 8010008:	2400      	movs	r4, #0
 801000a:	4688      	mov	r8, r1
 801000c:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8010010:	4693      	mov	fp, r2
 8010012:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8010016:	4607      	mov	r7, r0
 8010018:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801001c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8010020:	9404      	str	r4, [sp, #16]
 8010022:	bf14      	ite	ne
 8010024:	2308      	movne	r3, #8
 8010026:	2302      	moveq	r3, #2
 8010028:	fb05 b50a 	mla	r5, r5, sl, fp
 801002c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010030:	f7ff ff06 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010034:	2e0b      	cmp	r6, #11
 8010036:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801003a:	a901      	add	r1, sp, #4
 801003c:	bf98      	it	ls
 801003e:	4b13      	ldrls	r3, [pc, #76]	@ (801008c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010040:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010044:	bf98      	it	ls
 8010046:	5d9c      	ldrbls	r4, [r3, r6]
 8010048:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801004c:	10e4      	asrs	r4, r4, #3
 801004e:	f8cd 8010 	str.w	r8, [sp, #16]
 8010052:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010056:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801005a:	fb04 0405 	mla	r4, r4, r5, r0
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010064:	2300      	movs	r3, #0
 8010066:	9405      	str	r4, [sp, #20]
 8010068:	f8ad 301c 	strh.w	r3, [sp, #28]
 801006c:	f88d 9020 	strb.w	r9, [sp, #32]
 8010070:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8010074:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010078:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 801007c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8010080:	6803      	ldr	r3, [r0, #0]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	4798      	blx	r3
 8010086:	b00b      	add	sp, #44	@ 0x2c
 8010088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801008c:	08028cac 	.word	0x08028cac

08010090 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010094:	461e      	mov	r6, r3
 8010096:	4b0a      	ldr	r3, [pc, #40]	@ (80100c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010098:	460f      	mov	r7, r1
 801009a:	4690      	mov	r8, r2
 801009c:	881d      	ldrh	r5, [r3, #0]
 801009e:	f7f3 ffcd 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 80100a2:	6803      	ldr	r3, [r0, #0]
 80100a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a6:	4798      	blx	r3
 80100a8:	280b      	cmp	r0, #11
 80100aa:	bf96      	itet	ls
 80100ac:	4b05      	ldrls	r3, [pc, #20]	@ (80100c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80100ae:	2400      	movhi	r4, #0
 80100b0:	5c1c      	ldrbls	r4, [r3, r0]
 80100b2:	fb08 7005 	mla	r0, r8, r5, r7
 80100b6:	10e4      	asrs	r4, r4, #3
 80100b8:	fb04 6000 	mla	r0, r4, r0, r6
 80100bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c0:	2402592e 	.word	0x2402592e
 80100c4:	08028cac 	.word	0x08028cac

080100c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80100c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100ca:	b08b      	sub	sp, #44	@ 0x2c
 80100cc:	461f      	mov	r7, r3
 80100ce:	4604      	mov	r4, r0
 80100d0:	4616      	mov	r6, r2
 80100d2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80100d6:	2500      	movs	r5, #0
 80100d8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80100dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80100e0:	9504      	str	r5, [sp, #16]
 80100e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80100e6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80100ea:	f8ad 301a 	strh.w	r3, [sp, #26]
 80100ee:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80100f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80100f6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80100fa:	f88d 3020 	strb.w	r3, [sp, #32]
 80100fe:	f7ff fe9f 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010102:	463a      	mov	r2, r7
 8010104:	4631      	mov	r1, r6
 8010106:	4603      	mov	r3, r0
 8010108:	4620      	mov	r0, r4
 801010a:	f7ff ffc1 	bl	8010090 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801010e:	4b0e      	ldr	r3, [pc, #56]	@ (8010148 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010110:	9005      	str	r0, [sp, #20]
 8010112:	881b      	ldrh	r3, [r3, #0]
 8010114:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010118:	f7f3 ff90 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 801011c:	6803      	ldr	r3, [r0, #0]
 801011e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010120:	4798      	blx	r3
 8010122:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010124:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8010128:	a901      	add	r1, sp, #4
 801012a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 801012e:	9304      	str	r3, [sp, #16]
 8010130:	6860      	ldr	r0, [r4, #4]
 8010132:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010136:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 801013a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801013e:	6803      	ldr	r3, [r0, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4798      	blx	r3
 8010144:	b00b      	add	sp, #44	@ 0x2c
 8010146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010148:	2402592e 	.word	0x2402592e

0801014c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801014e:	b08d      	sub	sp, #52	@ 0x34
 8010150:	2501      	movs	r5, #1
 8010152:	4604      	mov	r4, r0
 8010154:	466b      	mov	r3, sp
 8010156:	9503      	str	r5, [sp, #12]
 8010158:	e883 0006 	stmia.w	r3, {r1, r2}
 801015c:	2300      	movs	r3, #0
 801015e:	f8bd 6000 	ldrh.w	r6, [sp]
 8010162:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010166:	9306      	str	r3, [sp, #24]
 8010168:	6803      	ldr	r3, [r0, #0]
 801016a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801016c:	4798      	blx	r3
 801016e:	463a      	mov	r2, r7
 8010170:	4631      	mov	r1, r6
 8010172:	4603      	mov	r3, r0
 8010174:	4620      	mov	r0, r4
 8010176:	f7ff ff8b 	bl	8010090 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801017a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801017c:	9004      	str	r0, [sp, #16]
 801017e:	9307      	str	r3, [sp, #28]
 8010180:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010184:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010188:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801018c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010190:	4b0e      	ldr	r3, [pc, #56]	@ (80101cc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010198:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801019c:	f7f3 ff4e 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 80101a0:	6803      	ldr	r3, [r0, #0]
 80101a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101a4:	4798      	blx	r3
 80101a6:	23ff      	movs	r3, #255	@ 0xff
 80101a8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80101ac:	a903      	add	r1, sp, #12
 80101ae:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80101b2:	6860      	ldr	r0, [r4, #4]
 80101b4:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80101b8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80101bc:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80101c0:	6803      	ldr	r3, [r0, #0]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	4798      	blx	r3
 80101c6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80101c8:	b00d      	add	sp, #52	@ 0x34
 80101ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101cc:	2402592e 	.word	0x2402592e

080101d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80101d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d4:	b08c      	sub	sp, #48	@ 0x30
 80101d6:	461e      	mov	r6, r3
 80101d8:	2300      	movs	r3, #0
 80101da:	4604      	mov	r4, r0
 80101dc:	466d      	mov	r5, sp
 80101de:	9306      	str	r3, [sp, #24]
 80101e0:	6803      	ldr	r3, [r0, #0]
 80101e2:	e885 0006 	stmia.w	r5, {r1, r2}
 80101e6:	2501      	movs	r5, #1
 80101e8:	f8bd 7000 	ldrh.w	r7, [sp]
 80101ec:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80101f0:	9503      	str	r5, [sp, #12]
 80101f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101f4:	4798      	blx	r3
 80101f6:	4642      	mov	r2, r8
 80101f8:	4639      	mov	r1, r7
 80101fa:	4603      	mov	r3, r0
 80101fc:	4620      	mov	r0, r4
 80101fe:	f7ff ff47 	bl	8010090 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010202:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010206:	9004      	str	r0, [sp, #16]
 8010208:	f8ad 3020 	strh.w	r3, [sp, #32]
 801020c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010210:	9607      	str	r6, [sp, #28]
 8010212:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010216:	4b10      	ldr	r3, [pc, #64]	@ (8010258 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801021e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010220:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010224:	f7f3 ff0a 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8010228:	6803      	ldr	r3, [r0, #0]
 801022a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801022c:	4798      	blx	r3
 801022e:	23ff      	movs	r3, #255	@ 0xff
 8010230:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010234:	a903      	add	r1, sp, #12
 8010236:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 801023a:	6860      	ldr	r0, [r4, #4]
 801023c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010240:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010244:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010248:	6803      	ldr	r3, [r0, #0]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	4798      	blx	r3
 801024e:	4630      	mov	r0, r6
 8010250:	b00c      	add	sp, #48	@ 0x30
 8010252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010256:	bf00      	nop
 8010258:	2402592e 	.word	0x2402592e

0801025c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025e:	b085      	sub	sp, #20
 8010260:	4605      	mov	r5, r0
 8010262:	ac02      	add	r4, sp, #8
 8010264:	e884 0006 	stmia.w	r4, {r1, r2}
 8010268:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801026c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010270:	f7ff fde6 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010274:	4631      	mov	r1, r6
 8010276:	4603      	mov	r3, r0
 8010278:	463a      	mov	r2, r7
 801027a:	4628      	mov	r0, r5
 801027c:	f7ff ff08 	bl	8010090 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010280:	4a05      	ldr	r2, [pc, #20]	@ (8010298 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010282:	682b      	ldr	r3, [r5, #0]
 8010284:	8812      	ldrh	r2, [r2, #0]
 8010286:	9200      	str	r2, [sp, #0]
 8010288:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801028a:	4603      	mov	r3, r0
 801028c:	4628      	mov	r0, r5
 801028e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010292:	47b0      	blx	r6
 8010294:	b005      	add	sp, #20
 8010296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010298:	2402592e 	.word	0x2402592e

0801029c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 80102a2:	4604      	mov	r4, r0
 80102a4:	b19b      	cbz	r3, 80102ce <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80102a6:	2002      	movs	r0, #2
 80102a8:	f7f1 fd9a 	bl	8001de0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80102ac:	2300      	movs	r3, #0
 80102ae:	4620      	mov	r0, r4
 80102b0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80102b4:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 80102b8:	6823      	ldr	r3, [r4, #0]
 80102ba:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 80102be:	f7ff fdbf 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80102c2:	4601      	mov	r1, r0
 80102c4:	4620      	mov	r0, r4
 80102c6:	462b      	mov	r3, r5
 80102c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102cc:	4718      	bx	r3
 80102ce:	bd70      	pop	{r4, r5, r6, pc}

080102d0 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	4605      	mov	r5, r0
 80102d4:	460c      	mov	r4, r1
 80102d6:	2003      	movs	r0, #3
 80102d8:	b149      	cbz	r1, 80102ee <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80102da:	f7f1 fd21 	bl	8001d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80102de:	6928      	ldr	r0, [r5, #16]
 80102e0:	b168      	cbz	r0, 80102fe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80102e2:	6803      	ldr	r3, [r0, #0]
 80102e4:	2101      	movs	r1, #1
 80102e6:	695b      	ldr	r3, [r3, #20]
 80102e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102ec:	4718      	bx	r3
 80102ee:	f7f1 fd47 	bl	8001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80102f2:	6928      	ldr	r0, [r5, #16]
 80102f4:	b118      	cbz	r0, 80102fe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80102f6:	6803      	ldr	r3, [r0, #0]
 80102f8:	4621      	mov	r1, r4
 80102fa:	695b      	ldr	r3, [r3, #20]
 80102fc:	e7f4      	b.n	80102e8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 80102fe:	bd70      	pop	{r4, r5, r6, pc}

08010300 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010300:	b538      	push	{r3, r4, r5, lr}
 8010302:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8010306:	4604      	mov	r4, r0
 8010308:	460d      	mov	r5, r1
 801030a:	428b      	cmp	r3, r1
 801030c:	d006      	beq.n	801031c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801030e:	6803      	ldr	r3, [r0, #0]
 8010310:	b929      	cbnz	r1, 801031e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010312:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010316:	4798      	blx	r3
 8010318:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 801031c:	bd38      	pop	{r3, r4, r5, pc}
 801031e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8010322:	e7f8      	b.n	8010316 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010324 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010324:	4b0c      	ldr	r3, [pc, #48]	@ (8010358 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 8010326:	b510      	push	{r4, lr}
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	4604      	mov	r4, r0
 801032c:	b953      	cbnz	r3, 8010344 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 801032e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8010332:	b93b      	cbnz	r3, 8010344 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 8010334:	6840      	ldr	r0, [r0, #4]
 8010336:	f000 f919 	bl	801056c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801033a:	b118      	cbz	r0, 8010344 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 801033c:	6862      	ldr	r2, [r4, #4]
 801033e:	7a53      	ldrb	r3, [r2, #9]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0fc      	beq.n	801033e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 8010344:	f7f2 fd66 	bl	8002e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010348:	4620      	mov	r0, r4
 801034a:	2100      	movs	r1, #0
 801034c:	f7ff ffd8 	bl	8010300 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010350:	4620      	mov	r0, r4
 8010352:	f7ff fd75 	bl	800fe40 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010356:	bd10      	pop	{r4, pc}
 8010358:	24025932 	.word	0x24025932

0801035c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801035c:	b570      	push	{r4, r5, r6, lr}
 801035e:	4604      	mov	r4, r0
 8010360:	6803      	ldr	r3, [r0, #0]
 8010362:	b919      	cbnz	r1, 801036c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8010364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801036a:	4718      	bx	r3
 801036c:	2200      	movs	r2, #0
 801036e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8010372:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8010376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010378:	4798      	blx	r3
 801037a:	6863      	ldr	r3, [r4, #4]
 801037c:	2101      	movs	r1, #1
 801037e:	4605      	mov	r5, r0
 8010380:	4620      	mov	r0, r4
 8010382:	7299      	strb	r1, [r3, #10]
 8010384:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8010388:	f7ff ffba 	bl	8010300 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801038c:	4628      	mov	r0, r5
 801038e:	bd70      	pop	{r4, r5, r6, pc}

08010390 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010390:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010394:	1a13      	subs	r3, r2, r0
 8010396:	4258      	negs	r0, r3
 8010398:	4158      	adcs	r0, r3
 801039a:	4770      	bx	lr

0801039c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801039c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80103a0:	1a9b      	subs	r3, r3, r2
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	bfdc      	itt	le
 80103a6:	6882      	ldrle	r2, [r0, #8]
 80103a8:	189b      	addle	r3, r3, r2
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	bfcc      	ite	gt
 80103ae:	2000      	movgt	r0, #0
 80103b0:	2001      	movle	r0, #1
 80103b2:	4770      	bx	lr

080103b4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80103b4:	6902      	ldr	r2, [r0, #16]
 80103b6:	6843      	ldr	r3, [r0, #4]
 80103b8:	2024      	movs	r0, #36	@ 0x24
 80103ba:	fb00 3002 	mla	r0, r0, r2, r3
 80103be:	4770      	bx	lr

080103c0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80103c0:	6803      	ldr	r3, [r0, #0]
 80103c2:	691b      	ldr	r3, [r3, #16]
 80103c4:	4718      	bx	r3

080103c6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80103c6:	2301      	movs	r3, #1
 80103c8:	b570      	push	{r4, r5, r6, lr}
 80103ca:	7203      	strb	r3, [r0, #8]
 80103cc:	4604      	mov	r4, r0
 80103ce:	6840      	ldr	r0, [r0, #4]
 80103d0:	6803      	ldr	r3, [r0, #0]
 80103d2:	699b      	ldr	r3, [r3, #24]
 80103d4:	4798      	blx	r3
 80103d6:	6803      	ldr	r3, [r0, #0]
 80103d8:	4605      	mov	r5, r0
 80103da:	2b40      	cmp	r3, #64	@ 0x40
 80103dc:	d00c      	beq.n	80103f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80103de:	d810      	bhi.n	8010402 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80103e0:	2b04      	cmp	r3, #4
 80103e2:	d01d      	beq.n	8010420 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80103e4:	d804      	bhi.n	80103f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d006      	beq.n	80103f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d02c      	beq.n	8010448 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80103ee:	bd70      	pop	{r4, r5, r6, pc}
 80103f0:	2b08      	cmp	r3, #8
 80103f2:	d01d      	beq.n	8010430 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80103f4:	2b20      	cmp	r3, #32
 80103f6:	d1fa      	bne.n	80103ee <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80103f8:	6823      	ldr	r3, [r4, #0]
 80103fa:	4620      	mov	r0, r4
 80103fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103fe:	4798      	blx	r3
 8010400:	e013      	b.n	801042a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010406:	d0f7      	beq.n	80103f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010408:	d804      	bhi.n	8010414 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801040a:	2b80      	cmp	r3, #128	@ 0x80
 801040c:	d0f4      	beq.n	80103f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801040e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010412:	e7f0      	b.n	80103f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010414:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010418:	d0ee      	beq.n	80103f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801041a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801041e:	e7e5      	b.n	80103ec <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010420:	6823      	ldr	r3, [r4, #0]
 8010422:	7f01      	ldrb	r1, [r0, #28]
 8010424:	4620      	mov	r0, r4
 8010426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010428:	4798      	blx	r3
 801042a:	6823      	ldr	r3, [r4, #0]
 801042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801042e:	e006      	b.n	801043e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010430:	6823      	ldr	r3, [r4, #0]
 8010432:	7f01      	ldrb	r1, [r0, #28]
 8010434:	4620      	mov	r0, r4
 8010436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010438:	4798      	blx	r3
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801043e:	4629      	mov	r1, r5
 8010440:	4620      	mov	r0, r4
 8010442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010446:	4718      	bx	r3
 8010448:	6823      	ldr	r3, [r4, #0]
 801044a:	4620      	mov	r0, r4
 801044c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801044e:	4798      	blx	r3
 8010450:	e7f3      	b.n	801043a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010452 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010452:	4770      	bx	lr

08010454 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010454:	4770      	bx	lr

08010456 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8010456:	4770      	bx	lr

08010458 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010458:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801045c:	b510      	push	{r4, lr}
 801045e:	1ad2      	subs	r2, r2, r3
 8010460:	2a00      	cmp	r2, #0
 8010462:	bfdc      	itt	le
 8010464:	6884      	ldrle	r4, [r0, #8]
 8010466:	1912      	addle	r2, r2, r4
 8010468:	2a01      	cmp	r2, #1
 801046a:	dd16      	ble.n	801049a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801046c:	6842      	ldr	r2, [r0, #4]
 801046e:	2424      	movs	r4, #36	@ 0x24
 8010470:	fb04 2303 	mla	r3, r4, r3, r2
 8010474:	f101 0220 	add.w	r2, r1, #32
 8010478:	f851 4b04 	ldr.w	r4, [r1], #4
 801047c:	4291      	cmp	r1, r2
 801047e:	f843 4b04 	str.w	r4, [r3], #4
 8010482:	d1f9      	bne.n	8010478 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010484:	780a      	ldrb	r2, [r1, #0]
 8010486:	701a      	strb	r2, [r3, #0]
 8010488:	68c3      	ldr	r3, [r0, #12]
 801048a:	6882      	ldr	r2, [r0, #8]
 801048c:	f3bf 8f5b 	dmb	ish
 8010490:	3301      	adds	r3, #1
 8010492:	429a      	cmp	r2, r3
 8010494:	bfd8      	it	le
 8010496:	1a9b      	suble	r3, r3, r2
 8010498:	60c3      	str	r3, [r0, #12]
 801049a:	bd10      	pop	{r4, pc}

0801049c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801049c:	6903      	ldr	r3, [r0, #16]
 801049e:	6882      	ldr	r2, [r0, #8]
 80104a0:	f3bf 8f5b 	dmb	ish
 80104a4:	3301      	adds	r3, #1
 80104a6:	429a      	cmp	r2, r3
 80104a8:	bfd8      	it	le
 80104aa:	1a9b      	suble	r3, r3, r2
 80104ac:	6103      	str	r3, [r0, #16]
 80104ae:	4770      	bx	lr

080104b0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80104b0:	b570      	push	{r4, r5, r6, lr}
 80104b2:	4604      	mov	r4, r0
 80104b4:	460e      	mov	r6, r1
 80104b6:	6860      	ldr	r0, [r4, #4]
 80104b8:	6803      	ldr	r3, [r0, #0]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	4798      	blx	r3
 80104be:	2800      	cmp	r0, #0
 80104c0:	d1f9      	bne.n	80104b6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80104c2:	4d0d      	ldr	r5, [pc, #52]	@ (80104f8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80104c4:	6828      	ldr	r0, [r5, #0]
 80104c6:	6803      	ldr	r3, [r0, #0]
 80104c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80104cc:	4798      	blx	r3
 80104ce:	f7f2 fcaf 	bl	8002e30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80104d2:	6828      	ldr	r0, [r5, #0]
 80104d4:	2101      	movs	r1, #1
 80104d6:	f7ff ff13 	bl	8010300 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80104da:	6860      	ldr	r0, [r4, #4]
 80104dc:	4631      	mov	r1, r6
 80104de:	6803      	ldr	r3, [r0, #0]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	4798      	blx	r3
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	4620      	mov	r0, r4
 80104e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104ea:	4798      	blx	r3
 80104ec:	6828      	ldr	r0, [r5, #0]
 80104ee:	6803      	ldr	r3, [r0, #0]
 80104f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80104f6:	4718      	bx	r3
 80104f8:	24025934 	.word	0x24025934

080104fc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80104fc:	b508      	push	{r3, lr}
 80104fe:	f7f2 fc89 	bl	8002e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010506:	f7f2 bc8d 	b.w	8002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801050a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801050a:	b510      	push	{r4, lr}
 801050c:	4604      	mov	r4, r0
 801050e:	2114      	movs	r1, #20
 8010510:	f013 fe98 	bl	8024244 <_ZdlPvj>
 8010514:	4620      	mov	r0, r4
 8010516:	bd10      	pop	{r4, pc}

08010518 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010518:	b570      	push	{r4, r5, r6, lr}
 801051a:	4604      	mov	r4, r0
 801051c:	6840      	ldr	r0, [r0, #4]
 801051e:	6803      	ldr	r3, [r0, #0]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4798      	blx	r3
 8010524:	4605      	mov	r5, r0
 8010526:	b930      	cbnz	r0, 8010536 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010528:	7a23      	ldrb	r3, [r4, #8]
 801052a:	b123      	cbz	r3, 8010536 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801052c:	6860      	ldr	r0, [r4, #4]
 801052e:	6803      	ldr	r3, [r0, #0]
 8010530:	695b      	ldr	r3, [r3, #20]
 8010532:	4798      	blx	r3
 8010534:	7225      	strb	r5, [r4, #8]
 8010536:	6860      	ldr	r0, [r4, #4]
 8010538:	6803      	ldr	r3, [r0, #0]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4798      	blx	r3
 801053e:	b928      	cbnz	r0, 801054c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010540:	6823      	ldr	r3, [r4, #0]
 8010542:	4620      	mov	r0, r4
 8010544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801054a:	4718      	bx	r3
 801054c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010550:	f7f2 bc76 	b.w	8002e40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010554 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010554:	b510      	push	{r4, lr}
 8010556:	6082      	str	r2, [r0, #8]
 8010558:	2200      	movs	r2, #0
 801055a:	4c03      	ldr	r4, [pc, #12]	@ (8010568 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801055c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010560:	e9c0 4100 	strd	r4, r1, [r0]
 8010564:	bd10      	pop	{r4, pc}
 8010566:	bf00      	nop
 8010568:	08028cc0 	.word	0x08028cc0

0801056c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801056c:	6840      	ldr	r0, [r0, #4]
 801056e:	6803      	ldr	r3, [r0, #0]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	4718      	bx	r3

08010574 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8010574:	2300      	movs	r3, #0
 8010576:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8010578:	8503      	strh	r3, [r0, #40]	@ 0x28
 801057a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 801057c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801057e:	6980      	ldr	r0, [r0, #24]
 8010580:	b110      	cbz	r0, 8010588 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8010582:	6803      	ldr	r3, [r0, #0]
 8010584:	691b      	ldr	r3, [r3, #16]
 8010586:	4718      	bx	r3
 8010588:	4770      	bx	lr

0801058a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 801058a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 801058e:	4770      	bx	lr

08010590 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8010590:	b538      	push	{r3, r4, r5, lr}
 8010592:	0e0b      	lsrs	r3, r1, #24
 8010594:	4604      	mov	r4, r0
 8010596:	460d      	mov	r5, r1
 8010598:	7783      	strb	r3, [r0, #30]
 801059a:	6803      	ldr	r3, [r0, #0]
 801059c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801059e:	4798      	blx	r3
 80105a0:	6803      	ldr	r3, [r0, #0]
 80105a2:	4629      	mov	r1, r5
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	4798      	blx	r3
 80105a8:	6823      	ldr	r3, [r4, #0]
 80105aa:	4620      	mov	r0, r4
 80105ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105ae:	4798      	blx	r3
 80105b0:	61a0      	str	r0, [r4, #24]
 80105b2:	bd38      	pop	{r3, r4, r5, pc}

080105b4 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 80105b4:	7741      	strb	r1, [r0, #29]
 80105b6:	4770      	bx	lr

080105b8 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 80105b8:	b530      	push	{r4, r5, lr}
 80105ba:	460d      	mov	r5, r1
 80105bc:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 80105c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	bd30      	pop	{r4, r5, pc}

080105ce <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 80105ce:	b538      	push	{r3, r4, r5, lr}
 80105d0:	4604      	mov	r4, r0
 80105d2:	1d03      	adds	r3, r0, #4
 80105d4:	6808      	ldr	r0, [r1, #0]
 80105d6:	2500      	movs	r5, #0
 80105d8:	6849      	ldr	r1, [r1, #4]
 80105da:	c303      	stmia	r3!, {r0, r1}
 80105dc:	6813      	ldr	r3, [r2, #0]
 80105de:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80105e2:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 80105e6:	6853      	ldr	r3, [r2, #4]
 80105e8:	61a5      	str	r5, [r4, #24]
 80105ea:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 80105ee:	f006 ff49 	bl	8017484 <_ZN8touchgfx9Matrix3x35resetEv>
 80105f2:	23ff      	movs	r3, #255	@ 0xff
 80105f4:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 80105f8:	7763      	strb	r3, [r4, #29]
 80105fa:	77a3      	strb	r3, [r4, #30]
 80105fc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010600:	6323      	str	r3, [r4, #48]	@ 0x30
 8010602:	2301      	movs	r3, #1
 8010604:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8010608:	bd38      	pop	{r3, r4, r5, pc}
	...

0801060c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 801060c:	ee70 7a41 	vsub.f32	s15, s0, s2
 8010610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010614:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010618:	4605      	mov	r5, r0
 801061a:	ed2d 8b0a 	vpush	{d8-d12}
 801061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010622:	b087      	sub	sp, #28
 8010624:	eef0 9a40 	vmov.f32	s19, s0
 8010628:	6802      	ldr	r2, [r0, #0]
 801062a:	eeb0 aa60 	vmov.f32	s20, s1
 801062e:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8010632:	eeb0 9a41 	vmov.f32	s18, s2
 8010636:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8010638:	eef0 8a61 	vmov.f32	s17, s3
 801063c:	eeb0 ca42 	vmov.f32	s24, s4
 8010640:	eef0 ca62 	vmov.f32	s25, s5
 8010644:	d112      	bne.n	801066c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8010646:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801064a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010652:	d10b      	bne.n	801066c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8010654:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8010658:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801065a:	3901      	subs	r1, #1
 801065c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8010660:	b007      	add	sp, #28
 8010662:	ecbd 8b0a 	vpop	{d8-d12}
 8010666:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801066a:	4710      	bx	r2
 801066c:	23ff      	movs	r3, #255	@ 0xff
 801066e:	4628      	mov	r0, r5
 8010670:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8010674:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 801093c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 8010678:	77ab      	strb	r3, [r5, #30]
 801067a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801067c:	4798      	blx	r3
 801067e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 8010682:	eeb0 0a69 	vmov.f32	s0, s19
 8010686:	4604      	mov	r4, r0
 8010688:	80c3      	strh	r3, [r0, #6]
 801068a:	eef0 0a4a 	vmov.f32	s1, s20
 801068e:	4640      	mov	r0, r8
 8010690:	f006 ffa7 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010694:	eeb0 ba40 	vmov.f32	s22, s0
 8010698:	ed8d 0a00 	vstr	s0, [sp]
 801069c:	eeb0 0a49 	vmov.f32	s0, s18
 80106a0:	eef0 ba60 	vmov.f32	s23, s1
 80106a4:	edcd 0a01 	vstr	s1, [sp, #4]
 80106a8:	4640      	mov	r0, r8
 80106aa:	eef0 0a68 	vmov.f32	s1, s17
 80106ae:	f006 ff98 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80106b2:	eeb4 ba40 	vcmp.f32	s22, s0
 80106b6:	eeb0 8a40 	vmov.f32	s16, s0
 80106ba:	ed8d 0a02 	vstr	s0, [sp, #8]
 80106be:	eef0 aa60 	vmov.f32	s21, s1
 80106c2:	edcd 0a03 	vstr	s1, [sp, #12]
 80106c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ca:	eef4 ba60 	vcmp.f32	s23, s1
 80106ce:	bf0c      	ite	eq
 80106d0:	2301      	moveq	r3, #1
 80106d2:	2300      	movne	r3, #0
 80106d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d8:	eeb4 ba40 	vcmp.f32	s22, s0
 80106dc:	7463      	strb	r3, [r4, #17]
 80106de:	bf0c      	ite	eq
 80106e0:	2301      	moveq	r3, #1
 80106e2:	2300      	movne	r3, #0
 80106e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e8:	74a3      	strb	r3, [r4, #18]
 80106ea:	d031      	beq.n	8010750 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 80106ec:	eef4 ba60 	vcmp.f32	s23, s1
 80106f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f4:	d02c      	beq.n	8010750 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 80106f6:	ee39 9a69 	vsub.f32	s18, s18, s19
 80106fa:	4640      	mov	r0, r8
 80106fc:	ee78 8aca 	vsub.f32	s17, s17, s20
 8010700:	eef0 0a4a 	vmov.f32	s1, s20
 8010704:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 8010708:	eec8 7aac 	vdiv.f32	s15, s17, s25
 801070c:	eeb0 0a69 	vmov.f32	s0, s19
 8010710:	eeec 0a87 	vfma.f32	s1, s25, s14
 8010714:	eea7 0acc 	vfms.f32	s0, s15, s24
 8010718:	f006 ff63 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801071c:	f899 3000 	ldrb.w	r3, [r9]
 8010720:	edcd 0a05 	vstr	s1, [sp, #20]
 8010724:	ee70 0aeb 	vsub.f32	s1, s1, s23
 8010728:	2b01      	cmp	r3, #1
 801072a:	bf08      	it	eq
 801072c:	eef1 7a60 	vnegeq.f32	s15, s1
 8010730:	ed8d 0a04 	vstr	s0, [sp, #16]
 8010734:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8010738:	bf04      	itt	eq
 801073a:	eef0 0a40 	vmoveq.f32	s1, s0
 801073e:	eeb0 0a67 	vmoveq.f32	s0, s15
 8010742:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074a:	d135      	bne.n	80107b8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 801074c:	2301      	movs	r3, #1
 801074e:	74a3      	strb	r3, [r4, #18]
 8010750:	f899 2000 	ldrb.w	r2, [r9]
 8010754:	7c63      	ldrb	r3, [r4, #17]
 8010756:	2a01      	cmp	r2, #1
 8010758:	f040 80a3 	bne.w	80108a2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 801075c:	2b00      	cmp	r3, #0
 801075e:	d073      	beq.n	8010848 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 8010760:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8010764:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8010934 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010768:	eef4 baea 	vcmpe.f32	s23, s21
 801076c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010774:	edc4 7a08 	vstr	s15, [r4, #32]
 8010778:	eefd 7aea 	vcvt.s32.f32	s15, s21
 801077c:	ee17 3a90 	vmov	r3, s15
 8010780:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010784:	b21a      	sxth	r2, r3
 8010786:	ee17 3a90 	vmov	r3, s15
 801078a:	bf48      	it	mi
 801078c:	8162      	strhmi	r2, [r4, #10]
 801078e:	b21b      	sxth	r3, r3
 8010790:	bf56      	itet	pl
 8010792:	8122      	strhpl	r2, [r4, #8]
 8010794:	8123      	strhmi	r3, [r4, #8]
 8010796:	8163      	strhpl	r3, [r4, #10]
 8010798:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801079c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80107a0:	1a9b      	subs	r3, r3, r2
 80107a2:	ee07 3a90 	vmov	s15, r3
 80107a6:	2300      	movs	r3, #0
 80107a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107ac:	7463      	strb	r3, [r4, #17]
 80107ae:	2301      	movs	r3, #1
 80107b0:	edc4 7a07 	vstr	s15, [r4, #28]
 80107b4:	74a3      	strb	r3, [r4, #18]
 80107b6:	e03f      	b.n	8010838 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80107b8:	ee80 7a80 	vdiv.f32	s14, s1, s0
 80107bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80107c0:	ed84 7a05 	vstr	s14, [r4, #20]
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	d102      	bne.n	80107d0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 80107ca:	2301      	movs	r3, #1
 80107cc:	7463      	strb	r3, [r4, #17]
 80107ce:	e7bf      	b.n	8010750 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 80107d0:	2b01      	cmp	r3, #1
 80107d2:	ee38 8a4b 	vsub.f32	s16, s16, s22
 80107d6:	ee7a aaeb 	vsub.f32	s21, s21, s23
 80107da:	bf0b      	itete	eq
 80107dc:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 80107e0:	eef0 7a6b 	vmovne.f32	s15, s23
 80107e4:	ee07 2a90 	vmoveq	s15, r2
 80107e8:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 80107ec:	bf02      	ittt	eq
 80107ee:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 80107f2:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 80107f6:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	edc4 7a06 	vstr	s15, [r4, #24]
 8010800:	bf02      	ittt	eq
 8010802:	eef1 7a48 	vnegeq.f32	s15, s16
 8010806:	eeb0 8a6a 	vmoveq.f32	s16, s21
 801080a:	eef0 aa67 	vmoveq.f32	s21, s15
 801080e:	eeca 7a87 	vdiv.f32	s15, s21, s14
 8010812:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010938 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 8010816:	ee38 8a67 	vsub.f32	s16, s16, s15
 801081a:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801081e:	ed84 8a07 	vstr	s16, [r4, #28]
 8010822:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082a:	edc4 7a08 	vstr	s15, [r4, #32]
 801082e:	d503      	bpl.n	8010838 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010830:	eeb1 8a48 	vneg.f32	s16, s16
 8010834:	ed84 8a07 	vstr	s16, [r4, #28]
 8010838:	60e7      	str	r7, [r4, #12]
 801083a:	7426      	strb	r6, [r4, #16]
 801083c:	61ac      	str	r4, [r5, #24]
 801083e:	b007      	add	sp, #28
 8010840:	ecbd 8b0a 	vpop	{d8-d12}
 8010844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010848:	7ca3      	ldrb	r3, [r4, #18]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d0f4      	beq.n	8010838 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 801084e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010852:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8010934 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010856:	ee00 3a10 	vmov	s0, r3
 801085a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801085e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010862:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8010866:	ee38 7a40 	vsub.f32	s14, s16, s0
 801086a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801086e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010876:	edc4 7a08 	vstr	s15, [r4, #32]
 801087a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801087e:	ee17 3a90 	vmov	r3, s15
 8010882:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010886:	b21a      	sxth	r2, r3
 8010888:	ee17 3a90 	vmov	r3, s15
 801088c:	bfc8      	it	gt
 801088e:	8162      	strhgt	r2, [r4, #10]
 8010890:	b21b      	sxth	r3, r3
 8010892:	bfd6      	itet	le
 8010894:	8122      	strhle	r2, [r4, #8]
 8010896:	8123      	strhgt	r3, [r4, #8]
 8010898:	8163      	strhle	r3, [r4, #10]
 801089a:	2301      	movs	r3, #1
 801089c:	7463      	strb	r3, [r4, #17]
 801089e:	2300      	movs	r3, #0
 80108a0:	e788      	b.n	80107b4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 80108a2:	b1e3      	cbz	r3, 80108de <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 80108a4:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 80108a8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8010934 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 80108ac:	eef4 baea 	vcmpe.f32	s23, s21
 80108b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b8:	edc4 7a08 	vstr	s15, [r4, #32]
 80108bc:	eefd 7aea 	vcvt.s32.f32	s15, s21
 80108c0:	ee17 3a90 	vmov	r3, s15
 80108c4:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80108c8:	b21a      	sxth	r2, r3
 80108ca:	ee17 3a90 	vmov	r3, s15
 80108ce:	bf48      	it	mi
 80108d0:	8162      	strhmi	r2, [r4, #10]
 80108d2:	b21b      	sxth	r3, r3
 80108d4:	bf56      	itet	pl
 80108d6:	8122      	strhpl	r2, [r4, #8]
 80108d8:	8123      	strhmi	r3, [r4, #8]
 80108da:	8163      	strhpl	r3, [r4, #10]
 80108dc:	e7ac      	b.n	8010838 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80108de:	7ca3      	ldrb	r3, [r4, #18]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0a9      	beq.n	8010838 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80108e4:	ee38 7a4b 	vsub.f32	s14, s16, s22
 80108e8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8010934 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 80108ec:	eeb4 bac8 	vcmpe.f32	s22, s16
 80108f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80108f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f8:	edc4 7a08 	vstr	s15, [r4, #32]
 80108fc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010900:	ee17 3a90 	vmov	r3, s15
 8010904:	eefd 7acb 	vcvt.s32.f32	s15, s22
 8010908:	b21a      	sxth	r2, r3
 801090a:	ee17 3a90 	vmov	r3, s15
 801090e:	bf48      	it	mi
 8010910:	8162      	strhmi	r2, [r4, #10]
 8010912:	b21b      	sxth	r3, r3
 8010914:	bf56      	itet	pl
 8010916:	8122      	strhpl	r2, [r4, #8]
 8010918:	8123      	strhmi	r3, [r4, #8]
 801091a:	8163      	strhpl	r3, [r4, #10]
 801091c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010920:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	ee07 3a90 	vmov	s15, r3
 801092a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801092e:	edc4 7a07 	vstr	s15, [r4, #28]
 8010932:	e781      	b.n	8010838 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010934:	447ffffe 	.word	0x447ffffe
 8010938:	44800000 	.word	0x44800000
 801093c:	2402592c 	.word	0x2402592c

08010940 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 8010940:	b510      	push	{r4, lr}
 8010942:	ed2d 8b02 	vpush	{d8}
 8010946:	eef0 8a62 	vmov.f32	s17, s5
 801094a:	2100      	movs	r1, #0
 801094c:	4604      	mov	r4, r0
 801094e:	eeb0 8a42 	vmov.f32	s16, s4
 8010952:	f013 f9e9 	bl	8023d28 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8010956:	eef0 7a68 	vmov.f32	s15, s17
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	4620      	mov	r0, r4
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010964:	ee17 2a90 	vmov	r2, s15
 8010968:	eef0 7a48 	vmov.f32	s15, s16
 801096c:	ecbd 8b02 	vpop	{d8}
 8010970:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010978:	ee17 1a90 	vmov	r1, s15
 801097c:	4718      	bx	r3

0801097e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801097e:	b510      	push	{r4, lr}
 8010980:	ed2d 8b02 	vpush	{d8}
 8010984:	eef0 8a63 	vmov.f32	s17, s7
 8010988:	2100      	movs	r1, #0
 801098a:	4604      	mov	r4, r0
 801098c:	eeb0 8a43 	vmov.f32	s16, s6
 8010990:	f013 fa8c 	bl	8023eac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8010994:	eef0 7a68 	vmov.f32	s15, s17
 8010998:	6823      	ldr	r3, [r4, #0]
 801099a:	4620      	mov	r0, r4
 801099c:	689b      	ldr	r3, [r3, #8]
 801099e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80109a2:	ee17 2a90 	vmov	r2, s15
 80109a6:	eef0 7a48 	vmov.f32	s15, s16
 80109aa:	ecbd 8b02 	vpop	{d8}
 80109ae:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80109b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b6:	ee17 1a90 	vmov	r1, s15
 80109ba:	4718      	bx	r3

080109bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 80109bc:	b513      	push	{r0, r1, r4, lr}
 80109be:	4604      	mov	r4, r0
 80109c0:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80109c2:	f006 fe0e 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80109c6:	eef0 7a60 	vmov.f32	s15, s1
 80109ca:	4620      	mov	r0, r4
 80109cc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80109d0:	ee17 2a90 	vmov	r2, s15
 80109d4:	eef0 7a40 	vmov.f32	s15, s0
 80109d8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80109dc:	ee17 1a90 	vmov	r1, s15
 80109e0:	b002      	add	sp, #8
 80109e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e6:	f013 b8f9 	b.w	8023bdc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80109ea:	b513      	push	{r0, r1, r4, lr}
 80109ec:	4604      	mov	r4, r0
 80109ee:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80109f0:	f006 fdf7 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80109f4:	eef0 7a60 	vmov.f32	s15, s1
 80109f8:	4620      	mov	r0, r4
 80109fa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80109fe:	ee17 2a90 	vmov	r2, s15
 8010a02:	eef0 7a40 	vmov.f32	s15, s0
 8010a06:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010a0a:	ee17 1a90 	vmov	r1, s15
 8010a0e:	b002      	add	sp, #8
 8010a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a14:	f013 b92f 	b.w	8023c76 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

08010a18 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 8010a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a1a:	2400      	movs	r4, #0
 8010a1c:	9f07      	ldr	r7, [sp, #28]
 8010a1e:	f04f 0e01 	mov.w	lr, #1
 8010a22:	4626      	mov	r6, r4
 8010a24:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 8010a28:	4463      	add	r3, ip
 8010a2a:	4563      	cmp	r3, ip
 8010a2c:	d02d      	beq.n	8010a8a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 8010a2e:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8010a32:	2d06      	cmp	r5, #6
 8010a34:	d8f9      	bhi.n	8010a2a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010a36:	fa0e f505 	lsl.w	r5, lr, r5
 8010a3a:	f015 0f66 	tst.w	r5, #102	@ 0x66
 8010a3e:	d10d      	bne.n	8010a5c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 8010a40:	f015 0f10 	tst.w	r5, #16
 8010a44:	d117      	bne.n	8010a76 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 8010a46:	072d      	lsls	r5, r5, #28
 8010a48:	d5ef      	bpl.n	8010a2a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010a4a:	3801      	subs	r0, #1
 8010a4c:	b91e      	cbnz	r6, 8010a56 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8010a4e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8010a52:	682d      	ldr	r5, [r5, #0]
 8010a54:	600d      	str	r5, [r1, #0]
 8010a56:	b96c      	cbnz	r4, 8010a74 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010a58:	2601      	movs	r6, #1
 8010a5a:	e7e6      	b.n	8010a2a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010a5c:	b926      	cbnz	r6, 8010a68 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8010a5e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8010a62:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8010a66:	600b      	str	r3, [r1, #0]
 8010a68:	b924      	cbnz	r4, 8010a74 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010a6a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8010a6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010a72:	6013      	str	r3, [r2, #0]
 8010a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a76:	3801      	subs	r0, #1
 8010a78:	b91c      	cbnz	r4, 8010a82 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8010a7a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8010a7e:	6824      	ldr	r4, [r4, #0]
 8010a80:	6014      	str	r4, [r2, #0]
 8010a82:	2e00      	cmp	r6, #0
 8010a84:	d1f6      	bne.n	8010a74 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010a86:	2401      	movs	r4, #1
 8010a88:	e7cf      	b.n	8010a2a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8010a8a:	b90e      	cbnz	r6, 8010a90 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	600b      	str	r3, [r1, #0]
 8010a90:	2c00      	cmp	r4, #0
 8010a92:	d1ef      	bne.n	8010a74 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010a94:	2300      	movs	r3, #0
 8010a96:	e7ec      	b.n	8010a72 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08010a98 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	ed2d 8b0a 	vpush	{d8-d12}
 8010a9e:	eef0 ba40 	vmov.f32	s23, s0
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	eeb0 ca60 	vmov.f32	s24, s1
 8010aa8:	460d      	mov	r5, r1
 8010aaa:	eef0 aa41 	vmov.f32	s21, s2
 8010aae:	eeb0 ba61 	vmov.f32	s22, s3
 8010ab2:	eeb0 9a42 	vmov.f32	s18, s4
 8010ab6:	eef0 9a62 	vmov.f32	s19, s5
 8010aba:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8010abe:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8010ac2:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8010ac6:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8010aca:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8010ace:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8010ad2:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8010ad6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010ada:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8010ade:	f013 fbdb 	bl	8024298 <sqrtf>
 8010ae2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aea:	d12e      	bne.n	8010b4a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8010aec:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8010af0:	ee39 7acb 	vsub.f32	s14, s19, s22
 8010af4:	eeb0 8a6a 	vmov.f32	s16, s21
 8010af8:	eef0 8a4b 	vmov.f32	s17, s22
 8010afc:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8010b00:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8010b04:	eea7 8a0a 	vfma.f32	s16, s14, s20
 8010b08:	eee7 8aca 	vfms.f32	s17, s15, s20
 8010b0c:	2d02      	cmp	r5, #2
 8010b0e:	dc2f      	bgt.n	8010b70 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8010b10:	3501      	adds	r5, #1
 8010b12:	eef0 1a4b 	vmov.f32	s3, s22
 8010b16:	eeb0 1a6a 	vmov.f32	s2, s21
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	4629      	mov	r1, r5
 8010b1e:	eef0 2a68 	vmov.f32	s5, s17
 8010b22:	eeb0 2a48 	vmov.f32	s4, s16
 8010b26:	eef0 0a4c 	vmov.f32	s1, s24
 8010b2a:	eeb0 0a6b 	vmov.f32	s0, s23
 8010b2e:	f7ff ffb3 	bl	8010a98 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010b32:	eef0 0a68 	vmov.f32	s1, s17
 8010b36:	eeb0 0a48 	vmov.f32	s0, s16
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f7ff ff55 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b40:	eeb0 ba68 	vmov.f32	s22, s17
 8010b44:	eef0 aa48 	vmov.f32	s21, s16
 8010b48:	e7b9      	b.n	8010abe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8010b4a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8010b4e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010b52:	ee78 8acc 	vsub.f32	s17, s17, s24
 8010b56:	ee28 7a27 	vmul.f32	s14, s16, s15
 8010b5a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010b5e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8010b62:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8010b66:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8010b6a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8010b6e:	e7cd      	b.n	8010b0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8010b70:	eef0 0a68 	vmov.f32	s1, s17
 8010b74:	4620      	mov	r0, r4
 8010b76:	eeb0 0a48 	vmov.f32	s0, s16
 8010b7a:	f7ff ff36 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010b7e:	ecbd 8b0a 	vpop	{d8-d12}
 8010b82:	bd38      	pop	{r3, r4, r5, pc}

08010b84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8010b84:	b510      	push	{r4, lr}
 8010b86:	ed2d 8b0a 	vpush	{d8-d12}
 8010b8a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010b8e:	4604      	mov	r4, r0
 8010b90:	eeb0 ca40 	vmov.f32	s24, s0
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	eeb0 9a60 	vmov.f32	s18, s1
 8010b9a:	eef0 9a41 	vmov.f32	s19, s2
 8010b9e:	eef0 8a61 	vmov.f32	s17, s3
 8010ba2:	eeb0 ba42 	vmov.f32	s22, s4
 8010ba6:	eef0 ba62 	vmov.f32	s23, s5
 8010baa:	eeb0 aa43 	vmov.f32	s20, s6
 8010bae:	eef0 aa63 	vmov.f32	s21, s7
 8010bb2:	eeb0 8a44 	vmov.f32	s16, s8
 8010bb6:	eef0 ca64 	vmov.f32	s25, s9
 8010bba:	d12c      	bne.n	8010c16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8010bbc:	eef0 0a62 	vmov.f32	s1, s5
 8010bc0:	eeb0 0a42 	vmov.f32	s0, s4
 8010bc4:	f7ff ff11 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010bc8:	ee79 9acb 	vsub.f32	s19, s19, s22
 8010bcc:	ee7a caec 	vsub.f32	s25, s21, s25
 8010bd0:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8010bd4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010bd8:	ee69 9aac 	vmul.f32	s19, s19, s25
 8010bdc:	ee28 8a88 	vmul.f32	s16, s17, s16
 8010be0:	eef4 9ac8 	vcmpe.f32	s19, s16
 8010be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be8:	db0f      	blt.n	8010c0a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 8010bea:	2101      	movs	r1, #1
 8010bec:	eef0 2a6a 	vmov.f32	s5, s21
 8010bf0:	eeb0 2a4a 	vmov.f32	s4, s20
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	eef0 1a6b 	vmov.f32	s3, s23
 8010bfa:	eeb0 1a4b 	vmov.f32	s2, s22
 8010bfe:	eef0 0a49 	vmov.f32	s1, s18
 8010c02:	eeb0 0a4c 	vmov.f32	s0, s24
 8010c06:	f7ff ff47 	bl	8010a98 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 8010c0a:	eef0 0a6a 	vmov.f32	s1, s21
 8010c0e:	4620      	mov	r0, r4
 8010c10:	eeb0 0a4a 	vmov.f32	s0, s20
 8010c14:	e035      	b.n	8010c82 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d138      	bne.n	8010c8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010c1a:	ee31 4ae2 	vsub.f32	s8, s3, s5
 8010c1e:	ee33 6a48 	vsub.f32	s12, s6, s16
 8010c22:	ee71 7a42 	vsub.f32	s15, s2, s4
 8010c26:	ee73 6ae4 	vsub.f32	s13, s7, s9
 8010c2a:	ee26 7a44 	vnmul.f32	s14, s12, s8
 8010c2e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010c32:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3a:	d027      	beq.n	8010c8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010c3c:	ee28 8a63 	vnmul.f32	s16, s16, s7
 8010c40:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 8010c44:	eea4 8a83 	vfma.f32	s16, s9, s6
 8010c48:	eee1 8a22 	vfma.f32	s17, s2, s5
 8010c4c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8010c50:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8010c54:	eee6 7a28 	vfma.f32	s15, s12, s17
 8010c58:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8010c5c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010c60:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8010c64:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8010c68:	ee3c ca40 	vsub.f32	s24, s24, s0
 8010c6c:	ee39 9a60 	vsub.f32	s18, s18, s1
 8010c70:	ee29 9a09 	vmul.f32	s18, s18, s18
 8010c74:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8010c78:	eef4 7ac9 	vcmpe.f32	s15, s18
 8010c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c80:	db04      	blt.n	8010c8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010c82:	f7ff feb2 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c86:	ecbd 8b0a 	vpop	{d8-d12}
 8010c8a:	bd10      	pop	{r4, pc}
 8010c8c:	eef0 0a6b 	vmov.f32	s1, s23
 8010c90:	4620      	mov	r0, r4
 8010c92:	eeb0 0a4b 	vmov.f32	s0, s22
 8010c96:	f7ff fea8 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010c9a:	e7b6      	b.n	8010c0a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08010c9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	ed2d 8b0c 	vpush	{d8-d13}
 8010ca2:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8010ca6:	4604      	mov	r4, r0
 8010ca8:	eeb0 9a40 	vmov.f32	s18, s0
 8010cac:	eef0 9a60 	vmov.f32	s19, s1
 8010cb0:	eef0 aa41 	vmov.f32	s21, s2
 8010cb4:	eeb0 ba61 	vmov.f32	s22, s3
 8010cb8:	b933      	cbnz	r3, 8010cc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8010cba:	f7ff fe96 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010cbe:	eef0 0a4b 	vmov.f32	s1, s22
 8010cc2:	eeb0 0a6a 	vmov.f32	s0, s21
 8010cc6:	e015      	b.n	8010cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8010cc8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010ccc:	2b02      	cmp	r3, #2
 8010cce:	ee71 8a40 	vsub.f32	s17, s2, s0
 8010cd2:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8010cd6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010cda:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010cde:	d10f      	bne.n	8010d00 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8010ce0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010ce4:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010ce8:	f7ff fe7f 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010cec:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8010cf0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f7ff fe78 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010cfa:	ecbd 8b0c 	vpop	{d8-d13}
 8010cfe:	bd10      	pop	{r4, pc}
 8010d00:	f7ff fe73 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010d04:	eef0 0a69 	vmov.f32	s1, s19
 8010d08:	eeb0 0a49 	vmov.f32	s0, s18
 8010d0c:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8010e3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8010d10:	eeb1 aa68 	vneg.f32	s20, s17
 8010d14:	eddf ba4a 	vldr	s23, [pc, #296]	@ 8010e40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 8010d18:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010d22:	ed9f ca48 	vldr	s24, [pc, #288]	@ 8010e44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 8010d26:	eddf ca48 	vldr	s25, [pc, #288]	@ 8010e48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 8010d2a:	ed9f da48 	vldr	s26, [pc, #288]	@ 8010e4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 8010d2e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8010d32:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010d36:	f7ff fe58 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010d3a:	eef0 0a69 	vmov.f32	s1, s19
 8010d3e:	eeb0 0a49 	vmov.f32	s0, s18
 8010d42:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010e50 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 8010d46:	4620      	mov	r0, r4
 8010d48:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010d4c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010d50:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010d54:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010d58:	f7ff fe47 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010d5c:	eef0 0a69 	vmov.f32	s1, s19
 8010d60:	eeb0 0a49 	vmov.f32	s0, s18
 8010d64:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010e54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8010d68:	4620      	mov	r0, r4
 8010d6a:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010d6e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010d72:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8010d76:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8010d7a:	f7ff fe36 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010d7e:	eef0 0a69 	vmov.f32	s1, s19
 8010d82:	eeb0 0a49 	vmov.f32	s0, s18
 8010d86:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8010e58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010d90:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010d94:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010d98:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010d9c:	f7ff fe25 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010da0:	ee79 0a88 	vadd.f32	s1, s19, s16
 8010da4:	ee39 0a28 	vadd.f32	s0, s18, s17
 8010da8:	4620      	mov	r0, r4
 8010daa:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010dae:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010db2:	f7ff fe1a 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010db6:	eef0 0a69 	vmov.f32	s1, s19
 8010dba:	eeb0 0a49 	vmov.f32	s0, s18
 8010dbe:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8010e5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010dc8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010dcc:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010dd0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010dd4:	f7ff fe09 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010dd8:	eef0 0a69 	vmov.f32	s1, s19
 8010ddc:	eeb0 0a49 	vmov.f32	s0, s18
 8010de0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8010e60 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8010de4:	4620      	mov	r0, r4
 8010de6:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010dea:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010dee:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8010df2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8010df6:	f7ff fdf8 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010dfa:	eef0 0a69 	vmov.f32	s1, s19
 8010dfe:	eeb0 0a49 	vmov.f32	s0, s18
 8010e02:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8010e64 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 8010e06:	4620      	mov	r0, r4
 8010e08:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010e0c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010e10:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010e14:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010e18:	f7ff fde7 	bl	80109ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010e1c:	eef0 0a69 	vmov.f32	s1, s19
 8010e20:	eeb0 0a49 	vmov.f32	s0, s18
 8010e24:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010e68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 8010e28:	4620      	mov	r0, r4
 8010e2a:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010e2e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010e32:	eeea 0a2b 	vfma.f32	s1, s20, s23
 8010e36:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010e3a:	e73e      	b.n	8010cba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 8010e3c:	3d23d70a 	.word	0x3d23d70a
 8010e40:	3e8f5c29 	.word	0x3e8f5c29
 8010e44:	3f19999a 	.word	0x3f19999a
 8010e48:	3f4ccccd 	.word	0x3f4ccccd
 8010e4c:	3f75c28f 	.word	0x3f75c28f
 8010e50:	3e4ccccd 	.word	0x3e4ccccd
 8010e54:	3ecccccd 	.word	0x3ecccccd
 8010e58:	3f3851ec 	.word	0x3f3851ec
 8010e5c:	3fa3d70a 	.word	0x3fa3d70a
 8010e60:	3fcccccd 	.word	0x3fcccccd
 8010e64:	3fe66666 	.word	0x3fe66666
 8010e68:	3ffae148 	.word	0x3ffae148

08010e6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	ed2d 8b06 	vpush	{d8-d10}
 8010e72:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8010e76:	eef0 aa40 	vmov.f32	s21, s0
 8010e7a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8010e7e:	4604      	mov	r4, r0
 8010e80:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8010e84:	ee30 9a49 	vsub.f32	s18, s0, s18
 8010e88:	eeb0 aa60 	vmov.f32	s20, s1
 8010e8c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010e90:	eea9 0a09 	vfma.f32	s0, s18, s18
 8010e94:	f013 fa00 	bl	8024298 <sqrtf>
 8010e98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea0:	dd36      	ble.n	8010f10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8010ea2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010ea6:	2600      	movs	r6, #0
 8010ea8:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8010eac:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8010eb0:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8010eb4:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8010eb8:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010ebc:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8010ec0:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8010ec4:	ee70 9a28 	vadd.f32	s19, s0, s17
 8010ec8:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8010ecc:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8010ed0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010ed4:	b1fd      	cbz	r5, 8010f16 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8010ed6:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8010eda:	eef0 0a49 	vmov.f32	s1, s18
 8010ede:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8010ee2:	eeb0 0a69 	vmov.f32	s0, s19
 8010ee6:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 8010eea:	4620      	mov	r0, r4
 8010eec:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8010ef0:	f7ff fd64 	bl	80109bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010ef4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 8010ef8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8010efc:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8010f00:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8010f04:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 8010f08:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8010f0c:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8010f10:	ecbd 8b06 	vpop	{d8-d10}
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
 8010f16:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 8010f1a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 8010f1e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8010f22:	b16b      	cbz	r3, 8010f40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 8010f24:	eef0 1a49 	vmov.f32	s3, s18
 8010f28:	4620      	mov	r0, r4
 8010f2a:	eeb0 1a69 	vmov.f32	s2, s19
 8010f2e:	eef0 0a62 	vmov.f32	s1, s5
 8010f32:	eeb0 0a42 	vmov.f32	s0, s4
 8010f36:	f7ff feb1 	bl	8010c9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010f3a:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 8010f3e:	e7db      	b.n	8010ef8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 8010f40:	eef0 4a48 	vmov.f32	s9, s16
 8010f44:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8010f48:	eeb0 4a68 	vmov.f32	s8, s17
 8010f4c:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8010f50:	eef0 3a49 	vmov.f32	s7, s18
 8010f54:	4620      	mov	r0, r4
 8010f56:	eeb0 3a69 	vmov.f32	s6, s19
 8010f5a:	f7ff fe13 	bl	8010b84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8010f5e:	e7cb      	b.n	8010ef8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08010f60 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8010f60:	ee07 2a90 	vmov	s15, r2
 8010f64:	ee07 1a10 	vmov	s14, r1
 8010f68:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8010f6c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8010f80 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8010f70:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8010f74:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010f78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f7c:	f7ff bf76 	b.w	8010e6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010f80:	3d000000 	.word	0x3d000000

08010f84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	ed2d 8b02 	vpush	{d8}
 8010f8a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8010f8e:	4604      	mov	r4, r0
 8010f90:	b31d      	cbz	r5, 8010fda <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8010f92:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8010f96:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8010f9a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8010f9e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8010fa2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010fa6:	eef0 0a68 	vmov.f32	s1, s17
 8010faa:	f7ff fd07 	bl	80109bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010fae:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010fb2:	eef0 1a48 	vmov.f32	s3, s16
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	eeb0 0a41 	vmov.f32	s0, s2
 8010fbc:	eef0 0a68 	vmov.f32	s1, s17
 8010fc0:	f7ff fe6c 	bl	8010c9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010fc4:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010fc8:	eef0 1a68 	vmov.f32	s3, s17
 8010fcc:	4620      	mov	r0, r4
 8010fce:	eef0 0a48 	vmov.f32	s1, s16
 8010fd2:	eeb0 0a41 	vmov.f32	s0, s2
 8010fd6:	f7ff fe61 	bl	8010c9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010fda:	4628      	mov	r0, r5
 8010fdc:	ecbd 8b02 	vpop	{d8}
 8010fe0:	bd38      	pop	{r3, r4, r5, pc}

08010fe2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8010fe2:	b510      	push	{r4, lr}
 8010fe4:	ed2d 8b02 	vpush	{d8}
 8010fe8:	4604      	mov	r4, r0
 8010fea:	eeb0 8a40 	vmov.f32	s16, s0
 8010fee:	eef0 8a60 	vmov.f32	s17, s1
 8010ff2:	f7ff ffc7 	bl	8010f84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010ff6:	b9d0      	cbnz	r0, 801102e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8010ffe:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8011002:	eef0 0a68 	vmov.f32	s1, s17
 8011006:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801100a:	eeb0 0a48 	vmov.f32	s0, s16
 801100e:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8011012:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 8011016:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801101a:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 801101e:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8011022:	f7ff fdaf 	bl	8010b84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8011026:	2001      	movs	r0, #1
 8011028:	ecbd 8b02 	vpop	{d8}
 801102c:	bd10      	pop	{r4, pc}
 801102e:	2000      	movs	r0, #0
 8011030:	e7fa      	b.n	8011028 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

08011032 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 8011032:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 8011036:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 801103a:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 801103e:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 8011042:	f7ff be2b 	b.w	8010c9c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08011048 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8011048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	b089      	sub	sp, #36	@ 0x24
 801104e:	461c      	mov	r4, r3
 8011050:	4682      	mov	sl, r0
 8011052:	4615      	mov	r5, r2
 8011054:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8011058:	f10d 0820 	add.w	r8, sp, #32
 801105c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801105e:	9304      	str	r3, [sp, #16]
 8011060:	2300      	movs	r3, #0
 8011062:	9105      	str	r1, [sp, #20]
 8011064:	9306      	str	r3, [sp, #24]
 8011066:	f848 3d04 	str.w	r3, [r8, #-4]!
 801106a:	9b04      	ldr	r3, [sp, #16]
 801106c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8011070:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8011074:	9b05      	ldr	r3, [sp, #20]
 8011076:	429d      	cmp	r5, r3
 8011078:	d96d      	bls.n	8011156 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801107a:	3d01      	subs	r5, #1
 801107c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8011080:	2b06      	cmp	r3, #6
 8011082:	d8f7      	bhi.n	8011074 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8011084:	a201      	add	r2, pc, #4	@ (adr r2, 801108c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8011086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108a:	bf00      	nop
 801108c:	080110ab 	.word	0x080110ab
 8011090:	08011075 	.word	0x08011075
 8011094:	080110a9 	.word	0x080110a9
 8011098:	080110cd 	.word	0x080110cd
 801109c:	080110cd 	.word	0x080110cd
 80110a0:	080110d1 	.word	0x080110d1
 80110a4:	08011111 	.word	0x08011111
 80110a8:	3c02      	subs	r4, #2
 80110aa:	4650      	mov	r0, sl
 80110ac:	9400      	str	r4, [sp, #0]
 80110ae:	462b      	mov	r3, r5
 80110b0:	4642      	mov	r2, r8
 80110b2:	a906      	add	r1, sp, #24
 80110b4:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80110b8:	f7ff fcae 	bl	8010a18 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80110bc:	eddd 0a07 	vldr	s1, [sp, #28]
 80110c0:	ed9d 0a06 	vldr	s0, [sp, #24]
 80110c4:	4630      	mov	r0, r6
 80110c6:	f7ff fed1 	bl	8010e6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80110ca:	e7d3      	b.n	8011074 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80110cc:	3c01      	subs	r4, #1
 80110ce:	e7ec      	b.n	80110aa <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 80110d0:	f1a4 0b04 	sub.w	fp, r4, #4
 80110d4:	3c02      	subs	r4, #2
 80110d6:	4650      	mov	r0, sl
 80110d8:	462b      	mov	r3, r5
 80110da:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80110de:	f8cd b000 	str.w	fp, [sp]
 80110e2:	4642      	mov	r2, r8
 80110e4:	a906      	add	r1, sp, #24
 80110e6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80110ea:	f7ff fc95 	bl	8010a18 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80110ee:	eddd 2a07 	vldr	s5, [sp, #28]
 80110f2:	ed9d 2a06 	vldr	s4, [sp, #24]
 80110f6:	4630      	mov	r0, r6
 80110f8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80110fc:	ed14 1a02 	vldr	s2, [r4, #-8]
 8011100:	edd4 0a01 	vldr	s1, [r4, #4]
 8011104:	ed94 0a00 	vldr	s0, [r4]
 8011108:	f7ff fc1a 	bl	8010940 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 801110c:	465c      	mov	r4, fp
 801110e:	e7b1      	b.n	8011074 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8011110:	f1a4 0b06 	sub.w	fp, r4, #6
 8011114:	3c02      	subs	r4, #2
 8011116:	4650      	mov	r0, sl
 8011118:	462b      	mov	r3, r5
 801111a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801111e:	f8cd b000 	str.w	fp, [sp]
 8011122:	4642      	mov	r2, r8
 8011124:	a906      	add	r1, sp, #24
 8011126:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801112a:	f7ff fc75 	bl	8010a18 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801112e:	eddd 3a07 	vldr	s7, [sp, #28]
 8011132:	ed9d 3a06 	vldr	s6, [sp, #24]
 8011136:	4630      	mov	r0, r6
 8011138:	ed54 2a03 	vldr	s5, [r4, #-12]
 801113c:	ed14 2a04 	vldr	s4, [r4, #-16]
 8011140:	ed54 1a01 	vldr	s3, [r4, #-4]
 8011144:	ed14 1a02 	vldr	s2, [r4, #-8]
 8011148:	edd4 0a01 	vldr	s1, [r4, #4]
 801114c:	ed94 0a00 	vldr	s0, [r4]
 8011150:	f7ff fc15 	bl	801097e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011154:	e7da      	b.n	801110c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8011156:	9b04      	ldr	r3, [sp, #16]
 8011158:	b113      	cbz	r3, 8011160 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 801115a:	4630      	mov	r0, r6
 801115c:	f7ff ff69 	bl	8011032 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8011160:	b009      	add	sp, #36	@ 0x24
 8011162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011166:	bf00      	nop

08011168 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8011168:	eef0 7a60 	vmov.f32	s15, s1
 801116c:	6803      	ldr	r3, [r0, #0]
 801116e:	689b      	ldr	r3, [r3, #8]
 8011170:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011174:	ee17 2a90 	vmov	r2, s15
 8011178:	eef0 7a40 	vmov.f32	s15, s0
 801117c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011180:	ee17 1a90 	vmov	r1, s15
 8011184:	4718      	bx	r3
	...

08011188 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8011188:	4b04      	ldr	r3, [pc, #16]	@ (801119c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 801118a:	b510      	push	{r4, lr}
 801118c:	4604      	mov	r4, r0
 801118e:	f840 3b14 	str.w	r3, [r0], #20
 8011192:	f002 f8e8 	bl	8013366 <_ZN8touchgfx7OutlineD1Ev>
 8011196:	4620      	mov	r0, r4
 8011198:	bd10      	pop	{r4, pc}
 801119a:	bf00      	nop
 801119c:	080294e4 	.word	0x080294e4

080111a0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 80111a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	ed2d 8b04 	vpush	{d8-d9}
 80111a8:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 80111ac:	b0b5      	sub	sp, #212	@ 0xd4
 80111ae:	4605      	mov	r5, r0
 80111b0:	468b      	mov	fp, r1
 80111b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111b6:	9206      	str	r2, [sp, #24]
 80111b8:	461e      	mov	r6, r3
 80111ba:	2400      	movs	r4, #0
 80111bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c0:	f240 814f 	bls.w	8011462 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 80111c4:	23ff      	movs	r3, #255	@ 0xff
 80111c6:	1d02      	adds	r2, r0, #4
 80111c8:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8011468 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 80111cc:	f04f 0800 	mov.w	r8, #0
 80111d0:	9300      	str	r3, [sp, #0]
 80111d2:	af08      	add	r7, sp, #32
 80111d4:	6981      	ldr	r1, [r0, #24]
 80111d6:	a808      	add	r0, sp, #32
 80111d8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80111da:	eef0 9a49 	vmov.f32	s19, s18
 80111de:	f012 fbb1 	bl	8023944 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80111e2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 80111e6:	4ba1      	ldr	r3, [pc, #644]	@ (801146c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 80111e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80111ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111f0:	2201      	movs	r2, #1
 80111f2:	9308      	str	r3, [sp, #32]
 80111f4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80111f8:	edd5 6a08 	vldr	s13, [r5, #32]
 80111fc:	eeb0 8a49 	vmov.f32	s16, s18
 8011200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011204:	9325      	str	r3, [sp, #148]	@ 0x94
 8011206:	f04f 0300 	mov.w	r3, #0
 801120a:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 801120e:	7f6a      	ldrb	r2, [r5, #29]
 8011210:	eef0 8a49 	vmov.f32	s17, s18
 8011214:	bf48      	it	mi
 8011216:	eef1 7a67 	vnegmi.f32	s15, s15
 801121a:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 801121e:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8011222:	46c1      	mov	r9, r8
 8011224:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011228:	f04f 0a01 	mov.w	sl, #1
 801122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011230:	7fab      	ldrb	r3, [r5, #30]
 8011232:	942a      	str	r4, [sp, #168]	@ 0xa8
 8011234:	435a      	muls	r2, r3
 8011236:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 801123a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801123e:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8011242:	1c53      	adds	r3, r2, #1
 8011244:	942b      	str	r4, [sp, #172]	@ 0xac
 8011246:	942c      	str	r4, [sp, #176]	@ 0xb0
 8011248:	ee27 7a26 	vmul.f32	s14, s14, s13
 801124c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8011250:	942d      	str	r4, [sp, #180]	@ 0xb4
 8011252:	942e      	str	r4, [sp, #184]	@ 0xb8
 8011254:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011258:	ee67 7a27 	vmul.f32	s15, s14, s15
 801125c:	942f      	str	r4, [sp, #188]	@ 0xbc
 801125e:	9430      	str	r4, [sp, #192]	@ 0xc0
 8011260:	9431      	str	r4, [sp, #196]	@ 0xc4
 8011262:	9432      	str	r4, [sp, #200]	@ 0xc8
 8011264:	9433      	str	r4, [sp, #204]	@ 0xcc
 8011266:	4644      	mov	r4, r8
 8011268:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 801126c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8011270:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8011274:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8011278:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 801127c:	9b06      	ldr	r3, [sp, #24]
 801127e:	454b      	cmp	r3, r9
 8011280:	f000 80cc 	beq.w	801141c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8011284:	f109 0301 	add.w	r3, r9, #1
 8011288:	9305      	str	r3, [sp, #20]
 801128a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801128e:	2b06      	cmp	r3, #6
 8011290:	d839      	bhi.n	8011306 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011292:	e8df f003 	tbb	[pc, r3]
 8011296:	3b04      	.short	0x3b04
 8011298:	817c6f60 	.word	0x817c6f60
 801129c:	a0          	.byte	0xa0
 801129d:	00          	.byte	0x00
 801129e:	45c1      	cmp	r9, r8
 80112a0:	d92b      	bls.n	80112fa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80112a2:	eef0 0a49 	vmov.f32	s1, s18
 80112a6:	4638      	mov	r0, r7
 80112a8:	eeb0 0a69 	vmov.f32	s0, s19
 80112ac:	f7ff fdde 	bl	8010e6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 80112b0:	4638      	mov	r0, r7
 80112b2:	f7ff fe67 	bl	8010f84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80112b6:	4681      	mov	r9, r0
 80112b8:	b9f8      	cbnz	r0, 80112fa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 80112ba:	eef0 0a49 	vmov.f32	s1, s18
 80112be:	4638      	mov	r0, r7
 80112c0:	eeb0 0a69 	vmov.f32	s0, s19
 80112c4:	f7ff fe8d 	bl	8010fe2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80112c8:	4628      	mov	r0, r5
 80112ca:	4623      	mov	r3, r4
 80112cc:	9a05      	ldr	r2, [sp, #20]
 80112ce:	4641      	mov	r1, r8
 80112d0:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 80112d4:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 80112d8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 80112dc:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 80112e0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 80112e4:	e9cd b600 	strd	fp, r6, [sp]
 80112e8:	f7ff feae 	bl	8011048 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 80112ec:	eef0 0a49 	vmov.f32	s1, s18
 80112f0:	eeb0 0a69 	vmov.f32	s0, s19
 80112f4:	4638      	mov	r0, r7
 80112f6:	f7ff fe74 	bl	8010fe2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 80112fa:	eeb0 8a49 	vmov.f32	s16, s18
 80112fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011302:	eef0 8a69 	vmov.f32	s17, s19
 8011306:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801130a:	e7b7      	b.n	801127c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 801130c:	45c1      	cmp	r9, r8
 801130e:	d90d      	bls.n	801132c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8011310:	4638      	mov	r0, r7
 8011312:	f7ff fe37 	bl	8010f84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8011316:	b948      	cbnz	r0, 801132c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8011318:	4623      	mov	r3, r4
 801131a:	464a      	mov	r2, r9
 801131c:	4641      	mov	r1, r8
 801131e:	4628      	mov	r0, r5
 8011320:	e9cd a702 	strd	sl, r7, [sp, #8]
 8011324:	e9cd b600 	strd	fp, r6, [sp]
 8011328:	f7ff fe8e 	bl	8011048 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 801132c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011330:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8011334:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8011338:	3402      	adds	r4, #2
 801133a:	edd3 8a00 	vldr	s17, [r3]
 801133e:	46c8      	mov	r8, r9
 8011340:	ed93 8a01 	vldr	s16, [r3, #4]
 8011344:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8011348:	eef0 9a68 	vmov.f32	s19, s17
 801134c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8011350:	eeb0 9a48 	vmov.f32	s18, s16
 8011354:	e7d7      	b.n	8011306 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011356:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801135a:	4638      	mov	r0, r7
 801135c:	3402      	adds	r4, #2
 801135e:	edd3 8a00 	vldr	s17, [r3]
 8011362:	ed93 8a01 	vldr	s16, [r3, #4]
 8011366:	eeb0 0a68 	vmov.f32	s0, s17
 801136a:	eef0 0a48 	vmov.f32	s1, s16
 801136e:	f7ff fd7d 	bl	8010e6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011372:	e7c8      	b.n	8011306 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011374:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011378:	edd3 8a00 	vldr	s17, [r3]
 801137c:	eef0 0a48 	vmov.f32	s1, s16
 8011380:	4638      	mov	r0, r7
 8011382:	eeb0 0a68 	vmov.f32	s0, s17
 8011386:	3401      	adds	r4, #1
 8011388:	f7ff fd70 	bl	8010e6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801138c:	e7bb      	b.n	8011306 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801138e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011392:	ed93 8a00 	vldr	s16, [r3]
 8011396:	e7f1      	b.n	801137c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8011398:	00a3      	lsls	r3, r4, #2
 801139a:	eef0 0a48 	vmov.f32	s1, s16
 801139e:	eeb0 0a68 	vmov.f32	s0, s17
 80113a2:	4638      	mov	r0, r7
 80113a4:	f103 0208 	add.w	r2, r3, #8
 80113a8:	f103 090c 	add.w	r9, r3, #12
 80113ac:	4433      	add	r3, r6
 80113ae:	3404      	adds	r4, #4
 80113b0:	4432      	add	r2, r6
 80113b2:	44b1      	add	r9, r6
 80113b4:	edd3 1a01 	vldr	s3, [r3, #4]
 80113b8:	ed92 2a00 	vldr	s4, [r2]
 80113bc:	edd9 2a00 	vldr	s5, [r9]
 80113c0:	ed93 1a00 	vldr	s2, [r3]
 80113c4:	9207      	str	r2, [sp, #28]
 80113c6:	f7ff fabb 	bl	8010940 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80113ca:	9a07      	ldr	r2, [sp, #28]
 80113cc:	ed99 8a00 	vldr	s16, [r9]
 80113d0:	edd2 8a00 	vldr	s17, [r2]
 80113d4:	e797      	b.n	8011306 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 80113d6:	00a3      	lsls	r3, r4, #2
 80113d8:	eef0 0a48 	vmov.f32	s1, s16
 80113dc:	eeb0 0a68 	vmov.f32	s0, s17
 80113e0:	4638      	mov	r0, r7
 80113e2:	f103 0210 	add.w	r2, r3, #16
 80113e6:	f103 0914 	add.w	r9, r3, #20
 80113ea:	4433      	add	r3, r6
 80113ec:	3406      	adds	r4, #6
 80113ee:	4432      	add	r2, r6
 80113f0:	44b1      	add	r9, r6
 80113f2:	edd3 2a03 	vldr	s5, [r3, #12]
 80113f6:	ed92 3a00 	vldr	s6, [r2]
 80113fa:	edd9 3a00 	vldr	s7, [r9]
 80113fe:	ed93 2a02 	vldr	s4, [r3, #8]
 8011402:	edd3 1a01 	vldr	s3, [r3, #4]
 8011406:	ed93 1a00 	vldr	s2, [r3]
 801140a:	9207      	str	r2, [sp, #28]
 801140c:	f7ff fab7 	bl	801097e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011410:	9a07      	ldr	r2, [sp, #28]
 8011412:	ed99 8a00 	vldr	s16, [r9]
 8011416:	edd2 8a00 	vldr	s17, [r2]
 801141a:	e774      	b.n	8011306 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 801141c:	9b06      	ldr	r3, [sp, #24]
 801141e:	af08      	add	r7, sp, #32
 8011420:	4543      	cmp	r3, r8
 8011422:	d90f      	bls.n	8011444 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8011424:	4638      	mov	r0, r7
 8011426:	f7ff fdad 	bl	8010f84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801142a:	b958      	cbnz	r0, 8011444 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 801142c:	2301      	movs	r3, #1
 801142e:	9703      	str	r7, [sp, #12]
 8011430:	f8cd b000 	str.w	fp, [sp]
 8011434:	4641      	mov	r1, r8
 8011436:	9a06      	ldr	r2, [sp, #24]
 8011438:	4628      	mov	r0, r5
 801143a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801143e:	4623      	mov	r3, r4
 8011440:	f7ff fe02 	bl	8011048 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011444:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8011448:	4638      	mov	r0, r7
 801144a:	f012 fb0f 	bl	8023a6c <_ZN8touchgfx6Canvas6renderEh>
 801144e:	4604      	mov	r4, r0
 8011450:	4638      	mov	r0, r7
 8011452:	f7ff fe99 	bl	8011188 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8011456:	4620      	mov	r0, r4
 8011458:	b035      	add	sp, #212	@ 0xd4
 801145a:	ecbd 8b04 	vpop	{d8-d9}
 801145e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011462:	2401      	movs	r4, #1
 8011464:	e7f7      	b.n	8011456 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8011466:	bf00      	nop
 8011468:	00000000 	.word	0x00000000
 801146c:	08028ce4 	.word	0x08028ce4

08011470 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8011470:	b510      	push	{r4, lr}
 8011472:	4604      	mov	r4, r0
 8011474:	f7ff fe88 	bl	8011188 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8011478:	21b0      	movs	r1, #176	@ 0xb0
 801147a:	4620      	mov	r0, r4
 801147c:	f012 fee2 	bl	8024244 <_ZdlPvj>
 8011480:	4620      	mov	r0, r4
 8011482:	bd10      	pop	{r4, pc}

08011484 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8011484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011488:	4698      	mov	r8, r3
 801148a:	23ff      	movs	r3, #255	@ 0xff
 801148c:	4607      	mov	r7, r0
 801148e:	4689      	mov	r9, r1
 8011490:	4692      	mov	sl, r2
 8011492:	1d02      	adds	r2, r0, #4
 8011494:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8011498:	2400      	movs	r4, #0
 801149a:	44ca      	add	sl, r9
 801149c:	ed2d 8b06 	vpush	{d8-d10}
 80114a0:	b0aa      	sub	sp, #168	@ 0xa8
 80114a2:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 80116a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80114a6:	9300      	str	r3, [sp, #0]
 80114a8:	eef0 8a48 	vmov.f32	s17, s16
 80114ac:	6981      	ldr	r1, [r0, #24]
 80114ae:	a80d      	add	r0, sp, #52	@ 0x34
 80114b0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80114b2:	f012 fa47 	bl	8023944 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80114b6:	7f3b      	ldrb	r3, [r7, #28]
 80114b8:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 80116a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 80114bc:	4628      	mov	r0, r5
 80114be:	1e5a      	subs	r2, r3, #1
 80114c0:	eeb0 0a60 	vmov.f32	s0, s1
 80114c4:	4253      	negs	r3, r2
 80114c6:	4153      	adcs	r3, r2
 80114c8:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 80114cc:	f006 f889 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80114d0:	eeb0 9a40 	vmov.f32	s18, s0
 80114d4:	eef0 9a60 	vmov.f32	s19, s1
 80114d8:	45ca      	cmp	sl, r9
 80114da:	f000 80cd 	beq.w	8011678 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 80114de:	f819 3b01 	ldrb.w	r3, [r9], #1
 80114e2:	2b06      	cmp	r3, #6
 80114e4:	d8f8      	bhi.n	80114d8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80114e6:	e8df f003 	tbb	[pc, r3]
 80114ea:	0804      	.short	0x0804
 80114ec:	58533f2a 	.word	0x58533f2a
 80114f0:	8a          	.byte	0x8a
 80114f1:	00          	.byte	0x00
 80114f2:	a80d      	add	r0, sp, #52	@ 0x34
 80114f4:	f012 fa98 	bl	8023a28 <_ZN8touchgfx6Canvas5closeEv>
 80114f8:	e7ee      	b.n	80114d8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80114fa:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80114fe:	4628      	mov	r0, r5
 8011500:	ed93 8a01 	vldr	s16, [r3, #4]
 8011504:	edd3 8a00 	vldr	s17, [r3]
 8011508:	eef0 0a48 	vmov.f32	s1, s16
 801150c:	eeb0 0a68 	vmov.f32	s0, s17
 8011510:	f006 f867 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011514:	a80d      	add	r0, sp, #52	@ 0x34
 8011516:	eef0 7a60 	vmov.f32	s15, s1
 801151a:	eeb0 9a40 	vmov.f32	s18, s0
 801151e:	eef0 9a60 	vmov.f32	s19, s1
 8011522:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011526:	ee17 2a90 	vmov	r2, s15
 801152a:	eef0 7a40 	vmov.f32	s15, s0
 801152e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011532:	ee17 1a90 	vmov	r1, s15
 8011536:	f012 fb51 	bl	8023bdc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801153a:	3402      	adds	r4, #2
 801153c:	e7cc      	b.n	80114d8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 801153e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011542:	4628      	mov	r0, r5
 8011544:	edd3 8a00 	vldr	s17, [r3]
 8011548:	ed93 8a01 	vldr	s16, [r3, #4]
 801154c:	eeb0 0a68 	vmov.f32	s0, s17
 8011550:	eef0 0a48 	vmov.f32	s1, s16
 8011554:	f006 f845 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011558:	a80d      	add	r0, sp, #52	@ 0x34
 801155a:	eeb0 9a40 	vmov.f32	s18, s0
 801155e:	eef0 9a60 	vmov.f32	s19, s1
 8011562:	f7ff fe01 	bl	8011168 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8011566:	e7e8      	b.n	801153a <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8011568:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 801156c:	edd3 8a00 	vldr	s17, [r3]
 8011570:	eef0 0a48 	vmov.f32	s1, s16
 8011574:	4628      	mov	r0, r5
 8011576:	eeb0 0a68 	vmov.f32	s0, s17
 801157a:	3401      	adds	r4, #1
 801157c:	f006 f831 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011580:	a80d      	add	r0, sp, #52	@ 0x34
 8011582:	eef0 9a60 	vmov.f32	s19, s1
 8011586:	eeb0 9a40 	vmov.f32	s18, s0
 801158a:	f7ff fded 	bl	8011168 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801158e:	e7a3      	b.n	80114d8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011590:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011594:	ed93 8a00 	vldr	s16, [r3]
 8011598:	e7ea      	b.n	8011570 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 801159a:	1ca3      	adds	r3, r4, #2
 801159c:	4628      	mov	r0, r5
 801159e:	3404      	adds	r4, #4
 80115a0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80115a4:	ed53 0a01 	vldr	s1, [r3, #-4]
 80115a8:	ed13 0a02 	vldr	s0, [r3, #-8]
 80115ac:	edd3 8a00 	vldr	s17, [r3]
 80115b0:	ed93 8a01 	vldr	s16, [r3, #4]
 80115b4:	f006 f815 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80115b8:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 80115bc:	eeb0 0a68 	vmov.f32	s0, s17
 80115c0:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 80115c4:	eef0 0a48 	vmov.f32	s1, s16
 80115c8:	4628      	mov	r0, r5
 80115ca:	f006 f80a 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80115ce:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 80115d2:	eef0 2a60 	vmov.f32	s5, s1
 80115d6:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 80115da:	eeb0 2a40 	vmov.f32	s4, s0
 80115de:	a80d      	add	r0, sp, #52	@ 0x34
 80115e0:	eeb0 aa40 	vmov.f32	s20, s0
 80115e4:	eef0 aa60 	vmov.f32	s21, s1
 80115e8:	eeb0 0a49 	vmov.f32	s0, s18
 80115ec:	eef0 0a69 	vmov.f32	s1, s19
 80115f0:	f7ff f9a6 	bl	8010940 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80115f4:	eef0 9a6a 	vmov.f32	s19, s21
 80115f8:	eeb0 9a4a 	vmov.f32	s18, s20
 80115fc:	e76c      	b.n	80114d8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 80115fe:	1d26      	adds	r6, r4, #4
 8011600:	4628      	mov	r0, r5
 8011602:	3406      	adds	r4, #6
 8011604:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011608:	ed56 0a03 	vldr	s1, [r6, #-12]
 801160c:	ed16 0a04 	vldr	s0, [r6, #-16]
 8011610:	edd6 8a00 	vldr	s17, [r6]
 8011614:	ed96 8a01 	vldr	s16, [r6, #4]
 8011618:	f005 ffe3 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801161c:	ed8d 0a07 	vstr	s0, [sp, #28]
 8011620:	4628      	mov	r0, r5
 8011622:	ed16 0a02 	vldr	s0, [r6, #-8]
 8011626:	edcd 0a08 	vstr	s1, [sp, #32]
 801162a:	ed56 0a01 	vldr	s1, [r6, #-4]
 801162e:	f005 ffd8 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011632:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8011636:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 801163a:	eeb0 0a68 	vmov.f32	s0, s17
 801163e:	eef0 0a48 	vmov.f32	s1, s16
 8011642:	4628      	mov	r0, r5
 8011644:	f005 ffcd 	bl	80175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011648:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 801164c:	eeb0 3a40 	vmov.f32	s6, s0
 8011650:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8011654:	eef0 3a60 	vmov.f32	s7, s1
 8011658:	eddd 1a08 	vldr	s3, [sp, #32]
 801165c:	eeb0 aa40 	vmov.f32	s20, s0
 8011660:	ed9d 1a07 	vldr	s2, [sp, #28]
 8011664:	eef0 aa60 	vmov.f32	s21, s1
 8011668:	a80d      	add	r0, sp, #52	@ 0x34
 801166a:	eef0 0a69 	vmov.f32	s1, s19
 801166e:	eeb0 0a49 	vmov.f32	s0, s18
 8011672:	f7ff f984 	bl	801097e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011676:	e7bd      	b.n	80115f4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8011678:	7f7b      	ldrb	r3, [r7, #29]
 801167a:	a80d      	add	r0, sp, #52	@ 0x34
 801167c:	7fb9      	ldrb	r1, [r7, #30]
 801167e:	4359      	muls	r1, r3
 8011680:	1c4b      	adds	r3, r1, #1
 8011682:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8011686:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801168a:	f012 f9ef 	bl	8023a6c <_ZN8touchgfx6Canvas6renderEh>
 801168e:	4b07      	ldr	r3, [pc, #28]	@ (80116ac <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8011690:	4604      	mov	r4, r0
 8011692:	a812      	add	r0, sp, #72	@ 0x48
 8011694:	930d      	str	r3, [sp, #52]	@ 0x34
 8011696:	f001 fe66 	bl	8013366 <_ZN8touchgfx7OutlineD1Ev>
 801169a:	4620      	mov	r0, r4
 801169c:	b02a      	add	sp, #168	@ 0xa8
 801169e:	ecbd 8b06 	vpop	{d8-d10}
 80116a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a6:	bf00      	nop
 80116a8:	00000000 	.word	0x00000000
 80116ac:	080294e4 	.word	0x080294e4

080116b0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 80116b0:	b410      	push	{r4}
 80116b2:	7f04      	ldrb	r4, [r0, #28]
 80116b4:	b11c      	cbz	r4, 80116be <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 80116b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116ba:	f7ff bee3 	b.w	8011484 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 80116be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116c2:	f7ff bd6d 	b.w	80111a0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

080116c8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 80116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	4691      	mov	r9, r2
 80116ce:	4602      	mov	r2, r0
 80116d0:	b085      	sub	sp, #20
 80116d2:	4605      	mov	r5, r0
 80116d4:	f852 0f26 	ldr.w	r0, [r2, #38]!
 80116d8:	4688      	mov	r8, r1
 80116da:	469a      	mov	sl, r3
 80116dc:	ab02      	add	r3, sp, #8
 80116de:	6851      	ldr	r1, [r2, #4]
 80116e0:	af02      	add	r7, sp, #8
 80116e2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80116e6:	c303      	stmia	r3!, {r0, r1}
 80116e8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd08      	ble.n	8011702 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80116f0:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 80116f4:	2c00      	cmp	r4, #0
 80116f6:	dd04      	ble.n	8011702 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 80116f8:	4a2e      	ldr	r2, [pc, #184]	@ (80117b4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 80116fa:	7812      	ldrb	r2, [r2, #0]
 80116fc:	b122      	cbz	r2, 8011708 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 80116fe:	2a01      	cmp	r2, #1
 8011700:	d02d      	beq.n	801175e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8011702:	b005      	add	sp, #20
 8011704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011708:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801170c:	441c      	add	r4, r3
 801170e:	b2a4      	uxth	r4, r4
 8011710:	b226      	sxth	r6, r4
 8011712:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011716:	42b3      	cmp	r3, r6
 8011718:	daf3      	bge.n	8011702 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 801171a:	4653      	mov	r3, sl
 801171c:	464a      	mov	r2, r9
 801171e:	4641      	mov	r1, r8
 8011720:	4628      	mov	r0, r5
 8011722:	e9cd b700 	strd	fp, r7, [sp]
 8011726:	f7ff ffc3 	bl	80116b0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 801172a:	b940      	cbnz	r0, 801173e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 801172c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011730:	2b01      	cmp	r3, #1
 8011732:	d004      	beq.n	801173e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8011734:	3301      	adds	r3, #1
 8011736:	105b      	asrs	r3, r3, #1
 8011738:	f8ad 300e 	strh.w	r3, [sp, #14]
 801173c:	e7ed      	b.n	801171a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 801173e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011742:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011746:	4413      	add	r3, r2
 8011748:	b29b      	uxth	r3, r3
 801174a:	441a      	add	r2, r3
 801174c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011750:	b212      	sxth	r2, r2
 8011752:	4296      	cmp	r6, r2
 8011754:	dadd      	bge.n	8011712 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8011756:	1ae3      	subs	r3, r4, r3
 8011758:	f8ad 300e 	strh.w	r3, [sp, #14]
 801175c:	e7d9      	b.n	8011712 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 801175e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8011762:	441c      	add	r4, r3
 8011764:	b2a4      	uxth	r4, r4
 8011766:	b226      	sxth	r6, r4
 8011768:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801176c:	42b3      	cmp	r3, r6
 801176e:	dac8      	bge.n	8011702 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8011770:	4653      	mov	r3, sl
 8011772:	464a      	mov	r2, r9
 8011774:	4641      	mov	r1, r8
 8011776:	4628      	mov	r0, r5
 8011778:	e9cd b700 	strd	fp, r7, [sp]
 801177c:	f7ff ff98 	bl	80116b0 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8011780:	b940      	cbnz	r0, 8011794 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8011782:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011786:	2b01      	cmp	r3, #1
 8011788:	d004      	beq.n	8011794 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 801178a:	3301      	adds	r3, #1
 801178c:	105b      	asrs	r3, r3, #1
 801178e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011792:	e7ed      	b.n	8011770 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8011794:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011798:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801179c:	4413      	add	r3, r2
 801179e:	b29b      	uxth	r3, r3
 80117a0:	441a      	add	r2, r3
 80117a2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80117a6:	b212      	sxth	r2, r2
 80117a8:	4296      	cmp	r6, r2
 80117aa:	dadd      	bge.n	8011768 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 80117ac:	1ae3      	subs	r3, r4, r3
 80117ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 80117b2:	e7d9      	b.n	8011768 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 80117b4:	2402592c 	.word	0x2402592c

080117b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80117b8:	0c0b      	lsrs	r3, r1, #16
 80117ba:	60c1      	str	r1, [r0, #12]
 80117bc:	7481      	strb	r1, [r0, #18]
 80117be:	7403      	strb	r3, [r0, #16]
 80117c0:	0a0b      	lsrs	r3, r1, #8
 80117c2:	7443      	strb	r3, [r0, #17]
 80117c4:	4770      	bx	lr

080117c6 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80117c6:	f1a0 0008 	sub.w	r0, r0, #8
 80117ca:	e7f5      	b.n	80117b8 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

080117cc <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80117cc:	b508      	push	{r3, lr}
 80117ce:	4b05      	ldr	r3, [pc, #20]	@ (80117e4 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80117d0:	6818      	ldr	r0, [r3, #0]
 80117d2:	6803      	ldr	r3, [r0, #0]
 80117d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80117d8:	4798      	blx	r3
 80117da:	1e43      	subs	r3, r0, #1
 80117dc:	4258      	negs	r0, r3
 80117de:	4158      	adcs	r0, r3
 80117e0:	bd08      	pop	{r3, pc}
 80117e2:	bf00      	nop
 80117e4:	24025934 	.word	0x24025934

080117e8 <_ZN8touchgfx13PainterRGB888D1Ev>:
 80117e8:	4770      	bx	lr

080117ea <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80117ea:	3808      	subs	r0, #8
 80117ec:	4770      	bx	lr

080117ee <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80117ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80117f2:	b410      	push	{r4}
 80117f4:	188c      	adds	r4, r1, r2
 80117f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80117fa:	68c2      	ldr	r2, [r0, #12]
 80117fc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8011800:	4620      	mov	r0, r4
 8011802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011806:	f7f1 bd79 	b.w	80032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801180a <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801180a:	f7f1 bd53 	b.w	80032b4 <_ZN8touchgfx5paint8tearDownEv>

0801180e <_ZN8touchgfx13PainterRGB888D0Ev>:
 801180e:	b510      	push	{r4, lr}
 8011810:	4604      	mov	r4, r0
 8011812:	2114      	movs	r1, #20
 8011814:	f012 fd16 	bl	8024244 <_ZdlPvj>
 8011818:	4620      	mov	r0, r4
 801181a:	bd10      	pop	{r4, pc}

0801181c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 801181c:	f1a0 0008 	sub.w	r0, r0, #8
 8011820:	e7f5      	b.n	801180e <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08011824 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8011824:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801182c:	4411      	add	r1, r2
 801182e:	7c42      	ldrb	r2, [r0, #17]
 8011830:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8011834:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8011838:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801183c:	2a00      	cmp	r2, #0
 801183e:	f000 8084 	beq.w	801194a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8011842:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011846:	ed90 7a08 	vldr	s14, [r0, #32]
 801184a:	42a2      	cmp	r2, r4
 801184c:	68c3      	ldr	r3, [r0, #12]
 801184e:	db20      	blt.n	8011892 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8011850:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011854:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185c:	bfc8      	it	gt
 801185e:	2200      	movgt	r2, #0
 8011860:	589a      	ldr	r2, [r3, r2]
 8011862:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011866:	7c03      	ldrb	r3, [r0, #16]
 8011868:	fa5f fc82 	uxtb.w	ip, r2
 801186c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8011870:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8011874:	440e      	add	r6, r1
 8011876:	b36b      	cbz	r3, 80118d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8011878:	2dff      	cmp	r5, #255	@ 0xff
 801187a:	d12b      	bne.n	80118d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801187c:	42b1      	cmp	r1, r6
 801187e:	f080 8204 	bcs.w	8011c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011882:	f881 c000 	strb.w	ip, [r1]
 8011886:	3103      	adds	r1, #3
 8011888:	f801 7c02 	strb.w	r7, [r1, #-2]
 801188c:	f801 4c01 	strb.w	r4, [r1, #-1]
 8011890:	e7f4      	b.n	801187c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8011892:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 8011896:	42a7      	cmp	r7, r4
 8011898:	dc08      	bgt.n	80118ac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 801189a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801189e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80118a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a6:	bfd8      	it	le
 80118a8:	2200      	movle	r2, #0
 80118aa:	e7d9      	b.n	8011860 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80118ac:	1aa2      	subs	r2, r4, r2
 80118ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80118b2:	ee07 2a90 	vmov	s15, r2
 80118b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118c6:	ee17 2a90 	vmov	r2, s15
 80118ca:	bfd8      	it	le
 80118cc:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80118d0:	0092      	lsls	r2, r2, #2
 80118d2:	e7c5      	b.n	8011860 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80118d4:	0e12      	lsrs	r2, r2, #24
 80118d6:	4355      	muls	r5, r2
 80118d8:	1c6a      	adds	r2, r5, #1
 80118da:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80118de:	122d      	asrs	r5, r5, #8
 80118e0:	43e8      	mvns	r0, r5
 80118e2:	b2ad      	uxth	r5, r5
 80118e4:	fb1c fc05 	smulbb	ip, ip, r5
 80118e8:	b2c0      	uxtb	r0, r0
 80118ea:	fb17 f705 	smulbb	r7, r7, r5
 80118ee:	fb14 f505 	smulbb	r5, r4, r5
 80118f2:	fa1f fc8c 	uxth.w	ip, ip
 80118f6:	b2bf      	uxth	r7, r7
 80118f8:	b2ad      	uxth	r5, r5
 80118fa:	428e      	cmp	r6, r1
 80118fc:	f101 0303 	add.w	r3, r1, #3
 8011900:	f240 81c3 	bls.w	8011c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011904:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8011908:	fb02 c200 	mla	r2, r2, r0, ip
 801190c:	b292      	uxth	r2, r2
 801190e:	1c51      	adds	r1, r2, #1
 8011910:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011914:	1212      	asrs	r2, r2, #8
 8011916:	f803 2c03 	strb.w	r2, [r3, #-3]
 801191a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801191e:	fb02 7200 	mla	r2, r2, r0, r7
 8011922:	b292      	uxth	r2, r2
 8011924:	1c51      	adds	r1, r2, #1
 8011926:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801192a:	1212      	asrs	r2, r2, #8
 801192c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8011930:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8011934:	fb02 5200 	mla	r2, r2, r0, r5
 8011938:	b292      	uxth	r2, r2
 801193a:	1c51      	adds	r1, r2, #1
 801193c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011940:	4619      	mov	r1, r3
 8011942:	1212      	asrs	r2, r2, #8
 8011944:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011948:	e7d7      	b.n	80118fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801194a:	7c82      	ldrb	r2, [r0, #18]
 801194c:	2a00      	cmp	r2, #0
 801194e:	d047      	beq.n	80119e0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8011950:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011954:	ee07 2a10 	vmov	s14, r2
 8011958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801195c:	ee07 3a90 	vmov	s15, r3
 8011960:	461a      	mov	r2, r3
 8011962:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011966:	eef4 6ac7 	vcmpe.f32	s13, s14
 801196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196e:	f200 808e 	bhi.w	8011a8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8011972:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011976:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801197a:	68c7      	ldr	r7, [r0, #12]
 801197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011980:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011984:	ee06 6a90 	vmov	s13, r6
 8011988:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801198c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011994:	bf4a      	itet	mi
 8011996:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801199a:	4634      	movpl	r4, r6
 801199c:	ee17 4a90 	vmovmi	r4, s15
 80119a0:	edd0 7a08 	vldr	s15, [r0, #32]
 80119a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80119a8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80119ac:	448e      	add	lr, r1
 80119ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b2:	bfc8      	it	gt
 80119b4:	2200      	movgt	r2, #0
 80119b6:	58bf      	ldr	r7, [r7, r2]
 80119b8:	7c02      	ldrb	r2, [r0, #16]
 80119ba:	fa5f f987 	uxtb.w	r9, r7
 80119be:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80119c2:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80119c6:	b31a      	cbz	r2, 8011a10 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80119c8:	2dff      	cmp	r5, #255	@ 0xff
 80119ca:	d121      	bne.n	8011a10 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80119cc:	4571      	cmp	r1, lr
 80119ce:	d25d      	bcs.n	8011a8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80119d0:	f881 9000 	strb.w	r9, [r1]
 80119d4:	3103      	adds	r1, #3
 80119d6:	f801 8c02 	strb.w	r8, [r1, #-2]
 80119da:	f801 cc01 	strb.w	ip, [r1, #-1]
 80119de:	e7f5      	b.n	80119cc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 80119e0:	ee07 4a90 	vmov	s15, r4
 80119e4:	ed90 7a06 	vldr	s14, [r0, #24]
 80119e8:	edd0 6a05 	vldr	s13, [r0, #20]
 80119ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80119f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80119f8:	edd0 7a08 	vldr	s15, [r0, #32]
 80119fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a04:	bf44      	itt	mi
 8011a06:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8011a0a:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8011a0e:	e7a5      	b.n	801195c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8011a10:	0e3f      	lsrs	r7, r7, #24
 8011a12:	436f      	muls	r7, r5
 8011a14:	1c7a      	adds	r2, r7, #1
 8011a16:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8011a1a:	1212      	asrs	r2, r2, #8
 8011a1c:	ea6f 0a02 	mvn.w	sl, r2
 8011a20:	b292      	uxth	r2, r2
 8011a22:	fb19 f902 	smulbb	r9, r9, r2
 8011a26:	fa5f fa8a 	uxtb.w	sl, sl
 8011a2a:	fb18 f802 	smulbb	r8, r8, r2
 8011a2e:	fb1c fc02 	smulbb	ip, ip, r2
 8011a32:	fa1f f989 	uxth.w	r9, r9
 8011a36:	fa1f f888 	uxth.w	r8, r8
 8011a3a:	fa1f fc8c 	uxth.w	ip, ip
 8011a3e:	458e      	cmp	lr, r1
 8011a40:	f101 0203 	add.w	r2, r1, #3
 8011a44:	d922      	bls.n	8011a8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8011a46:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011a4a:	fb01 910a 	mla	r1, r1, sl, r9
 8011a4e:	b289      	uxth	r1, r1
 8011a50:	1c4f      	adds	r7, r1, #1
 8011a52:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011a56:	1209      	asrs	r1, r1, #8
 8011a58:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011a5c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011a60:	fb01 810a 	mla	r1, r1, sl, r8
 8011a64:	b289      	uxth	r1, r1
 8011a66:	1c4f      	adds	r7, r1, #1
 8011a68:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011a6c:	1209      	asrs	r1, r1, #8
 8011a6e:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011a72:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011a76:	fb01 c10a 	mla	r1, r1, sl, ip
 8011a7a:	b289      	uxth	r1, r1
 8011a7c:	1c4f      	adds	r7, r1, #1
 8011a7e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011a82:	1209      	asrs	r1, r1, #8
 8011a84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011a88:	4611      	mov	r1, r2
 8011a8a:	e7d8      	b.n	8011a3e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8011a8c:	191a      	adds	r2, r3, r4
 8011a8e:	4433      	add	r3, r6
 8011a90:	b21b      	sxth	r3, r3
 8011a92:	4293      	cmp	r3, r2
 8011a94:	f340 80f9 	ble.w	8011c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011a98:	edd0 7a07 	vldr	s15, [r0, #28]
 8011a9c:	ee06 2a90 	vmov	s13, r2
 8011aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011aa4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011aa8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab0:	f340 80b0 	ble.w	8011c14 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8011ab4:	ee06 3a10 	vmov	s12, r3
 8011ab8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011abc:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8011c90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8011ac0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011ac4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011ac8:	ed90 6a08 	vldr	s12, [r0, #32]
 8011acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011ad4:	bfd6      	itet	le
 8011ad6:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8011ada:	469c      	movgt	ip, r3
 8011adc:	ee17 ca90 	vmovle	ip, s15
 8011ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae4:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8011c94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8011ae8:	ebac 0202 	sub.w	r2, ip, r2
 8011aec:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8011af0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011af4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011af8:	188c      	adds	r4, r1, r2
 8011afa:	7c02      	ldrb	r2, [r0, #16]
 8011afc:	b1d2      	cbz	r2, 8011b34 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8011afe:	2dff      	cmp	r5, #255	@ 0xff
 8011b00:	d118      	bne.n	8011b34 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8011b02:	42a1      	cmp	r1, r4
 8011b04:	d261      	bcs.n	8011bca <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011b06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b0a:	68c6      	ldr	r6, [r0, #12]
 8011b0c:	3103      	adds	r1, #3
 8011b0e:	ee17 7a10 	vmov	r7, s14
 8011b12:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011b16:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8011b1a:	f801 6c03 	strb.w	r6, [r1, #-3]
 8011b1e:	7856      	ldrb	r6, [r2, #1]
 8011b20:	f801 6c02 	strb.w	r6, [r1, #-2]
 8011b24:	7892      	ldrb	r2, [r2, #2]
 8011b26:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011b2a:	ed90 7a08 	vldr	s14, [r0, #32]
 8011b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b32:	e7e6      	b.n	8011b02 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8011b34:	68c2      	ldr	r2, [r0, #12]
 8011b36:	428c      	cmp	r4, r1
 8011b38:	f101 0e03 	add.w	lr, r1, #3
 8011b3c:	d945      	bls.n	8011bca <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011b3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011b42:	ee17 9a10 	vmov	r9, s14
 8011b46:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8011b4a:	f898 7003 	ldrb.w	r7, [r8, #3]
 8011b4e:	fb07 f605 	mul.w	r6, r7, r5
 8011b52:	1c77      	adds	r7, r6, #1
 8011b54:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8011b58:	123f      	asrs	r7, r7, #8
 8011b5a:	b2b9      	uxth	r1, r7
 8011b5c:	43ff      	mvns	r7, r7
 8011b5e:	b2fe      	uxtb	r6, r7
 8011b60:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8011b64:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8011b68:	fb19 f906 	smulbb	r9, r9, r6
 8011b6c:	fb07 9701 	mla	r7, r7, r1, r9
 8011b70:	b2bf      	uxth	r7, r7
 8011b72:	f107 0901 	add.w	r9, r7, #1
 8011b76:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011b7a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8011b7e:	fb19 f906 	smulbb	r9, r9, r6
 8011b82:	123f      	asrs	r7, r7, #8
 8011b84:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8011b88:	f898 7001 	ldrb.w	r7, [r8, #1]
 8011b8c:	fb07 9701 	mla	r7, r7, r1, r9
 8011b90:	b2bf      	uxth	r7, r7
 8011b92:	f107 0901 	add.w	r9, r7, #1
 8011b96:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011b9a:	123f      	asrs	r7, r7, #8
 8011b9c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8011ba0:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8011ba4:	f898 8002 	ldrb.w	r8, [r8, #2]
 8011ba8:	fb17 f606 	smulbb	r6, r7, r6
 8011bac:	fb08 6601 	mla	r6, r8, r1, r6
 8011bb0:	b2b6      	uxth	r6, r6
 8011bb2:	1c71      	adds	r1, r6, #1
 8011bb4:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8011bb8:	4671      	mov	r1, lr
 8011bba:	1236      	asrs	r6, r6, #8
 8011bbc:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8011bc0:	ed90 7a08 	vldr	s14, [r0, #32]
 8011bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bc8:	e7b5      	b.n	8011b36 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 8011bca:	4563      	cmp	r3, ip
 8011bcc:	dd5d      	ble.n	8011c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011bce:	edd0 7a08 	vldr	s15, [r0, #32]
 8011bd2:	eba3 030c 	sub.w	r3, r3, ip
 8011bd6:	68c4      	ldr	r4, [r0, #12]
 8011bd8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011bdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011be0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011be4:	7c00      	ldrb	r0, [r0, #16]
 8011be6:	440b      	add	r3, r1
 8011be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bec:	bfd8      	it	le
 8011bee:	2200      	movle	r2, #0
 8011bf0:	58a2      	ldr	r2, [r4, r2]
 8011bf2:	b2d4      	uxtb	r4, r2
 8011bf4:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8011bf8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8011bfc:	b160      	cbz	r0, 8011c18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8011bfe:	2dff      	cmp	r5, #255	@ 0xff
 8011c00:	d10a      	bne.n	8011c18 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8011c02:	4299      	cmp	r1, r3
 8011c04:	d241      	bcs.n	8011c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011c06:	700c      	strb	r4, [r1, #0]
 8011c08:	3103      	adds	r1, #3
 8011c0a:	f801 cc02 	strb.w	ip, [r1, #-2]
 8011c0e:	f801 7c01 	strb.w	r7, [r1, #-1]
 8011c12:	e7f6      	b.n	8011c02 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8011c14:	4694      	mov	ip, r2
 8011c16:	e7da      	b.n	8011bce <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8011c18:	0e12      	lsrs	r2, r2, #24
 8011c1a:	436a      	muls	r2, r5
 8011c1c:	1c55      	adds	r5, r2, #1
 8011c1e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8011c22:	122d      	asrs	r5, r5, #8
 8011c24:	43ee      	mvns	r6, r5
 8011c26:	b2ad      	uxth	r5, r5
 8011c28:	fb14 f405 	smulbb	r4, r4, r5
 8011c2c:	b2f6      	uxtb	r6, r6
 8011c2e:	fb1c f005 	smulbb	r0, ip, r5
 8011c32:	fb17 f505 	smulbb	r5, r7, r5
 8011c36:	b2a4      	uxth	r4, r4
 8011c38:	b280      	uxth	r0, r0
 8011c3a:	b2ad      	uxth	r5, r5
 8011c3c:	428b      	cmp	r3, r1
 8011c3e:	f101 0203 	add.w	r2, r1, #3
 8011c42:	d922      	bls.n	8011c8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011c44:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011c48:	fb01 4106 	mla	r1, r1, r6, r4
 8011c4c:	b289      	uxth	r1, r1
 8011c4e:	1c4f      	adds	r7, r1, #1
 8011c50:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011c54:	1209      	asrs	r1, r1, #8
 8011c56:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011c5a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011c5e:	fb01 0106 	mla	r1, r1, r6, r0
 8011c62:	b289      	uxth	r1, r1
 8011c64:	1c4f      	adds	r7, r1, #1
 8011c66:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011c6a:	1209      	asrs	r1, r1, #8
 8011c6c:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011c70:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011c74:	fb01 5106 	mla	r1, r1, r6, r5
 8011c78:	b289      	uxth	r1, r1
 8011c7a:	1c4f      	adds	r7, r1, #1
 8011c7c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011c80:	1209      	asrs	r1, r1, #8
 8011c82:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011c86:	4611      	mov	r1, r2
 8011c88:	e7d8      	b.n	8011c3c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 8011c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c8e:	bf00      	nop
 8011c90:	447ffffe 	.word	0x447ffffe
 8011c94:	00000000 	.word	0x00000000

08011c98 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8011c98:	4770      	bx	lr

08011c9a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 8011c9a:	4770      	bx	lr

08011c9c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8011c9c:	b510      	push	{r4, lr}
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	2124      	movs	r1, #36	@ 0x24
 8011ca2:	f012 facf 	bl	8024244 <_ZdlPvj>
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	bd10      	pop	{r4, pc}
	...

08011cac <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011cae:	6803      	ldr	r3, [r0, #0]
 8011cb0:	460d      	mov	r5, r1
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	4601      	mov	r1, r0
 8011cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011cb8:	a802      	add	r0, sp, #8
 8011cba:	4798      	blx	r3
 8011cbc:	6828      	ldr	r0, [r5, #0]
 8011cbe:	6869      	ldr	r1, [r5, #4]
 8011cc0:	466b      	mov	r3, sp
 8011cc2:	c303      	stmia	r3!, {r0, r1}
 8011cc4:	4668      	mov	r0, sp
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	f7fd fc06 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8011ccc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011cce:	b188      	cbz	r0, 8011cf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011cd0:	6803      	ldr	r3, [r0, #0]
 8011cd2:	1d21      	adds	r1, r4, #4
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	4798      	blx	r3
 8011cd8:	b160      	cbz	r0, 8011cf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011cda:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	dd08      	ble.n	8011cf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011ce2:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011ce6:	2d00      	cmp	r5, #0
 8011ce8:	dd04      	ble.n	8011cf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011cea:	4a2b      	ldr	r2, [pc, #172]	@ (8011d98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8011cec:	7812      	ldrb	r2, [r2, #0]
 8011cee:	b11a      	cbz	r2, 8011cf8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8011cf0:	2a01      	cmp	r2, #1
 8011cf2:	d029      	beq.n	8011d48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8011cf4:	b004      	add	sp, #16
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
 8011cf8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011cfc:	441d      	add	r5, r3
 8011cfe:	b2ad      	uxth	r5, r5
 8011d00:	b22e      	sxth	r6, r5
 8011d02:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8011d06:	42b3      	cmp	r3, r6
 8011d08:	daf4      	bge.n	8011cf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	4669      	mov	r1, sp
 8011d0e:	4620      	mov	r0, r4
 8011d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d12:	4798      	blx	r3
 8011d14:	b940      	cbnz	r0, 8011d28 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011d16:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d004      	beq.n	8011d28 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011d1e:	3301      	adds	r3, #1
 8011d20:	105b      	asrs	r3, r3, #1
 8011d22:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011d26:	e7f0      	b.n	8011d0a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011d28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011d2c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011d30:	4413      	add	r3, r2
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	441a      	add	r2, r3
 8011d36:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011d3a:	b212      	sxth	r2, r2
 8011d3c:	4296      	cmp	r6, r2
 8011d3e:	dae0      	bge.n	8011d02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011d40:	1aeb      	subs	r3, r5, r3
 8011d42:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011d46:	e7dc      	b.n	8011d02 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011d48:	f8bd 5000 	ldrh.w	r5, [sp]
 8011d4c:	441d      	add	r5, r3
 8011d4e:	b2ad      	uxth	r5, r5
 8011d50:	b22e      	sxth	r6, r5
 8011d52:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011d56:	42b3      	cmp	r3, r6
 8011d58:	dacc      	bge.n	8011cf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011d5a:	6823      	ldr	r3, [r4, #0]
 8011d5c:	4669      	mov	r1, sp
 8011d5e:	4620      	mov	r0, r4
 8011d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d62:	4798      	blx	r3
 8011d64:	b940      	cbnz	r0, 8011d78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011d66:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d004      	beq.n	8011d78 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011d6e:	3301      	adds	r3, #1
 8011d70:	105b      	asrs	r3, r3, #1
 8011d72:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011d76:	e7f0      	b.n	8011d5a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011d78:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011d7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011d80:	4413      	add	r3, r2
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	441a      	add	r2, r3
 8011d86:	f8ad 3000 	strh.w	r3, [sp]
 8011d8a:	b212      	sxth	r2, r2
 8011d8c:	4296      	cmp	r6, r2
 8011d8e:	dae0      	bge.n	8011d52 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011d90:	1aeb      	subs	r3, r5, r3
 8011d92:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011d96:	e7dc      	b.n	8011d52 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011d98:	2402592c 	.word	0x2402592c

08011d9c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8011d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d9e:	6803      	ldr	r3, [r0, #0]
 8011da0:	4604      	mov	r4, r0
 8011da2:	4601      	mov	r1, r0
 8011da4:	4668      	mov	r0, sp
 8011da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011da8:	4798      	blx	r3
 8011daa:	2100      	movs	r1, #0
 8011dac:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011db0:	4668      	mov	r0, sp
 8011db2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011db6:	9102      	str	r1, [sp, #8]
 8011db8:	a902      	add	r1, sp, #8
 8011dba:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011dbe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011dc2:	f7fd fb89 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	4669      	mov	r1, sp
 8011dca:	4620      	mov	r0, r4
 8011dcc:	691b      	ldr	r3, [r3, #16]
 8011dce:	4798      	blx	r3
 8011dd0:	b004      	add	sp, #16
 8011dd2:	bd10      	pop	{r4, pc}

08011dd4 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8011ddc:	490a      	ldr	r1, [pc, #40]	@ (8011e08 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8011dde:	8082      	strh	r2, [r0, #4]
 8011de0:	6001      	str	r1, [r0, #0]
 8011de2:	21ff      	movs	r1, #255	@ 0xff
 8011de4:	80c2      	strh	r2, [r0, #6]
 8011de6:	8102      	strh	r2, [r0, #8]
 8011de8:	8142      	strh	r2, [r0, #10]
 8011dea:	8182      	strh	r2, [r0, #12]
 8011dec:	81c2      	strh	r2, [r0, #14]
 8011dee:	8202      	strh	r2, [r0, #16]
 8011df0:	8242      	strh	r2, [r0, #18]
 8011df2:	61c2      	str	r2, [r0, #28]
 8011df4:	8402      	strh	r2, [r0, #32]
 8011df6:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011df8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8011dfc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8011e00:	6282      	str	r2, [r0, #40]	@ 0x28
 8011e02:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011e06:	4770      	bx	lr
 8011e08:	08028d9c 	.word	0x08028d9c

08011e0c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	4770      	bx	lr

08011e10 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8011e10:	4b07      	ldr	r3, [pc, #28]	@ (8011e30 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8011e12:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	4293      	cmp	r3, r2
 8011e18:	bf81      	itttt	hi
 8011e1a:	4b06      	ldrhi	r3, [pc, #24]	@ (8011e34 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8011e1c:	681b      	ldrhi	r3, [r3, #0]
 8011e1e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8011e22:	7858      	ldrbhi	r0, [r3, #1]
 8011e24:	bf8c      	ite	hi
 8011e26:	f000 0003 	andhi.w	r0, r0, #3
 8011e2a:	2000      	movls	r0, #0
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	24025990 	.word	0x24025990
 8011e34:	2402598c 	.word	0x2402598c

08011e38 <_ZN8touchgfx8TextAreaD1Ev>:
 8011e38:	4770      	bx	lr
	...

08011e3c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8011e3c:	4b11      	ldr	r3, [pc, #68]	@ (8011e84 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8011e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e42:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011e44:	4604      	mov	r4, r0
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	428b      	cmp	r3, r1
 8011e4a:	d918      	bls.n	8011e7e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8011e4c:	6803      	ldr	r3, [r0, #0]
 8011e4e:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8011e50:	4b0d      	ldr	r3, [pc, #52]	@ (8011e88 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8011e52:	6818      	ldr	r0, [r3, #0]
 8011e54:	f7f3 f800 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 8011e58:	6823      	ldr	r3, [r4, #0]
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e60:	4798      	blx	r3
 8011e62:	6823      	ldr	r3, [r4, #0]
 8011e64:	4607      	mov	r7, r0
 8011e66:	4620      	mov	r0, r4
 8011e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e6c:	4798      	blx	r3
 8011e6e:	463a      	mov	r2, r7
 8011e70:	4603      	mov	r3, r0
 8011e72:	4631      	mov	r1, r6
 8011e74:	4620      	mov	r0, r4
 8011e76:	46ac      	mov	ip, r5
 8011e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7c:	4760      	bx	ip
 8011e7e:	2000      	movs	r0, #0
 8011e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e84:	24025990 	.word	0x24025990
 8011e88:	24025998 	.word	0x24025998

08011e8c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8011e8c:	4b18      	ldr	r3, [pc, #96]	@ (8011ef0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8011e8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e92:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011e94:	4604      	mov	r4, r0
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	428b      	cmp	r3, r1
 8011e9a:	d926      	bls.n	8011eea <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8011e9c:	4b15      	ldr	r3, [pc, #84]	@ (8011ef4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8011ea4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8011ea8:	4b13      	ldr	r3, [pc, #76]	@ (8011ef8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8011eaa:	7855      	ldrb	r5, [r2, #1]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8011eb2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8011eb6:	6833      	ldr	r3, [r6, #0]
 8011eb8:	69df      	ldr	r7, [r3, #28]
 8011eba:	4b10      	ldr	r3, [pc, #64]	@ (8011efc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8011ebc:	6818      	ldr	r0, [r3, #0]
 8011ebe:	f7f2 ffcb 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	4680      	mov	r8, r0
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eca:	4798      	blx	r3
 8011ecc:	6823      	ldr	r3, [r4, #0]
 8011ece:	4681      	mov	r9, r0
 8011ed0:	4620      	mov	r0, r4
 8011ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011ed6:	4798      	blx	r3
 8011ed8:	464b      	mov	r3, r9
 8011eda:	9000      	str	r0, [sp, #0]
 8011edc:	4642      	mov	r2, r8
 8011ede:	4629      	mov	r1, r5
 8011ee0:	4630      	mov	r0, r6
 8011ee2:	47b8      	blx	r7
 8011ee4:	b003      	add	sp, #12
 8011ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eea:	2000      	movs	r0, #0
 8011eec:	e7fa      	b.n	8011ee4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8011eee:	bf00      	nop
 8011ef0:	24025990 	.word	0x24025990
 8011ef4:	2402598c 	.word	0x2402598c
 8011ef8:	24025994 	.word	0x24025994
 8011efc:	24025998 	.word	0x24025998

08011f00 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8011f00:	b40e      	push	{r1, r2, r3}
 8011f02:	4b30      	ldr	r3, [pc, #192]	@ (8011fc4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8011f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f08:	881a      	ldrh	r2, [r3, #0]
 8011f0a:	b09d      	sub	sp, #116	@ 0x74
 8011f0c:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8011f0e:	4604      	mov	r4, r0
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d954      	bls.n	8011fbe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8011f14:	aa26      	add	r2, sp, #152	@ 0x98
 8011f16:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8011fc8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8011f1a:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8011fcc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8011f1e:	9202      	str	r2, [sp, #8]
 8011f20:	f8d9 2000 	ldr.w	r2, [r9]
 8011f24:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011f28:	f8d8 3000 	ldr.w	r3, [r8]
 8011f2c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8011f30:	682b      	ldr	r3, [r5, #0]
 8011f32:	4628      	mov	r0, r5
 8011f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f36:	4798      	blx	r3
 8011f38:	4606      	mov	r6, r0
 8011f3a:	b207      	sxth	r7, r0
 8011f3c:	a803      	add	r0, sp, #12
 8011f3e:	f005 ff0d 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8011f42:	682b      	ldr	r3, [r5, #0]
 8011f44:	4628      	mov	r0, r5
 8011f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f48:	4798      	blx	r3
 8011f4a:	682b      	ldr	r3, [r5, #0]
 8011f4c:	4682      	mov	sl, r0
 8011f4e:	4628      	mov	r0, r5
 8011f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f52:	4798      	blx	r3
 8011f54:	4653      	mov	r3, sl
 8011f56:	9000      	str	r0, [sp, #0]
 8011f58:	a803      	add	r0, sp, #12
 8011f5a:	9a02      	ldr	r2, [sp, #8]
 8011f5c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8011f5e:	f005 ff58 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011f62:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011f64:	f8d9 3000 	ldr.w	r3, [r9]
 8011f68:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8011f6c:	8925      	ldrh	r5, [r4, #8]
 8011f6e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8011f72:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8011f76:	eba5 050c 	sub.w	r5, r5, ip
 8011f7a:	784a      	ldrb	r2, [r1, #1]
 8011f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8011f80:	b22d      	sxth	r5, r5
 8011f82:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8011f86:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8011f8a:	9500      	str	r5, [sp, #0]
 8011f8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011f90:	a803      	add	r0, sp, #12
 8011f92:	f003 f8c1 	bl	8015118 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8011f96:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8011f9a:	b203      	sxth	r3, r0
 8011f9c:	18b9      	adds	r1, r7, r2
 8011f9e:	2900      	cmp	r1, #0
 8011fa0:	dd0b      	ble.n	8011fba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	fb13 f302 	smulbb	r3, r3, r2
 8011fa8:	fb16 3300 	smlabb	r3, r6, r0, r3
 8011fac:	b21f      	sxth	r7, r3
 8011fae:	4638      	mov	r0, r7
 8011fb0:	b01d      	add	sp, #116	@ 0x74
 8011fb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb6:	b003      	add	sp, #12
 8011fb8:	4770      	bx	lr
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	dcf7      	bgt.n	8011fae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8011fbe:	2700      	movs	r7, #0
 8011fc0:	e7f5      	b.n	8011fae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8011fc2:	bf00      	nop
 8011fc4:	24025990 	.word	0x24025990
 8011fc8:	2402598c 	.word	0x2402598c
 8011fcc:	24025994 	.word	0x24025994

08011fd0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8011fd0:	4bbd      	ldr	r3, [pc, #756]	@ (80122c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8011fd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd6:	460c      	mov	r4, r1
 8011fd8:	881b      	ldrh	r3, [r3, #0]
 8011fda:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8011fdc:	b0a9      	sub	sp, #164	@ 0xa4
 8011fde:	4680      	mov	r8, r0
 8011fe0:	428b      	cmp	r3, r1
 8011fe2:	d809      	bhi.n	8011ff8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8011fea:	6083      	str	r3, [r0, #8]
 8011fec:	e9c0 3200 	strd	r3, r2, [r0]
 8011ff0:	4640      	mov	r0, r8
 8011ff2:	b029      	add	sp, #164	@ 0xa4
 8011ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff8:	4eb4      	ldr	r6, [pc, #720]	@ (80122cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8011ffa:	6833      	ldr	r3, [r6, #0]
 8011ffc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8012000:	4bb3      	ldr	r3, [pc, #716]	@ (80122d0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012008:	4bb2      	ldr	r3, [pc, #712]	@ (80122d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801200a:	6818      	ldr	r0, [r3, #0]
 801200c:	f7f2 ff24 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 8012010:	682b      	ldr	r3, [r5, #0]
 8012012:	4681      	mov	r9, r0
 8012014:	4628      	mov	r0, r5
 8012016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012018:	4798      	blx	r3
 801201a:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 801201c:	b203      	sxth	r3, r0
 801201e:	4682      	mov	sl, r0
 8012020:	4407      	add	r7, r0
 8012022:	a80f      	add	r0, sp, #60	@ 0x3c
 8012024:	9304      	str	r3, [sp, #16]
 8012026:	b2bb      	uxth	r3, r7
 8012028:	9303      	str	r3, [sp, #12]
 801202a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801202e:	2b00      	cmp	r3, #0
 8012030:	f040 80a5 	bne.w	801217e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8012034:	f005 fe92 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	4628      	mov	r0, r5
 801203c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801203e:	4798      	blx	r3
 8012040:	682b      	ldr	r3, [r5, #0]
 8012042:	4606      	mov	r6, r0
 8012044:	4628      	mov	r0, r5
 8012046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012048:	4798      	blx	r3
 801204a:	6823      	ldr	r3, [r4, #0]
 801204c:	4607      	mov	r7, r0
 801204e:	4620      	mov	r0, r4
 8012050:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012052:	4798      	blx	r3
 8012054:	6823      	ldr	r3, [r4, #0]
 8012056:	4683      	mov	fp, r0
 8012058:	4620      	mov	r0, r4
 801205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801205e:	4798      	blx	r3
 8012060:	463b      	mov	r3, r7
 8012062:	4649      	mov	r1, r9
 8012064:	4632      	mov	r2, r6
 8012066:	2600      	movs	r6, #0
 8012068:	e9cd b000 	strd	fp, r0, [sp]
 801206c:	a80f      	add	r0, sp, #60	@ 0x3c
 801206e:	4637      	mov	r7, r6
 8012070:	f005 fee4 	bl	8017e3c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012074:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012078:	f8df b250 	ldr.w	fp, [pc, #592]	@ 80122cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801207c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8012080:	bf0c      	ite	eq
 8012082:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8012086:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 801208a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801208c:	4629      	mov	r1, r5
 801208e:	f8db 3000 	ldr.w	r3, [fp]
 8012092:	a80f      	add	r0, sp, #60	@ 0x3c
 8012094:	3701      	adds	r7, #1
 8012096:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801209a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801209e:	b2bf      	uxth	r7, r7
 80120a0:	785b      	ldrb	r3, [r3, #1]
 80120a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80120a6:	f002 fd3e 	bl	8014b26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80120aa:	9b03      	ldr	r3, [sp, #12]
 80120ac:	4286      	cmp	r6, r0
 80120ae:	eba9 0903 	sub.w	r9, r9, r3
 80120b2:	bfb8      	it	lt
 80120b4:	4606      	movlt	r6, r0
 80120b6:	a80f      	add	r0, sp, #60	@ 0x3c
 80120b8:	fa0f f989 	sxth.w	r9, r9
 80120bc:	b236      	sxth	r6, r6
 80120be:	f005 fe74 	bl	8017daa <_ZN8touchgfx12TextProvider11endOfStringEv>
 80120c2:	b918      	cbnz	r0, 80120cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80120c4:	7a2b      	ldrb	r3, [r5, #8]
 80120c6:	444b      	add	r3, r9
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	dcde      	bgt.n	801208a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 80120cc:	9b03      	ldr	r3, [sp, #12]
 80120ce:	4620      	mov	r0, r4
 80120d0:	9a04      	ldr	r2, [sp, #16]
 80120d2:	fb13 f707 	smulbb	r7, r3, r7
 80120d6:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80120d8:	f895 9009 	ldrb.w	r9, [r5, #9]
 80120dc:	1aff      	subs	r7, r7, r3
 80120de:	b2bf      	uxth	r7, r7
 80120e0:	b23b      	sxth	r3, r7
 80120e2:	429a      	cmp	r2, r3
 80120e4:	bfa8      	it	ge
 80120e6:	4657      	movge	r7, sl
 80120e8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80120ec:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80120f0:	6823      	ldr	r3, [r4, #0]
 80120f2:	444f      	add	r7, r9
 80120f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120f6:	bf08      	it	eq
 80120f8:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 80120fc:	fa1f f987 	uxth.w	r9, r7
 8012100:	bf18      	it	ne
 8012102:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8012106:	4798      	blx	r3
 8012108:	2801      	cmp	r0, #1
 801210a:	fa0f f789 	sxth.w	r7, r9
 801210e:	b2b3      	uxth	r3, r6
 8012110:	f000 80e2 	beq.w	80122d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8012114:	2802      	cmp	r0, #2
 8012116:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 801211a:	f000 80e3 	beq.w	80122e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801211e:	7aea      	ldrb	r2, [r5, #11]
 8012120:	b236      	sxth	r6, r6
 8012122:	7b2d      	ldrb	r5, [r5, #12]
 8012124:	1ab6      	subs	r6, r6, r2
 8012126:	442a      	add	r2, r5
 8012128:	fa1f fa86 	uxth.w	sl, r6
 801212c:	4413      	add	r3, r2
 801212e:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8012132:	fa0f fb8a 	sxth.w	fp, sl
 8012136:	b29b      	uxth	r3, r3
 8012138:	2a02      	cmp	r2, #2
 801213a:	b21e      	sxth	r6, r3
 801213c:	f000 80d6 	beq.w	80122ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8012140:	2a03      	cmp	r2, #3
 8012142:	f000 80de 	beq.w	8012302 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8012146:	2a01      	cmp	r2, #1
 8012148:	f040 80e6 	bne.w	8012318 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 801214c:	8925      	ldrh	r5, [r4, #8]
 801214e:	4633      	mov	r3, r6
 8012150:	463e      	mov	r6, r7
 8012152:	eba5 0909 	sub.w	r9, r5, r9
 8012156:	461f      	mov	r7, r3
 8012158:	465d      	mov	r5, fp
 801215a:	fa0f fb89 	sxth.w	fp, r9
 801215e:	4b5d      	ldr	r3, [pc, #372]	@ (80122d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8012160:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8012162:	6818      	ldr	r0, [r3, #0]
 8012164:	f7f2 fe78 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 8012168:	f8a8 b000 	strh.w	fp, [r8]
 801216c:	f8a8 5002 	strh.w	r5, [r8, #2]
 8012170:	f8a8 6004 	strh.w	r6, [r8, #4]
 8012174:	f8a8 7006 	strh.w	r7, [r8, #6]
 8012178:	f8c8 0008 	str.w	r0, [r8, #8]
 801217c:	e738      	b.n	8011ff0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801217e:	f005 fded 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8012182:	682b      	ldr	r3, [r5, #0]
 8012184:	4628      	mov	r0, r5
 8012186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012188:	4798      	blx	r3
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	4607      	mov	r7, r0
 801218e:	4628      	mov	r0, r5
 8012190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012192:	4798      	blx	r3
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	4683      	mov	fp, r0
 8012198:	4620      	mov	r0, r4
 801219a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801219c:	4798      	blx	r3
 801219e:	6822      	ldr	r2, [r4, #0]
 80121a0:	9005      	str	r0, [sp, #20]
 80121a2:	4620      	mov	r0, r4
 80121a4:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80121a8:	4790      	blx	r2
 80121aa:	9b05      	ldr	r3, [sp, #20]
 80121ac:	463a      	mov	r2, r7
 80121ae:	4649      	mov	r1, r9
 80121b0:	9001      	str	r0, [sp, #4]
 80121b2:	a80f      	add	r0, sp, #60	@ 0x3c
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	465b      	mov	r3, fp
 80121b8:	f005 fe40 	bl	8017e3c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80121bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80121c0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80121c4:	af0f      	add	r7, sp, #60	@ 0x3c
 80121c6:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 80121ca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80121ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80121d0:	bf0a      	itet	eq
 80121d2:	464a      	moveq	r2, r9
 80121d4:	461a      	movne	r2, r3
 80121d6:	4699      	moveq	r9, r3
 80121d8:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 80121dc:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 80121e0:	1ad2      	subs	r2, r2, r3
 80121e2:	6833      	ldr	r3, [r6, #0]
 80121e4:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 80121e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80121ec:	7859      	ldrb	r1, [r3, #1]
 80121ee:	2300      	movs	r3, #0
 80121f0:	9707      	str	r7, [sp, #28]
 80121f2:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80121f6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80121fa:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80121fe:	f88d 1020 	strb.w	r1, [sp, #32]
 8012202:	9509      	str	r5, [sp, #36]	@ 0x24
 8012204:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012208:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 801220c:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8012210:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012214:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8012218:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801221c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8012220:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012224:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8012228:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801222c:	b350      	cbz	r0, 8012284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	4628      	mov	r0, r5
 8012232:	695b      	ldr	r3, [r3, #20]
 8012234:	4798      	blx	r3
 8012236:	4607      	mov	r7, r0
 8012238:	b320      	cbz	r0, 8012284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801223a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801223c:	4639      	mov	r1, r7
 801223e:	6803      	ldr	r3, [r0, #0]
 8012240:	68db      	ldr	r3, [r3, #12]
 8012242:	4798      	blx	r3
 8012244:	4606      	mov	r6, r0
 8012246:	b1e8      	cbz	r0, 8012284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8012248:	7b43      	ldrb	r3, [r0, #13]
 801224a:	7a82      	ldrb	r2, [r0, #10]
 801224c:	005b      	lsls	r3, r3, #1
 801224e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012252:	4313      	orrs	r3, r2
 8012254:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8012258:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 801225c:	2b06      	cmp	r3, #6
 801225e:	d111      	bne.n	8012284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8012260:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012262:	4632      	mov	r2, r6
 8012264:	4639      	mov	r1, r7
 8012266:	6803      	ldr	r3, [r0, #0]
 8012268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801226a:	4798      	blx	r3
 801226c:	7b73      	ldrb	r3, [r6, #13]
 801226e:	005b      	lsls	r3, r3, #1
 8012270:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8012274:	7ab3      	ldrb	r3, [r6, #10]
 8012276:	4313      	orrs	r3, r2
 8012278:	4418      	add	r0, r3
 801227a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801227e:	4418      	add	r0, r3
 8012280:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8012284:	2600      	movs	r6, #0
 8012286:	4637      	mov	r7, r6
 8012288:	a806      	add	r0, sp, #24
 801228a:	3701      	adds	r7, #1
 801228c:	f002 fe41 	bl	8014f12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012290:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8012294:	9b03      	ldr	r3, [sp, #12]
 8012296:	b2bf      	uxth	r7, r7
 8012298:	4286      	cmp	r6, r0
 801229a:	eba9 0903 	sub.w	r9, r9, r3
 801229e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80122a2:	bfb8      	it	lt
 80122a4:	4606      	movlt	r6, r0
 80122a6:	fa0f f989 	sxth.w	r9, r9
 80122aa:	b236      	sxth	r6, r6
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	f43f af0d 	beq.w	80120cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80122b2:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	f47f af08 	bne.w	80120cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80122bc:	7a2b      	ldrb	r3, [r5, #8]
 80122be:	444b      	add	r3, r9
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	dce1      	bgt.n	8012288 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 80122c4:	e702      	b.n	80120cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80122c6:	bf00      	nop
 80122c8:	24025990 	.word	0x24025990
 80122cc:	2402598c 	.word	0x2402598c
 80122d0:	24025994 	.word	0x24025994
 80122d4:	24025998 	.word	0x24025998
 80122d8:	ebaa 0606 	sub.w	r6, sl, r6
 80122dc:	2002      	movs	r0, #2
 80122de:	fb96 f6f0 	sdiv	r6, r6, r0
 80122e2:	e71c      	b.n	801211e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80122e4:	441e      	add	r6, r3
 80122e6:	ebaa 0606 	sub.w	r6, sl, r6
 80122ea:	e718      	b.n	801211e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80122ec:	8925      	ldrh	r5, [r4, #8]
 80122ee:	1aed      	subs	r5, r5, r3
 80122f0:	eba5 050a 	sub.w	r5, r5, sl
 80122f4:	fa0f fb85 	sxth.w	fp, r5
 80122f8:	8965      	ldrh	r5, [r4, #10]
 80122fa:	eba5 0509 	sub.w	r5, r5, r9
 80122fe:	b22d      	sxth	r5, r5
 8012300:	e72d      	b.n	801215e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8012302:	8965      	ldrh	r5, [r4, #10]
 8012304:	f04f 0b00 	mov.w	fp, #0
 8012308:	1aed      	subs	r5, r5, r3
 801230a:	4633      	mov	r3, r6
 801230c:	463e      	mov	r6, r7
 801230e:	eba5 050a 	sub.w	r5, r5, sl
 8012312:	461f      	mov	r7, r3
 8012314:	b22d      	sxth	r5, r5
 8012316:	e722      	b.n	801215e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8012318:	2500      	movs	r5, #0
 801231a:	e720      	b.n	801215e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0801231c <_ZN8touchgfx8TextAreaD0Ev>:
 801231c:	b510      	push	{r4, lr}
 801231e:	4604      	mov	r4, r0
 8012320:	2148      	movs	r1, #72	@ 0x48
 8012322:	f011 ff8f 	bl	8024244 <_ZdlPvj>
 8012326:	4620      	mov	r0, r4
 8012328:	bd10      	pop	{r4, pc}
	...

0801232c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801232c:	b513      	push	{r0, r1, r4, lr}
 801232e:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8012332:	4604      	mov	r4, r0
 8012334:	b1fb      	cbz	r3, 8012376 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012336:	4b16      	ldr	r3, [pc, #88]	@ (8012390 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8012338:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 801233a:	881b      	ldrh	r3, [r3, #0]
 801233c:	428b      	cmp	r3, r1
 801233e:	d91a      	bls.n	8012376 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012340:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	dd16      	ble.n	8012376 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012348:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801234c:	2b00      	cmp	r3, #0
 801234e:	dd12      	ble.n	8012376 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012350:	4b10      	ldr	r3, [pc, #64]	@ (8012394 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8012352:	6818      	ldr	r0, [r3, #0]
 8012354:	f7f2 fd80 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 8012358:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 801235c:	6822      	ldr	r2, [r4, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	db06      	blt.n	8012370 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8012362:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8012366:	2b00      	cmp	r3, #0
 8012368:	db02      	blt.n	8012370 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801236a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801236c:	4298      	cmp	r0, r3
 801236e:	d004      	beq.n	801237a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8012370:	6953      	ldr	r3, [r2, #20]
 8012372:	4620      	mov	r0, r4
 8012374:	4798      	blx	r3
 8012376:	b002      	add	sp, #8
 8012378:	bd10      	pop	{r4, pc}
 801237a:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 801237e:	466b      	mov	r3, sp
 8012380:	6912      	ldr	r2, [r2, #16]
 8012382:	c903      	ldmia	r1, {r0, r1}
 8012384:	e883 0003 	stmia.w	r3, {r0, r1}
 8012388:	4619      	mov	r1, r3
 801238a:	4620      	mov	r0, r4
 801238c:	4790      	blx	r2
 801238e:	e7f2      	b.n	8012376 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012390:	24025990 	.word	0x24025990
 8012394:	24025998 	.word	0x24025998

08012398 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8012398:	4b45      	ldr	r3, [pc, #276]	@ (80124b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801239a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80123a0:	b08e      	sub	sp, #56	@ 0x38
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	4604      	mov	r4, r0
 80123a6:	4293      	cmp	r3, r2
 80123a8:	d97e      	bls.n	80124a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80123aa:	6808      	ldr	r0, [r1, #0]
 80123ac:	ab05      	add	r3, sp, #20
 80123ae:	6849      	ldr	r1, [r1, #4]
 80123b0:	4d40      	ldr	r5, [pc, #256]	@ (80124b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80123b2:	c303      	stmia	r3!, {r0, r1}
 80123b4:	4611      	mov	r1, r2
 80123b6:	6828      	ldr	r0, [r5, #0]
 80123b8:	f7f2 fd4e 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 80123bc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	db11      	blt.n	80123e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80123c4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	db0d      	blt.n	80123e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80123cc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80123ce:	4298      	cmp	r0, r3
 80123d0:	d10a      	bne.n	80123e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80123d2:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 80123d6:	ab09      	add	r3, sp, #36	@ 0x24
 80123d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80123e0:	4619      	mov	r1, r3
 80123e2:	a805      	add	r0, sp, #20
 80123e4:	f7fd f878 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 80123e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	dd5b      	ble.n	80124a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80123f0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	dd57      	ble.n	80124a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80123f8:	4f2f      	ldr	r7, [pc, #188]	@ (80124b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80123fa:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8012402:	4b2e      	ldr	r3, [pc, #184]	@ (80124bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801240a:	2e00      	cmp	r6, #0
 801240c:	d04c      	beq.n	80124a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801240e:	6823      	ldr	r3, [r4, #0]
 8012410:	4620      	mov	r0, r4
 8012412:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8012416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012418:	4798      	blx	r3
 801241a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8012422:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012426:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 801242a:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 801242e:	785b      	ldrb	r3, [r3, #1]
 8012430:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8012434:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012438:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801243a:	9609      	str	r6, [sp, #36]	@ 0x24
 801243c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012440:	4b1f      	ldr	r3, [pc, #124]	@ (80124c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8012442:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 801244c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801244e:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8012452:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8012456:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 801245a:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 801245e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8012462:	b10a      	cbz	r2, 8012468 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8012464:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 8012466:	b906      	cbnz	r6, 801246a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8012468:	689e      	ldr	r6, [r3, #8]
 801246a:	af07      	add	r7, sp, #28
 801246c:	4621      	mov	r1, r4
 801246e:	4638      	mov	r0, r7
 8012470:	f004 fd16 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012474:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8012476:	6828      	ldr	r0, [r5, #0]
 8012478:	f7f2 fcee 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 801247c:	6823      	ldr	r3, [r4, #0]
 801247e:	4605      	mov	r5, r0
 8012480:	4620      	mov	r0, r4
 8012482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012484:	4798      	blx	r3
 8012486:	6823      	ldr	r3, [r4, #0]
 8012488:	4680      	mov	r8, r0
 801248a:	4620      	mov	r0, r4
 801248c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012490:	4798      	blx	r3
 8012492:	ab09      	add	r3, sp, #36	@ 0x24
 8012494:	9501      	str	r5, [sp, #4]
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	ab05      	add	r3, sp, #20
 801249a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801249e:	4630      	mov	r0, r6
 80124a0:	e897 0006 	ldmia.w	r7, {r1, r2}
 80124a4:	f7f2 fc8a 	bl	8004dbc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80124a8:	b00e      	add	sp, #56	@ 0x38
 80124aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ae:	bf00      	nop
 80124b0:	24025990 	.word	0x24025990
 80124b4:	24025998 	.word	0x24025998
 80124b8:	2402598c 	.word	0x2402598c
 80124bc:	24025994 	.word	0x24025994
 80124c0:	24025934 	.word	0x24025934

080124c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80124c4:	b570      	push	{r4, r5, r6, lr}
 80124c6:	6803      	ldr	r3, [r0, #0]
 80124c8:	4604      	mov	r4, r0
 80124ca:	4615      	mov	r5, r2
 80124cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124ce:	4798      	blx	r3
 80124d0:	6823      	ldr	r3, [r4, #0]
 80124d2:	4629      	mov	r1, r5
 80124d4:	4620      	mov	r0, r4
 80124d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124dc:	4718      	bx	r3
	...

080124e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4b0e      	ldr	r3, [pc, #56]	@ (801251c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80124e4:	4604      	mov	r4, r0
 80124e6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80124e8:	881b      	ldrh	r3, [r3, #0]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d214      	bcs.n	8012518 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80124ee:	6803      	ldr	r3, [r0, #0]
 80124f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124f2:	4798      	blx	r3
 80124f4:	6823      	ldr	r3, [r4, #0]
 80124f6:	4605      	mov	r5, r0
 80124f8:	4620      	mov	r0, r4
 80124fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124fc:	4798      	blx	r3
 80124fe:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012502:	b22d      	sxth	r5, r5
 8012504:	4601      	mov	r1, r0
 8012506:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 801250a:	bf06      	itte	eq
 801250c:	4602      	moveq	r2, r0
 801250e:	4629      	moveq	r1, r5
 8012510:	462a      	movne	r2, r5
 8012512:	4620      	mov	r0, r4
 8012514:	f7ff ffd6 	bl	80124c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012518:	bd38      	pop	{r3, r4, r5, pc}
 801251a:	bf00      	nop
 801251c:	24025990 	.word	0x24025990

08012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8012520:	b530      	push	{r4, r5, lr}
 8012522:	888b      	ldrh	r3, [r1, #4]
 8012524:	b085      	sub	sp, #20
 8012526:	4604      	mov	r4, r0
 8012528:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801252a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801252e:	b923      	cbnz	r3, 801253a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8012530:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012534:	b90b      	cbnz	r3, 801253a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8012536:	f7ff ffd3 	bl	80124e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801253a:	6823      	ldr	r3, [r4, #0]
 801253c:	466d      	mov	r5, sp
 801253e:	4621      	mov	r1, r4
 8012540:	343c      	adds	r4, #60	@ 0x3c
 8012542:	4628      	mov	r0, r5
 8012544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012548:	4798      	blx	r3
 801254a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801254e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012552:	b005      	add	sp, #20
 8012554:	bd30      	pop	{r4, r5, pc}

08012556 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8012556:	2300      	movs	r3, #0
 8012558:	8083      	strh	r3, [r0, #4]
 801255a:	80c3      	strh	r3, [r0, #6]
 801255c:	8003      	strh	r3, [r0, #0]
 801255e:	8043      	strh	r3, [r0, #2]
 8012560:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8012564:	2bff      	cmp	r3, #255	@ 0xff
 8012566:	bf01      	itttt	eq
 8012568:	890b      	ldrheq	r3, [r1, #8]
 801256a:	8083      	strheq	r3, [r0, #4]
 801256c:	894b      	ldrheq	r3, [r1, #10]
 801256e:	80c3      	strheq	r3, [r0, #6]
 8012570:	4770      	bx	lr
	...

08012574 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012576:	4604      	mov	r4, r0
 8012578:	466b      	mov	r3, sp
 801257a:	6808      	ldr	r0, [r1, #0]
 801257c:	6849      	ldr	r1, [r1, #4]
 801257e:	c303      	stmia	r3!, {r0, r1}
 8012580:	6823      	ldr	r3, [r4, #0]
 8012582:	4669      	mov	r1, sp
 8012584:	4620      	mov	r0, r4
 8012586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012588:	4798      	blx	r3
 801258a:	4b08      	ldr	r3, [pc, #32]	@ (80125ac <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8012592:	b10a      	cbz	r2, 8012598 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012594:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012596:	b900      	cbnz	r0, 801259a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8012598:	6898      	ldr	r0, [r3, #8]
 801259a:	6803      	ldr	r3, [r0, #0]
 801259c:	4669      	mov	r1, sp
 801259e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80125a0:	6a1d      	ldr	r5, [r3, #32]
 80125a2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80125a6:	47a8      	blx	r5
 80125a8:	b003      	add	sp, #12
 80125aa:	bd30      	pop	{r4, r5, pc}
 80125ac:	24025934 	.word	0x24025934

080125b0 <_ZN8touchgfx3BoxD1Ev>:
 80125b0:	4770      	bx	lr

080125b2 <_ZN8touchgfx3BoxD0Ev>:
 80125b2:	b510      	push	{r4, lr}
 80125b4:	4604      	mov	r4, r0
 80125b6:	212c      	movs	r1, #44	@ 0x2c
 80125b8:	f011 fe44 	bl	8024244 <_ZdlPvj>
 80125bc:	4620      	mov	r0, r4
 80125be:	bd10      	pop	{r4, pc}

080125c0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80125c0:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80125c4:	b12a      	cbz	r2, 80125d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80125c6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80125ca:	b112      	cbz	r2, 80125d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80125cc:	6803      	ldr	r3, [r0, #0]
 80125ce:	695b      	ldr	r3, [r3, #20]
 80125d0:	4718      	bx	r3
 80125d2:	4770      	bx	lr

080125d4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80125d4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80125d8:	4770      	bx	lr

080125da <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80125da:	b570      	push	{r4, r5, r6, lr}
 80125dc:	880b      	ldrh	r3, [r1, #0]
 80125de:	4605      	mov	r5, r0
 80125e0:	4604      	mov	r4, r0
 80125e2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80125e4:	8813      	ldrh	r3, [r2, #0]
 80125e6:	f825 3f30 	strh.w	r3, [r5, #48]!
 80125ea:	4628      	mov	r0, r5
 80125ec:	f007 f848 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80125f0:	4606      	mov	r6, r0
 80125f2:	4628      	mov	r0, r5
 80125f4:	f007 f878 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80125f8:	6823      	ldr	r3, [r4, #0]
 80125fa:	4605      	mov	r5, r0
 80125fc:	4631      	mov	r1, r6
 80125fe:	4620      	mov	r0, r4
 8012600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012602:	4798      	blx	r3
 8012604:	6823      	ldr	r3, [r4, #0]
 8012606:	4629      	mov	r1, r5
 8012608:	4620      	mov	r0, r4
 801260a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801260c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012610:	4718      	bx	r3

08012612 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8012612:	b510      	push	{r4, lr}
 8012614:	4604      	mov	r4, r0
 8012616:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8012618:	b150      	cbz	r0, 8012630 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801261a:	6803      	ldr	r3, [r0, #0]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	4798      	blx	r3
 8012620:	b130      	cbz	r0, 8012630 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8012622:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012624:	4621      	mov	r1, r4
 8012626:	6803      	ldr	r3, [r0, #0]
 8012628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801262c:	689b      	ldr	r3, [r3, #8]
 801262e:	4718      	bx	r3
 8012630:	bd10      	pop	{r4, pc}

08012632 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8012632:	b510      	push	{r4, lr}
 8012634:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8012638:	4604      	mov	r4, r0
 801263a:	2bff      	cmp	r3, #255	@ 0xff
 801263c:	d006      	beq.n	801264c <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801263e:	2300      	movs	r3, #0
 8012640:	8003      	strh	r3, [r0, #0]
 8012642:	8043      	strh	r3, [r0, #2]
 8012644:	8083      	strh	r3, [r0, #4]
 8012646:	80c3      	strh	r3, [r0, #6]
 8012648:	4620      	mov	r0, r4
 801264a:	bd10      	pop	{r4, pc}
 801264c:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8012650:	b11b      	cbz	r3, 801265a <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8012652:	3130      	adds	r1, #48	@ 0x30
 8012654:	f007 f87c 	bl	8019750 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012658:	e7f6      	b.n	8012648 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801265a:	312e      	adds	r1, #46	@ 0x2e
 801265c:	e7fa      	b.n	8012654 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08012660 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8012660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012664:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8012668:	b08a      	sub	sp, #40	@ 0x28
 801266a:	4604      	mov	r4, r0
 801266c:	4688      	mov	r8, r1
 801266e:	2b00      	cmp	r3, #0
 8012670:	d066      	beq.n	8012740 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8012672:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8012674:	a805      	add	r0, sp, #20
 8012676:	f8ad 3014 	strh.w	r3, [sp, #20]
 801267a:	f007 f801 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801267e:	4607      	mov	r7, r0
 8012680:	a805      	add	r0, sp, #20
 8012682:	f007 f831 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012686:	f9b8 6000 	ldrsh.w	r6, [r8]
 801268a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801268e:	2300      	movs	r3, #0
 8012690:	4432      	add	r2, r6
 8012692:	9306      	str	r3, [sp, #24]
 8012694:	b292      	uxth	r2, r2
 8012696:	fa0f fc82 	sxth.w	ip, r2
 801269a:	459c      	cmp	ip, r3
 801269c:	dd52      	ble.n	8012744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801269e:	42b7      	cmp	r7, r6
 80126a0:	dd50      	ble.n	8012744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80126a2:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80126a6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80126aa:	442b      	add	r3, r5
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	b219      	sxth	r1, r3
 80126b0:	2900      	cmp	r1, #0
 80126b2:	dd47      	ble.n	8012744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80126b4:	42a8      	cmp	r0, r5
 80126b6:	dd45      	ble.n	8012744 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80126b8:	4567      	cmp	r7, ip
 80126ba:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80126be:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80126c2:	bfb8      	it	lt
 80126c4:	b2ba      	uxthlt	r2, r7
 80126c6:	4288      	cmp	r0, r1
 80126c8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80126cc:	bfb8      	it	lt
 80126ce:	b283      	uxthlt	r3, r0
 80126d0:	1b92      	subs	r2, r2, r6
 80126d2:	f8ad 501a 	strh.w	r5, [sp, #26]
 80126d6:	1b5b      	subs	r3, r3, r5
 80126d8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80126dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80126e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80126e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d026      	beq.n	801273a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80126ec:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	dd22      	ble.n	801273a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80126f4:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	dd1e      	ble.n	801273a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80126fc:	2300      	movs	r3, #0
 80126fe:	a908      	add	r1, sp, #32
 8012700:	4620      	mov	r0, r4
 8012702:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801270a:	4798      	blx	r3
 801270c:	4b0f      	ldr	r3, [pc, #60]	@ (801274c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8012714:	b10a      	cbz	r2, 801271a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8012716:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012718:	b900      	cbnz	r0, 801271c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801271a:	6898      	ldr	r0, [r3, #8]
 801271c:	2501      	movs	r5, #1
 801271e:	6801      	ldr	r1, [r0, #0]
 8012720:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8012724:	9502      	str	r5, [sp, #8]
 8012726:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 801272a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801272e:	9401      	str	r4, [sp, #4]
 8012730:	ac06      	add	r4, sp, #24
 8012732:	9400      	str	r4, [sp, #0]
 8012734:	688c      	ldr	r4, [r1, #8]
 8012736:	a905      	add	r1, sp, #20
 8012738:	47a0      	blx	r4
 801273a:	b00a      	add	sp, #40	@ 0x28
 801273c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012740:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8012742:	e797      	b.n	8012674 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8012744:	2300      	movs	r3, #0
 8012746:	9307      	str	r3, [sp, #28]
 8012748:	e7ca      	b.n	80126e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801274a:	bf00      	nop
 801274c:	24025934 	.word	0x24025934

08012750 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8012750:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8012754:	b12a      	cbz	r2, 8012762 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8012756:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801275a:	b112      	cbz	r2, 8012762 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801275c:	6803      	ldr	r3, [r0, #0]
 801275e:	695b      	ldr	r3, [r3, #20]
 8012760:	4718      	bx	r3
 8012762:	4770      	bx	lr

08012764 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8012764:	4b30      	ldr	r3, [pc, #192]	@ (8012828 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8012766:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801276a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801276c:	b08d      	sub	sp, #52	@ 0x34
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	4604      	mov	r4, r0
 8012772:	460f      	mov	r7, r1
 8012774:	4293      	cmp	r3, r2
 8012776:	d954      	bls.n	8012822 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8012778:	4b2c      	ldr	r3, [pc, #176]	@ (801282c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801277a:	6819      	ldr	r1, [r3, #0]
 801277c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8012780:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8012784:	4a2a      	ldr	r2, [pc, #168]	@ (8012830 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8012786:	6812      	ldr	r2, [r2, #0]
 8012788:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801278c:	2900      	cmp	r1, #0
 801278e:	d048      	beq.n	8012822 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8012790:	785a      	ldrb	r2, [r3, #1]
 8012792:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8012796:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801279a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801279e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80127a2:	4b24      	ldr	r3, [pc, #144]	@ (8012834 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80127a4:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 80127ae:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 80127b2:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 80127b6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80127b8:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80127bc:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80127c0:	9107      	str	r1, [sp, #28]
 80127c2:	f88d 8020 	strb.w	r8, [sp, #32]
 80127c6:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80127ca:	9609      	str	r6, [sp, #36]	@ 0x24
 80127cc:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80127d0:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80127d4:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80127d8:	b10b      	cbz	r3, 80127de <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80127da:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80127dc:	b905      	cbnz	r5, 80127e0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80127de:	6895      	ldr	r5, [r2, #8]
 80127e0:	ae05      	add	r6, sp, #20
 80127e2:	4621      	mov	r1, r4
 80127e4:	4630      	mov	r0, r6
 80127e6:	f004 fb5b 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80127ea:	4b13      	ldr	r3, [pc, #76]	@ (8012838 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80127ec:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80127ee:	6818      	ldr	r0, [r3, #0]
 80127f0:	f7f2 fb32 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	4680      	mov	r8, r0
 80127f8:	4620      	mov	r0, r4
 80127fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127fc:	4798      	blx	r3
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	4681      	mov	r9, r0
 8012802:	4620      	mov	r0, r4
 8012804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012808:	4798      	blx	r3
 801280a:	ab07      	add	r3, sp, #28
 801280c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012810:	9300      	str	r3, [sp, #0]
 8012812:	463b      	mov	r3, r7
 8012814:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8012818:	4628      	mov	r0, r5
 801281a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801281e:	f7f2 facd 	bl	8004dbc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012822:	b00d      	add	sp, #52	@ 0x34
 8012824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012828:	24025990 	.word	0x24025990
 801282c:	2402598c 	.word	0x2402598c
 8012830:	24025994 	.word	0x24025994
 8012834:	24025934 	.word	0x24025934
 8012838:	24025998 	.word	0x24025998

0801283c <_ZN8touchgfx13BoxWithBorderD1Ev>:
 801283c:	4770      	bx	lr

0801283e <_ZN8touchgfx13BoxWithBorderD0Ev>:
 801283e:	b510      	push	{r4, lr}
 8012840:	4604      	mov	r4, r0
 8012842:	2134      	movs	r1, #52	@ 0x34
 8012844:	f011 fcfe 	bl	8024244 <_ZdlPvj>
 8012848:	4620      	mov	r0, r4
 801284a:	bd10      	pop	{r4, pc}

0801284c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012850:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8012852:	4604      	mov	r4, r0
 8012854:	460e      	mov	r6, r1
 8012856:	b08e      	sub	sp, #56	@ 0x38
 8012858:	b218      	sxth	r0, r3
 801285a:	8921      	ldrh	r1, [r4, #8]
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	8962      	ldrh	r2, [r4, #10]
 8012860:	f8ad 0000 	strh.w	r0, [sp]
 8012864:	b29b      	uxth	r3, r3
 8012866:	f8ad 0002 	strh.w	r0, [sp, #2]
 801286a:	1ac9      	subs	r1, r1, r3
 801286c:	1ad3      	subs	r3, r2, r3
 801286e:	b209      	sxth	r1, r1
 8012870:	b21b      	sxth	r3, r3
 8012872:	2900      	cmp	r1, #0
 8012874:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012878:	f8ad 3006 	strh.w	r3, [sp, #6]
 801287c:	dd5e      	ble.n	801293c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801287e:	2b00      	cmp	r3, #0
 8012880:	dd5c      	ble.n	801293c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8012882:	6830      	ldr	r0, [r6, #0]
 8012884:	ab02      	add	r3, sp, #8
 8012886:	6871      	ldr	r1, [r6, #4]
 8012888:	c303      	stmia	r3!, {r0, r1}
 801288a:	4669      	mov	r1, sp
 801288c:	a802      	add	r0, sp, #8
 801288e:	f7fc fe23 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8012892:	4620      	mov	r0, r4
 8012894:	a902      	add	r1, sp, #8
 8012896:	f7ff fe6d 	bl	8012574 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801289a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801289c:	2800      	cmp	r0, #0
 801289e:	d05f      	beq.n	8012960 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80128a0:	8963      	ldrh	r3, [r4, #10]
 80128a2:	b202      	sxth	r2, r0
 80128a4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80128a8:	2500      	movs	r5, #0
 80128aa:	1a1f      	subs	r7, r3, r0
 80128ac:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80128b0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80128b4:	b21b      	sxth	r3, r3
 80128b6:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80128ba:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 80128be:	af04      	add	r7, sp, #16
 80128c0:	1a09      	subs	r1, r1, r0
 80128c2:	9506      	str	r5, [sp, #24]
 80128c4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80128c8:	f8ad 5020 	strh.w	r5, [sp, #32]
 80128cc:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 80128d0:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 80128d4:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80128d8:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80128dc:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80128e0:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 80128e4:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80128e8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80128ec:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80128f0:	ab06      	add	r3, sp, #24
 80128f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80128f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80128fa:	e887 0003 	stmia.w	r7, {r0, r1}
 80128fe:	4631      	mov	r1, r6
 8012900:	4638      	mov	r0, r7
 8012902:	f7fc fde9 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8012906:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801290a:	2b00      	cmp	r3, #0
 801290c:	dd12      	ble.n	8012934 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801290e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012912:	2b00      	cmp	r3, #0
 8012914:	dd0e      	ble.n	8012934 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8012916:	6823      	ldr	r3, [r4, #0]
 8012918:	4639      	mov	r1, r7
 801291a:	4620      	mov	r0, r4
 801291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801291e:	4798      	blx	r3
 8012920:	f7f1 fb8c 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8012924:	6803      	ldr	r3, [r0, #0]
 8012926:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012928:	4639      	mov	r1, r7
 801292a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801292e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8012932:	47c0      	blx	r8
 8012934:	3501      	adds	r5, #1
 8012936:	2d04      	cmp	r5, #4
 8012938:	d1da      	bne.n	80128f0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801293a:	e011      	b.n	8012960 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801293c:	6830      	ldr	r0, [r6, #0]
 801293e:	ab06      	add	r3, sp, #24
 8012940:	6871      	ldr	r1, [r6, #4]
 8012942:	c303      	stmia	r3!, {r0, r1}
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	a906      	add	r1, sp, #24
 8012948:	4620      	mov	r0, r4
 801294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801294c:	4798      	blx	r3
 801294e:	f7f1 fb75 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8012952:	6803      	ldr	r3, [r0, #0]
 8012954:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012956:	a906      	add	r1, sp, #24
 8012958:	6a1d      	ldr	r5, [r3, #32]
 801295a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801295e:	47a8      	blx	r5
 8012960:	b00e      	add	sp, #56	@ 0x38
 8012962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012966 <_ZN8touchgfx5ImageD1Ev>:
 8012966:	4770      	bx	lr

08012968 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	880b      	ldrh	r3, [r1, #0]
 801296c:	460d      	mov	r5, r1
 801296e:	4604      	mov	r4, r0
 8012970:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8012972:	4608      	mov	r0, r1
 8012974:	f006 fe84 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012978:	4606      	mov	r6, r0
 801297a:	4628      	mov	r0, r5
 801297c:	f006 feb4 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012980:	6823      	ldr	r3, [r4, #0]
 8012982:	4605      	mov	r5, r0
 8012984:	4631      	mov	r1, r6
 8012986:	4620      	mov	r0, r4
 8012988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801298a:	4798      	blx	r3
 801298c:	6823      	ldr	r3, [r4, #0]
 801298e:	4629      	mov	r1, r5
 8012990:	4620      	mov	r0, r4
 8012992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012998:	4718      	bx	r3

0801299a <_ZN8touchgfx5ImageD0Ev>:
 801299a:	b510      	push	{r4, lr}
 801299c:	4604      	mov	r4, r0
 801299e:	212c      	movs	r1, #44	@ 0x2c
 80129a0:	f011 fc50 	bl	8024244 <_ZdlPvj>
 80129a4:	4620      	mov	r0, r4
 80129a6:	bd10      	pop	{r4, pc}

080129a8 <_ZNK8touchgfx5Image12getSolidRectEv>:
 80129a8:	b510      	push	{r4, lr}
 80129aa:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80129ae:	4604      	mov	r4, r0
 80129b0:	2bff      	cmp	r3, #255	@ 0xff
 80129b2:	d006      	beq.n	80129c2 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80129b4:	2300      	movs	r3, #0
 80129b6:	8003      	strh	r3, [r0, #0]
 80129b8:	8043      	strh	r3, [r0, #2]
 80129ba:	8083      	strh	r3, [r0, #4]
 80129bc:	80c3      	strh	r3, [r0, #6]
 80129be:	4620      	mov	r0, r4
 80129c0:	bd10      	pop	{r4, pc}
 80129c2:	3126      	adds	r1, #38	@ 0x26
 80129c4:	f006 fec4 	bl	8019750 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80129c8:	e7f9      	b.n	80129be <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080129ca <_ZNK8touchgfx5Image17invalidateContentEv>:
 80129ca:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 80129ce:	b12a      	cbz	r2, 80129dc <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80129d0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80129d4:	b112      	cbz	r2, 80129dc <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 80129d6:	6803      	ldr	r3, [r0, #0]
 80129d8:	695b      	ldr	r3, [r3, #20]
 80129da:	4718      	bx	r3
 80129dc:	4770      	bx	lr
	...

080129e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80129e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e4:	4604      	mov	r4, r0
 80129e6:	b088      	sub	sp, #32
 80129e8:	2500      	movs	r5, #0
 80129ea:	460f      	mov	r7, r1
 80129ec:	f854 3b26 	ldr.w	r3, [r4], #38
 80129f0:	a904      	add	r1, sp, #16
 80129f2:	4606      	mov	r6, r0
 80129f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80129fa:	4798      	blx	r3
 80129fc:	4620      	mov	r0, r4
 80129fe:	f006 fe3f 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012a02:	4680      	mov	r8, r0
 8012a04:	4620      	mov	r0, r4
 8012a06:	f006 fe6f 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012a0a:	9506      	str	r5, [sp, #24]
 8012a0c:	ad06      	add	r5, sp, #24
 8012a0e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012a12:	4639      	mov	r1, r7
 8012a14:	f8ad 801c 	strh.w	r8, [sp, #28]
 8012a18:	4628      	mov	r0, r5
 8012a1a:	f7fc fd5d 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8012a1e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	dd19      	ble.n	8012a5a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012a26:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	dd15      	ble.n	8012a5a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8012a60 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8012a36:	b10a      	cbz	r2, 8012a3c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8012a38:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8012a3a:	b900      	cbnz	r0, 8012a3e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8012a3c:	6898      	ldr	r0, [r3, #8]
 8012a3e:	2701      	movs	r7, #1
 8012a40:	6801      	ldr	r1, [r0, #0]
 8012a42:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012a46:	9702      	str	r7, [sp, #8]
 8012a48:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8012a4c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8012a50:	e9cd 5600 	strd	r5, r6, [sp]
 8012a54:	688d      	ldr	r5, [r1, #8]
 8012a56:	4621      	mov	r1, r4
 8012a58:	47a8      	blx	r5
 8012a5a:	b008      	add	sp, #32
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	24025934 	.word	0x24025934

08012a64 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8012a64:	4770      	bx	lr

08012a66 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8012a66:	b510      	push	{r4, lr}
 8012a68:	4604      	mov	r4, r0
 8012a6a:	2148      	movs	r1, #72	@ 0x48
 8012a6c:	f011 fbea 	bl	8024244 <_ZdlPvj>
 8012a70:	4620      	mov	r0, r4
 8012a72:	bd10      	pop	{r4, pc}

08012a74 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8012a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a78:	b08d      	sub	sp, #52	@ 0x34
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	460f      	mov	r7, r1
 8012a7e:	f7ff fdef 	bl	8012660 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8012a82:	4a55      	ldr	r2, [pc, #340]	@ (8012bd8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8012a84:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8012a86:	8812      	ldrh	r2, [r2, #0]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	f240 8082 	bls.w	8012b92 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8012a8e:	4d53      	ldr	r5, [pc, #332]	@ (8012bdc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8012a90:	682a      	ldr	r2, [r5, #0]
 8012a92:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012a96:	4b52      	ldr	r3, [pc, #328]	@ (8012be0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8012aa4:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012aa8:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8012aac:	2a03      	cmp	r2, #3
 8012aae:	d811      	bhi.n	8012ad4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8012ab0:	e8df f002 	tbb	[pc, r2]
 8012ab4:	89727902 	.word	0x89727902
 8012ab8:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8012abc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8012ac0:	1ad2      	subs	r2, r2, r3
 8012ac2:	2002      	movs	r0, #2
 8012ac4:	f8ad 1010 	strh.w	r1, [sp, #16]
 8012ac8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012acc:	fb92 f2f0 	sdiv	r2, r2, r0
 8012ad0:	f8ad 200e 	strh.w	r2, [sp, #14]
 8012ad4:	f10d 080c 	add.w	r8, sp, #12
 8012ad8:	f10d 0914 	add.w	r9, sp, #20
 8012adc:	e898 0003 	ldmia.w	r8, {r0, r1}
 8012ae0:	e889 0003 	stmia.w	r9, {r0, r1}
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	4648      	mov	r0, r9
 8012ae8:	f7fc fcf6 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8012aec:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	dd4e      	ble.n	8012b92 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8012af4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	dd4a      	ble.n	8012b92 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8012afc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8012b00:	4641      	mov	r1, r8
 8012b02:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012b06:	4620      	mov	r0, r4
 8012b08:	1a9b      	subs	r3, r3, r2
 8012b0a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8012b0e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012b12:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012b16:	1a9b      	subs	r3, r3, r2
 8012b18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012b1c:	6823      	ldr	r3, [r4, #0]
 8012b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b20:	4798      	blx	r3
 8012b22:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d053      	beq.n	8012bd2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8012b2a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8012b2c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8012b2e:	682b      	ldr	r3, [r5, #0]
 8012b30:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8012b34:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8012b38:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8012b3c:	785b      	ldrb	r3, [r3, #1]
 8012b3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b40:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8012b44:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012b48:	9607      	str	r6, [sp, #28]
 8012b4a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f88d 5020 	strb.w	r5, [sp, #32]
 8012b54:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8012b58:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8012b5c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012b60:	4b20      	ldr	r3, [pc, #128]	@ (8012be4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8012b62:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8012b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8012b70:	b10a      	cbz	r2, 8012b76 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8012b72:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012b74:	b904      	cbnz	r4, 8012b78 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8012b76:	689c      	ldr	r4, [r3, #8]
 8012b78:	4b1b      	ldr	r3, [pc, #108]	@ (8012be8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8012b7a:	6818      	ldr	r0, [r3, #0]
 8012b7c:	f7f2 f96c 	bl	8004e58 <_ZNK8touchgfx5Texts7getTextEt>
 8012b80:	ab07      	add	r3, sp, #28
 8012b82:	9001      	str	r0, [sp, #4]
 8012b84:	4620      	mov	r0, r4
 8012b86:	9300      	str	r3, [sp, #0]
 8012b88:	464b      	mov	r3, r9
 8012b8a:	e898 0006 	ldmia.w	r8, {r1, r2}
 8012b8e:	f7f2 f915 	bl	8004dbc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8012b92:	b00d      	add	sp, #52	@ 0x34
 8012b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b98:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8012b9c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8012ba0:	1ad2      	subs	r2, r2, r3
 8012ba2:	3201      	adds	r2, #1
 8012ba4:	e78d      	b.n	8012ac2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8012ba6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012baa:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8012bae:	1ad2      	subs	r2, r2, r3
 8012bb0:	3201      	adds	r2, #1
 8012bb2:	2002      	movs	r0, #2
 8012bb4:	f8ad 3010 	strh.w	r3, [sp, #16]
 8012bb8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012bbc:	fb92 f2f0 	sdiv	r2, r2, r0
 8012bc0:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012bc4:	e786      	b.n	8012ad4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8012bc6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012bca:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8012bce:	1ad2      	subs	r2, r2, r3
 8012bd0:	e7ef      	b.n	8012bb2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8012bd2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8012bd4:	e7aa      	b.n	8012b2c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8012bd6:	bf00      	nop
 8012bd8:	24025990 	.word	0x24025990
 8012bdc:	2402598c 	.word	0x2402598c
 8012be0:	24025994 	.word	0x24025994
 8012be4:	24025934 	.word	0x24025934
 8012be8:	24025998 	.word	0x24025998

08012bec <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8012bec:	2101      	movs	r1, #1
 8012bee:	2200      	movs	r2, #0
 8012bf0:	b510      	push	{r4, lr}
 8012bf2:	4c13      	ldr	r4, [pc, #76]	@ (8012c40 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8012bf4:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8012bf8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8012bfc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012c00:	6004      	str	r4, [r0, #0]
 8012c02:	4c10      	ldr	r4, [pc, #64]	@ (8012c44 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8012c04:	8082      	strh	r2, [r0, #4]
 8012c06:	80c2      	strh	r2, [r0, #6]
 8012c08:	8102      	strh	r2, [r0, #8]
 8012c0a:	8142      	strh	r2, [r0, #10]
 8012c0c:	8182      	strh	r2, [r0, #12]
 8012c0e:	81c2      	strh	r2, [r0, #14]
 8012c10:	8202      	strh	r2, [r0, #16]
 8012c12:	8242      	strh	r2, [r0, #18]
 8012c14:	61c2      	str	r2, [r0, #28]
 8012c16:	8402      	strh	r2, [r0, #32]
 8012c18:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012c1a:	6282      	str	r2, [r0, #40]	@ 0x28
 8012c1c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8012c20:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8012c22:	8601      	strh	r1, [r0, #48]	@ 0x30
 8012c24:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8012c28:	6344      	str	r4, [r0, #52]	@ 0x34
 8012c2a:	8701      	strh	r1, [r0, #56]	@ 0x38
 8012c2c:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8012c30:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8012c34:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012c38:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8012c3c:	bd10      	pop	{r4, pc}
 8012c3e:	bf00      	nop
 8012c40:	08028fe0 	.word	0x08028fe0
 8012c44:	08028164 	.word	0x08028164

08012c48 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8012c48:	2000      	movs	r0, #0
 8012c4a:	4770      	bx	lr

08012c4c <_ZN8touchgfx8KeyboardD1Ev>:
 8012c4c:	4770      	bx	lr

08012c4e <_ZN8touchgfx10ClickEventD1Ev>:
 8012c4e:	4770      	bx	lr

08012c50 <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	4604      	mov	r4, r0
 8012c54:	4615      	mov	r5, r2
 8012c56:	f7fc fd17 	bl	800f688 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8012c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012c5e:	81a3      	strh	r3, [r4, #12]
 8012c60:	f04f 33ff 	mov.w	r3, #4294967295
 8012c64:	6223      	str	r3, [r4, #32]
 8012c66:	682b      	ldr	r3, [r5, #0]
 8012c68:	61e3      	str	r3, [r4, #28]
 8012c6a:	602c      	str	r4, [r5, #0]
 8012c6c:	bd38      	pop	{r3, r4, r5, pc}

08012c6e <_ZN8touchgfx10ClickEventD0Ev>:
 8012c6e:	b510      	push	{r4, lr}
 8012c70:	4604      	mov	r4, r0
 8012c72:	210c      	movs	r1, #12
 8012c74:	f011 fae6 	bl	8024244 <_ZdlPvj>
 8012c78:	4620      	mov	r0, r4
 8012c7a:	bd10      	pop	{r4, pc}

08012c7c <_ZN8touchgfx8KeyboardD0Ev>:
 8012c7c:	b510      	push	{r4, lr}
 8012c7e:	4604      	mov	r4, r0
 8012c80:	21e8      	movs	r1, #232	@ 0xe8
 8012c82:	f011 fadf 	bl	8024244 <_ZdlPvj>
 8012c86:	4620      	mov	r0, r4
 8012c88:	bd10      	pop	{r4, pc}

08012c8a <_ZNK8touchgfx4Rect9intersectEss>:
 8012c8a:	b510      	push	{r4, lr}
 8012c8c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012c90:	428b      	cmp	r3, r1
 8012c92:	dc10      	bgt.n	8012cb6 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012c94:	8884      	ldrh	r4, [r0, #4]
 8012c96:	4423      	add	r3, r4
 8012c98:	b21b      	sxth	r3, r3
 8012c9a:	4299      	cmp	r1, r3
 8012c9c:	da0b      	bge.n	8012cb6 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012c9e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012ca2:	4293      	cmp	r3, r2
 8012ca4:	dc07      	bgt.n	8012cb6 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012ca6:	88c0      	ldrh	r0, [r0, #6]
 8012ca8:	4418      	add	r0, r3
 8012caa:	b200      	sxth	r0, r0
 8012cac:	4282      	cmp	r2, r0
 8012cae:	bfac      	ite	ge
 8012cb0:	2000      	movge	r0, #0
 8012cb2:	2001      	movlt	r0, #1
 8012cb4:	bd10      	pop	{r4, pc}
 8012cb6:	2000      	movs	r0, #0
 8012cb8:	e7fc      	b.n	8012cb4 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

08012cbc <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 8012cbc:	b530      	push	{r4, r5, lr}
 8012cbe:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8012cc2:	b085      	sub	sp, #20
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	460d      	mov	r5, r1
 8012cc8:	b1f3      	cbz	r3, 8012d08 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8012cca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cce:	30bc      	adds	r0, #188	@ 0xbc
 8012cd0:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8012cd4:	f7ff ffd9 	bl	8012c8a <_ZNK8touchgfx4Rect9intersectEss>
 8012cd8:	b9b0      	cbnz	r0, 8012d08 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8012cda:	f894 30e4 	ldrb.w	r3, [r4, #228]	@ 0xe4
 8012cde:	b99b      	cbnz	r3, 8012d08 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8012ce0:	480a      	ldr	r0, [pc, #40]	@ (8012d0c <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8012ce2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012ce6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8012cea:	9001      	str	r0, [sp, #4]
 8012cec:	2002      	movs	r0, #2
 8012cee:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	f88d 0008 	strb.w	r0, [sp, #8]
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	f8ad 100a 	strh.w	r1, [sp, #10]
 8012cfe:	a901      	add	r1, sp, #4
 8012d00:	f8ad 200c 	strh.w	r2, [sp, #12]
 8012d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d06:	4798      	blx	r3
 8012d08:	b005      	add	sp, #20
 8012d0a:	bd30      	pop	{r4, r5, pc}
 8012d0c:	08029054 	.word	0x08029054

08012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012d10:	b510      	push	{r4, lr}
 8012d12:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012d16:	888a      	ldrh	r2, [r1, #4]
 8012d18:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012d1c:	4422      	add	r2, r4
 8012d1e:	b212      	sxth	r2, r2
 8012d20:	4293      	cmp	r3, r2
 8012d22:	da15      	bge.n	8012d50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012d24:	8882      	ldrh	r2, [r0, #4]
 8012d26:	4413      	add	r3, r2
 8012d28:	b21b      	sxth	r3, r3
 8012d2a:	429c      	cmp	r4, r3
 8012d2c:	da10      	bge.n	8012d50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012d2e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012d32:	88c9      	ldrh	r1, [r1, #6]
 8012d34:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012d38:	4419      	add	r1, r3
 8012d3a:	b209      	sxth	r1, r1
 8012d3c:	428a      	cmp	r2, r1
 8012d3e:	da07      	bge.n	8012d50 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012d40:	88c0      	ldrh	r0, [r0, #6]
 8012d42:	4410      	add	r0, r2
 8012d44:	b200      	sxth	r0, r0
 8012d46:	4283      	cmp	r3, r0
 8012d48:	bfac      	ite	ge
 8012d4a:	2000      	movge	r0, #0
 8012d4c:	2001      	movlt	r0, #1
 8012d4e:	bd10      	pop	{r4, pc}
 8012d50:	2000      	movs	r0, #0
 8012d52:	e7fc      	b.n	8012d4e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012d54 <_ZN8touchgfx8DrawableC1Ev>:
 8012d54:	4a0a      	ldr	r2, [pc, #40]	@ (8012d80 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8012d56:	6002      	str	r2, [r0, #0]
 8012d58:	2200      	movs	r2, #0
 8012d5a:	8082      	strh	r2, [r0, #4]
 8012d5c:	80c2      	strh	r2, [r0, #6]
 8012d5e:	8102      	strh	r2, [r0, #8]
 8012d60:	8142      	strh	r2, [r0, #10]
 8012d62:	8182      	strh	r2, [r0, #12]
 8012d64:	81c2      	strh	r2, [r0, #14]
 8012d66:	8202      	strh	r2, [r0, #16]
 8012d68:	8242      	strh	r2, [r0, #18]
 8012d6a:	61c2      	str	r2, [r0, #28]
 8012d6c:	8402      	strh	r2, [r0, #32]
 8012d6e:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012d70:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8012d74:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012d78:	2201      	movs	r2, #1
 8012d7a:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8012d7e:	4770      	bx	lr
 8012d80:	0802915c 	.word	0x0802915c

08012d84 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8012d84:	b538      	push	{r3, r4, r5, lr}
 8012d86:	4604      	mov	r4, r0
 8012d88:	460d      	mov	r5, r1
 8012d8a:	2226      	movs	r2, #38	@ 0x26
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	f012 f88d 	bl	8024eac <memset>
 8012d92:	4620      	mov	r0, r4
 8012d94:	f7ff ffde 	bl	8012d54 <_ZN8touchgfx8DrawableC1Ev>
 8012d98:	4b06      	ldr	r3, [pc, #24]	@ (8012db4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	4629      	mov	r1, r5
 8012d9e:	6023      	str	r3, [r4, #0]
 8012da0:	882b      	ldrh	r3, [r5, #0]
 8012da2:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8012da4:	23ff      	movs	r3, #255	@ 0xff
 8012da6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8012daa:	f7ff fddd 	bl	8012968 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012dae:	4620      	mov	r0, r4
 8012db0:	bd38      	pop	{r3, r4, r5, pc}
 8012db2:	bf00      	nop
 8012db4:	08028f74 	.word	0x08028f74

08012db8 <_ZN8touchgfx8KeyboardC1Ev>:
 8012db8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	2500      	movs	r5, #0
 8012dc0:	f7ff ffc8 	bl	8012d54 <_ZN8touchgfx8DrawableC1Ev>
 8012dc4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8012dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8012e88 <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 8012dca:	f104 0938 	add.w	r9, r4, #56	@ 0x38
 8012dce:	af02      	add	r7, sp, #8
 8012dd0:	f104 0864 	add.w	r8, r4, #100	@ 0x64
 8012dd4:	6023      	str	r3, [r4, #0]
 8012dd6:	4648      	mov	r0, r9
 8012dd8:	f827 6d04 	strh.w	r6, [r7, #-4]!
 8012ddc:	4639      	mov	r1, r7
 8012dde:	f104 0ab8 	add.w	sl, r4, #184	@ 0xb8
 8012de2:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
 8012de6:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
 8012dea:	f7ff ffcb 	bl	8012d84 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012dee:	2226      	movs	r2, #38	@ 0x26
 8012df0:	4629      	mov	r1, r5
 8012df2:	4640      	mov	r0, r8
 8012df4:	f012 f85a 	bl	8024eac <memset>
 8012df8:	4640      	mov	r0, r8
 8012dfa:	f7ff ffab 	bl	8012d54 <_ZN8touchgfx8DrawableC1Ev>
 8012dfe:	4b23      	ldr	r3, [pc, #140]	@ (8012e8c <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 8012e00:	4639      	mov	r1, r7
 8012e02:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 8012e06:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8012e0a:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8012e0e:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8012e12:	4650      	mov	r0, sl
 8012e14:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8012e18:	4b1d      	ldr	r3, [pc, #116]	@ (8012e90 <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 8012e1a:	f884 509c 	strb.w	r5, [r4, #156]	@ 0x9c
 8012e1e:	6663      	str	r3, [r4, #100]	@ 0x64
 8012e20:	f884 509d 	strb.w	r5, [r4, #157]	@ 0x9d
 8012e24:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8012e28:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8012e2c:	f8a4 60a4 	strh.w	r6, [r4, #164]	@ 0xa4
 8012e30:	f8a4 60a6 	strh.w	r6, [r4, #166]	@ 0xa6
 8012e34:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
 8012e38:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
 8012e3c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8012e40:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8012e44:	f7ff ff9e 	bl	8012d84 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	462a      	mov	r2, r5
 8012e4c:	4629      	mov	r1, r5
 8012e4e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8012e52:	4648      	mov	r0, r9
 8012e54:	f884 50e4 	strb.w	r5, [r4, #228]	@ 0xe4
 8012e58:	f7f1 fb0e 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8012e5c:	4649      	mov	r1, r9
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f7fc f9b6 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012e64:	4651      	mov	r1, sl
 8012e66:	4620      	mov	r0, r4
 8012e68:	f884 50dd 	strb.w	r5, [r4, #221]	@ 0xdd
 8012e6c:	f7fc f9b0 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012e70:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8012e74:	4620      	mov	r0, r4
 8012e76:	4641      	mov	r1, r8
 8012e78:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8012e7c:	f7fc f9a8 	bl	800f1d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012e80:	4620      	mov	r0, r4
 8012e82:	b002      	add	sp, #8
 8012e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e88:	08029068 	.word	0x08029068
 8012e8c:	08028164 	.word	0x08028164
 8012e90:	080282d4 	.word	0x080282d4

08012e94 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8012e94:	b510      	push	{r4, lr}
 8012e96:	4604      	mov	r4, r0
 8012e98:	6301      	str	r1, [r0, #48]	@ 0x30
 8012e9a:	8682      	strh	r2, [r0, #52]	@ 0x34
 8012e9c:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
 8012ea0:	4608      	mov	r0, r1
 8012ea2:	f005 feef 	bl	8018c84 <_ZN8touchgfx7Unicode6strlenEPKt>
 8012ea6:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012ea8:	bd10      	pop	{r4, pc}

08012eaa <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 8012eaa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012eae:	4605      	mov	r5, r0
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	f8c5 10b0 	str.w	r1, [r5, #176]	@ 0xb0
 8012eb6:	b309      	cbz	r1, 8012efc <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8012eb8:	460f      	mov	r7, r1
 8012eba:	a902      	add	r1, sp, #8
 8012ebc:	f105 0664 	add.w	r6, r5, #100	@ 0x64
 8012ec0:	3038      	adds	r0, #56	@ 0x38
 8012ec2:	f837 3b1c 	ldrh.w	r3, [r7], #28
 8012ec6:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8012eca:	f7ff fd4d 	bl	8012968 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012ece:	4639      	mov	r1, r7
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7ff fb25 	bl	8012520 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012ed6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 8012ede:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 8012ee2:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 8012ee6:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8012eea:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8012eee:	f7f1 fac3 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8012ef2:	4642      	mov	r2, r8
 8012ef4:	4639      	mov	r1, r7
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f7ff fae4 	bl	80124c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012efc:	682b      	ldr	r3, [r5, #0]
 8012efe:	4628      	mov	r0, r5
 8012f00:	695b      	ldr	r3, [r3, #20]
 8012f02:	4798      	blx	r3
 8012f04:	b002      	add	sp, #8
 8012f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012f0c <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 8012f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f10:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8012f14:	4604      	mov	r4, r0
 8012f16:	b343      	cbz	r3, 8012f6a <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 8012f18:	4a15      	ldr	r2, [pc, #84]	@ (8012f70 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 8012f1a:	f100 0764 	add.w	r7, r0, #100	@ 0x64
 8012f1e:	8c19      	ldrh	r1, [r3, #32]
 8012f20:	6812      	ldr	r2, [r2, #0]
 8012f22:	4638      	mov	r0, r7
 8012f24:	8add      	ldrh	r5, [r3, #22]
 8012f26:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 8012f2a:	4a12      	ldr	r2, [pc, #72]	@ (8012f74 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 8012f2c:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 8012f30:	6812      	ldr	r2, [r2, #0]
 8012f32:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012f36:	8a59      	ldrh	r1, [r3, #18]
 8012f38:	7ad6      	ldrb	r6, [r2, #11]
 8012f3a:	b2b2      	uxth	r2, r6
 8012f3c:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8012f40:	1a89      	subs	r1, r1, r2
 8012f42:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8012f46:	b22d      	sxth	r5, r5
 8012f48:	b209      	sxth	r1, r1
 8012f4a:	f7f1 fa95 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8012f4e:	4642      	mov	r2, r8
 8012f50:	4629      	mov	r1, r5
 8012f52:	4638      	mov	r0, r7
 8012f54:	f7ff fab6 	bl	80124c4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8012f58:	2300      	movs	r3, #0
 8012f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f5e:	f884 609b 	strb.w	r6, [r4, #155]	@ 0x9b
 8012f62:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8012f66:	e9c4 3228 	strd	r3, r2, [r4, #160]	@ 0xa0
 8012f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6e:	bf00      	nop
 8012f70:	2402598c 	.word	0x2402598c
 8012f74:	24025994 	.word	0x24025994

08012f78 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 8012f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7c:	4690      	mov	r8, r2
 8012f7e:	f8d1 70b0 	ldr.w	r7, [r1, #176]	@ 0xb0
 8012f82:	2200      	movs	r2, #0
 8012f84:	4606      	mov	r6, r0
 8012f86:	4699      	mov	r9, r3
 8012f88:	8042      	strh	r2, [r0, #2]
 8012f8a:	8082      	strh	r2, [r0, #4]
 8012f8c:	80c2      	strh	r2, [r0, #6]
 8012f8e:	8102      	strh	r2, [r0, #8]
 8012f90:	7002      	strb	r2, [r0, #0]
 8012f92:	b1c7      	cbz	r7, 8012fc6 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8012f94:	f897 a008 	ldrb.w	sl, [r7, #8]
 8012f98:	4615      	mov	r5, r2
 8012f9a:	f04f 0b0c 	mov.w	fp, #12
 8012f9e:	b2eb      	uxtb	r3, r5
 8012fa0:	459a      	cmp	sl, r3
 8012fa2:	d910      	bls.n	8012fc6 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8012fa4:	687c      	ldr	r4, [r7, #4]
 8012fa6:	464a      	mov	r2, r9
 8012fa8:	4641      	mov	r1, r8
 8012faa:	fb0b 4405 	mla	r4, fp, r5, r4
 8012fae:	3501      	adds	r5, #1
 8012fb0:	1ca0      	adds	r0, r4, #2
 8012fb2:	f7ff fe6a 	bl	8012c8a <_ZNK8touchgfx4Rect9intersectEss>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d0f1      	beq.n	8012f9e <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 8012fba:	6823      	ldr	r3, [r4, #0]
 8012fbc:	6033      	str	r3, [r6, #0]
 8012fbe:	6863      	ldr	r3, [r4, #4]
 8012fc0:	6073      	str	r3, [r6, #4]
 8012fc2:	68a3      	ldr	r3, [r4, #8]
 8012fc4:	60b3      	str	r3, [r6, #8]
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012fcc <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 8012fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd0:	2500      	movs	r5, #0
 8012fd2:	f8d1 70b0 	ldr.w	r7, [r1, #176]	@ 0xb0
 8012fd6:	4606      	mov	r6, r0
 8012fd8:	4690      	mov	r8, r2
 8012fda:	4699      	mov	r9, r3
 8012fdc:	6085      	str	r5, [r0, #8]
 8012fde:	e9c0 5500 	strd	r5, r5, [r0]
 8012fe2:	b307      	cbz	r7, 8013026 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8012fe4:	f897 a010 	ldrb.w	sl, [r7, #16]
 8012fe8:	b2eb      	uxtb	r3, r5
 8012fea:	459a      	cmp	sl, r3
 8012fec:	d91b      	bls.n	8013026 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 8012fee:	68fc      	ldr	r4, [r7, #12]
 8012ff0:	464a      	mov	r2, r9
 8012ff2:	4641      	mov	r1, r8
 8012ff4:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8012ff8:	3501      	adds	r5, #1
 8012ffa:	4620      	mov	r0, r4
 8012ffc:	f7ff fe45 	bl	8012c8a <_ZNK8touchgfx4Rect9intersectEss>
 8013000:	2800      	cmp	r0, #0
 8013002:	d0f1      	beq.n	8012fe8 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 8013004:	4623      	mov	r3, r4
 8013006:	4632      	mov	r2, r6
 8013008:	f104 0508 	add.w	r5, r4, #8
 801300c:	6818      	ldr	r0, [r3, #0]
 801300e:	3308      	adds	r3, #8
 8013010:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013014:	4614      	mov	r4, r2
 8013016:	42ab      	cmp	r3, r5
 8013018:	c403      	stmia	r4!, {r0, r1}
 801301a:	4622      	mov	r2, r4
 801301c:	d1f6      	bne.n	801300c <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 801301e:	6818      	ldr	r0, [r3, #0]
 8013020:	6020      	str	r0, [r4, #0]
 8013022:	889b      	ldrh	r3, [r3, #4]
 8013024:	80a3      	strh	r3, [r4, #4]
 8013026:	4630      	mov	r0, r6
 8013028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801302c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 801302c:	b570      	push	{r4, r5, r6, lr}
 801302e:	f8d0 00b4 	ldr.w	r0, [r0, #180]	@ 0xb4
 8013032:	b160      	cbz	r0, 801304e <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 8013034:	7906      	ldrb	r6, [r0, #4]
 8013036:	2300      	movs	r3, #0
 8013038:	b2da      	uxtb	r2, r3
 801303a:	4296      	cmp	r6, r2
 801303c:	d908      	bls.n	8013050 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 801303e:	009a      	lsls	r2, r3, #2
 8013040:	6804      	ldr	r4, [r0, #0]
 8013042:	3301      	adds	r3, #1
 8013044:	18a5      	adds	r5, r4, r2
 8013046:	5ca2      	ldrb	r2, [r4, r2]
 8013048:	428a      	cmp	r2, r1
 801304a:	d1f5      	bne.n	8013038 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 801304c:	8868      	ldrh	r0, [r5, #2]
 801304e:	bd70      	pop	{r4, r5, r6, pc}
 8013050:	2000      	movs	r0, #0
 8013052:	e7fc      	b.n	801304e <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

08013054 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 8013054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013058:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 801305c:	b08d      	sub	sp, #52	@ 0x34
 801305e:	4605      	mov	r5, r0
 8013060:	460e      	mov	r6, r1
 8013062:	2b00      	cmp	r3, #0
 8013064:	f000 80c4 	beq.w	80131f0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013068:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 801306a:	f006 f99d 	bl	80193a8 <_ZN8touchgfx11FontManager7getFontEt>
 801306e:	2800      	cmp	r0, #0
 8013070:	f000 80be 	beq.w	80131f0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8013074:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8013078:	2400      	movs	r4, #0
 801307a:	9007      	str	r0, [sp, #28]
 801307c:	920a      	str	r2, [sp, #40]	@ 0x28
 801307e:	2201      	movs	r2, #1
 8013080:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8013084:	f88d 2020 	strb.w	r2, [sp, #32]
 8013088:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 801308c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8013090:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013092:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
 8013096:	9209      	str	r2, [sp, #36]	@ 0x24
 8013098:	9402      	str	r4, [sp, #8]
 801309a:	6803      	ldr	r3, [r0, #0]
 801309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801309e:	4798      	blx	r3
 80130a0:	4607      	mov	r7, r0
 80130a2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 80130a6:	fa5f f884 	uxtb.w	r8, r4
 80130aa:	7a1a      	ldrb	r2, [r3, #8]
 80130ac:	4542      	cmp	r2, r8
 80130ae:	f240 809f 	bls.w	80131f0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 80130b2:	220c      	movs	r2, #12
 80130b4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80130b8:	4631      	mov	r1, r6
 80130ba:	fb02 f808 	mul.w	r8, r2, r8
 80130be:	eb09 0a08 	add.w	sl, r9, r8
 80130c2:	f10a 0a02 	add.w	sl, sl, #2
 80130c6:	4650      	mov	r0, sl
 80130c8:	f7ff fe22 	bl	8012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80130cc:	2800      	cmp	r0, #0
 80130ce:	f000 808a 	beq.w	80131e6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 80130d2:	f819 1008 	ldrb.w	r1, [r9, r8]
 80130d6:	4628      	mov	r0, r5
 80130d8:	f7ff ffa8 	bl	801302c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 80130dc:	4681      	mov	r9, r0
 80130de:	2800      	cmp	r0, #0
 80130e0:	f000 8081 	beq.w	80131e6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 80130e4:	f8da 0000 	ldr.w	r0, [sl]
 80130e8:	ab03      	add	r3, sp, #12
 80130ea:	f8da 1004 	ldr.w	r1, [sl, #4]
 80130ee:	c303      	stmia	r3!, {r0, r1}
 80130f0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80130f4:	2102      	movs	r1, #2
 80130f6:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80130fa:	1bd3      	subs	r3, r2, r7
 80130fc:	fb93 f3f1 	sdiv	r3, r3, r1
 8013100:	b29b      	uxth	r3, r3
 8013102:	4498      	add	r8, r3
 8013104:	1ad3      	subs	r3, r2, r3
 8013106:	fa1f f888 	uxth.w	r8, r8
 801310a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801310e:	ab05      	add	r3, sp, #20
 8013110:	f8da 1004 	ldr.w	r1, [sl, #4]
 8013114:	f8ad 800e 	strh.w	r8, [sp, #14]
 8013118:	f8da 0000 	ldr.w	r0, [sl]
 801311c:	c303      	stmia	r3!, {r0, r1}
 801311e:	4631      	mov	r1, r6
 8013120:	a805      	add	r0, sp, #20
 8013122:	f7ff fdf5 	bl	8012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013126:	2800      	cmp	r0, #0
 8013128:	d05f      	beq.n	80131ea <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 801312a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 801312e:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013132:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013136:	4686      	mov	lr, r0
 8013138:	4290      	cmp	r0, r2
 801313a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801313e:	4450      	add	r0, sl
 8013140:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8013144:	bfb8      	it	lt
 8013146:	4696      	movlt	lr, r2
 8013148:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801314c:	4452      	add	r2, sl
 801314e:	b280      	uxth	r0, r0
 8013150:	4299      	cmp	r1, r3
 8013152:	468c      	mov	ip, r1
 8013154:	b292      	uxth	r2, r2
 8013156:	f8ad e014 	strh.w	lr, [sp, #20]
 801315a:	fa0f fb80 	sxth.w	fp, r0
 801315e:	bfb8      	it	lt
 8013160:	469c      	movlt	ip, r3
 8013162:	fa0f fa82 	sxth.w	sl, r2
 8013166:	f8ad c016 	strh.w	ip, [sp, #22]
 801316a:	45d3      	cmp	fp, sl
 801316c:	bfb8      	it	lt
 801316e:	4602      	movlt	r2, r0
 8013170:	eba2 020e 	sub.w	r2, r2, lr
 8013174:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013178:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801317c:	4411      	add	r1, r2
 801317e:	88f2      	ldrh	r2, [r6, #6]
 8013180:	4413      	add	r3, r2
 8013182:	b289      	uxth	r1, r1
 8013184:	b29b      	uxth	r3, r3
 8013186:	b208      	sxth	r0, r1
 8013188:	b21a      	sxth	r2, r3
 801318a:	4290      	cmp	r0, r2
 801318c:	bfb8      	it	lt
 801318e:	460b      	movlt	r3, r1
 8013190:	eba3 030c 	sub.w	r3, r3, ip
 8013194:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013198:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801319c:	4628      	mov	r0, r5
 801319e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80131a2:	f8ad 9008 	strh.w	r9, [sp, #8]
 80131a6:	1a9b      	subs	r3, r3, r2
 80131a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80131ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80131b0:	eba3 0808 	sub.w	r8, r3, r8
 80131b4:	682b      	ldr	r3, [r5, #0]
 80131b6:	f8ad 8016 	strh.w	r8, [sp, #22]
 80131ba:	f10d 080c 	add.w	r8, sp, #12
 80131be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131c0:	4641      	mov	r1, r8
 80131c2:	4798      	blx	r3
 80131c4:	4b0c      	ldr	r3, [pc, #48]	@ (80131f8 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80131cc:	b10a      	cbz	r2, 80131d2 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 80131ce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80131d0:	b900      	cbnz	r0, 80131d4 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 80131d2:	6898      	ldr	r0, [r3, #8]
 80131d4:	ab02      	add	r3, sp, #8
 80131d6:	9301      	str	r3, [sp, #4]
 80131d8:	ab07      	add	r3, sp, #28
 80131da:	9300      	str	r3, [sp, #0]
 80131dc:	ab05      	add	r3, sp, #20
 80131de:	e898 0006 	ldmia.w	r8, {r1, r2}
 80131e2:	f7f1 fdeb 	bl	8004dbc <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80131e6:	3401      	adds	r4, #1
 80131e8:	e75b      	b.n	80130a2 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 80131ea:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80131ee:	e7d3      	b.n	8013198 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 80131f0:	b00d      	add	sp, #52	@ 0x34
 80131f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f6:	bf00      	nop
 80131f8:	24025934 	.word	0x24025934

080131fc <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 80131fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013200:	790d      	ldrb	r5, [r1, #4]
 8013202:	b08b      	sub	sp, #44	@ 0x2c
 8013204:	4604      	mov	r4, r0
 8013206:	2d01      	cmp	r5, #1
 8013208:	d108      	bne.n	801321c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 801320a:	f890 30e4 	ldrb.w	r3, [r0, #228]	@ 0xe4
 801320e:	b12b      	cbz	r3, 801321c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 8013210:	2300      	movs	r3, #0
 8013212:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
 8013216:	b00b      	add	sp, #44	@ 0x2c
 8013218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801321c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8013220:	2700      	movs	r7, #0
 8013222:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8013226:	a806      	add	r0, sp, #24
 8013228:	4642      	mov	r2, r8
 801322a:	4621      	mov	r1, r4
 801322c:	464b      	mov	r3, r9
 801322e:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8013232:	f7ff fecb 	bl	8012fcc <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 8013236:	9e08      	ldr	r6, [sp, #32]
 8013238:	2e00      	cmp	r6, #0
 801323a:	d049      	beq.n	80132d0 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 801323c:	2d00      	cmp	r5, #0
 801323e:	d133      	bne.n	80132a8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 8013240:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 8013244:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8013248:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 801324c:	4630      	mov	r0, r6
 801324e:	f7f1 f913 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8013252:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8013256:	a90a      	add	r1, sp, #40	@ 0x28
 8013258:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 801325c:	4630      	mov	r0, r6
 801325e:	f7ff fb83 	bl	8012968 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013262:	2301      	movs	r3, #1
 8013264:	4622      	mov	r2, r4
 8013266:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 801326a:	ab01      	add	r3, sp, #4
 801326c:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8013270:	6851      	ldr	r1, [r2, #4]
 8013272:	c303      	stmia	r3!, {r0, r1}
 8013274:	6823      	ldr	r3, [r4, #0]
 8013276:	a901      	add	r1, sp, #4
 8013278:	4620      	mov	r0, r4
 801327a:	691b      	ldr	r3, [r3, #16]
 801327c:	4798      	blx	r3
 801327e:	1e6b      	subs	r3, r5, #1
 8013280:	2b01      	cmp	r3, #1
 8013282:	d8c8      	bhi.n	8013216 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8013284:	4622      	mov	r2, r4
 8013286:	ab01      	add	r3, sp, #4
 8013288:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 801328c:	6851      	ldr	r1, [r2, #4]
 801328e:	c303      	stmia	r3!, {r0, r1}
 8013290:	2300      	movs	r3, #0
 8013292:	a901      	add	r1, sp, #4
 8013294:	4620      	mov	r0, r4
 8013296:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	691b      	ldr	r3, [r3, #16]
 801329e:	4798      	blx	r3
 80132a0:	2d02      	cmp	r5, #2
 80132a2:	d1b8      	bne.n	8013216 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 80132a4:	2301      	movs	r3, #1
 80132a6:	e7b4      	b.n	8013212 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 80132a8:	2d01      	cmp	r5, #1
 80132aa:	d1e8      	bne.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80132ac:	6833      	ldr	r3, [r6, #0]
 80132ae:	4630      	mov	r0, r6
 80132b0:	68db      	ldr	r3, [r3, #12]
 80132b2:	4798      	blx	r3
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d0e5      	beq.n	8013284 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 80132b8:	6833      	ldr	r3, [r6, #0]
 80132ba:	4630      	mov	r0, r6
 80132bc:	689b      	ldr	r3, [r3, #8]
 80132be:	4798      	blx	r3
 80132c0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d0de      	beq.n	8013284 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 80132c6:	6803      	ldr	r3, [r0, #0]
 80132c8:	4639      	mov	r1, r7
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	4798      	blx	r3
 80132ce:	e7d6      	b.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80132d0:	4621      	mov	r1, r4
 80132d2:	464b      	mov	r3, r9
 80132d4:	4642      	mov	r2, r8
 80132d6:	a803      	add	r0, sp, #12
 80132d8:	f7ff fe4e 	bl	8012f78 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 80132dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80132e0:	b985      	cbnz	r5, 8013304 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 80132e2:	2900      	cmp	r1, #0
 80132e4:	d0cb      	beq.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80132e6:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 80132ea:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80132ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80132f2:	4630      	mov	r0, r6
 80132f4:	f7f1 f8c0 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 80132f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80132fc:	a90a      	add	r1, sp, #40	@ 0x28
 80132fe:	f821 3d28 	strh.w	r3, [r1, #-40]!
 8013302:	e7ab      	b.n	801325c <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 8013304:	2d01      	cmp	r5, #1
 8013306:	d1ba      	bne.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013308:	2900      	cmp	r1, #0
 801330a:	d0b8      	beq.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801330c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801330e:	2b00      	cmp	r3, #0
 8013310:	d0b5      	beq.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013312:	4620      	mov	r0, r4
 8013314:	f7ff fe8a 	bl	801302c <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 8013318:	4607      	mov	r7, r0
 801331a:	2800      	cmp	r0, #0
 801331c:	d0af      	beq.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 801331e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013320:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013322:	3b01      	subs	r3, #1
 8013324:	429a      	cmp	r2, r3
 8013326:	daaa      	bge.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8013328:	f104 0864 	add.w	r8, r4, #100	@ 0x64
 801332c:	4640      	mov	r0, r8
 801332e:	f7f0 fa66 	bl	80037fe <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8013332:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013334:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013336:	4640      	mov	r0, r8
 8013338:	1c59      	adds	r1, r3, #1
 801333a:	86e1      	strh	r1, [r4, #54]	@ 0x36
 801333c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8013340:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013342:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013344:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 8013348:	f7f0 fa59 	bl	80037fe <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801334c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801334e:	2800      	cmp	r0, #0
 8013350:	d1b9      	bne.n	80132c6 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 8013352:	e794      	b.n	801327e <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

08013354 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 8013354:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8013356:	3064      	adds	r0, #100	@ 0x64
 8013358:	f003 bd07 	b.w	8016d6a <_ZNK8touchgfx8Drawable10invalidateEv>

0801335c <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 801335c:	6803      	ldr	r3, [r0, #0]
 801335e:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
 8013362:	695b      	ldr	r3, [r3, #20]
 8013364:	4718      	bx	r3

08013366 <_ZN8touchgfx7OutlineD1Ev>:
 8013366:	4770      	bx	lr

08013368 <_ZN8touchgfx7OutlineD0Ev>:
 8013368:	b510      	push	{r4, lr}
 801336a:	4604      	mov	r4, r0
 801336c:	2130      	movs	r1, #48	@ 0x30
 801336e:	f010 ff69 	bl	8024244 <_ZdlPvj>
 8013372:	4620      	mov	r0, r4
 8013374:	bd10      	pop	{r4, pc}

08013376 <_ZN8touchgfx7Outline5resetEv>:
 8013376:	b510      	push	{r4, lr}
 8013378:	4604      	mov	r4, r0
 801337a:	f000 fe71 	bl	8014060 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801337e:	60e0      	str	r0, [r4, #12]
 8013380:	f000 fe74 	bl	801406c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013384:	68e3      	ldr	r3, [r4, #12]
 8013386:	08c0      	lsrs	r0, r0, #3
 8013388:	2200      	movs	r2, #0
 801338a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801338e:	6123      	str	r3, [r4, #16]
 8013390:	3801      	subs	r0, #1
 8013392:	60a2      	str	r2, [r4, #8]
 8013394:	6060      	str	r0, [r4, #4]
 8013396:	8019      	strh	r1, [r3, #0]
 8013398:	8059      	strh	r1, [r3, #2]
 801339a:	809a      	strh	r2, [r3, #4]
 801339c:	80da      	strh	r2, [r3, #6]
 801339e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80133a0:	f023 0301 	bic.w	r3, r3, #1
 80133a4:	f043 0302 	orr.w	r3, r3, #2
 80133a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80133aa:	bd10      	pop	{r4, pc}

080133ac <_ZN8touchgfx7OutlineC1Ev>:
 80133ac:	4b0a      	ldr	r3, [pc, #40]	@ (80133d8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80133ae:	b510      	push	{r4, lr}
 80133b0:	6003      	str	r3, [r0, #0]
 80133b2:	2300      	movs	r3, #0
 80133b4:	4604      	mov	r4, r0
 80133b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80133b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80133bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133c0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80133c4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80133c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80133cc:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80133d0:	f7ff ffd1 	bl	8013376 <_ZN8touchgfx7Outline5resetEv>
 80133d4:	4620      	mov	r0, r4
 80133d6:	bd10      	pop	{r4, pc}
 80133d8:	080290f8 	.word	0x080290f8

080133dc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80133dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e0:	b093      	sub	sp, #76	@ 0x4c
 80133e2:	1156      	asrs	r6, r2, #5
 80133e4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80133e6:	9305      	str	r3, [sp, #20]
 80133e8:	1153      	asrs	r3, r2, #5
 80133ea:	f004 051f 	and.w	r5, r4, #31
 80133ee:	9303      	str	r3, [sp, #12]
 80133f0:	1163      	asrs	r3, r4, #5
 80133f2:	9504      	str	r5, [sp, #16]
 80133f4:	1165      	asrs	r5, r4, #5
 80133f6:	9306      	str	r3, [sp, #24]
 80133f8:	f002 031f 	and.w	r3, r2, #31
 80133fc:	42ae      	cmp	r6, r5
 80133fe:	f040 80f4 	bne.w	80135ea <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8013402:	9c04      	ldr	r4, [sp, #16]
 8013404:	9a05      	ldr	r2, [sp, #20]
 8013406:	42a3      	cmp	r3, r4
 8013408:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801340c:	6902      	ldr	r2, [r0, #16]
 801340e:	d125      	bne.n	801345c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8013410:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013414:	459e      	cmp	lr, r3
 8013416:	d103      	bne.n	8013420 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8013418:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801341c:	429e      	cmp	r6, r3
 801341e:	d035      	beq.n	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013420:	88d1      	ldrh	r1, [r2, #6]
 8013422:	8893      	ldrh	r3, [r2, #4]
 8013424:	430b      	orrs	r3, r1
 8013426:	d010      	beq.n	801344a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013428:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801342c:	2b00      	cmp	r3, #0
 801342e:	db0c      	blt.n	801344a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013430:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013432:	428b      	cmp	r3, r1
 8013434:	da09      	bge.n	801344a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013436:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801343a:	428b      	cmp	r3, r1
 801343c:	f103 0301 	add.w	r3, r3, #1
 8013440:	bf38      	it	cc
 8013442:	3208      	addcc	r2, #8
 8013444:	6083      	str	r3, [r0, #8]
 8013446:	bf38      	it	cc
 8013448:	6102      	strcc	r2, [r0, #16]
 801344a:	6903      	ldr	r3, [r0, #16]
 801344c:	9a03      	ldr	r2, [sp, #12]
 801344e:	f8a3 e000 	strh.w	lr, [r3]
 8013452:	805a      	strh	r2, [r3, #2]
 8013454:	2200      	movs	r2, #0
 8013456:	809a      	strh	r2, [r3, #4]
 8013458:	80da      	strh	r2, [r3, #6]
 801345a:	e017      	b.n	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801345c:	9c05      	ldr	r4, [sp, #20]
 801345e:	114e      	asrs	r6, r1, #5
 8013460:	f001 0c1f 	and.w	ip, r1, #31
 8013464:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8013468:	f004 041f 	and.w	r4, r4, #31
 801346c:	4576      	cmp	r6, lr
 801346e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8013472:	9402      	str	r4, [sp, #8]
 8013474:	9c04      	ldr	r4, [sp, #16]
 8013476:	eba4 0403 	sub.w	r4, r4, r3
 801347a:	d10a      	bne.n	8013492 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801347c:	9b02      	ldr	r3, [sp, #8]
 801347e:	44a0      	add	r8, r4
 8013480:	449c      	add	ip, r3
 8013482:	f8a2 8004 	strh.w	r8, [r2, #4]
 8013486:	fb04 a40c 	mla	r4, r4, ip, sl
 801348a:	80d4      	strh	r4, [r2, #6]
 801348c:	b013      	add	sp, #76	@ 0x4c
 801348e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013492:	9d05      	ldr	r5, [sp, #20]
 8013494:	1a69      	subs	r1, r5, r1
 8013496:	bf51      	iteee	pl
 8013498:	f1cc 0520 	rsbpl	r5, ip, #32
 801349c:	fb04 f40c 	mulmi.w	r4, r4, ip
 80134a0:	4249      	negmi	r1, r1
 80134a2:	2500      	movmi	r5, #0
 80134a4:	bf5d      	ittte	pl
 80134a6:	436c      	mulpl	r4, r5
 80134a8:	2520      	movpl	r5, #32
 80134aa:	f04f 0901 	movpl.w	r9, #1
 80134ae:	f04f 39ff 	movmi.w	r9, #4294967295
 80134b2:	9501      	str	r5, [sp, #4]
 80134b4:	9f01      	ldr	r7, [sp, #4]
 80134b6:	444e      	add	r6, r9
 80134b8:	fb94 f5f1 	sdiv	r5, r4, r1
 80134bc:	fb01 4415 	mls	r4, r1, r5, r4
 80134c0:	44bc      	add	ip, r7
 80134c2:	2c00      	cmp	r4, #0
 80134c4:	bfbc      	itt	lt
 80134c6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80134ca:	1864      	addlt	r4, r4, r1
 80134cc:	44a8      	add	r8, r5
 80134ce:	fb05 ac0c 	mla	ip, r5, ip, sl
 80134d2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80134d6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80134da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80134de:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80134e2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80134e6:	ea58 0202 	orrs.w	r2, r8, r2
 80134ea:	d011      	beq.n	8013510 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80134ec:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80134f0:	f1b8 0f00 	cmp.w	r8, #0
 80134f4:	db0c      	blt.n	8013510 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80134f6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80134f8:	4590      	cmp	r8, r2
 80134fa:	da09      	bge.n	8013510 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80134fc:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8013500:	4590      	cmp	r8, r2
 8013502:	bf3c      	itt	cc
 8013504:	f10c 0208 	addcc.w	r2, ip, #8
 8013508:	6102      	strcc	r2, [r0, #16]
 801350a:	f108 0201 	add.w	r2, r8, #1
 801350e:	6082      	str	r2, [r0, #8]
 8013510:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013514:	2700      	movs	r7, #0
 8013516:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801351a:	45b6      	cmp	lr, r6
 801351c:	f8ac 6000 	strh.w	r6, [ip]
 8013520:	442b      	add	r3, r5
 8013522:	f8ac 2002 	strh.w	r2, [ip, #2]
 8013526:	f8ac 7004 	strh.w	r7, [ip, #4]
 801352a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801352e:	d04b      	beq.n	80135c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8013530:	9f04      	ldr	r7, [sp, #16]
 8013532:	1a64      	subs	r4, r4, r1
 8013534:	f04f 0a00 	mov.w	sl, #0
 8013538:	1aff      	subs	r7, r7, r3
 801353a:	443d      	add	r5, r7
 801353c:	016d      	lsls	r5, r5, #5
 801353e:	fb95 f8f1 	sdiv	r8, r5, r1
 8013542:	fb01 5518 	mls	r5, r1, r8, r5
 8013546:	2d00      	cmp	r5, #0
 8013548:	bfbc      	itt	lt
 801354a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801354e:	186d      	addlt	r5, r5, r1
 8013550:	f108 0701 	add.w	r7, r8, #1
 8013554:	9703      	str	r7, [sp, #12]
 8013556:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801355a:	1964      	adds	r4, r4, r5
 801355c:	444e      	add	r6, r9
 801355e:	bf54      	ite	pl
 8013560:	9f03      	ldrpl	r7, [sp, #12]
 8013562:	4647      	movmi	r7, r8
 8013564:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013568:	bf58      	it	pl
 801356a:	1a64      	subpl	r4, r4, r1
 801356c:	443b      	add	r3, r7
 801356e:	44bb      	add	fp, r7
 8013570:	f8ac b004 	strh.w	fp, [ip, #4]
 8013574:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013578:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801357c:	f8ac b006 	strh.w	fp, [ip, #6]
 8013580:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013584:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013588:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801358c:	ea5b 0707 	orrs.w	r7, fp, r7
 8013590:	d011      	beq.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8013592:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8013596:	f1bb 0f00 	cmp.w	fp, #0
 801359a:	db0c      	blt.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801359c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801359e:	45bb      	cmp	fp, r7
 80135a0:	da09      	bge.n	80135b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80135a2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80135a6:	45bb      	cmp	fp, r7
 80135a8:	bf3c      	itt	cc
 80135aa:	f10c 0708 	addcc.w	r7, ip, #8
 80135ae:	6107      	strcc	r7, [r0, #16]
 80135b0:	f10b 0701 	add.w	r7, fp, #1
 80135b4:	6087      	str	r7, [r0, #8]
 80135b6:	6907      	ldr	r7, [r0, #16]
 80135b8:	45b6      	cmp	lr, r6
 80135ba:	803e      	strh	r6, [r7, #0]
 80135bc:	807a      	strh	r2, [r7, #2]
 80135be:	f8a7 a004 	strh.w	sl, [r7, #4]
 80135c2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80135c6:	d1c6      	bne.n	8013556 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80135c8:	9a04      	ldr	r2, [sp, #16]
 80135ca:	1ad3      	subs	r3, r2, r3
 80135cc:	6902      	ldr	r2, [r0, #16]
 80135ce:	8891      	ldrh	r1, [r2, #4]
 80135d0:	88d6      	ldrh	r6, [r2, #6]
 80135d2:	4419      	add	r1, r3
 80135d4:	8091      	strh	r1, [r2, #4]
 80135d6:	9902      	ldr	r1, [sp, #8]
 80135d8:	f101 0c20 	add.w	ip, r1, #32
 80135dc:	9901      	ldr	r1, [sp, #4]
 80135de:	ebac 0c01 	sub.w	ip, ip, r1
 80135e2:	fb03 630c 	mla	r3, r3, ip, r6
 80135e6:	80d3      	strh	r3, [r2, #6]
 80135e8:	e750      	b.n	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80135ea:	9d05      	ldr	r5, [sp, #20]
 80135ec:	1aa2      	subs	r2, r4, r2
 80135ee:	eba5 0501 	sub.w	r5, r5, r1
 80135f2:	9202      	str	r2, [sp, #8]
 80135f4:	9508      	str	r5, [sp, #32]
 80135f6:	f140 8128 	bpl.w	801384a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80135fa:	9a03      	ldr	r2, [sp, #12]
 80135fc:	2a00      	cmp	r2, #0
 80135fe:	f6ff af45 	blt.w	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013602:	9a02      	ldr	r2, [sp, #8]
 8013604:	f04f 34ff 	mov.w	r4, #4294967295
 8013608:	4252      	negs	r2, r2
 801360a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801360c:	2400      	movs	r4, #0
 801360e:	9202      	str	r2, [sp, #8]
 8013610:	9a06      	ldr	r2, [sp, #24]
 8013612:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8013616:	9206      	str	r2, [sp, #24]
 8013618:	462a      	mov	r2, r5
 801361a:	435a      	muls	r2, r3
 801361c:	9401      	str	r4, [sp, #4]
 801361e:	9c02      	ldr	r4, [sp, #8]
 8013620:	9d02      	ldr	r5, [sp, #8]
 8013622:	fb92 f4f4 	sdiv	r4, r2, r4
 8013626:	fb05 2214 	mls	r2, r5, r4, r2
 801362a:	2a00      	cmp	r2, #0
 801362c:	9207      	str	r2, [sp, #28]
 801362e:	bfbc      	itt	lt
 8013630:	1952      	addlt	r2, r2, r5
 8013632:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8013636:	6905      	ldr	r5, [r0, #16]
 8013638:	bfb8      	it	lt
 801363a:	9207      	strlt	r2, [sp, #28]
 801363c:	eb04 0901 	add.w	r9, r4, r1
 8013640:	9a01      	ldr	r2, [sp, #4]
 8013642:	ea4f 1669 	mov.w	r6, r9, asr #5
 8013646:	429a      	cmp	r2, r3
 8013648:	f040 8111 	bne.w	801386e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801364c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013650:	429e      	cmp	r6, r3
 8013652:	d104      	bne.n	801365e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8013654:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013658:	9a03      	ldr	r2, [sp, #12]
 801365a:	429a      	cmp	r2, r3
 801365c:	d01b      	beq.n	8013696 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801365e:	88ea      	ldrh	r2, [r5, #6]
 8013660:	88ab      	ldrh	r3, [r5, #4]
 8013662:	4313      	orrs	r3, r2
 8013664:	d010      	beq.n	8013688 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013666:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801366a:	2a00      	cmp	r2, #0
 801366c:	db0c      	blt.n	8013688 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801366e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013670:	429a      	cmp	r2, r3
 8013672:	da09      	bge.n	8013688 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8013674:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013678:	429a      	cmp	r2, r3
 801367a:	f102 0201 	add.w	r2, r2, #1
 801367e:	bf38      	it	cc
 8013680:	3508      	addcc	r5, #8
 8013682:	6082      	str	r2, [r0, #8]
 8013684:	bf38      	it	cc
 8013686:	6105      	strcc	r5, [r0, #16]
 8013688:	6903      	ldr	r3, [r0, #16]
 801368a:	9a03      	ldr	r2, [sp, #12]
 801368c:	801e      	strh	r6, [r3, #0]
 801368e:	805a      	strh	r2, [r3, #2]
 8013690:	2200      	movs	r2, #0
 8013692:	809a      	strh	r2, [r3, #4]
 8013694:	80da      	strh	r2, [r3, #6]
 8013696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013698:	9a03      	ldr	r2, [sp, #12]
 801369a:	6901      	ldr	r1, [r0, #16]
 801369c:	441a      	add	r2, r3
 801369e:	f9b1 3000 	ldrsh.w	r3, [r1]
 80136a2:	42b3      	cmp	r3, r6
 80136a4:	d103      	bne.n	80136ae <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80136a6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d01a      	beq.n	80136e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80136ae:	88cc      	ldrh	r4, [r1, #6]
 80136b0:	888b      	ldrh	r3, [r1, #4]
 80136b2:	4323      	orrs	r3, r4
 80136b4:	d010      	beq.n	80136d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80136b6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80136ba:	2c00      	cmp	r4, #0
 80136bc:	db0c      	blt.n	80136d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80136be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80136c0:	429c      	cmp	r4, r3
 80136c2:	da09      	bge.n	80136d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80136c4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80136c8:	429c      	cmp	r4, r3
 80136ca:	f104 0401 	add.w	r4, r4, #1
 80136ce:	bf38      	it	cc
 80136d0:	3108      	addcc	r1, #8
 80136d2:	6084      	str	r4, [r0, #8]
 80136d4:	bf38      	it	cc
 80136d6:	6101      	strcc	r1, [r0, #16]
 80136d8:	6903      	ldr	r3, [r0, #16]
 80136da:	2100      	movs	r1, #0
 80136dc:	801e      	strh	r6, [r3, #0]
 80136de:	805a      	strh	r2, [r3, #2]
 80136e0:	8099      	strh	r1, [r3, #4]
 80136e2:	80d9      	strh	r1, [r3, #6]
 80136e4:	9b06      	ldr	r3, [sp, #24]
 80136e6:	4293      	cmp	r3, r2
 80136e8:	f000 8082 	beq.w	80137f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80136ec:	9b08      	ldr	r3, [sp, #32]
 80136ee:	9902      	ldr	r1, [sp, #8]
 80136f0:	015b      	lsls	r3, r3, #5
 80136f2:	9c02      	ldr	r4, [sp, #8]
 80136f4:	fb93 f1f1 	sdiv	r1, r3, r1
 80136f8:	fb04 3311 	mls	r3, r4, r1, r3
 80136fc:	9103      	str	r1, [sp, #12]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	9308      	str	r3, [sp, #32]
 8013702:	da04      	bge.n	801370e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8013704:	1e4b      	subs	r3, r1, #1
 8013706:	9303      	str	r3, [sp, #12]
 8013708:	9b08      	ldr	r3, [sp, #32]
 801370a:	4423      	add	r3, r4
 801370c:	9308      	str	r3, [sp, #32]
 801370e:	9b07      	ldr	r3, [sp, #28]
 8013710:	464f      	mov	r7, r9
 8013712:	9902      	ldr	r1, [sp, #8]
 8013714:	2600      	movs	r6, #0
 8013716:	1a5b      	subs	r3, r3, r1
 8013718:	9307      	str	r3, [sp, #28]
 801371a:	9b01      	ldr	r3, [sp, #4]
 801371c:	f1c3 0320 	rsb	r3, r3, #32
 8013720:	930e      	str	r3, [sp, #56]	@ 0x38
 8013722:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013724:	9b01      	ldr	r3, [sp, #4]
 8013726:	1a5b      	subs	r3, r3, r1
 8013728:	930a      	str	r3, [sp, #40]	@ 0x28
 801372a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801372e:	185b      	adds	r3, r3, r1
 8013730:	bf58      	it	pl
 8013732:	9902      	ldrpl	r1, [sp, #8]
 8013734:	9307      	str	r3, [sp, #28]
 8013736:	bf57      	itett	pl
 8013738:	1a5b      	subpl	r3, r3, r1
 801373a:	9903      	ldrmi	r1, [sp, #12]
 801373c:	9307      	strpl	r3, [sp, #28]
 801373e:	9b03      	ldrpl	r3, [sp, #12]
 8013740:	bf58      	it	pl
 8013742:	1c59      	addpl	r1, r3, #1
 8013744:	2a00      	cmp	r2, #0
 8013746:	4489      	add	r9, r1
 8013748:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801374c:	db2e      	blt.n	80137ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801374e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013750:	4293      	cmp	r3, r2
 8013752:	dd2b      	ble.n	80137ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013754:	9c01      	ldr	r4, [sp, #4]
 8013756:	6905      	ldr	r5, [r0, #16]
 8013758:	46a0      	mov	r8, r4
 801375a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801375c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8013760:	45a0      	cmp	r8, r4
 8013762:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8013766:	f040 814c 	bne.w	8013a02 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801376a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801376e:	4551      	cmp	r1, sl
 8013770:	d103      	bne.n	801377a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8013772:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013776:	4291      	cmp	r1, r2
 8013778:	d018      	beq.n	80137ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801377a:	ea5c 010e 	orrs.w	r1, ip, lr
 801377e:	d00f      	beq.n	80137a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013780:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013784:	2900      	cmp	r1, #0
 8013786:	db0b      	blt.n	80137a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8013788:	428b      	cmp	r3, r1
 801378a:	dd09      	ble.n	80137a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801378c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8013790:	4299      	cmp	r1, r3
 8013792:	f101 0101 	add.w	r1, r1, #1
 8013796:	bf38      	it	cc
 8013798:	3508      	addcc	r5, #8
 801379a:	6081      	str	r1, [r0, #8]
 801379c:	bf38      	it	cc
 801379e:	6105      	strcc	r5, [r0, #16]
 80137a0:	6903      	ldr	r3, [r0, #16]
 80137a2:	f8a3 a000 	strh.w	sl, [r3]
 80137a6:	805a      	strh	r2, [r3, #2]
 80137a8:	809e      	strh	r6, [r3, #4]
 80137aa:	80de      	strh	r6, [r3, #6]
 80137ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137ae:	6901      	ldr	r1, [r0, #16]
 80137b0:	441a      	add	r2, r3
 80137b2:	88cc      	ldrh	r4, [r1, #6]
 80137b4:	888b      	ldrh	r3, [r1, #4]
 80137b6:	4323      	orrs	r3, r4
 80137b8:	d010      	beq.n	80137dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80137ba:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80137be:	2c00      	cmp	r4, #0
 80137c0:	db0c      	blt.n	80137dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80137c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80137c4:	429c      	cmp	r4, r3
 80137c6:	da09      	bge.n	80137dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80137c8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80137cc:	429c      	cmp	r4, r3
 80137ce:	f104 0401 	add.w	r4, r4, #1
 80137d2:	bf38      	it	cc
 80137d4:	3108      	addcc	r1, #8
 80137d6:	6084      	str	r4, [r0, #8]
 80137d8:	bf38      	it	cc
 80137da:	6101      	strcc	r1, [r0, #16]
 80137dc:	6903      	ldr	r3, [r0, #16]
 80137de:	464f      	mov	r7, r9
 80137e0:	f8a3 a000 	strh.w	sl, [r3]
 80137e4:	805a      	strh	r2, [r3, #2]
 80137e6:	809e      	strh	r6, [r3, #4]
 80137e8:	80de      	strh	r6, [r3, #6]
 80137ea:	9b06      	ldr	r3, [sp, #24]
 80137ec:	4293      	cmp	r3, r2
 80137ee:	d19c      	bne.n	801372a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80137f0:	9b01      	ldr	r3, [sp, #4]
 80137f2:	6907      	ldr	r7, [r0, #16]
 80137f4:	f1c3 0620 	rsb	r6, r3, #32
 80137f8:	9b05      	ldr	r3, [sp, #20]
 80137fa:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80137fe:	9b04      	ldr	r3, [sp, #16]
 8013800:	429e      	cmp	r6, r3
 8013802:	f040 81c7 	bne.w	8013b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8013806:	f9b7 3000 	ldrsh.w	r3, [r7]
 801380a:	459e      	cmp	lr, r3
 801380c:	d104      	bne.n	8013818 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801380e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013812:	429a      	cmp	r2, r3
 8013814:	f43f ae3a 	beq.w	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013818:	88f9      	ldrh	r1, [r7, #6]
 801381a:	88bb      	ldrh	r3, [r7, #4]
 801381c:	430b      	orrs	r3, r1
 801381e:	d010      	beq.n	8013842 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013824:	2b00      	cmp	r3, #0
 8013826:	db0c      	blt.n	8013842 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8013828:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801382a:	428b      	cmp	r3, r1
 801382c:	da09      	bge.n	8013842 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801382e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013832:	428b      	cmp	r3, r1
 8013834:	f103 0301 	add.w	r3, r3, #1
 8013838:	bf38      	it	cc
 801383a:	3708      	addcc	r7, #8
 801383c:	6083      	str	r3, [r0, #8]
 801383e:	bf38      	it	cc
 8013840:	6107      	strcc	r7, [r0, #16]
 8013842:	6903      	ldr	r3, [r0, #16]
 8013844:	f8a3 e000 	strh.w	lr, [r3]
 8013848:	e603      	b.n	8013452 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801384a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801384c:	9c03      	ldr	r4, [sp, #12]
 801384e:	42a2      	cmp	r2, r4
 8013850:	f6ff ae1c 	blt.w	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013854:	9c06      	ldr	r4, [sp, #24]
 8013856:	42a2      	cmp	r2, r4
 8013858:	9c08      	ldr	r4, [sp, #32]
 801385a:	bfbc      	itt	lt
 801385c:	3201      	addlt	r2, #1
 801385e:	9206      	strlt	r2, [sp, #24]
 8013860:	f1c3 0220 	rsb	r2, r3, #32
 8013864:	4362      	muls	r2, r4
 8013866:	2401      	movs	r4, #1
 8013868:	940b      	str	r4, [sp, #44]	@ 0x2c
 801386a:	2420      	movs	r4, #32
 801386c:	e6d6      	b.n	801361c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801386e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8013872:	f009 021f 	and.w	r2, r9, #31
 8013876:	f001 011f 	and.w	r1, r1, #31
 801387a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801387e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013880:	45b0      	cmp	r8, r6
 8013882:	9a01      	ldr	r2, [sp, #4]
 8013884:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8013888:	eba2 0203 	sub.w	r2, r2, r3
 801388c:	d108      	bne.n	80138a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801388e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013890:	4496      	add	lr, r2
 8013892:	4419      	add	r1, r3
 8013894:	f8a5 e004 	strh.w	lr, [r5, #4]
 8013898:	fb02 a101 	mla	r1, r2, r1, sl
 801389c:	80e9      	strh	r1, [r5, #6]
 801389e:	e6fa      	b.n	8013696 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80138a0:	2c00      	cmp	r4, #0
 80138a2:	f2c0 80a7 	blt.w	80139f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80138a6:	2701      	movs	r7, #1
 80138a8:	f1c1 0c20 	rsb	ip, r1, #32
 80138ac:	970a      	str	r7, [sp, #40]	@ 0x28
 80138ae:	2720      	movs	r7, #32
 80138b0:	fb02 f20c 	mul.w	r2, r2, ip
 80138b4:	9709      	str	r7, [sp, #36]	@ 0x24
 80138b6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80138b8:	fb92 fcf4 	sdiv	ip, r2, r4
 80138bc:	fb04 221c 	mls	r2, r4, ip, r2
 80138c0:	4439      	add	r1, r7
 80138c2:	2a00      	cmp	r2, #0
 80138c4:	bfbc      	itt	lt
 80138c6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80138ca:	1912      	addlt	r2, r2, r4
 80138cc:	fb0c a101 	mla	r1, ip, r1, sl
 80138d0:	44e6      	add	lr, ip
 80138d2:	80e9      	strh	r1, [r5, #6]
 80138d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80138d6:	f8a5 e004 	strh.w	lr, [r5, #4]
 80138da:	eb08 0501 	add.w	r5, r8, r1
 80138de:	6901      	ldr	r1, [r0, #16]
 80138e0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80138e4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80138e8:	ea58 070e 	orrs.w	r7, r8, lr
 80138ec:	d010      	beq.n	8013910 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80138ee:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80138f2:	f1be 0f00 	cmp.w	lr, #0
 80138f6:	db0b      	blt.n	8013910 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80138f8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80138fa:	45be      	cmp	lr, r7
 80138fc:	da08      	bge.n	8013910 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80138fe:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8013902:	45be      	cmp	lr, r7
 8013904:	bf3c      	itt	cc
 8013906:	3108      	addcc	r1, #8
 8013908:	6101      	strcc	r1, [r0, #16]
 801390a:	f10e 0101 	add.w	r1, lr, #1
 801390e:	6081      	str	r1, [r0, #8]
 8013910:	6901      	ldr	r1, [r0, #16]
 8013912:	f04f 0e00 	mov.w	lr, #0
 8013916:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801391a:	42ae      	cmp	r6, r5
 801391c:	800d      	strh	r5, [r1, #0]
 801391e:	4463      	add	r3, ip
 8013920:	f8a1 8002 	strh.w	r8, [r1, #2]
 8013924:	f8a1 e004 	strh.w	lr, [r1, #4]
 8013928:	f8a1 e006 	strh.w	lr, [r1, #6]
 801392c:	d053      	beq.n	80139d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801392e:	9901      	ldr	r1, [sp, #4]
 8013930:	1b12      	subs	r2, r2, r4
 8013932:	1ac9      	subs	r1, r1, r3
 8013934:	4461      	add	r1, ip
 8013936:	0149      	lsls	r1, r1, #5
 8013938:	fb91 fef4 	sdiv	lr, r1, r4
 801393c:	fb04 111e 	mls	r1, r4, lr, r1
 8013940:	2900      	cmp	r1, #0
 8013942:	bfbc      	itt	lt
 8013944:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8013948:	1909      	addlt	r1, r1, r4
 801394a:	f10e 0701 	add.w	r7, lr, #1
 801394e:	970d      	str	r7, [sp, #52]	@ 0x34
 8013950:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8013954:	1852      	adds	r2, r2, r1
 8013956:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8013958:	bf54      	ite	pl
 801395a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801395e:	46f4      	movmi	ip, lr
 8013960:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8013964:	bf58      	it	pl
 8013966:	1b12      	subpl	r2, r2, r4
 8013968:	4463      	add	r3, ip
 801396a:	443d      	add	r5, r7
 801396c:	44e3      	add	fp, ip
 801396e:	f8aa b004 	strh.w	fp, [sl, #4]
 8013972:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8013976:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801397a:	f8aa b006 	strh.w	fp, [sl, #6]
 801397e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013982:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013986:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801398a:	ea5b 070a 	orrs.w	r7, fp, sl
 801398e:	d014      	beq.n	80139ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8013990:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8013994:	f1ba 0f00 	cmp.w	sl, #0
 8013998:	db0f      	blt.n	80139ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801399a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801399c:	45ba      	cmp	sl, r7
 801399e:	da0c      	bge.n	80139ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80139a0:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80139a4:	45ba      	cmp	sl, r7
 80139a6:	f10a 0a01 	add.w	sl, sl, #1
 80139aa:	bf38      	it	cc
 80139ac:	f10c 0c08 	addcc.w	ip, ip, #8
 80139b0:	f8c0 a008 	str.w	sl, [r0, #8]
 80139b4:	bf38      	it	cc
 80139b6:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80139ba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80139be:	f04f 0700 	mov.w	r7, #0
 80139c2:	42ae      	cmp	r6, r5
 80139c4:	f8ac 5000 	strh.w	r5, [ip]
 80139c8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80139cc:	f8ac 7004 	strh.w	r7, [ip, #4]
 80139d0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80139d4:	d1bc      	bne.n	8013950 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80139d6:	6904      	ldr	r4, [r0, #16]
 80139d8:	9a01      	ldr	r2, [sp, #4]
 80139da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80139dc:	1ad3      	subs	r3, r2, r3
 80139de:	88a2      	ldrh	r2, [r4, #4]
 80139e0:	3120      	adds	r1, #32
 80139e2:	441a      	add	r2, r3
 80139e4:	80a2      	strh	r2, [r4, #4]
 80139e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80139e8:	1a89      	subs	r1, r1, r2
 80139ea:	88e2      	ldrh	r2, [r4, #6]
 80139ec:	fb03 2301 	mla	r3, r3, r1, r2
 80139f0:	80e3      	strh	r3, [r4, #6]
 80139f2:	e650      	b.n	8013696 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80139f4:	f04f 37ff 	mov.w	r7, #4294967295
 80139f8:	434a      	muls	r2, r1
 80139fa:	4264      	negs	r4, r4
 80139fc:	970a      	str	r7, [sp, #40]	@ 0x28
 80139fe:	2700      	movs	r7, #0
 8013a00:	e758      	b.n	80138b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8013a02:	ea4f 1867 	mov.w	r8, r7, asr #5
 8013a06:	f009 031f 	and.w	r3, r9, #31
 8013a0a:	f007 071f 	and.w	r7, r7, #31
 8013a0e:	fa1f fc8c 	uxth.w	ip, ip
 8013a12:	45d0      	cmp	r8, sl
 8013a14:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013a16:	fa1f fe8e 	uxth.w	lr, lr
 8013a1a:	d10a      	bne.n	8013a32 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8013a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a1e:	449c      	add	ip, r3
 8013a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a22:	441f      	add	r7, r3
 8013a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a26:	f8a5 c004 	strh.w	ip, [r5, #4]
 8013a2a:	fb03 e707 	mla	r7, r3, r7, lr
 8013a2e:	80ef      	strh	r7, [r5, #6]
 8013a30:	e6bc      	b.n	80137ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013a32:	2900      	cmp	r1, #0
 8013a34:	f2c0 80a6 	blt.w	8013b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8013a38:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013a3a:	f1c7 0320 	rsb	r3, r7, #32
 8013a3e:	4363      	muls	r3, r4
 8013a40:	2401      	movs	r4, #1
 8013a42:	940d      	str	r4, [sp, #52]	@ 0x34
 8013a44:	2420      	movs	r4, #32
 8013a46:	940c      	str	r4, [sp, #48]	@ 0x30
 8013a48:	fb93 f4f1 	sdiv	r4, r3, r1
 8013a4c:	fb01 3b14 	mls	fp, r1, r4, r3
 8013a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a52:	f1bb 0f00 	cmp.w	fp, #0
 8013a56:	441f      	add	r7, r3
 8013a58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a5a:	bfbc      	itt	lt
 8013a5c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8013a60:	448b      	addlt	fp, r1
 8013a62:	fb04 e707 	mla	r7, r4, r7, lr
 8013a66:	44a4      	add	ip, r4
 8013a68:	80ef      	strh	r7, [r5, #6]
 8013a6a:	f8a5 c004 	strh.w	ip, [r5, #4]
 8013a6e:	eb08 0503 	add.w	r5, r8, r3
 8013a72:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013a76:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8013a7a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013a7e:	ea5e 0307 	orrs.w	r3, lr, r7
 8013a82:	d011      	beq.n	8013aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8013a84:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8013a88:	f1be 0f00 	cmp.w	lr, #0
 8013a8c:	db0c      	blt.n	8013aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8013a8e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013a90:	45be      	cmp	lr, r7
 8013a92:	da09      	bge.n	8013aa8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8013a94:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8013a98:	45be      	cmp	lr, r7
 8013a9a:	bf3c      	itt	cc
 8013a9c:	f10c 0708 	addcc.w	r7, ip, #8
 8013aa0:	6107      	strcc	r7, [r0, #16]
 8013aa2:	f10e 0701 	add.w	r7, lr, #1
 8013aa6:	6087      	str	r7, [r0, #8]
 8013aa8:	6907      	ldr	r7, [r0, #16]
 8013aaa:	b213      	sxth	r3, r2
 8013aac:	4555      	cmp	r5, sl
 8013aae:	9310      	str	r3, [sp, #64]	@ 0x40
 8013ab0:	807b      	strh	r3, [r7, #2]
 8013ab2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ab4:	803d      	strh	r5, [r7, #0]
 8013ab6:	80be      	strh	r6, [r7, #4]
 8013ab8:	eb04 0c03 	add.w	ip, r4, r3
 8013abc:	80fe      	strh	r6, [r7, #6]
 8013abe:	d050      	beq.n	8013b62 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8013ac0:	9b01      	ldr	r3, [sp, #4]
 8013ac2:	eba3 070c 	sub.w	r7, r3, ip
 8013ac6:	ebab 0301 	sub.w	r3, fp, r1
 8013aca:	443c      	add	r4, r7
 8013acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ace:	0164      	lsls	r4, r4, #5
 8013ad0:	fb94 f8f1 	sdiv	r8, r4, r1
 8013ad4:	fb01 4418 	mls	r4, r1, r8, r4
 8013ad8:	2c00      	cmp	r4, #0
 8013ada:	bfbc      	itt	lt
 8013adc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013ae0:	1864      	addlt	r4, r4, r1
 8013ae2:	f108 0701 	add.w	r7, r8, #1
 8013ae6:	9711      	str	r7, [sp, #68]	@ 0x44
 8013ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013aea:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8013aee:	191b      	adds	r3, r3, r4
 8013af0:	f8be b004 	ldrh.w	fp, [lr, #4]
 8013af4:	bf54      	ite	pl
 8013af6:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8013af8:	4647      	movmi	r7, r8
 8013afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8013afc:	bf58      	it	pl
 8013afe:	1a5b      	subpl	r3, r3, r1
 8013b00:	44bb      	add	fp, r7
 8013b02:	44bc      	add	ip, r7
 8013b04:	bf58      	it	pl
 8013b06:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8013b08:	f8ae b004 	strh.w	fp, [lr, #4]
 8013b0c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8013b10:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013b14:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8013b16:	f8ae b006 	strh.w	fp, [lr, #6]
 8013b1a:	443d      	add	r5, r7
 8013b1c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8013b20:	f8be b006 	ldrh.w	fp, [lr, #6]
 8013b24:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8013b28:	ea5b 0307 	orrs.w	r3, fp, r7
 8013b2c:	d011      	beq.n	8013b52 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8013b2e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8013b32:	f1bb 0f00 	cmp.w	fp, #0
 8013b36:	db0c      	blt.n	8013b52 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8013b38:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013b3a:	45bb      	cmp	fp, r7
 8013b3c:	da09      	bge.n	8013b52 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8013b3e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013b42:	45bb      	cmp	fp, r7
 8013b44:	bf3c      	itt	cc
 8013b46:	f10e 0708 	addcc.w	r7, lr, #8
 8013b4a:	6107      	strcc	r7, [r0, #16]
 8013b4c:	f10b 0701 	add.w	r7, fp, #1
 8013b50:	6087      	str	r7, [r0, #8]
 8013b52:	6907      	ldr	r7, [r0, #16]
 8013b54:	4555      	cmp	r5, sl
 8013b56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013b58:	803d      	strh	r5, [r7, #0]
 8013b5a:	807b      	strh	r3, [r7, #2]
 8013b5c:	80be      	strh	r6, [r7, #4]
 8013b5e:	80fe      	strh	r6, [r7, #6]
 8013b60:	d1c2      	bne.n	8013ae8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8013b62:	9b01      	ldr	r3, [sp, #4]
 8013b64:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8013b66:	eba3 0c0c 	sub.w	ip, r3, ip
 8013b6a:	6903      	ldr	r3, [r0, #16]
 8013b6c:	3720      	adds	r7, #32
 8013b6e:	8899      	ldrh	r1, [r3, #4]
 8013b70:	4461      	add	r1, ip
 8013b72:	8099      	strh	r1, [r3, #4]
 8013b74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013b76:	1a7f      	subs	r7, r7, r1
 8013b78:	88d9      	ldrh	r1, [r3, #6]
 8013b7a:	fb0c 1c07 	mla	ip, ip, r7, r1
 8013b7e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8013b82:	e613      	b.n	80137ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8013b84:	f04f 34ff 	mov.w	r4, #4294967295
 8013b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b8a:	4249      	negs	r1, r1
 8013b8c:	940d      	str	r4, [sp, #52]	@ 0x34
 8013b8e:	2400      	movs	r4, #0
 8013b90:	437b      	muls	r3, r7
 8013b92:	e758      	b.n	8013a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8013b94:	9905      	ldr	r1, [sp, #20]
 8013b96:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8013b9a:	f009 0c1f 	and.w	ip, r9, #31
 8013b9e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8013ba2:	f001 011f 	and.w	r1, r1, #31
 8013ba6:	45f3      	cmp	fp, lr
 8013ba8:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8013bac:	9102      	str	r1, [sp, #8]
 8013bae:	9904      	ldr	r1, [sp, #16]
 8013bb0:	eba1 0406 	sub.w	r4, r1, r6
 8013bb4:	d108      	bne.n	8013bc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8013bb6:	9b02      	ldr	r3, [sp, #8]
 8013bb8:	44a0      	add	r8, r4
 8013bba:	449c      	add	ip, r3
 8013bbc:	f8a7 8004 	strh.w	r8, [r7, #4]
 8013bc0:	fb04 a40c 	mla	r4, r4, ip, sl
 8013bc4:	80fc      	strh	r4, [r7, #6]
 8013bc6:	e461      	b.n	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013bc8:	9905      	ldr	r1, [sp, #20]
 8013bca:	ebb1 0109 	subs.w	r1, r1, r9
 8013bce:	bf51      	iteee	pl
 8013bd0:	f1cc 0520 	rsbpl	r5, ip, #32
 8013bd4:	fb04 f40c 	mulmi.w	r4, r4, ip
 8013bd8:	4249      	negmi	r1, r1
 8013bda:	2500      	movmi	r5, #0
 8013bdc:	bf5d      	ittte	pl
 8013bde:	436c      	mulpl	r4, r5
 8013be0:	2520      	movpl	r5, #32
 8013be2:	f04f 0901 	movpl.w	r9, #1
 8013be6:	f04f 39ff 	movmi.w	r9, #4294967295
 8013bea:	9501      	str	r5, [sp, #4]
 8013bec:	9b01      	ldr	r3, [sp, #4]
 8013bee:	fb94 f5f1 	sdiv	r5, r4, r1
 8013bf2:	fb01 4415 	mls	r4, r1, r5, r4
 8013bf6:	449c      	add	ip, r3
 8013bf8:	eb0b 0309 	add.w	r3, fp, r9
 8013bfc:	2c00      	cmp	r4, #0
 8013bfe:	bfbc      	itt	lt
 8013c00:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8013c04:	1864      	addlt	r4, r4, r1
 8013c06:	44a8      	add	r8, r5
 8013c08:	fb05 ac0c 	mla	ip, r5, ip, sl
 8013c0c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8013c10:	f8a7 c006 	strh.w	ip, [r7, #6]
 8013c14:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013c18:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8013c1c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013c20:	ea58 0707 	orrs.w	r7, r8, r7
 8013c24:	d011      	beq.n	8013c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8013c26:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8013c2a:	f1b8 0f00 	cmp.w	r8, #0
 8013c2e:	db0c      	blt.n	8013c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8013c30:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013c32:	45b8      	cmp	r8, r7
 8013c34:	da09      	bge.n	8013c4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8013c36:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8013c3a:	45b8      	cmp	r8, r7
 8013c3c:	bf3c      	itt	cc
 8013c3e:	f10c 0708 	addcc.w	r7, ip, #8
 8013c42:	6107      	strcc	r7, [r0, #16]
 8013c44:	f108 0701 	add.w	r7, r8, #1
 8013c48:	6087      	str	r7, [r0, #8]
 8013c4a:	6907      	ldr	r7, [r0, #16]
 8013c4c:	f04f 0c00 	mov.w	ip, #0
 8013c50:	b212      	sxth	r2, r2
 8013c52:	459e      	cmp	lr, r3
 8013c54:	803b      	strh	r3, [r7, #0]
 8013c56:	442e      	add	r6, r5
 8013c58:	807a      	strh	r2, [r7, #2]
 8013c5a:	f8a7 c004 	strh.w	ip, [r7, #4]
 8013c5e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8013c62:	d04b      	beq.n	8013cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8013c64:	9f04      	ldr	r7, [sp, #16]
 8013c66:	1a64      	subs	r4, r4, r1
 8013c68:	f04f 0a00 	mov.w	sl, #0
 8013c6c:	1bbf      	subs	r7, r7, r6
 8013c6e:	443d      	add	r5, r7
 8013c70:	016d      	lsls	r5, r5, #5
 8013c72:	fb95 f8f1 	sdiv	r8, r5, r1
 8013c76:	fb01 5518 	mls	r5, r1, r8, r5
 8013c7a:	4565      	cmp	r5, ip
 8013c7c:	bfbc      	itt	lt
 8013c7e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8013c82:	186d      	addlt	r5, r5, r1
 8013c84:	f108 0701 	add.w	r7, r8, #1
 8013c88:	9703      	str	r7, [sp, #12]
 8013c8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013c8e:	1964      	adds	r4, r4, r5
 8013c90:	444b      	add	r3, r9
 8013c92:	bf54      	ite	pl
 8013c94:	9f03      	ldrpl	r7, [sp, #12]
 8013c96:	4647      	movmi	r7, r8
 8013c98:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8013c9c:	bf58      	it	pl
 8013c9e:	1a64      	subpl	r4, r4, r1
 8013ca0:	443e      	add	r6, r7
 8013ca2:	44bb      	add	fp, r7
 8013ca4:	f8ac b004 	strh.w	fp, [ip, #4]
 8013ca8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013cac:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8013cb0:	f8ac b006 	strh.w	fp, [ip, #6]
 8013cb4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8013cb8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8013cbc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8013cc0:	ea5b 0707 	orrs.w	r7, fp, r7
 8013cc4:	d011      	beq.n	8013cea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8013cc6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8013cca:	f1bb 0f00 	cmp.w	fp, #0
 8013cce:	db0c      	blt.n	8013cea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8013cd0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8013cd2:	45bb      	cmp	fp, r7
 8013cd4:	da09      	bge.n	8013cea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8013cd6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8013cda:	45bb      	cmp	fp, r7
 8013cdc:	bf3c      	itt	cc
 8013cde:	f10c 0708 	addcc.w	r7, ip, #8
 8013ce2:	6107      	strcc	r7, [r0, #16]
 8013ce4:	f10b 0701 	add.w	r7, fp, #1
 8013ce8:	6087      	str	r7, [r0, #8]
 8013cea:	6907      	ldr	r7, [r0, #16]
 8013cec:	459e      	cmp	lr, r3
 8013cee:	803b      	strh	r3, [r7, #0]
 8013cf0:	807a      	strh	r2, [r7, #2]
 8013cf2:	f8a7 a004 	strh.w	sl, [r7, #4]
 8013cf6:	f8a7 a006 	strh.w	sl, [r7, #6]
 8013cfa:	d1c6      	bne.n	8013c8a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8013cfc:	9b04      	ldr	r3, [sp, #16]
 8013cfe:	1b9e      	subs	r6, r3, r6
 8013d00:	6903      	ldr	r3, [r0, #16]
 8013d02:	889a      	ldrh	r2, [r3, #4]
 8013d04:	4432      	add	r2, r6
 8013d06:	809a      	strh	r2, [r3, #4]
 8013d08:	9a02      	ldr	r2, [sp, #8]
 8013d0a:	f102 0c20 	add.w	ip, r2, #32
 8013d0e:	9a01      	ldr	r2, [sp, #4]
 8013d10:	ebac 0c02 	sub.w	ip, ip, r2
 8013d14:	88da      	ldrh	r2, [r3, #6]
 8013d16:	fb06 260c 	mla	r6, r6, ip, r2
 8013d1a:	80de      	strh	r6, [r3, #6]
 8013d1c:	f7ff bbb6 	b.w	801348c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08013d20 <_ZN8touchgfx7Outline6lineToEii>:
 8013d20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013d22:	079b      	lsls	r3, r3, #30
 8013d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d26:	460e      	mov	r6, r1
 8013d28:	4615      	mov	r5, r2
 8013d2a:	d511      	bpl.n	8013d50 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8013d2c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8013d30:	ea86 0701 	eor.w	r7, r6, r1
 8013d34:	ea85 0302 	eor.w	r3, r5, r2
 8013d38:	433b      	orrs	r3, r7
 8013d3a:	d009      	beq.n	8013d50 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8013d3c:	4633      	mov	r3, r6
 8013d3e:	9500      	str	r5, [sp, #0]
 8013d40:	f7ff fb4c 	bl	80133dc <_ZN8touchgfx7Outline10renderLineEiiii>
 8013d44:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013d46:	f043 0301 	orr.w	r3, r3, #1
 8013d4a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8013d4e:	6243      	str	r3, [r0, #36]	@ 0x24
 8013d50:	b003      	add	sp, #12
 8013d52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013d54 <_ZN8touchgfx7Outline6moveToEii>:
 8013d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d56:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013d58:	4615      	mov	r5, r2
 8013d5a:	4604      	mov	r4, r0
 8013d5c:	460e      	mov	r6, r1
 8013d5e:	079a      	lsls	r2, r3, #30
 8013d60:	d401      	bmi.n	8013d66 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8013d62:	f7ff fb08 	bl	8013376 <_ZN8touchgfx7Outline5resetEv>
 8013d66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013d68:	07db      	lsls	r3, r3, #31
 8013d6a:	d504      	bpl.n	8013d76 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8013d72:	f7ff ffd5 	bl	8013d20 <_ZN8touchgfx7Outline6lineToEii>
 8013d76:	6923      	ldr	r3, [r4, #16]
 8013d78:	1170      	asrs	r0, r6, #5
 8013d7a:	1169      	asrs	r1, r5, #5
 8013d7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013d80:	4290      	cmp	r0, r2
 8013d82:	d103      	bne.n	8013d8c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8013d84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013d88:	4291      	cmp	r1, r2
 8013d8a:	d01a      	beq.n	8013dc2 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8013d8c:	88df      	ldrh	r7, [r3, #6]
 8013d8e:	889a      	ldrh	r2, [r3, #4]
 8013d90:	433a      	orrs	r2, r7
 8013d92:	d010      	beq.n	8013db6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8013d94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013d98:	2a00      	cmp	r2, #0
 8013d9a:	db0c      	blt.n	8013db6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8013d9c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8013d9e:	42ba      	cmp	r2, r7
 8013da0:	da09      	bge.n	8013db6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8013da2:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8013da6:	42ba      	cmp	r2, r7
 8013da8:	f102 0201 	add.w	r2, r2, #1
 8013dac:	bf38      	it	cc
 8013dae:	3308      	addcc	r3, #8
 8013db0:	60a2      	str	r2, [r4, #8]
 8013db2:	bf38      	it	cc
 8013db4:	6123      	strcc	r3, [r4, #16]
 8013db6:	6923      	ldr	r3, [r4, #16]
 8013db8:	2200      	movs	r2, #0
 8013dba:	8018      	strh	r0, [r3, #0]
 8013dbc:	8059      	strh	r1, [r3, #2]
 8013dbe:	809a      	strh	r2, [r3, #4]
 8013dc0:	80da      	strh	r2, [r3, #6]
 8013dc2:	6166      	str	r6, [r4, #20]
 8013dc4:	6225      	str	r5, [r4, #32]
 8013dc6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013dcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8013dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd0:	b0d0      	sub	sp, #320	@ 0x140
 8013dd2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013dd6:	466c      	mov	r4, sp
 8013dd8:	4627      	mov	r7, r4
 8013dda:	1a0d      	subs	r5, r1, r0
 8013ddc:	f100 0308 	add.w	r3, r0, #8
 8013de0:	2d48      	cmp	r5, #72	@ 0x48
 8013de2:	f340 80d5 	ble.w	8013f90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8013de6:	112d      	asrs	r5, r5, #4
 8013de8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8013dec:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013df0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8013df4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8013df8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8013dfc:	6816      	ldr	r6, [r2, #0]
 8013dfe:	6006      	str	r6, [r0, #0]
 8013e00:	6856      	ldr	r6, [r2, #4]
 8013e02:	6046      	str	r6, [r0, #4]
 8013e04:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013e08:	f8a2 8002 	strh.w	r8, [r2, #2]
 8013e0c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013e10:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013e14:	f1a1 0208 	sub.w	r2, r1, #8
 8013e18:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8013e1c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8013e20:	4565      	cmp	r5, ip
 8013e22:	db06      	blt.n	8013e32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8013e24:	d119      	bne.n	8013e5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8013e26:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8013e2a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8013e2e:	42ae      	cmp	r6, r5
 8013e30:	dd13      	ble.n	8013e5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8013e32:	460e      	mov	r6, r1
 8013e34:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8013e38:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8013e3c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8013e40:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8013e44:	601d      	str	r5, [r3, #0]
 8013e46:	6875      	ldr	r5, [r6, #4]
 8013e48:	605d      	str	r5, [r3, #4]
 8013e4a:	f821 9c08 	strh.w	r9, [r1, #-8]
 8013e4e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8013e52:	f821 8c04 	strh.w	r8, [r1, #-4]
 8013e56:	f821 ec02 	strh.w	lr, [r1, #-2]
 8013e5a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8013e5e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8013e62:	42ae      	cmp	r6, r5
 8013e64:	db06      	blt.n	8013e74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8013e66:	d116      	bne.n	8013e96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8013e68:	f9b0 c000 	ldrsh.w	ip, [r0]
 8013e6c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8013e70:	45ac      	cmp	ip, r5
 8013e72:	da10      	bge.n	8013e96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8013e74:	681d      	ldr	r5, [r3, #0]
 8013e76:	f9b0 8000 	ldrsh.w	r8, [r0]
 8013e7a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8013e7e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8013e82:	6005      	str	r5, [r0, #0]
 8013e84:	685d      	ldr	r5, [r3, #4]
 8013e86:	f8a0 8008 	strh.w	r8, [r0, #8]
 8013e8a:	6045      	str	r5, [r0, #4]
 8013e8c:	8146      	strh	r6, [r0, #10]
 8013e8e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8013e92:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013e96:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8013e9a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8013e9e:	4565      	cmp	r5, ip
 8013ea0:	db06      	blt.n	8013eb0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8013ea2:	d119      	bne.n	8013ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013ea4:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8013ea8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013eac:	42ae      	cmp	r6, r5
 8013eae:	da13      	bge.n	8013ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013eb0:	460e      	mov	r6, r1
 8013eb2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8013eb6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8013eba:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8013ebe:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8013ec2:	6005      	str	r5, [r0, #0]
 8013ec4:	6875      	ldr	r5, [r6, #4]
 8013ec6:	6045      	str	r5, [r0, #4]
 8013ec8:	f821 9c08 	strh.w	r9, [r1, #-8]
 8013ecc:	f821 cc06 	strh.w	ip, [r1, #-6]
 8013ed0:	f821 8c04 	strh.w	r8, [r1, #-4]
 8013ed4:	f821 ec02 	strh.w	lr, [r1, #-2]
 8013ed8:	3308      	adds	r3, #8
 8013eda:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8013ede:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8013ee2:	45e6      	cmp	lr, ip
 8013ee4:	dbf8      	blt.n	8013ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013ee6:	d105      	bne.n	8013ef4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013ee8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013eec:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013ef0:	42ae      	cmp	r6, r5
 8013ef2:	dbf1      	blt.n	8013ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013ef4:	4615      	mov	r5, r2
 8013ef6:	3a08      	subs	r2, #8
 8013ef8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8013efc:	45b4      	cmp	ip, r6
 8013efe:	dbf9      	blt.n	8013ef4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013f00:	d105      	bne.n	8013f0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8013f02:	f9b0 8000 	ldrsh.w	r8, [r0]
 8013f06:	f9b2 6000 	ldrsh.w	r6, [r2]
 8013f0a:	45b0      	cmp	r8, r6
 8013f0c:	dbf2      	blt.n	8013ef4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	f1a5 0608 	sub.w	r6, r5, #8
 8013f14:	d816      	bhi.n	8013f44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8013f16:	f8d6 c000 	ldr.w	ip, [r6]
 8013f1a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8013f1e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8013f22:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8013f26:	f8c3 c000 	str.w	ip, [r3]
 8013f2a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8013f2e:	f8c3 c004 	str.w	ip, [r3, #4]
 8013f32:	f825 ac08 	strh.w	sl, [r5, #-8]
 8013f36:	f825 ec06 	strh.w	lr, [r5, #-6]
 8013f3a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8013f3e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8013f42:	e7c9      	b.n	8013ed8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8013f44:	f8d6 e000 	ldr.w	lr, [r6]
 8013f48:	f9b0 a000 	ldrsh.w	sl, [r0]
 8013f4c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8013f50:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8013f54:	f8c0 e000 	str.w	lr, [r0]
 8013f58:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8013f5c:	1a16      	subs	r6, r2, r0
 8013f5e:	f8c0 e004 	str.w	lr, [r0, #4]
 8013f62:	f825 ac08 	strh.w	sl, [r5, #-8]
 8013f66:	f825 cc06 	strh.w	ip, [r5, #-6]
 8013f6a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8013f6e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8013f72:	1acd      	subs	r5, r1, r3
 8013f74:	10ed      	asrs	r5, r5, #3
 8013f76:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8013f7a:	bfb5      	itete	lt
 8013f7c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8013f80:	e9c4 3100 	strdge	r3, r1, [r4]
 8013f84:	460a      	movlt	r2, r1
 8013f86:	4603      	movge	r3, r0
 8013f88:	3408      	adds	r4, #8
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	4611      	mov	r1, r2
 8013f8e:	e724      	b.n	8013dda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8013f90:	4299      	cmp	r1, r3
 8013f92:	d927      	bls.n	8013fe4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8013f94:	f1a3 0210 	sub.w	r2, r3, #16
 8013f98:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8013f9c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8013fa0:	45ac      	cmp	ip, r5
 8013fa2:	db06      	blt.n	8013fb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8013fa4:	d11c      	bne.n	8013fe0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8013fa6:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8013faa:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8013fae:	42ae      	cmp	r6, r5
 8013fb0:	da16      	bge.n	8013fe0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8013fb2:	4615      	mov	r5, r2
 8013fb4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8013fb8:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8013fbc:	3a08      	subs	r2, #8
 8013fbe:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8013fc2:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8013fc6:	6196      	str	r6, [r2, #24]
 8013fc8:	42a8      	cmp	r0, r5
 8013fca:	686e      	ldr	r6, [r5, #4]
 8013fcc:	f8a2 9010 	strh.w	r9, [r2, #16]
 8013fd0:	61d6      	str	r6, [r2, #28]
 8013fd2:	f8a2 c012 	strh.w	ip, [r2, #18]
 8013fd6:	f8a2 8014 	strh.w	r8, [r2, #20]
 8013fda:	f8a2 e016 	strh.w	lr, [r2, #22]
 8013fde:	d1db      	bne.n	8013f98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8013fe0:	3308      	adds	r3, #8
 8013fe2:	e7d5      	b.n	8013f90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8013fe4:	42bc      	cmp	r4, r7
 8013fe6:	d903      	bls.n	8013ff0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8013fe8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8013fec:	3c08      	subs	r4, #8
 8013fee:	e6f4      	b.n	8013dda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8013ff0:	b050      	add	sp, #320	@ 0x140
 8013ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013ff6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8013ff6:	b510      	push	{r4, lr}
 8013ff8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	07da      	lsls	r2, r3, #31
 8013ffe:	d507      	bpl.n	8014010 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014000:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014004:	f7ff fe8c 	bl	8013d20 <_ZN8touchgfx7Outline6lineToEii>
 8014008:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801400a:	f023 0301 	bic.w	r3, r3, #1
 801400e:	6243      	str	r3, [r0, #36]	@ 0x24
 8014010:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014012:	079b      	lsls	r3, r3, #30
 8014014:	d521      	bpl.n	801405a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014016:	6923      	ldr	r3, [r4, #16]
 8014018:	88d9      	ldrh	r1, [r3, #6]
 801401a:	889a      	ldrh	r2, [r3, #4]
 801401c:	430a      	orrs	r2, r1
 801401e:	d010      	beq.n	8014042 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014020:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014024:	2a00      	cmp	r2, #0
 8014026:	db0c      	blt.n	8014042 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014028:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801402a:	428a      	cmp	r2, r1
 801402c:	da09      	bge.n	8014042 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801402e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8014032:	4291      	cmp	r1, r2
 8014034:	f102 0201 	add.w	r2, r2, #1
 8014038:	bf88      	it	hi
 801403a:	3308      	addhi	r3, #8
 801403c:	60a2      	str	r2, [r4, #8]
 801403e:	bf88      	it	hi
 8014040:	6123      	strhi	r3, [r4, #16]
 8014042:	68a1      	ldr	r1, [r4, #8]
 8014044:	b129      	cbz	r1, 8014052 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014046:	6863      	ldr	r3, [r4, #4]
 8014048:	4299      	cmp	r1, r3
 801404a:	d802      	bhi.n	8014052 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801404c:	68e0      	ldr	r0, [r4, #12]
 801404e:	f7ff febd 	bl	8013dcc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8014052:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014054:	f023 0302 	bic.w	r3, r3, #2
 8014058:	6263      	str	r3, [r4, #36]	@ 0x24
 801405a:	68e0      	ldr	r0, [r4, #12]
 801405c:	bd10      	pop	{r4, pc}
	...

08014060 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014060:	4b01      	ldr	r3, [pc, #4]	@ (8014068 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014062:	6818      	ldr	r0, [r3, #0]
 8014064:	4770      	bx	lr
 8014066:	bf00      	nop
 8014068:	2402593c 	.word	0x2402593c

0801406c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801406c:	4b01      	ldr	r3, [pc, #4]	@ (8014074 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801406e:	6818      	ldr	r0, [r3, #0]
 8014070:	4770      	bx	lr
 8014072:	bf00      	nop
 8014074:	24025940 	.word	0x24025940

08014078 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014078:	b510      	push	{r4, lr}
 801407a:	6803      	ldr	r3, [r0, #0]
 801407c:	460c      	mov	r4, r1
 801407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014080:	4798      	blx	r3
 8014082:	1b03      	subs	r3, r0, r4
 8014084:	4258      	negs	r0, r3
 8014086:	4158      	adcs	r0, r3
 8014088:	bd10      	pop	{r4, pc}
	...

0801408c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801408c:	4b01      	ldr	r3, [pc, #4]	@ (8014094 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801408e:	6019      	str	r1, [r3, #0]
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	24025944 	.word	0x24025944

08014098 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801409c:	4696      	mov	lr, r2
 801409e:	b097      	sub	sp, #92	@ 0x5c
 80140a0:	4605      	mov	r5, r0
 80140a2:	4614      	mov	r4, r2
 80140a4:	460e      	mov	r6, r1
 80140a6:	461f      	mov	r7, r3
 80140a8:	f10d 0c1c 	add.w	ip, sp, #28
 80140ac:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80140b0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80140b4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80140b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80140bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140c0:	f8de 3000 	ldr.w	r3, [lr]
 80140c4:	f104 0e14 	add.w	lr, r4, #20
 80140c8:	f8cc 3000 	str.w	r3, [ip]
 80140cc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80140d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80140d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140d8:	f8de 3000 	ldr.w	r3, [lr]
 80140dc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80140e0:	f8cc 3000 	str.w	r3, [ip]
 80140e4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80140e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80140ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140f0:	f8de 3000 	ldr.w	r3, [lr]
 80140f4:	4631      	mov	r1, r6
 80140f6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80140f8:	4628      	mov	r0, r5
 80140fa:	f8cc 3000 	str.w	r3, [ip]
 80140fe:	682b      	ldr	r3, [r5, #0]
 8014100:	9201      	str	r2, [sp, #4]
 8014102:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014104:	f8cd 8008 	str.w	r8, [sp, #8]
 8014108:	9200      	str	r2, [sp, #0]
 801410a:	aa07      	add	r2, sp, #28
 801410c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014110:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8014114:	463b      	mov	r3, r7
 8014116:	47d8      	blx	fp
 8014118:	46a6      	mov	lr, r4
 801411a:	f10d 0c1c 	add.w	ip, sp, #28
 801411e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014122:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014126:	f8de 3000 	ldr.w	r3, [lr]
 801412a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801412e:	343c      	adds	r4, #60	@ 0x3c
 8014130:	f8cc 3000 	str.w	r3, [ip]
 8014134:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014138:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801413c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014140:	f8de 3000 	ldr.w	r3, [lr]
 8014144:	f8cc 3000 	str.w	r3, [ip]
 8014148:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801414c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801414e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	4631      	mov	r1, r6
 8014156:	4628      	mov	r0, r5
 8014158:	f8cc 3000 	str.w	r3, [ip]
 801415c:	682b      	ldr	r3, [r5, #0]
 801415e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014162:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014164:	f8cd 8008 	str.w	r8, [sp, #8]
 8014168:	9201      	str	r2, [sp, #4]
 801416a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801416c:	9200      	str	r2, [sp, #0]
 801416e:	aa07      	add	r2, sp, #28
 8014170:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8014172:	463b      	mov	r3, r7
 8014174:	47a0      	blx	r4
 8014176:	b017      	add	sp, #92	@ 0x5c
 8014178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801417c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014180:	b08d      	sub	sp, #52	@ 0x34
 8014182:	4688      	mov	r8, r1
 8014184:	f8d3 c000 	ldr.w	ip, [r3]
 8014188:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801418a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801418e:	680f      	ldr	r7, [r1, #0]
 8014190:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8014194:	eba7 070c 	sub.w	r7, r7, ip
 8014198:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801419c:	edd3 6a07 	vldr	s13, [r3, #28]
 80141a0:	42bc      	cmp	r4, r7
 80141a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80141a4:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80141a8:	bfa8      	it	ge
 80141aa:	463c      	movge	r4, r7
 80141ac:	f9b1 9000 	ldrsh.w	r9, [r1]
 80141b0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80141b4:	ee07 4a90 	vmov	s15, r4
 80141b8:	eb09 0e0c 	add.w	lr, r9, ip
 80141bc:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80141c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80141c4:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80141c8:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80141cc:	4571      	cmp	r1, lr
 80141ce:	ee25 4a04 	vmul.f32	s8, s10, s8
 80141d2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80141d6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80141da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80141de:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80141e2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80141e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80141ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 80141ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 80141f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80141f6:	f340 808c 	ble.w	8014312 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80141fa:	eba1 060e 	sub.w	r6, r1, lr
 80141fe:	fb96 f5f4 	sdiv	r5, r6, r4
 8014202:	ee07 5a10 	vmov	s14, r5
 8014206:	2d00      	cmp	r5, #0
 8014208:	fb04 6615 	mls	r6, r4, r5, r6
 801420c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014210:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014214:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014218:	eea7 1a05 	vfma.f32	s2, s14, s10
 801421c:	dd12      	ble.n	8014244 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801421e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014222:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014226:	ee31 2a45 	vsub.f32	s4, s2, s10
 801422a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801422e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014232:	bf14      	ite	ne
 8014234:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014238:	eeb0 7a67 	vmoveq.f32	s14, s15
 801423c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014240:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014244:	fb05 f204 	mul.w	r2, r5, r4
 8014248:	1abf      	subs	r7, r7, r2
 801424a:	4494      	add	ip, r2
 801424c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014250:	4411      	add	r1, r2
 8014252:	eb09 020c 	add.w	r2, r9, ip
 8014256:	b209      	sxth	r1, r1
 8014258:	443a      	add	r2, r7
 801425a:	428a      	cmp	r2, r1
 801425c:	bfc4      	itt	gt
 801425e:	eba1 0209 	subgt.w	r2, r1, r9
 8014262:	eba2 070c 	subgt.w	r7, r2, ip
 8014266:	2f00      	cmp	r7, #0
 8014268:	dd50      	ble.n	801430c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801426a:	fb97 f1f4 	sdiv	r1, r7, r4
 801426e:	fb04 7211 	mls	r2, r4, r1, r7
 8014272:	b90a      	cbnz	r2, 8014278 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014274:	3901      	subs	r1, #1
 8014276:	4622      	mov	r2, r4
 8014278:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801427c:	6840      	ldr	r0, [r0, #4]
 801427e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8014282:	44b6      	add	lr, r6
 8014284:	f8d0 a000 	ldr.w	sl, [r0]
 8014288:	2900      	cmp	r1, #0
 801428a:	bfcc      	ite	gt
 801428c:	46a1      	movgt	r9, r4
 801428e:	4691      	movle	r9, r2
 8014290:	900b      	str	r0, [sp, #44]	@ 0x2c
 8014292:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8014294:	fb04 e505 	mla	r5, r4, r5, lr
 8014298:	eef0 6a42 	vmov.f32	s13, s4
 801429c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80142a0:	9008      	str	r0, [sp, #32]
 80142a2:	eeb0 7a61 	vmov.f32	s14, s3
 80142a6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80142a8:	695b      	ldr	r3, [r3, #20]
 80142aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80142ae:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80142b2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80142b6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80142b8:	445b      	add	r3, fp
 80142ba:	9307      	str	r3, [sp, #28]
 80142bc:	ee16 3a90 	vmov	r3, s13
 80142c0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80142c4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80142c8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80142cc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80142d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80142d4:	ee17 7a90 	vmov	r7, s15
 80142d8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80142dc:	fb97 f7f4 	sdiv	r7, r7, r4
 80142e0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80142e4:	ee17 ca90 	vmov	ip, s15
 80142e8:	fb9c fcf4 	sdiv	ip, ip, r4
 80142ec:	fb0c 3306 	mla	r3, ip, r6, r3
 80142f0:	9302      	str	r3, [sp, #8]
 80142f2:	ee17 3a10 	vmov	r3, s14
 80142f6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80142fa:	fb07 3706 	mla	r7, r7, r6, r3
 80142fe:	eba9 0306 	sub.w	r3, r9, r6
 8014302:	e9cd 4700 	strd	r4, r7, [sp]
 8014306:	f8da 4008 	ldr.w	r4, [sl, #8]
 801430a:	47a0      	blx	r4
 801430c:	b00d      	add	sp, #52	@ 0x34
 801430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014312:	2500      	movs	r5, #0
 8014314:	462e      	mov	r6, r5
 8014316:	e799      	b.n	801424c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801431c:	b0db      	sub	sp, #364	@ 0x16c
 801431e:	461d      	mov	r5, r3
 8014320:	4614      	mov	r4, r2
 8014322:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8014326:	910f      	str	r1, [sp, #60]	@ 0x3c
 8014328:	4629      	mov	r1, r5
 801432a:	930a      	str	r3, [sp, #40]	@ 0x28
 801432c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8014330:	9009      	str	r0, [sp, #36]	@ 0x24
 8014332:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014334:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8014338:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801433c:	9310      	str	r3, [sp, #64]	@ 0x40
 801433e:	6803      	ldr	r3, [r0, #0]
 8014340:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8014342:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014346:	47b8      	blx	r7
 8014348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801434a:	6058      	str	r0, [r3, #4]
 801434c:	2800      	cmp	r0, #0
 801434e:	f000 83a1 	beq.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014352:	682b      	ldr	r3, [r5, #0]
 8014354:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8014358:	ed94 7a02 	vldr	s14, [r4, #8]
 801435c:	9314      	str	r3, [sp, #80]	@ 0x50
 801435e:	686b      	ldr	r3, [r5, #4]
 8014360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014364:	9315      	str	r3, [sp, #84]	@ 0x54
 8014366:	4bc1      	ldr	r3, [pc, #772]	@ (801466c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014368:	7819      	ldrb	r1, [r3, #0]
 801436a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801436e:	2900      	cmp	r1, #0
 8014370:	bf16      	itet	ne
 8014372:	4619      	movne	r1, r3
 8014374:	4611      	moveq	r1, r2
 8014376:	4613      	movne	r3, r2
 8014378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437c:	9116      	str	r1, [sp, #88]	@ 0x58
 801437e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8014382:	f240 8387 	bls.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014386:	ed94 7a07 	vldr	s14, [r4, #28]
 801438a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014392:	f240 837f 	bls.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014396:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801439a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a2:	f240 8377 	bls.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143a6:	6822      	ldr	r2, [r4, #0]
 80143a8:	4bb1      	ldr	r3, [pc, #708]	@ (8014670 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80143aa:	429a      	cmp	r2, r3
 80143ac:	f2c0 8372 	blt.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143b0:	49b0      	ldr	r1, [pc, #704]	@ (8014674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80143b2:	6963      	ldr	r3, [r4, #20]
 80143b4:	428a      	cmp	r2, r1
 80143b6:	f300 836d 	bgt.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143ba:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80143be:	48ae      	ldr	r0, [pc, #696]	@ (8014678 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80143c0:	33ff      	adds	r3, #255	@ 0xff
 80143c2:	4283      	cmp	r3, r0
 80143c4:	f200 8366 	bhi.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80143ca:	4dac      	ldr	r5, [pc, #688]	@ (801467c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80143cc:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80143d0:	33ff      	adds	r3, #255	@ 0xff
 80143d2:	42ab      	cmp	r3, r5
 80143d4:	f200 835e 	bhi.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143d8:	6862      	ldr	r2, [r4, #4]
 80143da:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80143de:	33ff      	adds	r3, #255	@ 0xff
 80143e0:	4283      	cmp	r3, r0
 80143e2:	f200 8357 	bhi.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143e6:	69a1      	ldr	r1, [r4, #24]
 80143e8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80143ec:	33ff      	adds	r3, #255	@ 0xff
 80143ee:	4283      	cmp	r3, r0
 80143f0:	f200 8350 	bhi.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80143f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80143f6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80143fa:	30ff      	adds	r0, #255	@ 0xff
 80143fc:	42a8      	cmp	r0, r5
 80143fe:	f200 8349 	bhi.w	8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014402:	428a      	cmp	r2, r1
 8014404:	f280 8110 	bge.w	8014628 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014408:	429a      	cmp	r2, r3
 801440a:	f300 8119 	bgt.w	8014640 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801440e:	4299      	cmp	r1, r3
 8014410:	f280 811d 	bge.w	801464e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014414:	2502      	movs	r5, #2
 8014416:	2701      	movs	r7, #1
 8014418:	46a9      	mov	r9, r5
 801441a:	46b8      	mov	r8, r7
 801441c:	f04f 0a00 	mov.w	sl, #0
 8014420:	4621      	mov	r1, r4
 8014422:	a849      	add	r0, sp, #292	@ 0x124
 8014424:	f004 fa12 	bl	801884c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014428:	4622      	mov	r2, r4
 801442a:	4653      	mov	r3, sl
 801442c:	a949      	add	r1, sp, #292	@ 0x124
 801442e:	f8cd 9000 	str.w	r9, [sp]
 8014432:	a819      	add	r0, sp, #100	@ 0x64
 8014434:	f004 fb3a 	bl	8018aac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014438:	4622      	mov	r2, r4
 801443a:	4653      	mov	r3, sl
 801443c:	a949      	add	r1, sp, #292	@ 0x124
 801443e:	f8cd 8000 	str.w	r8, [sp]
 8014442:	a829      	add	r0, sp, #164	@ 0xa4
 8014444:	f004 fb32 	bl	8018aac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014448:	4643      	mov	r3, r8
 801444a:	4622      	mov	r2, r4
 801444c:	a949      	add	r1, sp, #292	@ 0x124
 801444e:	f8cd 9000 	str.w	r9, [sp]
 8014452:	a839      	add	r0, sp, #228	@ 0xe4
 8014454:	f004 fb2a 	bl	8018aac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014458:	42af      	cmp	r7, r5
 801445a:	af12      	add	r7, sp, #72	@ 0x48
 801445c:	bfb7      	itett	lt
 801445e:	2300      	movlt	r3, #0
 8014460:	2301      	movge	r3, #1
 8014462:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8014464:	ac19      	addlt	r4, sp, #100	@ 0x64
 8014466:	bfb1      	iteee	lt
 8014468:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801446a:	ad19      	addge	r5, sp, #100	@ 0x64
 801446c:	930e      	strge	r3, [sp, #56]	@ 0x38
 801446e:	ac29      	addge	r4, sp, #164	@ 0xa4
 8014470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014472:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014476:	e887 0003 	stmia.w	r7, {r0, r1}
 801447a:	b928      	cbnz	r0, 8014488 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801447c:	4b80      	ldr	r3, [pc, #512]	@ (8014680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801447e:	6818      	ldr	r0, [r3, #0]
 8014480:	6803      	ldr	r3, [r0, #0]
 8014482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014484:	4798      	blx	r3
 8014486:	6038      	str	r0, [r7, #0]
 8014488:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801448a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801448e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014492:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8014494:	930c      	str	r3, [sp, #48]	@ 0x30
 8014496:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014498:	6963      	ldr	r3, [r4, #20]
 801449a:	440b      	add	r3, r1
 801449c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80144a0:	4408      	add	r0, r1
 80144a2:	b200      	sxth	r0, r0
 80144a4:	4283      	cmp	r3, r0
 80144a6:	900d      	str	r0, [sp, #52]	@ 0x34
 80144a8:	f280 80dd 	bge.w	8014666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80144ac:	428b      	cmp	r3, r1
 80144ae:	da08      	bge.n	80144c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80144b0:	2a00      	cmp	r2, #0
 80144b2:	dd06      	ble.n	80144c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80144b4:	1acb      	subs	r3, r1, r3
 80144b6:	429a      	cmp	r2, r3
 80144b8:	f2c0 80e4 	blt.w	8014684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f300 80e2 	bgt.w	8014686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80144c2:	6967      	ldr	r7, [r4, #20]
 80144c4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80144c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80144ca:	443b      	add	r3, r7
 80144cc:	461f      	mov	r7, r3
 80144ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80144d0:	1bdf      	subs	r7, r3, r7
 80144d2:	4297      	cmp	r7, r2
 80144d4:	bfa8      	it	ge
 80144d6:	4617      	movge	r7, r2
 80144d8:	2f00      	cmp	r7, #0
 80144da:	f340 8166 	ble.w	80147aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80144de:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80144e0:	6829      	ldr	r1, [r5, #0]
 80144e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80144e6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80144ea:	4411      	add	r1, r2
 80144ec:	6820      	ldr	r0, [r4, #0]
 80144ee:	4299      	cmp	r1, r3
 80144f0:	dd1a      	ble.n	8014528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80144f2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80144f6:	4402      	add	r2, r0
 80144f8:	440b      	add	r3, r1
 80144fa:	b21b      	sxth	r3, r3
 80144fc:	429a      	cmp	r2, r3
 80144fe:	dc13      	bgt.n	8014528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8014500:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014502:	a912      	add	r1, sp, #72	@ 0x48
 8014504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	9206      	str	r2, [sp, #24]
 801450c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801450e:	9500      	str	r5, [sp, #0]
 8014510:	9205      	str	r2, [sp, #20]
 8014512:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014514:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014518:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801451a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801451e:	aa49      	add	r2, sp, #292	@ 0x124
 8014520:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8014524:	4623      	mov	r3, r4
 8014526:	47c8      	blx	r9
 8014528:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801452c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8014530:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8014534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014538:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801453c:	68a1      	ldr	r1, [r4, #8]
 801453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014542:	ed94 6a08 	vldr	s12, [r4, #32]
 8014546:	edd4 6a07 	vldr	s13, [r4, #28]
 801454a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801454e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014552:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014556:	e9d4 2300 	ldrd	r2, r3, [r4]
 801455a:	edc4 6a07 	vstr	s13, [r4, #28]
 801455e:	441a      	add	r2, r3
 8014560:	6963      	ldr	r3, [r4, #20]
 8014562:	3301      	adds	r3, #1
 8014564:	6022      	str	r2, [r4, #0]
 8014566:	6163      	str	r3, [r4, #20]
 8014568:	69a3      	ldr	r3, [r4, #24]
 801456a:	3b01      	subs	r3, #1
 801456c:	61a3      	str	r3, [r4, #24]
 801456e:	6923      	ldr	r3, [r4, #16]
 8014570:	440b      	add	r3, r1
 8014572:	68e1      	ldr	r1, [r4, #12]
 8014574:	428b      	cmp	r3, r1
 8014576:	6123      	str	r3, [r4, #16]
 8014578:	db15      	blt.n	80145a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801457a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801457e:	3201      	adds	r2, #1
 8014580:	1a5b      	subs	r3, r3, r1
 8014582:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014586:	6022      	str	r2, [r4, #0]
 8014588:	6123      	str	r3, [r4, #16]
 801458a:	edc4 6a07 	vstr	s13, [r4, #28]
 801458e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8014592:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014596:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801459a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801459e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80145a2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80145a6:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80145aa:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80145ae:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80145b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80145b6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80145ba:	68a9      	ldr	r1, [r5, #8]
 80145bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145c0:	ed95 6a08 	vldr	s12, [r5, #32]
 80145c4:	edd5 6a07 	vldr	s13, [r5, #28]
 80145c8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80145cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80145d0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80145d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80145d8:	edc5 6a07 	vstr	s13, [r5, #28]
 80145dc:	441a      	add	r2, r3
 80145de:	696b      	ldr	r3, [r5, #20]
 80145e0:	3301      	adds	r3, #1
 80145e2:	602a      	str	r2, [r5, #0]
 80145e4:	616b      	str	r3, [r5, #20]
 80145e6:	69ab      	ldr	r3, [r5, #24]
 80145e8:	3b01      	subs	r3, #1
 80145ea:	61ab      	str	r3, [r5, #24]
 80145ec:	692b      	ldr	r3, [r5, #16]
 80145ee:	440b      	add	r3, r1
 80145f0:	68e9      	ldr	r1, [r5, #12]
 80145f2:	428b      	cmp	r3, r1
 80145f4:	612b      	str	r3, [r5, #16]
 80145f6:	db15      	blt.n	8014624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80145f8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80145fc:	3201      	adds	r2, #1
 80145fe:	1a5b      	subs	r3, r3, r1
 8014600:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014604:	602a      	str	r2, [r5, #0]
 8014606:	612b      	str	r3, [r5, #16]
 8014608:	edc5 6a07 	vstr	s13, [r5, #28]
 801460c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8014610:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014614:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014618:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801461c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014620:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014624:	3f01      	subs	r7, #1
 8014626:	e757      	b.n	80144d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8014628:	4299      	cmp	r1, r3
 801462a:	dc13      	bgt.n	8014654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801462c:	429a      	cmp	r2, r3
 801462e:	da14      	bge.n	801465a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8014630:	2502      	movs	r5, #2
 8014632:	2703      	movs	r7, #3
 8014634:	f04f 0800 	mov.w	r8, #0
 8014638:	46a9      	mov	r9, r5
 801463a:	f04f 0a01 	mov.w	sl, #1
 801463e:	e6ef      	b.n	8014420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8014640:	2501      	movs	r5, #1
 8014642:	2700      	movs	r7, #0
 8014644:	46a9      	mov	r9, r5
 8014646:	46b8      	mov	r8, r7
 8014648:	f04f 0a02 	mov.w	sl, #2
 801464c:	e6e8      	b.n	8014420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801464e:	2501      	movs	r5, #1
 8014650:	2702      	movs	r7, #2
 8014652:	e6e1      	b.n	8014418 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014654:	2500      	movs	r5, #0
 8014656:	2701      	movs	r7, #1
 8014658:	e7f4      	b.n	8014644 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801465a:	2702      	movs	r7, #2
 801465c:	2503      	movs	r5, #3
 801465e:	f04f 0900 	mov.w	r9, #0
 8014662:	46b8      	mov	r8, r7
 8014664:	e7e9      	b.n	801463a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014666:	4613      	mov	r3, r2
 8014668:	e728      	b.n	80144bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801466a:	bf00      	nop
 801466c:	2402592c 	.word	0x2402592c
 8014670:	fffd8f01 	.word	0xfffd8f01
 8014674:	00027100 	.word	0x00027100
 8014678:	0004e1ff 	.word	0x0004e1ff
 801467c:	0004e1fe 	.word	0x0004e1fe
 8014680:	24025934 	.word	0x24025934
 8014684:	4613      	mov	r3, r2
 8014686:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8014688:	469e      	mov	lr, r3
 801468a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801468c:	469c      	mov	ip, r3
 801468e:	9111      	str	r1, [sp, #68]	@ 0x44
 8014690:	f04f 0900 	mov.w	r9, #0
 8014694:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8014698:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801469c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80146a0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80146a4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80146a8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80146ac:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80146b0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80146b4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80146b8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80146bc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80146c0:	f1bc 0f00 	cmp.w	ip, #0
 80146c4:	d147      	bne.n	8014756 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80146c6:	eb03 0c07 	add.w	ip, r3, r7
 80146ca:	1ad7      	subs	r7, r2, r3
 80146cc:	f1b9 0f00 	cmp.w	r9, #0
 80146d0:	d009      	beq.n	80146e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80146d2:	9029      	str	r0, [sp, #164]	@ 0xa4
 80146d4:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80146d8:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80146dc:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80146e0:	912d      	str	r1, [sp, #180]	@ 0xb4
 80146e2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80146e6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80146e8:	f04f 0800 	mov.w	r8, #0
 80146ec:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80146f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80146f2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80146f6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80146fa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80146fe:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8014702:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8014706:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801470a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801470e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8014712:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8014716:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801471a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801471e:	f1be 0f00 	cmp.w	lr, #0
 8014722:	d031      	beq.n	8014788 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8014724:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014726:	4450      	add	r0, sl
 8014728:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801472c:	4431      	add	r1, r6
 801472e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014732:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014736:	4549      	cmp	r1, r9
 8014738:	db08      	blt.n	801474c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801473a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801473e:	3001      	adds	r0, #1
 8014740:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014744:	eba1 0109 	sub.w	r1, r1, r9
 8014748:	ee37 7a06 	vadd.f32	s14, s14, s12
 801474c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014750:	f04f 0801 	mov.w	r8, #1
 8014754:	e7e3      	b.n	801471e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014756:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8014758:	4450      	add	r0, sl
 801475a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801475e:	4431      	add	r1, r6
 8014760:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014764:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014768:	4541      	cmp	r1, r8
 801476a:	db08      	blt.n	801477e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801476c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014770:	3001      	adds	r0, #1
 8014772:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014776:	eba1 0108 	sub.w	r1, r1, r8
 801477a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801477e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014782:	f04f 0901 	mov.w	r9, #1
 8014786:	e79b      	b.n	80146c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014788:	449c      	add	ip, r3
 801478a:	1aff      	subs	r7, r7, r3
 801478c:	f1b8 0f00 	cmp.w	r8, #0
 8014790:	d009      	beq.n	80147a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8014792:	9019      	str	r0, [sp, #100]	@ 0x64
 8014794:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8014798:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801479c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80147a0:	911d      	str	r1, [sp, #116]	@ 0x74
 80147a2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80147a6:	1ad2      	subs	r2, r2, r3
 80147a8:	e68b      	b.n	80144c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80147aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147ac:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	f000 80d1 	beq.w	8014956 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80147b4:	ad19      	add	r5, sp, #100	@ 0x64
 80147b6:	ac39      	add	r4, sp, #228	@ 0xe4
 80147b8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80147ba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80147be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80147c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80147c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80147c6:	6963      	ldr	r3, [r4, #20]
 80147c8:	440b      	add	r3, r1
 80147ca:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80147ce:	4408      	add	r0, r1
 80147d0:	b200      	sxth	r0, r0
 80147d2:	4283      	cmp	r3, r0
 80147d4:	900d      	str	r0, [sp, #52]	@ 0x34
 80147d6:	f280 80c1 	bge.w	801495c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80147da:	428b      	cmp	r3, r1
 80147dc:	da08      	bge.n	80147f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80147de:	2a00      	cmp	r2, #0
 80147e0:	dd06      	ble.n	80147f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80147e2:	1acb      	subs	r3, r1, r3
 80147e4:	429a      	cmp	r2, r3
 80147e6:	f2c0 80bb 	blt.w	8014960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f300 80b9 	bgt.w	8014962 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80147f0:	6967      	ldr	r7, [r4, #20]
 80147f2:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80147f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80147f8:	443b      	add	r3, r7
 80147fa:	461f      	mov	r7, r3
 80147fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80147fe:	1bdf      	subs	r7, r3, r7
 8014800:	4297      	cmp	r7, r2
 8014802:	bfa8      	it	ge
 8014804:	4617      	movge	r7, r2
 8014806:	2f00      	cmp	r7, #0
 8014808:	f340 813c 	ble.w	8014a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801480c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801480e:	6829      	ldr	r1, [r5, #0]
 8014810:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014814:	f9bb 3000 	ldrsh.w	r3, [fp]
 8014818:	4411      	add	r1, r2
 801481a:	6820      	ldr	r0, [r4, #0]
 801481c:	4299      	cmp	r1, r3
 801481e:	dd1a      	ble.n	8014856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8014820:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8014824:	4402      	add	r2, r0
 8014826:	440b      	add	r3, r1
 8014828:	b21b      	sxth	r3, r3
 801482a:	429a      	cmp	r2, r3
 801482c:	dc13      	bgt.n	8014856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801482e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014830:	a912      	add	r1, sp, #72	@ 0x48
 8014832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014834:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	9206      	str	r2, [sp, #24]
 801483a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801483c:	9500      	str	r5, [sp, #0]
 801483e:	9205      	str	r2, [sp, #20]
 8014840:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014842:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014846:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8014848:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801484c:	aa49      	add	r2, sp, #292	@ 0x124
 801484e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8014852:	4623      	mov	r3, r4
 8014854:	47c8      	blx	r9
 8014856:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801485a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801485e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8014862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014866:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801486a:	68a1      	ldr	r1, [r4, #8]
 801486c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014870:	ed94 6a08 	vldr	s12, [r4, #32]
 8014874:	edd4 6a07 	vldr	s13, [r4, #28]
 8014878:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801487c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014880:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8014884:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014888:	edc4 6a07 	vstr	s13, [r4, #28]
 801488c:	441a      	add	r2, r3
 801488e:	6963      	ldr	r3, [r4, #20]
 8014890:	3301      	adds	r3, #1
 8014892:	6022      	str	r2, [r4, #0]
 8014894:	6163      	str	r3, [r4, #20]
 8014896:	69a3      	ldr	r3, [r4, #24]
 8014898:	3b01      	subs	r3, #1
 801489a:	61a3      	str	r3, [r4, #24]
 801489c:	6923      	ldr	r3, [r4, #16]
 801489e:	440b      	add	r3, r1
 80148a0:	68e1      	ldr	r1, [r4, #12]
 80148a2:	428b      	cmp	r3, r1
 80148a4:	6123      	str	r3, [r4, #16]
 80148a6:	db15      	blt.n	80148d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80148a8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80148ac:	3201      	adds	r2, #1
 80148ae:	1a5b      	subs	r3, r3, r1
 80148b0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80148b4:	6022      	str	r2, [r4, #0]
 80148b6:	6123      	str	r3, [r4, #16]
 80148b8:	edc4 6a07 	vstr	s13, [r4, #28]
 80148bc:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80148c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80148c4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80148c8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80148cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148d0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80148d4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80148d8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80148dc:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80148e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148e4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80148e8:	68a9      	ldr	r1, [r5, #8]
 80148ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80148ee:	ed95 6a08 	vldr	s12, [r5, #32]
 80148f2:	edd5 6a07 	vldr	s13, [r5, #28]
 80148f6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80148fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80148fe:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014902:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014906:	edc5 6a07 	vstr	s13, [r5, #28]
 801490a:	441a      	add	r2, r3
 801490c:	696b      	ldr	r3, [r5, #20]
 801490e:	3301      	adds	r3, #1
 8014910:	602a      	str	r2, [r5, #0]
 8014912:	616b      	str	r3, [r5, #20]
 8014914:	69ab      	ldr	r3, [r5, #24]
 8014916:	3b01      	subs	r3, #1
 8014918:	61ab      	str	r3, [r5, #24]
 801491a:	692b      	ldr	r3, [r5, #16]
 801491c:	440b      	add	r3, r1
 801491e:	68e9      	ldr	r1, [r5, #12]
 8014920:	428b      	cmp	r3, r1
 8014922:	612b      	str	r3, [r5, #16]
 8014924:	db15      	blt.n	8014952 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8014926:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801492a:	3201      	adds	r2, #1
 801492c:	1a5b      	subs	r3, r3, r1
 801492e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014932:	602a      	str	r2, [r5, #0]
 8014934:	612b      	str	r3, [r5, #16]
 8014936:	edc5 6a07 	vstr	s13, [r5, #28]
 801493a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801493e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014942:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8014946:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801494a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801494e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8014952:	3f01      	subs	r7, #1
 8014954:	e757      	b.n	8014806 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014956:	ad39      	add	r5, sp, #228	@ 0xe4
 8014958:	ac19      	add	r4, sp, #100	@ 0x64
 801495a:	e72d      	b.n	80147b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801495c:	4613      	mov	r3, r2
 801495e:	e744      	b.n	80147ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8014960:	4613      	mov	r3, r2
 8014962:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8014964:	469e      	mov	lr, r3
 8014966:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801496a:	461f      	mov	r7, r3
 801496c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8014970:	f04f 0900 	mov.w	r9, #0
 8014974:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8014978:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801497c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8014980:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8014984:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8014988:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801498a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801498e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8014992:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8014996:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801499a:	960e      	str	r6, [sp, #56]	@ 0x38
 801499c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80149a0:	2f00      	cmp	r7, #0
 80149a2:	d146      	bne.n	8014a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80149a4:	449c      	add	ip, r3
 80149a6:	1ad7      	subs	r7, r2, r3
 80149a8:	f1b9 0f00 	cmp.w	r9, #0
 80149ac:	d009      	beq.n	80149c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80149ae:	9039      	str	r0, [sp, #228]	@ 0xe4
 80149b0:	913d      	str	r1, [sp, #244]	@ 0xf4
 80149b2:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80149b6:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80149ba:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80149be:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80149c2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80149c4:	f04f 0800 	mov.w	r8, #0
 80149c8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80149cc:	910e      	str	r1, [sp, #56]	@ 0x38
 80149ce:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80149d2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80149d6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80149da:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80149de:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80149e2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80149e6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80149ea:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80149ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80149f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80149f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80149fa:	f1be 0f00 	cmp.w	lr, #0
 80149fe:	d030      	beq.n	8014a62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8014a00:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014a02:	4450      	add	r0, sl
 8014a04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014a08:	4431      	add	r1, r6
 8014a0a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8014a0e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8014a12:	4549      	cmp	r1, r9
 8014a14:	db08      	blt.n	8014a28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8014a16:	ee77 7a85 	vadd.f32	s15, s15, s10
 8014a1a:	3001      	adds	r0, #1
 8014a1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014a20:	eba1 0109 	sub.w	r1, r1, r9
 8014a24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014a28:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014a2c:	f04f 0801 	mov.w	r8, #1
 8014a30:	e7e3      	b.n	80149fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8014a32:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014a34:	4450      	add	r0, sl
 8014a36:	ee37 7a24 	vadd.f32	s14, s14, s9
 8014a3a:	4431      	add	r1, r6
 8014a3c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014a40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014a44:	4541      	cmp	r1, r8
 8014a46:	db08      	blt.n	8014a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014a48:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014a4c:	3001      	adds	r0, #1
 8014a4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014a52:	eba1 0108 	sub.w	r1, r1, r8
 8014a56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014a5a:	3f01      	subs	r7, #1
 8014a5c:	f04f 0901 	mov.w	r9, #1
 8014a60:	e79e      	b.n	80149a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8014a62:	449c      	add	ip, r3
 8014a64:	1aff      	subs	r7, r7, r3
 8014a66:	f1b8 0f00 	cmp.w	r8, #0
 8014a6a:	d009      	beq.n	8014a80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014a6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8014a6e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8014a72:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8014a76:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8014a7a:	911d      	str	r1, [sp, #116]	@ 0x74
 8014a7c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8014a80:	1ad2      	subs	r2, r2, r3
 8014a82:	e6b5      	b.n	80147f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	b923      	cbnz	r3, 8014a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014a8a:	4b04      	ldr	r3, [pc, #16]	@ (8014a9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014a8c:	6818      	ldr	r0, [r3, #0]
 8014a8e:	6803      	ldr	r3, [r0, #0]
 8014a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a92:	4798      	blx	r3
 8014a94:	b05b      	add	sp, #364	@ 0x16c
 8014a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a9a:	bf00      	nop
 8014a9c:	24025934 	.word	0x24025934

08014aa0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8014aa0:	b570      	push	{r4, r5, r6, lr}
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	2500      	movs	r5, #0
 8014aa6:	9805      	ldr	r0, [sp, #20]
 8014aa8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8014aac:	6061      	str	r1, [r4, #4]
 8014aae:	8263      	strh	r3, [r4, #18]
 8014ab0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8014ab4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014ab8:	8025      	strh	r5, [r4, #0]
 8014aba:	7221      	strb	r1, [r4, #8]
 8014abc:	7266      	strb	r6, [r4, #9]
 8014abe:	60e0      	str	r0, [r4, #12]
 8014ac0:	8222      	strh	r2, [r4, #16]
 8014ac2:	82a3      	strh	r3, [r4, #20]
 8014ac4:	82e5      	strh	r5, [r4, #22]
 8014ac6:	8325      	strh	r5, [r4, #24]
 8014ac8:	8365      	strh	r5, [r4, #26]
 8014aca:	83a5      	strh	r5, [r4, #28]
 8014acc:	83e5      	strh	r5, [r4, #30]
 8014ace:	8425      	strh	r5, [r4, #32]
 8014ad0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8014ad4:	b32e      	cbz	r6, 8014b22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014ad6:	6803      	ldr	r3, [r0, #0]
 8014ad8:	695b      	ldr	r3, [r3, #20]
 8014ada:	4798      	blx	r3
 8014adc:	4606      	mov	r6, r0
 8014ade:	b300      	cbz	r0, 8014b22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014ae0:	68e0      	ldr	r0, [r4, #12]
 8014ae2:	4631      	mov	r1, r6
 8014ae4:	6803      	ldr	r3, [r0, #0]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	4798      	blx	r3
 8014aea:	4605      	mov	r5, r0
 8014aec:	b1c8      	cbz	r0, 8014b22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014aee:	7b43      	ldrb	r3, [r0, #13]
 8014af0:	7a82      	ldrb	r2, [r0, #10]
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014af8:	4313      	orrs	r3, r2
 8014afa:	8423      	strh	r3, [r4, #32]
 8014afc:	7a63      	ldrb	r3, [r4, #9]
 8014afe:	2b06      	cmp	r3, #6
 8014b00:	d10f      	bne.n	8014b22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8014b02:	68e0      	ldr	r0, [r4, #12]
 8014b04:	462a      	mov	r2, r5
 8014b06:	4631      	mov	r1, r6
 8014b08:	6803      	ldr	r3, [r0, #0]
 8014b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b0c:	4798      	blx	r3
 8014b0e:	7b6b      	ldrb	r3, [r5, #13]
 8014b10:	005b      	lsls	r3, r3, #1
 8014b12:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014b16:	7aab      	ldrb	r3, [r5, #10]
 8014b18:	4313      	orrs	r3, r2
 8014b1a:	4418      	add	r0, r3
 8014b1c:	8c23      	ldrh	r3, [r4, #32]
 8014b1e:	4418      	add	r0, r3
 8014b20:	8420      	strh	r0, [r4, #32]
 8014b22:	4620      	mov	r0, r4
 8014b24:	bd70      	pop	{r4, r5, r6, pc}

08014b26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8014b26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b2a:	2400      	movs	r4, #0
 8014b2c:	b085      	sub	sp, #20
 8014b2e:	4681      	mov	r9, r0
 8014b30:	4688      	mov	r8, r1
 8014b32:	4692      	mov	sl, r2
 8014b34:	469b      	mov	fp, r3
 8014b36:	4627      	mov	r7, r4
 8014b38:	4625      	mov	r5, r4
 8014b3a:	4626      	mov	r6, r4
 8014b3c:	4554      	cmp	r4, sl
 8014b3e:	da2a      	bge.n	8014b96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014b40:	2300      	movs	r3, #0
 8014b42:	9303      	str	r3, [sp, #12]
 8014b44:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8014b48:	429d      	cmp	r5, r3
 8014b4a:	d004      	beq.n	8014b56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8014b4c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8014b50:	429d      	cmp	r5, r3
 8014b52:	bf18      	it	ne
 8014b54:	462f      	movne	r7, r5
 8014b56:	ab03      	add	r3, sp, #12
 8014b58:	4642      	mov	r2, r8
 8014b5a:	4659      	mov	r1, fp
 8014b5c:	4648      	mov	r0, r9
 8014b5e:	f003 fc8b 	bl	8018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014b62:	4605      	mov	r5, r0
 8014b64:	b1b8      	cbz	r0, 8014b96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014b66:	280a      	cmp	r0, #10
 8014b68:	d015      	beq.n	8014b96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8014b6a:	9a03      	ldr	r2, [sp, #12]
 8014b6c:	b18a      	cbz	r2, 8014b92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8014b6e:	7b50      	ldrb	r0, [r2, #13]
 8014b70:	4639      	mov	r1, r7
 8014b72:	7a93      	ldrb	r3, [r2, #10]
 8014b74:	0040      	lsls	r0, r0, #1
 8014b76:	8895      	ldrh	r5, [r2, #4]
 8014b78:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8014b7c:	4303      	orrs	r3, r0
 8014b7e:	4640      	mov	r0, r8
 8014b80:	9301      	str	r3, [sp, #4]
 8014b82:	f8d8 3000 	ldr.w	r3, [r8]
 8014b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014b88:	4798      	blx	r3
 8014b8a:	9b01      	ldr	r3, [sp, #4]
 8014b8c:	4418      	add	r0, r3
 8014b8e:	4406      	add	r6, r0
 8014b90:	b2b6      	uxth	r6, r6
 8014b92:	3401      	adds	r4, #1
 8014b94:	e7d2      	b.n	8014b3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8014b96:	4630      	mov	r0, r6
 8014b98:	b005      	add	sp, #20
 8014b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8014b9e:	2a02      	cmp	r2, #2
 8014ba0:	b530      	push	{r4, r5, lr}
 8014ba2:	d011      	beq.n	8014bc8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8014ba4:	2a03      	cmp	r2, #3
 8014ba6:	d01c      	beq.n	8014be2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8014ba8:	2a01      	cmp	r2, #1
 8014baa:	d10c      	bne.n	8014bc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014bac:	888b      	ldrh	r3, [r1, #4]
 8014bae:	8801      	ldrh	r1, [r0, #0]
 8014bb0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8014bb4:	1a5b      	subs	r3, r3, r1
 8014bb6:	8844      	ldrh	r4, [r0, #2]
 8014bb8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014bbc:	1a9b      	subs	r3, r3, r2
 8014bbe:	8004      	strh	r4, [r0, #0]
 8014bc0:	8081      	strh	r1, [r0, #4]
 8014bc2:	8043      	strh	r3, [r0, #2]
 8014bc4:	80c2      	strh	r2, [r0, #6]
 8014bc6:	bd30      	pop	{r4, r5, pc}
 8014bc8:	88cb      	ldrh	r3, [r1, #6]
 8014bca:	8842      	ldrh	r2, [r0, #2]
 8014bcc:	1a9b      	subs	r3, r3, r2
 8014bce:	88c2      	ldrh	r2, [r0, #6]
 8014bd0:	1a9b      	subs	r3, r3, r2
 8014bd2:	888a      	ldrh	r2, [r1, #4]
 8014bd4:	8801      	ldrh	r1, [r0, #0]
 8014bd6:	8043      	strh	r3, [r0, #2]
 8014bd8:	1a52      	subs	r2, r2, r1
 8014bda:	8881      	ldrh	r1, [r0, #4]
 8014bdc:	1a52      	subs	r2, r2, r1
 8014bde:	8002      	strh	r2, [r0, #0]
 8014be0:	e7f1      	b.n	8014bc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8014be2:	88cb      	ldrh	r3, [r1, #6]
 8014be4:	8841      	ldrh	r1, [r0, #2]
 8014be6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8014bea:	1a5b      	subs	r3, r3, r1
 8014bec:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014bf0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8014bf4:	1a9b      	subs	r3, r3, r2
 8014bf6:	8045      	strh	r5, [r0, #2]
 8014bf8:	8082      	strh	r2, [r0, #4]
 8014bfa:	8003      	strh	r3, [r0, #0]
 8014bfc:	80c4      	strh	r4, [r0, #6]
 8014bfe:	e7e2      	b.n	8014bc6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08014c00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8014c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c04:	b09f      	sub	sp, #124	@ 0x7c
 8014c06:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014c08:	9312      	str	r3, [sp, #72]	@ 0x48
 8014c0a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8014c0c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8014c0e:	8812      	ldrh	r2, [r2, #0]
 8014c10:	889b      	ldrh	r3, [r3, #4]
 8014c12:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8014c14:	4413      	add	r3, r2
 8014c16:	900e      	str	r0, [sp, #56]	@ 0x38
 8014c18:	6828      	ldr	r0, [r5, #0]
 8014c1a:	b21b      	sxth	r3, r3
 8014c1c:	9117      	str	r1, [sp, #92]	@ 0x5c
 8014c1e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8014c22:	9311      	str	r3, [sp, #68]	@ 0x44
 8014c24:	6803      	ldr	r3, [r0, #0]
 8014c26:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8014c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c2c:	4798      	blx	r3
 8014c2e:	682b      	ldr	r3, [r5, #0]
 8014c30:	9013      	str	r0, [sp, #76]	@ 0x4c
 8014c32:	7b1a      	ldrb	r2, [r3, #12]
 8014c34:	7adb      	ldrb	r3, [r3, #11]
 8014c36:	9215      	str	r2, [sp, #84]	@ 0x54
 8014c38:	9316      	str	r3, [sp, #88]	@ 0x58
 8014c3a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8014c3e:	2c00      	cmp	r4, #0
 8014c40:	d067      	beq.n	8014d12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8014c42:	7c2b      	ldrb	r3, [r5, #16]
 8014c44:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8014c46:	2b06      	cmp	r3, #6
 8014c48:	bf14      	ite	ne
 8014c4a:	2301      	movne	r3, #1
 8014c4c:	2302      	moveq	r3, #2
 8014c4e:	4413      	add	r3, r2
 8014c50:	f04f 0900 	mov.w	r9, #0
 8014c54:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c56:	464c      	mov	r4, r9
 8014c58:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8014c5c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8014c60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c62:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8014c64:	4293      	cmp	r3, r2
 8014c66:	f280 808b 	bge.w	8014d80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8014c70:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8014c74:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8014c78:	429c      	cmp	r4, r3
 8014c7a:	d006      	beq.n	8014c8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8014c7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c7e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8014c82:	4294      	cmp	r4, r2
 8014c84:	bf18      	it	ne
 8014c86:	4623      	movne	r3, r4
 8014c88:	930c      	str	r3, [sp, #48]	@ 0x30
 8014c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c8c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8014c8e:	682a      	ldr	r2, [r5, #0]
 8014c90:	428b      	cmp	r3, r1
 8014c92:	db40      	blt.n	8014d16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8014c94:	6813      	ldr	r3, [r2, #0]
 8014c96:	4610      	mov	r0, r2
 8014c98:	695b      	ldr	r3, [r3, #20]
 8014c9a:	4798      	blx	r3
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	6828      	ldr	r0, [r5, #0]
 8014ca0:	aa1d      	add	r2, sp, #116	@ 0x74
 8014ca2:	4621      	mov	r1, r4
 8014ca4:	6803      	ldr	r3, [r0, #0]
 8014ca6:	689f      	ldr	r7, [r3, #8]
 8014ca8:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8014cac:	47b8      	blx	r7
 8014cae:	901c      	str	r0, [sp, #112]	@ 0x70
 8014cb0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8014cb4:	429c      	cmp	r4, r3
 8014cb6:	f000 80eb 	beq.w	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014cba:	f242 030b 	movw	r3, #8203	@ 0x200b
 8014cbe:	429c      	cmp	r4, r3
 8014cc0:	f000 80e6 	beq.w	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014cc4:	2c00      	cmp	r4, #0
 8014cc6:	f000 810d 	beq.w	8014ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8014cca:	2c0a      	cmp	r4, #10
 8014ccc:	d05e      	beq.n	8014d8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8014cce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014cd0:	b36a      	cbz	r2, 8014d2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8014cd2:	8894      	ldrh	r4, [r2, #4]
 8014cd4:	f1bb 0f00 	cmp.w	fp, #0
 8014cd8:	d03a      	beq.n	8014d50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8014cda:	f892 900d 	ldrb.w	r9, [r2, #13]
 8014cde:	f1bb 0f01 	cmp.w	fp, #1
 8014ce2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8014ce6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8014cea:	f892 900a 	ldrb.w	r9, [r2, #10]
 8014cee:	ea49 0903 	orr.w	r9, r9, r3
 8014cf2:	d133      	bne.n	8014d5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8014cf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cf6:	eba6 0609 	sub.w	r6, r6, r9
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d14d      	bne.n	8014d9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8014cfe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8014d00:	eb09 0306 	add.w	r3, r9, r6
 8014d04:	4413      	add	r3, r2
 8014d06:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8014d08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	da4e      	bge.n	8014dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8014d10:	e036      	b.n	8014d80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8014d12:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8014d14:	e79c      	b.n	8014c50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8014d16:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8014d1a:	4659      	mov	r1, fp
 8014d1c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8014d1e:	9301      	str	r3, [sp, #4]
 8014d20:	ab1d      	add	r3, sp, #116	@ 0x74
 8014d22:	9300      	str	r3, [sp, #0]
 8014d24:	ab1c      	add	r3, sp, #112	@ 0x70
 8014d26:	f003 fbf0 	bl	801850a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8014d2a:	4604      	mov	r4, r0
 8014d2c:	e7c0      	b.n	8014cb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8014d2e:	6828      	ldr	r0, [r5, #0]
 8014d30:	6803      	ldr	r3, [r0, #0]
 8014d32:	691b      	ldr	r3, [r3, #16]
 8014d34:	4798      	blx	r3
 8014d36:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8014d3a:	4298      	cmp	r0, r3
 8014d3c:	f000 80a8 	beq.w	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014d40:	f242 030b 	movw	r3, #8203	@ 0x200b
 8014d44:	4298      	cmp	r0, r3
 8014d46:	f000 80a3 	beq.w	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014d4a:	f1bb 0f00 	cmp.w	fp, #0
 8014d4e:	d100      	bne.n	8014d52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8014d50:	444e      	add	r6, r9
 8014d52:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014d54:	2a00      	cmp	r2, #0
 8014d56:	d1c0      	bne.n	8014cda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8014d58:	4691      	mov	r9, r2
 8014d5a:	e099      	b.n	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014d5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	f000 80c2 	beq.w	8014ee8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8014d64:	f1bb 0f00 	cmp.w	fp, #0
 8014d68:	d117      	bne.n	8014d9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8014d6a:	6828      	ldr	r0, [r5, #0]
 8014d6c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014d6e:	6803      	ldr	r3, [r0, #0]
 8014d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d72:	4798      	blx	r3
 8014d74:	4406      	add	r6, r0
 8014d76:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014d78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014d7a:	1af3      	subs	r3, r6, r3
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	dd16      	ble.n	8014dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8014d80:	2c00      	cmp	r4, #0
 8014d82:	f000 80af 	beq.w	8014ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8014d86:	2c0a      	cmp	r4, #10
 8014d88:	f040 809d 	bne.w	8014ec6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8014d8c:	240a      	movs	r4, #10
 8014d8e:	fab4 f084 	clz	r0, r4
 8014d92:	0940      	lsrs	r0, r0, #5
 8014d94:	b01f      	add	sp, #124	@ 0x7c
 8014d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9a:	6828      	ldr	r0, [r5, #0]
 8014d9c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014d9e:	6803      	ldr	r3, [r0, #0]
 8014da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014da2:	4798      	blx	r3
 8014da4:	f1bb 0f01 	cmp.w	fp, #1
 8014da8:	eba6 0600 	sub.w	r6, r6, r0
 8014dac:	d0a7      	beq.n	8014cfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8014dae:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8014db0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8014db2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8014db6:	f9b3 8000 	ldrsh.w	r8, [r3]
 8014dba:	7b43      	ldrb	r3, [r0, #13]
 8014dbc:	4431      	add	r1, r6
 8014dbe:	015b      	lsls	r3, r3, #5
 8014dc0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014dc4:	7983      	ldrb	r3, [r0, #6]
 8014dc6:	4313      	orrs	r3, r2
 8014dc8:	440b      	add	r3, r1
 8014dca:	4543      	cmp	r3, r8
 8014dcc:	db60      	blt.n	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014dce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014dd0:	4299      	cmp	r1, r3
 8014dd2:	da5d      	bge.n	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014dd4:	6828      	ldr	r0, [r5, #0]
 8014dd6:	45b0      	cmp	r8, r6
 8014dd8:	6803      	ldr	r3, [r0, #0]
 8014dda:	bfcc      	ite	gt
 8014ddc:	eba8 0806 	subgt.w	r8, r8, r6
 8014de0:	f04f 0800 	movle.w	r8, #0
 8014de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014de6:	bfc8      	it	gt
 8014de8:	fa1f f888 	uxthgt.w	r8, r8
 8014dec:	4798      	blx	r3
 8014dee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014df0:	7b53      	ldrb	r3, [r2, #13]
 8014df2:	00d9      	lsls	r1, r3, #3
 8014df4:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8014df8:	7a11      	ldrb	r1, [r2, #8]
 8014dfa:	4339      	orrs	r1, r7
 8014dfc:	065f      	lsls	r7, r3, #25
 8014dfe:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8014e00:	bf48      	it	mi
 8014e02:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8014e06:	4407      	add	r7, r0
 8014e08:	bf48      	it	mi
 8014e0a:	b209      	sxthmi	r1, r1
 8014e0c:	1a7f      	subs	r7, r7, r1
 8014e0e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8014e10:	b2bf      	uxth	r7, r7
 8014e12:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8014e16:	fa0f fa87 	sxth.w	sl, r7
 8014e1a:	4551      	cmp	r1, sl
 8014e1c:	dd3c      	ble.n	8014e98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8014e1e:	011b      	lsls	r3, r3, #4
 8014e20:	79d0      	ldrb	r0, [r2, #7]
 8014e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e26:	4303      	orrs	r3, r0
 8014e28:	449a      	add	sl, r3
 8014e2a:	4551      	cmp	r1, sl
 8014e2c:	dc30      	bgt.n	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014e2e:	1bcf      	subs	r7, r1, r7
 8014e30:	468a      	mov	sl, r1
 8014e32:	b23f      	sxth	r7, r7
 8014e34:	9219      	str	r2, [sp, #100]	@ 0x64
 8014e36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014e38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014e3a:	6828      	ldr	r0, [r5, #0]
 8014e3c:	2a00      	cmp	r2, #0
 8014e3e:	d12d      	bne.n	8014e9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8014e40:	9318      	str	r3, [sp, #96]	@ 0x60
 8014e42:	b2bf      	uxth	r7, r7
 8014e44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e46:	6819      	ldr	r1, [r3, #0]
 8014e48:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8014e4a:	6801      	ldr	r1, [r0, #0]
 8014e4c:	9314      	str	r3, [sp, #80]	@ 0x50
 8014e4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014e50:	4788      	blx	r1
 8014e52:	79a9      	ldrb	r1, [r5, #6]
 8014e54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014e56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8014e58:	7ba9      	ldrb	r1, [r5, #14]
 8014e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014e5c:	910a      	str	r1, [sp, #40]	@ 0x28
 8014e5e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8014e62:	9109      	str	r1, [sp, #36]	@ 0x24
 8014e64:	68a9      	ldr	r1, [r5, #8]
 8014e66:	9306      	str	r3, [sp, #24]
 8014e68:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8014e6a:	9205      	str	r2, [sp, #20]
 8014e6c:	9304      	str	r3, [sp, #16]
 8014e6e:	f8cd a004 	str.w	sl, [sp, #4]
 8014e72:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8014e76:	44b0      	add	r8, r6
 8014e78:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014e7a:	fa0f f388 	sxth.w	r3, r8
 8014e7e:	9300      	str	r3, [sp, #0]
 8014e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014e82:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8014e86:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8014e88:	681a      	ldr	r2, [r3, #0]
 8014e8a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	47b8      	blx	r7
 8014e90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e92:	3301      	adds	r3, #1
 8014e94:	930d      	str	r3, [sp, #52]	@ 0x34
 8014e96:	e6e3      	b.n	8014c60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8014e98:	2700      	movs	r7, #0
 8014e9a:	e7cb      	b.n	8014e34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8014e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014e9e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8014ea2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8014ea4:	f8dc 1000 	ldr.w	r1, [ip]
 8014ea8:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8014eac:	79aa      	ldrb	r2, [r5, #6]
 8014eae:	9203      	str	r2, [sp, #12]
 8014eb0:	7baa      	ldrb	r2, [r5, #14]
 8014eb2:	9202      	str	r2, [sp, #8]
 8014eb4:	68aa      	ldr	r2, [r5, #8]
 8014eb6:	e9cd 0200 	strd	r0, r2, [sp]
 8014eba:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8014ebc:	4660      	mov	r0, ip
 8014ebe:	688f      	ldr	r7, [r1, #8]
 8014ec0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014ec2:	47b8      	blx	r7
 8014ec4:	e7e4      	b.n	8014e90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8014ec6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8014ec8:	3501      	adds	r5, #1
 8014eca:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8014ecc:	429d      	cmp	r5, r3
 8014ece:	f6bf af5e 	bge.w	8014d8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8014ed2:	4659      	mov	r1, fp
 8014ed4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8014ed6:	f7ef ff2d 	bl	8004d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014eda:	4604      	mov	r4, r0
 8014edc:	b110      	cbz	r0, 8014ee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8014ede:	280a      	cmp	r0, #10
 8014ee0:	d1f2      	bne.n	8014ec8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8014ee2:	e753      	b.n	8014d8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8014ee4:	2400      	movs	r4, #0
 8014ee6:	e752      	b.n	8014d8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8014ee8:	f1bb 0f00 	cmp.w	fp, #0
 8014eec:	f43f af43 	beq.w	8014d76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8014ef0:	e75d      	b.n	8014dae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08014ef2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8014ef2:	b530      	push	{r4, r5, lr}
 8014ef4:	8ac4      	ldrh	r4, [r0, #22]
 8014ef6:	8b45      	ldrh	r5, [r0, #26]
 8014ef8:	8343      	strh	r3, [r0, #26]
 8014efa:	442c      	add	r4, r5
 8014efc:	1ae4      	subs	r4, r4, r3
 8014efe:	8b83      	ldrh	r3, [r0, #28]
 8014f00:	82c4      	strh	r4, [r0, #22]
 8014f02:	8b04      	ldrh	r4, [r0, #24]
 8014f04:	4422      	add	r2, r4
 8014f06:	440c      	add	r4, r1
 8014f08:	1a59      	subs	r1, r3, r1
 8014f0a:	83c2      	strh	r2, [r0, #30]
 8014f0c:	8304      	strh	r4, [r0, #24]
 8014f0e:	8381      	strh	r1, [r0, #28]
 8014f10:	bd30      	pop	{r4, r5, pc}

08014f12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8014f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f16:	4604      	mov	r4, r0
 8014f18:	8a47      	ldrh	r7, [r0, #18]
 8014f1a:	68c0      	ldr	r0, [r0, #12]
 8014f1c:	b085      	sub	sp, #20
 8014f1e:	6803      	ldr	r3, [r0, #0]
 8014f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f22:	4798      	blx	r3
 8014f24:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8014f28:	7a63      	ldrb	r3, [r4, #9]
 8014f2a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8014f2e:	3b01      	subs	r3, #1
 8014f30:	42b7      	cmp	r7, r6
 8014f32:	bfac      	ite	ge
 8014f34:	f04f 0900 	movge.w	r9, #0
 8014f38:	f04f 0901 	movlt.w	r9, #1
 8014f3c:	2b05      	cmp	r3, #5
 8014f3e:	d804      	bhi.n	8014f4a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8014f40:	e8df f003 	tbb	[pc, r3]
 8014f44:	470f0854 	.word	0x470f0854
 8014f48:	4c4c      	.short	0x4c4c
 8014f4a:	2500      	movs	r5, #0
 8014f4c:	46a9      	mov	r9, r5
 8014f4e:	462e      	mov	r6, r5
 8014f50:	462f      	mov	r7, r5
 8014f52:	e00e      	b.n	8014f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014f54:	42b7      	cmp	r7, r6
 8014f56:	f04f 0500 	mov.w	r5, #0
 8014f5a:	bfb4      	ite	lt
 8014f5c:	2600      	movlt	r6, #0
 8014f5e:	2601      	movge	r6, #1
 8014f60:	e7f6      	b.n	8014f50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8014f62:	42b7      	cmp	r7, r6
 8014f64:	464d      	mov	r5, r9
 8014f66:	f04f 0900 	mov.w	r9, #0
 8014f6a:	bfb4      	ite	lt
 8014f6c:	2600      	movlt	r6, #0
 8014f6e:	2601      	movge	r6, #1
 8014f70:	464f      	mov	r7, r9
 8014f72:	f04f 0800 	mov.w	r8, #0
 8014f76:	f8a4 8016 	strh.w	r8, [r4, #22]
 8014f7a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8014f7e:	f8cd 8004 	str.w	r8, [sp, #4]
 8014f82:	2300      	movs	r3, #0
 8014f84:	9303      	str	r3, [sp, #12]
 8014f86:	8823      	ldrh	r3, [r4, #0]
 8014f88:	2b20      	cmp	r3, #32
 8014f8a:	d033      	beq.n	8014ff4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8014f8c:	f242 010b 	movw	r1, #8203	@ 0x200b
 8014f90:	1a5a      	subs	r2, r3, r1
 8014f92:	f1d2 0a00 	rsbs	sl, r2, #0
 8014f96:	eb4a 0a02 	adc.w	sl, sl, r2
 8014f9a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8014f9e:	4293      	cmp	r3, r2
 8014fa0:	d008      	beq.n	8014fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8014fa2:	428b      	cmp	r3, r1
 8014fa4:	9a01      	ldr	r2, [sp, #4]
 8014fa6:	bf0e      	itee	eq
 8014fa8:	f04f 0a01 	moveq.w	sl, #1
 8014fac:	461a      	movne	r2, r3
 8014fae:	f04f 0a00 	movne.w	sl, #0
 8014fb2:	9201      	str	r2, [sp, #4]
 8014fb4:	ab03      	add	r3, sp, #12
 8014fb6:	68e2      	ldr	r2, [r4, #12]
 8014fb8:	7a21      	ldrb	r1, [r4, #8]
 8014fba:	6860      	ldr	r0, [r4, #4]
 8014fbc:	f003 fa5c 	bl	8018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014fc0:	8020      	strh	r0, [r4, #0]
 8014fc2:	b9d8      	cbnz	r0, 8014ffc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8014fc4:	8ba2      	ldrh	r2, [r4, #28]
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	4611      	mov	r1, r2
 8014fca:	4620      	mov	r0, r4
 8014fcc:	f7ff ff91 	bl	8014ef2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8014fd0:	e06e      	b.n	80150b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8014fd2:	2500      	movs	r5, #0
 8014fd4:	2701      	movs	r7, #1
 8014fd6:	46a9      	mov	r9, r5
 8014fd8:	462e      	mov	r6, r5
 8014fda:	e7ca      	b.n	8014f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014fdc:	42b7      	cmp	r7, r6
 8014fde:	f04f 0500 	mov.w	r5, #0
 8014fe2:	bfb4      	ite	lt
 8014fe4:	2700      	movlt	r7, #0
 8014fe6:	2701      	movge	r7, #1
 8014fe8:	462e      	mov	r6, r5
 8014fea:	e7c2      	b.n	8014f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8014fec:	2500      	movs	r5, #0
 8014fee:	2601      	movs	r6, #1
 8014ff0:	46a9      	mov	r9, r5
 8014ff2:	e7ad      	b.n	8014f50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8014ff4:	9301      	str	r3, [sp, #4]
 8014ff6:	f04f 0a01 	mov.w	sl, #1
 8014ffa:	e7db      	b.n	8014fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8014ffc:	8b63      	ldrh	r3, [r4, #26]
 8014ffe:	280a      	cmp	r0, #10
 8015000:	f103 0301 	add.w	r3, r3, #1
 8015004:	8363      	strh	r3, [r4, #26]
 8015006:	d0dd      	beq.n	8014fc4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015008:	9a03      	ldr	r2, [sp, #12]
 801500a:	bb62      	cbnz	r2, 8015066 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801500c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015010:	4298      	cmp	r0, r3
 8015012:	d003      	beq.n	801501c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015014:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015018:	4298      	cmp	r0, r3
 801501a:	d1b2      	bne.n	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801501c:	8823      	ldrh	r3, [r4, #0]
 801501e:	8ba1      	ldrh	r1, [r4, #28]
 8015020:	2b20      	cmp	r3, #32
 8015022:	d003      	beq.n	801502c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015024:	f242 000b 	movw	r0, #8203	@ 0x200b
 8015028:	4283      	cmp	r3, r0
 801502a:	d131      	bne.n	8015090 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801502c:	f1ba 0f00 	cmp.w	sl, #0
 8015030:	bf0a      	itet	eq
 8015032:	4688      	moveq	r8, r1
 8015034:	4650      	movne	r0, sl
 8015036:	2001      	moveq	r0, #1
 8015038:	440a      	add	r2, r1
 801503a:	8b23      	ldrh	r3, [r4, #24]
 801503c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015040:	b292      	uxth	r2, r2
 8015042:	83a2      	strh	r2, [r4, #28]
 8015044:	4413      	add	r3, r2
 8015046:	f1b9 0f00 	cmp.w	r9, #0
 801504a:	d102      	bne.n	8015052 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801504c:	2d00      	cmp	r5, #0
 801504e:	d042      	beq.n	80150d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015050:	b300      	cbz	r0, 8015094 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8015052:	8c21      	ldrh	r1, [r4, #32]
 8015054:	4419      	add	r1, r3
 8015056:	458c      	cmp	ip, r1
 8015058:	da37      	bge.n	80150ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801505a:	8ae1      	ldrh	r1, [r4, #22]
 801505c:	2900      	cmp	r1, #0
 801505e:	d034      	beq.n	80150ca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015060:	4563      	cmp	r3, ip
 8015062:	dd8e      	ble.n	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015064:	e01d      	b.n	80150a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015066:	8893      	ldrh	r3, [r2, #4]
 8015068:	9901      	ldr	r1, [sp, #4]
 801506a:	8023      	strh	r3, [r4, #0]
 801506c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015070:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015074:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8015078:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801507c:	ea4b 0b00 	orr.w	fp, fp, r0
 8015080:	68e0      	ldr	r0, [r4, #12]
 8015082:	6803      	ldr	r3, [r0, #0]
 8015084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015086:	4798      	blx	r3
 8015088:	eb0b 0200 	add.w	r2, fp, r0
 801508c:	b292      	uxth	r2, r2
 801508e:	e7c5      	b.n	801501c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015090:	2000      	movs	r0, #0
 8015092:	e7d1      	b.n	8015038 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015094:	4563      	cmp	r3, ip
 8015096:	f77f af74 	ble.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801509a:	8ae3      	ldrh	r3, [r4, #22]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f43f af70 	beq.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80150a2:	2301      	movs	r3, #1
 80150a4:	8c22      	ldrh	r2, [r4, #32]
 80150a6:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80150aa:	8be3      	ldrh	r3, [r4, #30]
 80150ac:	4413      	add	r3, r2
 80150ae:	83e3      	strh	r3, [r4, #30]
 80150b0:	68e0      	ldr	r0, [r4, #12]
 80150b2:	6803      	ldr	r3, [r0, #0]
 80150b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150b6:	4798      	blx	r3
 80150b8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80150bc:	4418      	add	r0, r3
 80150be:	8a63      	ldrh	r3, [r4, #18]
 80150c0:	1a18      	subs	r0, r3, r0
 80150c2:	8260      	strh	r0, [r4, #18]
 80150c4:	b005      	add	sp, #20
 80150c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ca:	2300      	movs	r3, #0
 80150cc:	4611      	mov	r1, r2
 80150ce:	4620      	mov	r0, r4
 80150d0:	f7ff ff0f 	bl	8014ef2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80150d4:	e755      	b.n	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80150d6:	4563      	cmp	r3, ip
 80150d8:	dd14      	ble.n	8015104 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80150da:	b117      	cbz	r7, 80150e2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80150dc:	2301      	movs	r3, #1
 80150de:	460a      	mov	r2, r1
 80150e0:	e772      	b.n	8014fc8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80150e2:	2e00      	cmp	r6, #0
 80150e4:	f43f af4d 	beq.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	f47f af4a 	bne.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80150ee:	f1ba 0f00 	cmp.w	sl, #0
 80150f2:	d002      	beq.n	80150fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80150f4:	2301      	movs	r3, #1
 80150f6:	4642      	mov	r2, r8
 80150f8:	e767      	b.n	8014fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80150fa:	8ae3      	ldrh	r3, [r4, #22]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f43f af40 	beq.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015102:	e7d5      	b.n	80150b0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015104:	2800      	cmp	r0, #0
 8015106:	f47f af3c 	bne.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801510a:	f1ba 0f00 	cmp.w	sl, #0
 801510e:	f43f af38 	beq.w	8014f82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015112:	2301      	movs	r3, #1
 8015114:	4642      	mov	r2, r8
 8015116:	e7da      	b.n	80150ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015118 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801511a:	4605      	mov	r5, r0
 801511c:	b08f      	sub	sp, #60	@ 0x3c
 801511e:	4617      	mov	r7, r2
 8015120:	461c      	mov	r4, r3
 8015122:	460e      	mov	r6, r1
 8015124:	b1d1      	cbz	r1, 801515c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4620      	mov	r0, r4
 801512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801512c:	4798      	blx	r3
 801512e:	4240      	negs	r0, r0
 8015130:	9603      	str	r6, [sp, #12]
 8015132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015136:	b200      	sxth	r0, r0
 8015138:	9700      	str	r7, [sp, #0]
 801513a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801513e:	4629      	mov	r1, r5
 8015140:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015144:	2401      	movs	r4, #1
 8015146:	a805      	add	r0, sp, #20
 8015148:	f7ff fcaa 	bl	8014aa0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801514c:	a805      	add	r0, sp, #20
 801514e:	f7ff fee0 	bl	8014f12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015152:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015156:	b163      	cbz	r3, 8015172 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015158:	3401      	adds	r4, #1
 801515a:	e7f7      	b.n	801514c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801515c:	2401      	movs	r4, #1
 801515e:	f003 fa57 	bl	8018610 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015162:	280a      	cmp	r0, #10
 8015164:	4628      	mov	r0, r5
 8015166:	bf08      	it	eq
 8015168:	3401      	addeq	r4, #1
 801516a:	f003 fa51 	bl	8018610 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801516e:	2800      	cmp	r0, #0
 8015170:	d1f7      	bne.n	8015162 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8015172:	b2a0      	uxth	r0, r4
 8015174:	b00f      	add	sp, #60	@ 0x3c
 8015176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015178 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801517c:	b0e3      	sub	sp, #396	@ 0x18c
 801517e:	461c      	mov	r4, r3
 8015180:	4683      	mov	fp, r0
 8015182:	4688      	mov	r8, r1
 8015184:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8015186:	2b00      	cmp	r3, #0
 8015188:	f000 8112 	beq.w	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801518c:	6823      	ldr	r3, [r4, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	f000 810e 	beq.w	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015194:	7ba3      	ldrb	r3, [r4, #14]
 8015196:	2b00      	cmp	r3, #0
 8015198:	f000 810a 	beq.w	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801519c:	ad0a      	add	r5, sp, #40	@ 0x28
 801519e:	6810      	ldr	r0, [r2, #0]
 80151a0:	6851      	ldr	r1, [r2, #4]
 80151a2:	462b      	mov	r3, r5
 80151a4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80151a8:	c303      	stmia	r3!, {r0, r1}
 80151aa:	2100      	movs	r1, #0
 80151ac:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80151b0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80151b4:	4628      	mov	r0, r5
 80151b6:	910c      	str	r1, [sp, #48]	@ 0x30
 80151b8:	a90c      	add	r1, sp, #48	@ 0x30
 80151ba:	79a2      	ldrb	r2, [r4, #6]
 80151bc:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80151c0:	f7ff fced 	bl	8014b9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80151c4:	a90c      	add	r1, sp, #48	@ 0x30
 80151c6:	79a2      	ldrb	r2, [r4, #6]
 80151c8:	4608      	mov	r0, r1
 80151ca:	f7ff fce8 	bl	8014b9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80151ce:	a817      	add	r0, sp, #92	@ 0x5c
 80151d0:	f002 fdc4 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 80151d4:	6820      	ldr	r0, [r4, #0]
 80151d6:	6803      	ldr	r3, [r0, #0]
 80151d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80151da:	4798      	blx	r3
 80151dc:	4606      	mov	r6, r0
 80151de:	6820      	ldr	r0, [r4, #0]
 80151e0:	6803      	ldr	r3, [r0, #0]
 80151e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80151e4:	4798      	blx	r3
 80151e6:	4633      	mov	r3, r6
 80151e8:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80151ea:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80151ec:	9000      	str	r0, [sp, #0]
 80151ee:	a817      	add	r0, sp, #92	@ 0x5c
 80151f0:	f002 fe0f 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80151f4:	6820      	ldr	r0, [r4, #0]
 80151f6:	f894 a004 	ldrb.w	sl, [r4, #4]
 80151fa:	6803      	ldr	r3, [r0, #0]
 80151fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80151fe:	4798      	blx	r3
 8015200:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015204:	6823      	ldr	r3, [r4, #0]
 8015206:	4607      	mov	r7, r0
 8015208:	4406      	add	r6, r0
 801520a:	a830      	add	r0, sp, #192	@ 0xc0
 801520c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015210:	f002 fda4 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8015214:	7c23      	ldrb	r3, [r4, #16]
 8015216:	b17b      	cbz	r3, 8015238 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015218:	6820      	ldr	r0, [r4, #0]
 801521a:	6803      	ldr	r3, [r0, #0]
 801521c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801521e:	4798      	blx	r3
 8015220:	9009      	str	r0, [sp, #36]	@ 0x24
 8015222:	6820      	ldr	r0, [r4, #0]
 8015224:	6802      	ldr	r2, [r0, #0]
 8015226:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015228:	4790      	blx	r2
 801522a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801522c:	9000      	str	r0, [sp, #0]
 801522e:	a830      	add	r0, sp, #192	@ 0xc0
 8015230:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8015232:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8015234:	f002 fded 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015238:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801523c:	a80e      	add	r0, sp, #56	@ 0x38
 801523e:	7be2      	ldrb	r2, [r4, #15]
 8015240:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015244:	1a8a      	subs	r2, r1, r2
 8015246:	7c21      	ldrb	r1, [r4, #16]
 8015248:	9103      	str	r1, [sp, #12]
 801524a:	b292      	uxth	r2, r2
 801524c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015250:	9102      	str	r1, [sp, #8]
 8015252:	6821      	ldr	r1, [r4, #0]
 8015254:	9101      	str	r1, [sp, #4]
 8015256:	7961      	ldrb	r1, [r4, #5]
 8015258:	9100      	str	r1, [sp, #0]
 801525a:	a930      	add	r1, sp, #192	@ 0xc0
 801525c:	f7ff fc20 	bl	8014aa0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015260:	2e00      	cmp	r6, #0
 8015262:	dc5b      	bgt.n	801531c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015264:	af17      	add	r7, sp, #92	@ 0x5c
 8015266:	f04f 0900 	mov.w	r9, #0
 801526a:	7c23      	ldrb	r3, [r4, #16]
 801526c:	2b00      	cmp	r3, #0
 801526e:	f000 80b1 	beq.w	80153d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8015272:	a80e      	add	r0, sp, #56	@ 0x38
 8015274:	f7ff fe4d 	bl	8014f12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015278:	f1ba 0f00 	cmp.w	sl, #0
 801527c:	f000 80a5 	beq.w	80153ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8015280:	7c23      	ldrb	r3, [r4, #16]
 8015282:	2264      	movs	r2, #100	@ 0x64
 8015284:	4639      	mov	r1, r7
 8015286:	a849      	add	r0, sp, #292	@ 0x124
 8015288:	9309      	str	r3, [sp, #36]	@ 0x24
 801528a:	f00f fef0 	bl	802506e <memcpy>
 801528e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015290:	2b00      	cmp	r3, #0
 8015292:	f000 80a7 	beq.w	80153e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8015296:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801529a:	7922      	ldrb	r2, [r4, #4]
 801529c:	2a01      	cmp	r2, #1
 801529e:	f040 808a 	bne.w	80153b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80152a2:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 80152a6:	1ac0      	subs	r0, r0, r3
 80152a8:	2302      	movs	r3, #2
 80152aa:	fb90 f0f3 	sdiv	r0, r0, r3
 80152ae:	b200      	sxth	r0, r0
 80152b0:	7c23      	ldrb	r3, [r4, #16]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 808b 	beq.w	80153ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 80152b8:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 80152bc:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 80152c0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80152c4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80152c8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80152cc:	2100      	movs	r1, #0
 80152ce:	4410      	add	r0, r2
 80152d0:	4642      	mov	r2, r8
 80152d2:	b200      	sxth	r0, r0
 80152d4:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80152d8:	9000      	str	r0, [sp, #0]
 80152da:	4658      	mov	r0, fp
 80152dc:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80152e0:	f7ff fc8e 	bl	8014c00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	d163      	bne.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80152e8:	b2b2      	uxth	r2, r6
 80152ea:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80152ee:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80152f2:	4413      	add	r3, r2
 80152f4:	1a8a      	subs	r2, r1, r2
 80152f6:	b21b      	sxth	r3, r3
 80152f8:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80152fc:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8015300:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015304:	2a00      	cmp	r2, #0
 8015306:	d153      	bne.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015308:	6822      	ldr	r2, [r4, #0]
 801530a:	8869      	ldrh	r1, [r5, #2]
 801530c:	7a12      	ldrb	r2, [r2, #8]
 801530e:	1a9b      	subs	r3, r3, r2
 8015310:	88ea      	ldrh	r2, [r5, #6]
 8015312:	440a      	add	r2, r1
 8015314:	b212      	sxth	r2, r2
 8015316:	4293      	cmp	r3, r2
 8015318:	dda7      	ble.n	801526a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801531a:	e049      	b.n	80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801531c:	7c23      	ldrb	r3, [r4, #16]
 801531e:	444f      	add	r7, r9
 8015320:	b1c3      	cbz	r3, 8015354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015322:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8015326:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801532a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801532e:	443b      	add	r3, r7
 8015330:	4293      	cmp	r3, r2
 8015332:	da97      	bge.n	8015264 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015334:	a80e      	add	r0, sp, #56	@ 0x38
 8015336:	f7ff fdec 	bl	8014f12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801533a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801533e:	3b01      	subs	r3, #1
 8015340:	b29b      	uxth	r3, r3
 8015342:	454b      	cmp	r3, r9
 8015344:	9309      	str	r3, [sp, #36]	@ 0x24
 8015346:	d021      	beq.n	801538c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015348:	7961      	ldrb	r1, [r4, #5]
 801534a:	a817      	add	r0, sp, #92	@ 0x5c
 801534c:	f7ef fcf2 	bl	8004d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015352:	e7f4      	b.n	801533e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015354:	fa1f f986 	uxth.w	r9, r6
 8015358:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801535c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015360:	443b      	add	r3, r7
 8015362:	4293      	cmp	r3, r2
 8015364:	f6bf af7e 	bge.w	8015264 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015368:	a817      	add	r0, sp, #92	@ 0x5c
 801536a:	f003 f951 	bl	8018610 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801536e:	b1f8      	cbz	r0, 80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015370:	280a      	cmp	r0, #10
 8015372:	d1f1      	bne.n	8015358 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015374:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015378:	444b      	add	r3, r9
 801537a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801537e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8015382:	eba3 0309 	sub.w	r3, r3, r9
 8015386:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801538a:	e7e5      	b.n	8015358 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801538c:	b2b3      	uxth	r3, r6
 801538e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8015392:	441a      	add	r2, r3
 8015394:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8015398:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801539c:	1ad3      	subs	r3, r2, r3
 801539e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80153a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80153a6:	b11b      	cbz	r3, 80153b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80153a8:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d0ba      	beq.n	8015326 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80153b0:	b063      	add	sp, #396	@ 0x18c
 80153b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153b6:	2a02      	cmp	r2, #2
 80153b8:	d105      	bne.n	80153c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80153ba:	7be2      	ldrb	r2, [r4, #15]
 80153bc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80153c0:	1a80      	subs	r0, r0, r2
 80153c2:	1ac0      	subs	r0, r0, r3
 80153c4:	e773      	b.n	80152ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80153c6:	2000      	movs	r0, #0
 80153c8:	e772      	b.n	80152b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80153ca:	7be0      	ldrb	r0, [r4, #15]
 80153cc:	e770      	b.n	80152b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80153ce:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80153d2:	e773      	b.n	80152bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80153d4:	f1ba 0f00 	cmp.w	sl, #0
 80153d8:	d0f7      	beq.n	80153ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80153da:	2264      	movs	r2, #100	@ 0x64
 80153dc:	4639      	mov	r1, r7
 80153de:	a849      	add	r0, sp, #292	@ 0x124
 80153e0:	f00f fe45 	bl	802506e <memcpy>
 80153e4:	2300      	movs	r3, #0
 80153e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80153ea:	6821      	ldr	r1, [r4, #0]
 80153ec:	a849      	add	r0, sp, #292	@ 0x124
 80153ee:	f7ff fb9a 	bl	8014b26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80153f2:	b203      	sxth	r3, r0
 80153f4:	e751      	b.n	801529a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080153f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80153f6:	2b03      	cmp	r3, #3
 80153f8:	d818      	bhi.n	801542c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80153fa:	e8df f003 	tbb	[pc, r3]
 80153fe:	0602      	.short	0x0602
 8015400:	130d      	.short	0x130d
 8015402:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015406:	1850      	adds	r0, r2, r1
 8015408:	4770      	bx	lr
 801540a:	8803      	ldrh	r3, [r0, #0]
 801540c:	8880      	ldrh	r0, [r0, #4]
 801540e:	4418      	add	r0, r3
 8015410:	b200      	sxth	r0, r0
 8015412:	1a80      	subs	r0, r0, r2
 8015414:	3801      	subs	r0, #1
 8015416:	4770      	bx	lr
 8015418:	8803      	ldrh	r3, [r0, #0]
 801541a:	8880      	ldrh	r0, [r0, #4]
 801541c:	4418      	add	r0, r3
 801541e:	b200      	sxth	r0, r0
 8015420:	1a40      	subs	r0, r0, r1
 8015422:	e7f7      	b.n	8015414 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015424:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015428:	4410      	add	r0, r2
 801542a:	4770      	bx	lr
 801542c:	2000      	movs	r0, #0
 801542e:	4770      	bx	lr

08015430 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015430:	2b03      	cmp	r3, #3
 8015432:	d817      	bhi.n	8015464 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015434:	e8df f003 	tbb	[pc, r3]
 8015438:	10090602 	.word	0x10090602
 801543c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015440:	1850      	adds	r0, r2, r1
 8015442:	4770      	bx	lr
 8015444:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015448:	e7fa      	b.n	8015440 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801544a:	8843      	ldrh	r3, [r0, #2]
 801544c:	88c0      	ldrh	r0, [r0, #6]
 801544e:	4418      	add	r0, r3
 8015450:	b200      	sxth	r0, r0
 8015452:	1a80      	subs	r0, r0, r2
 8015454:	3801      	subs	r0, #1
 8015456:	4770      	bx	lr
 8015458:	8843      	ldrh	r3, [r0, #2]
 801545a:	88c0      	ldrh	r0, [r0, #6]
 801545c:	4418      	add	r0, r3
 801545e:	b200      	sxth	r0, r0
 8015460:	1a40      	subs	r0, r0, r1
 8015462:	e7f7      	b.n	8015454 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8015464:	2000      	movs	r0, #0
 8015466:	4770      	bx	lr

08015468 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8015468:	4b01      	ldr	r3, [pc, #4]	@ (8015470 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801546a:	2200      	movs	r2, #0
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	4770      	bx	lr
 8015470:	24025944 	.word	0x24025944

08015474 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8015474:	4603      	mov	r3, r0
 8015476:	b1c8      	cbz	r0, 80154ac <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8015478:	0c02      	lsrs	r2, r0, #16
 801547a:	0412      	lsls	r2, r2, #16
 801547c:	b9a2      	cbnz	r2, 80154a8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801547e:	0403      	lsls	r3, r0, #16
 8015480:	2010      	movs	r0, #16
 8015482:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8015486:	bf04      	itt	eq
 8015488:	021b      	lsleq	r3, r3, #8
 801548a:	3008      	addeq	r0, #8
 801548c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8015490:	bf04      	itt	eq
 8015492:	011b      	lsleq	r3, r3, #4
 8015494:	3004      	addeq	r0, #4
 8015496:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801549a:	bf04      	itt	eq
 801549c:	009b      	lsleq	r3, r3, #2
 801549e:	3002      	addeq	r0, #2
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	db04      	blt.n	80154ae <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80154a4:	3001      	adds	r0, #1
 80154a6:	4770      	bx	lr
 80154a8:	2000      	movs	r0, #0
 80154aa:	e7ea      	b.n	8015482 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80154ac:	2020      	movs	r0, #32
 80154ae:	4770      	bx	lr

080154b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80154b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b4:	b087      	sub	sp, #28
 80154b6:	460d      	mov	r5, r1
 80154b8:	4616      	mov	r6, r2
 80154ba:	4698      	mov	r8, r3
 80154bc:	4601      	mov	r1, r0
 80154be:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80154c2:	b120      	cbz	r0, 80154ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80154c4:	b11a      	cbz	r2, 80154ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80154c6:	2d1f      	cmp	r5, #31
 80154c8:	d801      	bhi.n	80154ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80154ca:	2b1f      	cmp	r3, #31
 80154cc:	d904      	bls.n	80154d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80154ce:	2000      	movs	r0, #0
 80154d0:	6038      	str	r0, [r7, #0]
 80154d2:	b007      	add	sp, #28
 80154d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154d8:	b97d      	cbnz	r5, 80154fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80154da:	b143      	cbz	r3, 80154ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80154dc:	4602      	mov	r2, r0
 80154de:	462b      	mov	r3, r5
 80154e0:	4641      	mov	r1, r8
 80154e2:	4630      	mov	r0, r6
 80154e4:	e9cd 4700 	strd	r4, r7, [sp]
 80154e8:	f7ff ffe2 	bl	80154b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80154ec:	e7f1      	b.n	80154d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80154ee:	f04f 33ff 	mov.w	r3, #4294967295
 80154f2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80154f6:	603b      	str	r3, [r7, #0]
 80154f8:	e7eb      	b.n	80154d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80154fa:	fa32 fa05 	lsrs.w	sl, r2, r5
 80154fe:	d106      	bne.n	801550e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8015500:	4346      	muls	r6, r0
 8015502:	fbb6 f0f4 	udiv	r0, r6, r4
 8015506:	fb04 6610 	mls	r6, r4, r0, r6
 801550a:	603e      	str	r6, [r7, #0]
 801550c:	e7e1      	b.n	80154d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801550e:	2201      	movs	r2, #1
 8015510:	fa00 fb05 	lsl.w	fp, r0, r5
 8015514:	40aa      	lsls	r2, r5
 8015516:	fbbb f9f4 	udiv	r9, fp, r4
 801551a:	3a01      	subs	r2, #1
 801551c:	fb0a f309 	mul.w	r3, sl, r9
 8015520:	fb04 b919 	mls	r9, r4, r9, fp
 8015524:	4016      	ands	r6, r2
 8015526:	9303      	str	r3, [sp, #12]
 8015528:	4630      	mov	r0, r6
 801552a:	f7ff ffa3 	bl	8015474 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801552e:	462b      	mov	r3, r5
 8015530:	460a      	mov	r2, r1
 8015532:	4601      	mov	r1, r0
 8015534:	4630      	mov	r0, r6
 8015536:	e9cd 4700 	strd	r4, r7, [sp]
 801553a:	f7ff ffb9 	bl	80154b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801553e:	4606      	mov	r6, r0
 8015540:	4648      	mov	r0, r9
 8015542:	eb05 0108 	add.w	r1, r5, r8
 8015546:	f7ff ff95 	bl	8015474 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801554a:	ab05      	add	r3, sp, #20
 801554c:	464a      	mov	r2, r9
 801554e:	e9cd 4300 	strd	r4, r3, [sp]
 8015552:	4603      	mov	r3, r0
 8015554:	4650      	mov	r0, sl
 8015556:	f7ff ffab 	bl	80154b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801555a:	6839      	ldr	r1, [r7, #0]
 801555c:	9a05      	ldr	r2, [sp, #20]
 801555e:	9b03      	ldr	r3, [sp, #12]
 8015560:	4411      	add	r1, r2
 8015562:	fbb1 f2f4 	udiv	r2, r1, r4
 8015566:	18d3      	adds	r3, r2, r3
 8015568:	fb04 1412 	mls	r4, r4, r2, r1
 801556c:	441e      	add	r6, r3
 801556e:	603c      	str	r4, [r7, #0]
 8015570:	4430      	add	r0, r6
 8015572:	e7ae      	b.n	80154d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08015574 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8015574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015578:	b085      	sub	sp, #20
 801557a:	f1b0 0900 	subs.w	r9, r0, #0
 801557e:	461d      	mov	r5, r3
 8015580:	4617      	mov	r7, r2
 8015582:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015584:	bfbb      	ittet	lt
 8015586:	f1c9 0900 	rsblt	r9, r9, #0
 801558a:	f04f 36ff 	movlt.w	r6, #4294967295
 801558e:	2601      	movge	r6, #1
 8015590:	6823      	ldrlt	r3, [r4, #0]
 8015592:	bfbc      	itt	lt
 8015594:	425b      	neglt	r3, r3
 8015596:	6023      	strlt	r3, [r4, #0]
 8015598:	2a00      	cmp	r2, #0
 801559a:	da04      	bge.n	80155a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801559c:	6823      	ldr	r3, [r4, #0]
 801559e:	4257      	negs	r7, r2
 80155a0:	4276      	negs	r6, r6
 80155a2:	425b      	negs	r3, r3
 80155a4:	6023      	str	r3, [r4, #0]
 80155a6:	2d00      	cmp	r5, #0
 80155a8:	4638      	mov	r0, r7
 80155aa:	bfba      	itte	lt
 80155ac:	426d      	neglt	r5, r5
 80155ae:	f04f 38ff 	movlt.w	r8, #4294967295
 80155b2:	f04f 0801 	movge.w	r8, #1
 80155b6:	f7ff ff5d 	bl	8015474 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80155ba:	ab03      	add	r3, sp, #12
 80155bc:	463a      	mov	r2, r7
 80155be:	e9cd 5300 	strd	r5, r3, [sp]
 80155c2:	4603      	mov	r3, r0
 80155c4:	4648      	mov	r0, r9
 80155c6:	f7ff ff73 	bl	80154b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80155ca:	6823      	ldr	r3, [r4, #0]
 80155cc:	9a03      	ldr	r2, [sp, #12]
 80155ce:	4546      	cmp	r6, r8
 80155d0:	441a      	add	r2, r3
 80155d2:	fb92 f3f5 	sdiv	r3, r2, r5
 80155d6:	4418      	add	r0, r3
 80155d8:	fb05 2313 	mls	r3, r5, r3, r2
 80155dc:	bf18      	it	ne
 80155de:	4240      	negne	r0, r0
 80155e0:	1c72      	adds	r2, r6, #1
 80155e2:	6023      	str	r3, [r4, #0]
 80155e4:	d105      	bne.n	80155f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f1c3 0200 	rsb	r2, r3, #0
 80155ec:	db0b      	blt.n	8015606 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80155ee:	6022      	str	r2, [r4, #0]
 80155f0:	e006      	b.n	8015600 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80155f2:	2e01      	cmp	r6, #1
 80155f4:	d104      	bne.n	8015600 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	da02      	bge.n	8015600 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80155fa:	442b      	add	r3, r5
 80155fc:	3801      	subs	r0, #1
 80155fe:	6023      	str	r3, [r4, #0]
 8015600:	b005      	add	sp, #20
 8015602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015606:	3801      	subs	r0, #1
 8015608:	1b52      	subs	r2, r2, r5
 801560a:	e7f0      	b.n	80155ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801560c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801560c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015610:	4c1c      	ldr	r4, [pc, #112]	@ (8015684 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8015612:	4605      	mov	r5, r0
 8015614:	6807      	ldr	r7, [r0, #0]
 8015616:	69a3      	ldr	r3, [r4, #24]
 8015618:	b92b      	cbnz	r3, 8015626 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801561a:	6840      	ldr	r0, [r0, #4]
 801561c:	e9c5 7000 	strd	r7, r0, [r5]
 8015620:	b004      	add	sp, #16
 8015622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015626:	f04f 0802 	mov.w	r8, #2
 801562a:	68a2      	ldr	r2, [r4, #8]
 801562c:	ae04      	add	r6, sp, #16
 801562e:	6820      	ldr	r0, [r4, #0]
 8015630:	fb93 f1f8 	sdiv	r1, r3, r8
 8015634:	440a      	add	r2, r1
 8015636:	69e1      	ldr	r1, [r4, #28]
 8015638:	f846 2d04 	str.w	r2, [r6, #-4]!
 801563c:	463a      	mov	r2, r7
 801563e:	9600      	str	r6, [sp, #0]
 8015640:	f7ff ff98 	bl	8015574 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015644:	69a3      	ldr	r3, [r4, #24]
 8015646:	4607      	mov	r7, r0
 8015648:	686a      	ldr	r2, [r5, #4]
 801564a:	6a21      	ldr	r1, [r4, #32]
 801564c:	9600      	str	r6, [sp, #0]
 801564e:	6860      	ldr	r0, [r4, #4]
 8015650:	f7ff ff90 	bl	8015574 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8015654:	69a3      	ldr	r3, [r4, #24]
 8015656:	6962      	ldr	r2, [r4, #20]
 8015658:	4407      	add	r7, r0
 801565a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801565c:	9600      	str	r6, [sp, #0]
 801565e:	68e0      	ldr	r0, [r4, #12]
 8015660:	fb93 f8f8 	sdiv	r8, r3, r8
 8015664:	4442      	add	r2, r8
 8015666:	9203      	str	r2, [sp, #12]
 8015668:	682a      	ldr	r2, [r5, #0]
 801566a:	f7ff ff83 	bl	8015574 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801566e:	4680      	mov	r8, r0
 8015670:	9600      	str	r6, [sp, #0]
 8015672:	69a3      	ldr	r3, [r4, #24]
 8015674:	686a      	ldr	r2, [r5, #4]
 8015676:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015678:	6920      	ldr	r0, [r4, #16]
 801567a:	f7ff ff7b 	bl	8015574 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801567e:	4440      	add	r0, r8
 8015680:	e7cc      	b.n	801561c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8015682:	bf00      	nop
 8015684:	24025948 	.word	0x24025948

08015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8015688:	4b07      	ldr	r3, [pc, #28]	@ (80156a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	2b01      	cmp	r3, #1
 801568e:	d109      	bne.n	80156a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8015690:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015694:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015698:	8003      	strh	r3, [r0, #0]
 801569a:	4b04      	ldr	r3, [pc, #16]	@ (80156ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801569c:	881b      	ldrh	r3, [r3, #0]
 801569e:	3b01      	subs	r3, #1
 80156a0:	1a9b      	subs	r3, r3, r2
 80156a2:	800b      	strh	r3, [r1, #0]
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop
 80156a8:	2402592c 	.word	0x2402592c
 80156ac:	24025928 	.word	0x24025928

080156b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80156b0:	4b07      	ldr	r3, [pc, #28]	@ (80156d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80156b2:	b510      	push	{r4, lr}
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	2b01      	cmp	r3, #1
 80156b8:	d108      	bne.n	80156cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80156ba:	4b06      	ldr	r3, [pc, #24]	@ (80156d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80156bc:	880c      	ldrh	r4, [r1, #0]
 80156be:	881b      	ldrh	r3, [r3, #0]
 80156c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	1b1b      	subs	r3, r3, r4
 80156c8:	8003      	strh	r3, [r0, #0]
 80156ca:	800a      	strh	r2, [r1, #0]
 80156cc:	bd10      	pop	{r4, pc}
 80156ce:	bf00      	nop
 80156d0:	2402592c 	.word	0x2402592c
 80156d4:	24025928 	.word	0x24025928

080156d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80156d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015704 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80156da:	b510      	push	{r4, lr}
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d10e      	bne.n	8015700 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80156e2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80156e6:	8843      	ldrh	r3, [r0, #2]
 80156e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80156ec:	18ca      	adds	r2, r1, r3
 80156ee:	4b06      	ldr	r3, [pc, #24]	@ (8015708 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80156f0:	8044      	strh	r4, [r0, #2]
 80156f2:	881b      	ldrh	r3, [r3, #0]
 80156f4:	1a9b      	subs	r3, r3, r2
 80156f6:	8003      	strh	r3, [r0, #0]
 80156f8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80156fc:	8081      	strh	r1, [r0, #4]
 80156fe:	80c3      	strh	r3, [r0, #6]
 8015700:	bd10      	pop	{r4, pc}
 8015702:	bf00      	nop
 8015704:	2402592c 	.word	0x2402592c
 8015708:	24025928 	.word	0x24025928

0801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801570c:	4b08      	ldr	r3, [pc, #32]	@ (8015730 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	2b01      	cmp	r3, #1
 8015712:	d10c      	bne.n	801572e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8015714:	8803      	ldrh	r3, [r0, #0]
 8015716:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801571a:	8842      	ldrh	r2, [r0, #2]
 801571c:	8002      	strh	r2, [r0, #0]
 801571e:	185a      	adds	r2, r3, r1
 8015720:	4b04      	ldr	r3, [pc, #16]	@ (8015734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8015722:	881b      	ldrh	r3, [r3, #0]
 8015724:	1a9b      	subs	r3, r3, r2
 8015726:	8043      	strh	r3, [r0, #2]
 8015728:	88c3      	ldrh	r3, [r0, #6]
 801572a:	80c1      	strh	r1, [r0, #6]
 801572c:	8083      	strh	r3, [r0, #4]
 801572e:	4770      	bx	lr
 8015730:	2402592c 	.word	0x2402592c
 8015734:	24025928 	.word	0x24025928

08015738 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8015738:	4b07      	ldr	r3, [pc, #28]	@ (8015758 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801573a:	b510      	push	{r4, lr}
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	2b01      	cmp	r3, #1
 8015740:	d108      	bne.n	8015754 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8015742:	f9b1 3000 	ldrsh.w	r3, [r1]
 8015746:	f9b0 4000 	ldrsh.w	r4, [r0]
 801574a:	8003      	strh	r3, [r0, #0]
 801574c:	8893      	ldrh	r3, [r2, #4]
 801574e:	3b01      	subs	r3, #1
 8015750:	1b1b      	subs	r3, r3, r4
 8015752:	800b      	strh	r3, [r1, #0]
 8015754:	bd10      	pop	{r4, pc}
 8015756:	bf00      	nop
 8015758:	2402592c 	.word	0x2402592c

0801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801575c:	4b0a      	ldr	r3, [pc, #40]	@ (8015788 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801575e:	460a      	mov	r2, r1
 8015760:	b510      	push	{r4, lr}
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	2b01      	cmp	r3, #1
 8015766:	d10d      	bne.n	8015784 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8015768:	8881      	ldrh	r1, [r0, #4]
 801576a:	8803      	ldrh	r3, [r0, #0]
 801576c:	440b      	add	r3, r1
 801576e:	4601      	mov	r1, r0
 8015770:	3b01      	subs	r3, #1
 8015772:	f821 3b02 	strh.w	r3, [r1], #2
 8015776:	f7ff ffdf 	bl	8015738 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801577a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801577e:	88c2      	ldrh	r2, [r0, #6]
 8015780:	80c3      	strh	r3, [r0, #6]
 8015782:	8082      	strh	r2, [r0, #4]
 8015784:	bd10      	pop	{r4, pc}
 8015786:	bf00      	nop
 8015788:	2402592c 	.word	0x2402592c

0801578c <_ZN8touchgfx11Application13requestRedrawEv>:
 801578c:	4b06      	ldr	r3, [pc, #24]	@ (80157a8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801578e:	2100      	movs	r1, #0
 8015790:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015794:	4b05      	ldr	r3, [pc, #20]	@ (80157ac <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8015796:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801579a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801579e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80157a2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80157a6:	4770      	bx	lr
 80157a8:	24025928 	.word	0x24025928
 80157ac:	2402592a 	.word	0x2402592a

080157b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80157b0:	4b03      	ldr	r3, [pc, #12]	@ (80157c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80157b2:	6818      	ldr	r0, [r3, #0]
 80157b4:	b110      	cbz	r0, 80157bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80157b6:	6803      	ldr	r3, [r0, #0]
 80157b8:	699b      	ldr	r3, [r3, #24]
 80157ba:	4718      	bx	r3
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	24025978 	.word	0x24025978

080157c4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80157c4:	4770      	bx	lr
	...

080157c8 <_ZN8touchgfx11Application4drawEv>:
 80157c8:	4b09      	ldr	r3, [pc, #36]	@ (80157f0 <_ZN8touchgfx11Application4drawEv+0x28>)
 80157ca:	b507      	push	{r0, r1, r2, lr}
 80157cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80157d0:	2100      	movs	r1, #0
 80157d2:	4b08      	ldr	r3, [pc, #32]	@ (80157f4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80157d4:	9100      	str	r1, [sp, #0]
 80157d6:	4669      	mov	r1, sp
 80157d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80157e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80157e4:	6803      	ldr	r3, [r0, #0]
 80157e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80157e8:	4798      	blx	r3
 80157ea:	b003      	add	sp, #12
 80157ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80157f0:	24025928 	.word	0x24025928
 80157f4:	2402592a 	.word	0x2402592a

080157f8 <_ZN8touchgfx11Application10invalidateEv>:
 80157f8:	4b09      	ldr	r3, [pc, #36]	@ (8015820 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80157fa:	b082      	sub	sp, #8
 80157fc:	2100      	movs	r1, #0
 80157fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015802:	4b08      	ldr	r3, [pc, #32]	@ (8015824 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8015804:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015808:	aa02      	add	r2, sp, #8
 801580a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801580e:	9100      	str	r1, [sp, #0]
 8015810:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015814:	6803      	ldr	r3, [r0, #0]
 8015816:	e912 0006 	ldmdb	r2, {r1, r2}
 801581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801581c:	b002      	add	sp, #8
 801581e:	4718      	bx	r3
 8015820:	24025928 	.word	0x24025928
 8015824:	2402592a 	.word	0x2402592a

08015828 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8015828:	4b03      	ldr	r3, [pc, #12]	@ (8015838 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801582a:	6818      	ldr	r0, [r3, #0]
 801582c:	b110      	cbz	r0, 8015834 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801582e:	6803      	ldr	r3, [r0, #0]
 8015830:	69db      	ldr	r3, [r3, #28]
 8015832:	4718      	bx	r3
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	24025978 	.word	0x24025978

0801583c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801583c:	4b03      	ldr	r3, [pc, #12]	@ (801584c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801583e:	6818      	ldr	r0, [r3, #0]
 8015840:	b110      	cbz	r0, 8015848 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8015842:	6803      	ldr	r3, [r0, #0]
 8015844:	6a1b      	ldr	r3, [r3, #32]
 8015846:	4718      	bx	r3
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	24025978 	.word	0x24025978

08015850 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8015850:	2300      	movs	r3, #0
 8015852:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8015856:	4770      	bx	lr

08015858 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8015858:	4b03      	ldr	r3, [pc, #12]	@ (8015868 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801585a:	6818      	ldr	r0, [r3, #0]
 801585c:	b110      	cbz	r0, 8015864 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801585e:	6803      	ldr	r3, [r0, #0]
 8015860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015862:	4718      	bx	r3
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	24025978 	.word	0x24025978

0801586c <_ZN8touchgfx11ApplicationD1Ev>:
 801586c:	4770      	bx	lr

0801586e <_ZN8touchgfx11ApplicationD0Ev>:
 801586e:	b510      	push	{r4, lr}
 8015870:	4604      	mov	r4, r0
 8015872:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8015876:	f00e fce5 	bl	8024244 <_ZdlPvj>
 801587a:	4620      	mov	r0, r4
 801587c:	bd10      	pop	{r4, pc}

0801587e <_ZN8touchgfx4Rect10restrictToEss>:
 801587e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	b510      	push	{r4, lr}
 8015886:	da04      	bge.n	8015892 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8015888:	8884      	ldrh	r4, [r0, #4]
 801588a:	4423      	add	r3, r4
 801588c:	8083      	strh	r3, [r0, #4]
 801588e:	2300      	movs	r3, #0
 8015890:	8003      	strh	r3, [r0, #0]
 8015892:	f9b0 4000 	ldrsh.w	r4, [r0]
 8015896:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801589a:	1b09      	subs	r1, r1, r4
 801589c:	428b      	cmp	r3, r1
 801589e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80158a2:	bfc8      	it	gt
 80158a4:	8081      	strhgt	r1, [r0, #4]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	da04      	bge.n	80158b4 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80158aa:	88c1      	ldrh	r1, [r0, #6]
 80158ac:	440b      	add	r3, r1
 80158ae:	80c3      	strh	r3, [r0, #6]
 80158b0:	2300      	movs	r3, #0
 80158b2:	8043      	strh	r3, [r0, #2]
 80158b4:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80158b8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80158bc:	1a52      	subs	r2, r2, r1
 80158be:	4293      	cmp	r3, r2
 80158c0:	bfc8      	it	gt
 80158c2:	80c2      	strhgt	r2, [r0, #6]
 80158c4:	bd10      	pop	{r4, pc}
	...

080158c8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80158c8:	4b10      	ldr	r3, [pc, #64]	@ (801590c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80158ca:	b510      	push	{r4, lr}
 80158cc:	460c      	mov	r4, r1
 80158ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80158d2:	4b0f      	ldr	r3, [pc, #60]	@ (8015910 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80158d4:	4620      	mov	r0, r4
 80158d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80158da:	f7ff ffd0 	bl	801587e <_ZN8touchgfx4Rect10restrictToEss>
 80158de:	4b0d      	ldr	r3, [pc, #52]	@ (8015914 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80158e0:	6818      	ldr	r0, [r3, #0]
 80158e2:	b190      	cbz	r0, 801590a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80158e4:	6803      	ldr	r3, [r0, #0]
 80158e6:	4621      	mov	r1, r4
 80158e8:	689b      	ldr	r3, [r3, #8]
 80158ea:	4798      	blx	r3
 80158ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015918 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80158ee:	6818      	ldr	r0, [r3, #0]
 80158f0:	b118      	cbz	r0, 80158fa <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80158f2:	6803      	ldr	r3, [r0, #0]
 80158f4:	4621      	mov	r1, r4
 80158f6:	689b      	ldr	r3, [r3, #8]
 80158f8:	4798      	blx	r3
 80158fa:	4b08      	ldr	r3, [pc, #32]	@ (801591c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80158fc:	4621      	mov	r1, r4
 80158fe:	6818      	ldr	r0, [r3, #0]
 8015900:	6803      	ldr	r3, [r0, #0]
 8015902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015906:	69db      	ldr	r3, [r3, #28]
 8015908:	4718      	bx	r3
 801590a:	bd10      	pop	{r4, pc}
 801590c:	2402592a 	.word	0x2402592a
 8015910:	24025928 	.word	0x24025928
 8015914:	24025978 	.word	0x24025978
 8015918:	24025974 	.word	0x24025974
 801591c:	24025934 	.word	0x24025934

08015920 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8015920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015922:	4606      	mov	r6, r0
 8015924:	4608      	mov	r0, r1
 8015926:	460f      	mov	r7, r1
 8015928:	f7f9 fe19 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 801592c:	b9e8      	cbnz	r0, 801596a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801592e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8015932:	f9b6 4000 	ldrsh.w	r4, [r6]
 8015936:	42a5      	cmp	r5, r4
 8015938:	db17      	blt.n	801596a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801593a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801593e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8015942:	429a      	cmp	r2, r3
 8015944:	db11      	blt.n	801596a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015946:	88b9      	ldrh	r1, [r7, #4]
 8015948:	440d      	add	r5, r1
 801594a:	88b1      	ldrh	r1, [r6, #4]
 801594c:	440c      	add	r4, r1
 801594e:	b22d      	sxth	r5, r5
 8015950:	b224      	sxth	r4, r4
 8015952:	42a5      	cmp	r5, r4
 8015954:	dc09      	bgt.n	801596a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8015956:	88f8      	ldrh	r0, [r7, #6]
 8015958:	4410      	add	r0, r2
 801595a:	88f2      	ldrh	r2, [r6, #6]
 801595c:	4413      	add	r3, r2
 801595e:	b200      	sxth	r0, r0
 8015960:	b21b      	sxth	r3, r3
 8015962:	4298      	cmp	r0, r3
 8015964:	bfcc      	ite	gt
 8015966:	2000      	movgt	r0, #0
 8015968:	2001      	movle	r0, #1
 801596a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801596e:	4604      	mov	r4, r0
 8015970:	4608      	mov	r0, r1
 8015972:	460d      	mov	r5, r1
 8015974:	f7f9 fdf3 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015978:	b978      	cbnz	r0, 801599a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801597a:	4620      	mov	r0, r4
 801597c:	f7f9 fdef 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015980:	f9b5 6000 	ldrsh.w	r6, [r5]
 8015984:	b150      	cbz	r0, 801599c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8015986:	8026      	strh	r6, [r4, #0]
 8015988:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801598c:	8063      	strh	r3, [r4, #2]
 801598e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8015992:	80a3      	strh	r3, [r4, #4]
 8015994:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015998:	80e3      	strh	r3, [r4, #6]
 801599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801599c:	f9b4 1000 	ldrsh.w	r1, [r4]
 80159a0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80159a4:	42b1      	cmp	r1, r6
 80159a6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80159aa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80159ae:	460f      	mov	r7, r1
 80159b0:	88ed      	ldrh	r5, [r5, #6]
 80159b2:	bfa8      	it	ge
 80159b4:	4637      	movge	r7, r6
 80159b6:	4293      	cmp	r3, r2
 80159b8:	4618      	mov	r0, r3
 80159ba:	4466      	add	r6, ip
 80159bc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80159c0:	bfa8      	it	ge
 80159c2:	4610      	movge	r0, r2
 80159c4:	442a      	add	r2, r5
 80159c6:	88e5      	ldrh	r5, [r4, #6]
 80159c8:	4461      	add	r1, ip
 80159ca:	b236      	sxth	r6, r6
 80159cc:	8027      	strh	r7, [r4, #0]
 80159ce:	442b      	add	r3, r5
 80159d0:	b209      	sxth	r1, r1
 80159d2:	b212      	sxth	r2, r2
 80159d4:	8060      	strh	r0, [r4, #2]
 80159d6:	b21b      	sxth	r3, r3
 80159d8:	428e      	cmp	r6, r1
 80159da:	bfac      	ite	ge
 80159dc:	ebc7 0106 	rsbge	r1, r7, r6
 80159e0:	ebc7 0101 	rsblt	r1, r7, r1
 80159e4:	429a      	cmp	r2, r3
 80159e6:	bfac      	ite	ge
 80159e8:	ebc0 0202 	rsbge	r2, r0, r2
 80159ec:	ebc0 0203 	rsblt	r2, r0, r3
 80159f0:	80a1      	strh	r1, [r4, #4]
 80159f2:	80e2      	strh	r2, [r4, #6]
 80159f4:	e7d1      	b.n	801599a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080159f8 <_ZN8touchgfx11Application11getInstanceEv>:
 80159f8:	4b01      	ldr	r3, [pc, #4]	@ (8015a00 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80159fa:	6818      	ldr	r0, [r3, #0]
 80159fc:	4770      	bx	lr
 80159fe:	bf00      	nop
 8015a00:	24025988 	.word	0x24025988

08015a04 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8015a04:	2300      	movs	r3, #0
 8015a06:	b510      	push	{r4, lr}
 8015a08:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8015a12:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8015a16:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8015a1a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8015a1e:	429a      	cmp	r2, r3
 8015a20:	d90e      	bls.n	8015a40 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8015a22:	18e2      	adds	r2, r4, r3
 8015a24:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8015a28:	b122      	cbz	r2, 8015a34 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8015a2a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8015a2e:	6803      	ldr	r3, [r0, #0]
 8015a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a32:	4798      	blx	r3
 8015a34:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8015a38:	3301      	adds	r3, #1
 8015a3a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8015a3e:	e7ea      	b.n	8015a16 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8015a40:	bd10      	pop	{r4, pc}

08015a42 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8015a42:	2300      	movs	r3, #0
 8015a44:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8015a48:	30a4      	adds	r0, #164	@ 0xa4
 8015a4a:	f820 3c24 	strh.w	r3, [r0, #-36]
 8015a4e:	f802 3b01 	strb.w	r3, [r2], #1
 8015a52:	4282      	cmp	r2, r0
 8015a54:	d1fb      	bne.n	8015a4e <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8015a56:	4770      	bx	lr

08015a58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8015a58:	b570      	push	{r4, r5, r6, lr}
 8015a5a:	4c0b      	ldr	r4, [pc, #44]	@ (8015a88 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8015a5c:	4605      	mov	r5, r0
 8015a5e:	460e      	mov	r6, r1
 8015a60:	6820      	ldr	r0, [r4, #0]
 8015a62:	b110      	cbz	r0, 8015a6a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8015a64:	6803      	ldr	r3, [r0, #0]
 8015a66:	695b      	ldr	r3, [r3, #20]
 8015a68:	4798      	blx	r3
 8015a6a:	1d28      	adds	r0, r5, #4
 8015a6c:	f7ff ffe9 	bl	8015a42 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015a70:	6026      	str	r6, [r4, #0]
 8015a72:	6833      	ldr	r3, [r6, #0]
 8015a74:	4630      	mov	r0, r6
 8015a76:	68db      	ldr	r3, [r3, #12]
 8015a78:	4798      	blx	r3
 8015a7a:	682b      	ldr	r3, [r5, #0]
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a84:	4718      	bx	r3
 8015a86:	bf00      	nop
 8015a88:	24025978 	.word	0x24025978

08015a8c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8015a92:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8015a96:	461a      	mov	r2, r3
 8015a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a9a:	461c      	mov	r4, r3
 8015a9c:	461d      	mov	r5, r3
 8015a9e:	459c      	cmp	ip, r3
 8015aa0:	dd1a      	ble.n	8015ad8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8015aa2:	18c6      	adds	r6, r0, r3
 8015aa4:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8015aa8:	b16e      	cbz	r6, 8015ac6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d008      	beq.n	8015ac0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8015aae:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8015ab2:	fa1f fe82 	uxth.w	lr, r2
 8015ab6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8015aba:	1887      	adds	r7, r0, r2
 8015abc:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8015ac0:	3201      	adds	r2, #1
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	e7eb      	b.n	8015a9e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8015ac6:	4299      	cmp	r1, r3
 8015ac8:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8015acc:	bfa8      	it	ge
 8015ace:	3501      	addge	r5, #1
 8015ad0:	429e      	cmp	r6, r3
 8015ad2:	bfc8      	it	gt
 8015ad4:	3401      	addgt	r4, #1
 8015ad6:	e7f4      	b.n	8015ac2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8015ad8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8015adc:	1b49      	subs	r1, r1, r5
 8015ade:	1b1b      	subs	r3, r3, r4
 8015ae0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8015ae4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8015ae8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8015aec:	4293      	cmp	r3, r2
 8015aee:	dd03      	ble.n	8015af8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8015af0:	3b01      	subs	r3, #1
 8015af2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8015af6:	e7f7      	b.n	8015ae8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8015af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015afc <_ZN8touchgfx11Application15handleTickEventEv>:
 8015afc:	b570      	push	{r4, r5, r6, lr}
 8015afe:	4d16      	ldr	r5, [pc, #88]	@ (8015b58 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8015b00:	4604      	mov	r4, r0
 8015b02:	6828      	ldr	r0, [r5, #0]
 8015b04:	b140      	cbz	r0, 8015b18 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015b06:	7a03      	ldrb	r3, [r0, #8]
 8015b08:	b933      	cbnz	r3, 8015b18 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8015b0a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8015b0e:	6803      	ldr	r3, [r0, #0]
 8015b10:	689b      	ldr	r3, [r3, #8]
 8015b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b16:	4718      	bx	r3
 8015b18:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8015b1c:	4e0f      	ldr	r6, [pc, #60]	@ (8015b5c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8015b1e:	b973      	cbnz	r3, 8015b3e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015b20:	b168      	cbz	r0, 8015b3e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015b22:	7a03      	ldrb	r3, [r0, #8]
 8015b24:	b15b      	cbz	r3, 8015b3e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8015b26:	6830      	ldr	r0, [r6, #0]
 8015b28:	b110      	cbz	r0, 8015b30 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8015b2a:	6803      	ldr	r3, [r0, #0]
 8015b2c:	691b      	ldr	r3, [r3, #16]
 8015b2e:	4798      	blx	r3
 8015b30:	6828      	ldr	r0, [r5, #0]
 8015b32:	6803      	ldr	r3, [r0, #0]
 8015b34:	68db      	ldr	r3, [r3, #12]
 8015b36:	4798      	blx	r3
 8015b38:	2301      	movs	r3, #1
 8015b3a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8015b3e:	3404      	adds	r4, #4
 8015b40:	4620      	mov	r0, r4
 8015b42:	f7ff ff5f 	bl	8015a04 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8015b46:	4620      	mov	r0, r4
 8015b48:	f7ff ffa0 	bl	8015a8c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8015b4c:	6830      	ldr	r0, [r6, #0]
 8015b4e:	b110      	cbz	r0, 8015b56 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8015b50:	6803      	ldr	r3, [r0, #0]
 8015b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b54:	e7dd      	b.n	8015b12 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8015b56:	bd70      	pop	{r4, r5, r6, pc}
 8015b58:	2402597c 	.word	0x2402597c
 8015b5c:	24025978 	.word	0x24025978

08015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8015b60:	4603      	mov	r3, r0
 8015b62:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8015b66:	2200      	movs	r2, #0
 8015b68:	801a      	strh	r2, [r3, #0]
 8015b6a:	3308      	adds	r3, #8
 8015b6c:	f823 2c06 	strh.w	r2, [r3, #-6]
 8015b70:	f823 2c04 	strh.w	r2, [r3, #-4]
 8015b74:	f823 2c02 	strh.w	r2, [r3, #-2]
 8015b78:	428b      	cmp	r3, r1
 8015b7a:	d1f5      	bne.n	8015b68 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8015b7c:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8015b80:	4770      	bx	lr
	...

08015b84 <_ZN8touchgfx11ApplicationC1Ev>:
 8015b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b86:	4b1d      	ldr	r3, [pc, #116]	@ (8015bfc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8015b88:	4606      	mov	r6, r0
 8015b8a:	4604      	mov	r4, r0
 8015b8c:	2500      	movs	r5, #0
 8015b8e:	f846 3b04 	str.w	r3, [r6], #4
 8015b92:	22a8      	movs	r2, #168	@ 0xa8
 8015b94:	2100      	movs	r1, #0
 8015b96:	4630      	mov	r0, r6
 8015b98:	f00f f988 	bl	8024eac <memset>
 8015b9c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8015ba0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8015ba4:	4f16      	ldr	r7, [pc, #88]	@ (8015c00 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8015ba6:	f7ff ffdb 	bl	8015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015baa:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8015bae:	f7ff ffd7 	bl	8015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015bb2:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8015bb6:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8015bba:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8015bbe:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8015bc2:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8015bc6:	490f      	ldr	r1, [pc, #60]	@ (8015c04 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8015bc8:	480f      	ldr	r0, [pc, #60]	@ (8015c08 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8015bca:	f00d fcab 	bl	8023524 <CRC_Lock>
 8015bce:	4b0f      	ldr	r3, [pc, #60]	@ (8015c0c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8015bd0:	b158      	cbz	r0, 8015bea <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8015bd2:	801d      	strh	r5, [r3, #0]
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8015c10 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8015bd8:	4630      	mov	r0, r6
 8015bda:	6013      	str	r3, [r2, #0]
 8015bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8015c14 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8015bde:	603b      	str	r3, [r7, #0]
 8015be0:	6013      	str	r3, [r2, #0]
 8015be2:	f7ff ff2e 	bl	8015a42 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8015be6:	4620      	mov	r0, r4
 8015be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015bee:	2002      	movs	r0, #2
 8015bf0:	801a      	strh	r2, [r3, #0]
 8015bf2:	6038      	str	r0, [r7, #0]
 8015bf4:	f001 ff38 	bl	8017a68 <_ZN8touchgfx6Screen4drawEv>
 8015bf8:	e7ec      	b.n	8015bd4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8015bfa:	bf00      	nop
 8015bfc:	08029108 	.word	0x08029108
 8015c00:	24025978 	.word	0x24025978
 8015c04:	b5e8b5cd 	.word	0xb5e8b5cd
 8015c08:	f407a5c2 	.word	0xf407a5c2
 8015c0c:	240000ac 	.word	0x240000ac
 8015c10:	24025988 	.word	0x24025988
 8015c14:	2402597c 	.word	0x2402597c

08015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015c18:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8015c1c:	3b01      	subs	r3, #1
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	428b      	cmp	r3, r1
 8015c22:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8015c26:	b510      	push	{r4, lr}
 8015c28:	d908      	bls.n	8015c3c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015c2a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8015c2e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015c38:	685a      	ldr	r2, [r3, #4]
 8015c3a:	6062      	str	r2, [r4, #4]
 8015c3c:	bd10      	pop	{r4, pc}
	...

08015c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8015c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c44:	b08f      	sub	sp, #60	@ 0x3c
 8015c46:	4b92      	ldr	r3, [pc, #584]	@ (8015e90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 8015c48:	4683      	mov	fp, r0
 8015c4a:	ac0a      	add	r4, sp, #40	@ 0x28
 8015c4c:	e884 0006 	stmia.w	r4, {r1, r2}
 8015c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c54:	4620      	mov	r0, r4
 8015c56:	4b8f      	ldr	r3, [pc, #572]	@ (8015e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 8015c58:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015c5c:	f7ff fe0f 	bl	801587e <_ZN8touchgfx4Rect10restrictToEss>
 8015c60:	4620      	mov	r0, r4
 8015c62:	f7f9 fc7c 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d170      	bne.n	8015d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8015c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8015e98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8015c72:	2b02      	cmp	r3, #2
 8015c74:	d06a      	beq.n	8015d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8015c76:	9403      	str	r4, [sp, #12]
 8015c78:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8015c7c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8015c80:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8015c84:	9301      	str	r3, [sp, #4]
 8015c86:	35a4      	adds	r5, #164	@ 0xa4
 8015c88:	b15c      	cbz	r4, 8015ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 8015c8a:	4629      	mov	r1, r5
 8015c8c:	9803      	ldr	r0, [sp, #12]
 8015c8e:	f7ff fe47 	bl	8015920 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015c92:	3c01      	subs	r4, #1
 8015c94:	b118      	cbz	r0, 8015c9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8015c96:	b2a1      	uxth	r1, r4
 8015c98:	9801      	ldr	r0, [sp, #4]
 8015c9a:	f7ff ffbd 	bl	8015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015c9e:	3d08      	subs	r5, #8
 8015ca0:	e7f2      	b.n	8015c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8015ca2:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8015ca6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015caa:	f8cd a010 	str.w	sl, [sp, #16]
 8015cae:	9302      	str	r3, [sp, #8]
 8015cb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015cb4:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8015cb8:	9306      	str	r3, [sp, #24]
 8015cba:	445c      	add	r4, fp
 8015cbc:	2500      	movs	r5, #0
 8015cbe:	4626      	mov	r6, r4
 8015cc0:	f8cd a014 	str.w	sl, [sp, #20]
 8015cc4:	462f      	mov	r7, r5
 8015cc6:	9b05      	ldr	r3, [sp, #20]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d073      	beq.n	8015db4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8015ccc:	9903      	ldr	r1, [sp, #12]
 8015cce:	4630      	mov	r0, r6
 8015cd0:	f7fd f81e 	bl	8012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015cd4:	b350      	cbz	r0, 8015d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8015cd6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8015cda:	f9b6 c000 	ldrsh.w	ip, [r6]
 8015cde:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8015ce2:	45e6      	cmp	lr, ip
 8015ce4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8015ce8:	db33      	blt.n	8015d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8015cea:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8015cee:	88b3      	ldrh	r3, [r6, #4]
 8015cf0:	4472      	add	r2, lr
 8015cf2:	4463      	add	r3, ip
 8015cf4:	b212      	sxth	r2, r2
 8015cf6:	b21b      	sxth	r3, r3
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	dc2a      	bgt.n	8015d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8015cfc:	fa1f f289 	uxth.w	r2, r9
 8015d00:	88f3      	ldrh	r3, [r6, #6]
 8015d02:	45c8      	cmp	r8, r9
 8015d04:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8015d08:	4413      	add	r3, r2
 8015d0a:	fa1f fc88 	uxth.w	ip, r8
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	fa0f fe83 	sxth.w	lr, r3
 8015d14:	db0f      	blt.n	8015d36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 8015d16:	eba3 030c 	sub.w	r3, r3, ip
 8015d1a:	1ac9      	subs	r1, r1, r3
 8015d1c:	b209      	sxth	r1, r1
 8015d1e:	2900      	cmp	r1, #0
 8015d20:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015d24:	dd12      	ble.n	8015d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8015d26:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	9b05      	ldr	r3, [sp, #20]
 8015d2e:	3e08      	subs	r6, #8
 8015d30:	3b01      	subs	r3, #1
 8015d32:	9305      	str	r3, [sp, #20]
 8015d34:	e7c7      	b.n	8015cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 8015d36:	4461      	add	r1, ip
 8015d38:	b209      	sxth	r1, r1
 8015d3a:	4571      	cmp	r1, lr
 8015d3c:	dc38      	bgt.n	8015db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8015d3e:	eba2 020c 	sub.w	r2, r2, ip
 8015d42:	b212      	sxth	r2, r2
 8015d44:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8015d48:	2a00      	cmp	r2, #0
 8015d4a:	dcee      	bgt.n	8015d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015d4c:	b00f      	add	sp, #60	@ 0x3c
 8015d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d52:	45c8      	cmp	r8, r9
 8015d54:	db2c      	blt.n	8015db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8015d56:	88f3      	ldrh	r3, [r6, #6]
 8015d58:	4499      	add	r9, r3
 8015d5a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8015d5e:	4498      	add	r8, r3
 8015d60:	fa0f f989 	sxth.w	r9, r9
 8015d64:	fa0f f888 	sxth.w	r8, r8
 8015d68:	45c1      	cmp	r9, r8
 8015d6a:	db21      	blt.n	8015db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8015d6c:	fa1f f28c 	uxth.w	r2, ip
 8015d70:	88b3      	ldrh	r3, [r6, #4]
 8015d72:	45e6      	cmp	lr, ip
 8015d74:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8015d78:	4413      	add	r3, r2
 8015d7a:	fa1f f88e 	uxth.w	r8, lr
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	fa0f f983 	sxth.w	r9, r3
 8015d84:	db0a      	blt.n	8015d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 8015d86:	eba3 0308 	sub.w	r3, r3, r8
 8015d8a:	1ac9      	subs	r1, r1, r3
 8015d8c:	b209      	sxth	r1, r1
 8015d8e:	2900      	cmp	r1, #0
 8015d90:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8015d94:	ddda      	ble.n	8015d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8015d96:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8015d9a:	e7c6      	b.n	8015d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015d9c:	4441      	add	r1, r8
 8015d9e:	b209      	sxth	r1, r1
 8015da0:	4549      	cmp	r1, r9
 8015da2:	dc05      	bgt.n	8015db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8015da4:	eba2 0208 	sub.w	r2, r2, r8
 8015da8:	b212      	sxth	r2, r2
 8015daa:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8015dae:	e7cb      	b.n	8015d48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8015db0:	4607      	mov	r7, r0
 8015db2:	e7bb      	b.n	8015d2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8015db4:	2d00      	cmp	r5, #0
 8015db6:	d181      	bne.n	8015cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8015db8:	2f00      	cmp	r7, #0
 8015dba:	f000 81df 	beq.w	801617c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8015dbe:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8015dc2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8015dc6:	b2b3      	uxth	r3, r6
 8015dc8:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8015dcc:	9305      	str	r3, [sp, #20]
 8015dce:	9a05      	ldr	r2, [sp, #20]
 8015dd0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8015dd4:	4413      	add	r3, r2
 8015dd6:	b2ba      	uxth	r2, r7
 8015dd8:	4492      	add	sl, r2
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	fa1f fa8a 	uxth.w	sl, sl
 8015de0:	fa0f f883 	sxth.w	r8, r3
 8015de4:	fa0f f98a 	sxth.w	r9, sl
 8015de8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8015dec:	9b04      	ldr	r3, [sp, #16]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d054      	beq.n	8015e9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8015df2:	9903      	ldr	r1, [sp, #12]
 8015df4:	4620      	mov	r0, r4
 8015df6:	f7fc ff8b 	bl	8012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015dfa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015dfe:	b1c0      	cbz	r0, 8015e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8015e00:	f9b4 e000 	ldrsh.w	lr, [r4]
 8015e04:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015e08:	4576      	cmp	r6, lr
 8015e0a:	dc22      	bgt.n	8015e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8015e0c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015e10:	44f4      	add	ip, lr
 8015e12:	fa0f fc8c 	sxth.w	ip, ip
 8015e16:	45e0      	cmp	r8, ip
 8015e18:	db1b      	blt.n	8015e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8015e1a:	428f      	cmp	r7, r1
 8015e1c:	fa1f fc81 	uxth.w	ip, r1
 8015e20:	88e1      	ldrh	r1, [r4, #6]
 8015e22:	dc0d      	bgt.n	8015e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8015e24:	ebaa 0c0c 	sub.w	ip, sl, ip
 8015e28:	f8a4 9002 	strh.w	r9, [r4, #2]
 8015e2c:	eba1 010c 	sub.w	r1, r1, ip
 8015e30:	80e1      	strh	r1, [r4, #6]
 8015e32:	4628      	mov	r0, r5
 8015e34:	9904      	ldr	r1, [sp, #16]
 8015e36:	3c08      	subs	r4, #8
 8015e38:	4605      	mov	r5, r0
 8015e3a:	3901      	subs	r1, #1
 8015e3c:	9104      	str	r1, [sp, #16]
 8015e3e:	e7d3      	b.n	8015de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8015e40:	4461      	add	r1, ip
 8015e42:	b209      	sxth	r1, r1
 8015e44:	4549      	cmp	r1, r9
 8015e46:	dcf5      	bgt.n	8015e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015e48:	eba2 0c0c 	sub.w	ip, r2, ip
 8015e4c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015e50:	e7ef      	b.n	8015e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8015e52:	428f      	cmp	r7, r1
 8015e54:	dcee      	bgt.n	8015e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015e56:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8015e5a:	4461      	add	r1, ip
 8015e5c:	b209      	sxth	r1, r1
 8015e5e:	4589      	cmp	r9, r1
 8015e60:	dbe8      	blt.n	8015e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015e62:	4576      	cmp	r6, lr
 8015e64:	fa1f fc8e 	uxth.w	ip, lr
 8015e68:	88a1      	ldrh	r1, [r4, #4]
 8015e6a:	dc07      	bgt.n	8015e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8015e6c:	eba3 0c0c 	sub.w	ip, r3, ip
 8015e70:	f8a4 8000 	strh.w	r8, [r4]
 8015e74:	eba1 010c 	sub.w	r1, r1, ip
 8015e78:	80a1      	strh	r1, [r4, #4]
 8015e7a:	e7da      	b.n	8015e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8015e7c:	4461      	add	r1, ip
 8015e7e:	b209      	sxth	r1, r1
 8015e80:	4588      	cmp	r8, r1
 8015e82:	dbd7      	blt.n	8015e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8015e84:	9905      	ldr	r1, [sp, #20]
 8015e86:	eba1 0c0c 	sub.w	ip, r1, ip
 8015e8a:	f8a4 c004 	strh.w	ip, [r4, #4]
 8015e8e:	e7d0      	b.n	8015e32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8015e90:	2402592a 	.word	0x2402592a
 8015e94:	24025928 	.word	0x24025928
 8015e98:	24025934 	.word	0x24025934
 8015e9c:	2d00      	cmp	r5, #0
 8015e9e:	f000 816d 	beq.w	801617c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8015ea2:	9b06      	ldr	r3, [sp, #24]
 8015ea4:	445b      	add	r3, fp
 8015ea6:	461c      	mov	r4, r3
 8015ea8:	9b02      	ldr	r3, [sp, #8]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	f000 8166 	beq.w	801617c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8015eb0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8015eb4:	9803      	ldr	r0, [sp, #12]
 8015eb6:	4629      	mov	r1, r5
 8015eb8:	f7ff fd32 	bl	8015920 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015ebc:	b120      	cbz	r0, 8015ec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8015ebe:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8015ec2:	9801      	ldr	r0, [sp, #4]
 8015ec4:	f7ff fea8 	bl	8015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015ec8:	9903      	ldr	r1, [sp, #12]
 8015eca:	4628      	mov	r0, r5
 8015ecc:	f7fc ff20 	bl	8012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	f000 809c 	beq.w	801600e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8015ed6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8015eda:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8015ede:	fa1f f189 	uxth.w	r1, r9
 8015ee2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8015ee6:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ee8:	eb01 0c03 	add.w	ip, r1, r3
 8015eec:	b283      	uxth	r3, r0
 8015eee:	4548      	cmp	r0, r9
 8015ef0:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8015ef4:	fa1f fa8c 	uxth.w	sl, ip
 8015ef8:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8015efc:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8015f00:	eb03 050c 	add.w	r5, r3, ip
 8015f04:	b2ad      	uxth	r5, r5
 8015f06:	9505      	str	r5, [sp, #20]
 8015f08:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8015f0c:	9504      	str	r5, [sp, #16]
 8015f0e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8015f12:	f340 8099 	ble.w	8016048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8015f16:	1a5b      	subs	r3, r3, r1
 8015f18:	4596      	cmp	lr, r2
 8015f1a:	fa0f f08a 	sxth.w	r0, sl
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	b21e      	sxth	r6, r3
 8015f22:	dd2e      	ble.n	8015f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8015f24:	9f02      	ldr	r7, [sp, #8]
 8015f26:	fa1f fe8e 	uxth.w	lr, lr
 8015f2a:	b292      	uxth	r2, r2
 8015f2c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8015f30:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8015f34:	9f04      	ldr	r7, [sp, #16]
 8015f36:	ebae 0102 	sub.w	r1, lr, r2
 8015f3a:	44a6      	add	lr, r4
 8015f3c:	1a3f      	subs	r7, r7, r0
 8015f3e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8015f42:	b289      	uxth	r1, r1
 8015f44:	4402      	add	r2, r0
 8015f46:	fa0f fe8e 	sxth.w	lr, lr
 8015f4a:	b20d      	sxth	r5, r1
 8015f4c:	b212      	sxth	r2, r2
 8015f4e:	436f      	muls	r7, r5
 8015f50:	ebae 0202 	sub.w	r2, lr, r2
 8015f54:	4372      	muls	r2, r6
 8015f56:	4297      	cmp	r7, r2
 8015f58:	db09      	blt.n	8015f6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8015f5a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8015f5e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8015f62:	449c      	add	ip, r3
 8015f64:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8015f68:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8015f6c:	e684      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8015f6e:	4421      	add	r1, r4
 8015f70:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8015f74:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8015f78:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015f7c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8015f80:	e67a      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8015f82:	9f04      	ldr	r7, [sp, #16]
 8015f84:	42b8      	cmp	r0, r7
 8015f86:	da27      	bge.n	8015fd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8015f88:	9902      	ldr	r1, [sp, #8]
 8015f8a:	1a3f      	subs	r7, r7, r0
 8015f8c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8015f90:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8015f94:	eb05 010e 	add.w	r1, r5, lr
 8015f98:	fa1f f881 	uxth.w	r8, r1
 8015f9c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8015fa0:	4411      	add	r1, r2
 8015fa2:	fa0f f988 	sxth.w	r9, r8
 8015fa6:	eba2 020e 	sub.w	r2, r2, lr
 8015faa:	eba1 0108 	sub.w	r1, r1, r8
 8015fae:	4372      	muls	r2, r6
 8015fb0:	b289      	uxth	r1, r1
 8015fb2:	fa0f f881 	sxth.w	r8, r1
 8015fb6:	fb08 f707 	mul.w	r7, r8, r7
 8015fba:	42ba      	cmp	r2, r7
 8015fbc:	dc06      	bgt.n	8015fcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8015fbe:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8015fc2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8015fc6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8015fca:	e7ca      	b.n	8015f62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8015fcc:	4429      	add	r1, r5
 8015fce:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8015fd2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8015fd6:	e64f      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8015fd8:	9805      	ldr	r0, [sp, #20]
 8015fda:	2d06      	cmp	r5, #6
 8015fdc:	ebaa 0000 	sub.w	r0, sl, r0
 8015fe0:	b280      	uxth	r0, r0
 8015fe2:	fa0f fe80 	sxth.w	lr, r0
 8015fe6:	d817      	bhi.n	8016018 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8015fe8:	9b04      	ldr	r3, [sp, #16]
 8015fea:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8015fee:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8015ff2:	1c6b      	adds	r3, r5, #1
 8015ff4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8015ff8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8015ffc:	9b01      	ldr	r3, [sp, #4]
 8015ffe:	9801      	ldr	r0, [sp, #4]
 8016000:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016004:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016008:	805a      	strh	r2, [r3, #2]
 801600a:	809e      	strh	r6, [r3, #4]
 801600c:	80d9      	strh	r1, [r3, #6]
 801600e:	9b02      	ldr	r3, [sp, #8]
 8016010:	3c08      	subs	r4, #8
 8016012:	3b01      	subs	r3, #1
 8016014:	9302      	str	r3, [sp, #8]
 8016016:	e747      	b.n	8015ea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8016018:	9a02      	ldr	r2, [sp, #8]
 801601a:	45b6      	cmp	lr, r6
 801601c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016020:	db0d      	blt.n	801603e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8016022:	449c      	add	ip, r3
 8016024:	445a      	add	r2, fp
 8016026:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801602a:	fa1f fc8c 	uxth.w	ip, ip
 801602e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8016032:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8016036:	448c      	add	ip, r1
 8016038:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801603c:	e61c      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801603e:	445a      	add	r2, fp
 8016040:	4484      	add	ip, r0
 8016042:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8016046:	e78f      	b.n	8015f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8016048:	fa1f f18e 	uxth.w	r1, lr
 801604c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8016050:	b293      	uxth	r3, r2
 8016052:	4596      	cmp	lr, r2
 8016054:	eb01 0806 	add.w	r8, r1, r6
 8016058:	9306      	str	r3, [sp, #24]
 801605a:	fa1f f888 	uxth.w	r8, r8
 801605e:	9f06      	ldr	r7, [sp, #24]
 8016060:	fa0f f388 	sxth.w	r3, r8
 8016064:	9307      	str	r3, [sp, #28]
 8016066:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801606a:	443b      	add	r3, r7
 801606c:	b29b      	uxth	r3, r3
 801606e:	9308      	str	r3, [sp, #32]
 8016070:	da24      	bge.n	80160bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8016072:	9905      	ldr	r1, [sp, #20]
 8016074:	eba3 0308 	sub.w	r3, r3, r8
 8016078:	eba2 020e 	sub.w	r2, r2, lr
 801607c:	eba9 0000 	sub.w	r0, r9, r0
 8016080:	ebaa 0401 	sub.w	r4, sl, r1
 8016084:	b29b      	uxth	r3, r3
 8016086:	b2a4      	uxth	r4, r4
 8016088:	b219      	sxth	r1, r3
 801608a:	b225      	sxth	r5, r4
 801608c:	4348      	muls	r0, r1
 801608e:	436a      	muls	r2, r5
 8016090:	4282      	cmp	r2, r0
 8016092:	9a02      	ldr	r2, [sp, #8]
 8016094:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016098:	445a      	add	r2, fp
 801609a:	dc06      	bgt.n	80160aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801609c:	9b07      	ldr	r3, [sp, #28]
 801609e:	44a4      	add	ip, r4
 80160a0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80160a4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80160a8:	e75e      	b.n	8015f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80160aa:	9904      	ldr	r1, [sp, #16]
 80160ac:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80160b0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80160b4:	4433      	add	r3, r6
 80160b6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80160ba:	e5dd      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 80160bc:	9f06      	ldr	r7, [sp, #24]
 80160be:	9b04      	ldr	r3, [sp, #16]
 80160c0:	1bc9      	subs	r1, r1, r7
 80160c2:	fa0f f78a 	sxth.w	r7, sl
 80160c6:	b289      	uxth	r1, r1
 80160c8:	429f      	cmp	r7, r3
 80160ca:	fa0f fe81 	sxth.w	lr, r1
 80160ce:	dd23      	ble.n	8016118 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 80160d0:	9a05      	ldr	r2, [sp, #20]
 80160d2:	eba9 0000 	sub.w	r0, r9, r0
 80160d6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80160da:	ebaa 0202 	sub.w	r2, sl, r2
 80160de:	9d07      	ldr	r5, [sp, #28]
 80160e0:	fb0e f000 	mul.w	r0, lr, r0
 80160e4:	b292      	uxth	r2, r2
 80160e6:	eba5 0a03 	sub.w	sl, r5, r3
 80160ea:	9b02      	ldr	r3, [sp, #8]
 80160ec:	b214      	sxth	r4, r2
 80160ee:	00db      	lsls	r3, r3, #3
 80160f0:	fb04 fa0a 	mul.w	sl, r4, sl
 80160f4:	445b      	add	r3, fp
 80160f6:	4550      	cmp	r0, sl
 80160f8:	db03      	blt.n	8016102 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 80160fa:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80160fe:	4494      	add	ip, r2
 8016100:	e732      	b.n	8015f68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8016102:	9a04      	ldr	r2, [sp, #16]
 8016104:	4431      	add	r1, r6
 8016106:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801610a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801610e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8016112:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016116:	e75c      	b.n	8015fd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8016118:	9b08      	ldr	r3, [sp, #32]
 801611a:	2d06      	cmp	r5, #6
 801611c:	eba3 0308 	sub.w	r3, r3, r8
 8016120:	b29b      	uxth	r3, r3
 8016122:	b218      	sxth	r0, r3
 8016124:	d813      	bhi.n	801614e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8016126:	9b07      	ldr	r3, [sp, #28]
 8016128:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801612c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8016130:	1c6b      	adds	r3, r5, #1
 8016132:	9901      	ldr	r1, [sp, #4]
 8016134:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8016138:	9b01      	ldr	r3, [sp, #4]
 801613a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801613e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016142:	805a      	strh	r2, [r3, #2]
 8016144:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016146:	f8a3 e006 	strh.w	lr, [r3, #6]
 801614a:	809a      	strh	r2, [r3, #4]
 801614c:	e75f      	b.n	801600e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 801614e:	9c02      	ldr	r4, [sp, #8]
 8016150:	4570      	cmp	r0, lr
 8016152:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016156:	db0d      	blt.n	8016174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8016158:	4431      	add	r1, r6
 801615a:	9b06      	ldr	r3, [sp, #24]
 801615c:	445c      	add	r4, fp
 801615e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8016162:	b289      	uxth	r1, r1
 8016164:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8016168:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801616c:	4419      	add	r1, r3
 801616e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8016172:	e581      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8016174:	445c      	add	r4, fp
 8016176:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801617a:	e79b      	b.n	80160b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801617c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016180:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8016184:	1e65      	subs	r5, r4, #1
 8016186:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801618a:	b2ad      	uxth	r5, r5
 801618c:	42b5      	cmp	r5, r6
 801618e:	d044      	beq.n	801621a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8016190:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8016194:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8016198:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801619c:	4282      	cmp	r2, r0
 801619e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80161a2:	d11f      	bne.n	80161e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 80161a4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80161a8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80161ac:	459c      	cmp	ip, r3
 80161ae:	d119      	bne.n	80161e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 80161b0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80161b4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80161b8:	19d8      	adds	r0, r3, r7
 80161ba:	b200      	sxth	r0, r0
 80161bc:	4288      	cmp	r0, r1
 80161be:	d109      	bne.n	80161d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80161c0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80161c4:	4413      	add	r3, r2
 80161c6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80161ca:	4629      	mov	r1, r5
 80161cc:	9801      	ldr	r0, [sp, #4]
 80161ce:	f7ff fd23 	bl	8015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80161d2:	e003      	b.n	80161dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80161d4:	4411      	add	r1, r2
 80161d6:	b209      	sxth	r1, r1
 80161d8:	42b9      	cmp	r1, r7
 80161da:	d0f3      	beq.n	80161c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80161dc:	3d01      	subs	r5, #1
 80161de:	3c08      	subs	r4, #8
 80161e0:	b2ad      	uxth	r5, r5
 80161e2:	e7d3      	b.n	801618c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 80161e4:	42b9      	cmp	r1, r7
 80161e6:	d1f9      	bne.n	80161dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80161e8:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80161ec:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80161f0:	4299      	cmp	r1, r3
 80161f2:	d1f3      	bne.n	80161dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 80161f4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80161f8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80161fc:	181f      	adds	r7, r3, r0
 80161fe:	b23f      	sxth	r7, r7
 8016200:	42ba      	cmp	r2, r7
 8016202:	d105      	bne.n	8016210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8016204:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8016208:	440b      	add	r3, r1
 801620a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801620e:	e7dc      	b.n	80161ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8016210:	440a      	add	r2, r1
 8016212:	b212      	sxth	r2, r2
 8016214:	4290      	cmp	r0, r2
 8016216:	d1e1      	bne.n	80161dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8016218:	e7f6      	b.n	8016208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 801621a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801621e:	2e07      	cmp	r6, #7
 8016220:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016224:	d812      	bhi.n	801624c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8016226:	1c75      	adds	r5, r6, #1
 8016228:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801622c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8016230:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8016234:	9d01      	ldr	r5, [sp, #4]
 8016236:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801623a:	442c      	add	r4, r5
 801623c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016240:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016244:	8061      	strh	r1, [r4, #2]
 8016246:	80a2      	strh	r2, [r4, #4]
 8016248:	80e3      	strh	r3, [r4, #6]
 801624a:	e57f      	b.n	8015d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801624c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016250:	3e01      	subs	r6, #1
 8016252:	445c      	add	r4, fp
 8016254:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8016258:	f04f 37ff 	mov.w	r7, #4294967295
 801625c:	2500      	movs	r5, #0
 801625e:	9305      	str	r3, [sp, #20]
 8016260:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8016264:	1e72      	subs	r2, r6, #1
 8016266:	9302      	str	r3, [sp, #8]
 8016268:	4691      	mov	r9, r2
 801626a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801626e:	9304      	str	r3, [sp, #16]
 8016270:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8016274:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016278:	6818      	ldr	r0, [r3, #0]
 801627a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801627e:	9207      	str	r2, [sp, #28]
 8016280:	bf16      	itet	ne
 8016282:	9905      	ldrne	r1, [sp, #20]
 8016284:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016288:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801628c:	9306      	str	r3, [sp, #24]
 801628e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016292:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016296:	fb18 f801 	smulbb	r8, r8, r1
 801629a:	6859      	ldr	r1, [r3, #4]
 801629c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80162a0:	4671      	mov	r1, lr
 80162a2:	a80c      	add	r0, sp, #48	@ 0x30
 80162a4:	f7ff fb62 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80162a8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80162ac:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80162b0:	f04f 0c08 	mov.w	ip, #8
 80162b4:	9b04      	ldr	r3, [sp, #16]
 80162b6:	9a02      	ldr	r2, [sp, #8]
 80162b8:	fb10 f001 	smulbb	r0, r0, r1
 80162bc:	fb02 8803 	mla	r8, r2, r3, r8
 80162c0:	eba0 0108 	sub.w	r1, r0, r8
 80162c4:	fb90 f0fc 	sdiv	r0, r0, ip
 80162c8:	4288      	cmp	r0, r1
 80162ca:	dc20      	bgt.n	801630e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 80162cc:	4551      	cmp	r1, sl
 80162ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80162d2:	da03      	bge.n	80162dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 80162d4:	b1d9      	cbz	r1, 801630e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 80162d6:	468a      	mov	sl, r1
 80162d8:	464f      	mov	r7, r9
 80162da:	4635      	mov	r5, r6
 80162dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80162e0:	f119 0f02 	cmn.w	r9, #2
 80162e4:	d1c6      	bne.n	8016274 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 80162e6:	4616      	mov	r6, r2
 80162e8:	3201      	adds	r2, #1
 80162ea:	f1a4 0408 	sub.w	r4, r4, #8
 80162ee:	d1b7      	bne.n	8016260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 80162f0:	9b01      	ldr	r3, [sp, #4]
 80162f2:	b2ac      	uxth	r4, r5
 80162f4:	00ed      	lsls	r5, r5, #3
 80162f6:	1958      	adds	r0, r3, r5
 80162f8:	1c7b      	adds	r3, r7, #1
 80162fa:	d10b      	bne.n	8016314 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 80162fc:	4601      	mov	r1, r0
 80162fe:	9803      	ldr	r0, [sp, #12]
 8016300:	f7ff fb34 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016304:	4621      	mov	r1, r4
 8016306:	9801      	ldr	r0, [sp, #4]
 8016308:	f7ff fc86 	bl	8015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801630c:	e4b4      	b.n	8015c78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 801630e:	464f      	mov	r7, r9
 8016310:	4635      	mov	r5, r6
 8016312:	e7ed      	b.n	80162f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8016314:	9b01      	ldr	r3, [sp, #4]
 8016316:	00ff      	lsls	r7, r7, #3
 8016318:	445d      	add	r5, fp
 801631a:	19d9      	adds	r1, r3, r7
 801631c:	445f      	add	r7, fp
 801631e:	f7ff fb25 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016322:	9b03      	ldr	r3, [sp, #12]
 8016324:	cb03      	ldmia	r3!, {r0, r1}
 8016326:	9b03      	ldr	r3, [sp, #12]
 8016328:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801632c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8016330:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016334:	6869      	ldr	r1, [r5, #4]
 8016336:	c303      	stmia	r3!, {r0, r1}
 8016338:	e7e4      	b.n	8016304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801633a:	bf00      	nop

0801633c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016340:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8016344:	b0a1      	sub	sp, #132	@ 0x84
 8016346:	4604      	mov	r4, r0
 8016348:	4630      	mov	r0, r6
 801634a:	f7f9 f908 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 801634e:	4605      	mov	r5, r0
 8016350:	b948      	cbnz	r0, 8016366 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8016352:	6823      	ldr	r3, [r4, #0]
 8016354:	4620      	mov	r0, r4
 8016356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016358:	e896 0006 	ldmia.w	r6, {r1, r2}
 801635c:	4798      	blx	r3
 801635e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8016362:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8016366:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801636a:	2b00      	cmp	r3, #0
 801636c:	d149      	bne.n	8016402 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 801636e:	4bb2      	ldr	r3, [pc, #712]	@ (8016638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8016376:	1ebb      	subs	r3, r7, #2
 8016378:	425f      	negs	r7, r3
 801637a:	415f      	adcs	r7, r3
 801637c:	4baf      	ldr	r3, [pc, #700]	@ (801663c <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d040      	beq.n	8016406 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8016384:	4dae      	ldr	r5, [pc, #696]	@ (8016640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8016386:	4628      	mov	r0, r5
 8016388:	f7f9 f8e9 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 801638c:	4606      	mov	r6, r0
 801638e:	2800      	cmp	r0, #0
 8016390:	d139      	bne.n	8016406 <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8016392:	4628      	mov	r0, r5
 8016394:	f7ff f9a0 	bl	80156d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	6829      	ldr	r1, [r5, #0]
 801639c:	4620      	mov	r0, r4
 801639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80163a0:	686a      	ldr	r2, [r5, #4]
 80163a2:	4798      	blx	r3
 80163a4:	802e      	strh	r6, [r5, #0]
 80163a6:	806e      	strh	r6, [r5, #2]
 80163a8:	80ae      	strh	r6, [r5, #4]
 80163aa:	80ee      	strh	r6, [r5, #6]
 80163ac:	af0f      	add	r7, sp, #60	@ 0x3c
 80163ae:	4ea5      	ldr	r6, [pc, #660]	@ (8016644 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 80163b0:	4638      	mov	r0, r7
 80163b2:	f7ff fbd5 	bl	8015b60 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80163b6:	8835      	ldrh	r5, [r6, #0]
 80163b8:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 80163bc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80163c0:	462b      	mov	r3, r5
 80163c2:	4563      	cmp	r3, ip
 80163c4:	d224      	bcs.n	8016410 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 80163c6:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 80163ca:	2907      	cmp	r1, #7
 80163cc:	d816      	bhi.n	80163fc <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80163ce:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80163d2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80163d6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80163da:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 80163de:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 80163e2:	1c4a      	adds	r2, r1, #1
 80163e4:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 80163e8:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 80163ec:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 80163f0:	f8a2 a002 	strh.w	sl, [r2, #2]
 80163f4:	f8a2 8004 	strh.w	r8, [r2, #4]
 80163f8:	f8a2 e006 	strh.w	lr, [r2, #6]
 80163fc:	3301      	adds	r3, #1
 80163fe:	b29b      	uxth	r3, r3
 8016400:	e7df      	b.n	80163c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8016402:	2701      	movs	r7, #1
 8016404:	e7ba      	b.n	801637c <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 8016406:	2f00      	cmp	r7, #0
 8016408:	d1d0      	bne.n	80163ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801640a:	b021      	add	sp, #132	@ 0x84
 801640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016410:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8016414:	42ab      	cmp	r3, r5
 8016416:	d90c      	bls.n	8016432 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 8016418:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801641c:	6822      	ldr	r2, [r4, #0]
 801641e:	3501      	adds	r5, #1
 8016420:	4620      	mov	r0, r4
 8016422:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8016424:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8016428:	b2ad      	uxth	r5, r5
 801642a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801642e:	47b8      	blx	r7
 8016430:	e7ee      	b.n	8016410 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 8016432:	4d81      	ldr	r5, [pc, #516]	@ (8016638 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8016434:	6828      	ldr	r0, [r5, #0]
 8016436:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801643a:	2b01      	cmp	r3, #1
 801643c:	f040 813d 	bne.w	80166ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 8016440:	4a81      	ldr	r2, [pc, #516]	@ (8016648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 8016442:	8833      	ldrh	r3, [r6, #0]
 8016444:	7812      	ldrb	r2, [r2, #0]
 8016446:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 801644a:	2a01      	cmp	r2, #1
 801644c:	d014      	beq.n	8016478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801644e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8016452:	f04f 0900 	mov.w	r9, #0
 8016456:	32ae      	adds	r2, #174	@ 0xae
 8016458:	4283      	cmp	r3, r0
 801645a:	f102 0208 	add.w	r2, r2, #8
 801645e:	f280 8083 	bge.w	8016568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8016462:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 8016466:	3301      	adds	r3, #1
 8016468:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 801646c:	4439      	add	r1, r7
 801646e:	b209      	sxth	r1, r1
 8016470:	4589      	cmp	r9, r1
 8016472:	bfb8      	it	lt
 8016474:	4689      	movlt	r9, r1
 8016476:	e7ef      	b.n	8016458 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 8016478:	4f74      	ldr	r7, [pc, #464]	@ (801664c <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 801647a:	883a      	ldrh	r2, [r7, #0]
 801647c:	4693      	mov	fp, r2
 801647e:	4283      	cmp	r3, r0
 8016480:	da08      	bge.n	8016494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 8016482:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8016486:	3301      	adds	r3, #1
 8016488:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 801648c:	458b      	cmp	fp, r1
 801648e:	bfa8      	it	ge
 8016490:	468b      	movge	fp, r1
 8016492:	e7f4      	b.n	801647e <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8016494:	2a0f      	cmp	r2, #15
 8016496:	f04f 0300 	mov.w	r3, #0
 801649a:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 8016650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 801649e:	bf8c      	ite	hi
 80164a0:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 80164a4:	f04f 0801 	movls.w	r8, #1
 80164a8:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80164ac:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80164b0:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80164b4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80164b8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80164bc:	6828      	ldr	r0, [r5, #0]
 80164be:	455b      	cmp	r3, fp
 80164c0:	f340 80c8 	ble.w	8016654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80164c4:	6803      	ldr	r3, [r0, #0]
 80164c6:	f8b7 a000 	ldrh.w	sl, [r7]
 80164ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80164ce:	4798      	blx	r3
 80164d0:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80164d4:	ebaa 0000 	sub.w	r0, sl, r0
 80164d8:	682b      	ldr	r3, [r5, #0]
 80164da:	ebac 0e08 	sub.w	lr, ip, r8
 80164de:	b280      	uxth	r0, r0
 80164e0:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 80164e4:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 80164e8:	4570      	cmp	r0, lr
 80164ea:	dd05      	ble.n	80164f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 80164ec:	4558      	cmp	r0, fp
 80164ee:	dd03      	ble.n	80164f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 80164f0:	b901      	cbnz	r1, 80164f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 80164f2:	b392      	cbz	r2, 801655a <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 80164f4:	4658      	mov	r0, fp
 80164f6:	e006      	b.n	8016506 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 80164f8:	2900      	cmp	r1, #0
 80164fa:	d1fb      	bne.n	80164f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 80164fc:	2a00      	cmp	r2, #0
 80164fe:	d1f9      	bne.n	80164f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8016500:	4558      	cmp	r0, fp
 8016502:	bfb8      	it	lt
 8016504:	4658      	movlt	r0, fp
 8016506:	f9b9 3000 	ldrsh.w	r3, [r9]
 801650a:	2200      	movs	r2, #0
 801650c:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8016510:	ebac 0000 	sub.w	r0, ip, r0
 8016514:	f8b6 a000 	ldrh.w	sl, [r6]
 8016518:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801651c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8016520:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8016524:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016528:	4553      	cmp	r3, sl
 801652a:	ddc5      	ble.n	80164b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801652c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8016530:	ab0d      	add	r3, sp, #52	@ 0x34
 8016532:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016536:	6851      	ldr	r1, [r2, #4]
 8016538:	c303      	stmia	r3!, {r0, r1}
 801653a:	a80d      	add	r0, sp, #52	@ 0x34
 801653c:	a90b      	add	r1, sp, #44	@ 0x2c
 801653e:	f7f8 ffcb 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8016542:	a80d      	add	r0, sp, #52	@ 0x34
 8016544:	f7f9 f80b 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016548:	b920      	cbnz	r0, 8016554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 801654a:	6823      	ldr	r3, [r4, #0]
 801654c:	a90d      	add	r1, sp, #52	@ 0x34
 801654e:	4620      	mov	r0, r4
 8016550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016552:	4798      	blx	r3
 8016554:	f10a 0a01 	add.w	sl, sl, #1
 8016558:	e7e4      	b.n	8016524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 801655a:	681a      	ldr	r2, [r3, #0]
 801655c:	2101      	movs	r1, #1
 801655e:	4618      	mov	r0, r3
 8016560:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8016564:	4790      	blx	r2
 8016566:	e7a7      	b.n	80164b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 8016568:	4b39      	ldr	r3, [pc, #228]	@ (8016650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 801656a:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801664c <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 801656e:	881f      	ldrh	r7, [r3, #0]
 8016570:	2300      	movs	r3, #0
 8016572:	2f0f      	cmp	r7, #15
 8016574:	bf8c      	ite	hi
 8016576:	08ff      	lsrhi	r7, r7, #3
 8016578:	2701      	movls	r7, #1
 801657a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801657e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016582:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 8016586:	6828      	ldr	r0, [r5, #0]
 8016588:	4413      	add	r3, r2
 801658a:	b21b      	sxth	r3, r3
 801658c:	454b      	cmp	r3, r9
 801658e:	da61      	bge.n	8016654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8016590:	6803      	ldr	r3, [r0, #0]
 8016592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016596:	4798      	blx	r3
 8016598:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 801659c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80165a0:	682a      	ldr	r2, [r5, #0]
 80165a2:	4473      	add	r3, lr
 80165a4:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 80165a8:	b21b      	sxth	r3, r3
 80165aa:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 80165ae:	eb03 0e07 	add.w	lr, r3, r7
 80165b2:	4570      	cmp	r0, lr
 80165b4:	da0d      	bge.n	80165d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 80165b6:	4548      	cmp	r0, r9
 80165b8:	da0b      	bge.n	80165d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 80165ba:	f1bc 0f00 	cmp.w	ip, #0
 80165be:	d138      	bne.n	8016632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80165c0:	2900      	cmp	r1, #0
 80165c2:	d136      	bne.n	8016632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80165c4:	6813      	ldr	r3, [r2, #0]
 80165c6:	2101      	movs	r1, #1
 80165c8:	4610      	mov	r0, r2
 80165ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80165ce:	4798      	blx	r3
 80165d0:	e7d5      	b.n	801657e <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 80165d2:	f1bc 0f00 	cmp.w	ip, #0
 80165d6:	d12c      	bne.n	8016632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80165d8:	bb59      	cbnz	r1, 8016632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80165da:	4548      	cmp	r0, r9
 80165dc:	bfa8      	it	ge
 80165de:	4648      	movge	r0, r9
 80165e0:	f9b8 2000 	ldrsh.w	r2, [r8]
 80165e4:	2100      	movs	r1, #0
 80165e6:	1ac0      	subs	r0, r0, r3
 80165e8:	f8b6 a000 	ldrh.w	sl, [r6]
 80165ec:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80165f0:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80165f4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80165f8:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80165fc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016600:	4553      	cmp	r3, sl
 8016602:	ddbc      	ble.n	801657e <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8016604:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8016608:	ab0d      	add	r3, sp, #52	@ 0x34
 801660a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801660e:	6851      	ldr	r1, [r2, #4]
 8016610:	c303      	stmia	r3!, {r0, r1}
 8016612:	a80d      	add	r0, sp, #52	@ 0x34
 8016614:	a90b      	add	r1, sp, #44	@ 0x2c
 8016616:	f7f8 ff5f 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 801661a:	a80d      	add	r0, sp, #52	@ 0x34
 801661c:	f7f8 ff9f 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016620:	b920      	cbnz	r0, 801662c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8016622:	6823      	ldr	r3, [r4, #0]
 8016624:	a90d      	add	r1, sp, #52	@ 0x34
 8016626:	4620      	mov	r0, r4
 8016628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801662a:	4798      	blx	r3
 801662c:	f10a 0a01 	add.w	sl, sl, #1
 8016630:	e7e4      	b.n	80165fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 8016632:	4648      	mov	r0, r9
 8016634:	e7d4      	b.n	80165e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 8016636:	bf00      	nop
 8016638:	24025934 	.word	0x24025934
 801663c:	24025974 	.word	0x24025974
 8016640:	24025980 	.word	0x24025980
 8016644:	240000ac 	.word	0x240000ac
 8016648:	2402592c 	.word	0x2402592c
 801664c:	24025928 	.word	0x24025928
 8016650:	2402592a 	.word	0x2402592a
 8016654:	6828      	ldr	r0, [r5, #0]
 8016656:	6803      	ldr	r3, [r0, #0]
 8016658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801665a:	4798      	blx	r3
 801665c:	4ba4      	ldr	r3, [pc, #656]	@ (80168f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 801665e:	781b      	ldrb	r3, [r3, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	f43f aed2 	beq.w	801640a <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8016666:	2300      	movs	r3, #0
 8016668:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 801666c:	a80f      	add	r0, sp, #60	@ 0x3c
 801666e:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 8016672:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8016676:	4b9f      	ldr	r3, [pc, #636]	@ (80168f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 8016678:	881b      	ldrh	r3, [r3, #0]
 801667a:	42b3      	cmp	r3, r6
 801667c:	f4bf aec5 	bcs.w	801640a <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 8016680:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8016684:	2907      	cmp	r1, #7
 8016686:	d815      	bhi.n	80166b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 8016688:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801668c:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016690:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8016694:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8016698:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801669c:	1c4a      	adds	r2, r1, #1
 801669e:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80166a2:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 80166a6:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 80166aa:	f8a2 e002 	strh.w	lr, [r2, #2]
 80166ae:	f8a2 c004 	strh.w	ip, [r2, #4]
 80166b2:	80d7      	strh	r7, [r2, #6]
 80166b4:	3301      	adds	r3, #1
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	e7df      	b.n	801667a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 80166ba:	2b02      	cmp	r3, #2
 80166bc:	f040 80ce 	bne.w	801685c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80166c0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80166c4:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 80166c8:	9308      	str	r3, [sp, #32]
 80166ca:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 80166ce:	f10b 37ff 	add.w	r7, fp, #4294967295
 80166d2:	9307      	str	r3, [sp, #28]
 80166d4:	b2bf      	uxth	r7, r7
 80166d6:	6803      	ldr	r3, [r0, #0]
 80166d8:	fa0f f887 	sxth.w	r8, r7
 80166dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80166e0:	4798      	blx	r3
 80166e2:	4b85      	ldr	r3, [pc, #532]	@ (80168f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 80166e4:	4682      	mov	sl, r0
 80166e6:	2000      	movs	r0, #0
 80166e8:	881b      	ldrh	r3, [r3, #0]
 80166ea:	9302      	str	r3, [sp, #8]
 80166ec:	4b83      	ldr	r3, [pc, #524]	@ (80168fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 80166ee:	881e      	ldrh	r6, [r3, #0]
 80166f0:	4b83      	ldr	r3, [pc, #524]	@ (8016900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	2b01      	cmp	r3, #1
 80166f6:	bf1e      	ittt	ne
 80166f8:	9b02      	ldrne	r3, [sp, #8]
 80166fa:	9602      	strne	r6, [sp, #8]
 80166fc:	461e      	movne	r6, r3
 80166fe:	f7eb fb0f 	bl	8001d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016702:	fb96 fbfb 	sdiv	fp, r6, fp
 8016706:	fb0b f808 	mul.w	r8, fp, r8
 801670a:	45c2      	cmp	sl, r8
 801670c:	da0c      	bge.n	8016728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 801670e:	6828      	ldr	r0, [r5, #0]
 8016710:	210a      	movs	r1, #10
 8016712:	6803      	ldr	r3, [r0, #0]
 8016714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016718:	4798      	blx	r3
 801671a:	6828      	ldr	r0, [r5, #0]
 801671c:	6803      	ldr	r3, [r0, #0]
 801671e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016722:	4798      	blx	r3
 8016724:	4682      	mov	sl, r0
 8016726:	e7f0      	b.n	801670a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 8016728:	2000      	movs	r0, #0
 801672a:	f04f 0800 	mov.w	r8, #0
 801672e:	f7eb fb27 	bl	8001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016732:	fa1f f38b 	uxth.w	r3, fp
 8016736:	4645      	mov	r5, r8
 8016738:	fb17 f703 	smulbb	r7, r7, r3
 801673c:	9304      	str	r3, [sp, #16]
 801673e:	b2bb      	uxth	r3, r7
 8016740:	4f70      	ldr	r7, [pc, #448]	@ (8016904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 8016742:	9305      	str	r3, [sp, #20]
 8016744:	0973      	lsrs	r3, r6, #5
 8016746:	9306      	str	r3, [sp, #24]
 8016748:	42b5      	cmp	r5, r6
 801674a:	d087      	beq.n	801665c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801674c:	6838      	ldr	r0, [r7, #0]
 801674e:	6803      	ldr	r3, [r0, #0]
 8016750:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016754:	4798      	blx	r3
 8016756:	4582      	cmp	sl, r0
 8016758:	4681      	mov	r9, r0
 801675a:	d907      	bls.n	801676c <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 801675c:	f1b8 0f00 	cmp.w	r8, #0
 8016760:	d007      	beq.n	8016772 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 8016762:	6838      	ldr	r0, [r7, #0]
 8016764:	6803      	ldr	r3, [r0, #0]
 8016766:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801676a:	e776      	b.n	801665a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801676c:	f1b8 0f00 	cmp.w	r8, #0
 8016770:	d003      	beq.n	801677a <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 8016772:	454d      	cmp	r5, r9
 8016774:	d3f5      	bcc.n	8016762 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 8016776:	f04f 0801 	mov.w	r8, #1
 801677a:	9a04      	ldr	r2, [sp, #16]
 801677c:	fb95 f3fb 	sdiv	r3, r5, fp
 8016780:	9303      	str	r3, [sp, #12]
 8016782:	3301      	adds	r3, #1
 8016784:	fb13 f302 	smulbb	r3, r3, r2
 8016788:	b299      	uxth	r1, r3
 801678a:	f1b8 0f00 	cmp.w	r8, #0
 801678e:	d04d      	beq.n	801682c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8016790:	eb09 030b 	add.w	r3, r9, fp
 8016794:	42b3      	cmp	r3, r6
 8016796:	bfa8      	it	ge
 8016798:	4633      	movge	r3, r6
 801679a:	b29b      	uxth	r3, r3
 801679c:	9807      	ldr	r0, [sp, #28]
 801679e:	428b      	cmp	r3, r1
 80167a0:	bf94      	ite	ls
 80167a2:	ebc5 0203 	rsbls	r2, r5, r3
 80167a6:	ebc5 0201 	rsbhi	r2, r5, r1
 80167aa:	4282      	cmp	r2, r0
 80167ac:	bfa8      	it	ge
 80167ae:	4602      	movge	r2, r0
 80167b0:	9808      	ldr	r0, [sp, #32]
 80167b2:	fa1f fa82 	uxth.w	sl, r2
 80167b6:	4582      	cmp	sl, r0
 80167b8:	d205      	bcs.n	80167c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 80167ba:	fa15 f082 	uxtah	r0, r5, r2
 80167be:	4286      	cmp	r6, r0
 80167c0:	d001      	beq.n	80167c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 80167c2:	4299      	cmp	r1, r3
 80167c4:	d23f      	bcs.n	8016846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 80167c6:	2001      	movs	r0, #1
 80167c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80167ca:	f7eb faa9 	bl	8001d20 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80167ce:	6838      	ldr	r0, [r7, #0]
 80167d0:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80167d4:	6803      	ldr	r3, [r0, #0]
 80167d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80167da:	4798      	blx	r3
 80167dc:	4b48      	ldr	r3, [pc, #288]	@ (8016900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80167de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80167e0:	2000      	movs	r0, #0
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80167e8:	b212      	sxth	r2, r2
 80167ea:	2b01      	cmp	r3, #1
 80167ec:	d122      	bne.n	8016834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 80167ee:	1b73      	subs	r3, r6, r5
 80167f0:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 80167f4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80167f8:	eba3 030a 	sub.w	r3, r3, sl
 80167fc:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8016800:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8016804:	6823      	ldr	r3, [r4, #0]
 8016806:	a90d      	add	r1, sp, #52	@ 0x34
 8016808:	4620      	mov	r0, r4
 801680a:	4455      	add	r5, sl
 801680c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801680e:	4798      	blx	r3
 8016810:	6838      	ldr	r0, [r7, #0]
 8016812:	9b03      	ldr	r3, [sp, #12]
 8016814:	b2ad      	uxth	r5, r5
 8016816:	4259      	negs	r1, r3
 8016818:	6803      	ldr	r3, [r0, #0]
 801681a:	b209      	sxth	r1, r1
 801681c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016820:	4798      	blx	r3
 8016822:	2001      	movs	r0, #1
 8016824:	f7eb faac 	bl	8001d80 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8016828:	46ca      	mov	sl, r9
 801682a:	e78d      	b.n	8016748 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 801682c:	9b05      	ldr	r3, [sp, #20]
 801682e:	eba9 0303 	sub.w	r3, r9, r3
 8016832:	e7b2      	b.n	801679a <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 8016834:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8016838:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 801683c:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 8016840:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 8016844:	e7de      	b.n	8016804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 8016846:	6838      	ldr	r0, [r7, #0]
 8016848:	6803      	ldr	r3, [r0, #0]
 801684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801684c:	4798      	blx	r3
 801684e:	6838      	ldr	r0, [r7, #0]
 8016850:	9906      	ldr	r1, [sp, #24]
 8016852:	6803      	ldr	r3, [r0, #0]
 8016854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016858:	4798      	blx	r3
 801685a:	e7e5      	b.n	8016828 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 801685c:	2b03      	cmp	r3, #3
 801685e:	f040 8133 	bne.w	8016ac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 8016862:	4b27      	ldr	r3, [pc, #156]	@ (8016900 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8016864:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8016868:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	2b01      	cmp	r3, #1
 8016870:	f000 8095 	beq.w	801699e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8016874:	8832      	ldrh	r2, [r6, #0]
 8016876:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801687a:	3201      	adds	r2, #1
 801687c:	b292      	uxth	r2, r2
 801687e:	2900      	cmp	r1, #0
 8016880:	f43f aeec 	beq.w	801665c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8016884:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 8016888:	4694      	mov	ip, r2
 801688a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801688e:	f04f 0800 	mov.w	r8, #0
 8016892:	441d      	add	r5, r3
 8016894:	b22d      	sxth	r5, r5
 8016896:	fa1f f38c 	uxth.w	r3, ip
 801689a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801689e:	4299      	cmp	r1, r3
 80168a0:	f240 80bc 	bls.w	8016a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 80168a4:	4427      	add	r7, r4
 80168a6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80168aa:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80168ae:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80168b2:	4283      	cmp	r3, r0
 80168b4:	f340 809e 	ble.w	80169f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 80168b8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 80168bc:	46e0      	mov	r8, ip
 80168be:	4405      	add	r5, r0
 80168c0:	b22d      	sxth	r5, r5
 80168c2:	429d      	cmp	r5, r3
 80168c4:	bfa8      	it	ge
 80168c6:	461d      	movge	r5, r3
 80168c8:	f10c 0c01 	add.w	ip, ip, #1
 80168cc:	e7e3      	b.n	8016896 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 80168ce:	d10a      	bne.n	80168e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 80168d0:	4562      	cmp	r2, ip
 80168d2:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 80168d6:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80168da:	bfb8      	it	lt
 80168dc:	4662      	movlt	r2, ip
 80168de:	4288      	cmp	r0, r1
 80168e0:	bfb8      	it	lt
 80168e2:	4698      	movlt	r8, r3
 80168e4:	e084      	b.n	80169f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 80168e6:	428a      	cmp	r2, r1
 80168e8:	bfb8      	it	lt
 80168ea:	460a      	movlt	r2, r1
 80168ec:	e080      	b.n	80169f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 80168ee:	bf00      	nop
 80168f0:	24025932 	.word	0x24025932
 80168f4:	240000ac 	.word	0x240000ac
 80168f8:	2402592a 	.word	0x2402592a
 80168fc:	24025928 	.word	0x24025928
 8016900:	2402592c 	.word	0x2402592c
 8016904:	24025934 	.word	0x24025934
 8016908:	19e1      	adds	r1, r4, r7
 801690a:	ab0d      	add	r3, sp, #52	@ 0x34
 801690c:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8016910:	6849      	ldr	r1, [r1, #4]
 8016912:	c303      	stmia	r3!, {r0, r1}
 8016914:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 8016918:	a80d      	add	r0, sp, #52	@ 0x34
 801691a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801691e:	454b      	cmp	r3, r9
 8016920:	440b      	add	r3, r1
 8016922:	bfb8      	it	lt
 8016924:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 8016928:	1a9b      	subs	r3, r3, r2
 801692a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801692e:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8016932:	f7fe feeb 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016936:	a80d      	add	r0, sp, #52	@ 0x34
 8016938:	f7f8 fe11 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 801693c:	bb78      	cbnz	r0, 801699e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 801693e:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 8016942:	4427      	add	r7, r4
 8016944:	6828      	ldr	r0, [r5, #0]
 8016946:	45cc      	cmp	ip, r9
 8016948:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801694c:	f8d0 e000 	ldr.w	lr, [r0]
 8016950:	bfd8      	it	le
 8016952:	fa1f fc8c 	uxthle.w	ip, ip
 8016956:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801695a:	bfc8      	it	gt
 801695c:	fa1f fc89 	uxthgt.w	ip, r9
 8016960:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8016964:	f8cd c000 	str.w	ip, [sp]
 8016968:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 801696c:	47d8      	blx	fp
 801696e:	4683      	mov	fp, r0
 8016970:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8016974:	a80d      	add	r0, sp, #52	@ 0x34
 8016976:	f7fe feaf 	bl	80156d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801697a:	6823      	ldr	r3, [r4, #0]
 801697c:	4620      	mov	r0, r4
 801697e:	a90d      	add	r1, sp, #52	@ 0x34
 8016980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016982:	4798      	blx	r3
 8016984:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 8016988:	eba0 000b 	sub.w	r0, r0, fp
 801698c:	b200      	sxth	r0, r0
 801698e:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8016992:	b920      	cbnz	r0, 801699e <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8016994:	fa1f f188 	uxth.w	r1, r8
 8016998:	4650      	mov	r0, sl
 801699a:	f7ff f93d 	bl	8015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801699e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80169a2:	f1bb 0f00 	cmp.w	fp, #0
 80169a6:	f43f ae59 	beq.w	801665c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80169aa:	8833      	ldrh	r3, [r6, #0]
 80169ac:	f04f 0800 	mov.w	r8, #0
 80169b0:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 80169b4:	3301      	adds	r3, #1
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	b299      	uxth	r1, r3
 80169ba:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80169be:	458b      	cmp	fp, r1
 80169c0:	d9a2      	bls.n	8016908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 80169c2:	4427      	add	r7, r4
 80169c4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 80169c8:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 80169cc:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 80169d0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 80169d4:	4408      	add	r0, r1
 80169d6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 80169da:	4461      	add	r1, ip
 80169dc:	b200      	sxth	r0, r0
 80169de:	b209      	sxth	r1, r1
 80169e0:	4288      	cmp	r0, r1
 80169e2:	f6bf af74 	bge.w	80168ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 80169e6:	4584      	cmp	ip, r0
 80169e8:	4662      	mov	r2, ip
 80169ea:	4698      	mov	r8, r3
 80169ec:	bfb8      	it	lt
 80169ee:	4602      	movlt	r2, r0
 80169f0:	3301      	adds	r3, #1
 80169f2:	e7e1      	b.n	80169b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 80169f4:	d10e      	bne.n	8016a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 80169f6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80169fa:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80169fe:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8016a02:	4473      	add	r3, lr
 8016a04:	b21b      	sxth	r3, r3
 8016a06:	429d      	cmp	r5, r3
 8016a08:	bfa8      	it	ge
 8016a0a:	461d      	movge	r5, r3
 8016a0c:	4287      	cmp	r7, r0
 8016a0e:	bfb8      	it	lt
 8016a10:	46e0      	movlt	r8, ip
 8016a12:	e759      	b.n	80168c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8016a14:	4285      	cmp	r5, r0
 8016a16:	bfa8      	it	ge
 8016a18:	4605      	movge	r5, r0
 8016a1a:	e755      	b.n	80168c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8016a1c:	eb0a 0007 	add.w	r0, sl, r7
 8016a20:	4427      	add	r7, r4
 8016a22:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8016a26:	45cb      	cmp	fp, r9
 8016a28:	bfbc      	itt	lt
 8016a2a:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 8016a2e:	445d      	addlt	r5, fp
 8016a30:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8016a34:	bfb8      	it	lt
 8016a36:	b22d      	sxthlt	r5, r5
 8016a38:	f7f8 fd91 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016a3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016a40:	2800      	cmp	r0, #0
 8016a42:	f47f af1c 	bne.w	801687e <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 8016a46:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8016a4a:	fa1f fb8b 	uxth.w	fp, fp
 8016a4e:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8016a52:	1aad      	subs	r5, r5, r2
 8016a54:	4829      	ldr	r0, [pc, #164]	@ (8016afc <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 8016a56:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8016a5a:	454d      	cmp	r5, r9
 8016a5c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8016a60:	6800      	ldr	r0, [r0, #0]
 8016a62:	bfa8      	it	ge
 8016a64:	464d      	movge	r5, r9
 8016a66:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 8016a6a:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8016a6e:	b289      	uxth	r1, r1
 8016a70:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8016a74:	b2ad      	uxth	r5, r5
 8016a76:	f8d0 c000 	ldr.w	ip, [r0]
 8016a7a:	b292      	uxth	r2, r2
 8016a7c:	455d      	cmp	r5, fp
 8016a7e:	bf94      	ite	ls
 8016a80:	9500      	strls	r5, [sp, #0]
 8016a82:	f8cd b000 	strhi.w	fp, [sp]
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 8016a8c:	47a8      	blx	r5
 8016a8e:	6823      	ldr	r3, [r4, #0]
 8016a90:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8016a94:	a90d      	add	r1, sp, #52	@ 0x34
 8016a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016a98:	4620      	mov	r0, r4
 8016a9a:	4798      	blx	r3
 8016a9c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8016aa0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8016aa4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8016aa8:	1a5b      	subs	r3, r3, r1
 8016aaa:	440a      	add	r2, r1
 8016aac:	b21b      	sxth	r3, r3
 8016aae:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8016ab2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	f47f aedc 	bne.w	8016874 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8016abc:	fa1f f188 	uxth.w	r1, r8
 8016ac0:	4650      	mov	r0, sl
 8016ac2:	f7ff f8a9 	bl	8015c18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016ac6:	e6d5      	b.n	8016874 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8016ac8:	8835      	ldrh	r5, [r6, #0]
 8016aca:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8016ace:	42ab      	cmp	r3, r5
 8016ad0:	f67f adc4 	bls.w	801665c <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8016ad4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8016ad8:	ab0d      	add	r3, sp, #52	@ 0x34
 8016ada:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016ade:	6851      	ldr	r1, [r2, #4]
 8016ae0:	c303      	stmia	r3!, {r0, r1}
 8016ae2:	a80d      	add	r0, sp, #52	@ 0x34
 8016ae4:	f7f8 fd3b 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ae8:	b920      	cbnz	r0, 8016af4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 8016aea:	6823      	ldr	r3, [r4, #0]
 8016aec:	a90d      	add	r1, sp, #52	@ 0x34
 8016aee:	4620      	mov	r0, r4
 8016af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016af2:	4798      	blx	r3
 8016af4:	3501      	adds	r5, #1
 8016af6:	b2ad      	uxth	r5, r5
 8016af8:	e7e7      	b.n	8016aca <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 8016afa:	bf00      	nop
 8016afc:	24025934 	.word	0x24025934

08016b00 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8016b00:	4b03      	ldr	r3, [pc, #12]	@ (8016b10 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8016b02:	2200      	movs	r2, #0
 8016b04:	801a      	strh	r2, [r3, #0]
 8016b06:	805a      	strh	r2, [r3, #2]
 8016b08:	809a      	strh	r2, [r3, #4]
 8016b0a:	80da      	strh	r2, [r3, #6]
 8016b0c:	4770      	bx	lr
 8016b0e:	bf00      	nop
 8016b10:	24025980 	.word	0x24025980

08016b14 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8016b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b18:	b09d      	sub	sp, #116	@ 0x74
 8016b1a:	4606      	mov	r6, r0
 8016b1c:	4614      	mov	r4, r2
 8016b1e:	468a      	mov	sl, r1
 8016b20:	a803      	add	r0, sp, #12
 8016b22:	461d      	mov	r5, r3
 8016b24:	f001 f91a 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8016b28:	6833      	ldr	r3, [r6, #0]
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8016b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b32:	4798      	blx	r3
 8016b34:	6833      	ldr	r3, [r6, #0]
 8016b36:	4607      	mov	r7, r0
 8016b38:	4630      	mov	r0, r6
 8016b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b3c:	4798      	blx	r3
 8016b3e:	462a      	mov	r2, r5
 8016b40:	2500      	movs	r5, #0
 8016b42:	4621      	mov	r1, r4
 8016b44:	9000      	str	r0, [sp, #0]
 8016b46:	463b      	mov	r3, r7
 8016b48:	462c      	mov	r4, r5
 8016b4a:	46a9      	mov	r9, r5
 8016b4c:	46a8      	mov	r8, r5
 8016b4e:	a803      	add	r0, sp, #12
 8016b50:	f001 f95f 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016b54:	2300      	movs	r3, #0
 8016b56:	9302      	str	r3, [sp, #8]
 8016b58:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8016b5c:	429c      	cmp	r4, r3
 8016b5e:	d002      	beq.n	8016b66 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8016b60:	455c      	cmp	r4, fp
 8016b62:	bf18      	it	ne
 8016b64:	4625      	movne	r5, r4
 8016b66:	ab02      	add	r3, sp, #8
 8016b68:	4632      	mov	r2, r6
 8016b6a:	4651      	mov	r1, sl
 8016b6c:	a803      	add	r0, sp, #12
 8016b6e:	f001 fc83 	bl	8018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016b72:	4604      	mov	r4, r0
 8016b74:	b108      	cbz	r0, 8016b7a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8016b76:	280a      	cmp	r0, #10
 8016b78:	d10a      	bne.n	8016b90 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8016b7a:	45c1      	cmp	r9, r8
 8016b7c:	bf38      	it	cc
 8016b7e:	46c1      	movcc	r9, r8
 8016b80:	f04f 0800 	mov.w	r8, #0
 8016b84:	2c00      	cmp	r4, #0
 8016b86:	d1e5      	bne.n	8016b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016b88:	4648      	mov	r0, r9
 8016b8a:	b01d      	add	sp, #116	@ 0x74
 8016b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b90:	9a02      	ldr	r2, [sp, #8]
 8016b92:	2a00      	cmp	r2, #0
 8016b94:	d0de      	beq.n	8016b54 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8016b96:	7b57      	ldrb	r7, [r2, #13]
 8016b98:	4629      	mov	r1, r5
 8016b9a:	6833      	ldr	r3, [r6, #0]
 8016b9c:	007f      	lsls	r7, r7, #1
 8016b9e:	8894      	ldrh	r4, [r2, #4]
 8016ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016ba2:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8016ba6:	7a97      	ldrb	r7, [r2, #10]
 8016ba8:	4307      	orrs	r7, r0
 8016baa:	4630      	mov	r0, r6
 8016bac:	4798      	blx	r3
 8016bae:	4438      	add	r0, r7
 8016bb0:	4480      	add	r8, r0
 8016bb2:	fa1f f888 	uxth.w	r8, r8
 8016bb6:	e7e5      	b.n	8016b84 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08016bb8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8016bb8:	b508      	push	{r3, lr}
 8016bba:	6803      	ldr	r3, [r0, #0]
 8016bbc:	68db      	ldr	r3, [r3, #12]
 8016bbe:	4798      	blx	r3
 8016bc0:	b128      	cbz	r0, 8016bce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8016bc2:	7b43      	ldrb	r3, [r0, #13]
 8016bc4:	7a80      	ldrb	r0, [r0, #10]
 8016bc6:	005b      	lsls	r3, r3, #1
 8016bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016bcc:	4318      	orrs	r0, r3
 8016bce:	bd08      	pop	{r3, pc}

08016bd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8016bd0:	b40e      	push	{r1, r2, r3}
 8016bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bd4:	b09e      	sub	sp, #120	@ 0x78
 8016bd6:	4605      	mov	r5, r0
 8016bd8:	ab23      	add	r3, sp, #140	@ 0x8c
 8016bda:	a805      	add	r0, sp, #20
 8016bdc:	f853 4b04 	ldr.w	r4, [r3], #4
 8016be0:	9303      	str	r3, [sp, #12]
 8016be2:	f001 f8bb 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8016be6:	682b      	ldr	r3, [r5, #0]
 8016be8:	4628      	mov	r0, r5
 8016bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016bec:	4798      	blx	r3
 8016bee:	682b      	ldr	r3, [r5, #0]
 8016bf0:	4606      	mov	r6, r0
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016bf6:	4798      	blx	r3
 8016bf8:	4633      	mov	r3, r6
 8016bfa:	4621      	mov	r1, r4
 8016bfc:	ae1e      	add	r6, sp, #120	@ 0x78
 8016bfe:	2400      	movs	r4, #0
 8016c00:	9000      	str	r0, [sp, #0]
 8016c02:	9a03      	ldr	r2, [sp, #12]
 8016c04:	a805      	add	r0, sp, #20
 8016c06:	f001 f904 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016c0a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8016c0e:	462a      	mov	r2, r5
 8016c10:	4633      	mov	r3, r6
 8016c12:	4621      	mov	r1, r4
 8016c14:	a805      	add	r0, sp, #20
 8016c16:	f001 fc2f 	bl	8018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016c1a:	b300      	cbz	r0, 8016c5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8016c1c:	280a      	cmp	r0, #10
 8016c1e:	d01a      	beq.n	8016c56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016c20:	9f04      	ldr	r7, [sp, #16]
 8016c22:	b1c7      	cbz	r7, 8016c56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8016c24:	7b78      	ldrb	r0, [r7, #13]
 8016c26:	7a3b      	ldrb	r3, [r7, #8]
 8016c28:	00c1      	lsls	r1, r0, #3
 8016c2a:	88ea      	ldrh	r2, [r5, #6]
 8016c2c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8016c30:	4319      	orrs	r1, r3
 8016c32:	0643      	lsls	r3, r0, #25
 8016c34:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8016c38:	bf48      	it	mi
 8016c3a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8016c3e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8016c42:	bf48      	it	mi
 8016c44:	b219      	sxthmi	r1, r3
 8016c46:	79fb      	ldrb	r3, [r7, #7]
 8016c48:	4303      	orrs	r3, r0
 8016c4a:	4413      	add	r3, r2
 8016c4c:	1a5b      	subs	r3, r3, r1
 8016c4e:	b21b      	sxth	r3, r3
 8016c50:	429c      	cmp	r4, r3
 8016c52:	bfb8      	it	lt
 8016c54:	461c      	movlt	r4, r3
 8016c56:	4633      	mov	r3, r6
 8016c58:	462a      	mov	r2, r5
 8016c5a:	2100      	movs	r1, #0
 8016c5c:	e7da      	b.n	8016c14 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8016c5e:	b2a0      	uxth	r0, r4
 8016c60:	b01e      	add	sp, #120	@ 0x78
 8016c62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016c66:	b003      	add	sp, #12
 8016c68:	4770      	bx	lr

08016c6a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8016c6a:	7a43      	ldrb	r3, [r0, #9]
 8016c6c:	8880      	ldrh	r0, [r0, #4]
 8016c6e:	4418      	add	r0, r3
 8016c70:	b280      	uxth	r0, r0
 8016c72:	4770      	bx	lr

08016c74 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8016c74:	6803      	ldr	r3, [r0, #0]
 8016c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c78:	4718      	bx	r3

08016c7a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8016c7a:	b40e      	push	{r1, r2, r3}
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	b09d      	sub	sp, #116	@ 0x74
 8016c80:	4604      	mov	r4, r0
 8016c82:	ab21      	add	r3, sp, #132	@ 0x84
 8016c84:	a803      	add	r0, sp, #12
 8016c86:	f853 5b04 	ldr.w	r5, [r3], #4
 8016c8a:	9302      	str	r3, [sp, #8]
 8016c8c:	f001 f866 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8016c90:	6823      	ldr	r3, [r4, #0]
 8016c92:	4620      	mov	r0, r4
 8016c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016c96:	4798      	blx	r3
 8016c98:	6823      	ldr	r3, [r4, #0]
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	4620      	mov	r0, r4
 8016c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ca0:	2401      	movs	r4, #1
 8016ca2:	4798      	blx	r3
 8016ca4:	4633      	mov	r3, r6
 8016ca6:	9000      	str	r0, [sp, #0]
 8016ca8:	4629      	mov	r1, r5
 8016caa:	9a02      	ldr	r2, [sp, #8]
 8016cac:	a803      	add	r0, sp, #12
 8016cae:	f001 f8b0 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016cb2:	a803      	add	r0, sp, #12
 8016cb4:	f001 fcac 	bl	8018610 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016cb8:	b2a3      	uxth	r3, r4
 8016cba:	b138      	cbz	r0, 8016ccc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8016cbc:	280a      	cmp	r0, #10
 8016cbe:	a803      	add	r0, sp, #12
 8016cc0:	bf04      	itt	eq
 8016cc2:	3301      	addeq	r3, #1
 8016cc4:	b21c      	sxtheq	r4, r3
 8016cc6:	f001 fca3 	bl	8018610 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8016cca:	e7f5      	b.n	8016cb8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8016ccc:	4618      	mov	r0, r3
 8016cce:	b01d      	add	sp, #116	@ 0x74
 8016cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016cd4:	b003      	add	sp, #12
 8016cd6:	4770      	bx	lr

08016cd8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8016cd8:	b40e      	push	{r1, r2, r3}
 8016cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cdc:	b09e      	sub	sp, #120	@ 0x78
 8016cde:	4604      	mov	r4, r0
 8016ce0:	ab23      	add	r3, sp, #140	@ 0x8c
 8016ce2:	a805      	add	r0, sp, #20
 8016ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8016ce8:	9303      	str	r3, [sp, #12]
 8016cea:	f001 f837 	bl	8017d5c <_ZN8touchgfx12TextProviderC1Ev>
 8016cee:	6823      	ldr	r3, [r4, #0]
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016cf4:	4798      	blx	r3
 8016cf6:	6823      	ldr	r3, [r4, #0]
 8016cf8:	4606      	mov	r6, r0
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016cfe:	4798      	blx	r3
 8016d00:	4633      	mov	r3, r6
 8016d02:	4629      	mov	r1, r5
 8016d04:	9000      	str	r0, [sp, #0]
 8016d06:	9a03      	ldr	r2, [sp, #12]
 8016d08:	a805      	add	r0, sp, #20
 8016d0a:	f001 f882 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016d0e:	ad1e      	add	r5, sp, #120	@ 0x78
 8016d10:	2100      	movs	r1, #0
 8016d12:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8016d16:	4622      	mov	r2, r4
 8016d18:	a805      	add	r0, sp, #20
 8016d1a:	f845 1d68 	str.w	r1, [r5, #-104]!
 8016d1e:	462b      	mov	r3, r5
 8016d20:	f001 fbaa 	bl	8018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016d24:	b1d8      	cbz	r0, 8016d5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8016d26:	280a      	cmp	r0, #10
 8016d28:	d012      	beq.n	8016d50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016d2a:	9804      	ldr	r0, [sp, #16]
 8016d2c:	b180      	cbz	r0, 8016d50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8016d2e:	7b47      	ldrb	r7, [r0, #13]
 8016d30:	88e2      	ldrh	r2, [r4, #6]
 8016d32:	00fb      	lsls	r3, r7, #3
 8016d34:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016d38:	7a03      	ldrb	r3, [r0, #8]
 8016d3a:	430b      	orrs	r3, r1
 8016d3c:	0679      	lsls	r1, r7, #25
 8016d3e:	bf44      	itt	mi
 8016d40:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016d44:	b21b      	sxthmi	r3, r3
 8016d46:	1ad3      	subs	r3, r2, r3
 8016d48:	b21b      	sxth	r3, r3
 8016d4a:	429e      	cmp	r6, r3
 8016d4c:	bfa8      	it	ge
 8016d4e:	461e      	movge	r6, r3
 8016d50:	462b      	mov	r3, r5
 8016d52:	4622      	mov	r2, r4
 8016d54:	2100      	movs	r1, #0
 8016d56:	a805      	add	r0, sp, #20
 8016d58:	f001 fb8e 	bl	8018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8016d5c:	e7e2      	b.n	8016d24 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8016d5e:	4630      	mov	r0, r6
 8016d60:	b01e      	add	sp, #120	@ 0x78
 8016d62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016d66:	b003      	add	sp, #12
 8016d68:	4770      	bx	lr

08016d6a <_ZNK8touchgfx8Drawable10invalidateEv>:
 8016d6a:	b513      	push	{r0, r1, r4, lr}
 8016d6c:	6803      	ldr	r3, [r0, #0]
 8016d6e:	2400      	movs	r4, #0
 8016d70:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8016d74:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016d78:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016d7c:	4669      	mov	r1, sp
 8016d7e:	691b      	ldr	r3, [r3, #16]
 8016d80:	9400      	str	r4, [sp, #0]
 8016d82:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016d86:	4798      	blx	r3
 8016d88:	b002      	add	sp, #8
 8016d8a:	bd10      	pop	{r4, pc}

08016d8c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8016d8c:	b538      	push	{r3, r4, r5, lr}
 8016d8e:	680b      	ldr	r3, [r1, #0]
 8016d90:	460c      	mov	r4, r1
 8016d92:	4605      	mov	r5, r0
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	4798      	blx	r3
 8016d98:	6823      	ldr	r3, [r4, #0]
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	4629      	mov	r1, r5
 8016d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016da0:	4798      	blx	r3
 8016da2:	4628      	mov	r0, r5
 8016da4:	bd38      	pop	{r3, r4, r5, pc}

08016da6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8016da6:	b410      	push	{r4}
 8016da8:	880a      	ldrh	r2, [r1, #0]
 8016daa:	8884      	ldrh	r4, [r0, #4]
 8016dac:	4422      	add	r2, r4
 8016dae:	800a      	strh	r2, [r1, #0]
 8016db0:	884a      	ldrh	r2, [r1, #2]
 8016db2:	88c4      	ldrh	r4, [r0, #6]
 8016db4:	4422      	add	r2, r4
 8016db6:	804a      	strh	r2, [r1, #2]
 8016db8:	6940      	ldr	r0, [r0, #20]
 8016dba:	b120      	cbz	r0, 8016dc6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8016dbc:	6803      	ldr	r3, [r0, #0]
 8016dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016dc4:	4718      	bx	r3
 8016dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dca:	4770      	bx	lr

08016dcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8016dcc:	b570      	push	{r4, r5, r6, lr}
 8016dce:	8882      	ldrh	r2, [r0, #4]
 8016dd0:	460c      	mov	r4, r1
 8016dd2:	880b      	ldrh	r3, [r1, #0]
 8016dd4:	4605      	mov	r5, r0
 8016dd6:	4413      	add	r3, r2
 8016dd8:	800b      	strh	r3, [r1, #0]
 8016dda:	884b      	ldrh	r3, [r1, #2]
 8016ddc:	88c2      	ldrh	r2, [r0, #6]
 8016dde:	4413      	add	r3, r2
 8016de0:	804b      	strh	r3, [r1, #2]
 8016de2:	1d01      	adds	r1, r0, #4
 8016de4:	4620      	mov	r0, r4
 8016de6:	f7f8 fb77 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8016dea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	dd0b      	ble.n	8016e0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016df2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	dd07      	ble.n	8016e0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016dfa:	6968      	ldr	r0, [r5, #20]
 8016dfc:	b128      	cbz	r0, 8016e0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016dfe:	6803      	ldr	r3, [r0, #0]
 8016e00:	4621      	mov	r1, r4
 8016e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e08:	4718      	bx	r3
 8016e0a:	bd70      	pop	{r4, r5, r6, pc}

08016e0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	8882      	ldrh	r2, [r0, #4]
 8016e10:	460c      	mov	r4, r1
 8016e12:	880b      	ldrh	r3, [r1, #0]
 8016e14:	4605      	mov	r5, r0
 8016e16:	4413      	add	r3, r2
 8016e18:	800b      	strh	r3, [r1, #0]
 8016e1a:	884b      	ldrh	r3, [r1, #2]
 8016e1c:	88c2      	ldrh	r2, [r0, #6]
 8016e1e:	4413      	add	r3, r2
 8016e20:	804b      	strh	r3, [r1, #2]
 8016e22:	1d01      	adds	r1, r0, #4
 8016e24:	4620      	mov	r0, r4
 8016e26:	f7f8 fb57 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8016e2a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	dd19      	ble.n	8016e66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016e32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	dd15      	ble.n	8016e66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016e3a:	6968      	ldr	r0, [r5, #20]
 8016e3c:	b128      	cbz	r0, 8016e4a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016e3e:	6803      	ldr	r3, [r0, #0]
 8016e40:	4621      	mov	r1, r4
 8016e42:	691b      	ldr	r3, [r3, #16]
 8016e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e48:	4718      	bx	r3
 8016e4a:	4b07      	ldr	r3, [pc, #28]	@ (8016e68 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	3304      	adds	r3, #4
 8016e50:	429d      	cmp	r5, r3
 8016e52:	d108      	bne.n	8016e66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8016e54:	f7fe fdd0 	bl	80159f8 <_ZN8touchgfx11Application11getInstanceEv>
 8016e58:	6803      	ldr	r3, [r0, #0]
 8016e5a:	6821      	ldr	r1, [r4, #0]
 8016e5c:	6862      	ldr	r2, [r4, #4]
 8016e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e64:	4718      	bx	r3
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	24025978 	.word	0x24025978

08016e6c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016e6c:	b570      	push	{r4, r5, r6, lr}
 8016e6e:	4604      	mov	r4, r0
 8016e70:	4616      	mov	r6, r2
 8016e72:	460d      	mov	r5, r1
 8016e74:	b901      	cbnz	r1, 8016e78 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8016e76:	b192      	cbz	r2, 8016e9e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8016e78:	6823      	ldr	r3, [r4, #0]
 8016e7a:	4620      	mov	r0, r4
 8016e7c:	699b      	ldr	r3, [r3, #24]
 8016e7e:	4798      	blx	r3
 8016e80:	88e2      	ldrh	r2, [r4, #6]
 8016e82:	88a1      	ldrh	r1, [r4, #4]
 8016e84:	4620      	mov	r0, r4
 8016e86:	4432      	add	r2, r6
 8016e88:	4429      	add	r1, r5
 8016e8a:	b212      	sxth	r2, r2
 8016e8c:	b209      	sxth	r1, r1
 8016e8e:	f7ed faf3 	bl	8004478 <_ZN8touchgfx8Drawable5setXYEss>
 8016e92:	6823      	ldr	r3, [r4, #0]
 8016e94:	4620      	mov	r0, r4
 8016e96:	699b      	ldr	r3, [r3, #24]
 8016e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e9c:	4718      	bx	r3
 8016e9e:	bd70      	pop	{r4, r5, r6, pc}

08016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8016ea0:	b510      	push	{r4, lr}
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	4604      	mov	r4, r0
 8016ea6:	4608      	mov	r0, r1
 8016ea8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8016eac:	8023      	strh	r3, [r4, #0]
 8016eae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016eb2:	8063      	strh	r3, [r4, #2]
 8016eb4:	6803      	ldr	r3, [r0, #0]
 8016eb6:	80a1      	strh	r1, [r4, #4]
 8016eb8:	4621      	mov	r1, r4
 8016eba:	80e2      	strh	r2, [r4, #6]
 8016ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ebe:	4798      	blx	r3
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	bd10      	pop	{r4, pc}

08016ec4 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8016ec4:	4770      	bx	lr

08016ec6 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8016ec6:	b510      	push	{r4, lr}
 8016ec8:	4604      	mov	r4, r0
 8016eca:	211c      	movs	r1, #28
 8016ecc:	f00d f9ba 	bl	8024244 <_ZdlPvj>
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	bd10      	pop	{r4, pc}

08016ed4 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8016ed4:	4a04      	ldr	r2, [pc, #16]	@ (8016ee8 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8016ed6:	6002      	str	r2, [r0, #0]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8016ede:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8016ee2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016ee6:	4770      	bx	lr
 8016ee8:	080291c4 	.word	0x080291c4

08016eec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8016eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	b087      	sub	sp, #28
 8016ef4:	8b45      	ldrh	r5, [r0, #26]
 8016ef6:	f8b2 c000 	ldrh.w	ip, [r2]
 8016efa:	9105      	str	r1, [sp, #20]
 8016efc:	1c68      	adds	r0, r5, #1
 8016efe:	68e1      	ldr	r1, [r4, #12]
 8016f00:	9203      	str	r2, [sp, #12]
 8016f02:	b280      	uxth	r0, r0
 8016f04:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8016f08:	f01c 0501 	ands.w	r5, ip, #1
 8016f0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f10:	9502      	str	r5, [sp, #8]
 8016f12:	d07d      	beq.n	8017010 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8016f14:	ee07 2a90 	vmov	s15, r2
 8016f18:	8360      	strh	r0, [r4, #26]
 8016f1a:	f04f 0e00 	mov.w	lr, #0
 8016f1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f22:	ee06 ea10 	vmov	s12, lr
 8016f26:	edc1 6a00 	vstr	s13, [r1]
 8016f2a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016f2e:	8b61      	ldrh	r1, [r4, #26]
 8016f30:	ee07 2a10 	vmov	s14, r2
 8016f34:	68e2      	ldr	r2, [r4, #12]
 8016f36:	1c48      	adds	r0, r1, #1
 8016f38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016f3c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016f40:	8360      	strh	r0, [r4, #26]
 8016f42:	ed82 7a00 	vstr	s14, [r2]
 8016f46:	8b21      	ldrh	r1, [r4, #24]
 8016f48:	2501      	movs	r5, #1
 8016f4a:	68a2      	ldr	r2, [r4, #8]
 8016f4c:	3304      	adds	r3, #4
 8016f4e:	1c48      	adds	r0, r1, #1
 8016f50:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8016f54:	9300      	str	r3, [sp, #0]
 8016f56:	46aa      	mov	sl, r5
 8016f58:	8320      	strh	r0, [r4, #24]
 8016f5a:	462e      	mov	r6, r5
 8016f5c:	5455      	strb	r5, [r2, r1]
 8016f5e:	2200      	movs	r2, #0
 8016f60:	ee07 2a90 	vmov	s15, r2
 8016f64:	4613      	mov	r3, r2
 8016f66:	4611      	mov	r1, r2
 8016f68:	9201      	str	r2, [sp, #4]
 8016f6a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8016f6e:	9805      	ldr	r0, [sp, #20]
 8016f70:	f108 0701 	add.w	r7, r8, #1
 8016f74:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8016f78:	42a8      	cmp	r0, r5
 8016f7a:	b2bf      	uxth	r7, r7
 8016f7c:	eb0b 0908 	add.w	r9, fp, r8
 8016f80:	f340 80db 	ble.w	801713a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8016f84:	fa4c f906 	asr.w	r9, ip, r6
 8016f88:	f009 0901 	and.w	r9, r9, #1
 8016f8c:	fa5f f389 	uxtb.w	r3, r9
 8016f90:	9304      	str	r3, [sp, #16]
 8016f92:	9b00      	ldr	r3, [sp, #0]
 8016f94:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016f98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016f9c:	f1b9 0f00 	cmp.w	r9, #0
 8016fa0:	d07d      	beq.n	801709e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8016fa2:	ee05 1a10 	vmov	s10, r1
 8016fa6:	8327      	strh	r7, [r4, #24]
 8016fa8:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8016fac:	ee05 3a10 	vmov	s10, r3
 8016fb0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016fb4:	f1ba 0f00 	cmp.w	sl, #0
 8016fb8:	d050      	beq.n	801705c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 8016fba:	f04f 0002 	mov.w	r0, #2
 8016fbe:	f80b 0008 	strb.w	r0, [fp, r8]
 8016fc2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8016fc6:	68e7      	ldr	r7, [r4, #12]
 8016fc8:	f108 0901 	add.w	r9, r8, #1
 8016fcc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8016fd0:	f8a4 901a 	strh.w	r9, [r4, #26]
 8016fd4:	edc7 4a00 	vstr	s9, [r7]
 8016fd8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8016fdc:	68e7      	ldr	r7, [r4, #12]
 8016fde:	f108 0901 	add.w	r9, r8, #1
 8016fe2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8016fe6:	f8a4 901a 	strh.w	r9, [r4, #26]
 8016fea:	ed87 5a00 	vstr	s10, [r7]
 8016fee:	3601      	adds	r6, #1
 8016ff0:	2e10      	cmp	r6, #16
 8016ff2:	d106      	bne.n	8017002 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8016ff4:	9e01      	ldr	r6, [sp, #4]
 8016ff6:	9803      	ldr	r0, [sp, #12]
 8016ff8:	3601      	adds	r6, #1
 8016ffa:	9601      	str	r6, [sp, #4]
 8016ffc:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8017000:	2600      	movs	r6, #0
 8017002:	9800      	ldr	r0, [sp, #0]
 8017004:	3501      	adds	r5, #1
 8017006:	f8dd a010 	ldr.w	sl, [sp, #16]
 801700a:	3004      	adds	r0, #4
 801700c:	9000      	str	r0, [sp, #0]
 801700e:	e7ac      	b.n	8016f6a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8017010:	ee06 2a10 	vmov	s12, r2
 8017014:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8017018:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801701c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017020:	ee16 5a10 	vmov	r5, s12
 8017024:	442a      	add	r2, r5
 8017026:	ee06 2a90 	vmov	s13, r2
 801702a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801702e:	8360      	strh	r0, [r4, #26]
 8017030:	4472      	add	r2, lr
 8017032:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017036:	ee07 2a10 	vmov	s14, r2
 801703a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801703e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017042:	edc1 6a00 	vstr	s13, [r1]
 8017046:	8b61      	ldrh	r1, [r4, #26]
 8017048:	ee27 7a27 	vmul.f32	s14, s14, s15
 801704c:	68e2      	ldr	r2, [r4, #12]
 801704e:	1c48      	adds	r0, r1, #1
 8017050:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8017054:	8360      	strh	r0, [r4, #26]
 8017056:	ed82 7a00 	vstr	s14, [r2]
 801705a:	e774      	b.n	8016f46 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 801705c:	f04f 0005 	mov.w	r0, #5
 8017060:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8017064:	f80b 0008 	strb.w	r0, [fp, r8]
 8017068:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801706c:	68e7      	ldr	r7, [r4, #12]
 801706e:	f108 0901 	add.w	r9, r8, #1
 8017072:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017076:	f8a4 901a 	strh.w	r9, [r4, #26]
 801707a:	ed87 4a00 	vstr	s8, [r7]
 801707e:	ee04 2a10 	vmov	s8, r2
 8017082:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017086:	68e7      	ldr	r7, [r4, #12]
 8017088:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801708c:	f108 0901 	add.w	r9, r8, #1
 8017090:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017094:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017098:	ed87 4a00 	vstr	s8, [r7]
 801709c:	e791      	b.n	8016fc2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 801709e:	f1ba 0f00 	cmp.w	sl, #0
 80170a2:	d146      	bne.n	8017132 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 80170a4:	f04f 0005 	mov.w	r0, #5
 80170a8:	8327      	strh	r7, [r4, #24]
 80170aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80170ae:	f80b 0008 	strb.w	r0, [fp, r8]
 80170b2:	ee17 0a90 	vmov	r0, s15
 80170b6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80170ba:	68e7      	ldr	r7, [r4, #12]
 80170bc:	4408      	add	r0, r1
 80170be:	f108 0901 	add.w	r9, r8, #1
 80170c2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80170c6:	ee07 0a90 	vmov	s15, r0
 80170ca:	f8a4 901a 	strh.w	r9, [r4, #26]
 80170ce:	ed87 5a00 	vstr	s10, [r7]
 80170d2:	ee05 2a10 	vmov	s10, r2
 80170d6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80170da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170de:	68e7      	ldr	r7, [r4, #12]
 80170e0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80170e4:	f108 0901 	add.w	r9, r8, #1
 80170e8:	441a      	add	r2, r3
 80170ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80170ee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80170f2:	f8a4 901a 	strh.w	r9, [r4, #26]
 80170f6:	ed87 5a00 	vstr	s10, [r7]
 80170fa:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80170fe:	68e7      	ldr	r7, [r4, #12]
 8017100:	f108 0901 	add.w	r9, r8, #1
 8017104:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017108:	f8a4 901a 	strh.w	r9, [r4, #26]
 801710c:	edc7 7a00 	vstr	s15, [r7]
 8017110:	ee07 2a90 	vmov	s15, r2
 8017114:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801711c:	68e7      	ldr	r7, [r4, #12]
 801711e:	f108 0901 	add.w	r9, r8, #1
 8017122:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017126:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801712a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801712e:	edc7 7a00 	vstr	s15, [r7]
 8017132:	461a      	mov	r2, r3
 8017134:	ee07 1a90 	vmov	s15, r1
 8017138:	e759      	b.n	8016fee <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 801713a:	f1ba 0f00 	cmp.w	sl, #0
 801713e:	d045      	beq.n	80171cc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8017140:	ee05 1a90 	vmov	s11, r1
 8017144:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8017148:	eef4 5a66 	vcmp.f32	s11, s13
 801714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017150:	d108      	bne.n	8017164 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8017152:	ee05 3a90 	vmov	s11, r3
 8017156:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801715a:	eef4 5a47 	vcmp.f32	s11, s14
 801715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017162:	d033      	beq.n	80171cc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8017164:	9b02      	ldr	r3, [sp, #8]
 8017166:	8327      	strh	r7, [r4, #24]
 8017168:	b1b3      	cbz	r3, 8017198 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 801716a:	2302      	movs	r3, #2
 801716c:	f889 3000 	strb.w	r3, [r9]
 8017170:	8b62      	ldrh	r2, [r4, #26]
 8017172:	68e3      	ldr	r3, [r4, #12]
 8017174:	1c51      	adds	r1, r2, #1
 8017176:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801717a:	8361      	strh	r1, [r4, #26]
 801717c:	edc3 6a00 	vstr	s13, [r3]
 8017180:	8b62      	ldrh	r2, [r4, #26]
 8017182:	68e3      	ldr	r3, [r4, #12]
 8017184:	1c51      	adds	r1, r2, #1
 8017186:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801718a:	8361      	strh	r1, [r4, #26]
 801718c:	ed83 7a00 	vstr	s14, [r3]
 8017190:	9800      	ldr	r0, [sp, #0]
 8017192:	b007      	add	sp, #28
 8017194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017198:	2305      	movs	r3, #5
 801719a:	f889 3000 	strb.w	r3, [r9]
 801719e:	8b62      	ldrh	r2, [r4, #26]
 80171a0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80171a4:	68e3      	ldr	r3, [r4, #12]
 80171a6:	ee07 ea90 	vmov	s15, lr
 80171aa:	1c51      	adds	r1, r2, #1
 80171ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80171b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171b4:	8361      	strh	r1, [r4, #26]
 80171b6:	ed83 6a00 	vstr	s12, [r3]
 80171ba:	8b62      	ldrh	r2, [r4, #26]
 80171bc:	68e3      	ldr	r3, [r4, #12]
 80171be:	1c51      	adds	r1, r2, #1
 80171c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80171c4:	8361      	strh	r1, [r4, #26]
 80171c6:	edc3 7a00 	vstr	s15, [r3]
 80171ca:	e7d1      	b.n	8017170 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 80171cc:	ee05 2a90 	vmov	s11, r2
 80171d0:	2305      	movs	r3, #5
 80171d2:	9902      	ldr	r1, [sp, #8]
 80171d4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80171d8:	8327      	strh	r7, [r4, #24]
 80171da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80171de:	f889 3000 	strb.w	r3, [r9]
 80171e2:	b181      	cbz	r1, 8017206 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 80171e4:	8b62      	ldrh	r2, [r4, #26]
 80171e6:	68e3      	ldr	r3, [r4, #12]
 80171e8:	1c51      	adds	r1, r2, #1
 80171ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80171ee:	8361      	strh	r1, [r4, #26]
 80171f0:	ed83 5a00 	vstr	s10, [r3]
 80171f4:	8b62      	ldrh	r2, [r4, #26]
 80171f6:	68e3      	ldr	r3, [r4, #12]
 80171f8:	1c51      	adds	r1, r2, #1
 80171fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80171fe:	8361      	strh	r1, [r4, #26]
 8017200:	edc3 5a00 	vstr	s11, [r3]
 8017204:	e7b4      	b.n	8017170 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8017206:	8b65      	ldrh	r5, [r4, #26]
 8017208:	ee17 0a90 	vmov	r0, s15
 801720c:	68e1      	ldr	r1, [r4, #12]
 801720e:	4472      	add	r2, lr
 8017210:	1c6e      	adds	r6, r5, #1
 8017212:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8017216:	8366      	strh	r6, [r4, #26]
 8017218:	ed81 5a00 	vstr	s10, [r1]
 801721c:	8b65      	ldrh	r5, [r4, #26]
 801721e:	68e1      	ldr	r1, [r4, #12]
 8017220:	1c6e      	adds	r6, r5, #1
 8017222:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8017226:	8366      	strh	r6, [r4, #26]
 8017228:	edc1 5a00 	vstr	s11, [r1]
 801722c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8017230:	8b65      	ldrh	r5, [r4, #26]
 8017232:	68e1      	ldr	r1, [r4, #12]
 8017234:	1c6e      	adds	r6, r5, #1
 8017236:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801723a:	ee16 5a10 	vmov	r5, s12
 801723e:	8366      	strh	r6, [r4, #26]
 8017240:	4428      	add	r0, r5
 8017242:	ee07 0a90 	vmov	s15, r0
 8017246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801724a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801724e:	edc1 7a00 	vstr	s15, [r1]
 8017252:	ee07 2a90 	vmov	s15, r2
 8017256:	8b61      	ldrh	r1, [r4, #26]
 8017258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801725c:	68e5      	ldr	r5, [r4, #12]
 801725e:	1c4e      	adds	r6, r1, #1
 8017260:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8017264:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017268:	8366      	strh	r6, [r4, #26]
 801726a:	edc1 7a00 	vstr	s15, [r1]
 801726e:	8b22      	ldrh	r2, [r4, #24]
 8017270:	68a1      	ldr	r1, [r4, #8]
 8017272:	1c55      	adds	r5, r2, #1
 8017274:	8325      	strh	r5, [r4, #24]
 8017276:	548b      	strb	r3, [r1, r2]
 8017278:	e791      	b.n	801719e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

0801727c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 801727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017280:	4604      	mov	r4, r0
 8017282:	b08e      	sub	sp, #56	@ 0x38
 8017284:	4699      	mov	r9, r3
 8017286:	4688      	mov	r8, r1
 8017288:	4615      	mov	r5, r2
 801728a:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 801728c:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8017290:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017292:	f7ec fc8d 	bl	8003bb0 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8017296:	6060      	str	r0, [r4, #4]
 8017298:	f1b9 0f00 	cmp.w	r9, #0
 801729c:	f000 80e8 	beq.w	8017470 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80172a0:	2800      	cmp	r0, #0
 80172a2:	f000 80e5 	beq.w	8017470 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 80172a6:	a805      	add	r0, sp, #20
 80172a8:	f000 f8f9 	bl	801749e <_ZN8touchgfx9Matrix3x3C1Ev>
 80172ac:	6833      	ldr	r3, [r6, #0]
 80172ae:	4630      	mov	r0, r6
 80172b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80172b2:	4798      	blx	r3
 80172b4:	a805      	add	r0, sp, #20
 80172b6:	eef0 0a40 	vmov.f32	s1, s0
 80172ba:	f000 f8f4 	bl	80174a6 <_ZN8touchgfx9Matrix3x35scaleEff>
 80172be:	6860      	ldr	r0, [r4, #4]
 80172c0:	f1ba 0f03 	cmp.w	sl, #3
 80172c4:	d83b      	bhi.n	801733e <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 80172c6:	e8df f00a 	tbb	[pc, sl]
 80172ca:	1002      	.short	0x1002
 80172cc:	9f71      	.short	0x9f71
 80172ce:	6803      	ldr	r3, [r0, #0]
 80172d0:	462a      	mov	r2, r5
 80172d2:	4641      	mov	r1, r8
 80172d4:	689b      	ldr	r3, [r3, #8]
 80172d6:	4798      	blx	r3
 80172d8:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80172dc:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80172e0:	ee07 7a90 	vmov	s15, r7
 80172e4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80172e8:	e026      	b.n	8017338 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 80172ea:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80172ee:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80172f2:	8869      	ldrh	r1, [r5, #2]
 80172f4:	1a9b      	subs	r3, r3, r2
 80172f6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80172fa:	aa03      	add	r2, sp, #12
 80172fc:	1a5b      	subs	r3, r3, r1
 80172fe:	4641      	mov	r1, r8
 8017300:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017304:	882b      	ldrh	r3, [r5, #0]
 8017306:	f8ad 300e 	strh.w	r3, [sp, #14]
 801730a:	88ab      	ldrh	r3, [r5, #4]
 801730c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017310:	6803      	ldr	r3, [r0, #0]
 8017312:	689b      	ldr	r3, [r3, #8]
 8017314:	4798      	blx	r3
 8017316:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8017478 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 801731a:	a805      	add	r0, sp, #20
 801731c:	f000 f8e8 	bl	80174f0 <_ZN8touchgfx9Matrix3x36rotateEf>
 8017320:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8017324:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8017326:	ee07 7a90 	vmov	s15, r7
 801732a:	1a9b      	subs	r3, r3, r2
 801732c:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8017330:	ee00 3a10 	vmov	s0, r3
 8017334:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8017338:	a805      	add	r0, sp, #20
 801733a:	f000 f927 	bl	801758c <_ZN8touchgfx9Matrix3x39translateEff>
 801733e:	6860      	ldr	r0, [r4, #4]
 8017340:	a905      	add	r1, sp, #20
 8017342:	2500      	movs	r5, #0
 8017344:	f109 0602 	add.w	r6, r9, #2
 8017348:	6803      	ldr	r3, [r0, #0]
 801734a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801734c:	4798      	blx	r3
 801734e:	6860      	ldr	r0, [r4, #4]
 8017350:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017352:	6803      	ldr	r3, [r0, #0]
 8017354:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8017358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801735a:	4798      	blx	r3
 801735c:	6860      	ldr	r0, [r4, #4]
 801735e:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8017362:	6803      	ldr	r3, [r0, #0]
 8017364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017366:	4798      	blx	r3
 8017368:	6860      	ldr	r0, [r4, #4]
 801736a:	2101      	movs	r1, #1
 801736c:	6803      	ldr	r3, [r0, #0]
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	4798      	blx	r3
 8017372:	f8b9 7000 	ldrh.w	r7, [r9]
 8017376:	f104 0310 	add.w	r3, r4, #16
 801737a:	61a5      	str	r5, [r4, #24]
 801737c:	f104 0208 	add.w	r2, r4, #8
 8017380:	f104 0114 	add.w	r1, r4, #20
 8017384:	f104 000c 	add.w	r0, r4, #12
 8017388:	f7ed fd88 	bl	8004e9c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 801738c:	42af      	cmp	r7, r5
 801738e:	dd60      	ble.n	8017452 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8017390:	8831      	ldrh	r1, [r6, #0]
 8017392:	1cb2      	adds	r2, r6, #2
 8017394:	4620      	mov	r0, r4
 8017396:	3501      	adds	r5, #1
 8017398:	f101 030f 	add.w	r3, r1, #15
 801739c:	f3c3 1307 	ubfx	r3, r3, #4, #8
 80173a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80173a4:	f7ff fda2 	bl	8016eec <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 80173a8:	4606      	mov	r6, r0
 80173aa:	e7ef      	b.n	801738c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 80173ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80173b0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80173b4:	8829      	ldrh	r1, [r5, #0]
 80173b6:	1a9b      	subs	r3, r3, r2
 80173b8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80173bc:	aa03      	add	r2, sp, #12
 80173be:	1a5b      	subs	r3, r3, r1
 80173c0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80173c4:	886d      	ldrh	r5, [r5, #2]
 80173c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80173ca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80173ce:	f8ad 1012 	strh.w	r1, [sp, #18]
 80173d2:	1a5b      	subs	r3, r3, r1
 80173d4:	4641      	mov	r1, r8
 80173d6:	1b5b      	subs	r3, r3, r5
 80173d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80173dc:	6803      	ldr	r3, [r0, #0]
 80173de:	689b      	ldr	r3, [r3, #8]
 80173e0:	4798      	blx	r3
 80173e2:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 801747c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 80173e6:	a805      	add	r0, sp, #20
 80173e8:	f000 f882 	bl	80174f0 <_ZN8touchgfx9Matrix3x36rotateEf>
 80173ec:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80173f0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80173f2:	1a9b      	subs	r3, r3, r2
 80173f4:	ee00 3a90 	vmov	s1, r3
 80173f8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80173fc:	1bdb      	subs	r3, r3, r7
 80173fe:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017402:	ee00 3a10 	vmov	s0, r3
 8017406:	e795      	b.n	8017334 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8017408:	886b      	ldrh	r3, [r5, #2]
 801740a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801740e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017412:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8017416:	8829      	ldrh	r1, [r5, #0]
 8017418:	1a9b      	subs	r3, r3, r2
 801741a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801741e:	aa03      	add	r2, sp, #12
 8017420:	1a5b      	subs	r3, r3, r1
 8017422:	4641      	mov	r1, r8
 8017424:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017428:	88eb      	ldrh	r3, [r5, #6]
 801742a:	f8ad 3010 	strh.w	r3, [sp, #16]
 801742e:	6803      	ldr	r3, [r0, #0]
 8017430:	689b      	ldr	r3, [r3, #8]
 8017432:	4798      	blx	r3
 8017434:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8017480 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8017438:	a805      	add	r0, sp, #20
 801743a:	f000 f859 	bl	80174f0 <_ZN8touchgfx9Matrix3x36rotateEf>
 801743e:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8017442:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8017446:	1bdb      	subs	r3, r3, r7
 8017448:	ee00 3a90 	vmov	s1, r3
 801744c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017450:	e748      	b.n	80172e4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8017452:	6860      	ldr	r0, [r4, #4]
 8017454:	2100      	movs	r1, #0
 8017456:	8b22      	ldrh	r2, [r4, #24]
 8017458:	6803      	ldr	r3, [r0, #0]
 801745a:	9101      	str	r1, [sp, #4]
 801745c:	8b61      	ldrh	r1, [r4, #26]
 801745e:	9100      	str	r1, [sp, #0]
 8017460:	6a1d      	ldr	r5, [r3, #32]
 8017462:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017466:	47a8      	blx	r5
 8017468:	6860      	ldr	r0, [r4, #4]
 801746a:	6803      	ldr	r3, [r0, #0]
 801746c:	69db      	ldr	r3, [r3, #28]
 801746e:	4798      	blx	r3
 8017470:	b00e      	add	sp, #56	@ 0x38
 8017472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017476:	bf00      	nop
 8017478:	42b40000 	.word	0x42b40000
 801747c:	43340000 	.word	0x43340000
 8017480:	43870000 	.word	0x43870000

08017484 <_ZN8touchgfx9Matrix3x35resetEv>:
 8017484:	2300      	movs	r3, #0
 8017486:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801748a:	6043      	str	r3, [r0, #4]
 801748c:	6002      	str	r2, [r0, #0]
 801748e:	6083      	str	r3, [r0, #8]
 8017490:	60c3      	str	r3, [r0, #12]
 8017492:	6102      	str	r2, [r0, #16]
 8017494:	6143      	str	r3, [r0, #20]
 8017496:	6183      	str	r3, [r0, #24]
 8017498:	61c3      	str	r3, [r0, #28]
 801749a:	6202      	str	r2, [r0, #32]
 801749c:	4770      	bx	lr

0801749e <_ZN8touchgfx9Matrix3x3C1Ev>:
 801749e:	b508      	push	{r3, lr}
 80174a0:	f7ff fff0 	bl	8017484 <_ZN8touchgfx9Matrix3x35resetEv>
 80174a4:	bd08      	pop	{r3, pc}

080174a6 <_ZN8touchgfx9Matrix3x35scaleEff>:
 80174a6:	edd0 7a00 	vldr	s15, [r0]
 80174aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174ae:	edc0 7a00 	vstr	s15, [r0]
 80174b2:	edd0 7a01 	vldr	s15, [r0, #4]
 80174b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80174ba:	edc0 7a01 	vstr	s15, [r0, #4]
 80174be:	edd0 7a02 	vldr	s15, [r0, #8]
 80174c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80174c6:	edd0 7a03 	vldr	s15, [r0, #12]
 80174ca:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80174ce:	ed80 0a02 	vstr	s0, [r0, #8]
 80174d2:	edc0 7a03 	vstr	s15, [r0, #12]
 80174d6:	edd0 7a04 	vldr	s15, [r0, #16]
 80174da:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80174de:	edc0 7a04 	vstr	s15, [r0, #16]
 80174e2:	edd0 7a05 	vldr	s15, [r0, #20]
 80174e6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80174ea:	edc0 0a05 	vstr	s1, [r0, #20]
 80174ee:	4770      	bx	lr

080174f0 <_ZN8touchgfx9Matrix3x36rotateEf>:
 80174f0:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8017584 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 80174f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80174f8:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8017588 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 80174fc:	b510      	push	{r4, lr}
 80174fe:	ed2d 8b02 	vpush	{d8}
 8017502:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8017506:	4604      	mov	r4, r0
 8017508:	eeb0 0a68 	vmov.f32	s0, s17
 801750c:	f00c ffd0 	bl	80244b0 <cosf>
 8017510:	eeb0 8a40 	vmov.f32	s16, s0
 8017514:	eeb0 0a68 	vmov.f32	s0, s17
 8017518:	f00c ff06 	bl	8024328 <sinf>
 801751c:	edd4 6a03 	vldr	s13, [r4, #12]
 8017520:	edd4 4a00 	vldr	s9, [r4]
 8017524:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8017528:	ed94 7a04 	vldr	s14, [r4, #16]
 801752c:	ed94 5a01 	vldr	s10, [r4, #4]
 8017530:	ee66 6a88 	vmul.f32	s13, s13, s16
 8017534:	edd4 5a02 	vldr	s11, [r4, #8]
 8017538:	eee8 7a24 	vfma.f32	s15, s16, s9
 801753c:	eee0 6a24 	vfma.f32	s13, s0, s9
 8017540:	edc4 7a00 	vstr	s15, [r4]
 8017544:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8017548:	ee27 7a08 	vmul.f32	s14, s14, s16
 801754c:	edc4 6a03 	vstr	s13, [r4, #12]
 8017550:	eee8 7a05 	vfma.f32	s15, s16, s10
 8017554:	eea0 7a05 	vfma.f32	s14, s0, s10
 8017558:	edc4 7a01 	vstr	s15, [r4, #4]
 801755c:	edd4 7a05 	vldr	s15, [r4, #20]
 8017560:	ed84 7a04 	vstr	s14, [r4, #16]
 8017564:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8017568:	ee67 7a88 	vmul.f32	s15, s15, s16
 801756c:	eea8 6a25 	vfma.f32	s12, s16, s11
 8017570:	eee0 7a25 	vfma.f32	s15, s0, s11
 8017574:	ecbd 8b02 	vpop	{d8}
 8017578:	ed84 6a02 	vstr	s12, [r4, #8]
 801757c:	edc4 7a05 	vstr	s15, [r4, #20]
 8017580:	bd10      	pop	{r4, pc}
 8017582:	bf00      	nop
 8017584:	40490fdb 	.word	0x40490fdb
 8017588:	43340000 	.word	0x43340000

0801758c <_ZN8touchgfx9Matrix3x39translateEff>:
 801758c:	ed90 6a06 	vldr	s12, [r0, #24]
 8017590:	edd0 7a00 	vldr	s15, [r0]
 8017594:	edd0 6a07 	vldr	s13, [r0, #28]
 8017598:	eee6 7a00 	vfma.f32	s15, s12, s0
 801759c:	ed90 7a08 	vldr	s14, [r0, #32]
 80175a0:	edc0 7a00 	vstr	s15, [r0]
 80175a4:	edd0 7a01 	vldr	s15, [r0, #4]
 80175a8:	eee6 7a80 	vfma.f32	s15, s13, s0
 80175ac:	edc0 7a01 	vstr	s15, [r0, #4]
 80175b0:	edd0 7a02 	vldr	s15, [r0, #8]
 80175b4:	eee7 7a00 	vfma.f32	s15, s14, s0
 80175b8:	edc0 7a02 	vstr	s15, [r0, #8]
 80175bc:	edd0 7a03 	vldr	s15, [r0, #12]
 80175c0:	eee6 7a20 	vfma.f32	s15, s12, s1
 80175c4:	edc0 7a03 	vstr	s15, [r0, #12]
 80175c8:	edd0 7a04 	vldr	s15, [r0, #16]
 80175cc:	eee6 7aa0 	vfma.f32	s15, s13, s1
 80175d0:	edc0 7a04 	vstr	s15, [r0, #16]
 80175d4:	edd0 7a05 	vldr	s15, [r0, #20]
 80175d8:	eee7 7a20 	vfma.f32	s15, s14, s1
 80175dc:	edc0 7a05 	vstr	s15, [r0, #20]
 80175e0:	4770      	bx	lr

080175e2 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 80175e2:	edd0 6a01 	vldr	s13, [r0, #4]
 80175e6:	b084      	sub	sp, #16
 80175e8:	edd0 7a04 	vldr	s15, [r0, #16]
 80175ec:	ed90 7a03 	vldr	s14, [r0, #12]
 80175f0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80175f4:	ee60 0aa6 	vmul.f32	s1, s1, s13
 80175f8:	edd0 6a00 	vldr	s13, [r0]
 80175fc:	eee7 7a00 	vfma.f32	s15, s14, s0
 8017600:	ed90 7a05 	vldr	s14, [r0, #20]
 8017604:	eee6 0a80 	vfma.f32	s1, s13, s0
 8017608:	ed90 0a02 	vldr	s0, [r0, #8]
 801760c:	ee30 0a80 	vadd.f32	s0, s1, s0
 8017610:	ee77 0a87 	vadd.f32	s1, s15, s14
 8017614:	b004      	add	sp, #16
 8017616:	4770      	bx	lr

08017618 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8017618:	b530      	push	{r4, r5, lr}
 801761a:	8083      	strh	r3, [r0, #4]
 801761c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017620:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017624:	80c3      	strh	r3, [r0, #6]
 8017626:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801762a:	6141      	str	r1, [r0, #20]
 801762c:	7203      	strb	r3, [r0, #8]
 801762e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017632:	8302      	strh	r2, [r0, #24]
 8017634:	7243      	strb	r3, [r0, #9]
 8017636:	7a83      	ldrb	r3, [r0, #10]
 8017638:	f365 0306 	bfi	r3, r5, #0, #7
 801763c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017640:	f365 13c7 	bfi	r3, r5, #7, #1
 8017644:	7283      	strb	r3, [r0, #10]
 8017646:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801764a:	72c3      	strb	r3, [r0, #11]
 801764c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8017650:	7303      	strb	r3, [r0, #12]
 8017652:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017656:	81c3      	strh	r3, [r0, #14]
 8017658:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801765c:	8203      	strh	r3, [r0, #16]
 801765e:	4b01      	ldr	r3, [pc, #4]	@ (8017664 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8017660:	6003      	str	r3, [r0, #0]
 8017662:	bd30      	pop	{r4, r5, pc}
 8017664:	080291d8 	.word	0x080291d8

08017668 <_ZNK8touchgfx9ConstFont4findEt>:
 8017668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801766a:	6944      	ldr	r4, [r0, #20]
 801766c:	b3bc      	cbz	r4, 80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801766e:	88a3      	ldrh	r3, [r4, #4]
 8017670:	8b02      	ldrh	r2, [r0, #24]
 8017672:	1acb      	subs	r3, r1, r3
 8017674:	f102 32ff 	add.w	r2, r2, #4294967295
 8017678:	d431      	bmi.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801767a:	4293      	cmp	r3, r2
 801767c:	dd0c      	ble.n	8017698 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801767e:	230e      	movs	r3, #14
 8017680:	fb03 4302 	mla	r3, r3, r2, r4
 8017684:	889b      	ldrh	r3, [r3, #4]
 8017686:	1a5b      	subs	r3, r3, r1
 8017688:	1ad3      	subs	r3, r2, r3
 801768a:	429a      	cmp	r2, r3
 801768c:	db27      	blt.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801768e:	2b00      	cmp	r3, #0
 8017690:	bfbc      	itt	lt
 8017692:	2302      	movlt	r3, #2
 8017694:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017698:	2500      	movs	r5, #0
 801769a:	260e      	movs	r6, #14
 801769c:	4295      	cmp	r5, r2
 801769e:	dc1e      	bgt.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80176a0:	fb06 4003 	mla	r0, r6, r3, r4
 80176a4:	8887      	ldrh	r7, [r0, #4]
 80176a6:	42b9      	cmp	r1, r7
 80176a8:	d01a      	beq.n	80176e0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80176aa:	d20d      	bcs.n	80176c8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80176ac:	1e5a      	subs	r2, r3, #1
 80176ae:	4295      	cmp	r5, r2
 80176b0:	dc15      	bgt.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80176b2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80176b6:	1a5b      	subs	r3, r3, r1
 80176b8:	1ad3      	subs	r3, r2, r3
 80176ba:	429a      	cmp	r2, r3
 80176bc:	db0f      	blt.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80176be:	429d      	cmp	r5, r3
 80176c0:	ddec      	ble.n	801769c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80176c2:	1953      	adds	r3, r2, r5
 80176c4:	105b      	asrs	r3, r3, #1
 80176c6:	e7e9      	b.n	801769c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80176c8:	1c5d      	adds	r5, r3, #1
 80176ca:	42aa      	cmp	r2, r5
 80176cc:	db07      	blt.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80176ce:	8a43      	ldrh	r3, [r0, #18]
 80176d0:	1acb      	subs	r3, r1, r3
 80176d2:	442b      	add	r3, r5
 80176d4:	429d      	cmp	r5, r3
 80176d6:	dc02      	bgt.n	80176de <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80176d8:	429a      	cmp	r2, r3
 80176da:	dadf      	bge.n	801769c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80176dc:	e7f1      	b.n	80176c2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80176de:	2000      	movs	r0, #0
 80176e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080176e2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80176e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176e4:	4604      	mov	r4, r0
 80176e6:	4617      	mov	r7, r2
 80176e8:	461e      	mov	r6, r3
 80176ea:	b911      	cbnz	r1, 80176f2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80176ec:	2500      	movs	r5, #0
 80176ee:	4628      	mov	r0, r5
 80176f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176f2:	290a      	cmp	r1, #10
 80176f4:	d0fa      	beq.n	80176ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80176f6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80176fa:	4291      	cmp	r1, r2
 80176fc:	d0f6      	beq.n	80176ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80176fe:	f242 020b 	movw	r2, #8203	@ 0x200b
 8017702:	4291      	cmp	r1, r2
 8017704:	d0f2      	beq.n	80176ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017706:	f7ff ffaf 	bl	8017668 <_ZNK8touchgfx9ConstFont4findEt>
 801770a:	4605      	mov	r5, r0
 801770c:	b950      	cbnz	r0, 8017724 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801770e:	6823      	ldr	r3, [r4, #0]
 8017710:	4620      	mov	r0, r4
 8017712:	691b      	ldr	r3, [r3, #16]
 8017714:	4798      	blx	r3
 8017716:	4601      	mov	r1, r0
 8017718:	4620      	mov	r0, r4
 801771a:	f7ff ffa5 	bl	8017668 <_ZNK8touchgfx9ConstFont4findEt>
 801771e:	4605      	mov	r5, r0
 8017720:	2800      	cmp	r0, #0
 8017722:	d0e3      	beq.n	80176ec <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017724:	6823      	ldr	r3, [r4, #0]
 8017726:	4629      	mov	r1, r5
 8017728:	4620      	mov	r0, r4
 801772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801772c:	4798      	blx	r3
 801772e:	6038      	str	r0, [r7, #0]
 8017730:	6823      	ldr	r3, [r4, #0]
 8017732:	4620      	mov	r0, r4
 8017734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017736:	4798      	blx	r3
 8017738:	7030      	strb	r0, [r6, #0]
 801773a:	e7d8      	b.n	80176ee <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801773c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801773c:	2001      	movs	r0, #1
 801773e:	4770      	bx	lr

08017740 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017740:	2002      	movs	r0, #2
 8017742:	4770      	bx	lr

08017744 <_ZN8touchgfx6ScreenD1Ev>:
 8017744:	4770      	bx	lr

08017746 <_ZN8touchgfx12GestureEventD1Ev>:
 8017746:	4770      	bx	lr

08017748 <_ZN8touchgfx9DragEventD1Ev>:
 8017748:	4770      	bx	lr

0801774a <_ZN8touchgfx9DragEventD0Ev>:
 801774a:	b510      	push	{r4, lr}
 801774c:	4604      	mov	r4, r0
 801774e:	2110      	movs	r1, #16
 8017750:	f00c fd78 	bl	8024244 <_ZdlPvj>
 8017754:	4620      	mov	r0, r4
 8017756:	bd10      	pop	{r4, pc}

08017758 <_ZN8touchgfx12GestureEventD0Ev>:
 8017758:	b510      	push	{r4, lr}
 801775a:	4604      	mov	r4, r0
 801775c:	210c      	movs	r1, #12
 801775e:	f00c fd71 	bl	8024244 <_ZdlPvj>
 8017762:	4620      	mov	r0, r4
 8017764:	bd10      	pop	{r4, pc}

08017766 <_ZN8touchgfx6ScreenD0Ev>:
 8017766:	b510      	push	{r4, lr}
 8017768:	4604      	mov	r4, r0
 801776a:	213c      	movs	r1, #60	@ 0x3c
 801776c:	f00c fd6a 	bl	8024244 <_ZdlPvj>
 8017770:	4620      	mov	r0, r4
 8017772:	bd10      	pop	{r4, pc}

08017774 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017774:	b530      	push	{r4, r5, lr}
 8017776:	460d      	mov	r5, r1
 8017778:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801777a:	b087      	sub	sp, #28
 801777c:	4604      	mov	r4, r0
 801777e:	b301      	cbz	r1, 80177c2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017780:	a801      	add	r0, sp, #4
 8017782:	f7ff fb8d 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017786:	892a      	ldrh	r2, [r5, #8]
 8017788:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801778c:	7928      	ldrb	r0, [r5, #4]
 801778e:	1ad2      	subs	r2, r2, r3
 8017790:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017792:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017796:	441a      	add	r2, r3
 8017798:	896b      	ldrh	r3, [r5, #10]
 801779a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801779e:	f88d 0010 	strb.w	r0, [sp, #16]
 80177a2:	1b5b      	subs	r3, r3, r5
 80177a4:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80177a6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80177a8:	442b      	add	r3, r5
 80177aa:	4d07      	ldr	r5, [pc, #28]	@ (80177c8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80177ac:	f8ad 1012 	strh.w	r1, [sp, #18]
 80177b0:	a903      	add	r1, sp, #12
 80177b2:	9503      	str	r5, [sp, #12]
 80177b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80177b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80177bc:	6803      	ldr	r3, [r0, #0]
 80177be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80177c0:	4798      	blx	r3
 80177c2:	b007      	add	sp, #28
 80177c4:	bd30      	pop	{r4, r5, pc}
 80177c6:	bf00      	nop
 80177c8:	08029254 	.word	0x08029254

080177cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80177cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80177d2:	b08a      	sub	sp, #40	@ 0x28
 80177d4:	4604      	mov	r4, r0
 80177d6:	460d      	mov	r5, r1
 80177d8:	b113      	cbz	r3, 80177e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80177da:	790b      	ldrb	r3, [r1, #4]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d044      	beq.n	801786a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80177e0:	f104 0804 	add.w	r8, r4, #4
 80177e4:	a803      	add	r0, sp, #12
 80177e6:	4641      	mov	r1, r8
 80177e8:	f7ff fb5a 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177ec:	792b      	ldrb	r3, [r5, #4]
 80177ee:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80177f2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80177f6:	b983      	cbnz	r3, 801781a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80177f8:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80177fc:	892a      	ldrh	r2, [r5, #8]
 80177fe:	88e9      	ldrh	r1, [r5, #6]
 8017800:	4640      	mov	r0, r8
 8017802:	1b92      	subs	r2, r2, r6
 8017804:	9301      	str	r3, [sp, #4]
 8017806:	1bc9      	subs	r1, r1, r7
 8017808:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801780c:	b212      	sxth	r2, r2
 801780e:	9300      	str	r3, [sp, #0]
 8017810:	b209      	sxth	r1, r1
 8017812:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8017816:	f7f7 fd7d 	bl	800f314 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801781a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801781c:	b329      	cbz	r1, 801786a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801781e:	a805      	add	r0, sp, #20
 8017820:	f7ff fb3e 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017824:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017828:	792b      	ldrb	r3, [r5, #4]
 801782a:	a907      	add	r1, sp, #28
 801782c:	1abf      	subs	r7, r7, r2
 801782e:	88ea      	ldrh	r2, [r5, #6]
 8017830:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017832:	4417      	add	r7, r2
 8017834:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8017836:	f88d 3020 	strb.w	r3, [sp, #32]
 801783a:	4417      	add	r7, r2
 801783c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017840:	1ab6      	subs	r6, r6, r2
 8017842:	892a      	ldrh	r2, [r5, #8]
 8017844:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8017848:	4416      	add	r6, r2
 801784a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801784c:	4416      	add	r6, r2
 801784e:	4a08      	ldr	r2, [pc, #32]	@ (8017870 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017850:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8017854:	2600      	movs	r6, #0
 8017856:	9207      	str	r2, [sp, #28]
 8017858:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801785c:	6803      	ldr	r3, [r0, #0]
 801785e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017860:	4798      	blx	r3
 8017862:	792b      	ldrb	r3, [r5, #4]
 8017864:	b10b      	cbz	r3, 801786a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017866:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801786a:	b00a      	add	sp, #40	@ 0x28
 801786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017870:	08029054 	.word	0x08029054

08017874 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017878:	460c      	mov	r4, r1
 801787a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801787c:	b088      	sub	sp, #32
 801787e:	4605      	mov	r5, r0
 8017880:	2900      	cmp	r1, #0
 8017882:	d06d      	beq.n	8017960 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017884:	4668      	mov	r0, sp
 8017886:	f7ff fb0b 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801788a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801788c:	88e3      	ldrh	r3, [r4, #6]
 801788e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017892:	440b      	add	r3, r1
 8017894:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017898:	b21b      	sxth	r3, r3
 801789a:	4543      	cmp	r3, r8
 801789c:	db31      	blt.n	8017902 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801789e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80178a2:	44c4      	add	ip, r8
 80178a4:	fa0f fc8c 	sxth.w	ip, ip
 80178a8:	4563      	cmp	r3, ip
 80178aa:	da2a      	bge.n	8017902 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80178ac:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80178ae:	8926      	ldrh	r6, [r4, #8]
 80178b0:	4416      	add	r6, r2
 80178b2:	b236      	sxth	r6, r6
 80178b4:	42be      	cmp	r6, r7
 80178b6:	db24      	blt.n	8017902 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80178b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80178bc:	4438      	add	r0, r7
 80178be:	b200      	sxth	r0, r0
 80178c0:	4286      	cmp	r6, r0
 80178c2:	da1e      	bge.n	8017902 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80178c4:	8963      	ldrh	r3, [r4, #10]
 80178c6:	4419      	add	r1, r3
 80178c8:	b209      	sxth	r1, r1
 80178ca:	4541      	cmp	r1, r8
 80178cc:	db08      	blt.n	80178e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80178ce:	4561      	cmp	r1, ip
 80178d0:	da06      	bge.n	80178e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80178d2:	89a3      	ldrh	r3, [r4, #12]
 80178d4:	441a      	add	r2, r3
 80178d6:	b212      	sxth	r2, r2
 80178d8:	42ba      	cmp	r2, r7
 80178da:	db01      	blt.n	80178e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80178dc:	4282      	cmp	r2, r0
 80178de:	db10      	blt.n	8017902 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80178e0:	4b21      	ldr	r3, [pc, #132]	@ (8017968 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80178e2:	a904      	add	r1, sp, #16
 80178e4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80178e6:	9304      	str	r3, [sp, #16]
 80178e8:	2302      	movs	r3, #2
 80178ea:	f88d 3014 	strb.w	r3, [sp, #20]
 80178ee:	2300      	movs	r3, #0
 80178f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80178f8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80178fc:	6803      	ldr	r3, [r0, #0]
 80178fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017900:	4798      	blx	r3
 8017902:	1d29      	adds	r1, r5, #4
 8017904:	a802      	add	r0, sp, #8
 8017906:	f7ff facb 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801790a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801790e:	88e0      	ldrh	r0, [r4, #6]
 8017910:	eba3 0808 	sub.w	r8, r3, r8
 8017914:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017918:	7921      	ldrb	r1, [r4, #4]
 801791a:	fa1f f888 	uxth.w	r8, r8
 801791e:	1bdf      	subs	r7, r3, r7
 8017920:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8017924:	b2bb      	uxth	r3, r7
 8017926:	4440      	add	r0, r8
 8017928:	8922      	ldrh	r2, [r4, #8]
 801792a:	8967      	ldrh	r7, [r4, #10]
 801792c:	4460      	add	r0, ip
 801792e:	89a4      	ldrh	r4, [r4, #12]
 8017930:	441a      	add	r2, r3
 8017932:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8017934:	44b8      	add	r8, r7
 8017936:	4423      	add	r3, r4
 8017938:	f8ad 0016 	strh.w	r0, [sp, #22]
 801793c:	4432      	add	r2, r6
 801793e:	44e0      	add	r8, ip
 8017940:	4433      	add	r3, r6
 8017942:	4c0a      	ldr	r4, [pc, #40]	@ (801796c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017944:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017946:	f88d 1014 	strb.w	r1, [sp, #20]
 801794a:	a904      	add	r1, sp, #16
 801794c:	9404      	str	r4, [sp, #16]
 801794e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017952:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017956:	f8ad 301c 	strh.w	r3, [sp, #28]
 801795a:	6803      	ldr	r3, [r0, #0]
 801795c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801795e:	4798      	blx	r3
 8017960:	b008      	add	sp, #32
 8017962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017966:	bf00      	nop
 8017968:	08029054 	.word	0x08029054
 801796c:	08029240 	.word	0x08029240

08017970 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017972:	4604      	mov	r4, r0
 8017974:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017978:	3201      	adds	r2, #1
 801797a:	d112      	bne.n	80179a2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801797c:	2500      	movs	r5, #0
 801797e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017982:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017986:	6803      	ldr	r3, [r0, #0]
 8017988:	9500      	str	r5, [sp, #0]
 801798a:	466d      	mov	r5, sp
 801798c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017990:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017994:	4629      	mov	r1, r5
 8017996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017998:	4798      	blx	r3
 801799a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801799e:	e884 0003 	stmia.w	r4, {r0, r1}
 80179a2:	4620      	mov	r0, r4
 80179a4:	b003      	add	sp, #12
 80179a6:	bd30      	pop	{r4, r5, pc}

080179a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80179a8:	b513      	push	{r0, r1, r4, lr}
 80179aa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80179ae:	4604      	mov	r4, r0
 80179b0:	3301      	adds	r3, #1
 80179b2:	d109      	bne.n	80179c8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80179b4:	4601      	mov	r1, r0
 80179b6:	4668      	mov	r0, sp
 80179b8:	f7ff fa72 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80179bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80179c0:	8423      	strh	r3, [r4, #32]
 80179c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80179c6:	8463      	strh	r3, [r4, #34]	@ 0x22
 80179c8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80179cc:	b002      	add	sp, #8
 80179ce:	bd10      	pop	{r4, pc}

080179d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80179d0:	b513      	push	{r0, r1, r4, lr}
 80179d2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80179d6:	4604      	mov	r4, r0
 80179d8:	3301      	adds	r3, #1
 80179da:	d109      	bne.n	80179f0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80179dc:	4601      	mov	r1, r0
 80179de:	4668      	mov	r0, sp
 80179e0:	f7ff fa5e 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80179e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80179e8:	8423      	strh	r3, [r4, #32]
 80179ea:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80179ee:	8463      	strh	r3, [r4, #34]	@ 0x22
 80179f0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80179f4:	b002      	add	sp, #8
 80179f6:	bd10      	pop	{r4, pc}

080179f8 <_ZN8touchgfx6ScreenC1Ev>:
 80179f8:	b570      	push	{r4, r5, r6, lr}
 80179fa:	4b17      	ldr	r3, [pc, #92]	@ (8017a58 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80179fc:	4605      	mov	r5, r0
 80179fe:	4a17      	ldr	r2, [pc, #92]	@ (8017a5c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017a00:	2101      	movs	r1, #1
 8017a02:	f845 3b04 	str.w	r3, [r5], #4
 8017a06:	2300      	movs	r3, #0
 8017a08:	6042      	str	r2, [r0, #4]
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	8103      	strh	r3, [r0, #8]
 8017a0e:	8143      	strh	r3, [r0, #10]
 8017a10:	8183      	strh	r3, [r0, #12]
 8017a12:	81c3      	strh	r3, [r0, #14]
 8017a14:	8203      	strh	r3, [r0, #16]
 8017a16:	8243      	strh	r3, [r0, #18]
 8017a18:	8283      	strh	r3, [r0, #20]
 8017a1a:	82c3      	strh	r3, [r0, #22]
 8017a1c:	6203      	str	r3, [r0, #32]
 8017a1e:	8483      	strh	r3, [r0, #36]	@ 0x24
 8017a20:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8017a22:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8017a26:	6343      	str	r3, [r0, #52]	@ 0x34
 8017a28:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8017a2c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8017a30:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017a34:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8017a38:	4b09      	ldr	r3, [pc, #36]	@ (8017a60 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017a40:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8017a42:	4a08      	ldr	r2, [pc, #32]	@ (8017a64 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017a44:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017a48:	4798      	blx	r3
 8017a4a:	6863      	ldr	r3, [r4, #4]
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	4631      	mov	r1, r6
 8017a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a52:	4798      	blx	r3
 8017a54:	4620      	mov	r0, r4
 8017a56:	bd70      	pop	{r4, r5, r6, pc}
 8017a58:	08029268 	.word	0x08029268
 8017a5c:	08028c24 	.word	0x08028c24
 8017a60:	2402592a 	.word	0x2402592a
 8017a64:	24025928 	.word	0x24025928

08017a68 <_ZN8touchgfx6Screen4drawEv>:
 8017a68:	4b09      	ldr	r3, [pc, #36]	@ (8017a90 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017a6a:	b507      	push	{r0, r1, r2, lr}
 8017a6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017a70:	2100      	movs	r1, #0
 8017a72:	4b08      	ldr	r3, [pc, #32]	@ (8017a94 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017a74:	9100      	str	r1, [sp, #0]
 8017a76:	4669      	mov	r1, sp
 8017a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017a80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017a84:	6803      	ldr	r3, [r0, #0]
 8017a86:	689b      	ldr	r3, [r3, #8]
 8017a88:	4798      	blx	r3
 8017a8a:	b003      	add	sp, #12
 8017a8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a90:	24025928 	.word	0x24025928
 8017a94:	2402592a 	.word	0x2402592a

08017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017aa0:	b089      	sub	sp, #36	@ 0x24
 8017aa2:	4680      	mov	r8, r0
 8017aa4:	460c      	mov	r4, r1
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	4615      	mov	r5, r2
 8017aaa:	dd0e      	ble.n	8017aca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017aac:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	dd0a      	ble.n	8017aca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017ab4:	4628      	mov	r0, r5
 8017ab6:	f7ff ff5b 	bl	8017970 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017aba:	4621      	mov	r1, r4
 8017abc:	f7fb f928 	bl	8012d10 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017ac0:	69eb      	ldr	r3, [r5, #28]
 8017ac2:	b928      	cbnz	r0, 8017ad0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017ac4:	461d      	mov	r5, r3
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d1f4      	bne.n	8017ab4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017aca:	b009      	add	sp, #36	@ 0x24
 8017acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad0:	ae04      	add	r6, sp, #16
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	f000 80b5 	beq.w	8017c42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017ad8:	682b      	ldr	r3, [r5, #0]
 8017ada:	4629      	mov	r1, r5
 8017adc:	a802      	add	r0, sp, #8
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	4798      	blx	r3
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	f7ff ff60 	bl	80179a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017ae8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017aec:	4407      	add	r7, r0
 8017aee:	4628      	mov	r0, r5
 8017af0:	f7ff ff6e 	bl	80179d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017af4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017af8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017afc:	b23f      	sxth	r7, r7
 8017afe:	4418      	add	r0, r3
 8017b00:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017b04:	4621      	mov	r1, r4
 8017b06:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b0a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017b0e:	4630      	mov	r0, r6
 8017b10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b14:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017b18:	f7f7 fcde 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8017b1c:	4628      	mov	r0, r5
 8017b1e:	f7ff ff27 	bl	8017970 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017b22:	ab06      	add	r3, sp, #24
 8017b24:	4602      	mov	r2, r0
 8017b26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017b2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8017b2e:	4611      	mov	r1, r2
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7f7 fcd1 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8017b36:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017b3a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017b3e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017b42:	4299      	cmp	r1, r3
 8017b44:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017b48:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017b4c:	d10b      	bne.n	8017b66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017b4e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017b52:	4552      	cmp	r2, sl
 8017b54:	d107      	bne.n	8017b66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017b56:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017b5a:	455a      	cmp	r2, fp
 8017b5c:	d103      	bne.n	8017b66 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017b5e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017b62:	454a      	cmp	r2, r9
 8017b64:	d06d      	beq.n	8017c42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017b66:	f1bb 0f00 	cmp.w	fp, #0
 8017b6a:	dd65      	ble.n	8017c38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017b6c:	f1b9 0f00 	cmp.w	r9, #0
 8017b70:	dd62      	ble.n	8017c38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017b72:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017b76:	fa1f f08a 	uxth.w	r0, sl
 8017b7a:	4552      	cmp	r2, sl
 8017b7c:	9000      	str	r0, [sp, #0]
 8017b7e:	da12      	bge.n	8017ba6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017b80:	9301      	str	r3, [sp, #4]
 8017b82:	9b00      	ldr	r3, [sp, #0]
 8017b84:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017b88:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017b8c:	1a9a      	subs	r2, r3, r2
 8017b8e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017b92:	4631      	mov	r1, r6
 8017b94:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017b98:	4640      	mov	r0, r8
 8017b9a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017b9e:	69ea      	ldr	r2, [r5, #28]
 8017ba0:	f7ff ff7a 	bl	8017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017ba4:	9b01      	ldr	r3, [sp, #4]
 8017ba6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017baa:	b29f      	uxth	r7, r3
 8017bac:	429a      	cmp	r2, r3
 8017bae:	da0d      	bge.n	8017bcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017bb0:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017bb4:	1aba      	subs	r2, r7, r2
 8017bb6:	f8ad a012 	strh.w	sl, [sp, #18]
 8017bba:	4631      	mov	r1, r6
 8017bbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017bc0:	4640      	mov	r0, r8
 8017bc2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017bc6:	69ea      	ldr	r2, [r5, #28]
 8017bc8:	f7ff ff66 	bl	8017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017bcc:	8822      	ldrh	r2, [r4, #0]
 8017bce:	445f      	add	r7, fp
 8017bd0:	88a3      	ldrh	r3, [r4, #4]
 8017bd2:	b2bf      	uxth	r7, r7
 8017bd4:	4413      	add	r3, r2
 8017bd6:	b23a      	sxth	r2, r7
 8017bd8:	b29b      	uxth	r3, r3
 8017bda:	b219      	sxth	r1, r3
 8017bdc:	4291      	cmp	r1, r2
 8017bde:	dd0d      	ble.n	8017bfc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017be0:	1bdb      	subs	r3, r3, r7
 8017be2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017be6:	f8ad a012 	strh.w	sl, [sp, #18]
 8017bea:	4631      	mov	r1, r6
 8017bec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017bf0:	4640      	mov	r0, r8
 8017bf2:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017bf6:	69ea      	ldr	r2, [r5, #28]
 8017bf8:	f7ff ff4e 	bl	8017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017bfc:	88e2      	ldrh	r2, [r4, #6]
 8017bfe:	8863      	ldrh	r3, [r4, #2]
 8017c00:	4413      	add	r3, r2
 8017c02:	9a00      	ldr	r2, [sp, #0]
 8017c04:	444a      	add	r2, r9
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	fa1f f982 	uxth.w	r9, r2
 8017c0c:	b219      	sxth	r1, r3
 8017c0e:	fa0f f289 	sxth.w	r2, r9
 8017c12:	428a      	cmp	r2, r1
 8017c14:	da15      	bge.n	8017c42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017c16:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017c1a:	eba3 0309 	sub.w	r3, r3, r9
 8017c1e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017c22:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017c26:	4631      	mov	r1, r6
 8017c28:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017c2c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017c30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c34:	69ea      	ldr	r2, [r5, #28]
 8017c36:	e001      	b.n	8017c3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017c38:	69ea      	ldr	r2, [r5, #28]
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	4640      	mov	r0, r8
 8017c3e:	f7ff ff2b 	bl	8017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017c42:	4628      	mov	r0, r5
 8017c44:	f7ff fe94 	bl	8017970 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017c48:	6861      	ldr	r1, [r4, #4]
 8017c4a:	4602      	mov	r2, r0
 8017c4c:	4633      	mov	r3, r6
 8017c4e:	6820      	ldr	r0, [r4, #0]
 8017c50:	c303      	stmia	r3!, {r0, r1}
 8017c52:	4611      	mov	r1, r2
 8017c54:	4630      	mov	r0, r6
 8017c56:	f7f7 fc3f 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8017c5a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	f77f af33 	ble.w	8017aca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017c64:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	f77f af2e 	ble.w	8017aca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017c6e:	4628      	mov	r0, r5
 8017c70:	f7ff fe9a 	bl	80179a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017c74:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017c78:	1a18      	subs	r0, r3, r0
 8017c7a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017c7e:	4628      	mov	r0, r5
 8017c80:	f7ff fea6 	bl	80179d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017c84:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017c88:	4631      	mov	r1, r6
 8017c8a:	1a18      	subs	r0, r3, r0
 8017c8c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017c90:	4628      	mov	r0, r5
 8017c92:	682b      	ldr	r3, [r5, #0]
 8017c94:	689b      	ldr	r3, [r3, #8]
 8017c96:	4798      	blx	r3
 8017c98:	e717      	b.n	8017aca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017c9a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017c9a:	b570      	push	{r4, r5, r6, lr}
 8017c9c:	1d06      	adds	r6, r0, #4
 8017c9e:	b086      	sub	sp, #24
 8017ca0:	460c      	mov	r4, r1
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	4631      	mov	r1, r6
 8017ca6:	4605      	mov	r5, r0
 8017ca8:	a802      	add	r0, sp, #8
 8017caa:	9301      	str	r3, [sp, #4]
 8017cac:	f7ff f8f8 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cb0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017cb4:	8822      	ldrh	r2, [r4, #0]
 8017cb6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017cba:	1ad2      	subs	r2, r2, r3
 8017cbc:	8863      	ldrh	r3, [r4, #2]
 8017cbe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017cc2:	1a5b      	subs	r3, r3, r1
 8017cc4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017cc8:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017ccc:	aa01      	add	r2, sp, #4
 8017cce:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017cd2:	4630      	mov	r0, r6
 8017cd4:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017cd8:	a904      	add	r1, sp, #16
 8017cda:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017cde:	f7f7 fcd3 	bl	800f688 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017ce2:	9a01      	ldr	r2, [sp, #4]
 8017ce4:	b11a      	cbz	r2, 8017cee <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017ce6:	4621      	mov	r1, r4
 8017ce8:	4628      	mov	r0, r5
 8017cea:	f7ff fed5 	bl	8017a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017cee:	b006      	add	sp, #24
 8017cf0:	bd70      	pop	{r4, r5, r6, pc}

08017cf2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	b530      	push	{r4, r5, lr}
 8017cf6:	4604      	mov	r4, r0
 8017cf8:	b085      	sub	sp, #20
 8017cfa:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017cfe:	460d      	mov	r5, r1
 8017d00:	466b      	mov	r3, sp
 8017d02:	6851      	ldr	r1, [r2, #4]
 8017d04:	c303      	stmia	r3!, {r0, r1}
 8017d06:	4629      	mov	r1, r5
 8017d08:	4668      	mov	r0, sp
 8017d0a:	f7f7 fbe5 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 8017d0e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017d12:	b12b      	cbz	r3, 8017d20 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017d14:	4669      	mov	r1, sp
 8017d16:	4620      	mov	r0, r4
 8017d18:	f7ff ffbf 	bl	8017c9a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017d1c:	b005      	add	sp, #20
 8017d1e:	bd30      	pop	{r4, r5, pc}
 8017d20:	3404      	adds	r4, #4
 8017d22:	a802      	add	r0, sp, #8
 8017d24:	4621      	mov	r1, r4
 8017d26:	f7ff f8bb 	bl	8016ea0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d2a:	f8bd 3000 	ldrh.w	r3, [sp]
 8017d2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017d32:	4669      	mov	r1, sp
 8017d34:	4620      	mov	r0, r4
 8017d36:	1a9b      	subs	r3, r3, r2
 8017d38:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017d3c:	f8ad 3000 	strh.w	r3, [sp]
 8017d40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017d44:	1a9b      	subs	r3, r3, r2
 8017d46:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017d4a:	f7f7 fc64 	bl	800f616 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017d4e:	e7e5      	b.n	8017d1c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017d50 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017d50:	460b      	mov	r3, r1
 8017d52:	680a      	ldr	r2, [r1, #0]
 8017d54:	1d01      	adds	r1, r0, #4
 8017d56:	6992      	ldr	r2, [r2, #24]
 8017d58:	4618      	mov	r0, r3
 8017d5a:	4710      	bx	r2

08017d5c <_ZN8touchgfx12TextProviderC1Ev>:
 8017d5c:	b538      	push	{r3, r4, r5, lr}
 8017d5e:	2500      	movs	r5, #0
 8017d60:	2302      	movs	r3, #2
 8017d62:	4604      	mov	r4, r0
 8017d64:	220e      	movs	r2, #14
 8017d66:	7403      	strb	r3, [r0, #16]
 8017d68:	4629      	mov	r1, r5
 8017d6a:	6145      	str	r5, [r0, #20]
 8017d6c:	7605      	strb	r5, [r0, #24]
 8017d6e:	83c5      	strh	r5, [r0, #30]
 8017d70:	8405      	strh	r5, [r0, #32]
 8017d72:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8017d74:	8705      	strh	r5, [r0, #56]	@ 0x38
 8017d76:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8017d78:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8017d7c:	e9c0 5500 	strd	r5, r5, [r0]
 8017d80:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8017d84:	304c      	adds	r0, #76	@ 0x4c
 8017d86:	f00d f891 	bl	8024eac <memset>
 8017d8a:	2301      	movs	r3, #1
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8017d92:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8017d96:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8017d9a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8017d9e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8017da2:	f7ed f809 	bl	8004db8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8017da6:	4620      	mov	r0, r4
 8017da8:	bd38      	pop	{r3, r4, r5, pc}

08017daa <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8017daa:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8017dac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017db0:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8017db2:	fab0 f080 	clz	r0, r0
 8017db6:	0940      	lsrs	r0, r0, #5
 8017db8:	4770      	bx	lr

08017dba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8017dba:	b530      	push	{r4, r5, lr}
 8017dbc:	2500      	movs	r5, #0
 8017dbe:	2401      	movs	r4, #1
 8017dc0:	6843      	ldr	r3, [r0, #4]
 8017dc2:	b913      	cbnz	r3, 8017dca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8017dc4:	6803      	ldr	r3, [r0, #0]
 8017dc6:	b313      	cbz	r3, 8017e0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017dc8:	6043      	str	r3, [r0, #4]
 8017dca:	7e03      	ldrb	r3, [r0, #24]
 8017dcc:	b143      	cbz	r3, 8017de0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8017dce:	6943      	ldr	r3, [r0, #20]
 8017dd0:	b12b      	cbz	r3, 8017dde <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017dd2:	881a      	ldrh	r2, [r3, #0]
 8017dd4:	b11a      	cbz	r2, 8017dde <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8017dd6:	1c9a      	adds	r2, r3, #2
 8017dd8:	6142      	str	r2, [r0, #20]
 8017dda:	8818      	ldrh	r0, [r3, #0]
 8017ddc:	bd30      	pop	{r4, r5, pc}
 8017dde:	7605      	strb	r5, [r0, #24]
 8017de0:	6843      	ldr	r3, [r0, #4]
 8017de2:	8819      	ldrh	r1, [r3, #0]
 8017de4:	b199      	cbz	r1, 8017e0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8017de6:	1c9a      	adds	r2, r3, #2
 8017de8:	2902      	cmp	r1, #2
 8017dea:	6042      	str	r2, [r0, #4]
 8017dec:	d1f5      	bne.n	8017dda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8017dee:	7c03      	ldrb	r3, [r0, #16]
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d8e5      	bhi.n	8017dc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017df4:	1c5a      	adds	r2, r3, #1
 8017df6:	3302      	adds	r3, #2
 8017df8:	7402      	strb	r2, [r0, #16]
 8017dfa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017dfe:	6143      	str	r3, [r0, #20]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d0dd      	beq.n	8017dc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e04:	881b      	ldrh	r3, [r3, #0]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d0da      	beq.n	8017dc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e0a:	7604      	strb	r4, [r0, #24]
 8017e0c:	e7d8      	b.n	8017dc0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8017e0e:	2000      	movs	r0, #0
 8017e10:	e7e4      	b.n	8017ddc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8017e12:	6001      	str	r1, [r0, #0]
 8017e14:	2100      	movs	r1, #0
 8017e16:	b430      	push	{r4, r5}
 8017e18:	6041      	str	r1, [r0, #4]
 8017e1a:	6815      	ldr	r5, [r2, #0]
 8017e1c:	6085      	str	r5, [r0, #8]
 8017e1e:	6852      	ldr	r2, [r2, #4]
 8017e20:	6443      	str	r3, [r0, #68]	@ 0x44
 8017e22:	9b02      	ldr	r3, [sp, #8]
 8017e24:	60c2      	str	r2, [r0, #12]
 8017e26:	7401      	strb	r1, [r0, #16]
 8017e28:	6141      	str	r1, [r0, #20]
 8017e2a:	7601      	strb	r1, [r0, #24]
 8017e2c:	8701      	strh	r1, [r0, #56]	@ 0x38
 8017e2e:	8401      	strh	r1, [r0, #32]
 8017e30:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8017e34:	6483      	str	r3, [r0, #72]	@ 0x48
 8017e36:	bc30      	pop	{r4, r5}
 8017e38:	f7ec bfbe 	b.w	8004db8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08017e3c <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8017e3c:	b408      	push	{r3}
 8017e3e:	b510      	push	{r4, lr}
 8017e40:	b085      	sub	sp, #20
 8017e42:	ac07      	add	r4, sp, #28
 8017e44:	f854 3b04 	ldr.w	r3, [r4], #4
 8017e48:	9300      	str	r3, [sp, #0]
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	4622      	mov	r2, r4
 8017e4e:	9403      	str	r4, [sp, #12]
 8017e50:	f7ff ffdf 	bl	8017e12 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017e54:	b005      	add	sp, #20
 8017e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e5a:	b001      	add	sp, #4
 8017e5c:	4770      	bx	lr

08017e5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8017e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e60:	4605      	mov	r5, r0
 8017e62:	4608      	mov	r0, r1
 8017e64:	b1f1      	cbz	r1, 8017ea4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8017e66:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8017e6a:	460b      	mov	r3, r1
 8017e6c:	f101 0708 	add.w	r7, r1, #8
 8017e70:	4622      	mov	r2, r4
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	3308      	adds	r3, #8
 8017e76:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017e7a:	4626      	mov	r6, r4
 8017e7c:	42bb      	cmp	r3, r7
 8017e7e:	c603      	stmia	r6!, {r0, r1}
 8017e80:	4634      	mov	r4, r6
 8017e82:	d1f6      	bne.n	8017e72 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8017e84:	6818      	ldr	r0, [r3, #0]
 8017e86:	6030      	str	r0, [r6, #0]
 8017e88:	4610      	mov	r0, r2
 8017e8a:	889b      	ldrh	r3, [r3, #4]
 8017e8c:	80b3      	strh	r3, [r6, #4]
 8017e8e:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8017e92:	015b      	lsls	r3, r3, #5
 8017e94:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017e98:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8017e9c:	430b      	orrs	r3, r1
 8017e9e:	425b      	negs	r3, r3
 8017ea0:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8017ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ea6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8017ea6:	b538      	push	{r3, r4, r5, lr}
 8017ea8:	460c      	mov	r4, r1
 8017eaa:	6811      	ldr	r1, [r2, #0]
 8017eac:	4610      	mov	r0, r2
 8017eae:	68cd      	ldr	r5, [r1, #12]
 8017eb0:	4619      	mov	r1, r3
 8017eb2:	47a8      	blx	r5
 8017eb4:	2800      	cmp	r0, #0
 8017eb6:	bf08      	it	eq
 8017eb8:	4620      	moveq	r0, r4
 8017eba:	bd38      	pop	{r3, r4, r5, pc}

08017ebc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8017ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec0:	468c      	mov	ip, r1
 8017ec2:	4605      	mov	r5, r0
 8017ec4:	4614      	mov	r4, r2
 8017ec6:	b942      	cbnz	r2, 8017eda <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8017ec8:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8017ecc:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8017ed0:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017eda:	7b50      	ldrb	r0, [r2, #13]
 8017edc:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8017ee0:	8893      	ldrh	r3, [r2, #4]
 8017ee2:	0106      	lsls	r6, r0, #4
 8017ee4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8017ee8:	79e6      	ldrb	r6, [r4, #7]
 8017eea:	4316      	orrs	r6, r2
 8017eec:	185a      	adds	r2, r3, r1
 8017eee:	b291      	uxth	r1, r2
 8017ef0:	b2b7      	uxth	r7, r6
 8017ef2:	291d      	cmp	r1, #29
 8017ef4:	d87f      	bhi.n	8017ff6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8017ef6:	2201      	movs	r2, #1
 8017ef8:	10f6      	asrs	r6, r6, #3
 8017efa:	408a      	lsls	r2, r1
 8017efc:	498b      	ldr	r1, [pc, #556]	@ (801812c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8017efe:	420a      	tst	r2, r1
 8017f00:	d12e      	bne.n	8017f60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8017f02:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8017f06:	d076      	beq.n	8017ff6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8017f08:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8017f0c:	4623      	mov	r3, r4
 8017f0e:	f104 0e08 	add.w	lr, r4, #8
 8017f12:	4614      	mov	r4, r2
 8017f14:	6818      	ldr	r0, [r3, #0]
 8017f16:	3308      	adds	r3, #8
 8017f18:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017f1c:	4694      	mov	ip, r2
 8017f1e:	4573      	cmp	r3, lr
 8017f20:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8017f24:	4662      	mov	r2, ip
 8017f26:	d1f5      	bne.n	8017f14 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8017f28:	6818      	ldr	r0, [r3, #0]
 8017f2a:	f8cc 0000 	str.w	r0, [ip]
 8017f2e:	889b      	ldrh	r3, [r3, #4]
 8017f30:	f8ac 3004 	strh.w	r3, [ip, #4]
 8017f34:	b2b3      	uxth	r3, r6
 8017f36:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8017f3a:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8017f3e:	1aca      	subs	r2, r1, r3
 8017f40:	1bcf      	subs	r7, r1, r7
 8017f42:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8017f46:	b292      	uxth	r2, r2
 8017f48:	1afb      	subs	r3, r7, r3
 8017f4a:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8017f4e:	10d2      	asrs	r2, r2, #3
 8017f50:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8017f54:	4302      	orrs	r2, r0
 8017f56:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8017f5a:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8017f5e:	e7b9      	b.n	8017ed4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8017f60:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8017f64:	4623      	mov	r3, r4
 8017f66:	f104 0808 	add.w	r8, r4, #8
 8017f6a:	4614      	mov	r4, r2
 8017f6c:	6818      	ldr	r0, [r3, #0]
 8017f6e:	3308      	adds	r3, #8
 8017f70:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8017f74:	4696      	mov	lr, r2
 8017f76:	4543      	cmp	r3, r8
 8017f78:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017f7c:	4672      	mov	r2, lr
 8017f7e:	d1f5      	bne.n	8017f6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8017f80:	6818      	ldr	r0, [r3, #0]
 8017f82:	f8ce 0000 	str.w	r0, [lr]
 8017f86:	889b      	ldrh	r3, [r3, #4]
 8017f88:	f8ae 3004 	strh.w	r3, [lr, #4]
 8017f8c:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8017f8e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8017f92:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8017f94:	f640 6333 	movw	r3, #3635	@ 0xe33
 8017f98:	4299      	cmp	r1, r3
 8017f9a:	d111      	bne.n	8017fc0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8017f9c:	f8dc 3000 	ldr.w	r3, [ip]
 8017fa0:	4660      	mov	r0, ip
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	4798      	blx	r3
 8017fa6:	7b41      	ldrb	r1, [r0, #13]
 8017fa8:	00cb      	lsls	r3, r1, #3
 8017faa:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017fae:	7a03      	ldrb	r3, [r0, #8]
 8017fb0:	4313      	orrs	r3, r2
 8017fb2:	064a      	lsls	r2, r1, #25
 8017fb4:	bf44      	itt	mi
 8017fb6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017fba:	b21b      	sxthmi	r3, r3
 8017fbc:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8017fc0:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8017fc4:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8017fc8:	443b      	add	r3, r7
 8017fca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8017fce:	4433      	add	r3, r6
 8017fd0:	b29b      	uxth	r3, r3
 8017fd2:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8017fd6:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8017fda:	10db      	asrs	r3, r3, #3
 8017fdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017fe0:	4313      	orrs	r3, r2
 8017fe2:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8017fe6:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8017fea:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8017fee:	1a9b      	subs	r3, r3, r2
 8017ff0:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8017ff4:	e76e      	b.n	8017ed4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8017ff6:	f023 0204 	bic.w	r2, r3, #4
 8017ffa:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8017ffe:	428a      	cmp	r2, r1
 8018000:	d003      	beq.n	801800a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8018002:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8018006:	4293      	cmp	r3, r2
 8018008:	d138      	bne.n	801807c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801800a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801800e:	4622      	mov	r2, r4
 8018010:	f104 0808 	add.w	r8, r4, #8
 8018014:	4634      	mov	r4, r6
 8018016:	6810      	ldr	r0, [r2, #0]
 8018018:	3208      	adds	r2, #8
 801801a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801801e:	46b6      	mov	lr, r6
 8018020:	4542      	cmp	r2, r8
 8018022:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018026:	4676      	mov	r6, lr
 8018028:	d1f5      	bne.n	8018016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801802a:	6810      	ldr	r0, [r2, #0]
 801802c:	3b01      	subs	r3, #1
 801802e:	4621      	mov	r1, r4
 8018030:	f8ce 0000 	str.w	r0, [lr]
 8018034:	b29b      	uxth	r3, r3
 8018036:	8892      	ldrh	r2, [r2, #4]
 8018038:	4628      	mov	r0, r5
 801803a:	f8ae 2004 	strh.w	r2, [lr, #4]
 801803e:	4662      	mov	r2, ip
 8018040:	f7ff ff31 	bl	8017ea6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018044:	7b41      	ldrb	r1, [r0, #13]
 8018046:	00cb      	lsls	r3, r1, #3
 8018048:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801804c:	7a03      	ldrb	r3, [r0, #8]
 801804e:	0648      	lsls	r0, r1, #25
 8018050:	ea43 0302 	orr.w	r3, r3, r2
 8018054:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8018058:	bf44      	itt	mi
 801805a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801805e:	b21b      	sxthmi	r3, r3
 8018060:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018064:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018068:	005b      	lsls	r3, r3, #1
 801806a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801806e:	4313      	orrs	r3, r2
 8018070:	115a      	asrs	r2, r3, #5
 8018072:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018076:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801807a:	e047      	b.n	801810c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 801807c:	00c2      	lsls	r2, r0, #3
 801807e:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8018082:	7a22      	ldrb	r2, [r4, #8]
 8018084:	430a      	orrs	r2, r1
 8018086:	0641      	lsls	r1, r0, #25
 8018088:	f640 6109 	movw	r1, #3593	@ 0xe09
 801808c:	bf44      	itt	mi
 801808e:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8018092:	b212      	sxthmi	r2, r2
 8018094:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018098:	f023 0210 	bic.w	r2, r3, #16
 801809c:	428a      	cmp	r2, r1
 801809e:	d003      	beq.n	80180a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 80180a0:	f640 6213 	movw	r2, #3603	@ 0xe13
 80180a4:	4293      	cmp	r3, r2
 80180a6:	d13e      	bne.n	8018126 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 80180a8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80180ac:	f104 0808 	add.w	r8, r4, #8
 80180b0:	4696      	mov	lr, r2
 80180b2:	6820      	ldr	r0, [r4, #0]
 80180b4:	3408      	adds	r4, #8
 80180b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80180ba:	4616      	mov	r6, r2
 80180bc:	4544      	cmp	r4, r8
 80180be:	c603      	stmia	r6!, {r0, r1}
 80180c0:	4632      	mov	r2, r6
 80180c2:	d1f6      	bne.n	80180b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 80180c4:	6820      	ldr	r0, [r4, #0]
 80180c6:	6030      	str	r0, [r6, #0]
 80180c8:	4628      	mov	r0, r5
 80180ca:	88a1      	ldrh	r1, [r4, #4]
 80180cc:	4674      	mov	r4, lr
 80180ce:	80b1      	strh	r1, [r6, #4]
 80180d0:	4671      	mov	r1, lr
 80180d2:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 80180d6:	0076      	lsls	r6, r6, #1
 80180d8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 80180dc:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 80180e0:	4316      	orrs	r6, r2
 80180e2:	f640 6213 	movw	r2, #3603	@ 0xe13
 80180e6:	4293      	cmp	r3, r2
 80180e8:	4662      	mov	r2, ip
 80180ea:	bf16      	itet	ne
 80180ec:	f103 33ff 	addne.w	r3, r3, #4294967295
 80180f0:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 80180f4:	b29b      	uxthne	r3, r3
 80180f6:	f7ff fed6 	bl	8017ea6 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80180fa:	7b43      	ldrb	r3, [r0, #13]
 80180fc:	7a82      	ldrb	r2, [r0, #10]
 80180fe:	005b      	lsls	r3, r3, #1
 8018100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018104:	4313      	orrs	r3, r2
 8018106:	1af6      	subs	r6, r6, r3
 8018108:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801810c:	7b61      	ldrb	r1, [r4, #13]
 801810e:	00cb      	lsls	r3, r1, #3
 8018110:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018114:	7a23      	ldrb	r3, [r4, #8]
 8018116:	4313      	orrs	r3, r2
 8018118:	064a      	lsls	r2, r1, #25
 801811a:	bf44      	itt	mi
 801811c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018120:	b21b      	sxthmi	r3, r3
 8018122:	1bdb      	subs	r3, r3, r7
 8018124:	e719      	b.n	8017f5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018126:	2300      	movs	r3, #0
 8018128:	e7a5      	b.n	8018076 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801812a:	bf00      	nop
 801812c:	3fc00079 	.word	0x3fc00079

08018130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018134:	4604      	mov	r4, r0
 8018136:	b942      	cbnz	r2, 801814a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018138:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801813c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8018140:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8018144:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8018148:	e047      	b.n	80181da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801814a:	7b51      	ldrb	r1, [r2, #13]
 801814c:	8893      	ldrh	r3, [r2, #4]
 801814e:	010d      	lsls	r5, r1, #4
 8018150:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8018154:	79d5      	ldrb	r5, [r2, #7]
 8018156:	4305      	orrs	r5, r0
 8018158:	2d04      	cmp	r5, #4
 801815a:	bfcc      	ite	gt
 801815c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018160:	f04f 0e01 	movle.w	lr, #1
 8018164:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8018168:	f200 80ab 	bhi.w	80182c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801816c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8018170:	4283      	cmp	r3, r0
 8018172:	d216      	bcs.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018174:	f240 605b 	movw	r0, #1627	@ 0x65b
 8018178:	4283      	cmp	r3, r0
 801817a:	d859      	bhi.n	8018230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801817c:	f240 6057 	movw	r0, #1623	@ 0x657
 8018180:	4283      	cmp	r3, r0
 8018182:	d20e      	bcs.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018184:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8018188:	d24a      	bcs.n	8018220 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801818a:	f240 604e 	movw	r0, #1614	@ 0x64e
 801818e:	4283      	cmp	r3, r0
 8018190:	d207      	bcs.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018192:	f240 601a 	movw	r0, #1562	@ 0x61a
 8018196:	4283      	cmp	r3, r0
 8018198:	d02a      	beq.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801819a:	d821      	bhi.n	80181e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801819c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80181a0:	d35b      	bcc.n	801825a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80181a2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80181a6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80181aa:	f040 80d0 	bne.w	801834e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80181ae:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80181b2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80181b6:	f040 80ca 	bne.w	801834e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80181ba:	00cb      	lsls	r3, r1, #3
 80181bc:	0649      	lsls	r1, r1, #25
 80181be:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80181c2:	7a13      	ldrb	r3, [r2, #8]
 80181c4:	ea43 0300 	orr.w	r3, r3, r0
 80181c8:	bf44      	itt	mi
 80181ca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80181ce:	b21b      	sxthmi	r3, r3
 80181d0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80181d4:	1b5d      	subs	r5, r3, r5
 80181d6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80181da:	4610      	mov	r0, r2
 80181dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181e0:	f240 604b 	movw	r0, #1611	@ 0x64b
 80181e4:	4283      	cmp	r3, r0
 80181e6:	d338      	bcc.n	801825a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80181e8:	f240 604c 	movw	r0, #1612	@ 0x64c
 80181ec:	4283      	cmp	r3, r0
 80181ee:	d9d8      	bls.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80181f0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 80181f4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 80181f8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80181fc:	f040 80f3 	bne.w	80183e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018200:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018204:	f040 80ef 	bne.w	80183e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018208:	00cb      	lsls	r3, r1, #3
 801820a:	064e      	lsls	r6, r1, #25
 801820c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018210:	7a13      	ldrb	r3, [r2, #8]
 8018212:	ea43 0300 	orr.w	r3, r3, r0
 8018216:	bf44      	itt	mi
 8018218:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801821c:	b21b      	sxthmi	r3, r3
 801821e:	e7d9      	b.n	80181d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018220:	f240 6054 	movw	r0, #1620	@ 0x654
 8018224:	4283      	cmp	r3, r0
 8018226:	d8e3      	bhi.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018228:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801822c:	d9e0      	bls.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801822e:	e7b8      	b.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018230:	f240 6074 	movw	r0, #1652	@ 0x674
 8018234:	4283      	cmp	r3, r0
 8018236:	d0b4      	beq.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018238:	d82d      	bhi.n	8018296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801823a:	f240 605e 	movw	r0, #1630	@ 0x65e
 801823e:	4283      	cmp	r3, r0
 8018240:	d804      	bhi.n	801824c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8018242:	f240 605d 	movw	r0, #1629	@ 0x65d
 8018246:	4283      	cmp	r3, r0
 8018248:	d3d2      	bcc.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801824a:	e7aa      	b.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801824c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8018250:	4283      	cmp	r3, r0
 8018252:	d0cd      	beq.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018254:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8018258:	d0a3      	beq.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801825a:	00cb      	lsls	r3, r1, #3
 801825c:	0649      	lsls	r1, r1, #25
 801825e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8018262:	7a13      	ldrb	r3, [r2, #8]
 8018264:	ea43 0300 	orr.w	r3, r3, r0
 8018268:	bf44      	itt	mi
 801826a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801826e:	b21b      	sxthmi	r3, r3
 8018270:	1b5d      	subs	r5, r3, r5
 8018272:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8018276:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801827a:	7b53      	ldrb	r3, [r2, #13]
 801827c:	015b      	lsls	r3, r3, #5
 801827e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018282:	7993      	ldrb	r3, [r2, #6]
 8018284:	430b      	orrs	r3, r1
 8018286:	2105      	movs	r1, #5
 8018288:	005b      	lsls	r3, r3, #1
 801828a:	fb93 f3f1 	sdiv	r3, r3, r1
 801828e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8018292:	440b      	add	r3, r1
 8018294:	e756      	b.n	8018144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8018296:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801829a:	4283      	cmp	r3, r0
 801829c:	d809      	bhi.n	80182b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801829e:	f240 60df 	movw	r0, #1759	@ 0x6df
 80182a2:	4283      	cmp	r3, r0
 80182a4:	f4bf af7d 	bcs.w	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182a8:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80182ac:	2b05      	cmp	r3, #5
 80182ae:	d8d4      	bhi.n	801825a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80182b0:	e777      	b.n	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182b2:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 80182b6:	4283      	cmp	r3, r0
 80182b8:	d09a      	beq.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80182ba:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 80182be:	4283      	cmp	r3, r0
 80182c0:	e7ca      	b.n	8018258 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80182c2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 80182c6:	d22b      	bcs.n	8018320 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80182c8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 80182cc:	4283      	cmp	r3, r0
 80182ce:	d28f      	bcs.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80182d0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80182d4:	4283      	cmp	r3, r0
 80182d6:	d816      	bhi.n	8018306 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80182d8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80182dc:	4283      	cmp	r3, r0
 80182de:	f4bf af60 	bcs.w	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182e2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 80182e6:	4283      	cmp	r3, r0
 80182e8:	d80a      	bhi.n	8018300 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80182ea:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 80182ee:	4283      	cmp	r3, r0
 80182f0:	f4bf af57 	bcs.w	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80182f4:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 80182f8:	4283      	cmp	r3, r0
 80182fa:	f43f af79 	beq.w	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80182fe:	e7ac      	b.n	801825a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018300:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8018304:	e7f8      	b.n	80182f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018306:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801830a:	4283      	cmp	r3, r0
 801830c:	d802      	bhi.n	8018314 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801830e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018312:	e798      	b.n	8018246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018314:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8018318:	4283      	cmp	r3, r0
 801831a:	f47f af42 	bne.w	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801831e:	e767      	b.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018320:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8018324:	4283      	cmp	r3, r0
 8018326:	f43f af63 	beq.w	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801832a:	d802      	bhi.n	8018332 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801832c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8018330:	e7f2      	b.n	8018318 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8018332:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8018336:	4283      	cmp	r3, r0
 8018338:	d805      	bhi.n	8018346 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801833a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801833e:	4283      	cmp	r3, r0
 8018340:	f4ff af2f 	bcc.w	80181a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018344:	e754      	b.n	80181f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018346:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801834a:	4283      	cmp	r3, r0
 801834c:	e7af      	b.n	80182ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801834e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8018352:	4617      	mov	r7, r2
 8018354:	f102 0808 	add.w	r8, r2, #8
 8018358:	4666      	mov	r6, ip
 801835a:	6838      	ldr	r0, [r7, #0]
 801835c:	3708      	adds	r7, #8
 801835e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018362:	46e6      	mov	lr, ip
 8018364:	4547      	cmp	r7, r8
 8018366:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801836a:	46f4      	mov	ip, lr
 801836c:	d1f5      	bne.n	801835a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801836e:	6838      	ldr	r0, [r7, #0]
 8018370:	f8ce 0000 	str.w	r0, [lr]
 8018374:	88b9      	ldrh	r1, [r7, #4]
 8018376:	f8ae 1004 	strh.w	r1, [lr, #4]
 801837a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801837e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8018382:	d009      	beq.n	8018398 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8018384:	7b51      	ldrb	r1, [r2, #13]
 8018386:	7992      	ldrb	r2, [r2, #6]
 8018388:	0149      	lsls	r1, r1, #5
 801838a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801838e:	4311      	orrs	r1, r2
 8018390:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018394:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018398:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801839c:	b2ad      	uxth	r5, r5
 801839e:	d00d      	beq.n	80183bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80183a0:	442b      	add	r3, r5
 80183a2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80183ac:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80183b0:	10db      	asrs	r3, r3, #3
 80183b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80183b6:	4313      	orrs	r3, r2
 80183b8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80183bc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80183c0:	00cb      	lsls	r3, r1, #3
 80183c2:	064f      	lsls	r7, r1, #25
 80183c4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80183c8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80183cc:	ea43 0302 	orr.w	r3, r3, r2
 80183d0:	bf44      	itt	mi
 80183d2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80183d6:	b21b      	sxthmi	r3, r3
 80183d8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80183dc:	1b5b      	subs	r3, r3, r5
 80183de:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80183e2:	4632      	mov	r2, r6
 80183e4:	e6f9      	b.n	80181da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80183e6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80183ea:	4617      	mov	r7, r2
 80183ec:	f102 0908 	add.w	r9, r2, #8
 80183f0:	4666      	mov	r6, ip
 80183f2:	6838      	ldr	r0, [r7, #0]
 80183f4:	3708      	adds	r7, #8
 80183f6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80183fa:	46e0      	mov	r8, ip
 80183fc:	454f      	cmp	r7, r9
 80183fe:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8018402:	46c4      	mov	ip, r8
 8018404:	d1f5      	bne.n	80183f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018406:	6838      	ldr	r0, [r7, #0]
 8018408:	f8c8 0000 	str.w	r0, [r8]
 801840c:	88b9      	ldrh	r1, [r7, #4]
 801840e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8018412:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8018416:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801841a:	d009      	beq.n	8018430 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801841c:	7b51      	ldrb	r1, [r2, #13]
 801841e:	7992      	ldrb	r2, [r2, #6]
 8018420:	0149      	lsls	r1, r1, #5
 8018422:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8018426:	4311      	orrs	r1, r2
 8018428:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801842c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8018430:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8018434:	d00e      	beq.n	8018454 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018436:	eba3 030e 	sub.w	r3, r3, lr
 801843a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801843e:	b29b      	uxth	r3, r3
 8018440:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018444:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8018448:	10db      	asrs	r3, r3, #3
 801844a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801844e:	4313      	orrs	r3, r2
 8018450:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8018454:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8018458:	00cb      	lsls	r3, r1, #3
 801845a:	0648      	lsls	r0, r1, #25
 801845c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018460:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018464:	ea43 0302 	orr.w	r3, r3, r2
 8018468:	bf44      	itt	mi
 801846a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801846e:	b21b      	sxthmi	r3, r3
 8018470:	1b5d      	subs	r5, r3, r5
 8018472:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018476:	e7b4      	b.n	80183e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018478 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847c:	461e      	mov	r6, r3
 801847e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018480:	4604      	mov	r4, r0
 8018482:	4617      	mov	r7, r2
 8018484:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018488:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801848c:	f7ec fc52 	bl	8004d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018490:	4605      	mov	r5, r0
 8018492:	b918      	cbnz	r0, 801849c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8018494:	6030      	str	r0, [r6, #0]
 8018496:	4628      	mov	r0, r5
 8018498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	4601      	mov	r1, r0
 80184a0:	4638      	mov	r0, r7
 80184a2:	68db      	ldr	r3, [r3, #12]
 80184a4:	4798      	blx	r3
 80184a6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80184aa:	4602      	mov	r2, r0
 80184ac:	6030      	str	r0, [r6, #0]
 80184ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80184b2:	d213      	bcs.n	80184dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80184b4:	4643      	mov	r3, r8
 80184b6:	4639      	mov	r1, r7
 80184b8:	4620      	mov	r0, r4
 80184ba:	f7ff fe39 	bl	8018130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80184be:	6030      	str	r0, [r6, #0]
 80184c0:	6833      	ldr	r3, [r6, #0]
 80184c2:	b143      	cbz	r3, 80184d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80184c4:	7b5a      	ldrb	r2, [r3, #13]
 80184c6:	7a9b      	ldrb	r3, [r3, #10]
 80184c8:	0052      	lsls	r2, r2, #1
 80184ca:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80184ce:	4313      	orrs	r3, r2
 80184d0:	bf0c      	ite	eq
 80184d2:	2301      	moveq	r3, #1
 80184d4:	2300      	movne	r3, #0
 80184d6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80184da:	e7dc      	b.n	8018496 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80184dc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80184e0:	b29b      	uxth	r3, r3
 80184e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80184e4:	d804      	bhi.n	80184f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80184e6:	4639      	mov	r1, r7
 80184e8:	4620      	mov	r0, r4
 80184ea:	f7ff fce7 	bl	8017ebc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80184ee:	e7e6      	b.n	80184be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80184f0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d0e3      	beq.n	80184c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80184f8:	f640 1302 	movw	r3, #2306	@ 0x902
 80184fc:	429d      	cmp	r5, r3
 80184fe:	d1df      	bne.n	80184c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018500:	4601      	mov	r1, r0
 8018502:	4620      	mov	r0, r4
 8018504:	f7ff fcab 	bl	8017e5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018508:	e7d9      	b.n	80184be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801850a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801850a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801850e:	461e      	mov	r6, r3
 8018510:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018512:	4604      	mov	r4, r0
 8018514:	4617      	mov	r7, r2
 8018516:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801851a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801851e:	f7ec fc09 	bl	8004d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018522:	4605      	mov	r5, r0
 8018524:	b918      	cbnz	r0, 801852e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018526:	6030      	str	r0, [r6, #0]
 8018528:	4628      	mov	r0, r5
 801852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	4601      	mov	r1, r0
 8018532:	4638      	mov	r0, r7
 8018534:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018538:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801853c:	47c8      	blx	r9
 801853e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8018542:	4602      	mov	r2, r0
 8018544:	6030      	str	r0, [r6, #0]
 8018546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801854a:	d213      	bcs.n	8018574 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801854c:	4643      	mov	r3, r8
 801854e:	4639      	mov	r1, r7
 8018550:	4620      	mov	r0, r4
 8018552:	f7ff fded 	bl	8018130 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018556:	6030      	str	r0, [r6, #0]
 8018558:	6833      	ldr	r3, [r6, #0]
 801855a:	b143      	cbz	r3, 801856e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801855c:	7b5a      	ldrb	r2, [r3, #13]
 801855e:	7a9b      	ldrb	r3, [r3, #10]
 8018560:	0052      	lsls	r2, r2, #1
 8018562:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8018566:	4313      	orrs	r3, r2
 8018568:	bf0c      	ite	eq
 801856a:	2301      	moveq	r3, #1
 801856c:	2300      	movne	r3, #0
 801856e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8018572:	e7d9      	b.n	8018528 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8018574:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8018578:	b29b      	uxth	r3, r3
 801857a:	2b7f      	cmp	r3, #127	@ 0x7f
 801857c:	d804      	bhi.n	8018588 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801857e:	4639      	mov	r1, r7
 8018580:	4620      	mov	r0, r4
 8018582:	f7ff fc9b 	bl	8017ebc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8018586:	e7e6      	b.n	8018556 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018588:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801858c:	2b00      	cmp	r3, #0
 801858e:	d0e3      	beq.n	8018558 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018590:	f640 1302 	movw	r3, #2306	@ 0x902
 8018594:	429d      	cmp	r5, r3
 8018596:	d1df      	bne.n	8018558 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018598:	4601      	mov	r1, r0
 801859a:	4620      	mov	r0, r4
 801859c:	f7ff fc5f 	bl	8017e5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80185a0:	e7d9      	b.n	8018556 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080185a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80185a2:	b510      	push	{r4, lr}
 80185a4:	4604      	mov	r4, r0
 80185a6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80185aa:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80185ac:	b1e1      	cbz	r1, 80185e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80185ae:	2b0a      	cmp	r3, #10
 80185b0:	d02d      	beq.n	801860e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80185b2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80185b4:	3901      	subs	r1, #1
 80185b6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80185ba:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80185bc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80185c0:	1c51      	adds	r1, r2, #1
 80185c2:	b289      	uxth	r1, r1
 80185c4:	2901      	cmp	r1, #1
 80185c6:	bf8a      	itet	hi
 80185c8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80185cc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80185ce:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80185d0:	1c5a      	adds	r2, r3, #1
 80185d2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80185d4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80185d6:	4413      	add	r3, r2
 80185d8:	b29b      	uxth	r3, r3
 80185da:	2b09      	cmp	r3, #9
 80185dc:	bf88      	it	hi
 80185de:	3b0a      	subhi	r3, #10
 80185e0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80185e4:	8458      	strh	r0, [r3, #34]	@ 0x22
 80185e6:	e7de      	b.n	80185a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80185e8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80185ea:	2b0a      	cmp	r3, #10
 80185ec:	d00f      	beq.n	801860e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80185ee:	4620      	mov	r0, r4
 80185f0:	f7ff fbe3 	bl	8017dba <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80185f4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80185f6:	1c5a      	adds	r2, r3, #1
 80185f8:	8722      	strh	r2, [r4, #56]	@ 0x38
 80185fa:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80185fc:	4413      	add	r3, r2
 80185fe:	b29b      	uxth	r3, r3
 8018600:	2b09      	cmp	r3, #9
 8018602:	bf88      	it	hi
 8018604:	3b0a      	subhi	r3, #10
 8018606:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801860a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801860c:	e7ec      	b.n	80185e8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801860e:	bd10      	pop	{r4, pc}

08018610 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8018610:	b538      	push	{r3, r4, r5, lr}
 8018612:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018614:	4604      	mov	r4, r0
 8018616:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801861a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801861c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801861e:	3a01      	subs	r2, #1
 8018620:	8702      	strh	r2, [r0, #56]	@ 0x38
 8018622:	1c5a      	adds	r2, r3, #1
 8018624:	b292      	uxth	r2, r2
 8018626:	2a09      	cmp	r2, #9
 8018628:	bf8a      	itet	hi
 801862a:	3b09      	subhi	r3, #9
 801862c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801862e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8018630:	f7ff ffb7 	bl	80185a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018634:	8c23      	ldrh	r3, [r4, #32]
 8018636:	2b01      	cmp	r3, #1
 8018638:	bf9c      	itt	ls
 801863a:	3301      	addls	r3, #1
 801863c:	8423      	strhls	r3, [r4, #32]
 801863e:	8be3      	ldrh	r3, [r4, #30]
 8018640:	b90b      	cbnz	r3, 8018646 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018642:	2302      	movs	r3, #2
 8018644:	83e3      	strh	r3, [r4, #30]
 8018646:	8be3      	ldrh	r3, [r4, #30]
 8018648:	4628      	mov	r0, r5
 801864a:	3b01      	subs	r3, #1
 801864c:	b29b      	uxth	r3, r3
 801864e:	83e3      	strh	r3, [r4, #30]
 8018650:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018654:	8365      	strh	r5, [r4, #26]
 8018656:	bd38      	pop	{r3, r4, r5, pc}

08018658 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018658:	428a      	cmp	r2, r1
 801865a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801865e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8018660:	d932      	bls.n	80186c8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8018662:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8018664:	1a54      	subs	r4, r2, r1
 8018666:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801866a:	19ee      	adds	r6, r5, r7
 801866c:	fa1f fe84 	uxth.w	lr, r4
 8018670:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8018674:	3e01      	subs	r6, #1
 8018676:	b2b4      	uxth	r4, r6
 8018678:	eba4 090e 	sub.w	r9, r4, lr
 801867c:	fa1f f989 	uxth.w	r9, r9
 8018680:	2c09      	cmp	r4, #9
 8018682:	4626      	mov	r6, r4
 8018684:	bf88      	it	hi
 8018686:	f1a4 060a 	subhi.w	r6, r4, #10
 801868a:	f1bc 0f00 	cmp.w	ip, #0
 801868e:	f104 34ff 	add.w	r4, r4, #4294967295
 8018692:	bf08      	it	eq
 8018694:	f04f 0c02 	moveq.w	ip, #2
 8018698:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801869c:	b2a4      	uxth	r4, r4
 801869e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80186a2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80186a6:	454c      	cmp	r4, r9
 80186a8:	fa1f fc8c 	uxth.w	ip, ip
 80186ac:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80186b0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80186b4:	d1e4      	bne.n	8018680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80186b6:	eba5 050e 	sub.w	r5, r5, lr
 80186ba:	eb0e 0408 	add.w	r4, lr, r8
 80186be:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80186c2:	8705      	strh	r5, [r0, #56]	@ 0x38
 80186c4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80186c8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80186ca:	250a      	movs	r5, #10
 80186cc:	1a64      	subs	r4, r4, r1
 80186ce:	4439      	add	r1, r7
 80186d0:	b289      	uxth	r1, r1
 80186d2:	8704      	strh	r4, [r0, #56]	@ 0x38
 80186d4:	2909      	cmp	r1, #9
 80186d6:	bf88      	it	hi
 80186d8:	390a      	subhi	r1, #10
 80186da:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80186dc:	b18a      	cbz	r2, 8018702 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80186de:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80186e0:	3a01      	subs	r2, #1
 80186e2:	3101      	adds	r1, #1
 80186e4:	b292      	uxth	r2, r2
 80186e6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80186ea:	8701      	strh	r1, [r0, #56]	@ 0x38
 80186ec:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80186ee:	b901      	cbnz	r1, 80186f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80186f0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80186f2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80186f4:	3901      	subs	r1, #1
 80186f6:	b289      	uxth	r1, r1
 80186f8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80186fa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80186fe:	844c      	strh	r4, [r1, #34]	@ 0x22
 8018700:	e7ec      	b.n	80186dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8018702:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018706:	f7ff bf4c 	b.w	80185a2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801870a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801870a:	b570      	push	{r4, r5, r6, lr}
 801870c:	2500      	movs	r5, #0
 801870e:	4295      	cmp	r5, r2
 8018710:	d011      	beq.n	8018736 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018712:	8bc4      	ldrh	r4, [r0, #30]
 8018714:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018718:	4414      	add	r4, r2
 801871a:	3c01      	subs	r4, #1
 801871c:	1b64      	subs	r4, r4, r5
 801871e:	b2a4      	uxth	r4, r4
 8018720:	2c01      	cmp	r4, #1
 8018722:	bf88      	it	hi
 8018724:	3c02      	subhi	r4, #2
 8018726:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801872a:	8b64      	ldrh	r4, [r4, #26]
 801872c:	42b4      	cmp	r4, r6
 801872e:	d117      	bne.n	8018760 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018730:	3501      	adds	r5, #1
 8018732:	b2ad      	uxth	r5, r5
 8018734:	e7eb      	b.n	801870e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018736:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801873a:	2400      	movs	r4, #0
 801873c:	4413      	add	r3, r2
 801873e:	b2a2      	uxth	r2, r4
 8018740:	429a      	cmp	r2, r3
 8018742:	da0f      	bge.n	8018764 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018744:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8018746:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801874a:	3401      	adds	r4, #1
 801874c:	4432      	add	r2, r6
 801874e:	b292      	uxth	r2, r2
 8018750:	2a09      	cmp	r2, #9
 8018752:	bf88      	it	hi
 8018754:	3a0a      	subhi	r2, #10
 8018756:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801875a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801875c:	42aa      	cmp	r2, r5
 801875e:	d0ee      	beq.n	801873e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018760:	2000      	movs	r0, #0
 8018762:	bd70      	pop	{r4, r5, r6, pc}
 8018764:	2001      	movs	r0, #1
 8018766:	e7fc      	b.n	8018762 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018768 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876c:	4605      	mov	r5, r0
 801876e:	4616      	mov	r6, r2
 8018770:	1c8c      	adds	r4, r1, #2
 8018772:	8809      	ldrh	r1, [r1, #0]
 8018774:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018778:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801877c:	42b3      	cmp	r3, r6
 801877e:	d124      	bne.n	80187ca <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018780:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018784:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018788:	f001 070f 	and.w	r7, r1, #15
 801878c:	4652      	mov	r2, sl
 801878e:	f8cd 8000 	str.w	r8, [sp]
 8018792:	464b      	mov	r3, r9
 8018794:	4621      	mov	r1, r4
 8018796:	4628      	mov	r0, r5
 8018798:	f7ff ffb7 	bl	801870a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801879c:	4683      	mov	fp, r0
 801879e:	b168      	cbz	r0, 80187bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80187a0:	eb0a 0109 	add.w	r1, sl, r9
 80187a4:	463a      	mov	r2, r7
 80187a6:	4628      	mov	r0, r5
 80187a8:	4441      	add	r1, r8
 80187aa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80187ae:	4649      	mov	r1, r9
 80187b0:	f7ff ff52 	bl	8018658 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80187b4:	4658      	mov	r0, fp
 80187b6:	b003      	add	sp, #12
 80187b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187bc:	eb07 010a 	add.w	r1, r7, sl
 80187c0:	4449      	add	r1, r9
 80187c2:	4441      	add	r1, r8
 80187c4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80187c8:	e7d2      	b.n	8018770 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80187ca:	f04f 0b00 	mov.w	fp, #0
 80187ce:	e7f1      	b.n	80187b4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080187d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80187d0:	b570      	push	{r4, r5, r6, lr}
 80187d2:	8810      	ldrh	r0, [r2, #0]
 80187d4:	4298      	cmp	r0, r3
 80187d6:	d817      	bhi.n	8018808 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80187d8:	1e48      	subs	r0, r1, #1
 80187da:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80187de:	4298      	cmp	r0, r3
 80187e0:	d312      	bcc.n	8018808 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80187e2:	2400      	movs	r4, #0
 80187e4:	428c      	cmp	r4, r1
 80187e6:	d20f      	bcs.n	8018808 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80187e8:	1860      	adds	r0, r4, r1
 80187ea:	1040      	asrs	r0, r0, #1
 80187ec:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80187f0:	0085      	lsls	r5, r0, #2
 80187f2:	42b3      	cmp	r3, r6
 80187f4:	d902      	bls.n	80187fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80187f6:	3001      	adds	r0, #1
 80187f8:	b284      	uxth	r4, r0
 80187fa:	e7f3      	b.n	80187e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80187fc:	d201      	bcs.n	8018802 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80187fe:	b281      	uxth	r1, r0
 8018800:	e7f0      	b.n	80187e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018802:	442a      	add	r2, r5
 8018804:	8850      	ldrh	r0, [r2, #2]
 8018806:	bd70      	pop	{r4, r5, r6, pc}
 8018808:	2000      	movs	r0, #0
 801880a:	e7fc      	b.n	8018806 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801880c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018810:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8018812:	4604      	mov	r4, r0
 8018814:	260b      	movs	r6, #11
 8018816:	886f      	ldrh	r7, [r5, #2]
 8018818:	087f      	lsrs	r7, r7, #1
 801881a:	3e01      	subs	r6, #1
 801881c:	d013      	beq.n	8018846 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801881e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8018820:	462a      	mov	r2, r5
 8018822:	4639      	mov	r1, r7
 8018824:	4620      	mov	r0, r4
 8018826:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801882a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801882e:	4643      	mov	r3, r8
 8018830:	f7ff ffce 	bl	80187d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018834:	b138      	cbz	r0, 8018846 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018836:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801883a:	4642      	mov	r2, r8
 801883c:	4620      	mov	r0, r4
 801883e:	f7ff ff93 	bl	8018768 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018842:	2800      	cmp	r0, #0
 8018844:	d1e9      	bne.n	801881a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801884c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801884c:	b570      	push	{r4, r5, r6, lr}
 801884e:	694a      	ldr	r2, [r1, #20]
 8018850:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8018852:	684b      	ldr	r3, [r1, #4]
 8018854:	1b54      	subs	r4, r2, r5
 8018856:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8018858:	f000 8106 	beq.w	8018a68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801885c:	1b9b      	subs	r3, r3, r6
 801885e:	d003      	beq.n	8018868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018860:	4363      	muls	r3, r4
 8018862:	2210      	movs	r2, #16
 8018864:	fb93 f3f2 	sdiv	r3, r3, r2
 8018868:	680c      	ldr	r4, [r1, #0]
 801886a:	698a      	ldr	r2, [r1, #24]
 801886c:	1b65      	subs	r5, r4, r5
 801886e:	f000 80fd 	beq.w	8018a6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8018872:	1b92      	subs	r2, r2, r6
 8018874:	d003      	beq.n	801887e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018876:	436a      	muls	r2, r5
 8018878:	2410      	movs	r4, #16
 801887a:	fb92 f2f4 	sdiv	r2, r2, r4
 801887e:	1a9b      	subs	r3, r3, r2
 8018880:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8018aa8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018884:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018888:	460a      	mov	r2, r1
 801888a:	ee07 3a90 	vmov	s15, r3
 801888e:	f100 040c 	add.w	r4, r0, #12
 8018892:	4603      	mov	r3, r0
 8018894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018898:	ee67 7a84 	vmul.f32	s15, s15, s8
 801889c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80188a0:	eeb1 6a43 	vneg.f32	s12, s6
 80188a4:	edd2 7a02 	vldr	s15, [r2, #8]
 80188a8:	3214      	adds	r2, #20
 80188aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80188ae:	ece3 6a01 	vstmia	r3!, {s13}
 80188b2:	429c      	cmp	r4, r3
 80188b4:	ed52 7a02 	vldr	s15, [r2, #-8]
 80188b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80188bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80188c0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80188c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80188c8:	edc3 7a05 	vstr	s15, [r3, #20]
 80188cc:	d1ea      	bne.n	80188a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80188ce:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80188d0:	698b      	ldr	r3, [r1, #24]
 80188d2:	edd0 4a02 	vldr	s9, [r0, #8]
 80188d6:	1a9b      	subs	r3, r3, r2
 80188d8:	edd0 3a00 	vldr	s7, [r0]
 80188dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80188e0:	ee07 3a90 	vmov	s15, r3
 80188e4:	684b      	ldr	r3, [r1, #4]
 80188e6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80188ea:	ed90 5a05 	vldr	s10, [r0, #20]
 80188ee:	1a9b      	subs	r3, r3, r2
 80188f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188f4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80188f8:	ed90 2a03 	vldr	s4, [r0, #12]
 80188fc:	ee07 3a10 	vmov	s14, r3
 8018900:	edd0 5a04 	vldr	s11, [r0, #16]
 8018904:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018908:	ed90 1a07 	vldr	s2, [r0, #28]
 801890c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018910:	edd0 2a06 	vldr	s5, [r0, #24]
 8018914:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018918:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801891c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018920:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018924:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018928:	ee67 7a83 	vmul.f32	s15, s15, s6
 801892c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8018930:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018932:	694a      	ldr	r2, [r1, #20]
 8018934:	1b13      	subs	r3, r2, r4
 8018936:	ee07 3a10 	vmov	s14, r3
 801893a:	680b      	ldr	r3, [r1, #0]
 801893c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018940:	1b1b      	subs	r3, r3, r4
 8018942:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018946:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801894a:	ee07 3a10 	vmov	s14, r3
 801894e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018952:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018956:	eee6 4a87 	vfma.f32	s9, s13, s14
 801895a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801895e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8018962:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018964:	698b      	ldr	r3, [r1, #24]
 8018966:	1a9b      	subs	r3, r3, r2
 8018968:	ee06 3a90 	vmov	s13, r3
 801896c:	684b      	ldr	r3, [r1, #4]
 801896e:	1a9b      	subs	r3, r3, r2
 8018970:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018974:	ee07 3a10 	vmov	s14, r3
 8018978:	ee66 6a84 	vmul.f32	s13, s13, s8
 801897c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018980:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018984:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018988:	eee5 6a87 	vfma.f32	s13, s11, s14
 801898c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018990:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8018994:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018996:	694a      	ldr	r2, [r1, #20]
 8018998:	1b13      	subs	r3, r2, r4
 801899a:	ee07 3a10 	vmov	s14, r3
 801899e:	680b      	ldr	r3, [r1, #0]
 80189a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189a4:	1b1b      	subs	r3, r3, r4
 80189a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80189aa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80189ae:	ee07 3a10 	vmov	s14, r3
 80189b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80189ba:	eea5 5a87 	vfma.f32	s10, s11, s14
 80189be:	edd0 5a08 	vldr	s11, [r0, #32]
 80189c2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80189c6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80189ca:	ee25 5a06 	vmul.f32	s10, s10, s12
 80189ce:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80189d2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80189d4:	698b      	ldr	r3, [r1, #24]
 80189d6:	1a9b      	subs	r3, r3, r2
 80189d8:	ee07 3a10 	vmov	s14, r3
 80189dc:	684b      	ldr	r3, [r1, #4]
 80189de:	1a9b      	subs	r3, r3, r2
 80189e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189e4:	ee01 3a90 	vmov	s3, r3
 80189e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80189ec:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80189f0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80189f4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80189f8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80189fc:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018a00:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018a04:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8018a06:	694a      	ldr	r2, [r1, #20]
 8018a08:	1b13      	subs	r3, r2, r4
 8018a0a:	ee03 3a10 	vmov	s6, r3
 8018a0e:	680b      	ldr	r3, [r1, #0]
 8018a10:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018a14:	1b1b      	subs	r3, r3, r4
 8018a16:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018a1a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018a1e:	ee03 3a10 	vmov	s6, r3
 8018a22:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018a26:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018a2a:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018a2e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018a32:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018a36:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8018a3a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018a3e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a46:	dd13      	ble.n	8018a70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018a48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018a4c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018a50:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018a52:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a5e:	dd15      	ble.n	8018a8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018a60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018a64:	6403      	str	r3, [r0, #64]	@ 0x40
 8018a66:	bd70      	pop	{r4, r5, r6, pc}
 8018a68:	4623      	mov	r3, r4
 8018a6a:	e6fd      	b.n	8018868 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018a6c:	462a      	mov	r2, r5
 8018a6e:	e706      	b.n	801887e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018a70:	d502      	bpl.n	8018a78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018a72:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018a76:	e7e9      	b.n	8018a4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018a78:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018a7c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018a80:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a88:	dade      	bge.n	8018a48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018a8a:	e7f2      	b.n	8018a72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018a8c:	d502      	bpl.n	8018a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018a8e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8018a92:	e7e7      	b.n	8018a64 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018a94:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018a98:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018a9c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aa4:	dadc      	bge.n	8018a60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018aa6:	e7f2      	b.n	8018a8e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018aa8:	3d800000 	.word	0x3d800000

08018aac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ab0:	2714      	movs	r7, #20
 8018ab2:	435f      	muls	r7, r3
 8018ab4:	eb02 0c07 	add.w	ip, r2, r7
 8018ab8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018abc:	f115 0e0f 	adds.w	lr, r5, #15
 8018ac0:	f100 80a2 	bmi.w	8018c08 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018ac4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018ac8:	9c08      	ldr	r4, [sp, #32]
 8018aca:	2614      	movs	r6, #20
 8018acc:	f8c0 e014 	str.w	lr, [r0, #20]
 8018ad0:	4366      	muls	r6, r4
 8018ad2:	eb02 0806 	add.w	r8, r2, r6
 8018ad6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018ada:	f115 040f 	adds.w	r4, r5, #15
 8018ade:	f100 809f 	bmi.w	8018c20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018ae2:	1124      	asrs	r4, r4, #4
 8018ae4:	eba4 040e 	sub.w	r4, r4, lr
 8018ae8:	6184      	str	r4, [r0, #24]
 8018aea:	2c00      	cmp	r4, #0
 8018aec:	f000 808a 	beq.w	8018c04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018af0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018af4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018af8:	5995      	ldr	r5, [r2, r6]
 8018afa:	eba4 0809 	sub.w	r8, r4, r9
 8018afe:	59d4      	ldr	r4, [r2, r7]
 8018b00:	eba5 0a04 	sub.w	sl, r5, r4
 8018b04:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018b08:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018b0c:	fb0e fe05 	mul.w	lr, lr, r5
 8018b10:	fb0a ee19 	mls	lr, sl, r9, lr
 8018b14:	fb08 e404 	mla	r4, r8, r4, lr
 8018b18:	3c01      	subs	r4, #1
 8018b1a:	19a4      	adds	r4, r4, r6
 8018b1c:	f100 808c 	bmi.w	8018c38 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018b20:	fb94 fef6 	sdiv	lr, r4, r6
 8018b24:	fb06 441e 	mls	r4, r6, lr, r4
 8018b28:	f8c0 e000 	str.w	lr, [r0]
 8018b2c:	6104      	str	r4, [r0, #16]
 8018b2e:	2d00      	cmp	r5, #0
 8018b30:	f2c0 8095 	blt.w	8018c5e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018b34:	fb95 f4f6 	sdiv	r4, r5, r6
 8018b38:	fb06 5514 	mls	r5, r6, r4, r5
 8018b3c:	6044      	str	r4, [r0, #4]
 8018b3e:	6085      	str	r5, [r0, #8]
 8018b40:	60c6      	str	r6, [r0, #12]
 8018b42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018b46:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018b4a:	6945      	ldr	r5, [r0, #20]
 8018b4c:	59d2      	ldr	r2, [r2, r7]
 8018b4e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018b52:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8018c80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018b56:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8018b5a:	ee07 4a10 	vmov	s14, r4
 8018b5e:	6804      	ldr	r4, [r0, #0]
 8018b60:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018b64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b68:	ee07 2a90 	vmov	s15, r2
 8018b6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018b78:	edd3 6a00 	vldr	s13, [r3]
 8018b7c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018b80:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8018b84:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018b88:	edc0 6a07 	vstr	s13, [r0, #28]
 8018b8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8018b90:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8018b94:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018b98:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8018b9c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018ba0:	ed80 6a08 	vstr	s12, [r0, #32]
 8018ba4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8018ba6:	6242      	str	r2, [r0, #36]	@ 0x24
 8018ba8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8018bac:	ed93 6a03 	vldr	s12, [r3, #12]
 8018bb0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018bb4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8018bb8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018bbc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8018bc0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8018bc4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8018bc8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018bcc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8018bd0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8018bd2:	6302      	str	r2, [r0, #48]	@ 0x30
 8018bd4:	ed93 6a06 	vldr	s12, [r3, #24]
 8018bd8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8018bdc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018be0:	eeb0 7a46 	vmov.f32	s14, s12
 8018be4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8018be8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018bec:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8018bf0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8018bf4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8018bf8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018bfc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8018c00:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8018c02:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8018c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c08:	2410      	movs	r4, #16
 8018c0a:	f1c5 0501 	rsb	r5, r5, #1
 8018c0e:	fb9e fef4 	sdiv	lr, lr, r4
 8018c12:	f015 050f 	ands.w	r5, r5, #15
 8018c16:	bf18      	it	ne
 8018c18:	2501      	movne	r5, #1
 8018c1a:	ebae 0e05 	sub.w	lr, lr, r5
 8018c1e:	e753      	b.n	8018ac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018c20:	f04f 0910 	mov.w	r9, #16
 8018c24:	f1c5 0501 	rsb	r5, r5, #1
 8018c28:	fb94 f4f9 	sdiv	r4, r4, r9
 8018c2c:	f015 050f 	ands.w	r5, r5, #15
 8018c30:	bf18      	it	ne
 8018c32:	2501      	movne	r5, #1
 8018c34:	1b64      	subs	r4, r4, r5
 8018c36:	e755      	b.n	8018ae4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018c38:	4264      	negs	r4, r4
 8018c3a:	fb94 fef6 	sdiv	lr, r4, r6
 8018c3e:	f1ce 0800 	rsb	r8, lr, #0
 8018c42:	fb06 441e 	mls	r4, r6, lr, r4
 8018c46:	f8c0 8000 	str.w	r8, [r0]
 8018c4a:	6104      	str	r4, [r0, #16]
 8018c4c:	2c00      	cmp	r4, #0
 8018c4e:	f43f af6e 	beq.w	8018b2e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018c52:	ea6f 0e0e 	mvn.w	lr, lr
 8018c56:	1b34      	subs	r4, r6, r4
 8018c58:	f8c0 e000 	str.w	lr, [r0]
 8018c5c:	e766      	b.n	8018b2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018c5e:	426d      	negs	r5, r5
 8018c60:	fb95 f4f6 	sdiv	r4, r5, r6
 8018c64:	f1c4 0e00 	rsb	lr, r4, #0
 8018c68:	fb06 5514 	mls	r5, r6, r4, r5
 8018c6c:	f8c0 e004 	str.w	lr, [r0, #4]
 8018c70:	6085      	str	r5, [r0, #8]
 8018c72:	2d00      	cmp	r5, #0
 8018c74:	f43f af64 	beq.w	8018b40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018c78:	43e4      	mvns	r4, r4
 8018c7a:	1b75      	subs	r5, r6, r5
 8018c7c:	6044      	str	r4, [r0, #4]
 8018c7e:	e75e      	b.n	8018b3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018c80:	3d800000 	.word	0x3d800000

08018c84 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018c84:	4602      	mov	r2, r0
 8018c86:	b148      	cbz	r0, 8018c9c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018c88:	2300      	movs	r3, #0
 8018c8a:	b298      	uxth	r0, r3
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018c92:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018c96:	2900      	cmp	r1, #0
 8018c98:	d1f7      	bne.n	8018c8a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018c9a:	4770      	bx	lr
 8018c9c:	4770      	bx	lr

08018c9e <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 8018c9e:	b530      	push	{r4, r5, lr}
 8018ca0:	4604      	mov	r4, r0
 8018ca2:	b161      	cbz	r1, 8018cbe <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 8018ca4:	b150      	cbz	r0, 8018cbc <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	b298      	uxth	r0, r3
 8018caa:	4290      	cmp	r0, r2
 8018cac:	d206      	bcs.n	8018cbc <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 8018cae:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 8018cb2:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018cb6:	3301      	adds	r3, #1
 8018cb8:	2d00      	cmp	r5, #0
 8018cba:	d1f5      	bne.n	8018ca8 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 8018cbc:	bd30      	pop	{r4, r5, pc}
 8018cbe:	4608      	mov	r0, r1
 8018cc0:	e7fc      	b.n	8018cbc <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

08018cc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018cc2:	b530      	push	{r4, r5, lr}
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	b159      	cbz	r1, 8018ce0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018cc8:	b148      	cbz	r0, 8018cde <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018cca:	2300      	movs	r3, #0
 8018ccc:	b298      	uxth	r0, r3
 8018cce:	4282      	cmp	r2, r0
 8018cd0:	d905      	bls.n	8018cde <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018cd2:	5ccd      	ldrb	r5, [r1, r3]
 8018cd4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018cd8:	3301      	adds	r3, #1
 8018cda:	2d00      	cmp	r5, #0
 8018cdc:	d1f6      	bne.n	8018ccc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018cde:	bd30      	pop	{r4, r5, pc}
 8018ce0:	4608      	mov	r0, r1
 8018ce2:	e7fc      	b.n	8018cde <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018ce4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8018ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ce6:	b08b      	sub	sp, #44	@ 0x2c
 8018ce8:	468c      	mov	ip, r1
 8018cea:	4604      	mov	r4, r0
 8018cec:	2100      	movs	r1, #0
 8018cee:	261f      	movs	r6, #31
 8018cf0:	af01      	add	r7, sp, #4
 8018cf2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018cf6:	1e71      	subs	r1, r6, #1
 8018cf8:	fb94 fef3 	sdiv	lr, r4, r3
 8018cfc:	fb03 441e 	mls	r4, r3, lr, r4
 8018d00:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018d04:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018d08:	b2ec      	uxtb	r4, r5
 8018d0a:	2d09      	cmp	r5, #9
 8018d0c:	bfd4      	ite	le
 8018d0e:	3430      	addle	r4, #48	@ 0x30
 8018d10:	3457      	addgt	r4, #87	@ 0x57
 8018d12:	b2e4      	uxtb	r4, r4
 8018d14:	55bc      	strb	r4, [r7, r6]
 8018d16:	4674      	mov	r4, lr
 8018d18:	b974      	cbnz	r4, 8018d38 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	da05      	bge.n	8018d2a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 8018d1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8018d20:	4419      	add	r1, r3
 8018d22:	232d      	movs	r3, #45	@ 0x2d
 8018d24:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018d28:	1eb1      	subs	r1, r6, #2
 8018d2a:	3101      	adds	r1, #1
 8018d2c:	4660      	mov	r0, ip
 8018d2e:	4439      	add	r1, r7
 8018d30:	f7ff ffc7 	bl	8018cc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018d34:	b00b      	add	sp, #44	@ 0x2c
 8018d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d38:	460e      	mov	r6, r1
 8018d3a:	e7dc      	b.n	8018cf6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

08018d3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8018d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d3e:	468c      	mov	ip, r1
 8018d40:	b08b      	sub	sp, #44	@ 0x2c
 8018d42:	2100      	movs	r1, #0
 8018d44:	ae01      	add	r6, sp, #4
 8018d46:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8018d4a:	211f      	movs	r1, #31
 8018d4c:	fbb0 f7f3 	udiv	r7, r0, r3
 8018d50:	fb03 0517 	mls	r5, r3, r7, r0
 8018d54:	4638      	mov	r0, r7
 8018d56:	b2ec      	uxtb	r4, r5
 8018d58:	2d09      	cmp	r5, #9
 8018d5a:	bfd4      	ite	le
 8018d5c:	3430      	addle	r4, #48	@ 0x30
 8018d5e:	3457      	addgt	r4, #87	@ 0x57
 8018d60:	b2e4      	uxtb	r4, r4
 8018d62:	558c      	strb	r4, [r1, r6]
 8018d64:	1e4c      	subs	r4, r1, #1
 8018d66:	b92f      	cbnz	r7, 8018d74 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8018d68:	4431      	add	r1, r6
 8018d6a:	4660      	mov	r0, ip
 8018d6c:	f7ff ffa9 	bl	8018cc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018d70:	b00b      	add	sp, #44	@ 0x2c
 8018d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d74:	4621      	mov	r1, r4
 8018d76:	e7e9      	b.n	8018d4c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08018d78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d7c:	b085      	sub	sp, #20
 8018d7e:	4691      	mov	r9, r2
 8018d80:	6802      	ldr	r2, [r0, #0]
 8018d82:	4688      	mov	r8, r1
 8018d84:	461c      	mov	r4, r3
 8018d86:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8018d8a:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8018d8e:	4683      	mov	fp, r0
 8018d90:	4610      	mov	r0, r2
 8018d92:	9103      	str	r1, [sp, #12]
 8018d94:	9302      	str	r3, [sp, #8]
 8018d96:	9201      	str	r2, [sp, #4]
 8018d98:	f7ff ff74 	bl	8018c84 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018d9c:	f1b8 0f00 	cmp.w	r8, #0
 8018da0:	bf0c      	ite	eq
 8018da2:	4684      	moveq	ip, r0
 8018da4:	f100 0c01 	addne.w	ip, r0, #1
 8018da8:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8018dac:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8018db0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018db2:	fa1f fc8c 	uxth.w	ip, ip
 8018db6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8018db8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8018dbc:	9903      	ldr	r1, [sp, #12]
 8018dbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018dc2:	d041      	beq.n	8018e48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018dc4:	d834      	bhi.n	8018e30 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018dc6:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8018dca:	d059      	beq.n	8018e80 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018dcc:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8018dd0:	d03a      	beq.n	8018e48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018dd2:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8018dd6:	d034      	beq.n	8018e42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018dd8:	2400      	movs	r4, #0
 8018dda:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8018dde:	3a01      	subs	r2, #1
 8018de0:	b169      	cbz	r1, 8018dfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018de2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018de4:	458c      	cmp	ip, r1
 8018de6:	da09      	bge.n	8018dfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018de8:	eba1 010c 	sub.w	r1, r1, ip
 8018dec:	b289      	uxth	r1, r1
 8018dee:	b933      	cbnz	r3, 8018dfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018df0:	2e00      	cmp	r6, #0
 8018df2:	d051      	beq.n	8018e98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018df4:	2800      	cmp	r0, #0
 8018df6:	d04f      	beq.n	8018e98 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8018df8:	440c      	add	r4, r1
 8018dfa:	b2a4      	uxth	r4, r4
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	682b      	ldr	r3, [r5, #0]
 8018e00:	4293      	cmp	r3, r2
 8018e02:	da07      	bge.n	8018e14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018e04:	f1b8 0f00 	cmp.w	r8, #0
 8018e08:	d004      	beq.n	8018e14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8018e0a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8018e0e:	682b      	ldr	r3, [r5, #0]
 8018e10:	3301      	adds	r3, #1
 8018e12:	602b      	str	r3, [r5, #0]
 8018e14:	2730      	movs	r7, #48	@ 0x30
 8018e16:	2c00      	cmp	r4, #0
 8018e18:	d04e      	beq.n	8018eb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018e1a:	682e      	ldr	r6, [r5, #0]
 8018e1c:	3c01      	subs	r4, #1
 8018e1e:	42b2      	cmp	r2, r6
 8018e20:	b2a4      	uxth	r4, r4
 8018e22:	dd49      	ble.n	8018eb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018e24:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018e28:	682b      	ldr	r3, [r5, #0]
 8018e2a:	3301      	adds	r3, #1
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	e7f2      	b.n	8018e16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8018e30:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8018e34:	d01d      	beq.n	8018e72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8018e36:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 8018e3a:	d002      	beq.n	8018e42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018e3c:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8018e40:	e7c9      	b.n	8018dd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8018e42:	4684      	mov	ip, r0
 8018e44:	f04f 0800 	mov.w	r8, #0
 8018e48:	2c00      	cmp	r4, #0
 8018e4a:	d0c6      	beq.n	8018dda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e4c:	b947      	cbnz	r7, 8018e60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018e4e:	2801      	cmp	r0, #1
 8018e50:	d106      	bne.n	8018e60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8018e52:	8814      	ldrh	r4, [r2, #0]
 8018e54:	2c30      	cmp	r4, #48	@ 0x30
 8018e56:	bf02      	ittt	eq
 8018e58:	3202      	addeq	r2, #2
 8018e5a:	4638      	moveq	r0, r7
 8018e5c:	f8cb 2000 	streq.w	r2, [fp]
 8018e60:	45bc      	cmp	ip, r7
 8018e62:	da14      	bge.n	8018e8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8018e64:	b2bf      	uxth	r7, r7
 8018e66:	eba7 040c 	sub.w	r4, r7, ip
 8018e6a:	46bc      	mov	ip, r7
 8018e6c:	b2a4      	uxth	r4, r4
 8018e6e:	2600      	movs	r6, #0
 8018e70:	e7b3      	b.n	8018dda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e72:	4684      	mov	ip, r0
 8018e74:	b16c      	cbz	r4, 8018e92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8018e76:	42b8      	cmp	r0, r7
 8018e78:	dd00      	ble.n	8018e7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8018e7a:	b2b8      	uxth	r0, r7
 8018e7c:	2400      	movs	r4, #0
 8018e7e:	e003      	b.n	8018e88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8018e80:	f04f 0c01 	mov.w	ip, #1
 8018e84:	2400      	movs	r4, #0
 8018e86:	4660      	mov	r0, ip
 8018e88:	4626      	mov	r6, r4
 8018e8a:	46a0      	mov	r8, r4
 8018e8c:	e7a5      	b.n	8018dda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e8e:	2400      	movs	r4, #0
 8018e90:	e7ed      	b.n	8018e6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8018e92:	4626      	mov	r6, r4
 8018e94:	46a0      	mov	r8, r4
 8018e96:	e7a0      	b.n	8018dda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8018e98:	2900      	cmp	r1, #0
 8018e9a:	d0b0      	beq.n	8018dfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018e9c:	2720      	movs	r7, #32
 8018e9e:	682e      	ldr	r6, [r5, #0]
 8018ea0:	2900      	cmp	r1, #0
 8018ea2:	d0ac      	beq.n	8018dfe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018ea4:	3901      	subs	r1, #1
 8018ea6:	4296      	cmp	r6, r2
 8018ea8:	b289      	uxth	r1, r1
 8018eaa:	daa7      	bge.n	8018dfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018eac:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8018eb0:	682b      	ldr	r3, [r5, #0]
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	602b      	str	r3, [r5, #0]
 8018eb6:	e7f2      	b.n	8018e9e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8018eb8:	b188      	cbz	r0, 8018ede <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018eba:	682b      	ldr	r3, [r5, #0]
 8018ebc:	3801      	subs	r0, #1
 8018ebe:	429a      	cmp	r2, r3
 8018ec0:	b280      	uxth	r0, r0
 8018ec2:	dd0c      	ble.n	8018ede <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8018ec4:	f8db 3000 	ldr.w	r3, [fp]
 8018ec8:	1c9c      	adds	r4, r3, #2
 8018eca:	f8cb 4000 	str.w	r4, [fp]
 8018ece:	881c      	ldrh	r4, [r3, #0]
 8018ed0:	682b      	ldr	r3, [r5, #0]
 8018ed2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8018ed6:	682b      	ldr	r3, [r5, #0]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	602b      	str	r3, [r5, #0]
 8018edc:	e7ec      	b.n	8018eb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8018ede:	2620      	movs	r6, #32
 8018ee0:	b151      	cbz	r1, 8018ef8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018ee2:	6828      	ldr	r0, [r5, #0]
 8018ee4:	3901      	subs	r1, #1
 8018ee6:	4282      	cmp	r2, r0
 8018ee8:	b289      	uxth	r1, r1
 8018eea:	dd05      	ble.n	8018ef8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8018eec:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8018ef0:	682b      	ldr	r3, [r5, #0]
 8018ef2:	3301      	adds	r3, #1
 8018ef4:	602b      	str	r3, [r5, #0]
 8018ef6:	e7f3      	b.n	8018ee0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8018ef8:	b005      	add	sp, #20
 8018efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018efe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8018efe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f02:	2400      	movs	r4, #0
 8018f04:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8018f08:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8018f0c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8018f10:	8014      	strh	r4, [r2, #0]
 8018f12:	701c      	strb	r4, [r3, #0]
 8018f14:	f888 4000 	strb.w	r4, [r8]
 8018f18:	f88c 4000 	strb.w	r4, [ip]
 8018f1c:	f88e 4000 	strb.w	r4, [lr]
 8018f20:	703c      	strb	r4, [r7, #0]
 8018f22:	6804      	ldr	r4, [r0, #0]
 8018f24:	b1a4      	cbz	r4, 8018f50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8018f26:	8824      	ldrh	r4, [r4, #0]
 8018f28:	f04f 0901 	mov.w	r9, #1
 8018f2c:	b314      	cbz	r4, 8018f74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018f2e:	2c2b      	cmp	r4, #43	@ 0x2b
 8018f30:	d001      	beq.n	8018f36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8018f32:	2c20      	cmp	r4, #32
 8018f34:	d110      	bne.n	8018f58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8018f36:	8014      	strh	r4, [r2, #0]
 8018f38:	6804      	ldr	r4, [r0, #0]
 8018f3a:	b10c      	cbz	r4, 8018f40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8018f3c:	3402      	adds	r4, #2
 8018f3e:	6004      	str	r4, [r0, #0]
 8018f40:	680c      	ldr	r4, [r1, #0]
 8018f42:	b10c      	cbz	r4, 8018f48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8018f44:	3401      	adds	r4, #1
 8018f46:	600c      	str	r4, [r1, #0]
 8018f48:	6804      	ldr	r4, [r0, #0]
 8018f4a:	b17c      	cbz	r4, 8018f6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8018f4c:	8824      	ldrh	r4, [r4, #0]
 8018f4e:	e7ed      	b.n	8018f2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018f50:	680c      	ldr	r4, [r1, #0]
 8018f52:	b17c      	cbz	r4, 8018f74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018f54:	7824      	ldrb	r4, [r4, #0]
 8018f56:	e7e7      	b.n	8018f28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8018f58:	2c2d      	cmp	r4, #45	@ 0x2d
 8018f5a:	d102      	bne.n	8018f62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8018f5c:	f883 9000 	strb.w	r9, [r3]
 8018f60:	e7ea      	b.n	8018f38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018f62:	2c23      	cmp	r4, #35	@ 0x23
 8018f64:	d107      	bne.n	8018f76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8018f66:	f888 9000 	strb.w	r9, [r8]
 8018f6a:	e7e5      	b.n	8018f38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8018f6c:	680c      	ldr	r4, [r1, #0]
 8018f6e:	b10c      	cbz	r4, 8018f74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8018f70:	7824      	ldrb	r4, [r4, #0]
 8018f72:	e7db      	b.n	8018f2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8018f74:	2400      	movs	r4, #0
 8018f76:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8018f7a:	2b09      	cmp	r3, #9
 8018f7c:	d901      	bls.n	8018f82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8018f7e:	2c2a      	cmp	r4, #42	@ 0x2a
 8018f80:	d122      	bne.n	8018fc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8018f82:	2301      	movs	r3, #1
 8018f84:	2c30      	cmp	r4, #48	@ 0x30
 8018f86:	f88e 3000 	strb.w	r3, [lr]
 8018f8a:	d10d      	bne.n	8018fa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8018f8c:	f88c 3000 	strb.w	r3, [ip]
 8018f90:	6803      	ldr	r3, [r0, #0]
 8018f92:	b10b      	cbz	r3, 8018f98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8018f94:	3302      	adds	r3, #2
 8018f96:	6003      	str	r3, [r0, #0]
 8018f98:	680b      	ldr	r3, [r1, #0]
 8018f9a:	b10b      	cbz	r3, 8018fa0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8018f9c:	3301      	adds	r3, #1
 8018f9e:	600b      	str	r3, [r1, #0]
 8018fa0:	6803      	ldr	r3, [r0, #0]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d02f      	beq.n	8019006 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8018fa6:	881c      	ldrh	r4, [r3, #0]
 8018fa8:	2c2a      	cmp	r4, #42	@ 0x2a
 8018faa:	d135      	bne.n	8019018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8018fac:	f04f 33ff 	mov.w	r3, #4294967295
 8018fb0:	6033      	str	r3, [r6, #0]
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	b10b      	cbz	r3, 8018fba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8018fb6:	3302      	adds	r3, #2
 8018fb8:	6003      	str	r3, [r0, #0]
 8018fba:	680b      	ldr	r3, [r1, #0]
 8018fbc:	b10b      	cbz	r3, 8018fc2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	600b      	str	r3, [r1, #0]
 8018fc2:	6803      	ldr	r3, [r0, #0]
 8018fc4:	b31b      	cbz	r3, 801900e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8018fc6:	881c      	ldrh	r4, [r3, #0]
 8018fc8:	2c2e      	cmp	r4, #46	@ 0x2e
 8018fca:	d11a      	bne.n	8019002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018fcc:	2301      	movs	r3, #1
 8018fce:	703b      	strb	r3, [r7, #0]
 8018fd0:	6803      	ldr	r3, [r0, #0]
 8018fd2:	b10b      	cbz	r3, 8018fd8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8018fd4:	3302      	adds	r3, #2
 8018fd6:	6003      	str	r3, [r0, #0]
 8018fd8:	680b      	ldr	r3, [r1, #0]
 8018fda:	b10b      	cbz	r3, 8018fe0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8018fdc:	3301      	adds	r3, #1
 8018fde:	600b      	str	r3, [r1, #0]
 8018fe0:	6803      	ldr	r3, [r0, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d036      	beq.n	8019054 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8018fe6:	881b      	ldrh	r3, [r3, #0]
 8018fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8018fea:	d137      	bne.n	801905c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8018fec:	f04f 33ff 	mov.w	r3, #4294967295
 8018ff0:	602b      	str	r3, [r5, #0]
 8018ff2:	6803      	ldr	r3, [r0, #0]
 8018ff4:	b10b      	cbz	r3, 8018ffa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8018ff6:	3302      	adds	r3, #2
 8018ff8:	6003      	str	r3, [r0, #0]
 8018ffa:	680b      	ldr	r3, [r1, #0]
 8018ffc:	b10b      	cbz	r3, 8019002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8018ffe:	3301      	adds	r3, #1
 8019000:	600b      	str	r3, [r1, #0]
 8019002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019006:	680c      	ldr	r4, [r1, #0]
 8019008:	b134      	cbz	r4, 8019018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801900a:	7824      	ldrb	r4, [r4, #0]
 801900c:	e7cc      	b.n	8018fa8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801900e:	680b      	ldr	r3, [r1, #0]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d0f6      	beq.n	8019002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019014:	781c      	ldrb	r4, [r3, #0]
 8019016:	e7d7      	b.n	8018fc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019018:	2300      	movs	r3, #0
 801901a:	220a      	movs	r2, #10
 801901c:	6033      	str	r3, [r6, #0]
 801901e:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019022:	fa1f f38c 	uxth.w	r3, ip
 8019026:	2b09      	cmp	r3, #9
 8019028:	d8ce      	bhi.n	8018fc8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801902a:	6833      	ldr	r3, [r6, #0]
 801902c:	fb02 c303 	mla	r3, r2, r3, ip
 8019030:	6033      	str	r3, [r6, #0]
 8019032:	6803      	ldr	r3, [r0, #0]
 8019034:	b10b      	cbz	r3, 801903a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8019036:	3302      	adds	r3, #2
 8019038:	6003      	str	r3, [r0, #0]
 801903a:	680b      	ldr	r3, [r1, #0]
 801903c:	b10b      	cbz	r3, 8019042 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801903e:	3301      	adds	r3, #1
 8019040:	600b      	str	r3, [r1, #0]
 8019042:	6803      	ldr	r3, [r0, #0]
 8019044:	b10b      	cbz	r3, 801904a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8019046:	881c      	ldrh	r4, [r3, #0]
 8019048:	e7e9      	b.n	801901e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801904a:	680c      	ldr	r4, [r1, #0]
 801904c:	2c00      	cmp	r4, #0
 801904e:	d0e6      	beq.n	801901e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019050:	7824      	ldrb	r4, [r4, #0]
 8019052:	e7e4      	b.n	801901e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019054:	680b      	ldr	r3, [r1, #0]
 8019056:	b10b      	cbz	r3, 801905c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019058:	781b      	ldrb	r3, [r3, #0]
 801905a:	e7c5      	b.n	8018fe8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801905c:	2200      	movs	r2, #0
 801905e:	240a      	movs	r4, #10
 8019060:	602a      	str	r2, [r5, #0]
 8019062:	3b30      	subs	r3, #48	@ 0x30
 8019064:	682a      	ldr	r2, [r5, #0]
 8019066:	b29e      	uxth	r6, r3
 8019068:	2e09      	cmp	r6, #9
 801906a:	d813      	bhi.n	8019094 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801906c:	fb04 3302 	mla	r3, r4, r2, r3
 8019070:	602b      	str	r3, [r5, #0]
 8019072:	6803      	ldr	r3, [r0, #0]
 8019074:	b10b      	cbz	r3, 801907a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8019076:	3302      	adds	r3, #2
 8019078:	6003      	str	r3, [r0, #0]
 801907a:	680b      	ldr	r3, [r1, #0]
 801907c:	b10b      	cbz	r3, 8019082 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801907e:	3301      	adds	r3, #1
 8019080:	600b      	str	r3, [r1, #0]
 8019082:	6803      	ldr	r3, [r0, #0]
 8019084:	b10b      	cbz	r3, 801908a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8019086:	881b      	ldrh	r3, [r3, #0]
 8019088:	e7eb      	b.n	8019062 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801908a:	680b      	ldr	r3, [r1, #0]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d0e8      	beq.n	8019062 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	e7e6      	b.n	8019062 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019094:	2a06      	cmp	r2, #6
 8019096:	bfa8      	it	ge
 8019098:	2206      	movge	r2, #6
 801909a:	602a      	str	r2, [r5, #0]
 801909c:	e7b1      	b.n	8019002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801909e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801909e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a2:	b0a3      	sub	sp, #140	@ 0x8c
 80190a4:	2600      	movs	r6, #0
 80190a6:	4607      	mov	r7, r0
 80190a8:	4688      	mov	r8, r1
 80190aa:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80190ae:	4631      	mov	r1, r6
 80190b0:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80190b2:	4648      	mov	r0, r9
 80190b4:	960d      	str	r6, [sp, #52]	@ 0x34
 80190b6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80190ba:	2242      	movs	r2, #66	@ 0x42
 80190bc:	f00b fef6 	bl	8024eac <memset>
 80190c0:	b15f      	cbz	r7, 80190da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80190c2:	f108 3aff 	add.w	sl, r8, #4294967295
 80190c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190ca:	b152      	cbz	r2, 80190e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80190cc:	8812      	ldrh	r2, [r2, #0]
 80190ce:	b10a      	cbz	r2, 80190d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80190d0:	459a      	cmp	sl, r3
 80190d2:	dc2e      	bgt.n	8019132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80190d4:	2200      	movs	r2, #0
 80190d6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80190da:	4638      	mov	r0, r7
 80190dc:	b023      	add	sp, #140	@ 0x8c
 80190de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e2:	9a08      	ldr	r2, [sp, #32]
 80190e4:	2a00      	cmp	r2, #0
 80190e6:	d0f5      	beq.n	80190d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80190e8:	7812      	ldrb	r2, [r2, #0]
 80190ea:	e7f0      	b.n	80190ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80190ec:	2d00      	cmp	r5, #0
 80190ee:	d0ea      	beq.n	80190c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80190f0:	782a      	ldrb	r2, [r5, #0]
 80190f2:	b142      	cbz	r2, 8019106 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80190f4:	2a25      	cmp	r2, #37	@ 0x25
 80190f6:	d001      	beq.n	80190fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80190f8:	459a      	cmp	sl, r3
 80190fa:	dc08      	bgt.n	801910e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80190fc:	f1bb 0f00 	cmp.w	fp, #0
 8019100:	d121      	bne.n	8019146 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8019102:	2d00      	cmp	r5, #0
 8019104:	d0df      	beq.n	80190c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019106:	782a      	ldrb	r2, [r5, #0]
 8019108:	f04f 0b00 	mov.w	fp, #0
 801910c:	e01d      	b.n	801914a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801910e:	f1bb 0f00 	cmp.w	fp, #0
 8019112:	d077      	beq.n	8019204 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019114:	f8bb 2000 	ldrh.w	r2, [fp]
 8019118:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801911c:	f1bb 0f00 	cmp.w	fp, #0
 8019120:	d002      	beq.n	8019128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019122:	f10b 0202 	add.w	r2, fp, #2
 8019126:	9209      	str	r2, [sp, #36]	@ 0x24
 8019128:	b10d      	cbz	r5, 801912e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801912a:	3501      	adds	r5, #1
 801912c:	9508      	str	r5, [sp, #32]
 801912e:	3301      	adds	r3, #1
 8019130:	930d      	str	r3, [sp, #52]	@ 0x34
 8019132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019134:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8019138:	f1bb 0f00 	cmp.w	fp, #0
 801913c:	d0d6      	beq.n	80190ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801913e:	f8bb 2000 	ldrh.w	r2, [fp]
 8019142:	2a00      	cmp	r2, #0
 8019144:	d1d6      	bne.n	80190f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8019146:	f8bb 2000 	ldrh.w	r2, [fp]
 801914a:	2a00      	cmp	r2, #0
 801914c:	d0bb      	beq.n	80190c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801914e:	459a      	cmp	sl, r3
 8019150:	ddb9      	ble.n	80190c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019152:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8019156:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801915a:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801915e:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8019162:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8019166:	960e      	str	r6, [sp, #56]	@ 0x38
 8019168:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801916c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801916e:	f1bb 0f00 	cmp.w	fp, #0
 8019172:	d002      	beq.n	801917a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8019174:	f10b 0302 	add.w	r3, fp, #2
 8019178:	9309      	str	r3, [sp, #36]	@ 0x24
 801917a:	b10d      	cbz	r5, 8019180 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801917c:	1c6b      	adds	r3, r5, #1
 801917e:	9308      	str	r3, [sp, #32]
 8019180:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019182:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8019186:	a908      	add	r1, sp, #32
 8019188:	a809      	add	r0, sp, #36	@ 0x24
 801918a:	9305      	str	r3, [sp, #20]
 801918c:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8019190:	9304      	str	r3, [sp, #16]
 8019192:	ab0e      	add	r3, sp, #56	@ 0x38
 8019194:	9303      	str	r3, [sp, #12]
 8019196:	ab0c      	add	r3, sp, #48	@ 0x30
 8019198:	9302      	str	r3, [sp, #8]
 801919a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801919e:	9301      	str	r3, [sp, #4]
 80191a0:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80191a4:	9300      	str	r3, [sp, #0]
 80191a6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 80191aa:	f7ff fea8 	bl	8018efe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80191ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	bfbf      	itttt	lt
 80191b4:	6823      	ldrlt	r3, [r4, #0]
 80191b6:	3404      	addlt	r4, #4
 80191b8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80191bc:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80191be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80191c0:	2b00      	cmp	r3, #0
 80191c2:	bfbe      	ittt	lt
 80191c4:	6823      	ldrlt	r3, [r4, #0]
 80191c6:	3404      	addlt	r4, #4
 80191c8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80191cc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80191d0:	bfb8      	it	lt
 80191d2:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 80191d4:	b1d9      	cbz	r1, 801920e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80191d6:	880b      	ldrh	r3, [r1, #0]
 80191d8:	2b69      	cmp	r3, #105	@ 0x69
 80191da:	d01f      	beq.n	801921c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80191dc:	d82f      	bhi.n	801923e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80191de:	2b58      	cmp	r3, #88	@ 0x58
 80191e0:	d01c      	beq.n	801921c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80191e2:	d818      	bhi.n	8019216 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80191e4:	2b25      	cmp	r3, #37	@ 0x25
 80191e6:	d034      	beq.n	8019252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80191e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80191ea:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80191ee:	f1bb 0f00 	cmp.w	fp, #0
 80191f2:	f000 80b7 	beq.w	8019364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80191f6:	f8bb 5000 	ldrh.w	r5, [fp]
 80191fa:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80191fe:	3301      	adds	r3, #1
 8019200:	930d      	str	r3, [sp, #52]	@ 0x34
 8019202:	e029      	b.n	8019258 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019204:	b10d      	cbz	r5, 801920a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 8019206:	782a      	ldrb	r2, [r5, #0]
 8019208:	e786      	b.n	8019118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801920a:	462a      	mov	r2, r5
 801920c:	e784      	b.n	8019118 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801920e:	2a00      	cmp	r2, #0
 8019210:	d0ea      	beq.n	80191e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019212:	7813      	ldrb	r3, [r2, #0]
 8019214:	e7e0      	b.n	80191d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8019216:	3b63      	subs	r3, #99	@ 0x63
 8019218:	2b01      	cmp	r3, #1
 801921a:	d8e5      	bhi.n	80191e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801921c:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8019220:	b329      	cbz	r1, 801926e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8019222:	880b      	ldrh	r3, [r1, #0]
 8019224:	2b69      	cmp	r3, #105	@ 0x69
 8019226:	d063      	beq.n	80192f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019228:	d825      	bhi.n	8019276 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801922a:	2b63      	cmp	r3, #99	@ 0x63
 801922c:	d038      	beq.n	80192a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801922e:	2b64      	cmp	r3, #100	@ 0x64
 8019230:	d05e      	beq.n	80192f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019232:	2b58      	cmp	r3, #88	@ 0x58
 8019234:	d07a      	beq.n	801932c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8019236:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801923a:	4625      	mov	r5, r4
 801923c:	e036      	b.n	80192ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801923e:	2b73      	cmp	r3, #115	@ 0x73
 8019240:	d0ec      	beq.n	801921c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019242:	d802      	bhi.n	801924a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8019244:	2b6f      	cmp	r3, #111	@ 0x6f
 8019246:	d1cf      	bne.n	80191e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019248:	e7e8      	b.n	801921c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801924a:	2b75      	cmp	r3, #117	@ 0x75
 801924c:	d0e6      	beq.n	801921c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801924e:	2b78      	cmp	r3, #120	@ 0x78
 8019250:	e7f9      	b.n	8019246 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8019252:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019254:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8019258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801925a:	b10b      	cbz	r3, 8019260 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801925c:	3302      	adds	r3, #2
 801925e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019260:	9b08      	ldr	r3, [sp, #32]
 8019262:	2b00      	cmp	r3, #0
 8019264:	f43f af2f 	beq.w	80190c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019268:	3301      	adds	r3, #1
 801926a:	9308      	str	r3, [sp, #32]
 801926c:	e72b      	b.n	80190c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801926e:	2a00      	cmp	r2, #0
 8019270:	d0e1      	beq.n	8019236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019272:	7813      	ldrb	r3, [r2, #0]
 8019274:	e7d6      	b.n	8019224 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8019276:	2b73      	cmp	r3, #115	@ 0x73
 8019278:	d036      	beq.n	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801927a:	d807      	bhi.n	801928c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801927c:	2b6f      	cmp	r3, #111	@ 0x6f
 801927e:	d1da      	bne.n	8019236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019280:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019282:	1d25      	adds	r5, r4, #4
 8019284:	2308      	movs	r3, #8
 8019286:	eba8 0202 	sub.w	r2, r8, r2
 801928a:	e049      	b.n	8019320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801928c:	2b75      	cmp	r3, #117	@ 0x75
 801928e:	d042      	beq.n	8019316 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8019290:	2b78      	cmp	r3, #120	@ 0x78
 8019292:	d1d0      	bne.n	8019236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019296:	1d25      	adds	r5, r4, #4
 8019298:	2310      	movs	r3, #16
 801929a:	eba8 0202 	sub.w	r2, r8, r2
 801929e:	e03f      	b.n	8019320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80192a0:	6823      	ldr	r3, [r4, #0]
 80192a2:	1d25      	adds	r5, r4, #4
 80192a4:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80192a8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80192ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192ae:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d051      	beq.n	801935a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80192b6:	881a      	ldrh	r2, [r3, #0]
 80192b8:	a80d      	add	r0, sp, #52	@ 0x34
 80192ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80192be:	462c      	mov	r4, r5
 80192c0:	9005      	str	r0, [sp, #20]
 80192c2:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 80192c6:	9004      	str	r0, [sp, #16]
 80192c8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80192ca:	9003      	str	r0, [sp, #12]
 80192cc:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 80192d0:	9002      	str	r0, [sp, #8]
 80192d2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80192d4:	9001      	str	r0, [sp, #4]
 80192d6:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 80192da:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80192de:	9000      	str	r0, [sp, #0]
 80192e0:	a810      	add	r0, sp, #64	@ 0x40
 80192e2:	f7ff fd49 	bl	8018d78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80192e6:	e7b7      	b.n	8019258 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80192e8:	1d25      	adds	r5, r4, #4
 80192ea:	6823      	ldr	r3, [r4, #0]
 80192ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80192ee:	e7dd      	b.n	80192ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80192f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80192f2:	230a      	movs	r3, #10
 80192f4:	4649      	mov	r1, r9
 80192f6:	6820      	ldr	r0, [r4, #0]
 80192f8:	eba8 0202 	sub.w	r2, r8, r2
 80192fc:	1d25      	adds	r5, r4, #4
 80192fe:	b292      	uxth	r2, r2
 8019300:	f7ff fcf0 	bl	8018ce4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8019304:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8019308:	2b2d      	cmp	r3, #45	@ 0x2d
 801930a:	d1cf      	bne.n	80192ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801930c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019310:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019312:	3302      	adds	r3, #2
 8019314:	e7ea      	b.n	80192ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8019316:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019318:	1d25      	adds	r5, r4, #4
 801931a:	230a      	movs	r3, #10
 801931c:	eba8 0202 	sub.w	r2, r8, r2
 8019320:	b292      	uxth	r2, r2
 8019322:	4649      	mov	r1, r9
 8019324:	6820      	ldr	r0, [r4, #0]
 8019326:	f7ff fd09 	bl	8018d3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801932a:	e7bf      	b.n	80192ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801932c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801932e:	2310      	movs	r3, #16
 8019330:	4649      	mov	r1, r9
 8019332:	6820      	ldr	r0, [r4, #0]
 8019334:	eba8 0202 	sub.w	r2, r8, r2
 8019338:	1d25      	adds	r5, r4, #4
 801933a:	b292      	uxth	r2, r2
 801933c:	f7ff fcfe 	bl	8018d3c <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8019340:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8019344:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8019348:	2b00      	cmp	r3, #0
 801934a:	d0af      	beq.n	80192ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801934c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8019350:	2919      	cmp	r1, #25
 8019352:	d8f7      	bhi.n	8019344 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019354:	3b20      	subs	r3, #32
 8019356:	8013      	strh	r3, [r2, #0]
 8019358:	e7f4      	b.n	8019344 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801935a:	9a08      	ldr	r2, [sp, #32]
 801935c:	2a00      	cmp	r2, #0
 801935e:	d0ab      	beq.n	80192b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019360:	7812      	ldrb	r2, [r2, #0]
 8019362:	e7a9      	b.n	80192b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019364:	2d00      	cmp	r5, #0
 8019366:	f43f af48 	beq.w	80191fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801936a:	782d      	ldrb	r5, [r5, #0]
 801936c:	e745      	b.n	80191fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801936e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801936e:	b507      	push	{r0, r1, r2, lr}
 8019370:	9300      	str	r3, [sp, #0]
 8019372:	4613      	mov	r3, r2
 8019374:	2200      	movs	r2, #0
 8019376:	f7ff fe92 	bl	801909e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801937a:	b003      	add	sp, #12
 801937c:	f85d fb04 	ldr.w	pc, [sp], #4

08019380 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019380:	b40c      	push	{r2, r3}
 8019382:	b507      	push	{r0, r1, r2, lr}
 8019384:	ab04      	add	r3, sp, #16
 8019386:	f853 2b04 	ldr.w	r2, [r3], #4
 801938a:	9301      	str	r3, [sp, #4]
 801938c:	f7ff ffef 	bl	801936e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8019390:	b003      	add	sp, #12
 8019392:	f85d eb04 	ldr.w	lr, [sp], #4
 8019396:	b002      	add	sp, #8
 8019398:	4770      	bx	lr
	...

0801939c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801939c:	4b01      	ldr	r3, [pc, #4]	@ (80193a4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801939e:	6018      	str	r0, [r3, #0]
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	2402599c 	.word	0x2402599c

080193a8 <_ZN8touchgfx11FontManager7getFontEt>:
 80193a8:	4b03      	ldr	r3, [pc, #12]	@ (80193b8 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 80193aa:	4601      	mov	r1, r0
 80193ac:	6818      	ldr	r0, [r3, #0]
 80193ae:	b110      	cbz	r0, 80193b6 <_ZN8touchgfx11FontManager7getFontEt+0xe>
 80193b0:	6803      	ldr	r3, [r0, #0]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	4718      	bx	r3
 80193b6:	4770      	bx	lr
 80193b8:	2402599c 	.word	0x2402599c

080193bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80193bc:	4b06      	ldr	r3, [pc, #24]	@ (80193d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80193be:	881a      	ldrh	r2, [r3, #0]
 80193c0:	4282      	cmp	r2, r0
 80193c2:	d807      	bhi.n	80193d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80193c4:	4b05      	ldr	r3, [pc, #20]	@ (80193dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80193c6:	881b      	ldrh	r3, [r3, #0]
 80193c8:	4413      	add	r3, r2
 80193ca:	4298      	cmp	r0, r3
 80193cc:	bfac      	ite	ge
 80193ce:	2000      	movge	r0, #0
 80193d0:	2001      	movlt	r0, #1
 80193d2:	4770      	bx	lr
 80193d4:	2000      	movs	r0, #0
 80193d6:	4770      	bx	lr
 80193d8:	240259bc 	.word	0x240259bc
 80193dc:	240259c0 	.word	0x240259c0

080193e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80193e0:	b508      	push	{r3, lr}
 80193e2:	4601      	mov	r1, r0
 80193e4:	f7ff ffea 	bl	80193bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80193e8:	b118      	cbz	r0, 80193f2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80193ea:	4b02      	ldr	r3, [pc, #8]	@ (80193f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80193f2:	bd08      	pop	{r3, pc}
 80193f4:	240259a0 	.word	0x240259a0

080193f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80193f8:	b538      	push	{r3, r4, r5, lr}
 80193fa:	4604      	mov	r4, r0
 80193fc:	f7ff ffde 	bl	80193bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019400:	b1d8      	cbz	r0, 801943a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019402:	4b0f      	ldr	r3, [pc, #60]	@ (8019440 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8019404:	881b      	ldrh	r3, [r3, #0]
 8019406:	1ae4      	subs	r4, r4, r3
 8019408:	230e      	movs	r3, #14
 801940a:	4363      	muls	r3, r4
 801940c:	4c0d      	ldr	r4, [pc, #52]	@ (8019444 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801940e:	6825      	ldr	r5, [r4, #0]
 8019410:	18ea      	adds	r2, r5, r3
 8019412:	7b12      	ldrb	r2, [r2, #12]
 8019414:	f012 0220 	ands.w	r2, r2, #32
 8019418:	d010      	beq.n	801943c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801941a:	f9b1 2000 	ldrsh.w	r2, [r1]
 801941e:	52ea      	strh	r2, [r5, r3]
 8019420:	6822      	ldr	r2, [r4, #0]
 8019422:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019426:	441a      	add	r2, r3
 8019428:	8055      	strh	r5, [r2, #2]
 801942a:	6822      	ldr	r2, [r4, #0]
 801942c:	4413      	add	r3, r2
 801942e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8019432:	809a      	strh	r2, [r3, #4]
 8019434:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8019438:	80da      	strh	r2, [r3, #6]
 801943a:	bd38      	pop	{r3, r4, r5, pc}
 801943c:	4610      	mov	r0, r2
 801943e:	e7fc      	b.n	801943a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8019440:	240259bc 	.word	0x240259bc
 8019444:	240259a4 	.word	0x240259a4

08019448 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8019448:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801944c:	4606      	mov	r6, r0
 801944e:	460c      	mov	r4, r1
 8019450:	f7ff ffb4 	bl	80193bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019454:	b918      	cbnz	r0, 801945e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8019456:	2000      	movs	r0, #0
 8019458:	b002      	add	sp, #8
 801945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801945e:	4608      	mov	r0, r1
 8019460:	f7f6 f87d 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019464:	2800      	cmp	r0, #0
 8019466:	d1f6      	bne.n	8019456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019468:	4b3f      	ldr	r3, [pc, #252]	@ (8019568 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801946a:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801956c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801946e:	881d      	ldrh	r5, [r3, #0]
 8019470:	f8d9 a000 	ldr.w	sl, [r9]
 8019474:	46c8      	mov	r8, r9
 8019476:	1b73      	subs	r3, r6, r5
 8019478:	250e      	movs	r5, #14
 801947a:	435d      	muls	r5, r3
 801947c:	eb0a 0705 	add.w	r7, sl, r5
 8019480:	7b3b      	ldrb	r3, [r7, #12]
 8019482:	f013 0f20 	tst.w	r3, #32
 8019486:	d0e6      	beq.n	8019456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019488:	4621      	mov	r1, r4
 801948a:	4638      	mov	r0, r7
 801948c:	f7fc fa48 	bl	8015920 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019490:	2800      	cmp	r0, #0
 8019492:	d1e1      	bne.n	8019458 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019494:	4639      	mov	r1, r7
 8019496:	4620      	mov	r0, r4
 8019498:	f7fc fa42 	bl	8015920 <_ZNK8touchgfx4Rect8includesERKS0_>
 801949c:	b108      	cbz	r0, 80194a2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801949e:	4621      	mov	r1, r4
 80194a0:	e020      	b.n	80194e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80194a2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80194a6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d11e      	bne.n	80194ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80194ae:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80194b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80194b6:	429a      	cmp	r2, r3
 80194b8:	d118      	bne.n	80194ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80194ba:	6820      	ldr	r0, [r4, #0]
 80194bc:	466b      	mov	r3, sp
 80194be:	6861      	ldr	r1, [r4, #4]
 80194c0:	c303      	stmia	r3!, {r0, r1}
 80194c2:	4639      	mov	r1, r7
 80194c4:	4668      	mov	r0, sp
 80194c6:	f7fc fa51 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80194ca:	f8d9 3000 	ldr.w	r3, [r9]
 80194ce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80194d2:	442b      	add	r3, r5
 80194d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80194d8:	4413      	add	r3, r2
 80194da:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80194de:	4293      	cmp	r3, r2
 80194e0:	dc04      	bgt.n	80194ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80194e2:	4669      	mov	r1, sp
 80194e4:	4630      	mov	r0, r6
 80194e6:	f7ff ff87 	bl	80193f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80194ea:	e7b5      	b.n	8019458 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80194ec:	f8d8 3000 	ldr.w	r3, [r8]
 80194f0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80194f4:	442b      	add	r3, r5
 80194f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80194fa:	4291      	cmp	r1, r2
 80194fc:	d119      	bne.n	8019532 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80194fe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8019502:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8019506:	4291      	cmp	r1, r2
 8019508:	d113      	bne.n	8019532 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801950a:	6820      	ldr	r0, [r4, #0]
 801950c:	466a      	mov	r2, sp
 801950e:	6861      	ldr	r1, [r4, #4]
 8019510:	c203      	stmia	r2!, {r0, r1}
 8019512:	4619      	mov	r1, r3
 8019514:	4668      	mov	r0, sp
 8019516:	f7fc fa29 	bl	801596c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801951a:	f8d8 3000 	ldr.w	r3, [r8]
 801951e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019522:	442b      	add	r3, r5
 8019524:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019528:	4413      	add	r3, r2
 801952a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801952e:	4293      	cmp	r3, r2
 8019530:	ddd7      	ble.n	80194e2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8019532:	4620      	mov	r0, r4
 8019534:	f7f6 f813 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 8019538:	b990      	cbnz	r0, 8019560 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801953a:	88a7      	ldrh	r7, [r4, #4]
 801953c:	88e3      	ldrh	r3, [r4, #6]
 801953e:	fb17 f703 	smulbb	r7, r7, r3
 8019542:	f8d8 3000 	ldr.w	r3, [r8]
 8019546:	441d      	add	r5, r3
 8019548:	4628      	mov	r0, r5
 801954a:	f7f6 f808 	bl	800f55e <_ZNK8touchgfx4Rect7isEmptyEv>
 801954e:	b948      	cbnz	r0, 8019564 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8019550:	88ab      	ldrh	r3, [r5, #4]
 8019552:	88ea      	ldrh	r2, [r5, #6]
 8019554:	fb13 f302 	smulbb	r3, r3, r2
 8019558:	42bb      	cmp	r3, r7
 801955a:	f6bf af7c 	bge.w	8019456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801955e:	e79e      	b.n	801949e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8019560:	2700      	movs	r7, #0
 8019562:	e7ee      	b.n	8019542 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8019564:	2300      	movs	r3, #0
 8019566:	e7f7      	b.n	8019558 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8019568:	240259bc 	.word	0x240259bc
 801956c:	240259a4 	.word	0x240259a4

08019570 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019572:	4c24      	ldr	r4, [pc, #144]	@ (8019604 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019574:	6823      	ldr	r3, [r4, #0]
 8019576:	2b00      	cmp	r3, #0
 8019578:	d042      	beq.n	8019600 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801957a:	4a23      	ldr	r2, [pc, #140]	@ (8019608 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801957c:	4d23      	ldr	r5, [pc, #140]	@ (801960c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801957e:	8811      	ldrh	r1, [r2, #0]
 8019580:	f8b5 c000 	ldrh.w	ip, [r5]
 8019584:	4822      	ldr	r0, [pc, #136]	@ (8019610 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8019586:	4461      	add	r1, ip
 8019588:	1c4a      	adds	r2, r1, #1
 801958a:	008f      	lsls	r7, r1, #2
 801958c:	f022 0201 	bic.w	r2, r2, #1
 8019590:	19de      	adds	r6, r3, r7
 8019592:	0412      	lsls	r2, r2, #16
 8019594:	6006      	str	r6, [r0, #0]
 8019596:	4e1f      	ldr	r6, [pc, #124]	@ (8019614 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019598:	0c12      	lsrs	r2, r2, #16
 801959a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801959e:	19da      	adds	r2, r3, r7
 80195a0:	6032      	str	r2, [r6, #0]
 80195a2:	220e      	movs	r2, #14
 80195a4:	fb02 f20c 	mul.w	r2, r2, ip
 80195a8:	3203      	adds	r2, #3
 80195aa:	f022 0203 	bic.w	r2, r2, #3
 80195ae:	443a      	add	r2, r7
 80195b0:	4f19      	ldr	r7, [pc, #100]	@ (8019618 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80195b2:	4413      	add	r3, r2
 80195b4:	603b      	str	r3, [r7, #0]
 80195b6:	2300      	movs	r3, #0
 80195b8:	4f18      	ldr	r7, [pc, #96]	@ (801961c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80195ba:	469c      	mov	ip, r3
 80195bc:	803b      	strh	r3, [r7, #0]
 80195be:	4f18      	ldr	r7, [pc, #96]	@ (8019620 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80195c0:	683f      	ldr	r7, [r7, #0]
 80195c2:	1aba      	subs	r2, r7, r2
 80195c4:	4f17      	ldr	r7, [pc, #92]	@ (8019624 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80195c6:	603a      	str	r2, [r7, #0]
 80195c8:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80195cc:	4a16      	ldr	r2, [pc, #88]	@ (8019628 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80195ce:	8013      	strh	r3, [r2, #0]
 80195d0:	428b      	cmp	r3, r1
 80195d2:	d10d      	bne.n	80195f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80195d4:	882d      	ldrh	r5, [r5, #0]
 80195d6:	2300      	movs	r3, #0
 80195d8:	6830      	ldr	r0, [r6, #0]
 80195da:	240e      	movs	r4, #14
 80195dc:	429d      	cmp	r5, r3
 80195de:	d90f      	bls.n	8019600 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80195e0:	fb04 0203 	mla	r2, r4, r3, r0
 80195e4:	3301      	adds	r3, #1
 80195e6:	7b11      	ldrb	r1, [r2, #12]
 80195e8:	f36f 1145 	bfc	r1, #5, #1
 80195ec:	7311      	strb	r1, [r2, #12]
 80195ee:	e7f5      	b.n	80195dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80195f0:	6822      	ldr	r2, [r4, #0]
 80195f2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80195f6:	6802      	ldr	r2, [r0, #0]
 80195f8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80195fc:	3301      	adds	r3, #1
 80195fe:	e7e7      	b.n	80195d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8019600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019602:	bf00      	nop
 8019604:	240259a0 	.word	0x240259a0
 8019608:	240259bc 	.word	0x240259bc
 801960c:	240259c0 	.word	0x240259c0
 8019610:	240259b4 	.word	0x240259b4
 8019614:	240259a4 	.word	0x240259a4
 8019618:	240259ac 	.word	0x240259ac
 801961c:	240259be 	.word	0x240259be
 8019620:	240259a8 	.word	0x240259a8
 8019624:	240259b8 	.word	0x240259b8
 8019628:	240259b0 	.word	0x240259b0

0801962c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801962c:	4b06      	ldr	r3, [pc, #24]	@ (8019648 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	b943      	cbnz	r3, 8019644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019632:	b139      	cbz	r1, 8019644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8019634:	4b05      	ldr	r3, [pc, #20]	@ (801964c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8019636:	801a      	strh	r2, [r3, #0]
 8019638:	4b05      	ldr	r3, [pc, #20]	@ (8019650 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801963a:	6019      	str	r1, [r3, #0]
 801963c:	4b05      	ldr	r3, [pc, #20]	@ (8019654 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801963e:	6018      	str	r0, [r3, #0]
 8019640:	f7ff bf96 	b.w	8019570 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8019644:	4770      	bx	lr
 8019646:	bf00      	nop
 8019648:	240259ac 	.word	0x240259ac
 801964c:	240259c0 	.word	0x240259c0
 8019650:	240259a8 	.word	0x240259a8
 8019654:	240259a0 	.word	0x240259a0

08019658 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019658:	b470      	push	{r4, r5, r6}
 801965a:	4c07      	ldr	r4, [pc, #28]	@ (8019678 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801965c:	4605      	mov	r5, r0
 801965e:	4610      	mov	r0, r2
 8019660:	9a03      	ldr	r2, [sp, #12]
 8019662:	6826      	ldr	r6, [r4, #0]
 8019664:	b936      	cbnz	r6, 8019674 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8019666:	6025      	str	r5, [r4, #0]
 8019668:	4c04      	ldr	r4, [pc, #16]	@ (801967c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801966a:	8021      	strh	r1, [r4, #0]
 801966c:	4619      	mov	r1, r3
 801966e:	bc70      	pop	{r4, r5, r6}
 8019670:	f7ff bfdc 	b.w	801962c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019674:	bc70      	pop	{r4, r5, r6}
 8019676:	4770      	bx	lr
 8019678:	240259c4 	.word	0x240259c4
 801967c:	240259bc 	.word	0x240259bc

08019680 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019680:	4a12      	ldr	r2, [pc, #72]	@ (80196cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019682:	8803      	ldrh	r3, [r0, #0]
 8019684:	8812      	ldrh	r2, [r2, #0]
 8019686:	4293      	cmp	r3, r2
 8019688:	d207      	bcs.n	801969a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801968a:	4a11      	ldr	r2, [pc, #68]	@ (80196d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801968c:	2114      	movs	r1, #20
 801968e:	6812      	ldr	r2, [r2, #0]
 8019690:	fb01 2303 	mla	r3, r1, r3, r2
 8019694:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019698:	4770      	bx	lr
 801969a:	490e      	ldr	r1, [pc, #56]	@ (80196d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801969c:	8809      	ldrh	r1, [r1, #0]
 801969e:	4411      	add	r1, r2
 80196a0:	428b      	cmp	r3, r1
 80196a2:	da04      	bge.n	80196ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80196a4:	1a9b      	subs	r3, r3, r2
 80196a6:	4a0c      	ldr	r2, [pc, #48]	@ (80196d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80196a8:	210e      	movs	r1, #14
 80196aa:	6812      	ldr	r2, [r2, #0]
 80196ac:	e7f0      	b.n	8019690 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80196ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80196b2:	4293      	cmp	r3, r2
 80196b4:	d108      	bne.n	80196c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80196b6:	4b09      	ldr	r3, [pc, #36]	@ (80196dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	b91b      	cbnz	r3, 80196c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80196bc:	4b08      	ldr	r3, [pc, #32]	@ (80196e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80196be:	f9b3 0000 	ldrsh.w	r0, [r3]
 80196c2:	4770      	bx	lr
 80196c4:	4b07      	ldr	r3, [pc, #28]	@ (80196e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80196c6:	e7fa      	b.n	80196be <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80196c8:	2000      	movs	r0, #0
 80196ca:	4770      	bx	lr
 80196cc:	240259bc 	.word	0x240259bc
 80196d0:	240259c4 	.word	0x240259c4
 80196d4:	240259c0 	.word	0x240259c0
 80196d8:	240259a4 	.word	0x240259a4
 80196dc:	2402592c 	.word	0x2402592c
 80196e0:	2402592e 	.word	0x2402592e
 80196e4:	24025930 	.word	0x24025930

080196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80196e8:	4a12      	ldr	r2, [pc, #72]	@ (8019734 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80196ea:	8803      	ldrh	r3, [r0, #0]
 80196ec:	8812      	ldrh	r2, [r2, #0]
 80196ee:	4293      	cmp	r3, r2
 80196f0:	d207      	bcs.n	8019702 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80196f2:	4a11      	ldr	r2, [pc, #68]	@ (8019738 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80196f4:	2114      	movs	r1, #20
 80196f6:	6812      	ldr	r2, [r2, #0]
 80196f8:	fb01 2303 	mla	r3, r1, r3, r2
 80196fc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8019700:	4770      	bx	lr
 8019702:	490e      	ldr	r1, [pc, #56]	@ (801973c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8019704:	8809      	ldrh	r1, [r1, #0]
 8019706:	4411      	add	r1, r2
 8019708:	428b      	cmp	r3, r1
 801970a:	da04      	bge.n	8019716 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801970c:	1a9b      	subs	r3, r3, r2
 801970e:	4a0c      	ldr	r2, [pc, #48]	@ (8019740 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8019710:	210e      	movs	r1, #14
 8019712:	6812      	ldr	r2, [r2, #0]
 8019714:	e7f0      	b.n	80196f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8019716:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801971a:	4293      	cmp	r3, r2
 801971c:	d108      	bne.n	8019730 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801971e:	4b09      	ldr	r3, [pc, #36]	@ (8019744 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019720:	781b      	ldrb	r3, [r3, #0]
 8019722:	b91b      	cbnz	r3, 801972c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8019724:	4b08      	ldr	r3, [pc, #32]	@ (8019748 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8019726:	f9b3 0000 	ldrsh.w	r0, [r3]
 801972a:	4770      	bx	lr
 801972c:	4b07      	ldr	r3, [pc, #28]	@ (801974c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801972e:	e7fa      	b.n	8019726 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019730:	2000      	movs	r0, #0
 8019732:	4770      	bx	lr
 8019734:	240259bc 	.word	0x240259bc
 8019738:	240259c4 	.word	0x240259c4
 801973c:	240259c0 	.word	0x240259c0
 8019740:	240259a4 	.word	0x240259a4
 8019744:	2402592c 	.word	0x2402592c
 8019748:	24025930 	.word	0x24025930
 801974c:	2402592e 	.word	0x2402592e

08019750 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019750:	4a22      	ldr	r2, [pc, #136]	@ (80197dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019752:	b530      	push	{r4, r5, lr}
 8019754:	880b      	ldrh	r3, [r1, #0]
 8019756:	8812      	ldrh	r2, [r2, #0]
 8019758:	4293      	cmp	r3, r2
 801975a:	d213      	bcs.n	8019784 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801975c:	4a20      	ldr	r2, [pc, #128]	@ (80197e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801975e:	2114      	movs	r1, #20
 8019760:	6812      	ldr	r2, [r2, #0]
 8019762:	fb01 2303 	mla	r3, r1, r3, r2
 8019766:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801976a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801976e:	8a1a      	ldrh	r2, [r3, #16]
 8019770:	8a5b      	ldrh	r3, [r3, #18]
 8019772:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8019776:	8004      	strh	r4, [r0, #0]
 8019778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801977c:	8041      	strh	r1, [r0, #2]
 801977e:	8082      	strh	r2, [r0, #4]
 8019780:	80c3      	strh	r3, [r0, #6]
 8019782:	e024      	b.n	80197ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8019784:	4917      	ldr	r1, [pc, #92]	@ (80197e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019786:	8809      	ldrh	r1, [r1, #0]
 8019788:	4411      	add	r1, r2
 801978a:	428b      	cmp	r3, r1
 801978c:	da10      	bge.n	80197b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801978e:	1a9b      	subs	r3, r3, r2
 8019790:	220e      	movs	r2, #14
 8019792:	4353      	muls	r3, r2
 8019794:	4a14      	ldr	r2, [pc, #80]	@ (80197e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8019796:	6811      	ldr	r1, [r2, #0]
 8019798:	18ca      	adds	r2, r1, r3
 801979a:	5ecd      	ldrsh	r5, [r1, r3]
 801979c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80197a0:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80197a4:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 80197a8:	8005      	strh	r5, [r0, #0]
 80197aa:	8044      	strh	r4, [r0, #2]
 80197ac:	8081      	strh	r1, [r0, #4]
 80197ae:	e7e7      	b.n	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80197b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80197b4:	4293      	cmp	r3, r2
 80197b6:	d10b      	bne.n	80197d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 80197b8:	4b0c      	ldr	r3, [pc, #48]	@ (80197ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80197ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80197be:	4b0c      	ldr	r3, [pc, #48]	@ (80197f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80197c0:	8081      	strh	r1, [r0, #4]
 80197c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80197c6:	2300      	movs	r3, #0
 80197c8:	80c2      	strh	r2, [r0, #6]
 80197ca:	8003      	strh	r3, [r0, #0]
 80197cc:	8043      	strh	r3, [r0, #2]
 80197ce:	bd30      	pop	{r4, r5, pc}
 80197d0:	2300      	movs	r3, #0
 80197d2:	8003      	strh	r3, [r0, #0]
 80197d4:	8043      	strh	r3, [r0, #2]
 80197d6:	8083      	strh	r3, [r0, #4]
 80197d8:	e7d2      	b.n	8019780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80197da:	bf00      	nop
 80197dc:	240259bc 	.word	0x240259bc
 80197e0:	240259c4 	.word	0x240259c4
 80197e4:	240259c0 	.word	0x240259c0
 80197e8:	240259a4 	.word	0x240259a4
 80197ec:	24025928 	.word	0x24025928
 80197f0:	2402592a 	.word	0x2402592a

080197f4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80197f4:	4a12      	ldr	r2, [pc, #72]	@ (8019840 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80197f6:	8803      	ldrh	r3, [r0, #0]
 80197f8:	8811      	ldrh	r1, [r2, #0]
 80197fa:	428b      	cmp	r3, r1
 80197fc:	d20b      	bcs.n	8019816 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80197fe:	4a11      	ldr	r2, [pc, #68]	@ (8019844 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019800:	6812      	ldr	r2, [r2, #0]
 8019802:	b112      	cbz	r2, 801980a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8019804:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019808:	b9c0      	cbnz	r0, 801983c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801980a:	4a0f      	ldr	r2, [pc, #60]	@ (8019848 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801980c:	6811      	ldr	r1, [r2, #0]
 801980e:	2214      	movs	r2, #20
 8019810:	4353      	muls	r3, r2
 8019812:	58c8      	ldr	r0, [r1, r3]
 8019814:	4770      	bx	lr
 8019816:	4a0d      	ldr	r2, [pc, #52]	@ (801984c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8019818:	8812      	ldrh	r2, [r2, #0]
 801981a:	440a      	add	r2, r1
 801981c:	4293      	cmp	r3, r2
 801981e:	da04      	bge.n	801982a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8019820:	4a08      	ldr	r2, [pc, #32]	@ (8019844 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019822:	6812      	ldr	r2, [r2, #0]
 8019824:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019828:	4770      	bx	lr
 801982a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801982e:	4293      	cmp	r3, r2
 8019830:	d103      	bne.n	801983a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019832:	4b07      	ldr	r3, [pc, #28]	@ (8019850 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8019838:	4770      	bx	lr
 801983a:	2000      	movs	r0, #0
 801983c:	4770      	bx	lr
 801983e:	bf00      	nop
 8019840:	240259bc 	.word	0x240259bc
 8019844:	240259a0 	.word	0x240259a0
 8019848:	240259c4 	.word	0x240259c4
 801984c:	240259c0 	.word	0x240259c0
 8019850:	24025934 	.word	0x24025934

08019854 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019854:	4b24      	ldr	r3, [pc, #144]	@ (80198e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019856:	8802      	ldrh	r2, [r0, #0]
 8019858:	8818      	ldrh	r0, [r3, #0]
 801985a:	4282      	cmp	r2, r0
 801985c:	d221      	bcs.n	80198a2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801985e:	4b23      	ldr	r3, [pc, #140]	@ (80198ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019860:	6819      	ldr	r1, [r3, #0]
 8019862:	2314      	movs	r3, #20
 8019864:	fb03 1302 	mla	r3, r3, r2, r1
 8019868:	6858      	ldr	r0, [r3, #4]
 801986a:	2800      	cmp	r0, #0
 801986c:	d03a      	beq.n	80198e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801986e:	4920      	ldr	r1, [pc, #128]	@ (80198f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019870:	6809      	ldr	r1, [r1, #0]
 8019872:	2900      	cmp	r1, #0
 8019874:	d036      	beq.n	80198e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019876:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801987a:	2900      	cmp	r1, #0
 801987c:	d032      	beq.n	80198e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801987e:	891a      	ldrh	r2, [r3, #8]
 8019880:	8958      	ldrh	r0, [r3, #10]
 8019882:	4350      	muls	r0, r2
 8019884:	7c5a      	ldrb	r2, [r3, #17]
 8019886:	7cdb      	ldrb	r3, [r3, #19]
 8019888:	0952      	lsrs	r2, r2, #5
 801988a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801988e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019892:	2b0b      	cmp	r3, #11
 8019894:	bf18      	it	ne
 8019896:	0040      	lslne	r0, r0, #1
 8019898:	3003      	adds	r0, #3
 801989a:	f020 0003 	bic.w	r0, r0, #3
 801989e:	4408      	add	r0, r1
 80198a0:	4770      	bx	lr
 80198a2:	4b14      	ldr	r3, [pc, #80]	@ (80198f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80198a4:	881b      	ldrh	r3, [r3, #0]
 80198a6:	4403      	add	r3, r0
 80198a8:	429a      	cmp	r2, r3
 80198aa:	da1a      	bge.n	80198e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80198ac:	4b12      	ldr	r3, [pc, #72]	@ (80198f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80198ae:	1a10      	subs	r0, r2, r0
 80198b0:	210e      	movs	r1, #14
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	fb01 3000 	mla	r0, r1, r0, r3
 80198b8:	7b03      	ldrb	r3, [r0, #12]
 80198ba:	f003 031f 	and.w	r3, r3, #31
 80198be:	2b0b      	cmp	r3, #11
 80198c0:	d10b      	bne.n	80198da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80198c2:	8903      	ldrh	r3, [r0, #8]
 80198c4:	8940      	ldrh	r0, [r0, #10]
 80198c6:	4358      	muls	r0, r3
 80198c8:	4b09      	ldr	r3, [pc, #36]	@ (80198f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80198ca:	3003      	adds	r0, #3
 80198cc:	6819      	ldr	r1, [r3, #0]
 80198ce:	f020 0303 	bic.w	r3, r0, #3
 80198d2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80198d6:	4418      	add	r0, r3
 80198d8:	4770      	bx	lr
 80198da:	2b0d      	cmp	r3, #13
 80198dc:	d101      	bne.n	80198e2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80198de:	300d      	adds	r0, #13
 80198e0:	4770      	bx	lr
 80198e2:	2000      	movs	r0, #0
 80198e4:	4770      	bx	lr
 80198e6:	bf00      	nop
 80198e8:	240259bc 	.word	0x240259bc
 80198ec:	240259c4 	.word	0x240259c4
 80198f0:	240259a0 	.word	0x240259a0
 80198f4:	240259c0 	.word	0x240259c0
 80198f8:	240259a4 	.word	0x240259a4

080198fc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80198fc:	4b1f      	ldr	r3, [pc, #124]	@ (801997c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80198fe:	b510      	push	{r4, lr}
 8019900:	8802      	ldrh	r2, [r0, #0]
 8019902:	881b      	ldrh	r3, [r3, #0]
 8019904:	429a      	cmp	r2, r3
 8019906:	d21a      	bcs.n	801993e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8019908:	4b1d      	ldr	r3, [pc, #116]	@ (8019980 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801990a:	2114      	movs	r1, #20
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	fb01 3102 	mla	r1, r1, r2, r3
 8019912:	7c4b      	ldrb	r3, [r1, #17]
 8019914:	0958      	lsrs	r0, r3, #5
 8019916:	7ccb      	ldrb	r3, [r1, #19]
 8019918:	491a      	ldr	r1, [pc, #104]	@ (8019984 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801991a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801991e:	6809      	ldr	r1, [r1, #0]
 8019920:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8019924:	b2d8      	uxtb	r0, r3
 8019926:	b149      	cbz	r1, 801993c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019928:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801992c:	b132      	cbz	r2, 801993c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801992e:	2b0e      	cmp	r3, #14
 8019930:	d021      	beq.n	8019976 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8019932:	280f      	cmp	r0, #15
 8019934:	d01d      	beq.n	8019972 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8019936:	2810      	cmp	r0, #16
 8019938:	bf08      	it	eq
 801993a:	2002      	moveq	r0, #2
 801993c:	bd10      	pop	{r4, pc}
 801993e:	4912      	ldr	r1, [pc, #72]	@ (8019988 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8019940:	8809      	ldrh	r1, [r1, #0]
 8019942:	4419      	add	r1, r3
 8019944:	428a      	cmp	r2, r1
 8019946:	da09      	bge.n	801995c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8019948:	1ad3      	subs	r3, r2, r3
 801994a:	4a10      	ldr	r2, [pc, #64]	@ (801998c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801994c:	210e      	movs	r1, #14
 801994e:	6812      	ldr	r2, [r2, #0]
 8019950:	fb01 2303 	mla	r3, r1, r3, r2
 8019954:	7b18      	ldrb	r0, [r3, #12]
 8019956:	f000 001f 	and.w	r0, r0, #31
 801995a:	e7ef      	b.n	801993c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801995c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8019960:	429a      	cmp	r2, r3
 8019962:	d108      	bne.n	8019976 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8019964:	f7ea fb6a 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8019968:	6803      	ldr	r3, [r0, #0]
 801996a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019970:	4718      	bx	r3
 8019972:	2001      	movs	r0, #1
 8019974:	e7e2      	b.n	801993c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8019976:	2000      	movs	r0, #0
 8019978:	e7e0      	b.n	801993c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801997a:	bf00      	nop
 801997c:	240259bc 	.word	0x240259bc
 8019980:	240259c4 	.word	0x240259c4
 8019984:	240259a0 	.word	0x240259a0
 8019988:	240259c0 	.word	0x240259c0
 801998c:	240259a4 	.word	0x240259a4

08019990 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019990:	2018      	movs	r0, #24
 8019992:	4770      	bx	lr

08019994 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019994:	2001      	movs	r0, #1
 8019996:	4770      	bx	lr

08019998 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8019998:	4b02      	ldr	r3, [pc, #8]	@ (80199a4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801999a:	8818      	ldrh	r0, [r3, #0]
 801999c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80199a0:	b280      	uxth	r0, r0
 80199a2:	4770      	bx	lr
 80199a4:	2402592e 	.word	0x2402592e

080199a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80199a8:	2bff      	cmp	r3, #255	@ 0xff
 80199aa:	d04c      	beq.n	8019a46 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80199ac:	2a2c      	cmp	r2, #44	@ 0x2c
 80199ae:	d030      	beq.n	8019a12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 80199b0:	d80f      	bhi.n	80199d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80199b2:	2a08      	cmp	r2, #8
 80199b4:	d043      	beq.n	8019a3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80199b6:	d805      	bhi.n	80199c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80199b8:	2a04      	cmp	r2, #4
 80199ba:	d03e      	beq.n	8019a3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80199bc:	2a05      	cmp	r2, #5
 80199be:	d03a      	beq.n	8019a36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80199c0:	2300      	movs	r3, #0
 80199c2:	e024      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80199c4:	2a0a      	cmp	r2, #10
 80199c6:	d03a      	beq.n	8019a3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80199c8:	d301      	bcc.n	80199ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80199ca:	2a0b      	cmp	r2, #11
 80199cc:	d1f8      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80199ce:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80199d0:	e01d      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80199d2:	2a30      	cmp	r2, #48	@ 0x30
 80199d4:	d035      	beq.n	8019a42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80199d6:	d80a      	bhi.n	80199ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80199d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80199da:	684b      	ldr	r3, [r1, #4]
 80199dc:	d023      	beq.n	8019a26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80199de:	d90d      	bls.n	80199fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 80199e0:	781a      	ldrb	r2, [r3, #0]
 80199e2:	785b      	ldrb	r3, [r3, #1]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1eb      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80199e8:	b98a      	cbnz	r2, 8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80199ea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80199ec:	e00f      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80199ee:	2a32      	cmp	r2, #50	@ 0x32
 80199f0:	d027      	beq.n	8019a42 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80199f2:	d301      	bcc.n	80199f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80199f4:	2a33      	cmp	r2, #51	@ 0x33
 80199f6:	d1e3      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80199f8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80199fa:	e008      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80199fc:	781a      	ldrb	r2, [r3, #0]
 80199fe:	785b      	ldrb	r3, [r3, #1]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d1dd      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a04:	2a00      	cmp	r2, #0
 8019a06:	d0f0      	beq.n	80199ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8019a08:	2a01      	cmp	r2, #1
 8019a0a:	d1d9      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a0c:	6943      	ldr	r3, [r0, #20]
 8019a0e:	4618      	mov	r0, r3
 8019a10:	4770      	bx	lr
 8019a12:	684b      	ldr	r3, [r1, #4]
 8019a14:	781a      	ldrb	r2, [r3, #0]
 8019a16:	785b      	ldrb	r3, [r3, #1]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d1d1      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a1c:	b14a      	cbz	r2, 8019a32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8019a1e:	2a01      	cmp	r2, #1
 8019a20:	bf08      	it	eq
 8019a22:	68c3      	ldreq	r3, [r0, #12]
 8019a24:	e7f3      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a26:	781a      	ldrb	r2, [r3, #0]
 8019a28:	785b      	ldrb	r3, [r3, #1]
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d1c8      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a2e:	2a00      	cmp	r2, #0
 8019a30:	d1ed      	bne.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a32:	69c3      	ldr	r3, [r0, #28]
 8019a34:	e7eb      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a36:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8019a38:	e7e9      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a3a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019a3c:	e7e7      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a3e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8019a40:	e7e5      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a42:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8019a44:	e7e3      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a46:	2a2c      	cmp	r2, #44	@ 0x2c
 8019a48:	d030      	beq.n	8019aac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8019a4a:	d80f      	bhi.n	8019a6c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8019a4c:	2a08      	cmp	r2, #8
 8019a4e:	d042      	beq.n	8019ad6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019a50:	d805      	bhi.n	8019a5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8019a52:	2a04      	cmp	r2, #4
 8019a54:	d03d      	beq.n	8019ad2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8019a56:	2a05      	cmp	r2, #5
 8019a58:	d1b2      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a5a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019a5c:	e7d7      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a5e:	2a0a      	cmp	r2, #10
 8019a60:	d039      	beq.n	8019ad6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8019a62:	d301      	bcc.n	8019a68 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8019a64:	2a0b      	cmp	r2, #11
 8019a66:	d1ab      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a68:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8019a6a:	e7d0      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a6c:	2a30      	cmp	r2, #48	@ 0x30
 8019a6e:	d034      	beq.n	8019ada <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019a70:	d80b      	bhi.n	8019a8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8019a72:	2a2e      	cmp	r2, #46	@ 0x2e
 8019a74:	684b      	ldr	r3, [r1, #4]
 8019a76:	d023      	beq.n	8019ac0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8019a78:	d90e      	bls.n	8019a98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8019a7a:	781a      	ldrb	r2, [r3, #0]
 8019a7c:	785b      	ldrb	r3, [r3, #1]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d19e      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a82:	2a00      	cmp	r2, #0
 8019a84:	d1c3      	bne.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a86:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8019a88:	e7c1      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a8a:	2a32      	cmp	r2, #50	@ 0x32
 8019a8c:	d025      	beq.n	8019ada <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8019a8e:	d301      	bcc.n	8019a94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8019a90:	2a33      	cmp	r2, #51	@ 0x33
 8019a92:	d195      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019a94:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8019a96:	e7ba      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019a98:	781a      	ldrb	r2, [r3, #0]
 8019a9a:	785b      	ldrb	r3, [r3, #1]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d18f      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019aa0:	2a00      	cmp	r2, #0
 8019aa2:	d0f0      	beq.n	8019a86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8019aa4:	2a01      	cmp	r2, #1
 8019aa6:	d18b      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019aa8:	6983      	ldr	r3, [r0, #24]
 8019aaa:	e7b0      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019aac:	684b      	ldr	r3, [r1, #4]
 8019aae:	781a      	ldrb	r2, [r3, #0]
 8019ab0:	785b      	ldrb	r3, [r3, #1]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d184      	bne.n	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019ab6:	b152      	cbz	r2, 8019ace <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8019ab8:	2a01      	cmp	r2, #1
 8019aba:	bf08      	it	eq
 8019abc:	6903      	ldreq	r3, [r0, #16]
 8019abe:	e7a6      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ac0:	781a      	ldrb	r2, [r3, #0]
 8019ac2:	785b      	ldrb	r3, [r3, #1]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	f47f af7b 	bne.w	80199c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019aca:	2a00      	cmp	r2, #0
 8019acc:	d19f      	bne.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ace:	6a03      	ldr	r3, [r0, #32]
 8019ad0:	e79d      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ad2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019ad4:	e79b      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ad6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8019ad8:	e799      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8019ada:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8019adc:	e797      	b.n	8019a0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

08019ade <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae2:	b085      	sub	sp, #20
 8019ae4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019ae6:	9203      	str	r2, [sp, #12]
 8019ae8:	6870      	ldr	r0, [r6, #4]
 8019aea:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019aee:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8019af2:	9101      	str	r1, [sp, #4]
 8019af4:	fa1f f885 	uxth.w	r8, r5
 8019af8:	43ed      	mvns	r5, r5
 8019afa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8019afe:	b2ed      	uxtb	r5, r5
 8019b00:	fb00 2404 	mla	r4, r0, r4, r2
 8019b04:	6832      	ldr	r2, [r6, #0]
 8019b06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019b0a:	4414      	add	r4, r2
 8019b0c:	f8dc 2000 	ldr.w	r2, [ip]
 8019b10:	9202      	str	r2, [sp, #8]
 8019b12:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019b16:	f102 0e04 	add.w	lr, r2, #4
 8019b1a:	9a01      	ldr	r2, [sp, #4]
 8019b1c:	2a00      	cmp	r2, #0
 8019b1e:	dc03      	bgt.n	8019b28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019b20:	9a03      	ldr	r2, [sp, #12]
 8019b22:	2a00      	cmp	r2, #0
 8019b24:	f340 8116 	ble.w	8019d54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019b28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019b2a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019b2e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019b32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019b34:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019b38:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	dd0e      	ble.n	8019b5e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019b40:	1406      	asrs	r6, r0, #16
 8019b42:	d405      	bmi.n	8019b50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019b44:	4556      	cmp	r6, sl
 8019b46:	da03      	bge.n	8019b50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019b48:	1416      	asrs	r6, r2, #16
 8019b4a:	d401      	bmi.n	8019b50 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019b4c:	454e      	cmp	r6, r9
 8019b4e:	db07      	blt.n	8019b60 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019b50:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019b52:	3b01      	subs	r3, #1
 8019b54:	3403      	adds	r4, #3
 8019b56:	4430      	add	r0, r6
 8019b58:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8019b5a:	4432      	add	r2, r6
 8019b5c:	e7ee      	b.n	8019b3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019b5e:	d063      	beq.n	8019c28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019b60:	1e5e      	subs	r6, r3, #1
 8019b62:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8019b64:	fb07 0706 	mla	r7, r7, r6, r0
 8019b68:	143f      	asrs	r7, r7, #16
 8019b6a:	d454      	bmi.n	8019c16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019b6c:	4557      	cmp	r7, sl
 8019b6e:	da52      	bge.n	8019c16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019b70:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019b72:	fb07 2606 	mla	r6, r7, r6, r2
 8019b76:	1436      	asrs	r6, r6, #16
 8019b78:	d44d      	bmi.n	8019c16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019b7a:	454e      	cmp	r6, r9
 8019b7c:	da4b      	bge.n	8019c16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019b7e:	1ce6      	adds	r6, r4, #3
 8019b80:	4699      	mov	r9, r3
 8019b82:	f1b9 0f00 	cmp.w	r9, #0
 8019b86:	f106 0603 	add.w	r6, r6, #3
 8019b8a:	dd48      	ble.n	8019c1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019b8c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019b90:	1417      	asrs	r7, r2, #16
 8019b92:	9902      	ldr	r1, [sp, #8]
 8019b94:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019b98:	f109 39ff 	add.w	r9, r9, #4294967295
 8019b9c:	fb0b 1707 	mla	r7, fp, r7, r1
 8019ba0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019ba4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019ba6:	f817 700a 	ldrb.w	r7, [r7, sl]
 8019baa:	fb1b fb05 	smulbb	fp, fp, r5
 8019bae:	4408      	add	r0, r1
 8019bb0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019bb2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019bb6:	440a      	add	r2, r1
 8019bb8:	eb0e 0a07 	add.w	sl, lr, r7
 8019bbc:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8019bc0:	fb07 b708 	mla	r7, r7, r8, fp
 8019bc4:	b2bf      	uxth	r7, r7
 8019bc6:	f107 0b01 	add.w	fp, r7, #1
 8019bca:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019bce:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019bd2:	fb1b fb05 	smulbb	fp, fp, r5
 8019bd6:	123f      	asrs	r7, r7, #8
 8019bd8:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019bdc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019be0:	fb07 b708 	mla	r7, r7, r8, fp
 8019be4:	b2bf      	uxth	r7, r7
 8019be6:	f107 0b01 	add.w	fp, r7, #1
 8019bea:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019bee:	123f      	asrs	r7, r7, #8
 8019bf0:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019bf4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019bf8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019bfc:	fb1a fa05 	smulbb	sl, sl, r5
 8019c00:	fb07 a708 	mla	r7, r7, r8, sl
 8019c04:	b2bf      	uxth	r7, r7
 8019c06:	f107 0a01 	add.w	sl, r7, #1
 8019c0a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019c0e:	123f      	asrs	r7, r7, #8
 8019c10:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019c14:	e7b5      	b.n	8019b82 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019c16:	2700      	movs	r7, #0
 8019c18:	1bde      	subs	r6, r3, r7
 8019c1a:	2e00      	cmp	r6, #0
 8019c1c:	dc42      	bgt.n	8019ca4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8019c1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019c22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c26:	441c      	add	r4, r3
 8019c28:	9b01      	ldr	r3, [sp, #4]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	f340 8092 	ble.w	8019d54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019c30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019c34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019c36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c3e:	eef0 6a62 	vmov.f32	s13, s5
 8019c42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019c46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c4e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8019c52:	eef0 6a43 	vmov.f32	s13, s6
 8019c56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c5a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8019c5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019c62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019c66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019c6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019c72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c76:	ee12 2a90 	vmov	r2, s5
 8019c7a:	eef0 2a47 	vmov.f32	s5, s14
 8019c7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c82:	ee13 2a10 	vmov	r2, s6
 8019c86:	9311      	str	r3, [sp, #68]	@ 0x44
 8019c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019c8a:	eeb0 3a67 	vmov.f32	s6, s15
 8019c8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019c92:	9312      	str	r3, [sp, #72]	@ 0x48
 8019c94:	9b01      	ldr	r3, [sp, #4]
 8019c96:	9a03      	ldr	r2, [sp, #12]
 8019c98:	3b01      	subs	r3, #1
 8019c9a:	9301      	str	r3, [sp, #4]
 8019c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019c9e:	bf08      	it	eq
 8019ca0:	4613      	moveq	r3, r2
 8019ca2:	e73a      	b.n	8019b1a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019ca4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019ca8:	d44e      	bmi.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019caa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019cae:	4556      	cmp	r6, sl
 8019cb0:	dd4a      	ble.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019cb2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8019cb6:	d447      	bmi.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019cb8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8019cbc:	4559      	cmp	r1, fp
 8019cbe:	dd43      	ble.n	8019d48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019cc0:	fa0f f986 	sxth.w	r9, r6
 8019cc4:	9902      	ldr	r1, [sp, #8]
 8019cc6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019cca:	fb0b 1909 	mla	r9, fp, r9, r1
 8019cce:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019cd2:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019cd6:	fb1b fb05 	smulbb	fp, fp, r5
 8019cda:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019cde:	eb0e 0a09 	add.w	sl, lr, r9
 8019ce2:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8019ce6:	fb09 b908 	mla	r9, r9, r8, fp
 8019cea:	fa1f f989 	uxth.w	r9, r9
 8019cee:	f109 0b01 	add.w	fp, r9, #1
 8019cf2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019cf6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019cfa:	f804 9006 	strb.w	r9, [r4, r6]
 8019cfe:	4426      	add	r6, r4
 8019d00:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019d04:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019d08:	fb1b fb05 	smulbb	fp, fp, r5
 8019d0c:	fb09 b908 	mla	r9, r9, r8, fp
 8019d10:	fa1f f989 	uxth.w	r9, r9
 8019d14:	f109 0b01 	add.w	fp, r9, #1
 8019d18:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d20:	f886 9001 	strb.w	r9, [r6, #1]
 8019d24:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019d28:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019d2c:	fb1a fa05 	smulbb	sl, sl, r5
 8019d30:	fb09 a908 	mla	r9, r9, r8, sl
 8019d34:	fa1f f989 	uxth.w	r9, r9
 8019d38:	f109 0a01 	add.w	sl, r9, #1
 8019d3c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019d40:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019d44:	f886 9002 	strb.w	r9, [r6, #2]
 8019d48:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019d4a:	3701      	adds	r7, #1
 8019d4c:	4408      	add	r0, r1
 8019d4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8019d50:	440a      	add	r2, r1
 8019d52:	e761      	b.n	8019c18 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019d54:	b005      	add	sp, #20
 8019d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d5a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d5e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8019d60:	4693      	mov	fp, r2
 8019d62:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8019d64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019d68:	6868      	ldr	r0, [r5, #4]
 8019d6a:	6877      	ldr	r7, [r6, #4]
 8019d6c:	9100      	str	r1, [sp, #0]
 8019d6e:	3704      	adds	r7, #4
 8019d70:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8019d74:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8019d78:	fb00 2404 	mla	r4, r0, r4, r2
 8019d7c:	682a      	ldr	r2, [r5, #0]
 8019d7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019d82:	4414      	add	r4, r2
 8019d84:	6832      	ldr	r2, [r6, #0]
 8019d86:	9201      	str	r2, [sp, #4]
 8019d88:	9a00      	ldr	r2, [sp, #0]
 8019d8a:	2a00      	cmp	r2, #0
 8019d8c:	dc03      	bgt.n	8019d96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019d8e:	f1bb 0f00 	cmp.w	fp, #0
 8019d92:	f340 80bc 	ble.w	8019f0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019d96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019d98:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8019d9c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019da0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019da2:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8019da6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	dd0c      	ble.n	8019dc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019dae:	1405      	asrs	r5, r0, #16
 8019db0:	d405      	bmi.n	8019dbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019db2:	4555      	cmp	r5, sl
 8019db4:	da03      	bge.n	8019dbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019db6:	1415      	asrs	r5, r2, #16
 8019db8:	d401      	bmi.n	8019dbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019dba:	454d      	cmp	r5, r9
 8019dbc:	db05      	blt.n	8019dca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019dbe:	4440      	add	r0, r8
 8019dc0:	4472      	add	r2, lr
 8019dc2:	3b01      	subs	r3, #1
 8019dc4:	3403      	adds	r4, #3
 8019dc6:	e7f0      	b.n	8019daa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019dc8:	d03f      	beq.n	8019e4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8019dca:	1e5d      	subs	r5, r3, #1
 8019dcc:	fb08 0c05 	mla	ip, r8, r5, r0
 8019dd0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8019dd4:	d42e      	bmi.n	8019e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019dd6:	45d4      	cmp	ip, sl
 8019dd8:	da2c      	bge.n	8019e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019dda:	fb0e 2505 	mla	r5, lr, r5, r2
 8019dde:	142d      	asrs	r5, r5, #16
 8019de0:	d428      	bmi.n	8019e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019de2:	454d      	cmp	r5, r9
 8019de4:	da26      	bge.n	8019e34 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019de6:	1ce5      	adds	r5, r4, #3
 8019de8:	469c      	mov	ip, r3
 8019dea:	f1bc 0f00 	cmp.w	ip, #0
 8019dee:	f105 0503 	add.w	r5, r5, #3
 8019df2:	dd25      	ble.n	8019e40 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8019df4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019df8:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019dfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019e00:	4472      	add	r2, lr
 8019e02:	468a      	mov	sl, r1
 8019e04:	9901      	ldr	r1, [sp, #4]
 8019e06:	fb0a 1909 	mla	r9, sl, r9, r1
 8019e0a:	1401      	asrs	r1, r0, #16
 8019e0c:	4440      	add	r0, r8
 8019e0e:	f819 9001 	ldrb.w	r9, [r9, r1]
 8019e12:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019e16:	eb07 0a09 	add.w	sl, r7, r9
 8019e1a:	f817 9009 	ldrb.w	r9, [r7, r9]
 8019e1e:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019e22:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019e26:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019e2a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019e2e:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019e32:	e7da      	b.n	8019dea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019e34:	2500      	movs	r5, #0
 8019e36:	eba3 0c05 	sub.w	ip, r3, r5
 8019e3a:	f1bc 0f00 	cmp.w	ip, #0
 8019e3e:	dc3b      	bgt.n	8019eb8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019e40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e48:	441c      	add	r4, r3
 8019e4a:	9b00      	ldr	r3, [sp, #0]
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	dd5e      	ble.n	8019f0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019e50:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019e54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019e56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019e5a:	eeb0 6a62 	vmov.f32	s12, s5
 8019e5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019e62:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019e66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e6a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8019e6e:	eeb0 6a43 	vmov.f32	s12, s6
 8019e72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e76:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8019e7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e82:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e92:	ee12 2a90 	vmov	r2, s5
 8019e96:	eef0 2a47 	vmov.f32	s5, s14
 8019e9a:	fb92 f8f3 	sdiv	r8, r2, r3
 8019e9e:	ee13 2a10 	vmov	r2, s6
 8019ea2:	eeb0 3a67 	vmov.f32	s6, s15
 8019ea6:	fb92 fef3 	sdiv	lr, r2, r3
 8019eaa:	9b00      	ldr	r3, [sp, #0]
 8019eac:	3b01      	subs	r3, #1
 8019eae:	9300      	str	r3, [sp, #0]
 8019eb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019eb2:	bf08      	it	eq
 8019eb4:	465b      	moveq	r3, fp
 8019eb6:	e767      	b.n	8019d88 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019eb8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019ebc:	d423      	bmi.n	8019f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ebe:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8019ec2:	45cc      	cmp	ip, r9
 8019ec4:	dd1f      	ble.n	8019f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ec6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019eca:	d41c      	bmi.n	8019f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ecc:	68f1      	ldr	r1, [r6, #12]
 8019ece:	4551      	cmp	r1, sl
 8019ed0:	dd19      	ble.n	8019f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019ed2:	fa0f fc8c 	sxth.w	ip, ip
 8019ed6:	9901      	ldr	r1, [sp, #4]
 8019ed8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8019edc:	f81c c009 	ldrb.w	ip, [ip, r9]
 8019ee0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019ee4:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8019ee8:	eb07 090c 	add.w	r9, r7, ip
 8019eec:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8019ef0:	f804 a00c 	strb.w	sl, [r4, ip]
 8019ef4:	44a4      	add	ip, r4
 8019ef6:	f899 a001 	ldrb.w	sl, [r9, #1]
 8019efa:	f88c a001 	strb.w	sl, [ip, #1]
 8019efe:	f899 9002 	ldrb.w	r9, [r9, #2]
 8019f02:	f88c 9002 	strb.w	r9, [ip, #2]
 8019f06:	4440      	add	r0, r8
 8019f08:	4472      	add	r2, lr
 8019f0a:	3501      	adds	r5, #1
 8019f0c:	e793      	b.n	8019e36 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8019f0e:	b003      	add	sp, #12
 8019f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f14 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f18:	b085      	sub	sp, #20
 8019f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019f1e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019f20:	9202      	str	r2, [sp, #8]
 8019f22:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8019f26:	6860      	ldr	r0, [r4, #4]
 8019f28:	9203      	str	r2, [sp, #12]
 8019f2a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8019f2e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8019f32:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8019f36:	fb00 2505 	mla	r5, r0, r5, r2
 8019f3a:	6822      	ldr	r2, [r4, #0]
 8019f3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f40:	4415      	add	r5, r2
 8019f42:	f8dc 2000 	ldr.w	r2, [ip]
 8019f46:	9200      	str	r2, [sp, #0]
 8019f48:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019f4c:	3204      	adds	r2, #4
 8019f4e:	9201      	str	r2, [sp, #4]
 8019f50:	2900      	cmp	r1, #0
 8019f52:	dc03      	bgt.n	8019f5c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019f54:	9a02      	ldr	r2, [sp, #8]
 8019f56:	2a00      	cmp	r2, #0
 8019f58:	f340 8127 	ble.w	801a1aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8019f5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f5e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019f62:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019f66:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019f68:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019f6c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	dd0d      	ble.n	8019f90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019f74:	1422      	asrs	r2, r4, #16
 8019f76:	d405      	bmi.n	8019f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019f78:	4542      	cmp	r2, r8
 8019f7a:	da03      	bge.n	8019f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019f7c:	1402      	asrs	r2, r0, #16
 8019f7e:	d401      	bmi.n	8019f84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019f80:	42ba      	cmp	r2, r7
 8019f82:	db06      	blt.n	8019f92 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019f84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019f86:	4474      	add	r4, lr
 8019f88:	3b01      	subs	r3, #1
 8019f8a:	3503      	adds	r5, #3
 8019f8c:	4410      	add	r0, r2
 8019f8e:	e7ef      	b.n	8019f70 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019f90:	d075      	beq.n	801a07e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019f92:	1e5a      	subs	r2, r3, #1
 8019f94:	fb0e 4602 	mla	r6, lr, r2, r4
 8019f98:	1436      	asrs	r6, r6, #16
 8019f9a:	d465      	bmi.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019f9c:	4546      	cmp	r6, r8
 8019f9e:	da63      	bge.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019fa0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8019fa2:	fb06 0202 	mla	r2, r6, r2, r0
 8019fa6:	1412      	asrs	r2, r2, #16
 8019fa8:	d45e      	bmi.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019faa:	42ba      	cmp	r2, r7
 8019fac:	da5c      	bge.n	801a068 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019fae:	1cef      	adds	r7, r5, #3
 8019fb0:	4699      	mov	r9, r3
 8019fb2:	f1b9 0f00 	cmp.w	r9, #0
 8019fb6:	dd5d      	ble.n	801a074 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8019fb8:	1402      	asrs	r2, r0, #16
 8019fba:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019fbe:	1426      	asrs	r6, r4, #16
 8019fc0:	4692      	mov	sl, r2
 8019fc2:	9a00      	ldr	r2, [sp, #0]
 8019fc4:	fb08 220a 	mla	r2, r8, sl, r2
 8019fc8:	5d92      	ldrb	r2, [r2, r6]
 8019fca:	9e01      	ldr	r6, [sp, #4]
 8019fcc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019fd0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019fd4:	d041      	beq.n	801a05a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019fd6:	9a03      	ldr	r2, [sp, #12]
 8019fd8:	fa5f fb86 	uxtb.w	fp, r6
 8019fdc:	fb02 f808 	mul.w	r8, r2, r8
 8019fe0:	f108 0201 	add.w	r2, r8, #1
 8019fe4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019fe8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8019fec:	1212      	asrs	r2, r2, #8
 8019fee:	fa1f fa82 	uxth.w	sl, r2
 8019ff2:	43d2      	mvns	r2, r2
 8019ff4:	fb1b fb0a 	smulbb	fp, fp, sl
 8019ff8:	b2d2      	uxtb	r2, r2
 8019ffa:	fb08 b802 	mla	r8, r8, r2, fp
 8019ffe:	fa1f f888 	uxth.w	r8, r8
 801a002:	f108 0b01 	add.w	fp, r8, #1
 801a006:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a00a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a00e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a012:	fb1b fb0a 	smulbb	fp, fp, sl
 801a016:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a01a:	fb16 fa0a 	smulbb	sl, r6, sl
 801a01e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a022:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a026:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a02a:	fb06 aa02 	mla	sl, r6, r2, sl
 801a02e:	fb08 b802 	mla	r8, r8, r2, fp
 801a032:	fa1f fa8a 	uxth.w	sl, sl
 801a036:	fa1f f888 	uxth.w	r8, r8
 801a03a:	f10a 0601 	add.w	r6, sl, #1
 801a03e:	f108 0b01 	add.w	fp, r8, #1
 801a042:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a046:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a04a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a04e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a052:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a056:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a05a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a05c:	4474      	add	r4, lr
 801a05e:	3703      	adds	r7, #3
 801a060:	f109 39ff 	add.w	r9, r9, #4294967295
 801a064:	4410      	add	r0, r2
 801a066:	e7a4      	b.n	8019fb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a068:	f04f 0800 	mov.w	r8, #0
 801a06c:	eba3 0208 	sub.w	r2, r3, r8
 801a070:	2a00      	cmp	r2, #0
 801a072:	dc3b      	bgt.n	801a0ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801a074:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a07c:	441d      	add	r5, r3
 801a07e:	2900      	cmp	r1, #0
 801a080:	f340 8093 	ble.w	801a1aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a084:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a08a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a08e:	3901      	subs	r1, #1
 801a090:	eeb0 6a62 	vmov.f32	s12, s5
 801a094:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a098:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a09c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0a0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a0a4:	eeb0 6a43 	vmov.f32	s12, s6
 801a0a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a0ac:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a0b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a0b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a0b8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a0bc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a0c0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a0c4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a0c8:	ee12 2a90 	vmov	r2, s5
 801a0cc:	eef0 2a47 	vmov.f32	s5, s14
 801a0d0:	fb92 fef3 	sdiv	lr, r2, r3
 801a0d4:	ee13 2a10 	vmov	r2, s6
 801a0d8:	eeb0 3a67 	vmov.f32	s6, s15
 801a0dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a0e0:	9a02      	ldr	r2, [sp, #8]
 801a0e2:	9312      	str	r3, [sp, #72]	@ 0x48
 801a0e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0e6:	bf08      	it	eq
 801a0e8:	4613      	moveq	r3, r2
 801a0ea:	e731      	b.n	8019f50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a0ec:	1427      	asrs	r7, r4, #16
 801a0ee:	d456      	bmi.n	801a19e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a0f0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a0f4:	42be      	cmp	r6, r7
 801a0f6:	dd52      	ble.n	801a19e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a0f8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a0fc:	d44f      	bmi.n	801a19e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a0fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a102:	454a      	cmp	r2, r9
 801a104:	dd4b      	ble.n	801a19e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a106:	9a00      	ldr	r2, [sp, #0]
 801a108:	b236      	sxth	r6, r6
 801a10a:	fb09 2606 	mla	r6, r9, r6, r2
 801a10e:	5df2      	ldrb	r2, [r6, r7]
 801a110:	9e01      	ldr	r6, [sp, #4]
 801a112:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a116:	0e3a      	lsrs	r2, r7, #24
 801a118:	d041      	beq.n	801a19e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a11a:	9e03      	ldr	r6, [sp, #12]
 801a11c:	fa5f fb87 	uxtb.w	fp, r7
 801a120:	4372      	muls	r2, r6
 801a122:	1c56      	adds	r6, r2, #1
 801a124:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a128:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a12c:	1212      	asrs	r2, r2, #8
 801a12e:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a132:	fa1f fa82 	uxth.w	sl, r2
 801a136:	43d2      	mvns	r2, r2
 801a138:	fb1b fb0a 	smulbb	fp, fp, sl
 801a13c:	b2d2      	uxtb	r2, r2
 801a13e:	fb09 b902 	mla	r9, r9, r2, fp
 801a142:	fa1f f989 	uxth.w	r9, r9
 801a146:	f109 0b01 	add.w	fp, r9, #1
 801a14a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a14e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a152:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a156:	fb1b fb0a 	smulbb	fp, fp, sl
 801a15a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a15e:	fb17 fa0a 	smulbb	sl, r7, sl
 801a162:	f805 9006 	strb.w	r9, [r5, r6]
 801a166:	442e      	add	r6, r5
 801a168:	78b7      	ldrb	r7, [r6, #2]
 801a16a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a16e:	fb07 aa02 	mla	sl, r7, r2, sl
 801a172:	fb09 b902 	mla	r9, r9, r2, fp
 801a176:	fa1f fa8a 	uxth.w	sl, sl
 801a17a:	fa1f f989 	uxth.w	r9, r9
 801a17e:	f10a 0701 	add.w	r7, sl, #1
 801a182:	f109 0b01 	add.w	fp, r9, #1
 801a186:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a18a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a18e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a192:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a196:	f886 a002 	strb.w	sl, [r6, #2]
 801a19a:	f886 9001 	strb.w	r9, [r6, #1]
 801a19e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a1a0:	4474      	add	r4, lr
 801a1a2:	f108 0801 	add.w	r8, r8, #1
 801a1a6:	4410      	add	r0, r2
 801a1a8:	e760      	b.n	801a06c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801a1aa:	b005      	add	sp, #20
 801a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a1b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b4:	b085      	sub	sp, #20
 801a1b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a1ba:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801a1bc:	9203      	str	r2, [sp, #12]
 801a1be:	6868      	ldr	r0, [r5, #4]
 801a1c0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a1c4:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801a1c8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801a1cc:	fb00 2404 	mla	r4, r0, r4, r2
 801a1d0:	682a      	ldr	r2, [r5, #0]
 801a1d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a1d6:	4414      	add	r4, r2
 801a1d8:	f8dc 2000 	ldr.w	r2, [ip]
 801a1dc:	9201      	str	r2, [sp, #4]
 801a1de:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a1e2:	3204      	adds	r2, #4
 801a1e4:	9202      	str	r2, [sp, #8]
 801a1e6:	2900      	cmp	r1, #0
 801a1e8:	dc03      	bgt.n	801a1f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a1ea:	9a03      	ldr	r2, [sp, #12]
 801a1ec:	2a00      	cmp	r2, #0
 801a1ee:	f340 8137 	ble.w	801a460 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a1f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a1f4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a1f8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a1fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a1fe:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a202:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a206:	2b00      	cmp	r3, #0
 801a208:	dd0d      	ble.n	801a226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a20a:	1405      	asrs	r5, r0, #16
 801a20c:	d405      	bmi.n	801a21a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a20e:	4545      	cmp	r5, r8
 801a210:	da03      	bge.n	801a21a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a212:	1415      	asrs	r5, r2, #16
 801a214:	d401      	bmi.n	801a21a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a216:	42bd      	cmp	r5, r7
 801a218:	db06      	blt.n	801a228 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a21a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801a21c:	4470      	add	r0, lr
 801a21e:	3b01      	subs	r3, #1
 801a220:	3403      	adds	r4, #3
 801a222:	442a      	add	r2, r5
 801a224:	e7ef      	b.n	801a206 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801a226:	d070      	beq.n	801a30a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801a228:	1e5d      	subs	r5, r3, #1
 801a22a:	fb0e 0605 	mla	r6, lr, r5, r0
 801a22e:	1436      	asrs	r6, r6, #16
 801a230:	d462      	bmi.n	801a2f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a232:	4546      	cmp	r6, r8
 801a234:	da60      	bge.n	801a2f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a236:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a238:	fb06 2505 	mla	r5, r6, r5, r2
 801a23c:	142d      	asrs	r5, r5, #16
 801a23e:	d45b      	bmi.n	801a2f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a240:	42bd      	cmp	r5, r7
 801a242:	da59      	bge.n	801a2f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a244:	1ce5      	adds	r5, r4, #3
 801a246:	469a      	mov	sl, r3
 801a248:	f1ba 0f00 	cmp.w	sl, #0
 801a24c:	dd58      	ble.n	801a300 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801a24e:	1416      	asrs	r6, r2, #16
 801a250:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a254:	1407      	asrs	r7, r0, #16
 801a256:	46b1      	mov	r9, r6
 801a258:	9e01      	ldr	r6, [sp, #4]
 801a25a:	fb08 6609 	mla	r6, r8, r9, r6
 801a25e:	5df6      	ldrb	r6, [r6, r7]
 801a260:	9f02      	ldr	r7, [sp, #8]
 801a262:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801a266:	0e37      	lsrs	r7, r6, #24
 801a268:	2fff      	cmp	r7, #255	@ 0xff
 801a26a:	f000 80f0 	beq.w	801a44e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a26e:	fa5f f887 	uxtb.w	r8, r7
 801a272:	b3d7      	cbz	r7, 801a2ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a274:	fa1f f788 	uxth.w	r7, r8
 801a278:	ea6f 0808 	mvn.w	r8, r8
 801a27c:	fa5f fb86 	uxtb.w	fp, r6
 801a280:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801a284:	fa5f f888 	uxtb.w	r8, r8
 801a288:	fb1b fb07 	smulbb	fp, fp, r7
 801a28c:	fb09 b908 	mla	r9, r9, r8, fp
 801a290:	fa1f f989 	uxth.w	r9, r9
 801a294:	f109 0b01 	add.w	fp, r9, #1
 801a298:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a29c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a2a0:	fb1b fb08 	smulbb	fp, fp, r8
 801a2a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2a8:	f805 9c03 	strb.w	r9, [r5, #-3]
 801a2ac:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801a2b0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a2b4:	fb09 b907 	mla	r9, r9, r7, fp
 801a2b8:	fa1f f989 	uxth.w	r9, r9
 801a2bc:	f109 0b01 	add.w	fp, r9, #1
 801a2c0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2c8:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a2cc:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801a2d0:	fb19 f808 	smulbb	r8, r9, r8
 801a2d4:	fb06 8607 	mla	r6, r6, r7, r8
 801a2d8:	b2b6      	uxth	r6, r6
 801a2da:	f106 0801 	add.w	r8, r6, #1
 801a2de:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801a2e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a2e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 801a2ea:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a2ec:	4470      	add	r0, lr
 801a2ee:	3503      	adds	r5, #3
 801a2f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2f4:	4432      	add	r2, r6
 801a2f6:	e7a7      	b.n	801a248 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a2f8:	2600      	movs	r6, #0
 801a2fa:	1b9d      	subs	r5, r3, r6
 801a2fc:	2d00      	cmp	r5, #0
 801a2fe:	dc3b      	bgt.n	801a378 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a308:	441c      	add	r4, r3
 801a30a:	2900      	cmp	r1, #0
 801a30c:	f340 80a8 	ble.w	801a460 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a310:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a316:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a31a:	3901      	subs	r1, #1
 801a31c:	eeb0 6a62 	vmov.f32	s12, s5
 801a320:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a324:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a328:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a32c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a330:	eeb0 6a43 	vmov.f32	s12, s6
 801a334:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a338:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a33c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a340:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a344:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a348:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a34c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a350:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a354:	ee12 2a90 	vmov	r2, s5
 801a358:	eef0 2a47 	vmov.f32	s5, s14
 801a35c:	fb92 fef3 	sdiv	lr, r2, r3
 801a360:	ee13 2a10 	vmov	r2, s6
 801a364:	eeb0 3a67 	vmov.f32	s6, s15
 801a368:	fb92 f3f3 	sdiv	r3, r2, r3
 801a36c:	9a03      	ldr	r2, [sp, #12]
 801a36e:	9312      	str	r3, [sp, #72]	@ 0x48
 801a370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a372:	bf08      	it	eq
 801a374:	4613      	moveq	r3, r2
 801a376:	e736      	b.n	801a1e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a378:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a37c:	d457      	bmi.n	801a42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a37e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801a382:	4547      	cmp	r7, r8
 801a384:	dd53      	ble.n	801a42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a386:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a38a:	d450      	bmi.n	801a42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a38c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801a390:	454d      	cmp	r5, r9
 801a392:	dd4c      	ble.n	801a42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a394:	9d01      	ldr	r5, [sp, #4]
 801a396:	b23f      	sxth	r7, r7
 801a398:	fb09 5707 	mla	r7, r9, r7, r5
 801a39c:	f817 5008 	ldrb.w	r5, [r7, r8]
 801a3a0:	9f02      	ldr	r7, [sp, #8]
 801a3a2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801a3a6:	0e2f      	lsrs	r7, r5, #24
 801a3a8:	2fff      	cmp	r7, #255	@ 0xff
 801a3aa:	d045      	beq.n	801a438 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a3ac:	fa5f f987 	uxtb.w	r9, r7
 801a3b0:	b3ef      	cbz	r7, 801a42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a3b2:	fa1f f889 	uxth.w	r8, r9
 801a3b6:	ea6f 0909 	mvn.w	r9, r9
 801a3ba:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a3be:	fa5f fb85 	uxtb.w	fp, r5
 801a3c2:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a3c6:	fa5f f989 	uxtb.w	r9, r9
 801a3ca:	fb1b fb08 	smulbb	fp, fp, r8
 801a3ce:	fb0a ba09 	mla	sl, sl, r9, fp
 801a3d2:	fa1f fa8a 	uxth.w	sl, sl
 801a3d6:	f10a 0b01 	add.w	fp, sl, #1
 801a3da:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a3de:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a3e2:	f804 a007 	strb.w	sl, [r4, r7]
 801a3e6:	4427      	add	r7, r4
 801a3e8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a3ec:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a3f0:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a3f4:	fb1b fb09 	smulbb	fp, fp, r9
 801a3f8:	fb0a ba08 	mla	sl, sl, r8, fp
 801a3fc:	fa1f fa8a 	uxth.w	sl, sl
 801a400:	f10a 0b01 	add.w	fp, sl, #1
 801a404:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a408:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a40c:	f887 a001 	strb.w	sl, [r7, #1]
 801a410:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a414:	fb1a f909 	smulbb	r9, sl, r9
 801a418:	fb05 9508 	mla	r5, r5, r8, r9
 801a41c:	b2ad      	uxth	r5, r5
 801a41e:	f105 0901 	add.w	r9, r5, #1
 801a422:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a426:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a42a:	f887 9002 	strb.w	r9, [r7, #2]
 801a42e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801a430:	4470      	add	r0, lr
 801a432:	3601      	adds	r6, #1
 801a434:	442a      	add	r2, r5
 801a436:	e760      	b.n	801a2fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a438:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a43c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801a440:	55e5      	strb	r5, [r4, r7]
 801a442:	4427      	add	r7, r4
 801a444:	0c2d      	lsrs	r5, r5, #16
 801a446:	f887 8001 	strb.w	r8, [r7, #1]
 801a44a:	70bd      	strb	r5, [r7, #2]
 801a44c:	e7ef      	b.n	801a42e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a44e:	0a37      	lsrs	r7, r6, #8
 801a450:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a454:	0c36      	lsrs	r6, r6, #16
 801a456:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a45a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a45e:	e744      	b.n	801a2ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a460:	b005      	add	sp, #20
 801a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a466 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a46a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a46c:	9201      	str	r2, [sp, #4]
 801a46e:	6870      	ldr	r0, [r6, #4]
 801a470:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801a474:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801a478:	fa1f fe85 	uxth.w	lr, r5
 801a47c:	43ed      	mvns	r5, r5
 801a47e:	f8dc 8000 	ldr.w	r8, [ip]
 801a482:	b2ed      	uxtb	r5, r5
 801a484:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801a488:	fb00 2404 	mla	r4, r0, r4, r2
 801a48c:	6832      	ldr	r2, [r6, #0]
 801a48e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a492:	4414      	add	r4, r2
 801a494:	2900      	cmp	r1, #0
 801a496:	dc03      	bgt.n	801a4a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a498:	9a01      	ldr	r2, [sp, #4]
 801a49a:	2a00      	cmp	r2, #0
 801a49c:	f340 810d 	ble.w	801a6ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a4a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a4a2:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a4a6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a4aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a4ac:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a4b0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	dd0e      	ble.n	801a4d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a4b8:	1406      	asrs	r6, r0, #16
 801a4ba:	d405      	bmi.n	801a4c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a4bc:	4556      	cmp	r6, sl
 801a4be:	da03      	bge.n	801a4c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a4c0:	1416      	asrs	r6, r2, #16
 801a4c2:	d401      	bmi.n	801a4c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a4c4:	454e      	cmp	r6, r9
 801a4c6:	db07      	blt.n	801a4d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a4c8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801a4ca:	3b01      	subs	r3, #1
 801a4cc:	3403      	adds	r4, #3
 801a4ce:	4430      	add	r0, r6
 801a4d0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801a4d2:	4432      	add	r2, r6
 801a4d4:	e7ee      	b.n	801a4b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801a4d6:	d060      	beq.n	801a59a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801a4d8:	1e5e      	subs	r6, r3, #1
 801a4da:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a4dc:	fb07 0706 	mla	r7, r7, r6, r0
 801a4e0:	143f      	asrs	r7, r7, #16
 801a4e2:	d451      	bmi.n	801a588 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a4e4:	4557      	cmp	r7, sl
 801a4e6:	da4f      	bge.n	801a588 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a4e8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a4ea:	fb07 2606 	mla	r6, r7, r6, r2
 801a4ee:	1436      	asrs	r6, r6, #16
 801a4f0:	d44a      	bmi.n	801a588 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a4f2:	454e      	cmp	r6, r9
 801a4f4:	da48      	bge.n	801a588 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a4f6:	1ce6      	adds	r6, r4, #3
 801a4f8:	4699      	mov	r9, r3
 801a4fa:	f1b9 0f00 	cmp.w	r9, #0
 801a4fe:	f106 0603 	add.w	r6, r6, #3
 801a502:	dd45      	ble.n	801a590 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801a504:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a508:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a50c:	1417      	asrs	r7, r2, #16
 801a50e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a512:	fb0b a707 	mla	r7, fp, r7, sl
 801a516:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a51a:	fb1b fb05 	smulbb	fp, fp, r5
 801a51e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a522:	eb08 0a07 	add.w	sl, r8, r7
 801a526:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a52a:	fb07 b70e 	mla	r7, r7, lr, fp
 801a52e:	b2bf      	uxth	r7, r7
 801a530:	f107 0b01 	add.w	fp, r7, #1
 801a534:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a538:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a53c:	fb1b fb05 	smulbb	fp, fp, r5
 801a540:	123f      	asrs	r7, r7, #8
 801a542:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a546:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a54a:	fb07 b70e 	mla	r7, r7, lr, fp
 801a54e:	b2bf      	uxth	r7, r7
 801a550:	f107 0b01 	add.w	fp, r7, #1
 801a554:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a558:	123f      	asrs	r7, r7, #8
 801a55a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a55e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a562:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a566:	fb1a fa05 	smulbb	sl, sl, r5
 801a56a:	fb07 a70e 	mla	r7, r7, lr, sl
 801a56e:	b2bf      	uxth	r7, r7
 801a570:	f107 0a01 	add.w	sl, r7, #1
 801a574:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a578:	123f      	asrs	r7, r7, #8
 801a57a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a57e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801a580:	4438      	add	r0, r7
 801a582:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a584:	443a      	add	r2, r7
 801a586:	e7b8      	b.n	801a4fa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a588:	2700      	movs	r7, #0
 801a58a:	1bde      	subs	r6, r3, r7
 801a58c:	2e00      	cmp	r6, #0
 801a58e:	dc3f      	bgt.n	801a610 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801a590:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a598:	441c      	add	r4, r3
 801a59a:	2900      	cmp	r1, #0
 801a59c:	f340 808d 	ble.w	801a6ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a5a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a5a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a5a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a5aa:	3901      	subs	r1, #1
 801a5ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a5b0:	eef0 6a62 	vmov.f32	s13, s5
 801a5b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a5b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a5bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5c0:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801a5c4:	eef0 6a43 	vmov.f32	s13, s6
 801a5c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5cc:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801a5d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a5d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a5d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a5dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a5e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a5e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a5e8:	ee12 2a90 	vmov	r2, s5
 801a5ec:	eef0 2a47 	vmov.f32	s5, s14
 801a5f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5f4:	ee13 2a10 	vmov	r2, s6
 801a5f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a5fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a5fc:	eeb0 3a67 	vmov.f32	s6, s15
 801a600:	fb92 f3f3 	sdiv	r3, r2, r3
 801a604:	9a01      	ldr	r2, [sp, #4]
 801a606:	9310      	str	r3, [sp, #64]	@ 0x40
 801a608:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a60a:	bf08      	it	eq
 801a60c:	4613      	moveq	r3, r2
 801a60e:	e741      	b.n	801a494 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a610:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a614:	d44b      	bmi.n	801a6ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a616:	f8dc b008 	ldr.w	fp, [ip, #8]
 801a61a:	45cb      	cmp	fp, r9
 801a61c:	dd47      	ble.n	801a6ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a61e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a622:	d444      	bmi.n	801a6ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a624:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801a628:	4556      	cmp	r6, sl
 801a62a:	dd40      	ble.n	801a6ae <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a62c:	fa0f f68b 	sxth.w	r6, fp
 801a630:	fb0a 9906 	mla	r9, sl, r6, r9
 801a634:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a638:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a63c:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a640:	fb1b fb05 	smulbb	fp, fp, r5
 801a644:	eb08 0a09 	add.w	sl, r8, r9
 801a648:	f818 9009 	ldrb.w	r9, [r8, r9]
 801a64c:	fb09 b90e 	mla	r9, r9, lr, fp
 801a650:	fa1f f989 	uxth.w	r9, r9
 801a654:	f109 0b01 	add.w	fp, r9, #1
 801a658:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a65c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a660:	f804 9006 	strb.w	r9, [r4, r6]
 801a664:	4426      	add	r6, r4
 801a666:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a66a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a66e:	fb1b fb05 	smulbb	fp, fp, r5
 801a672:	fb09 b90e 	mla	r9, r9, lr, fp
 801a676:	fa1f f989 	uxth.w	r9, r9
 801a67a:	f109 0b01 	add.w	fp, r9, #1
 801a67e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a682:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a686:	f886 9001 	strb.w	r9, [r6, #1]
 801a68a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a68e:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a692:	fb1a fa05 	smulbb	sl, sl, r5
 801a696:	fb09 a90e 	mla	r9, r9, lr, sl
 801a69a:	fa1f f989 	uxth.w	r9, r9
 801a69e:	f109 0a01 	add.w	sl, r9, #1
 801a6a2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a6a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a6aa:	f886 9002 	strb.w	r9, [r6, #2]
 801a6ae:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801a6b0:	3701      	adds	r7, #1
 801a6b2:	4430      	add	r0, r6
 801a6b4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801a6b6:	4432      	add	r2, r6
 801a6b8:	e767      	b.n	801a58a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a6ba:	b003      	add	sp, #12
 801a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6c0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a6c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801a6c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a6ca:	9201      	str	r2, [sp, #4]
 801a6cc:	6868      	ldr	r0, [r5, #4]
 801a6ce:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801a6d0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801a6d4:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801a6d8:	fb00 2404 	mla	r4, r0, r4, r2
 801a6dc:	682a      	ldr	r2, [r5, #0]
 801a6de:	f8d7 8000 	ldr.w	r8, [r7]
 801a6e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a6e6:	4414      	add	r4, r2
 801a6e8:	2900      	cmp	r1, #0
 801a6ea:	dc03      	bgt.n	801a6f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a6ec:	9a01      	ldr	r2, [sp, #4]
 801a6ee:	2a00      	cmp	r2, #0
 801a6f0:	f340 80af 	ble.w	801a852 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a6f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a6f6:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801a6fa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a6fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a700:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801a704:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801a708:	2b00      	cmp	r3, #0
 801a70a:	dd0c      	ble.n	801a726 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a70c:	1405      	asrs	r5, r0, #16
 801a70e:	d405      	bmi.n	801a71c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a710:	4555      	cmp	r5, sl
 801a712:	da03      	bge.n	801a71c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a714:	1415      	asrs	r5, r2, #16
 801a716:	d401      	bmi.n	801a71c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a718:	454d      	cmp	r5, r9
 801a71a:	db05      	blt.n	801a728 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a71c:	4470      	add	r0, lr
 801a71e:	4462      	add	r2, ip
 801a720:	3b01      	subs	r3, #1
 801a722:	3403      	adds	r4, #3
 801a724:	e7f0      	b.n	801a708 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a726:	d038      	beq.n	801a79a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a728:	1e5d      	subs	r5, r3, #1
 801a72a:	fb0e 0605 	mla	r6, lr, r5, r0
 801a72e:	1436      	asrs	r6, r6, #16
 801a730:	d42a      	bmi.n	801a788 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a732:	4556      	cmp	r6, sl
 801a734:	da28      	bge.n	801a788 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a736:	fb0c 2505 	mla	r5, ip, r5, r2
 801a73a:	142d      	asrs	r5, r5, #16
 801a73c:	d424      	bmi.n	801a788 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a73e:	454d      	cmp	r5, r9
 801a740:	da22      	bge.n	801a788 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a742:	1ce6      	adds	r6, r4, #3
 801a744:	4699      	mov	r9, r3
 801a746:	f1b9 0f00 	cmp.w	r9, #0
 801a74a:	f106 0603 	add.w	r6, r6, #3
 801a74e:	dd1f      	ble.n	801a790 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801a750:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801a754:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a758:	1415      	asrs	r5, r2, #16
 801a75a:	4470      	add	r0, lr
 801a75c:	4462      	add	r2, ip
 801a75e:	f109 39ff 	add.w	r9, r9, #4294967295
 801a762:	fb0b a505 	mla	r5, fp, r5, sl
 801a766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a76a:	eb08 0a05 	add.w	sl, r8, r5
 801a76e:	f818 5005 	ldrb.w	r5, [r8, r5]
 801a772:	f806 5c06 	strb.w	r5, [r6, #-6]
 801a776:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a77a:	f806 5c05 	strb.w	r5, [r6, #-5]
 801a77e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801a782:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a786:	e7de      	b.n	801a746 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a788:	2600      	movs	r6, #0
 801a78a:	1b9d      	subs	r5, r3, r6
 801a78c:	2d00      	cmp	r5, #0
 801a78e:	dc38      	bgt.n	801a802 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a790:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a798:	441c      	add	r4, r3
 801a79a:	2900      	cmp	r1, #0
 801a79c:	dd59      	ble.n	801a852 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a79e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a7a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a7a8:	3901      	subs	r1, #1
 801a7aa:	eeb0 6a62 	vmov.f32	s12, s5
 801a7ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a7b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a7b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7ba:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801a7be:	eeb0 6a43 	vmov.f32	s12, s6
 801a7c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a7c6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801a7ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a7ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a7d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a7d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a7da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a7de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a7e2:	ee12 2a90 	vmov	r2, s5
 801a7e6:	eef0 2a47 	vmov.f32	s5, s14
 801a7ea:	fb92 fef3 	sdiv	lr, r2, r3
 801a7ee:	ee13 2a10 	vmov	r2, s6
 801a7f2:	eeb0 3a67 	vmov.f32	s6, s15
 801a7f6:	fb92 fcf3 	sdiv	ip, r2, r3
 801a7fa:	9a01      	ldr	r2, [sp, #4]
 801a7fc:	bf08      	it	eq
 801a7fe:	4613      	moveq	r3, r2
 801a800:	e772      	b.n	801a6e8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a802:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a806:	d420      	bmi.n	801a84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a808:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801a80c:	45cb      	cmp	fp, r9
 801a80e:	dd1c      	ble.n	801a84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a810:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a814:	d419      	bmi.n	801a84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a816:	68fd      	ldr	r5, [r7, #12]
 801a818:	4555      	cmp	r5, sl
 801a81a:	dd16      	ble.n	801a84a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a81c:	fa0f f58b 	sxth.w	r5, fp
 801a820:	fb0a 9505 	mla	r5, sl, r5, r9
 801a824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a828:	f818 9005 	ldrb.w	r9, [r8, r5]
 801a82c:	eb08 0b05 	add.w	fp, r8, r5
 801a830:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801a834:	f804 9005 	strb.w	r9, [r4, r5]
 801a838:	4425      	add	r5, r4
 801a83a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801a83e:	f885 9001 	strb.w	r9, [r5, #1]
 801a842:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a846:	f885 9002 	strb.w	r9, [r5, #2]
 801a84a:	4470      	add	r0, lr
 801a84c:	4462      	add	r2, ip
 801a84e:	3601      	adds	r6, #1
 801a850:	e79b      	b.n	801a78a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801a852:	b003      	add	sp, #12
 801a854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a858 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a85c:	b085      	sub	sp, #20
 801a85e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a862:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801a864:	9202      	str	r2, [sp, #8]
 801a866:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801a86a:	6860      	ldr	r0, [r4, #4]
 801a86c:	9203      	str	r2, [sp, #12]
 801a86e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801a872:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801a876:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801a87a:	fb00 2505 	mla	r5, r0, r5, r2
 801a87e:	6822      	ldr	r2, [r4, #0]
 801a880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a884:	4415      	add	r5, r2
 801a886:	f8dc 2000 	ldr.w	r2, [ip]
 801a88a:	9201      	str	r2, [sp, #4]
 801a88c:	2900      	cmp	r1, #0
 801a88e:	dc03      	bgt.n	801a898 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a890:	9a02      	ldr	r2, [sp, #8]
 801a892:	2a00      	cmp	r2, #0
 801a894:	f340 8122 	ble.w	801aadc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a898:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a89a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a89e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801a8a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a8a4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a8a8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	dd0d      	ble.n	801a8cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a8b0:	1422      	asrs	r2, r4, #16
 801a8b2:	d405      	bmi.n	801a8c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a8b4:	4542      	cmp	r2, r8
 801a8b6:	da03      	bge.n	801a8c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a8b8:	1402      	asrs	r2, r0, #16
 801a8ba:	d401      	bmi.n	801a8c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a8bc:	42ba      	cmp	r2, r7
 801a8be:	db06      	blt.n	801a8ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a8c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a8c2:	4474      	add	r4, lr
 801a8c4:	3b01      	subs	r3, #1
 801a8c6:	3503      	adds	r5, #3
 801a8c8:	4410      	add	r0, r2
 801a8ca:	e7ef      	b.n	801a8ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a8cc:	d072      	beq.n	801a9b4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a8ce:	1e5a      	subs	r2, r3, #1
 801a8d0:	fb0e 4602 	mla	r6, lr, r2, r4
 801a8d4:	1436      	asrs	r6, r6, #16
 801a8d6:	d462      	bmi.n	801a99e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a8d8:	4546      	cmp	r6, r8
 801a8da:	da60      	bge.n	801a99e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a8dc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801a8de:	fb06 0202 	mla	r2, r6, r2, r0
 801a8e2:	1412      	asrs	r2, r2, #16
 801a8e4:	d45b      	bmi.n	801a99e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a8e6:	42ba      	cmp	r2, r7
 801a8e8:	da59      	bge.n	801a99e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a8ea:	1cef      	adds	r7, r5, #3
 801a8ec:	4699      	mov	r9, r3
 801a8ee:	f1b9 0f00 	cmp.w	r9, #0
 801a8f2:	dd5a      	ble.n	801a9aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a8f4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a8f8:	1426      	asrs	r6, r4, #16
 801a8fa:	1402      	asrs	r2, r0, #16
 801a8fc:	fb08 6202 	mla	r2, r8, r2, r6
 801a900:	9e01      	ldr	r6, [sp, #4]
 801a902:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a906:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a90a:	d041      	beq.n	801a990 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a90c:	9a03      	ldr	r2, [sp, #12]
 801a90e:	fa5f fb86 	uxtb.w	fp, r6
 801a912:	fb02 f808 	mul.w	r8, r2, r8
 801a916:	f108 0201 	add.w	r2, r8, #1
 801a91a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a91e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a922:	1212      	asrs	r2, r2, #8
 801a924:	fa1f fa82 	uxth.w	sl, r2
 801a928:	43d2      	mvns	r2, r2
 801a92a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a92e:	b2d2      	uxtb	r2, r2
 801a930:	fb08 b802 	mla	r8, r8, r2, fp
 801a934:	fa1f f888 	uxth.w	r8, r8
 801a938:	f108 0b01 	add.w	fp, r8, #1
 801a93c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a940:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a944:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a948:	fb1b fb0a 	smulbb	fp, fp, sl
 801a94c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a950:	fb16 fa0a 	smulbb	sl, r6, sl
 801a954:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a958:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a95c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a960:	fb06 aa02 	mla	sl, r6, r2, sl
 801a964:	fb08 b802 	mla	r8, r8, r2, fp
 801a968:	fa1f fa8a 	uxth.w	sl, sl
 801a96c:	fa1f f888 	uxth.w	r8, r8
 801a970:	f10a 0601 	add.w	r6, sl, #1
 801a974:	f108 0b01 	add.w	fp, r8, #1
 801a978:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a97c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a980:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a984:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a988:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a98c:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a990:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801a992:	4474      	add	r4, lr
 801a994:	3703      	adds	r7, #3
 801a996:	f109 39ff 	add.w	r9, r9, #4294967295
 801a99a:	4410      	add	r0, r2
 801a99c:	e7a7      	b.n	801a8ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a99e:	f04f 0800 	mov.w	r8, #0
 801a9a2:	eba3 0208 	sub.w	r2, r3, r8
 801a9a6:	2a00      	cmp	r2, #0
 801a9a8:	dc3b      	bgt.n	801aa22 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801a9aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9b2:	441d      	add	r5, r3
 801a9b4:	2900      	cmp	r1, #0
 801a9b6:	f340 8091 	ble.w	801aadc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a9ba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a9be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a9c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a9c4:	3901      	subs	r1, #1
 801a9c6:	eeb0 6a62 	vmov.f32	s12, s5
 801a9ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a9ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a9d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a9d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801a9da:	eeb0 6a43 	vmov.f32	s12, s6
 801a9de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a9e2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801a9e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a9ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a9ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a9f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a9f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a9fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a9fe:	ee12 2a90 	vmov	r2, s5
 801aa02:	eef0 2a47 	vmov.f32	s5, s14
 801aa06:	fb92 fef3 	sdiv	lr, r2, r3
 801aa0a:	ee13 2a10 	vmov	r2, s6
 801aa0e:	eeb0 3a67 	vmov.f32	s6, s15
 801aa12:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa16:	9a02      	ldr	r2, [sp, #8]
 801aa18:	9312      	str	r3, [sp, #72]	@ 0x48
 801aa1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa1c:	bf08      	it	eq
 801aa1e:	4613      	moveq	r3, r2
 801aa20:	e734      	b.n	801a88c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801aa22:	1427      	asrs	r7, r4, #16
 801aa24:	d454      	bmi.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801aa26:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801aa2a:	42be      	cmp	r6, r7
 801aa2c:	dd50      	ble.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801aa2e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801aa32:	d44d      	bmi.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801aa34:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801aa38:	454a      	cmp	r2, r9
 801aa3a:	dd49      	ble.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801aa3c:	b236      	sxth	r6, r6
 801aa3e:	9a01      	ldr	r2, [sp, #4]
 801aa40:	fb09 7606 	mla	r6, r9, r6, r7
 801aa44:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801aa48:	0e3a      	lsrs	r2, r7, #24
 801aa4a:	d041      	beq.n	801aad0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801aa4c:	9e03      	ldr	r6, [sp, #12]
 801aa4e:	fa5f fb87 	uxtb.w	fp, r7
 801aa52:	4372      	muls	r2, r6
 801aa54:	1c56      	adds	r6, r2, #1
 801aa56:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801aa5a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801aa5e:	1212      	asrs	r2, r2, #8
 801aa60:	f815 9006 	ldrb.w	r9, [r5, r6]
 801aa64:	fa1f fa82 	uxth.w	sl, r2
 801aa68:	43d2      	mvns	r2, r2
 801aa6a:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa6e:	b2d2      	uxtb	r2, r2
 801aa70:	fb09 b902 	mla	r9, r9, r2, fp
 801aa74:	fa1f f989 	uxth.w	r9, r9
 801aa78:	f109 0b01 	add.w	fp, r9, #1
 801aa7c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aa80:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801aa84:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801aa88:	fb1b fb0a 	smulbb	fp, fp, sl
 801aa8c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa90:	fb17 fa0a 	smulbb	sl, r7, sl
 801aa94:	f805 9006 	strb.w	r9, [r5, r6]
 801aa98:	442e      	add	r6, r5
 801aa9a:	78b7      	ldrb	r7, [r6, #2]
 801aa9c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801aaa0:	fb07 aa02 	mla	sl, r7, r2, sl
 801aaa4:	fb09 b902 	mla	r9, r9, r2, fp
 801aaa8:	fa1f fa8a 	uxth.w	sl, sl
 801aaac:	fa1f f989 	uxth.w	r9, r9
 801aab0:	f10a 0701 	add.w	r7, sl, #1
 801aab4:	f109 0b01 	add.w	fp, r9, #1
 801aab8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aabc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801aac0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aac4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aac8:	f886 a002 	strb.w	sl, [r6, #2]
 801aacc:	f886 9001 	strb.w	r9, [r6, #1]
 801aad0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aad2:	4474      	add	r4, lr
 801aad4:	f108 0801 	add.w	r8, r8, #1
 801aad8:	4410      	add	r0, r2
 801aada:	e762      	b.n	801a9a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801aadc:	b005      	add	sp, #20
 801aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aae2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801aae8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aaec:	9201      	str	r2, [sp, #4]
 801aaee:	6860      	ldr	r0, [r4, #4]
 801aaf0:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801aaf4:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801aaf8:	fb00 2505 	mla	r5, r0, r5, r2
 801aafc:	6822      	ldr	r2, [r4, #0]
 801aafe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab02:	4415      	add	r5, r2
 801ab04:	f8dc 2000 	ldr.w	r2, [ip]
 801ab08:	9200      	str	r2, [sp, #0]
 801ab0a:	2900      	cmp	r1, #0
 801ab0c:	dc03      	bgt.n	801ab16 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ab0e:	9a01      	ldr	r2, [sp, #4]
 801ab10:	2a00      	cmp	r2, #0
 801ab12:	f340 812b 	ble.w	801ad6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ab16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ab18:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ab1c:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ab20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ab22:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ab26:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	dd0e      	ble.n	801ab4c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ab2e:	1422      	asrs	r2, r4, #16
 801ab30:	d405      	bmi.n	801ab3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab32:	4572      	cmp	r2, lr
 801ab34:	da03      	bge.n	801ab3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab36:	1402      	asrs	r2, r0, #16
 801ab38:	d401      	bmi.n	801ab3e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ab3a:	42ba      	cmp	r2, r7
 801ab3c:	db07      	blt.n	801ab4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ab3e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ab40:	3b01      	subs	r3, #1
 801ab42:	3503      	adds	r5, #3
 801ab44:	4414      	add	r4, r2
 801ab46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ab48:	4410      	add	r0, r2
 801ab4a:	e7ee      	b.n	801ab2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ab4c:	d06f      	beq.n	801ac2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ab4e:	1e5a      	subs	r2, r3, #1
 801ab50:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801ab52:	fb06 4602 	mla	r6, r6, r2, r4
 801ab56:	1436      	asrs	r6, r6, #16
 801ab58:	d45e      	bmi.n	801ac18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ab5a:	4576      	cmp	r6, lr
 801ab5c:	da5c      	bge.n	801ac18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ab5e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ab60:	fb06 0202 	mla	r2, r6, r2, r0
 801ab64:	1412      	asrs	r2, r2, #16
 801ab66:	d457      	bmi.n	801ac18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ab68:	42ba      	cmp	r2, r7
 801ab6a:	da55      	bge.n	801ac18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ab6c:	1cee      	adds	r6, r5, #3
 801ab6e:	469a      	mov	sl, r3
 801ab70:	f1ba 0f00 	cmp.w	sl, #0
 801ab74:	dd56      	ble.n	801ac24 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ab76:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ab7a:	1427      	asrs	r7, r4, #16
 801ab7c:	1402      	asrs	r2, r0, #16
 801ab7e:	fb0e 7202 	mla	r2, lr, r2, r7
 801ab82:	9f00      	ldr	r7, [sp, #0]
 801ab84:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ab88:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801ab8c:	d03c      	beq.n	801ac08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ab8e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ab92:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ab96:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ab9a:	fa5f f28e 	uxtb.w	r2, lr
 801ab9e:	b2ff      	uxtb	r7, r7
 801aba0:	f000 80dd 	beq.w	801ad5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801aba4:	fa1f f882 	uxth.w	r8, r2
 801aba8:	43d2      	mvns	r2, r2
 801abaa:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801abae:	fb17 f708 	smulbb	r7, r7, r8
 801abb2:	b2d2      	uxtb	r2, r2
 801abb4:	fb19 f908 	smulbb	r9, r9, r8
 801abb8:	fb0e 7702 	mla	r7, lr, r2, r7
 801abbc:	fb1b f808 	smulbb	r8, fp, r8
 801abc0:	b2bf      	uxth	r7, r7
 801abc2:	f107 0e01 	add.w	lr, r7, #1
 801abc6:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801abca:	123f      	asrs	r7, r7, #8
 801abcc:	f806 7c03 	strb.w	r7, [r6, #-3]
 801abd0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801abd4:	fb07 9902 	mla	r9, r7, r2, r9
 801abd8:	fa1f f989 	uxth.w	r9, r9
 801abdc:	f109 0701 	add.w	r7, r9, #1
 801abe0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801abe4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801abe8:	fb07 8802 	mla	r8, r7, r2, r8
 801abec:	ea4f 2929 	mov.w	r9, r9, asr #8
 801abf0:	fa1f f888 	uxth.w	r8, r8
 801abf4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801abf8:	f108 0201 	add.w	r2, r8, #1
 801abfc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ac00:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ac04:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ac08:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ac0a:	3603      	adds	r6, #3
 801ac0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ac10:	4414      	add	r4, r2
 801ac12:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ac14:	4410      	add	r0, r2
 801ac16:	e7ab      	b.n	801ab70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ac18:	f04f 0e00 	mov.w	lr, #0
 801ac1c:	eba3 020e 	sub.w	r2, r3, lr
 801ac20:	2a00      	cmp	r2, #0
 801ac22:	dc3d      	bgt.n	801aca0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ac24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ac28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac2c:	441d      	add	r5, r3
 801ac2e:	2900      	cmp	r1, #0
 801ac30:	f340 809c 	ble.w	801ad6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ac34:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ac38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ac3e:	3901      	subs	r1, #1
 801ac40:	eeb0 6a62 	vmov.f32	s12, s5
 801ac44:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ac48:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac50:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801ac54:	eeb0 6a43 	vmov.f32	s12, s6
 801ac58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ac5c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801ac60:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac64:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac68:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac6c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac74:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac78:	ee12 2a90 	vmov	r2, s5
 801ac7c:	eef0 2a47 	vmov.f32	s5, s14
 801ac80:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac84:	ee13 2a10 	vmov	r2, s6
 801ac88:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac8c:	eeb0 3a67 	vmov.f32	s6, s15
 801ac90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac94:	9a01      	ldr	r2, [sp, #4]
 801ac96:	9310      	str	r3, [sp, #64]	@ 0x40
 801ac98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac9a:	bf08      	it	eq
 801ac9c:	4613      	moveq	r3, r2
 801ac9e:	e734      	b.n	801ab0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801aca0:	1427      	asrs	r7, r4, #16
 801aca2:	d44d      	bmi.n	801ad40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801aca4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801aca8:	42be      	cmp	r6, r7
 801acaa:	dd49      	ble.n	801ad40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801acac:	ea5f 4820 	movs.w	r8, r0, asr #16
 801acb0:	d446      	bmi.n	801ad40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801acb2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801acb6:	4542      	cmp	r2, r8
 801acb8:	dd42      	ble.n	801ad40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801acba:	b236      	sxth	r6, r6
 801acbc:	9a00      	ldr	r2, [sp, #0]
 801acbe:	fb08 7606 	mla	r6, r8, r6, r7
 801acc2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801acc6:	0e3a      	lsrs	r2, r7, #24
 801acc8:	d03a      	beq.n	801ad40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801acca:	2aff      	cmp	r2, #255	@ 0xff
 801accc:	b2d6      	uxtb	r6, r2
 801acce:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801acd2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801acd6:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801acda:	b2ff      	uxtb	r7, r7
 801acdc:	d037      	beq.n	801ad4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801acde:	fa1f f986 	uxth.w	r9, r6
 801ace2:	4472      	add	r2, lr
 801ace4:	43f6      	mvns	r6, r6
 801ace6:	f815 8002 	ldrb.w	r8, [r5, r2]
 801acea:	fb17 f709 	smulbb	r7, r7, r9
 801acee:	fb1a fa09 	smulbb	sl, sl, r9
 801acf2:	b2f6      	uxtb	r6, r6
 801acf4:	fb1b f909 	smulbb	r9, fp, r9
 801acf8:	fb08 7706 	mla	r7, r8, r6, r7
 801acfc:	b2bf      	uxth	r7, r7
 801acfe:	f107 0801 	add.w	r8, r7, #1
 801ad02:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ad06:	123f      	asrs	r7, r7, #8
 801ad08:	54af      	strb	r7, [r5, r2]
 801ad0a:	442a      	add	r2, r5
 801ad0c:	7857      	ldrb	r7, [r2, #1]
 801ad0e:	fb07 aa06 	mla	sl, r7, r6, sl
 801ad12:	fa1f fa8a 	uxth.w	sl, sl
 801ad16:	f10a 0701 	add.w	r7, sl, #1
 801ad1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad1e:	7897      	ldrb	r7, [r2, #2]
 801ad20:	fb07 9906 	mla	r9, r7, r6, r9
 801ad24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ad28:	fa1f f989 	uxth.w	r9, r9
 801ad2c:	f882 a001 	strb.w	sl, [r2, #1]
 801ad30:	f109 0601 	add.w	r6, r9, #1
 801ad34:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801ad38:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad3c:	f882 9002 	strb.w	r9, [r2, #2]
 801ad40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ad42:	f10e 0e01 	add.w	lr, lr, #1
 801ad46:	4414      	add	r4, r2
 801ad48:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ad4a:	4410      	add	r0, r2
 801ad4c:	e766      	b.n	801ac1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ad4e:	4472      	add	r2, lr
 801ad50:	54af      	strb	r7, [r5, r2]
 801ad52:	442a      	add	r2, r5
 801ad54:	f882 a001 	strb.w	sl, [r2, #1]
 801ad58:	f882 b002 	strb.w	fp, [r2, #2]
 801ad5c:	e7f0      	b.n	801ad40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ad5e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ad62:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ad66:	f806 bc01 	strb.w	fp, [r6, #-1]
 801ad6a:	e74d      	b.n	801ac08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ad6c:	b003      	add	sp, #12
 801ad6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ad74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad78:	b087      	sub	sp, #28
 801ad7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ad7e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ad80:	9204      	str	r2, [sp, #16]
 801ad82:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801ad86:	6860      	ldr	r0, [r4, #4]
 801ad88:	9205      	str	r2, [sp, #20]
 801ad8a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801ad8e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801ad92:	9101      	str	r1, [sp, #4]
 801ad94:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801ad98:	fb00 2505 	mla	r5, r0, r5, r2
 801ad9c:	6822      	ldr	r2, [r4, #0]
 801ad9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ada2:	4415      	add	r5, r2
 801ada4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ada8:	3201      	adds	r2, #1
 801adaa:	f022 0201 	bic.w	r2, r2, #1
 801adae:	9202      	str	r2, [sp, #8]
 801adb0:	f8dc 2000 	ldr.w	r2, [ip]
 801adb4:	9203      	str	r2, [sp, #12]
 801adb6:	9a01      	ldr	r2, [sp, #4]
 801adb8:	2a00      	cmp	r2, #0
 801adba:	dc03      	bgt.n	801adc4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801adbc:	9a04      	ldr	r2, [sp, #16]
 801adbe:	2a00      	cmp	r2, #0
 801adc0:	f340 8135 	ble.w	801b02e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801adc4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801adc6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801adca:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801adce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801add0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801add4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801add8:	2b00      	cmp	r3, #0
 801adda:	dd0d      	ble.n	801adf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801addc:	1422      	asrs	r2, r4, #16
 801adde:	d405      	bmi.n	801adec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ade0:	4542      	cmp	r2, r8
 801ade2:	da03      	bge.n	801adec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ade4:	1402      	asrs	r2, r0, #16
 801ade6:	d401      	bmi.n	801adec <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ade8:	42ba      	cmp	r2, r7
 801adea:	db06      	blt.n	801adfa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801adec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801adee:	4474      	add	r4, lr
 801adf0:	3b01      	subs	r3, #1
 801adf2:	3503      	adds	r5, #3
 801adf4:	4410      	add	r0, r2
 801adf6:	e7ef      	b.n	801add8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801adf8:	d077      	beq.n	801aeea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801adfa:	1e5a      	subs	r2, r3, #1
 801adfc:	fb0e 4602 	mla	r6, lr, r2, r4
 801ae00:	1436      	asrs	r6, r6, #16
 801ae02:	d469      	bmi.n	801aed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae04:	4546      	cmp	r6, r8
 801ae06:	da67      	bge.n	801aed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae08:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ae0a:	fb06 0202 	mla	r2, r6, r2, r0
 801ae0e:	1412      	asrs	r2, r2, #16
 801ae10:	d462      	bmi.n	801aed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae12:	42ba      	cmp	r2, r7
 801ae14:	da60      	bge.n	801aed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ae16:	1cee      	adds	r6, r5, #3
 801ae18:	4699      	mov	r9, r3
 801ae1a:	f1b9 0f00 	cmp.w	r9, #0
 801ae1e:	dd5f      	ble.n	801aee0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801ae20:	1422      	asrs	r2, r4, #16
 801ae22:	9902      	ldr	r1, [sp, #8]
 801ae24:	1407      	asrs	r7, r0, #16
 801ae26:	fb01 2707 	mla	r7, r1, r7, r2
 801ae2a:	9903      	ldr	r1, [sp, #12]
 801ae2c:	087a      	lsrs	r2, r7, #1
 801ae2e:	5c8a      	ldrb	r2, [r1, r2]
 801ae30:	07f9      	lsls	r1, r7, #31
 801ae32:	bf54      	ite	pl
 801ae34:	f002 020f 	andpl.w	r2, r2, #15
 801ae38:	1112      	asrmi	r2, r2, #4
 801ae3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ae3e:	b2d2      	uxtb	r2, r2
 801ae40:	2a00      	cmp	r2, #0
 801ae42:	d042      	beq.n	801aeca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ae44:	497b      	ldr	r1, [pc, #492]	@ (801b034 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801ae46:	680f      	ldr	r7, [r1, #0]
 801ae48:	9905      	ldr	r1, [sp, #20]
 801ae4a:	fa5f fb87 	uxtb.w	fp, r7
 801ae4e:	434a      	muls	r2, r1
 801ae50:	f102 0801 	add.w	r8, r2, #1
 801ae54:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801ae58:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801ae5c:	1212      	asrs	r2, r2, #8
 801ae5e:	fa1f fa82 	uxth.w	sl, r2
 801ae62:	43d2      	mvns	r2, r2
 801ae64:	fb1b fb0a 	smulbb	fp, fp, sl
 801ae68:	b2d2      	uxtb	r2, r2
 801ae6a:	fb08 b802 	mla	r8, r8, r2, fp
 801ae6e:	fa1f f888 	uxth.w	r8, r8
 801ae72:	f108 0b01 	add.w	fp, r8, #1
 801ae76:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ae7a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ae7e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ae82:	fb1b fb0a 	smulbb	fp, fp, sl
 801ae86:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ae8a:	fb17 fa0a 	smulbb	sl, r7, sl
 801ae8e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ae92:	f806 8c03 	strb.w	r8, [r6, #-3]
 801ae96:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801ae9a:	fb07 aa02 	mla	sl, r7, r2, sl
 801ae9e:	fb08 b802 	mla	r8, r8, r2, fp
 801aea2:	fa1f fa8a 	uxth.w	sl, sl
 801aea6:	fa1f f888 	uxth.w	r8, r8
 801aeaa:	f10a 0701 	add.w	r7, sl, #1
 801aeae:	f108 0b01 	add.w	fp, r8, #1
 801aeb2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aeb6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aeba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aebe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aec2:	f806 ac01 	strb.w	sl, [r6, #-1]
 801aec6:	f806 8c02 	strb.w	r8, [r6, #-2]
 801aeca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801aecc:	4474      	add	r4, lr
 801aece:	3603      	adds	r6, #3
 801aed0:	f109 39ff 	add.w	r9, r9, #4294967295
 801aed4:	4410      	add	r0, r2
 801aed6:	e7a0      	b.n	801ae1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801aed8:	2700      	movs	r7, #0
 801aeda:	1bda      	subs	r2, r3, r7
 801aedc:	2a00      	cmp	r2, #0
 801aede:	dc3e      	bgt.n	801af5e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801aee0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aee8:	441d      	add	r5, r3
 801aeea:	9b01      	ldr	r3, [sp, #4]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	f340 809e 	ble.w	801b02e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801aef2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aef6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aef8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aefc:	eeb0 6a62 	vmov.f32	s12, s5
 801af00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801af04:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801af0c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801af10:	eeb0 6a43 	vmov.f32	s12, s6
 801af14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801af18:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801af1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af20:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af24:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801af30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801af34:	ee12 2a90 	vmov	r2, s5
 801af38:	eef0 2a47 	vmov.f32	s5, s14
 801af3c:	fb92 fef3 	sdiv	lr, r2, r3
 801af40:	ee13 2a10 	vmov	r2, s6
 801af44:	eeb0 3a67 	vmov.f32	s6, s15
 801af48:	fb92 f3f3 	sdiv	r3, r2, r3
 801af4c:	9314      	str	r3, [sp, #80]	@ 0x50
 801af4e:	9b01      	ldr	r3, [sp, #4]
 801af50:	9a04      	ldr	r2, [sp, #16]
 801af52:	3b01      	subs	r3, #1
 801af54:	9301      	str	r3, [sp, #4]
 801af56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801af58:	bf08      	it	eq
 801af5a:	4613      	moveq	r3, r2
 801af5c:	e72b      	b.n	801adb6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801af5e:	1426      	asrs	r6, r4, #16
 801af60:	d460      	bmi.n	801b024 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af62:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801af66:	42b2      	cmp	r2, r6
 801af68:	dd5c      	ble.n	801b024 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af6a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801af6e:	d459      	bmi.n	801b024 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af70:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801af74:	4542      	cmp	r2, r8
 801af76:	dd55      	ble.n	801b024 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af78:	9a02      	ldr	r2, [sp, #8]
 801af7a:	9903      	ldr	r1, [sp, #12]
 801af7c:	fb08 6602 	mla	r6, r8, r2, r6
 801af80:	0872      	lsrs	r2, r6, #1
 801af82:	07f6      	lsls	r6, r6, #31
 801af84:	5c8a      	ldrb	r2, [r1, r2]
 801af86:	bf54      	ite	pl
 801af88:	f002 020f 	andpl.w	r2, r2, #15
 801af8c:	1112      	asrmi	r2, r2, #4
 801af8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801af92:	b2d2      	uxtb	r2, r2
 801af94:	2a00      	cmp	r2, #0
 801af96:	d045      	beq.n	801b024 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af98:	4926      	ldr	r1, [pc, #152]	@ (801b034 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801af9a:	f8d1 8000 	ldr.w	r8, [r1]
 801af9e:	9905      	ldr	r1, [sp, #20]
 801afa0:	fa5f fb88 	uxtb.w	fp, r8
 801afa4:	434a      	muls	r2, r1
 801afa6:	1c56      	adds	r6, r2, #1
 801afa8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801afac:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801afb0:	1212      	asrs	r2, r2, #8
 801afb2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801afb6:	fa1f fa82 	uxth.w	sl, r2
 801afba:	43d2      	mvns	r2, r2
 801afbc:	fb1b fb0a 	smulbb	fp, fp, sl
 801afc0:	b2d2      	uxtb	r2, r2
 801afc2:	fb09 b902 	mla	r9, r9, r2, fp
 801afc6:	fa1f f989 	uxth.w	r9, r9
 801afca:	f109 0b01 	add.w	fp, r9, #1
 801afce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801afd2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801afd6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801afda:	fb1b fb0a 	smulbb	fp, fp, sl
 801afde:	ea4f 2929 	mov.w	r9, r9, asr #8
 801afe2:	fb18 fa0a 	smulbb	sl, r8, sl
 801afe6:	f805 9006 	strb.w	r9, [r5, r6]
 801afea:	442e      	add	r6, r5
 801afec:	f896 8002 	ldrb.w	r8, [r6, #2]
 801aff0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801aff4:	fb08 aa02 	mla	sl, r8, r2, sl
 801aff8:	fb09 b902 	mla	r9, r9, r2, fp
 801affc:	fa1f fa8a 	uxth.w	sl, sl
 801b000:	fa1f f989 	uxth.w	r9, r9
 801b004:	f10a 0801 	add.w	r8, sl, #1
 801b008:	f109 0b01 	add.w	fp, r9, #1
 801b00c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801b010:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b014:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b018:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b01c:	f886 a002 	strb.w	sl, [r6, #2]
 801b020:	f886 9001 	strb.w	r9, [r6, #1]
 801b024:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b026:	4474      	add	r4, lr
 801b028:	3701      	adds	r7, #1
 801b02a:	4410      	add	r0, r2
 801b02c:	e755      	b.n	801aeda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801b02e:	b007      	add	sp, #28
 801b030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b034:	24025944 	.word	0x24025944

0801b038 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b03c:	b085      	sub	sp, #20
 801b03e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b042:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b044:	9203      	str	r2, [sp, #12]
 801b046:	6860      	ldr	r0, [r4, #4]
 801b048:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b04c:	9100      	str	r1, [sp, #0]
 801b04e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801b052:	fb00 2606 	mla	r6, r0, r6, r2
 801b056:	6822      	ldr	r2, [r4, #0]
 801b058:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b05c:	4416      	add	r6, r2
 801b05e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b062:	3201      	adds	r2, #1
 801b064:	f022 0201 	bic.w	r2, r2, #1
 801b068:	9201      	str	r2, [sp, #4]
 801b06a:	f8dc 2000 	ldr.w	r2, [ip]
 801b06e:	9202      	str	r2, [sp, #8]
 801b070:	9a00      	ldr	r2, [sp, #0]
 801b072:	2a00      	cmp	r2, #0
 801b074:	dc03      	bgt.n	801b07e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b076:	9a03      	ldr	r2, [sp, #12]
 801b078:	2a00      	cmp	r2, #0
 801b07a:	f340 8140 	ble.w	801b2fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b07e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b080:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b084:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801b088:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b08a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b08e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b092:	2b00      	cmp	r3, #0
 801b094:	dd0e      	ble.n	801b0b4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b096:	142a      	asrs	r2, r5, #16
 801b098:	d405      	bmi.n	801b0a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b09a:	4572      	cmp	r2, lr
 801b09c:	da03      	bge.n	801b0a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b09e:	1422      	asrs	r2, r4, #16
 801b0a0:	d401      	bmi.n	801b0a6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b0a2:	42ba      	cmp	r2, r7
 801b0a4:	db07      	blt.n	801b0b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b0a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b0a8:	3b01      	subs	r3, #1
 801b0aa:	3603      	adds	r6, #3
 801b0ac:	4415      	add	r5, r2
 801b0ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b0b0:	4414      	add	r4, r2
 801b0b2:	e7ee      	b.n	801b092 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b0b4:	d072      	beq.n	801b19c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b0b6:	1e5a      	subs	r2, r3, #1
 801b0b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b0ba:	fb00 5002 	mla	r0, r0, r2, r5
 801b0be:	1400      	asrs	r0, r0, #16
 801b0c0:	d463      	bmi.n	801b18a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b0c2:	4570      	cmp	r0, lr
 801b0c4:	da61      	bge.n	801b18a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b0c6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801b0c8:	fb00 4202 	mla	r2, r0, r2, r4
 801b0cc:	1412      	asrs	r2, r2, #16
 801b0ce:	d45c      	bmi.n	801b18a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b0d0:	42ba      	cmp	r2, r7
 801b0d2:	da5a      	bge.n	801b18a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b0d4:	1cf0      	adds	r0, r6, #3
 801b0d6:	469a      	mov	sl, r3
 801b0d8:	f1ba 0f00 	cmp.w	sl, #0
 801b0dc:	dd59      	ble.n	801b192 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b0de:	142a      	asrs	r2, r5, #16
 801b0e0:	9901      	ldr	r1, [sp, #4]
 801b0e2:	1427      	asrs	r7, r4, #16
 801b0e4:	fb01 2707 	mla	r7, r1, r7, r2
 801b0e8:	9902      	ldr	r1, [sp, #8]
 801b0ea:	087a      	lsrs	r2, r7, #1
 801b0ec:	5c8a      	ldrb	r2, [r1, r2]
 801b0ee:	07f9      	lsls	r1, r7, #31
 801b0f0:	bf54      	ite	pl
 801b0f2:	f002 020f 	andpl.w	r2, r2, #15
 801b0f6:	1112      	asrmi	r2, r2, #4
 801b0f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b0fc:	b2d2      	uxtb	r2, r2
 801b0fe:	2a00      	cmp	r2, #0
 801b100:	d03b      	beq.n	801b17a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b102:	4980      	ldr	r1, [pc, #512]	@ (801b304 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b104:	2aff      	cmp	r2, #255	@ 0xff
 801b106:	680f      	ldr	r7, [r1, #0]
 801b108:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b10c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b110:	b2ff      	uxtb	r7, r7
 801b112:	f000 80ed 	beq.w	801b2f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801b116:	fa1f f882 	uxth.w	r8, r2
 801b11a:	43d2      	mvns	r2, r2
 801b11c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801b120:	fb17 f708 	smulbb	r7, r7, r8
 801b124:	b2d2      	uxtb	r2, r2
 801b126:	fb19 f908 	smulbb	r9, r9, r8
 801b12a:	fb0e 7702 	mla	r7, lr, r2, r7
 801b12e:	fb1b f808 	smulbb	r8, fp, r8
 801b132:	b2bf      	uxth	r7, r7
 801b134:	f107 0e01 	add.w	lr, r7, #1
 801b138:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b13c:	123f      	asrs	r7, r7, #8
 801b13e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b142:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801b146:	fb07 9902 	mla	r9, r7, r2, r9
 801b14a:	fa1f f989 	uxth.w	r9, r9
 801b14e:	f109 0701 	add.w	r7, r9, #1
 801b152:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b156:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801b15a:	fb07 8802 	mla	r8, r7, r2, r8
 801b15e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b162:	fa1f f888 	uxth.w	r8, r8
 801b166:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b16a:	f108 0201 	add.w	r2, r8, #1
 801b16e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b172:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b176:	f800 8c01 	strb.w	r8, [r0, #-1]
 801b17a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b17c:	3003      	adds	r0, #3
 801b17e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b182:	4415      	add	r5, r2
 801b184:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b186:	4414      	add	r4, r2
 801b188:	e7a6      	b.n	801b0d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b18a:	2700      	movs	r7, #0
 801b18c:	1bda      	subs	r2, r3, r7
 801b18e:	2a00      	cmp	r2, #0
 801b190:	dc40      	bgt.n	801b214 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b192:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b19a:	441e      	add	r6, r3
 801b19c:	9b00      	ldr	r3, [sp, #0]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	f340 80ad 	ble.w	801b2fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b1a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b1a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b1aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b1ae:	eeb0 6a62 	vmov.f32	s12, s5
 801b1b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b1b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b1ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1be:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b1c2:	eeb0 6a43 	vmov.f32	s12, s6
 801b1c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b1ca:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b1ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1e6:	ee12 2a90 	vmov	r2, s5
 801b1ea:	eef0 2a47 	vmov.f32	s5, s14
 801b1ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1f2:	ee13 2a10 	vmov	r2, s6
 801b1f6:	9311      	str	r3, [sp, #68]	@ 0x44
 801b1f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b1fa:	eeb0 3a67 	vmov.f32	s6, s15
 801b1fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801b202:	9312      	str	r3, [sp, #72]	@ 0x48
 801b204:	9b00      	ldr	r3, [sp, #0]
 801b206:	9a03      	ldr	r2, [sp, #12]
 801b208:	3b01      	subs	r3, #1
 801b20a:	9300      	str	r3, [sp, #0]
 801b20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b20e:	bf08      	it	eq
 801b210:	4613      	moveq	r3, r2
 801b212:	e72d      	b.n	801b070 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b214:	1428      	asrs	r0, r5, #16
 801b216:	d45c      	bmi.n	801b2d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b218:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b21c:	4282      	cmp	r2, r0
 801b21e:	dd58      	ble.n	801b2d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b220:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b224:	d455      	bmi.n	801b2d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b226:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b22a:	4572      	cmp	r2, lr
 801b22c:	dd51      	ble.n	801b2d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b22e:	9a01      	ldr	r2, [sp, #4]
 801b230:	9902      	ldr	r1, [sp, #8]
 801b232:	fb0e 0002 	mla	r0, lr, r2, r0
 801b236:	0842      	lsrs	r2, r0, #1
 801b238:	07c0      	lsls	r0, r0, #31
 801b23a:	5c8a      	ldrb	r2, [r1, r2]
 801b23c:	bf54      	ite	pl
 801b23e:	f002 020f 	andpl.w	r2, r2, #15
 801b242:	1112      	asrmi	r2, r2, #4
 801b244:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b248:	b2d2      	uxtb	r2, r2
 801b24a:	2a00      	cmp	r2, #0
 801b24c:	d041      	beq.n	801b2d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b24e:	492d      	ldr	r1, [pc, #180]	@ (801b304 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b250:	2aff      	cmp	r2, #255	@ 0xff
 801b252:	6808      	ldr	r0, [r1, #0]
 801b254:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801b258:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b25c:	fa5f fe80 	uxtb.w	lr, r0
 801b260:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801b264:	d03b      	beq.n	801b2de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801b266:	fa1f f982 	uxth.w	r9, r2
 801b26a:	4438      	add	r0, r7
 801b26c:	43d2      	mvns	r2, r2
 801b26e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801b272:	fb1e fe09 	smulbb	lr, lr, r9
 801b276:	fb1a fa09 	smulbb	sl, sl, r9
 801b27a:	b2d2      	uxtb	r2, r2
 801b27c:	fb1b f909 	smulbb	r9, fp, r9
 801b280:	fb08 ee02 	mla	lr, r8, r2, lr
 801b284:	fa1f fe8e 	uxth.w	lr, lr
 801b288:	f10e 0801 	add.w	r8, lr, #1
 801b28c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801b290:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b294:	f806 e000 	strb.w	lr, [r6, r0]
 801b298:	4430      	add	r0, r6
 801b29a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801b29e:	fb0e aa02 	mla	sl, lr, r2, sl
 801b2a2:	fa1f fa8a 	uxth.w	sl, sl
 801b2a6:	f10a 0e01 	add.w	lr, sl, #1
 801b2aa:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801b2ae:	f890 e002 	ldrb.w	lr, [r0, #2]
 801b2b2:	fb0e 9902 	mla	r9, lr, r2, r9
 801b2b6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b2ba:	fa1f f989 	uxth.w	r9, r9
 801b2be:	f880 a001 	strb.w	sl, [r0, #1]
 801b2c2:	f109 0201 	add.w	r2, r9, #1
 801b2c6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b2ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b2ce:	f880 9002 	strb.w	r9, [r0, #2]
 801b2d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b2d4:	3701      	adds	r7, #1
 801b2d6:	4415      	add	r5, r2
 801b2d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b2da:	4414      	add	r4, r2
 801b2dc:	e756      	b.n	801b18c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b2de:	4438      	add	r0, r7
 801b2e0:	f806 e000 	strb.w	lr, [r6, r0]
 801b2e4:	4430      	add	r0, r6
 801b2e6:	f880 a001 	strb.w	sl, [r0, #1]
 801b2ea:	f880 b002 	strb.w	fp, [r0, #2]
 801b2ee:	e7f0      	b.n	801b2d2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b2f0:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b2f4:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b2f8:	f800 bc01 	strb.w	fp, [r0, #-1]
 801b2fc:	e73d      	b.n	801b17a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b2fe:	b005      	add	sp, #20
 801b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b304:	24025944 	.word	0x24025944

0801b308 <_ZN8touchgfx8LCD24bppD1Ev>:
 801b308:	4770      	bx	lr

0801b30a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801b30a:	4770      	bx	lr

0801b30c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801b30c:	4770      	bx	lr

0801b30e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801b30e:	4770      	bx	lr

0801b310 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801b310:	4770      	bx	lr

0801b312 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b312:	4770      	bx	lr

0801b314 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b314:	4770      	bx	lr

0801b316 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b316:	4770      	bx	lr

0801b318 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b318:	4770      	bx	lr

0801b31a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b31a:	4770      	bx	lr

0801b31c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b31c:	4770      	bx	lr

0801b31e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b31e:	4770      	bx	lr

0801b320 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b320:	4770      	bx	lr

0801b322 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b322:	4770      	bx	lr

0801b324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b324:	4770      	bx	lr

0801b326 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b326:	4770      	bx	lr

0801b328 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b328:	4770      	bx	lr

0801b32a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b32a:	4770      	bx	lr

0801b32c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b32c:	4770      	bx	lr

0801b32e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b32e:	4770      	bx	lr

0801b330 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b330:	4770      	bx	lr

0801b332 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b332:	4770      	bx	lr

0801b334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b334:	4770      	bx	lr

0801b336 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b336:	4770      	bx	lr

0801b338 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b338:	4770      	bx	lr
	...

0801b33c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b33e:	4606      	mov	r6, r0
 801b340:	b087      	sub	sp, #28
 801b342:	4615      	mov	r5, r2
 801b344:	461f      	mov	r7, r3
 801b346:	b353      	cbz	r3, 801b39e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b348:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	dd26      	ble.n	801b39e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b350:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b354:	2b00      	cmp	r3, #0
 801b356:	dd22      	ble.n	801b39e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b358:	6808      	ldr	r0, [r1, #0]
 801b35a:	aa04      	add	r2, sp, #16
 801b35c:	6849      	ldr	r1, [r1, #4]
 801b35e:	4c1b      	ldr	r4, [pc, #108]	@ (801b3cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801b360:	c203      	stmia	r2!, {r0, r1}
 801b362:	a804      	add	r0, sp, #16
 801b364:	f7fa f9d2 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b368:	6820      	ldr	r0, [r4, #0]
 801b36a:	6803      	ldr	r3, [r0, #0]
 801b36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b36e:	4798      	blx	r3
 801b370:	2fff      	cmp	r7, #255	@ 0xff
 801b372:	d016      	beq.n	801b3a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801b374:	f010 0f08 	tst.w	r0, #8
 801b378:	6820      	ldr	r0, [r4, #0]
 801b37a:	d015      	beq.n	801b3a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801b37c:	2400      	movs	r4, #0
 801b37e:	6801      	ldr	r1, [r0, #0]
 801b380:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b384:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b388:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801b38c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b390:	9401      	str	r4, [sp, #4]
 801b392:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b396:	9400      	str	r4, [sp, #0]
 801b398:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801b39a:	4629      	mov	r1, r5
 801b39c:	47a0      	blx	r4
 801b39e:	b007      	add	sp, #28
 801b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3a2:	f010 0f02 	tst.w	r0, #2
 801b3a6:	e7e7      	b.n	801b378 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801b3a8:	6803      	ldr	r3, [r0, #0]
 801b3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ac:	4798      	blx	r3
 801b3ae:	4b08      	ldr	r3, [pc, #32]	@ (801b3d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801b3b0:	4601      	mov	r1, r0
 801b3b2:	4630      	mov	r0, r6
 801b3b4:	881a      	ldrh	r2, [r3, #0]
 801b3b6:	6833      	ldr	r3, [r6, #0]
 801b3b8:	e9cd 5700 	strd	r5, r7, [sp]
 801b3bc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801b3be:	ab04      	add	r3, sp, #16
 801b3c0:	47a8      	blx	r5
 801b3c2:	6820      	ldr	r0, [r4, #0]
 801b3c4:	6803      	ldr	r3, [r0, #0]
 801b3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b3c8:	4798      	blx	r3
 801b3ca:	e7e8      	b.n	801b39e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b3cc:	24025934 	.word	0x24025934
 801b3d0:	2402592e 	.word	0x2402592e

0801b3d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b3d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b3d8:	b08b      	sub	sp, #44	@ 0x2c
 801b3da:	460d      	mov	r5, r1
 801b3dc:	4616      	mov	r6, r2
 801b3de:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801b3e2:	f1b8 0f00 	cmp.w	r8, #0
 801b3e6:	d047      	beq.n	801b478 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b3e8:	6810      	ldr	r0, [r2, #0]
 801b3ea:	ac06      	add	r4, sp, #24
 801b3ec:	6851      	ldr	r1, [r2, #4]
 801b3ee:	4f51      	ldr	r7, [pc, #324]	@ (801b534 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801b3f0:	c403      	stmia	r4!, {r0, r1}
 801b3f2:	6818      	ldr	r0, [r3, #0]
 801b3f4:	ac08      	add	r4, sp, #32
 801b3f6:	6859      	ldr	r1, [r3, #4]
 801b3f8:	c403      	stmia	r4!, {r0, r1}
 801b3fa:	a806      	add	r0, sp, #24
 801b3fc:	f7fa f986 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b400:	4631      	mov	r1, r6
 801b402:	a808      	add	r0, sp, #32
 801b404:	f7fa f9aa 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b408:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b40c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801b410:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b414:	6838      	ldr	r0, [r7, #0]
 801b416:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b41a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801b41e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801b422:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b426:	440d      	add	r5, r1
 801b428:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b42c:	440a      	add	r2, r1
 801b42e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b432:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b436:	4413      	add	r3, r2
 801b438:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801b43c:	6803      	ldr	r3, [r0, #0]
 801b43e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b440:	4798      	blx	r3
 801b442:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801b446:	d01a      	beq.n	801b47e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801b448:	f010 0f04 	tst.w	r0, #4
 801b44c:	6838      	ldr	r0, [r7, #0]
 801b44e:	d019      	beq.n	801b484 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801b450:	2100      	movs	r1, #0
 801b452:	6807      	ldr	r7, [r0, #0]
 801b454:	b2a4      	uxth	r4, r4
 801b456:	f8cd 800c 	str.w	r8, [sp, #12]
 801b45a:	b2b6      	uxth	r6, r6
 801b45c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801b460:	9401      	str	r4, [sp, #4]
 801b462:	9600      	str	r6, [sp, #0]
 801b464:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b468:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801b46c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b470:	9102      	str	r1, [sp, #8]
 801b472:	4629      	mov	r1, r5
 801b474:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801b476:	47a0      	blx	r4
 801b478:	b00b      	add	sp, #44	@ 0x2c
 801b47a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b47e:	f010 0f01 	tst.w	r0, #1
 801b482:	e7e3      	b.n	801b44c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801b484:	6803      	ldr	r3, [r0, #0]
 801b486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b488:	4798      	blx	r3
 801b48a:	4a2b      	ldr	r2, [pc, #172]	@ (801b538 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801b48c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801b490:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801b494:	8813      	ldrh	r3, [r2, #0]
 801b496:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801b49a:	fb03 f404 	mul.w	r4, r3, r4
 801b49e:	fb03 c101 	mla	r1, r3, r1, ip
 801b4a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b4a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b4aa:	4408      	add	r0, r1
 801b4ac:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801b4b0:	4404      	add	r4, r0
 801b4b2:	d02e      	beq.n	801b512 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b4b4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b4b8:	1b9b      	subs	r3, r3, r6
 801b4ba:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801b4be:	1b96      	subs	r6, r2, r6
 801b4c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b4c8:	42a0      	cmp	r0, r4
 801b4ca:	d22d      	bcs.n	801b528 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b4cc:	eb00 0e01 	add.w	lr, r0, r1
 801b4d0:	4570      	cmp	r0, lr
 801b4d2:	d210      	bcs.n	801b4f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801b4d4:	f890 9000 	ldrb.w	r9, [r0]
 801b4d8:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b4dc:	fb19 f90c 	smulbb	r9, r9, ip
 801b4e0:	fb02 9208 	mla	r2, r2, r8, r9
 801b4e4:	b292      	uxth	r2, r2
 801b4e6:	f102 0901 	add.w	r9, r2, #1
 801b4ea:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801b4ee:	1212      	asrs	r2, r2, #8
 801b4f0:	f800 2b01 	strb.w	r2, [r0], #1
 801b4f4:	e7ec      	b.n	801b4d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801b4f6:	4418      	add	r0, r3
 801b4f8:	4435      	add	r5, r6
 801b4fa:	e7e5      	b.n	801b4c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801b4fc:	8813      	ldrh	r3, [r2, #0]
 801b4fe:	1b9b      	subs	r3, r3, r6
 801b500:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b504:	4418      	add	r0, r3
 801b506:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b50a:	1b9b      	subs	r3, r3, r6
 801b50c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b510:	441d      	add	r5, r3
 801b512:	42a0      	cmp	r0, r4
 801b514:	d208      	bcs.n	801b528 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b516:	eb00 0c01 	add.w	ip, r0, r1
 801b51a:	4560      	cmp	r0, ip
 801b51c:	d2ee      	bcs.n	801b4fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801b51e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b522:	f800 3b01 	strb.w	r3, [r0], #1
 801b526:	e7f8      	b.n	801b51a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801b528:	6838      	ldr	r0, [r7, #0]
 801b52a:	6803      	ldr	r3, [r0, #0]
 801b52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b52e:	4798      	blx	r3
 801b530:	e7a2      	b.n	801b478 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b532:	bf00      	nop
 801b534:	24025934 	.word	0x24025934
 801b538:	2402592e 	.word	0x2402592e

0801b53c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b53e:	2300      	movs	r3, #0
 801b540:	b085      	sub	sp, #20
 801b542:	9300      	str	r3, [sp, #0]
 801b544:	4b41      	ldr	r3, [pc, #260]	@ (801b64c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801b546:	781b      	ldrb	r3, [r3, #0]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d136      	bne.n	801b5ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801b54c:	4a40      	ldr	r2, [pc, #256]	@ (801b650 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b54e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b552:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d131      	bne.n	801b5be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801b55a:	4b3e      	ldr	r3, [pc, #248]	@ (801b654 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b55c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b560:	ac02      	add	r4, sp, #8
 801b562:	6808      	ldr	r0, [r1, #0]
 801b564:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b568:	ab02      	add	r3, sp, #8
 801b56a:	6849      	ldr	r1, [r1, #4]
 801b56c:	4d3a      	ldr	r5, [pc, #232]	@ (801b658 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801b56e:	c303      	stmia	r3!, {r0, r1}
 801b570:	4669      	mov	r1, sp
 801b572:	4620      	mov	r0, r4
 801b574:	f7fa f8f2 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b578:	4668      	mov	r0, sp
 801b57a:	f7fa f8c7 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b57e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b582:	f8bd 2000 	ldrh.w	r2, [sp]
 801b586:	462e      	mov	r6, r5
 801b588:	6828      	ldr	r0, [r5, #0]
 801b58a:	4413      	add	r3, r2
 801b58c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b590:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b594:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b598:	4413      	add	r3, r2
 801b59a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b59e:	6803      	ldr	r3, [r0, #0]
 801b5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b5a2:	4798      	blx	r3
 801b5a4:	f010 0f01 	tst.w	r0, #1
 801b5a8:	d00b      	beq.n	801b5c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801b5aa:	6828      	ldr	r0, [r5, #0]
 801b5ac:	6803      	ldr	r3, [r0, #0]
 801b5ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b5b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b5b4:	4798      	blx	r3
 801b5b6:	b005      	add	sp, #20
 801b5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ba:	4a26      	ldr	r2, [pc, #152]	@ (801b654 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b5bc:	e7c7      	b.n	801b54e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b5be:	4b24      	ldr	r3, [pc, #144]	@ (801b650 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b5c0:	e7cc      	b.n	801b55c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b5c2:	6830      	ldr	r0, [r6, #0]
 801b5c4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801b5c8:	6803      	ldr	r3, [r0, #0]
 801b5ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801b5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b5d0:	4798      	blx	r3
 801b5d2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b5d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b5da:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801b5de:	fb14 3402 	smlabb	r4, r4, r2, r3
 801b5e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b5e6:	4404      	add	r4, r0
 801b5e8:	6830      	ldr	r0, [r6, #0]
 801b5ea:	6803      	ldr	r3, [r0, #0]
 801b5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5ee:	4798      	blx	r3
 801b5f0:	4917      	ldr	r1, [pc, #92]	@ (801b650 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b5f2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b5f6:	880b      	ldrh	r3, [r1, #0]
 801b5f8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801b5fc:	fb03 c202 	mla	r2, r3, r2, ip
 801b600:	437b      	muls	r3, r7
 801b602:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801b606:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b60a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b60e:	4410      	add	r0, r2
 801b610:	18c2      	adds	r2, r0, r3
 801b612:	4290      	cmp	r0, r2
 801b614:	d214      	bcs.n	801b640 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801b616:	eb00 0c07 	add.w	ip, r0, r7
 801b61a:	4560      	cmp	r0, ip
 801b61c:	d204      	bcs.n	801b628 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801b61e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b622:	f800 3b01 	strb.w	r3, [r0], #1
 801b626:	e7f8      	b.n	801b61a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801b628:	880b      	ldrh	r3, [r1, #0]
 801b62a:	1b5b      	subs	r3, r3, r5
 801b62c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b630:	4418      	add	r0, r3
 801b632:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b636:	1b5b      	subs	r3, r3, r5
 801b638:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b63c:	441c      	add	r4, r3
 801b63e:	e7e8      	b.n	801b612 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801b640:	6830      	ldr	r0, [r6, #0]
 801b642:	6803      	ldr	r3, [r0, #0]
 801b644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b646:	4798      	blx	r3
 801b648:	e7b5      	b.n	801b5b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b64a:	bf00      	nop
 801b64c:	2402592c 	.word	0x2402592c
 801b650:	2402592e 	.word	0x2402592e
 801b654:	24025930 	.word	0x24025930
 801b658:	24025934 	.word	0x24025934

0801b65c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b660:	b08f      	sub	sp, #60	@ 0x3c
 801b662:	461c      	mov	r4, r3
 801b664:	9203      	str	r2, [sp, #12]
 801b666:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801b66a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b66c:	6820      	ldr	r0, [r4, #0]
 801b66e:	9100      	str	r1, [sp, #0]
 801b670:	9204      	str	r2, [sp, #16]
 801b672:	aa0a      	add	r2, sp, #40	@ 0x28
 801b674:	6861      	ldr	r1, [r4, #4]
 801b676:	c203      	stmia	r2!, {r0, r1}
 801b678:	6818      	ldr	r0, [r3, #0]
 801b67a:	aa0c      	add	r2, sp, #48	@ 0x30
 801b67c:	6859      	ldr	r1, [r3, #4]
 801b67e:	c203      	stmia	r2!, {r0, r1}
 801b680:	a80a      	add	r0, sp, #40	@ 0x28
 801b682:	f7fa f843 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b686:	4621      	mov	r1, r4
 801b688:	a80c      	add	r0, sp, #48	@ 0x30
 801b68a:	f7fa f867 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b68e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801b692:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801b696:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b69a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801b69e:	bfdb      	ittet	le
 801b6a0:	b2b3      	uxthle	r3, r6
 801b6a2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801b6a6:	2301      	movgt	r3, #1
 801b6a8:	fb92 f3f3 	sdivle	r3, r2, r3
 801b6ac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b6b0:	441d      	add	r5, r3
 801b6b2:	fb92 f1f3 	sdiv	r1, r2, r3
 801b6b6:	fa1f fc81 	uxth.w	ip, r1
 801b6ba:	3d01      	subs	r5, #1
 801b6bc:	fb0c 2413 	mls	r4, ip, r3, r2
 801b6c0:	4661      	mov	r1, ip
 801b6c2:	fb14 f406 	smulbb	r4, r4, r6
 801b6c6:	4404      	add	r4, r0
 801b6c8:	fb95 f5f3 	sdiv	r5, r5, r3
 801b6cc:	b2a4      	uxth	r4, r4
 801b6ce:	b131      	cbz	r1, 801b6de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801b6d0:	9b03      	ldr	r3, [sp, #12]
 801b6d2:	9900      	ldr	r1, [sp, #0]
 801b6d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801b6d8:	ba1b      	rev	r3, r3
 801b6da:	4419      	add	r1, r3
 801b6dc:	9100      	str	r1, [sp, #0]
 801b6de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b6e2:	b2ad      	uxth	r5, r5
 801b6e4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801b6e8:	4418      	add	r0, r3
 801b6ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801b6ee:	00ad      	lsls	r5, r5, #2
 801b6f0:	441a      	add	r2, r3
 801b6f2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801b6f6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801b6fa:	9301      	str	r3, [sp, #4]
 801b6fc:	4b79      	ldr	r3, [pc, #484]	@ (801b8e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801b6fe:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801b702:	6818      	ldr	r0, [r3, #0]
 801b704:	6803      	ldr	r3, [r0, #0]
 801b706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b708:	4798      	blx	r3
 801b70a:	4a77      	ldr	r2, [pc, #476]	@ (801b8e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801b70c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801b710:	2c00      	cmp	r4, #0
 801b712:	8813      	ldrh	r3, [r2, #0]
 801b714:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801b718:	9209      	str	r2, [sp, #36]	@ 0x24
 801b71a:	fb03 c101 	mla	r1, r3, r1, ip
 801b71e:	fb06 f303 	mul.w	r3, r6, r3
 801b722:	bf18      	it	ne
 801b724:	2600      	movne	r6, #0
 801b726:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b72a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b72e:	4408      	add	r0, r1
 801b730:	4403      	add	r3, r0
 801b732:	9306      	str	r3, [sp, #24]
 801b734:	f105 0304 	add.w	r3, r5, #4
 801b738:	9305      	str	r3, [sp, #20]
 801b73a:	9b01      	ldr	r3, [sp, #4]
 801b73c:	bf08      	it	eq
 801b73e:	461e      	moveq	r6, r3
 801b740:	2300      	movs	r3, #0
 801b742:	b2b6      	uxth	r6, r6
 801b744:	9302      	str	r3, [sp, #8]
 801b746:	9a06      	ldr	r2, [sp, #24]
 801b748:	4290      	cmp	r0, r2
 801b74a:	f080 80c2 	bcs.w	801b8d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801b74e:	b963      	cbnz	r3, 801b76a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801b750:	9b00      	ldr	r3, [sp, #0]
 801b752:	781a      	ldrb	r2, [r3, #0]
 801b754:	0993      	lsrs	r3, r2, #6
 801b756:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b75a:	9202      	str	r2, [sp, #8]
 801b75c:	1e5a      	subs	r2, r3, #1
 801b75e:	2a02      	cmp	r2, #2
 801b760:	d815      	bhi.n	801b78e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801b762:	9a00      	ldr	r2, [sp, #0]
 801b764:	b29b      	uxth	r3, r3
 801b766:	3201      	adds	r2, #1
 801b768:	9200      	str	r2, [sp, #0]
 801b76a:	b1b4      	cbz	r4, 801b79a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801b76c:	429c      	cmp	r4, r3
 801b76e:	bf91      	iteee	ls
 801b770:	1b1c      	subls	r4, r3, r4
 801b772:	1ae4      	subhi	r4, r4, r3
 801b774:	4635      	movhi	r5, r6
 801b776:	f04f 0e00 	movhi.w	lr, #0
 801b77a:	bf9b      	ittet	ls
 801b77c:	fa1f fe84 	uxthls.w	lr, r4
 801b780:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801b784:	b2a4      	uxthhi	r4, r4
 801b786:	2400      	movls	r4, #0
 801b788:	4673      	mov	r3, lr
 801b78a:	462e      	mov	r6, r5
 801b78c:	e7db      	b.n	801b746 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801b78e:	9a00      	ldr	r2, [sp, #0]
 801b790:	9b00      	ldr	r3, [sp, #0]
 801b792:	3202      	adds	r2, #2
 801b794:	785b      	ldrb	r3, [r3, #1]
 801b796:	9200      	str	r2, [sp, #0]
 801b798:	e7e7      	b.n	801b76a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801b79a:	2204      	movs	r2, #4
 801b79c:	9905      	ldr	r1, [sp, #20]
 801b79e:	429e      	cmp	r6, r3
 801b7a0:	4615      	mov	r5, r2
 801b7a2:	9a02      	ldr	r2, [sp, #8]
 801b7a4:	bf94      	ite	ls
 801b7a6:	eba3 0e06 	subls.w	lr, r3, r6
 801b7aa:	46a6      	movhi	lr, r4
 801b7ac:	fb15 1202 	smlabb	r2, r5, r2, r1
 801b7b0:	9903      	ldr	r1, [sp, #12]
 801b7b2:	bf8c      	ite	hi
 801b7b4:	1af5      	subhi	r5, r6, r3
 801b7b6:	fa1f fe8e 	uxthls.w	lr, lr
 801b7ba:	f851 c002 	ldr.w	ip, [r1, r2]
 801b7be:	bf9a      	itte	ls
 801b7c0:	4625      	movls	r5, r4
 801b7c2:	4632      	movls	r2, r6
 801b7c4:	b2ad      	uxthhi	r5, r5
 801b7c6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801b7ca:	bf88      	it	hi
 801b7cc:	461a      	movhi	r2, r3
 801b7ce:	b179      	cbz	r1, 801b7f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801b7d0:	29ff      	cmp	r1, #255	@ 0xff
 801b7d2:	fa5f f98c 	uxtb.w	r9, ip
 801b7d6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801b7da:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801b7de:	d126      	bne.n	801b82e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801b7e0:	9f04      	ldr	r7, [sp, #16]
 801b7e2:	2fff      	cmp	r7, #255	@ 0xff
 801b7e4:	d123      	bne.n	801b82e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801b7e6:	4682      	mov	sl, r0
 801b7e8:	4611      	mov	r1, r2
 801b7ea:	f10a 0a03 	add.w	sl, sl, #3
 801b7ee:	b9a9      	cbnz	r1, 801b81c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801b7f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7f4:	429e      	cmp	r6, r3
 801b7f6:	4410      	add	r0, r2
 801b7f8:	d8c6      	bhi.n	801b788 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801b7fa:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801b7fe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801b802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b804:	1b64      	subs	r4, r4, r5
 801b806:	9a01      	ldr	r2, [sp, #4]
 801b808:	881b      	ldrh	r3, [r3, #0]
 801b80a:	b2a4      	uxth	r4, r4
 801b80c:	1a9b      	subs	r3, r3, r2
 801b80e:	2c00      	cmp	r4, #0
 801b810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b814:	bf18      	it	ne
 801b816:	2500      	movne	r5, #0
 801b818:	4418      	add	r0, r3
 801b81a:	e7b5      	b.n	801b788 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801b81c:	3901      	subs	r1, #1
 801b81e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801b822:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801b826:	f80a cc01 	strb.w	ip, [sl, #-1]
 801b82a:	b289      	uxth	r1, r1
 801b82c:	e7dd      	b.n	801b7ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801b82e:	9f04      	ldr	r7, [sp, #16]
 801b830:	fb07 fa01 	mul.w	sl, r7, r1
 801b834:	f10a 0101 	add.w	r1, sl, #1
 801b838:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801b83c:	1209      	asrs	r1, r1, #8
 801b83e:	ea6f 0a01 	mvn.w	sl, r1
 801b842:	b289      	uxth	r1, r1
 801b844:	fb19 f901 	smulbb	r9, r9, r1
 801b848:	fa5f fa8a 	uxtb.w	sl, sl
 801b84c:	fb18 f801 	smulbb	r8, r8, r1
 801b850:	fb1c f101 	smulbb	r1, ip, r1
 801b854:	fa1f f789 	uxth.w	r7, r9
 801b858:	4684      	mov	ip, r0
 801b85a:	4691      	mov	r9, r2
 801b85c:	9707      	str	r7, [sp, #28]
 801b85e:	b289      	uxth	r1, r1
 801b860:	fa1f f788 	uxth.w	r7, r8
 801b864:	9708      	str	r7, [sp, #32]
 801b866:	f10c 0c03 	add.w	ip, ip, #3
 801b86a:	f1b9 0f00 	cmp.w	r9, #0
 801b86e:	d0bf      	beq.n	801b7f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801b870:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801b874:	f109 39ff 	add.w	r9, r9, #4294967295
 801b878:	9f07      	ldr	r7, [sp, #28]
 801b87a:	fa1f f989 	uxth.w	r9, r9
 801b87e:	fb08 780a 	mla	r8, r8, sl, r7
 801b882:	9f08      	ldr	r7, [sp, #32]
 801b884:	fa1f f888 	uxth.w	r8, r8
 801b888:	f108 0b01 	add.w	fp, r8, #1
 801b88c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b890:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b894:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801b898:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801b89c:	fb08 780a 	mla	r8, r8, sl, r7
 801b8a0:	fa1f f888 	uxth.w	r8, r8
 801b8a4:	f108 0b01 	add.w	fp, r8, #1
 801b8a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8b0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801b8b4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801b8b8:	fb08 180a 	mla	r8, r8, sl, r1
 801b8bc:	fa1f f888 	uxth.w	r8, r8
 801b8c0:	f108 0b01 	add.w	fp, r8, #1
 801b8c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8cc:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801b8d0:	e7c9      	b.n	801b866 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801b8d2:	4b04      	ldr	r3, [pc, #16]	@ (801b8e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801b8d4:	6818      	ldr	r0, [r3, #0]
 801b8d6:	6803      	ldr	r3, [r0, #0]
 801b8d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b8da:	4798      	blx	r3
 801b8dc:	b00f      	add	sp, #60	@ 0x3c
 801b8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8e2:	bf00      	nop
 801b8e4:	24025934 	.word	0x24025934
 801b8e8:	2402592e 	.word	0x2402592e

0801b8ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8f0:	b089      	sub	sp, #36	@ 0x24
 801b8f2:	4607      	mov	r7, r0
 801b8f4:	4689      	mov	r9, r1
 801b8f6:	4692      	mov	sl, r2
 801b8f8:	ac08      	add	r4, sp, #32
 801b8fa:	461e      	mov	r6, r3
 801b8fc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b900:	4620      	mov	r0, r4
 801b902:	f7fd ff77 	bl	80197f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b906:	683b      	ldr	r3, [r7, #0]
 801b908:	4605      	mov	r5, r0
 801b90a:	4620      	mov	r0, r4
 801b90c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801b910:	f7fd feb6 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b914:	4683      	mov	fp, r0
 801b916:	4620      	mov	r0, r4
 801b918:	f7fd fee6 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b91c:	4653      	mov	r3, sl
 801b91e:	464a      	mov	r2, r9
 801b920:	4639      	mov	r1, r7
 801b922:	9500      	str	r5, [sp, #0]
 801b924:	e9cd b001 	strd	fp, r0, [sp, #4]
 801b928:	a806      	add	r0, sp, #24
 801b92a:	47c0      	blx	r8
 801b92c:	a906      	add	r1, sp, #24
 801b92e:	4630      	mov	r0, r6
 801b930:	f7fd fd8a 	bl	8019448 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801b934:	4628      	mov	r0, r5
 801b936:	b009      	add	sp, #36	@ 0x24
 801b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b93c <_ZN8touchgfx8LCD24bppD0Ev>:
 801b93c:	b510      	push	{r4, lr}
 801b93e:	4604      	mov	r4, r0
 801b940:	216c      	movs	r1, #108	@ 0x6c
 801b942:	f008 fc7f 	bl	8024244 <_ZdlPvj>
 801b946:	4620      	mov	r0, r4
 801b948:	bd10      	pop	{r4, pc}

0801b94a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801b94a:	b510      	push	{r4, lr}
 801b94c:	4604      	mov	r4, r0
 801b94e:	2104      	movs	r1, #4
 801b950:	f008 fc78 	bl	8024244 <_ZdlPvj>
 801b954:	4620      	mov	r0, r4
 801b956:	bd10      	pop	{r4, pc}

0801b958 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801b958:	b510      	push	{r4, lr}
 801b95a:	4604      	mov	r4, r0
 801b95c:	2104      	movs	r1, #4
 801b95e:	f008 fc71 	bl	8024244 <_ZdlPvj>
 801b962:	4620      	mov	r0, r4
 801b964:	bd10      	pop	{r4, pc}

0801b966 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801b966:	b510      	push	{r4, lr}
 801b968:	4604      	mov	r4, r0
 801b96a:	f640 0144 	movw	r1, #2116	@ 0x844
 801b96e:	f008 fc69 	bl	8024244 <_ZdlPvj>
 801b972:	4620      	mov	r0, r4
 801b974:	bd10      	pop	{r4, pc}

0801b976 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801b976:	b510      	push	{r4, lr}
 801b978:	4604      	mov	r4, r0
 801b97a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801b97e:	f008 fc61 	bl	8024244 <_ZdlPvj>
 801b982:	4620      	mov	r0, r4
 801b984:	bd10      	pop	{r4, pc}

0801b986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b986:	b510      	push	{r4, lr}
 801b988:	4604      	mov	r4, r0
 801b98a:	2104      	movs	r1, #4
 801b98c:	f008 fc5a 	bl	8024244 <_ZdlPvj>
 801b990:	4620      	mov	r0, r4
 801b992:	bd10      	pop	{r4, pc}

0801b994 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b994:	b510      	push	{r4, lr}
 801b996:	4604      	mov	r4, r0
 801b998:	2104      	movs	r1, #4
 801b99a:	f008 fc53 	bl	8024244 <_ZdlPvj>
 801b99e:	4620      	mov	r0, r4
 801b9a0:	bd10      	pop	{r4, pc}

0801b9a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b9a2:	b510      	push	{r4, lr}
 801b9a4:	4604      	mov	r4, r0
 801b9a6:	2104      	movs	r1, #4
 801b9a8:	f008 fc4c 	bl	8024244 <_ZdlPvj>
 801b9ac:	4620      	mov	r0, r4
 801b9ae:	bd10      	pop	{r4, pc}

0801b9b0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b9b0:	b510      	push	{r4, lr}
 801b9b2:	4604      	mov	r4, r0
 801b9b4:	2104      	movs	r1, #4
 801b9b6:	f008 fc45 	bl	8024244 <_ZdlPvj>
 801b9ba:	4620      	mov	r0, r4
 801b9bc:	bd10      	pop	{r4, pc}

0801b9be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b9be:	b510      	push	{r4, lr}
 801b9c0:	4604      	mov	r4, r0
 801b9c2:	2104      	movs	r1, #4
 801b9c4:	f008 fc3e 	bl	8024244 <_ZdlPvj>
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	bd10      	pop	{r4, pc}

0801b9cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b9cc:	b510      	push	{r4, lr}
 801b9ce:	4604      	mov	r4, r0
 801b9d0:	2104      	movs	r1, #4
 801b9d2:	f008 fc37 	bl	8024244 <_ZdlPvj>
 801b9d6:	4620      	mov	r0, r4
 801b9d8:	bd10      	pop	{r4, pc}

0801b9da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b9da:	b510      	push	{r4, lr}
 801b9dc:	4604      	mov	r4, r0
 801b9de:	2104      	movs	r1, #4
 801b9e0:	f008 fc30 	bl	8024244 <_ZdlPvj>
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	bd10      	pop	{r4, pc}

0801b9e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b9e8:	b510      	push	{r4, lr}
 801b9ea:	4604      	mov	r4, r0
 801b9ec:	2104      	movs	r1, #4
 801b9ee:	f008 fc29 	bl	8024244 <_ZdlPvj>
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	bd10      	pop	{r4, pc}

0801b9f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b9f6:	b510      	push	{r4, lr}
 801b9f8:	4604      	mov	r4, r0
 801b9fa:	2104      	movs	r1, #4
 801b9fc:	f008 fc22 	bl	8024244 <_ZdlPvj>
 801ba00:	4620      	mov	r0, r4
 801ba02:	bd10      	pop	{r4, pc}

0801ba04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ba04:	b510      	push	{r4, lr}
 801ba06:	4604      	mov	r4, r0
 801ba08:	2104      	movs	r1, #4
 801ba0a:	f008 fc1b 	bl	8024244 <_ZdlPvj>
 801ba0e:	4620      	mov	r0, r4
 801ba10:	bd10      	pop	{r4, pc}

0801ba12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ba12:	b510      	push	{r4, lr}
 801ba14:	4604      	mov	r4, r0
 801ba16:	2104      	movs	r1, #4
 801ba18:	f008 fc14 	bl	8024244 <_ZdlPvj>
 801ba1c:	4620      	mov	r0, r4
 801ba1e:	bd10      	pop	{r4, pc}

0801ba20 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ba20:	b510      	push	{r4, lr}
 801ba22:	4604      	mov	r4, r0
 801ba24:	2104      	movs	r1, #4
 801ba26:	f008 fc0d 	bl	8024244 <_ZdlPvj>
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	bd10      	pop	{r4, pc}

0801ba2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801ba2e:	b510      	push	{r4, lr}
 801ba30:	4604      	mov	r4, r0
 801ba32:	2104      	movs	r1, #4
 801ba34:	f008 fc06 	bl	8024244 <_ZdlPvj>
 801ba38:	4620      	mov	r0, r4
 801ba3a:	bd10      	pop	{r4, pc}

0801ba3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ba3c:	b510      	push	{r4, lr}
 801ba3e:	4604      	mov	r4, r0
 801ba40:	2104      	movs	r1, #4
 801ba42:	f008 fbff 	bl	8024244 <_ZdlPvj>
 801ba46:	4620      	mov	r0, r4
 801ba48:	bd10      	pop	{r4, pc}

0801ba4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801ba4a:	b510      	push	{r4, lr}
 801ba4c:	4604      	mov	r4, r0
 801ba4e:	2104      	movs	r1, #4
 801ba50:	f008 fbf8 	bl	8024244 <_ZdlPvj>
 801ba54:	4620      	mov	r0, r4
 801ba56:	bd10      	pop	{r4, pc}

0801ba58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ba58:	b510      	push	{r4, lr}
 801ba5a:	4604      	mov	r4, r0
 801ba5c:	2104      	movs	r1, #4
 801ba5e:	f008 fbf1 	bl	8024244 <_ZdlPvj>
 801ba62:	4620      	mov	r0, r4
 801ba64:	bd10      	pop	{r4, pc}

0801ba66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801ba66:	b510      	push	{r4, lr}
 801ba68:	4604      	mov	r4, r0
 801ba6a:	2104      	movs	r1, #4
 801ba6c:	f008 fbea 	bl	8024244 <_ZdlPvj>
 801ba70:	4620      	mov	r0, r4
 801ba72:	bd10      	pop	{r4, pc}

0801ba74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801ba74:	b510      	push	{r4, lr}
 801ba76:	4604      	mov	r4, r0
 801ba78:	2104      	movs	r1, #4
 801ba7a:	f008 fbe3 	bl	8024244 <_ZdlPvj>
 801ba7e:	4620      	mov	r0, r4
 801ba80:	bd10      	pop	{r4, pc}

0801ba82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801ba82:	b510      	push	{r4, lr}
 801ba84:	4604      	mov	r4, r0
 801ba86:	2104      	movs	r1, #4
 801ba88:	f008 fbdc 	bl	8024244 <_ZdlPvj>
 801ba8c:	4620      	mov	r0, r4
 801ba8e:	bd10      	pop	{r4, pc}

0801ba90 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801ba90:	b510      	push	{r4, lr}
 801ba92:	4604      	mov	r4, r0
 801ba94:	2104      	movs	r1, #4
 801ba96:	f008 fbd5 	bl	8024244 <_ZdlPvj>
 801ba9a:	4620      	mov	r0, r4
 801ba9c:	bd10      	pop	{r4, pc}
	...

0801baa0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baa4:	b08f      	sub	sp, #60	@ 0x3c
 801baa6:	461c      	mov	r4, r3
 801baa8:	460e      	mov	r6, r1
 801baaa:	9206      	str	r2, [sp, #24]
 801baac:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bab0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bab2:	9202      	str	r2, [sp, #8]
 801bab4:	2a00      	cmp	r2, #0
 801bab6:	f000 8128 	beq.w	801bd0a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801baba:	6820      	ldr	r0, [r4, #0]
 801babc:	aa0a      	add	r2, sp, #40	@ 0x28
 801babe:	6861      	ldr	r1, [r4, #4]
 801bac0:	c203      	stmia	r2!, {r0, r1}
 801bac2:	6818      	ldr	r0, [r3, #0]
 801bac4:	aa0c      	add	r2, sp, #48	@ 0x30
 801bac6:	6859      	ldr	r1, [r3, #4]
 801bac8:	c203      	stmia	r2!, {r0, r1}
 801baca:	a80a      	add	r0, sp, #40	@ 0x28
 801bacc:	f7f9 fe1e 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bad0:	4621      	mov	r1, r4
 801bad2:	a80c      	add	r0, sp, #48	@ 0x30
 801bad4:	f7f9 fe42 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bad8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801badc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801bae0:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801bae4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801bae8:	bfdb      	ittet	le
 801baea:	b2bb      	uxthle	r3, r7
 801baec:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801baf0:	2301      	movgt	r3, #1
 801baf2:	fb92 f3f3 	sdivle	r3, r2, r3
 801baf6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801bafa:	441d      	add	r5, r3
 801bafc:	fb92 f1f3 	sdiv	r1, r2, r3
 801bb00:	fa1f fc81 	uxth.w	ip, r1
 801bb04:	3d01      	subs	r5, #1
 801bb06:	fb0c 2413 	mls	r4, ip, r3, r2
 801bb0a:	4661      	mov	r1, ip
 801bb0c:	fb14 f407 	smulbb	r4, r4, r7
 801bb10:	4404      	add	r4, r0
 801bb12:	fb95 f5f3 	sdiv	r5, r5, r3
 801bb16:	b2a4      	uxth	r4, r4
 801bb18:	b121      	cbz	r1, 801bb24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801bb1a:	9b06      	ldr	r3, [sp, #24]
 801bb1c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801bb20:	ba1b      	rev	r3, r3
 801bb22:	441e      	add	r6, r3
 801bb24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801bb28:	b2ad      	uxth	r5, r5
 801bb2a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801bb2e:	4418      	add	r0, r3
 801bb30:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801bb34:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801bb38:	00ad      	lsls	r5, r5, #2
 801bb3a:	441a      	add	r2, r3
 801bb3c:	4b74      	ldr	r3, [pc, #464]	@ (801bd10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801bb3e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801bb42:	6818      	ldr	r0, [r3, #0]
 801bb44:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801bb48:	6803      	ldr	r3, [r0, #0]
 801bb4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb4c:	4798      	blx	r3
 801bb4e:	4a71      	ldr	r2, [pc, #452]	@ (801bd14 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801bb50:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801bb54:	2c00      	cmp	r4, #0
 801bb56:	8813      	ldrh	r3, [r2, #0]
 801bb58:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801bb5c:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb5e:	fb03 c101 	mla	r1, r3, r1, ip
 801bb62:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801bb66:	fb03 f307 	mul.w	r3, r3, r7
 801bb6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bb6e:	9204      	str	r2, [sp, #16]
 801bb70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb74:	9a02      	ldr	r2, [sp, #8]
 801bb76:	4408      	add	r0, r1
 801bb78:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801bb7c:	4403      	add	r3, r0
 801bb7e:	b292      	uxth	r2, r2
 801bb80:	9307      	str	r3, [sp, #28]
 801bb82:	f105 0304 	add.w	r3, r5, #4
 801bb86:	bf0c      	ite	eq
 801bb88:	4645      	moveq	r5, r8
 801bb8a:	2500      	movne	r5, #0
 801bb8c:	9308      	str	r3, [sp, #32]
 801bb8e:	2300      	movs	r3, #0
 801bb90:	b2ad      	uxth	r5, r5
 801bb92:	9205      	str	r2, [sp, #20]
 801bb94:	9303      	str	r3, [sp, #12]
 801bb96:	9a07      	ldr	r2, [sp, #28]
 801bb98:	4282      	cmp	r2, r0
 801bb9a:	f240 80b1 	bls.w	801bd00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801bb9e:	b95b      	cbnz	r3, 801bbb8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801bba0:	7832      	ldrb	r2, [r6, #0]
 801bba2:	0993      	lsrs	r3, r2, #6
 801bba4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801bba8:	9203      	str	r2, [sp, #12]
 801bbaa:	1e5a      	subs	r2, r3, #1
 801bbac:	2a02      	cmp	r2, #2
 801bbae:	bf8d      	iteet	hi
 801bbb0:	7873      	ldrbhi	r3, [r6, #1]
 801bbb2:	3601      	addls	r6, #1
 801bbb4:	b29b      	uxthls	r3, r3
 801bbb6:	3602      	addhi	r6, #2
 801bbb8:	b184      	cbz	r4, 801bbdc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801bbba:	429c      	cmp	r4, r3
 801bbbc:	bf91      	iteee	ls
 801bbbe:	1b1c      	subls	r4, r3, r4
 801bbc0:	1ae4      	subhi	r4, r4, r3
 801bbc2:	4629      	movhi	r1, r5
 801bbc4:	f04f 0e00 	movhi.w	lr, #0
 801bbc8:	bf9b      	ittet	ls
 801bbca:	fa1f fe84 	uxthls.w	lr, r4
 801bbce:	2400      	movls	r4, #0
 801bbd0:	b2a4      	uxthhi	r4, r4
 801bbd2:	fa1f f188 	uxthls.w	r1, r8
 801bbd6:	4673      	mov	r3, lr
 801bbd8:	460d      	mov	r5, r1
 801bbda:	e7dc      	b.n	801bb96 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801bbdc:	2203      	movs	r2, #3
 801bbde:	9908      	ldr	r1, [sp, #32]
 801bbe0:	42ab      	cmp	r3, r5
 801bbe2:	4617      	mov	r7, r2
 801bbe4:	9a03      	ldr	r2, [sp, #12]
 801bbe6:	bf24      	itt	cs
 801bbe8:	eba3 0e05 	subcs.w	lr, r3, r5
 801bbec:	9501      	strcs	r5, [sp, #4]
 801bbee:	fb17 1702 	smlabb	r7, r7, r2, r1
 801bbf2:	9a06      	ldr	r2, [sp, #24]
 801bbf4:	bf34      	ite	cc
 801bbf6:	1ae9      	subcc	r1, r5, r3
 801bbf8:	fa1f fe8e 	uxthcs.w	lr, lr
 801bbfc:	4417      	add	r7, r2
 801bbfe:	9a02      	ldr	r2, [sp, #8]
 801bc00:	bf2f      	iteee	cs
 801bc02:	4621      	movcs	r1, r4
 801bc04:	b289      	uxthcc	r1, r1
 801bc06:	9301      	strcc	r3, [sp, #4]
 801bc08:	46a6      	movcc	lr, r4
 801bc0a:	2aff      	cmp	r2, #255	@ 0xff
 801bc0c:	d11e      	bne.n	801bc4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801bc0e:	4681      	mov	r9, r0
 801bc10:	f8dd c004 	ldr.w	ip, [sp, #4]
 801bc14:	f109 0903 	add.w	r9, r9, #3
 801bc18:	f1bc 0f00 	cmp.w	ip, #0
 801bc1c:	d15f      	bne.n	801bcde <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801bc1e:	9a01      	ldr	r2, [sp, #4]
 801bc20:	42ab      	cmp	r3, r5
 801bc22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bc26:	4410      	add	r0, r2
 801bc28:	d3d5      	bcc.n	801bbd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801bc2a:	fa1f f188 	uxth.w	r1, r8
 801bc2e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801bc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc34:	1a64      	subs	r4, r4, r1
 801bc36:	881b      	ldrh	r3, [r3, #0]
 801bc38:	b2a4      	uxth	r4, r4
 801bc3a:	eba3 0308 	sub.w	r3, r3, r8
 801bc3e:	2c00      	cmp	r4, #0
 801bc40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc44:	bf18      	it	ne
 801bc46:	2100      	movne	r1, #0
 801bc48:	4418      	add	r0, r3
 801bc4a:	e7c4      	b.n	801bbd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801bc4c:	4684      	mov	ip, r0
 801bc4e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801bc52:	f10c 0c03 	add.w	ip, ip, #3
 801bc56:	f1ba 0f00 	cmp.w	sl, #0
 801bc5a:	d0e0      	beq.n	801bc1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801bc5c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801bc60:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bc64:	9a05      	ldr	r2, [sp, #20]
 801bc66:	f897 9000 	ldrb.w	r9, [r7]
 801bc6a:	fa1f fa8a 	uxth.w	sl, sl
 801bc6e:	fb1b fb02 	smulbb	fp, fp, r2
 801bc72:	9a04      	ldr	r2, [sp, #16]
 801bc74:	fb09 b902 	mla	r9, r9, r2, fp
 801bc78:	9a05      	ldr	r2, [sp, #20]
 801bc7a:	fa1f f989 	uxth.w	r9, r9
 801bc7e:	f109 0b01 	add.w	fp, r9, #1
 801bc82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bc86:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801bc8a:	fb1b fb02 	smulbb	fp, fp, r2
 801bc8e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc92:	9a04      	ldr	r2, [sp, #16]
 801bc94:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801bc98:	f897 9001 	ldrb.w	r9, [r7, #1]
 801bc9c:	fb09 b902 	mla	r9, r9, r2, fp
 801bca0:	9a05      	ldr	r2, [sp, #20]
 801bca2:	fa1f f989 	uxth.w	r9, r9
 801bca6:	f109 0b01 	add.w	fp, r9, #1
 801bcaa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bcae:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801bcb2:	fb1b fb02 	smulbb	fp, fp, r2
 801bcb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcba:	9a04      	ldr	r2, [sp, #16]
 801bcbc:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801bcc0:	f897 9002 	ldrb.w	r9, [r7, #2]
 801bcc4:	fb09 b902 	mla	r9, r9, r2, fp
 801bcc8:	fa1f f989 	uxth.w	r9, r9
 801bccc:	f109 0b01 	add.w	fp, r9, #1
 801bcd0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bcd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bcd8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801bcdc:	e7b9      	b.n	801bc52 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801bcde:	f897 a000 	ldrb.w	sl, [r7]
 801bce2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801bce6:	f809 ac03 	strb.w	sl, [r9, #-3]
 801bcea:	fa1f fc8c 	uxth.w	ip, ip
 801bcee:	f897 a001 	ldrb.w	sl, [r7, #1]
 801bcf2:	f809 ac02 	strb.w	sl, [r9, #-2]
 801bcf6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bcfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bcfe:	e789      	b.n	801bc14 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801bd00:	4b03      	ldr	r3, [pc, #12]	@ (801bd10 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801bd02:	6818      	ldr	r0, [r3, #0]
 801bd04:	6803      	ldr	r3, [r0, #0]
 801bd06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bd08:	4798      	blx	r3
 801bd0a:	b00f      	add	sp, #60	@ 0x3c
 801bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd10:	24025934 	.word	0x24025934
 801bd14:	2402592e 	.word	0x2402592e

0801bd18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd1c:	b09b      	sub	sp, #108	@ 0x6c
 801bd1e:	461d      	mov	r5, r3
 801bd20:	4604      	mov	r4, r0
 801bd22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bd24:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801bd28:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801bd2c:	9208      	str	r2, [sp, #32]
 801bd2e:	2a00      	cmp	r2, #0
 801bd30:	f000 81f3 	beq.w	801c11a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801bd34:	6828      	ldr	r0, [r5, #0]
 801bd36:	aa16      	add	r2, sp, #88	@ 0x58
 801bd38:	6869      	ldr	r1, [r5, #4]
 801bd3a:	c203      	stmia	r2!, {r0, r1}
 801bd3c:	6818      	ldr	r0, [r3, #0]
 801bd3e:	aa18      	add	r2, sp, #96	@ 0x60
 801bd40:	6859      	ldr	r1, [r3, #4]
 801bd42:	c203      	stmia	r2!, {r0, r1}
 801bd44:	a816      	add	r0, sp, #88	@ 0x58
 801bd46:	f7f9 fce1 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd4a:	4629      	mov	r1, r5
 801bd4c:	a818      	add	r0, sp, #96	@ 0x60
 801bd4e:	f7f9 fd05 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd52:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801bd56:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801bd5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801bd5e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801bd62:	bfdb      	ittet	le
 801bd64:	b29a      	uxthle	r2, r3
 801bd66:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801bd6a:	f04f 0a01 	movgt.w	sl, #1
 801bd6e:	fb91 faf2 	sdivle	sl, r1, r2
 801bd72:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801bd76:	4456      	add	r6, sl
 801bd78:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801bd7c:	3e01      	subs	r6, #1
 801bd7e:	fb92 f0fa 	sdiv	r0, r2, sl
 801bd82:	b280      	uxth	r0, r0
 801bd84:	fb00 281a 	mls	r8, r0, sl, r2
 801bd88:	900e      	str	r0, [sp, #56]	@ 0x38
 801bd8a:	fb18 f803 	smulbb	r8, r8, r3
 801bd8e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801bd92:	4488      	add	r8, r1
 801bd94:	4419      	add	r1, r3
 801bd96:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801bd9a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801bd9e:	fa1f f888 	uxth.w	r8, r8
 801bda2:	441a      	add	r2, r3
 801bda4:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801bda8:	9303      	str	r3, [sp, #12]
 801bdaa:	4b9c      	ldr	r3, [pc, #624]	@ (801c01c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801bdac:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801bdb0:	6818      	ldr	r0, [r3, #0]
 801bdb2:	6803      	ldr	r3, [r0, #0]
 801bdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdb6:	4798      	blx	r3
 801bdb8:	4b99      	ldr	r3, [pc, #612]	@ (801c020 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801bdba:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801bdbe:	f1b8 0f00 	cmp.w	r8, #0
 801bdc2:	881a      	ldrh	r2, [r3, #0]
 801bdc4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801bdc8:	fb02 f505 	mul.w	r5, r2, r5
 801bdcc:	fb02 7101 	mla	r1, r2, r1, r7
 801bdd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bdd4:	9314      	str	r3, [sp, #80]	@ 0x50
 801bdd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bdda:	9b08      	ldr	r3, [sp, #32]
 801bddc:	fb96 f6fa 	sdiv	r6, r6, sl
 801bde0:	4408      	add	r0, r1
 801bde2:	f106 0601 	add.w	r6, r6, #1
 801bde6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801bdea:	f04f 0100 	mov.w	r1, #0
 801bdee:	eb00 0205 	add.w	r2, r0, r5
 801bdf2:	b2b6      	uxth	r6, r6
 801bdf4:	b29b      	uxth	r3, r3
 801bdf6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bdf8:	9209      	str	r2, [sp, #36]	@ 0x24
 801bdfa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bdfc:	930d      	str	r3, [sp, #52]	@ 0x34
 801bdfe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801be02:	4b88      	ldr	r3, [pc, #544]	@ (801c024 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801be04:	f106 0204 	add.w	r2, r6, #4
 801be08:	eba3 0304 	sub.w	r3, r3, r4
 801be0c:	9205      	str	r2, [sp, #20]
 801be0e:	9a03      	ldr	r2, [sp, #12]
 801be10:	bf18      	it	ne
 801be12:	2200      	movne	r2, #0
 801be14:	9315      	str	r3, [sp, #84]	@ 0x54
 801be16:	b292      	uxth	r2, r2
 801be18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801be1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801be1c:	fa11 f383 	uxtah	r3, r1, r3
 801be20:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801be22:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801be26:	3304      	adds	r3, #4
 801be28:	9306      	str	r3, [sp, #24]
 801be2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be2c:	4283      	cmp	r3, r0
 801be2e:	f240 816f 	bls.w	801c110 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801be32:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801be36:	f04f 0900 	mov.w	r9, #0
 801be3a:	9d06      	ldr	r5, [sp, #24]
 801be3c:	fbb8 f3f3 	udiv	r3, r8, r3
 801be40:	ebaa 0303 	sub.w	r3, sl, r3
 801be44:	782d      	ldrb	r5, [r5, #0]
 801be46:	b29b      	uxth	r3, r3
 801be48:	950f      	str	r5, [sp, #60]	@ 0x3c
 801be4a:	3501      	adds	r5, #1
 801be4c:	9312      	str	r3, [sp, #72]	@ 0x48
 801be4e:	9b06      	ldr	r3, [sp, #24]
 801be50:	9504      	str	r5, [sp, #16]
 801be52:	7859      	ldrb	r1, [r3, #1]
 801be54:	789b      	ldrb	r3, [r3, #2]
 801be56:	021b      	lsls	r3, r3, #8
 801be58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801be5c:	9906      	ldr	r1, [sp, #24]
 801be5e:	78c9      	ldrb	r1, [r1, #3]
 801be60:	430b      	orrs	r3, r1
 801be62:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801be64:	4419      	add	r1, r3
 801be66:	1c4d      	adds	r5, r1, #1
 801be68:	7849      	ldrb	r1, [r1, #1]
 801be6a:	9502      	str	r5, [sp, #8]
 801be6c:	0209      	lsls	r1, r1, #8
 801be6e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801be70:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801be74:	5ceb      	ldrb	r3, [r5, r3]
 801be76:	4319      	orrs	r1, r3
 801be78:	b28b      	uxth	r3, r1
 801be7a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801be7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801be80:	2300      	movs	r3, #0
 801be82:	9307      	str	r3, [sp, #28]
 801be84:	2301      	movs	r3, #1
 801be86:	e9cd 3300 	strd	r3, r3, [sp]
 801be8a:	469c      	mov	ip, r3
 801be8c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801be90:	930c      	str	r3, [sp, #48]	@ 0x30
 801be92:	f1b8 0f00 	cmp.w	r8, #0
 801be96:	f000 8082 	beq.w	801bf9e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801be9a:	45c4      	cmp	ip, r8
 801be9c:	d270      	bcs.n	801bf80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801be9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bea0:	eba8 080c 	sub.w	r8, r8, ip
 801bea4:	4611      	mov	r1, r2
 801bea6:	4283      	cmp	r3, r0
 801bea8:	fa1f f888 	uxth.w	r8, r8
 801beac:	d802      	bhi.n	801beb4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801beae:	e074      	b.n	801bf9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d15f      	bne.n	801bf74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801beb4:	9b02      	ldr	r3, [sp, #8]
 801beb6:	9a01      	ldr	r2, [sp, #4]
 801beb8:	785b      	ldrb	r3, [r3, #1]
 801beba:	f1c2 0207 	rsb	r2, r2, #7
 801bebe:	9d01      	ldr	r5, [sp, #4]
 801bec0:	4093      	lsls	r3, r2
 801bec2:	005b      	lsls	r3, r3, #1
 801bec4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801bec8:	9b02      	ldr	r3, [sp, #8]
 801beca:	781b      	ldrb	r3, [r3, #0]
 801becc:	412b      	asrs	r3, r5
 801bece:	b2db      	uxtb	r3, r3
 801bed0:	4313      	orrs	r3, r2
 801bed2:	462a      	mov	r2, r5
 801bed4:	3201      	adds	r2, #1
 801bed6:	b29e      	uxth	r6, r3
 801bed8:	b2d2      	uxtb	r2, r2
 801beda:	2a08      	cmp	r2, #8
 801bedc:	9201      	str	r2, [sp, #4]
 801bede:	9a02      	ldr	r2, [sp, #8]
 801bee0:	bf09      	itett	eq
 801bee2:	3202      	addeq	r2, #2
 801bee4:	3201      	addne	r2, #1
 801bee6:	9202      	streq	r2, [sp, #8]
 801bee8:	2200      	moveq	r2, #0
 801beea:	bf14      	ite	ne
 801beec:	9202      	strne	r2, [sp, #8]
 801beee:	9201      	streq	r2, [sp, #4]
 801bef0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bef2:	42b2      	cmp	r2, r6
 801bef4:	d309      	bcc.n	801bf0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801bef6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801befa:	2301      	movs	r3, #1
 801befc:	9a04      	ldr	r2, [sp, #16]
 801befe:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801bf02:	d30e      	bcc.n	801bf22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801bf04:	9300      	str	r3, [sp, #0]
 801bf06:	2500      	movs	r5, #0
 801bf08:	e035      	b.n	801bf76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801bf0a:	9b04      	ldr	r3, [sp, #16]
 801bf0c:	429e      	cmp	r6, r3
 801bf0e:	d318      	bcc.n	801bf42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801bf10:	9b00      	ldr	r3, [sp, #0]
 801bf12:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801bf16:	18e3      	adds	r3, r4, r3
 801bf18:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801bf1c:	9b00      	ldr	r3, [sp, #0]
 801bf1e:	3301      	adds	r3, #1
 801bf20:	b29b      	uxth	r3, r3
 801bf22:	9a04      	ldr	r2, [sp, #16]
 801bf24:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801bf28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bf2c:	9f00      	ldr	r7, [sp, #0]
 801bf2e:	7115      	strb	r5, [r2, #4]
 801bf30:	3701      	adds	r7, #1
 801bf32:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801bf34:	7157      	strb	r7, [r2, #5]
 801bf36:	80d5      	strh	r5, [r2, #6]
 801bf38:	9a04      	ldr	r2, [sp, #16]
 801bf3a:	3201      	adds	r2, #1
 801bf3c:	b292      	uxth	r2, r2
 801bf3e:	9204      	str	r2, [sp, #16]
 801bf40:	e7e0      	b.n	801bf04 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801bf42:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801bf46:	4632      	mov	r2, r6
 801bf48:	795b      	ldrb	r3, [r3, #5]
 801bf4a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801bf4e:	4425      	add	r5, r4
 801bf50:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801bf52:	eb07 0c05 	add.w	ip, r7, r5
 801bf56:	f1bc 0f00 	cmp.w	ip, #0
 801bf5a:	dd07      	ble.n	801bf6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801bf5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bf60:	f892 c004 	ldrb.w	ip, [r2, #4]
 801bf64:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801bf68:	88d2      	ldrh	r2, [r2, #6]
 801bf6a:	e7f1      	b.n	801bf50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801bf6c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801bf70:	b29b      	uxth	r3, r3
 801bf72:	e7c3      	b.n	801befc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801bf74:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801bf76:	460a      	mov	r2, r1
 801bf78:	960a      	str	r6, [sp, #40]	@ 0x28
 801bf7a:	46a9      	mov	r9, r5
 801bf7c:	469c      	mov	ip, r3
 801bf7e:	e788      	b.n	801be92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801bf80:	ebac 0308 	sub.w	r3, ip, r8
 801bf84:	eb09 0508 	add.w	r5, r9, r8
 801bf88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801bf8c:	b29b      	uxth	r3, r3
 801bf8e:	b2ad      	uxth	r5, r5
 801bf90:	f04f 0800 	mov.w	r8, #0
 801bf94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf96:	4282      	cmp	r2, r0
 801bf98:	d88a      	bhi.n	801beb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801bf9a:	460a      	mov	r2, r1
 801bf9c:	e745      	b.n	801be2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801bf9e:	4594      	cmp	ip, r2
 801bfa0:	9d08      	ldr	r5, [sp, #32]
 801bfa2:	4686      	mov	lr, r0
 801bfa4:	bf27      	ittee	cs
 801bfa6:	ebac 0302 	subcs.w	r3, ip, r2
 801bfaa:	4616      	movcs	r6, r2
 801bfac:	eba2 010c 	subcc.w	r1, r2, ip
 801bfb0:	4666      	movcc	r6, ip
 801bfb2:	bf27      	ittee	cs
 801bfb4:	b29b      	uxthcs	r3, r3
 801bfb6:	4641      	movcs	r1, r8
 801bfb8:	b289      	uxthcc	r1, r1
 801bfba:	4643      	movcc	r3, r8
 801bfbc:	2dff      	cmp	r5, #255	@ 0xff
 801bfbe:	eb09 0506 	add.w	r5, r9, r6
 801bfc2:	b2ad      	uxth	r5, r5
 801bfc4:	d130      	bne.n	801c028 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801bfc6:	45a9      	cmp	r9, r5
 801bfc8:	f10e 0e03 	add.w	lr, lr, #3
 801bfcc:	d17a      	bne.n	801c0c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801bfce:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bfd2:	4594      	cmp	ip, r2
 801bfd4:	4430      	add	r0, r6
 801bfd6:	d3db      	bcc.n	801bf90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801bfd8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bfda:	9903      	ldr	r1, [sp, #12]
 801bfdc:	8812      	ldrh	r2, [r2, #0]
 801bfde:	1a52      	subs	r2, r2, r1
 801bfe0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801bfe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfe6:	4410      	add	r0, r2
 801bfe8:	9a07      	ldr	r2, [sp, #28]
 801bfea:	3201      	adds	r2, #1
 801bfec:	428a      	cmp	r2, r1
 801bfee:	9207      	str	r2, [sp, #28]
 801bff0:	f040 8081 	bne.w	801c0f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801bff4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801bff8:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801bffc:	9b03      	ldr	r3, [sp, #12]
 801bffe:	eba8 080c 	sub.w	r8, r8, ip
 801c002:	fa1f f888 	uxth.w	r8, r8
 801c006:	f1b8 0f00 	cmp.w	r8, #0
 801c00a:	bf08      	it	eq
 801c00c:	461a      	moveq	r2, r3
 801c00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c010:	bf18      	it	ne
 801c012:	2200      	movne	r2, #0
 801c014:	3301      	adds	r3, #1
 801c016:	b292      	uxth	r2, r2
 801c018:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c01a:	e6fd      	b.n	801be18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801c01c:	24025934 	.word	0x24025934
 801c020:	2402592e 	.word	0x2402592e
 801c024:	fffff7fb 	.word	0xfffff7fb
 801c028:	45a9      	cmp	r9, r5
 801c02a:	f10e 0e03 	add.w	lr, lr, #3
 801c02e:	d0ce      	beq.n	801bfce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801c030:	f109 0701 	add.w	r7, r9, #1
 801c034:	44a1      	add	r9, r4
 801c036:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801c03a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801c03e:	9713      	str	r7, [sp, #76]	@ 0x4c
 801c040:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c044:	9f05      	ldr	r7, [sp, #20]
 801c046:	eb07 0908 	add.w	r9, r7, r8
 801c04a:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c04e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c050:	fb1b fb07 	smulbb	fp, fp, r7
 801c054:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c056:	fb08 b807 	mla	r8, r8, r7, fp
 801c05a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c05c:	fa1f f888 	uxth.w	r8, r8
 801c060:	f108 0b01 	add.w	fp, r8, #1
 801c064:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c068:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801c06c:	fb1b fb07 	smulbb	fp, fp, r7
 801c070:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c074:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c076:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c07a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c07e:	fb08 b807 	mla	r8, r8, r7, fp
 801c082:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801c084:	fa1f f888 	uxth.w	r8, r8
 801c088:	f108 0b01 	add.w	fp, r8, #1
 801c08c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c090:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c094:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c098:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c09c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801c0a0:	fb19 f907 	smulbb	r9, r9, r7
 801c0a4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c0a6:	fb08 9807 	mla	r8, r8, r7, r9
 801c0aa:	fa1f f888 	uxth.w	r8, r8
 801c0ae:	f108 0901 	add.w	r9, r8, #1
 801c0b2:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801c0b6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801c0ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c0be:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c0c2:	e7b1      	b.n	801c028 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801c0c4:	f109 0b01 	add.w	fp, r9, #1
 801c0c8:	44a1      	add	r9, r4
 801c0ca:	9f05      	ldr	r7, [sp, #20]
 801c0cc:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801c0d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c0d4:	eb07 0908 	add.w	r9, r7, r8
 801c0d8:	f817 8008 	ldrb.w	r8, [r7, r8]
 801c0dc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801c0e0:	f899 8001 	ldrb.w	r8, [r9, #1]
 801c0e4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801c0e8:	f899 8002 	ldrb.w	r8, [r9, #2]
 801c0ec:	fa1f f98b 	uxth.w	r9, fp
 801c0f0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801c0f4:	e767      	b.n	801bfc6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801c0f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801c0fa:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801c0fe:	eba8 0801 	sub.w	r8, r8, r1
 801c102:	fa1f f888 	uxth.w	r8, r8
 801c106:	f1b8 0f00 	cmp.w	r8, #0
 801c10a:	bf18      	it	ne
 801c10c:	2100      	movne	r1, #0
 801c10e:	e741      	b.n	801bf94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801c110:	4b03      	ldr	r3, [pc, #12]	@ (801c120 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801c112:	6818      	ldr	r0, [r3, #0]
 801c114:	6803      	ldr	r3, [r0, #0]
 801c116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c118:	4798      	blx	r3
 801c11a:	b01b      	add	sp, #108	@ 0x6c
 801c11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c120:	24025934 	.word	0x24025934

0801c124 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c128:	b09d      	sub	sp, #116	@ 0x74
 801c12a:	461d      	mov	r5, r3
 801c12c:	4604      	mov	r4, r0
 801c12e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c130:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801c134:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801c138:	920c      	str	r2, [sp, #48]	@ 0x30
 801c13a:	2a00      	cmp	r2, #0
 801c13c:	f000 81de 	beq.w	801c4fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801c140:	6828      	ldr	r0, [r5, #0]
 801c142:	aa18      	add	r2, sp, #96	@ 0x60
 801c144:	6869      	ldr	r1, [r5, #4]
 801c146:	c203      	stmia	r2!, {r0, r1}
 801c148:	6818      	ldr	r0, [r3, #0]
 801c14a:	aa1a      	add	r2, sp, #104	@ 0x68
 801c14c:	6859      	ldr	r1, [r3, #4]
 801c14e:	c203      	stmia	r2!, {r0, r1}
 801c150:	a818      	add	r0, sp, #96	@ 0x60
 801c152:	f7f9 fadb 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c156:	4629      	mov	r1, r5
 801c158:	a81a      	add	r0, sp, #104	@ 0x68
 801c15a:	f7f9 faff 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c15e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801c162:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801c166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801c16a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801c16e:	bfdb      	ittet	le
 801c170:	b29a      	uxthle	r2, r3
 801c172:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c176:	2201      	movgt	r2, #1
 801c178:	fb91 f2f2 	sdivle	r2, r1, r2
 801c17c:	9201      	str	r2, [sp, #4]
 801c17e:	9801      	ldr	r0, [sp, #4]
 801c180:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801c184:	9901      	ldr	r1, [sp, #4]
 801c186:	fb92 f0f0 	sdiv	r0, r2, r0
 801c18a:	b280      	uxth	r0, r0
 801c18c:	440f      	add	r7, r1
 801c18e:	900d      	str	r0, [sp, #52]	@ 0x34
 801c190:	3f01      	subs	r7, #1
 801c192:	9801      	ldr	r0, [sp, #4]
 801c194:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c196:	fb05 2510 	mls	r5, r5, r0, r2
 801c19a:	fb97 f7f1 	sdiv	r7, r7, r1
 801c19e:	fb15 f503 	smulbb	r5, r5, r3
 801c1a2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801c1a6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801c1aa:	3701      	adds	r7, #1
 801c1ac:	440d      	add	r5, r1
 801c1ae:	4419      	add	r1, r3
 801c1b0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801c1b4:	b2bf      	uxth	r7, r7
 801c1b6:	441a      	add	r2, r3
 801c1b8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801c1bc:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801c1c0:	00bf      	lsls	r7, r7, #2
 801c1c2:	9304      	str	r3, [sp, #16]
 801c1c4:	b2ad      	uxth	r5, r5
 801c1c6:	4bb0      	ldr	r3, [pc, #704]	@ (801c488 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801c1c8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801c1cc:	6818      	ldr	r0, [r3, #0]
 801c1ce:	6803      	ldr	r3, [r0, #0]
 801c1d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1d2:	4798      	blx	r3
 801c1d4:	4bad      	ldr	r3, [pc, #692]	@ (801c48c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801c1d6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801c1da:	2d00      	cmp	r5, #0
 801c1dc:	881a      	ldrh	r2, [r3, #0]
 801c1de:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801c1e2:	fb02 f606 	mul.w	r6, r2, r6
 801c1e6:	fb02 c101 	mla	r1, r2, r1, ip
 801c1ea:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c1ee:	9316      	str	r3, [sp, #88]	@ 0x58
 801c1f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c1f4:	4ba6      	ldr	r3, [pc, #664]	@ (801c490 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801c1f6:	eb00 0801 	add.w	r8, r0, r1
 801c1fa:	bf18      	it	ne
 801c1fc:	2100      	movne	r1, #0
 801c1fe:	eba3 0304 	sub.w	r3, r3, r4
 801c202:	eb08 0206 	add.w	r2, r8, r6
 801c206:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c208:	9208      	str	r2, [sp, #32]
 801c20a:	f107 0204 	add.w	r2, r7, #4
 801c20e:	9211      	str	r2, [sp, #68]	@ 0x44
 801c210:	9a04      	ldr	r2, [sp, #16]
 801c212:	bf08      	it	eq
 801c214:	4611      	moveq	r1, r2
 801c216:	2200      	movs	r2, #0
 801c218:	b289      	uxth	r1, r1
 801c21a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c21c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c220:	fa12 f383 	uxtah	r3, r2, r3
 801c224:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801c226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c22a:	3304      	adds	r3, #4
 801c22c:	9306      	str	r3, [sp, #24]
 801c22e:	9b08      	ldr	r3, [sp, #32]
 801c230:	4543      	cmp	r3, r8
 801c232:	f240 815e 	bls.w	801c4f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801c236:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801c23a:	f04f 0b01 	mov.w	fp, #1
 801c23e:	9a01      	ldr	r2, [sp, #4]
 801c240:	9806      	ldr	r0, [sp, #24]
 801c242:	465e      	mov	r6, fp
 801c244:	f8cd b008 	str.w	fp, [sp, #8]
 801c248:	7800      	ldrb	r0, [r0, #0]
 801c24a:	fbb5 f3f3 	udiv	r3, r5, r3
 801c24e:	1ad3      	subs	r3, r2, r3
 801c250:	900e      	str	r0, [sp, #56]	@ 0x38
 801c252:	3001      	adds	r0, #1
 801c254:	b29b      	uxth	r3, r3
 801c256:	9005      	str	r0, [sp, #20]
 801c258:	9312      	str	r3, [sp, #72]	@ 0x48
 801c25a:	9b06      	ldr	r3, [sp, #24]
 801c25c:	785a      	ldrb	r2, [r3, #1]
 801c25e:	789b      	ldrb	r3, [r3, #2]
 801c260:	021b      	lsls	r3, r3, #8
 801c262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c266:	9a06      	ldr	r2, [sp, #24]
 801c268:	78d2      	ldrb	r2, [r2, #3]
 801c26a:	4313      	orrs	r3, r2
 801c26c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c26e:	441a      	add	r2, r3
 801c270:	1c50      	adds	r0, r2, #1
 801c272:	7852      	ldrb	r2, [r2, #1]
 801c274:	9003      	str	r0, [sp, #12]
 801c276:	0212      	lsls	r2, r2, #8
 801c278:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c27a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801c27e:	5cc3      	ldrb	r3, [r0, r3]
 801c280:	431a      	orrs	r2, r3
 801c282:	b293      	uxth	r3, r2
 801c284:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801c288:	930a      	str	r3, [sp, #40]	@ 0x28
 801c28a:	2300      	movs	r3, #0
 801c28c:	461a      	mov	r2, r3
 801c28e:	9307      	str	r3, [sp, #28]
 801c290:	2d00      	cmp	r5, #0
 801c292:	d07c      	beq.n	801c38e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c294:	42ae      	cmp	r6, r5
 801c296:	d26c      	bcs.n	801c372 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801c298:	9b08      	ldr	r3, [sp, #32]
 801c29a:	1bad      	subs	r5, r5, r6
 801c29c:	4608      	mov	r0, r1
 801c29e:	4543      	cmp	r3, r8
 801c2a0:	b2ad      	uxth	r5, r5
 801c2a2:	d802      	bhi.n	801c2aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801c2a4:	e071      	b.n	801c38a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d15d      	bne.n	801c366 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801c2aa:	9b03      	ldr	r3, [sp, #12]
 801c2ac:	9a02      	ldr	r2, [sp, #8]
 801c2ae:	785b      	ldrb	r3, [r3, #1]
 801c2b0:	f1c2 0207 	rsb	r2, r2, #7
 801c2b4:	9902      	ldr	r1, [sp, #8]
 801c2b6:	4093      	lsls	r3, r2
 801c2b8:	005b      	lsls	r3, r3, #1
 801c2ba:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801c2be:	9b03      	ldr	r3, [sp, #12]
 801c2c0:	781b      	ldrb	r3, [r3, #0]
 801c2c2:	410b      	asrs	r3, r1
 801c2c4:	3101      	adds	r1, #1
 801c2c6:	b2c9      	uxtb	r1, r1
 801c2c8:	b2db      	uxtb	r3, r3
 801c2ca:	2908      	cmp	r1, #8
 801c2cc:	9102      	str	r1, [sp, #8]
 801c2ce:	9903      	ldr	r1, [sp, #12]
 801c2d0:	ea43 0302 	orr.w	r3, r3, r2
 801c2d4:	bf0c      	ite	eq
 801c2d6:	3102      	addeq	r1, #2
 801c2d8:	3101      	addne	r1, #1
 801c2da:	b29a      	uxth	r2, r3
 801c2dc:	bf05      	ittet	eq
 801c2de:	9103      	streq	r1, [sp, #12]
 801c2e0:	2100      	moveq	r1, #0
 801c2e2:	9103      	strne	r1, [sp, #12]
 801c2e4:	9102      	streq	r1, [sp, #8]
 801c2e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c2e8:	4291      	cmp	r1, r2
 801c2ea:	d30a      	bcc.n	801c302 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801c2ec:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801c2f0:	2301      	movs	r3, #1
 801c2f2:	9905      	ldr	r1, [sp, #20]
 801c2f4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801c2f8:	d30f      	bcc.n	801c31a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801c2fa:	469b      	mov	fp, r3
 801c2fc:	f04f 0c00 	mov.w	ip, #0
 801c300:	e032      	b.n	801c368 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801c302:	9b05      	ldr	r3, [sp, #20]
 801c304:	429a      	cmp	r2, r3
 801c306:	d318      	bcc.n	801c33a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801c308:	eb04 030b 	add.w	r3, r4, fp
 801c30c:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801c310:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801c314:	f10b 0301 	add.w	r3, fp, #1
 801c318:	b29b      	uxth	r3, r3
 801c31a:	9905      	ldr	r1, [sp, #20]
 801c31c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801c320:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c324:	710e      	strb	r6, [r1, #4]
 801c326:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c328:	80ce      	strh	r6, [r1, #6]
 801c32a:	f10b 0601 	add.w	r6, fp, #1
 801c32e:	714e      	strb	r6, [r1, #5]
 801c330:	9905      	ldr	r1, [sp, #20]
 801c332:	3101      	adds	r1, #1
 801c334:	b289      	uxth	r1, r1
 801c336:	9105      	str	r1, [sp, #20]
 801c338:	e7df      	b.n	801c2fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801c33a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c33e:	4611      	mov	r1, r2
 801c340:	795b      	ldrb	r3, [r3, #5]
 801c342:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801c346:	4426      	add	r6, r4
 801c348:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801c34a:	4437      	add	r7, r6
 801c34c:	2f00      	cmp	r7, #0
 801c34e:	dd06      	ble.n	801c35e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801c350:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801c354:	790f      	ldrb	r7, [r1, #4]
 801c356:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c35a:	88c9      	ldrh	r1, [r1, #6]
 801c35c:	e7f4      	b.n	801c348 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801c35e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801c362:	b29b      	uxth	r3, r3
 801c364:	e7c5      	b.n	801c2f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801c366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c368:	920a      	str	r2, [sp, #40]	@ 0x28
 801c36a:	4601      	mov	r1, r0
 801c36c:	4662      	mov	r2, ip
 801c36e:	461e      	mov	r6, r3
 801c370:	e78e      	b.n	801c290 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801c372:	1b73      	subs	r3, r6, r5
 801c374:	eb02 0c05 	add.w	ip, r2, r5
 801c378:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801c37c:	b29b      	uxth	r3, r3
 801c37e:	fa1f fc8c 	uxth.w	ip, ip
 801c382:	2500      	movs	r5, #0
 801c384:	9a08      	ldr	r2, [sp, #32]
 801c386:	4542      	cmp	r2, r8
 801c388:	d88d      	bhi.n	801c2a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801c38a:	4601      	mov	r1, r0
 801c38c:	e74f      	b.n	801c22e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801c38e:	428e      	cmp	r6, r1
 801c390:	bf2b      	itete	cs
 801c392:	468e      	movcs	lr, r1
 801c394:	46b6      	movcc	lr, r6
 801c396:	1a73      	subcs	r3, r6, r1
 801c398:	1b88      	subcc	r0, r1, r6
 801c39a:	eb02 0c0e 	add.w	ip, r2, lr
 801c39e:	bf2b      	itete	cs
 801c3a0:	4628      	movcs	r0, r5
 801c3a2:	462b      	movcc	r3, r5
 801c3a4:	b29b      	uxthcs	r3, r3
 801c3a6:	b280      	uxthcc	r0, r0
 801c3a8:	f108 0503 	add.w	r5, r8, #3
 801c3ac:	fa1f fc8c 	uxth.w	ip, ip
 801c3b0:	4562      	cmp	r2, ip
 801c3b2:	d06f      	beq.n	801c494 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801c3b4:	1c57      	adds	r7, r2, #1
 801c3b6:	4422      	add	r2, r4
 801c3b8:	b2bf      	uxth	r7, r7
 801c3ba:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801c3be:	9713      	str	r7, [sp, #76]	@ 0x4c
 801c3c0:	2704      	movs	r7, #4
 801c3c2:	46b9      	mov	r9, r7
 801c3c4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c3c6:	fb19 7202 	smlabb	r2, r9, r2, r7
 801c3ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c3cc:	58bf      	ldr	r7, [r7, r2]
 801c3ce:	0e3a      	lsrs	r2, r7, #24
 801c3d0:	9209      	str	r2, [sp, #36]	@ 0x24
 801c3d2:	d016      	beq.n	801c402 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801c3d4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c3d8:	fa5f fa87 	uxtb.w	sl, r7
 801c3dc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c3e0:	fa5f f289 	uxtb.w	r2, r9
 801c3e4:	9214      	str	r2, [sp, #80]	@ 0x50
 801c3e6:	b2fa      	uxtb	r2, r7
 801c3e8:	9215      	str	r2, [sp, #84]	@ 0x54
 801c3ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c3ec:	2aff      	cmp	r2, #255	@ 0xff
 801c3ee:	d10b      	bne.n	801c408 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c3f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c3f2:	2aff      	cmp	r2, #255	@ 0xff
 801c3f4:	d108      	bne.n	801c408 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801c3f6:	f805 ac03 	strb.w	sl, [r5, #-3]
 801c3fa:	f805 9c02 	strb.w	r9, [r5, #-2]
 801c3fe:	f805 7c01 	strb.w	r7, [r5, #-1]
 801c402:	3503      	adds	r5, #3
 801c404:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c406:	e7d3      	b.n	801c3b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801c408:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c40a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c40c:	437a      	muls	r2, r7
 801c40e:	1c57      	adds	r7, r2, #1
 801c410:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801c414:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801c418:	1212      	asrs	r2, r2, #8
 801c41a:	fa1f f982 	uxth.w	r9, r2
 801c41e:	43d2      	mvns	r2, r2
 801c420:	fb1a fa09 	smulbb	sl, sl, r9
 801c424:	b2d2      	uxtb	r2, r2
 801c426:	fb07 a702 	mla	r7, r7, r2, sl
 801c42a:	9209      	str	r2, [sp, #36]	@ 0x24
 801c42c:	b2bf      	uxth	r7, r7
 801c42e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c430:	f107 0a01 	add.w	sl, r7, #1
 801c434:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c438:	fb12 fa09 	smulbb	sl, r2, r9
 801c43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c43e:	123f      	asrs	r7, r7, #8
 801c440:	f805 7c03 	strb.w	r7, [r5, #-3]
 801c444:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801c448:	fb07 aa02 	mla	sl, r7, r2, sl
 801c44c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c44e:	fb12 f909 	smulbb	r9, r2, r9
 801c452:	fa1f fa8a 	uxth.w	sl, sl
 801c456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c458:	f10a 0701 	add.w	r7, sl, #1
 801c45c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c460:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801c464:	fb07 9902 	mla	r9, r7, r2, r9
 801c468:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c46c:	fa1f f989 	uxth.w	r9, r9
 801c470:	f805 ac02 	strb.w	sl, [r5, #-2]
 801c474:	f109 0201 	add.w	r2, r9, #1
 801c478:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c47c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c480:	f805 9c01 	strb.w	r9, [r5, #-1]
 801c484:	e7bd      	b.n	801c402 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801c486:	bf00      	nop
 801c488:	24025934 	.word	0x24025934
 801c48c:	2402592e 	.word	0x2402592e
 801c490:	fffff7fb 	.word	0xfffff7fb
 801c494:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801c498:	428e      	cmp	r6, r1
 801c49a:	44f0      	add	r8, lr
 801c49c:	f4ff af71 	bcc.w	801c382 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801c4a0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c4a2:	9904      	ldr	r1, [sp, #16]
 801c4a4:	8812      	ldrh	r2, [r2, #0]
 801c4a6:	1a52      	subs	r2, r2, r1
 801c4a8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c4aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c4ae:	4490      	add	r8, r2
 801c4b0:	9a07      	ldr	r2, [sp, #28]
 801c4b2:	3201      	adds	r2, #1
 801c4b4:	428a      	cmp	r2, r1
 801c4b6:	9207      	str	r2, [sp, #28]
 801c4b8:	d111      	bne.n	801c4de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801c4ba:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801c4be:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801c4c2:	9b04      	ldr	r3, [sp, #16]
 801c4c4:	eba5 050c 	sub.w	r5, r5, ip
 801c4c8:	b2ad      	uxth	r5, r5
 801c4ca:	2d00      	cmp	r5, #0
 801c4cc:	bf08      	it	eq
 801c4ce:	4619      	moveq	r1, r3
 801c4d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c4d2:	bf18      	it	ne
 801c4d4:	2100      	movne	r1, #0
 801c4d6:	3301      	adds	r3, #1
 801c4d8:	b289      	uxth	r1, r1
 801c4da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c4dc:	e69e      	b.n	801c21c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801c4de:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801c4e2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801c4e6:	1a2d      	subs	r5, r5, r0
 801c4e8:	b2ad      	uxth	r5, r5
 801c4ea:	2d00      	cmp	r5, #0
 801c4ec:	bf18      	it	ne
 801c4ee:	2000      	movne	r0, #0
 801c4f0:	e748      	b.n	801c384 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801c4f2:	4b04      	ldr	r3, [pc, #16]	@ (801c504 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801c4f4:	6818      	ldr	r0, [r3, #0]
 801c4f6:	6803      	ldr	r3, [r0, #0]
 801c4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4fa:	4798      	blx	r3
 801c4fc:	b01d      	add	sp, #116	@ 0x74
 801c4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c502:	bf00      	nop
 801c504:	24025934 	.word	0x24025934

0801c508 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50c:	b08f      	sub	sp, #60	@ 0x3c
 801c50e:	4616      	mov	r6, r2
 801c510:	4681      	mov	r9, r0
 801c512:	460d      	mov	r5, r1
 801c514:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801c518:	9205      	str	r2, [sp, #20]
 801c51a:	2a00      	cmp	r2, #0
 801c51c:	f000 82a8 	beq.w	801ca70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801c520:	6830      	ldr	r0, [r6, #0]
 801c522:	ac0a      	add	r4, sp, #40	@ 0x28
 801c524:	6871      	ldr	r1, [r6, #4]
 801c526:	c403      	stmia	r4!, {r0, r1}
 801c528:	6818      	ldr	r0, [r3, #0]
 801c52a:	ac0c      	add	r4, sp, #48	@ 0x30
 801c52c:	6859      	ldr	r1, [r3, #4]
 801c52e:	c403      	stmia	r4!, {r0, r1}
 801c530:	a80a      	add	r0, sp, #40	@ 0x28
 801c532:	f7f9 f8eb 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c536:	4631      	mov	r1, r6
 801c538:	a80c      	add	r0, sp, #48	@ 0x30
 801c53a:	f7f9 f90f 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c53e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801c542:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801c546:	bfdb      	ittet	le
 801c548:	b293      	uxthle	r3, r2
 801c54a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801c54e:	2301      	movgt	r3, #1
 801c550:	fb91 f3f3 	sdivle	r3, r1, r3
 801c554:	9300      	str	r3, [sp, #0]
 801c556:	f105 0308 	add.w	r3, r5, #8
 801c55a:	9900      	ldr	r1, [sp, #0]
 801c55c:	9306      	str	r3, [sp, #24]
 801c55e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801c562:	440b      	add	r3, r1
 801c564:	3b01      	subs	r3, #1
 801c566:	fb93 f3f1 	sdiv	r3, r3, r1
 801c56a:	3b01      	subs	r3, #1
 801c56c:	9906      	ldr	r1, [sp, #24]
 801c56e:	b29b      	uxth	r3, r3
 801c570:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c574:	9900      	ldr	r1, [sp, #0]
 801c576:	9307      	str	r3, [sp, #28]
 801c578:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801c57c:	fb93 f0f1 	sdiv	r0, r3, r1
 801c580:	b284      	uxth	r4, r0
 801c582:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801c586:	b280      	uxth	r0, r0
 801c588:	9402      	str	r4, [sp, #8]
 801c58a:	9d02      	ldr	r5, [sp, #8]
 801c58c:	9c00      	ldr	r4, [sp, #0]
 801c58e:	fb05 3514 	mls	r5, r5, r4, r3
 801c592:	fb15 f502 	smulbb	r5, r5, r2
 801c596:	440d      	add	r5, r1
 801c598:	b2ad      	uxth	r5, r5
 801c59a:	2800      	cmp	r0, #0
 801c59c:	d071      	beq.n	801c682 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801c59e:	1e42      	subs	r2, r0, #1
 801c5a0:	9806      	ldr	r0, [sp, #24]
 801c5a2:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801c5a6:	9a07      	ldr	r2, [sp, #28]
 801c5a8:	fa98 f888 	rev.w	r8, r8
 801c5ac:	4490      	add	r8, r2
 801c5ae:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801c5b2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801c5b6:	4411      	add	r1, r2
 801c5b8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801c5bc:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801c908 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801c5c0:	4413      	add	r3, r2
 801c5c2:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801c5c6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801c5ca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c5ce:	9301      	str	r3, [sp, #4]
 801c5d0:	4bcb      	ldr	r3, [pc, #812]	@ (801c900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801c5d2:	6818      	ldr	r0, [r3, #0]
 801c5d4:	6803      	ldr	r3, [r0, #0]
 801c5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c5d8:	4798      	blx	r3
 801c5da:	4bca      	ldr	r3, [pc, #808]	@ (801c904 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801c5dc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801c5e0:	881b      	ldrh	r3, [r3, #0]
 801c5e2:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801c5e6:	fb03 2707 	mla	r7, r3, r7, r2
 801c5ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c5ee:	4363      	muls	r3, r4
 801c5f0:	2400      	movs	r4, #0
 801c5f2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c5f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5fa:	4621      	mov	r1, r4
 801c5fc:	4407      	add	r7, r0
 801c5fe:	18fb      	adds	r3, r7, r3
 801c600:	9309      	str	r3, [sp, #36]	@ 0x24
 801c602:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801c606:	fb95 f3f3 	sdiv	r3, r5, r3
 801c60a:	9304      	str	r3, [sp, #16]
 801c60c:	f109 0304 	add.w	r3, r9, #4
 801c610:	4618      	mov	r0, r3
 801c612:	9308      	str	r3, [sp, #32]
 801c614:	f008 fc4a 	bl	8024eac <memset>
 801c618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c61a:	42bb      	cmp	r3, r7
 801c61c:	f240 8223 	bls.w	801ca66 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801c620:	2003      	movs	r0, #3
 801c622:	f04f 0c07 	mov.w	ip, #7
 801c626:	f04f 0e0b 	mov.w	lr, #11
 801c62a:	2d00      	cmp	r5, #0
 801c62c:	f000 813c 	beq.w	801c8a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801c630:	f898 3000 	ldrb.w	r3, [r8]
 801c634:	b2db      	uxtb	r3, r3
 801c636:	2bfe      	cmp	r3, #254	@ 0xfe
 801c638:	d126      	bne.n	801c688 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801c63a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c63e:	f108 0604 	add.w	r6, r8, #4
 801c642:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c646:	3d01      	subs	r5, #1
 801c648:	b2c9      	uxtb	r1, r1
 801c64a:	f898 8003 	ldrb.w	r8, [r8, #3]
 801c64e:	b2d2      	uxtb	r2, r2
 801c650:	f361 0407 	bfi	r4, r1, #0, #8
 801c654:	fa5f f888 	uxtb.w	r8, r8
 801c658:	b2ad      	uxth	r5, r5
 801c65a:	f362 240f 	bfi	r4, r2, #8, #8
 801c65e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801c662:	fb10 2208 	smlabb	r2, r0, r8, r2
 801c666:	f368 4417 	bfi	r4, r8, #16, #8
 801c66a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801c66e:	0e23      	lsrs	r3, r4, #24
 801c670:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801c674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c678:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c67c:	605c      	str	r4, [r3, #4]
 801c67e:	46b0      	mov	r8, r6
 801c680:	e7d3      	b.n	801c62a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801c682:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801c686:	e792      	b.n	801c5ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801c688:	2bff      	cmp	r3, #255	@ 0xff
 801c68a:	d127      	bne.n	801c6dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801c68c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c690:	f108 0605 	add.w	r6, r8, #5
 801c694:	f898 3002 	ldrb.w	r3, [r8, #2]
 801c698:	3d01      	subs	r5, #1
 801c69a:	b2d2      	uxtb	r2, r2
 801c69c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801c6a0:	b2db      	uxtb	r3, r3
 801c6a2:	f898 8004 	ldrb.w	r8, [r8, #4]
 801c6a6:	f362 0407 	bfi	r4, r2, #0, #8
 801c6aa:	b2c9      	uxtb	r1, r1
 801c6ac:	fa5f f888 	uxtb.w	r8, r8
 801c6b0:	f363 240f 	bfi	r4, r3, #8, #8
 801c6b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c6b8:	b2ad      	uxth	r5, r5
 801c6ba:	fb10 3301 	smlabb	r3, r0, r1, r3
 801c6be:	f361 4417 	bfi	r4, r1, #16, #8
 801c6c2:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801c6c6:	f368 641f 	bfi	r4, r8, #24, #8
 801c6ca:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801c6ce:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801c6d2:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801c6d6:	f8c8 4004 	str.w	r4, [r8, #4]
 801c6da:	e7d0      	b.n	801c67e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801c6dc:	119a      	asrs	r2, r3, #6
 801c6de:	f108 0601 	add.w	r6, r8, #1
 801c6e2:	d107      	bne.n	801c6f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801c6e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c6e8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c6ec:	685c      	ldr	r4, [r3, #4]
 801c6ee:	3d01      	subs	r5, #1
 801c6f0:	b2ad      	uxth	r5, r5
 801c6f2:	e7c4      	b.n	801c67e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801c6f4:	2a01      	cmp	r2, #1
 801c6f6:	d129      	bne.n	801c74c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801c6f8:	f003 0203 	and.w	r2, r3, #3
 801c6fc:	1ea1      	subs	r1, r4, #2
 801c6fe:	4411      	add	r1, r2
 801c700:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801c704:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801c708:	b2c9      	uxtb	r1, r1
 801c70a:	3a02      	subs	r2, #2
 801c70c:	3b02      	subs	r3, #2
 801c70e:	f361 0407 	bfi	r4, r1, #0, #8
 801c712:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801c716:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801c71a:	f362 240f 	bfi	r4, r2, #8, #8
 801c71e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801c722:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801c726:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801c72a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801c72e:	f363 4417 	bfi	r4, r3, #16, #8
 801c732:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801c736:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801c73a:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801c73e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801c742:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801c746:	f8c8 4004 	str.w	r4, [r8, #4]
 801c74a:	e7d0      	b.n	801c6ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801c74c:	2a02      	cmp	r2, #2
 801c74e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c752:	d12e      	bne.n	801c7b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801c754:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c758:	f1a3 0a20 	sub.w	sl, r3, #32
 801c75c:	f108 0602 	add.w	r6, r8, #2
 801c760:	b2d2      	uxtb	r2, r2
 801c762:	f002 010f 	and.w	r1, r2, #15
 801c766:	1112      	asrs	r2, r2, #4
 801c768:	3908      	subs	r1, #8
 801c76a:	3a08      	subs	r2, #8
 801c76c:	4451      	add	r1, sl
 801c76e:	4492      	add	sl, r2
 801c770:	4421      	add	r1, r4
 801c772:	b2c9      	uxtb	r1, r1
 801c774:	f361 0407 	bfi	r4, r1, #0, #8
 801c778:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801c77c:	f1a8 0820 	sub.w	r8, r8, #32
 801c780:	4443      	add	r3, r8
 801c782:	b2db      	uxtb	r3, r3
 801c784:	f363 240f 	bfi	r4, r3, #8, #8
 801c788:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c78c:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801c790:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801c794:	fb10 330a 	smlabb	r3, r0, sl, r3
 801c798:	f36a 4417 	bfi	r4, sl, #16, #8
 801c79c:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801c7a0:	0e22      	lsrs	r2, r4, #24
 801c7a2:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801c7a6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c7aa:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801c7ae:	6054      	str	r4, [r2, #4]
 801c7b0:	e79d      	b.n	801c6ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801c7b2:	3301      	adds	r3, #1
 801c7b4:	42ab      	cmp	r3, r5
 801c7b6:	dd59      	ble.n	801c86c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801c7b8:	1b5d      	subs	r5, r3, r5
 801c7ba:	2d00      	cmp	r5, #0
 801c7bc:	dc58      	bgt.n	801c870 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801c7be:	f8dd a004 	ldr.w	sl, [sp, #4]
 801c7c2:	f04f 0800 	mov.w	r8, #0
 801c7c6:	f1ba 0f00 	cmp.w	sl, #0
 801c7ca:	f340 8108 	ble.w	801c9de <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801c7ce:	1c73      	adds	r3, r6, #1
 801c7d0:	9303      	str	r3, [sp, #12]
 801c7d2:	7833      	ldrb	r3, [r6, #0]
 801c7d4:	b2db      	uxtb	r3, r3
 801c7d6:	2bfe      	cmp	r3, #254	@ 0xfe
 801c7d8:	d16a      	bne.n	801c8b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801c7da:	7871      	ldrb	r1, [r6, #1]
 801c7dc:	1d33      	adds	r3, r6, #4
 801c7de:	78b2      	ldrb	r2, [r6, #2]
 801c7e0:	b2c9      	uxtb	r1, r1
 801c7e2:	78f0      	ldrb	r0, [r6, #3]
 801c7e4:	b2d2      	uxtb	r2, r2
 801c7e6:	9303      	str	r3, [sp, #12]
 801c7e8:	f361 0407 	bfi	r4, r1, #0, #8
 801c7ec:	b2c0      	uxtb	r0, r0
 801c7ee:	2303      	movs	r3, #3
 801c7f0:	f362 240f 	bfi	r4, r2, #8, #8
 801c7f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801c7f8:	fb13 2200 	smlabb	r2, r3, r0, r2
 801c7fc:	f360 4417 	bfi	r4, r0, #16, #8
 801c800:	2307      	movs	r3, #7
 801c802:	0e25      	lsrs	r5, r4, #24
 801c804:	fb13 2101 	smlabb	r1, r3, r1, r2
 801c808:	230b      	movs	r3, #11
 801c80a:	fb13 1305 	smlabb	r3, r3, r5, r1
 801c80e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c812:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c816:	605c      	str	r4, [r3, #4]
 801c818:	2501      	movs	r5, #1
 801c81a:	462e      	mov	r6, r5
 801c81c:	eb06 0308 	add.w	r3, r6, r8
 801c820:	ebaa 0a06 	sub.w	sl, sl, r6
 801c824:	1bad      	subs	r5, r5, r6
 801c826:	2b40      	cmp	r3, #64	@ 0x40
 801c828:	dd16      	ble.n	801c858 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801c82a:	4658      	mov	r0, fp
 801c82c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801c830:	f7e6 fd4a 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 801c834:	4659      	mov	r1, fp
 801c836:	9b05      	ldr	r3, [sp, #20]
 801c838:	4642      	mov	r2, r8
 801c83a:	4638      	mov	r0, r7
 801c83c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c840:	f7e6 fdaa 	bl	8003398 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801c844:	4b30      	ldr	r3, [pc, #192]	@ (801c908 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801c846:	4447      	add	r7, r8
 801c848:	f04f 0800 	mov.w	r8, #0
 801c84c:	459b      	cmp	fp, r3
 801c84e:	bf0c      	ite	eq
 801c850:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801c90c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801c854:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801c908 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801c858:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801c85c:	4633      	mov	r3, r6
 801c85e:	3b01      	subs	r3, #1
 801c860:	f842 4b04 	str.w	r4, [r2], #4
 801c864:	d1fb      	bne.n	801c85e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801c866:	44b0      	add	r8, r6
 801c868:	9e03      	ldr	r6, [sp, #12]
 801c86a:	e7ac      	b.n	801c7c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801c86c:	1aed      	subs	r5, r5, r3
 801c86e:	e73f      	b.n	801c6f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801c870:	9b01      	ldr	r3, [sp, #4]
 801c872:	42ab      	cmp	r3, r5
 801c874:	bfa8      	it	ge
 801c876:	462b      	movge	r3, r5
 801c878:	4698      	mov	r8, r3
 801c87a:	9b01      	ldr	r3, [sp, #4]
 801c87c:	eba3 0a08 	sub.w	sl, r3, r8
 801c880:	0e23      	lsrs	r3, r4, #24
 801c882:	eba5 0508 	sub.w	r5, r5, r8
 801c886:	d00b      	beq.n	801c8a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801c888:	9a05      	ldr	r2, [sp, #20]
 801c88a:	4641      	mov	r1, r8
 801c88c:	4638      	mov	r0, r7
 801c88e:	4353      	muls	r3, r2
 801c890:	1c5a      	adds	r2, r3, #1
 801c892:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801c896:	4622      	mov	r2, r4
 801c898:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c89c:	f7e6 fd2e 	bl	80032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801c8a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c8a4:	4447      	add	r7, r8
 801c8a6:	e78c      	b.n	801c7c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801c8a8:	f8dd a004 	ldr.w	sl, [sp, #4]
 801c8ac:	4646      	mov	r6, r8
 801c8ae:	e788      	b.n	801c7c2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801c8b0:	2bff      	cmp	r3, #255	@ 0xff
 801c8b2:	d11d      	bne.n	801c8f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801c8b4:	7870      	ldrb	r0, [r6, #1]
 801c8b6:	1d73      	adds	r3, r6, #5
 801c8b8:	78b2      	ldrb	r2, [r6, #2]
 801c8ba:	b2c0      	uxtb	r0, r0
 801c8bc:	78f5      	ldrb	r5, [r6, #3]
 801c8be:	b2d2      	uxtb	r2, r2
 801c8c0:	9303      	str	r3, [sp, #12]
 801c8c2:	f360 0407 	bfi	r4, r0, #0, #8
 801c8c6:	7933      	ldrb	r3, [r6, #4]
 801c8c8:	b2ed      	uxtb	r5, r5
 801c8ca:	b2d9      	uxtb	r1, r3
 801c8cc:	f362 240f 	bfi	r4, r2, #8, #8
 801c8d0:	2303      	movs	r3, #3
 801c8d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801c8d6:	f365 4417 	bfi	r4, r5, #16, #8
 801c8da:	fb13 2205 	smlabb	r2, r3, r5, r2
 801c8de:	2307      	movs	r3, #7
 801c8e0:	f361 641f 	bfi	r4, r1, #24, #8
 801c8e4:	fb13 2000 	smlabb	r0, r3, r0, r2
 801c8e8:	230b      	movs	r3, #11
 801c8ea:	fb13 0301 	smlabb	r3, r3, r1, r0
 801c8ee:	e78e      	b.n	801c80e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801c8f0:	119d      	asrs	r5, r3, #6
 801c8f2:	d10d      	bne.n	801c910 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801c8f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c8f8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c8fc:	685c      	ldr	r4, [r3, #4]
 801c8fe:	e78b      	b.n	801c818 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801c900:	24025934 	.word	0x24025934
 801c904:	2402592e 	.word	0x2402592e
 801c908:	24009780 	.word	0x24009780
 801c90c:	24009880 	.word	0x24009880
 801c910:	2d01      	cmp	r5, #1
 801c912:	d12a      	bne.n	801c96a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801c914:	f003 0203 	and.w	r2, r3, #3
 801c918:	1ea1      	subs	r1, r4, #2
 801c91a:	2603      	movs	r6, #3
 801c91c:	4411      	add	r1, r2
 801c91e:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801c922:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801c926:	b2c9      	uxtb	r1, r1
 801c928:	3a02      	subs	r2, #2
 801c92a:	3b02      	subs	r3, #2
 801c92c:	f361 0407 	bfi	r4, r1, #0, #8
 801c930:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801c934:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801c938:	f362 240f 	bfi	r4, r2, #8, #8
 801c93c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801c940:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801c944:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801c948:	fb16 2203 	smlabb	r2, r6, r3, r2
 801c94c:	f363 4417 	bfi	r4, r3, #16, #8
 801c950:	2307      	movs	r3, #7
 801c952:	0e20      	lsrs	r0, r4, #24
 801c954:	fb13 2101 	smlabb	r1, r3, r1, r2
 801c958:	230b      	movs	r3, #11
 801c95a:	fb13 1300 	smlabb	r3, r3, r0, r1
 801c95e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c962:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801c966:	605c      	str	r4, [r3, #4]
 801c968:	e757      	b.n	801c81a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801c96a:	2d02      	cmp	r5, #2
 801c96c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c970:	d12f      	bne.n	801c9d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801c972:	1cb2      	adds	r2, r6, #2
 801c974:	f1a3 0020 	sub.w	r0, r3, #32
 801c978:	9203      	str	r2, [sp, #12]
 801c97a:	7872      	ldrb	r2, [r6, #1]
 801c97c:	b2d2      	uxtb	r2, r2
 801c97e:	f002 010f 	and.w	r1, r2, #15
 801c982:	1112      	asrs	r2, r2, #4
 801c984:	3908      	subs	r1, #8
 801c986:	3a08      	subs	r2, #8
 801c988:	4401      	add	r1, r0
 801c98a:	4402      	add	r2, r0
 801c98c:	4421      	add	r1, r4
 801c98e:	b2c9      	uxtb	r1, r1
 801c990:	f361 0407 	bfi	r4, r1, #0, #8
 801c994:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801c998:	3d20      	subs	r5, #32
 801c99a:	442b      	add	r3, r5
 801c99c:	2503      	movs	r5, #3
 801c99e:	b2db      	uxtb	r3, r3
 801c9a0:	f363 240f 	bfi	r4, r3, #8, #8
 801c9a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801c9a8:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801c9ac:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801c9b0:	fb15 3302 	smlabb	r3, r5, r2, r3
 801c9b4:	f362 4417 	bfi	r4, r2, #16, #8
 801c9b8:	2207      	movs	r2, #7
 801c9ba:	0e20      	lsrs	r0, r4, #24
 801c9bc:	fb12 3201 	smlabb	r2, r2, r1, r3
 801c9c0:	210b      	movs	r1, #11
 801c9c2:	fb11 2100 	smlabb	r1, r1, r0, r2
 801c9c6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801c9ca:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801c9ce:	604c      	str	r4, [r1, #4]
 801c9d0:	e722      	b.n	801c818 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801c9d2:	1c5d      	adds	r5, r3, #1
 801c9d4:	4656      	mov	r6, sl
 801c9d6:	45aa      	cmp	sl, r5
 801c9d8:	bfa8      	it	ge
 801c9da:	462e      	movge	r6, r5
 801c9dc:	e71e      	b.n	801c81c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801c9de:	f1b8 0f00 	cmp.w	r8, #0
 801c9e2:	d00d      	beq.n	801ca00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801c9e4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801c9e8:	4658      	mov	r0, fp
 801c9ea:	f7e6 fc6d 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 801c9ee:	4642      	mov	r2, r8
 801c9f0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c9f4:	4638      	mov	r0, r7
 801c9f6:	9b05      	ldr	r3, [sp, #20]
 801c9f8:	4659      	mov	r1, fp
 801c9fa:	4447      	add	r7, r8
 801c9fc:	f7e6 fccc 	bl	8003398 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801ca00:	4b1d      	ldr	r3, [pc, #116]	@ (801ca78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801ca02:	9a01      	ldr	r2, [sp, #4]
 801ca04:	881b      	ldrh	r3, [r3, #0]
 801ca06:	1a9b      	subs	r3, r3, r2
 801ca08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca0c:	441f      	add	r7, r3
 801ca0e:	9b04      	ldr	r3, [sp, #16]
 801ca10:	3301      	adds	r3, #1
 801ca12:	9304      	str	r3, [sp, #16]
 801ca14:	9a04      	ldr	r2, [sp, #16]
 801ca16:	9b00      	ldr	r3, [sp, #0]
 801ca18:	4293      	cmp	r3, r2
 801ca1a:	d11d      	bne.n	801ca58 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801ca1c:	9b02      	ldr	r3, [sp, #8]
 801ca1e:	2400      	movs	r4, #0
 801ca20:	9a02      	ldr	r2, [sp, #8]
 801ca22:	f103 0801 	add.w	r8, r3, #1
 801ca26:	9b06      	ldr	r3, [sp, #24]
 801ca28:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801ca2c:	4621      	mov	r1, r4
 801ca2e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ca32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ca36:	9b07      	ldr	r3, [sp, #28]
 801ca38:	ba36      	rev	r6, r6
 801ca3a:	9808      	ldr	r0, [sp, #32]
 801ca3c:	441e      	add	r6, r3
 801ca3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ca42:	1aed      	subs	r5, r5, r3
 801ca44:	f008 fa32 	bl	8024eac <memset>
 801ca48:	f8cd 8008 	str.w	r8, [sp, #8]
 801ca4c:	b2ad      	uxth	r5, r5
 801ca4e:	9404      	str	r4, [sp, #16]
 801ca50:	f7e6 fc30 	bl	80032b4 <_ZN8touchgfx5paint8tearDownEv>
 801ca54:	46b0      	mov	r8, r6
 801ca56:	e5df      	b.n	801c618 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801ca58:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ca5c:	9a01      	ldr	r2, [sp, #4]
 801ca5e:	1a9b      	subs	r3, r3, r2
 801ca60:	1b5d      	subs	r5, r3, r5
 801ca62:	b2ad      	uxth	r5, r5
 801ca64:	e7f4      	b.n	801ca50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801ca66:	4b05      	ldr	r3, [pc, #20]	@ (801ca7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801ca68:	6818      	ldr	r0, [r3, #0]
 801ca6a:	6803      	ldr	r3, [r0, #0]
 801ca6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ca6e:	4798      	blx	r3
 801ca70:	b00f      	add	sp, #60	@ 0x3c
 801ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca76:	bf00      	nop
 801ca78:	2402592e 	.word	0x2402592e
 801ca7c:	24025934 	.word	0x24025934

0801ca80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca84:	b093      	sub	sp, #76	@ 0x4c
 801ca86:	460d      	mov	r5, r1
 801ca88:	4616      	mov	r6, r2
 801ca8a:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801ca8e:	9000      	str	r0, [sp, #0]
 801ca90:	f1bb 0f00 	cmp.w	fp, #0
 801ca94:	f000 82ac 	beq.w	801cff0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801ca98:	6810      	ldr	r0, [r2, #0]
 801ca9a:	ac0e      	add	r4, sp, #56	@ 0x38
 801ca9c:	6851      	ldr	r1, [r2, #4]
 801ca9e:	c403      	stmia	r4!, {r0, r1}
 801caa0:	6818      	ldr	r0, [r3, #0]
 801caa2:	ac10      	add	r4, sp, #64	@ 0x40
 801caa4:	6859      	ldr	r1, [r3, #4]
 801caa6:	c403      	stmia	r4!, {r0, r1}
 801caa8:	a80e      	add	r0, sp, #56	@ 0x38
 801caaa:	f7f8 fe2f 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801caae:	4631      	mov	r1, r6
 801cab0:	a810      	add	r0, sp, #64	@ 0x40
 801cab2:	f7f8 fe53 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cab6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801caba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801cabe:	bfdb      	ittet	le
 801cac0:	b293      	uxthle	r3, r2
 801cac2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801cac6:	2301      	movgt	r3, #1
 801cac8:	fb91 f3f3 	sdivle	r3, r1, r3
 801cacc:	9301      	str	r3, [sp, #4]
 801cace:	f105 0308 	add.w	r3, r5, #8
 801cad2:	9901      	ldr	r1, [sp, #4]
 801cad4:	9305      	str	r3, [sp, #20]
 801cad6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801cada:	440b      	add	r3, r1
 801cadc:	3b01      	subs	r3, #1
 801cade:	fb93 f3f1 	sdiv	r3, r3, r1
 801cae2:	3b01      	subs	r3, #1
 801cae4:	9905      	ldr	r1, [sp, #20]
 801cae6:	b29b      	uxth	r3, r3
 801cae8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801caec:	9901      	ldr	r1, [sp, #4]
 801caee:	9306      	str	r3, [sp, #24]
 801caf0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801caf4:	fb93 f0f1 	sdiv	r0, r3, r1
 801caf8:	b284      	uxth	r4, r0
 801cafa:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801cafe:	9403      	str	r4, [sp, #12]
 801cb00:	9d03      	ldr	r5, [sp, #12]
 801cb02:	9c01      	ldr	r4, [sp, #4]
 801cb04:	fb05 3714 	mls	r7, r5, r4, r3
 801cb08:	fb17 f702 	smulbb	r7, r7, r2
 801cb0c:	440f      	add	r7, r1
 801cb0e:	b2bf      	uxth	r7, r7
 801cb10:	2d00      	cmp	r5, #0
 801cb12:	d06b      	beq.n	801cbec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801cb14:	1e6a      	subs	r2, r5, #1
 801cb16:	9805      	ldr	r0, [sp, #20]
 801cb18:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801cb1c:	9a06      	ldr	r2, [sp, #24]
 801cb1e:	fa99 f989 	rev.w	r9, r9
 801cb22:	4491      	add	r9, r2
 801cb24:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801cb28:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801cb2c:	4411      	add	r1, r2
 801cb2e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801cb32:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801ce90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801cb36:	4413      	add	r3, r2
 801cb38:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801cb3c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801cb40:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801cb44:	9302      	str	r3, [sp, #8]
 801cb46:	4bd0      	ldr	r3, [pc, #832]	@ (801ce88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801cb48:	6818      	ldr	r0, [r3, #0]
 801cb4a:	6803      	ldr	r3, [r0, #0]
 801cb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cb4e:	4798      	blx	r3
 801cb50:	4bce      	ldr	r3, [pc, #824]	@ (801ce8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801cb52:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801cb56:	881b      	ldrh	r3, [r3, #0]
 801cb58:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801cb5c:	fb03 2404 	mla	r4, r3, r4, r2
 801cb60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cb64:	436b      	muls	r3, r5
 801cb66:	2500      	movs	r5, #0
 801cb68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cb6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb70:	4629      	mov	r1, r5
 801cb72:	4404      	add	r4, r0
 801cb74:	18e3      	adds	r3, r4, r3
 801cb76:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb78:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801cb7c:	fb97 f3f3 	sdiv	r3, r7, r3
 801cb80:	9304      	str	r3, [sp, #16]
 801cb82:	9b00      	ldr	r3, [sp, #0]
 801cb84:	3304      	adds	r3, #4
 801cb86:	4618      	mov	r0, r3
 801cb88:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb8a:	f008 f98f 	bl	8024eac <memset>
 801cb8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cb90:	42a3      	cmp	r3, r4
 801cb92:	f240 8228 	bls.w	801cfe6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801cb96:	2003      	movs	r0, #3
 801cb98:	2607      	movs	r6, #7
 801cb9a:	2f00      	cmp	r7, #0
 801cb9c:	f000 80cb 	beq.w	801cd36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801cba0:	f899 3000 	ldrb.w	r3, [r9]
 801cba4:	b2db      	uxtb	r3, r3
 801cba6:	2bfe      	cmp	r3, #254	@ 0xfe
 801cba8:	d123      	bne.n	801cbf2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801cbaa:	f899 3001 	ldrb.w	r3, [r9, #1]
 801cbae:	3f01      	subs	r7, #1
 801cbb0:	f899 2002 	ldrb.w	r2, [r9, #2]
 801cbb4:	f109 0804 	add.w	r8, r9, #4
 801cbb8:	b2db      	uxtb	r3, r3
 801cbba:	f899 1003 	ldrb.w	r1, [r9, #3]
 801cbbe:	b2d2      	uxtb	r2, r2
 801cbc0:	f363 0507 	bfi	r5, r3, #0, #8
 801cbc4:	b2c9      	uxtb	r1, r1
 801cbc6:	b2bf      	uxth	r7, r7
 801cbc8:	f362 250f 	bfi	r5, r2, #8, #8
 801cbcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801cbd0:	fb10 2201 	smlabb	r2, r0, r1, r2
 801cbd4:	f361 4517 	bfi	r5, r1, #16, #8
 801cbd8:	fb16 2303 	smlabb	r3, r6, r3, r2
 801cbdc:	9a00      	ldr	r2, [sp, #0]
 801cbde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cbe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cbe6:	605d      	str	r5, [r3, #4]
 801cbe8:	46c1      	mov	r9, r8
 801cbea:	e7d6      	b.n	801cb9a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801cbec:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801cbf0:	e798      	b.n	801cb24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801cbf2:	119a      	asrs	r2, r3, #6
 801cbf4:	f109 0801 	add.w	r8, r9, #1
 801cbf8:	d108      	bne.n	801cc0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801cbfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cbfe:	9a00      	ldr	r2, [sp, #0]
 801cc00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cc04:	685d      	ldr	r5, [r3, #4]
 801cc06:	3f01      	subs	r7, #1
 801cc08:	b2bf      	uxth	r7, r7
 801cc0a:	e7ed      	b.n	801cbe8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801cc0c:	2a01      	cmp	r2, #1
 801cc0e:	d125      	bne.n	801cc5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801cc10:	f003 0103 	and.w	r1, r3, #3
 801cc14:	1eaa      	subs	r2, r5, #2
 801cc16:	440a      	add	r2, r1
 801cc18:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801cc1c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cc20:	b2d2      	uxtb	r2, r2
 801cc22:	3902      	subs	r1, #2
 801cc24:	3b02      	subs	r3, #2
 801cc26:	f362 0507 	bfi	r5, r2, #0, #8
 801cc2a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801cc2e:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801cc32:	f361 250f 	bfi	r5, r1, #8, #8
 801cc36:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801cc3a:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801cc3e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801cc42:	fb10 1103 	smlabb	r1, r0, r3, r1
 801cc46:	f363 4517 	bfi	r5, r3, #16, #8
 801cc4a:	9b00      	ldr	r3, [sp, #0]
 801cc4c:	fb16 1202 	smlabb	r2, r6, r2, r1
 801cc50:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801cc54:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801cc58:	6055      	str	r5, [r2, #4]
 801cc5a:	e7d4      	b.n	801cc06 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801cc5c:	2a02      	cmp	r2, #2
 801cc5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cc62:	d12c      	bne.n	801ccbe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801cc64:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cc68:	f1a3 0c20 	sub.w	ip, r3, #32
 801cc6c:	f109 0802 	add.w	r8, r9, #2
 801cc70:	b2d2      	uxtb	r2, r2
 801cc72:	f002 010f 	and.w	r1, r2, #15
 801cc76:	1112      	asrs	r2, r2, #4
 801cc78:	3908      	subs	r1, #8
 801cc7a:	3a08      	subs	r2, #8
 801cc7c:	4461      	add	r1, ip
 801cc7e:	4494      	add	ip, r2
 801cc80:	4429      	add	r1, r5
 801cc82:	b2c9      	uxtb	r1, r1
 801cc84:	f361 0507 	bfi	r5, r1, #0, #8
 801cc88:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801cc8c:	f1ae 0e20 	sub.w	lr, lr, #32
 801cc90:	4473      	add	r3, lr
 801cc92:	b2db      	uxtb	r3, r3
 801cc94:	f363 250f 	bfi	r5, r3, #8, #8
 801cc98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801cc9c:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801cca0:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801cca4:	fb10 330c 	smlabb	r3, r0, ip, r3
 801cca8:	f36c 4517 	bfi	r5, ip, #16, #8
 801ccac:	fb16 3101 	smlabb	r1, r6, r1, r3
 801ccb0:	9b00      	ldr	r3, [sp, #0]
 801ccb2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801ccb6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801ccba:	604d      	str	r5, [r1, #4]
 801ccbc:	e7a3      	b.n	801cc06 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801ccbe:	3301      	adds	r3, #1
 801ccc0:	42bb      	cmp	r3, r7
 801ccc2:	dd23      	ble.n	801cd0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801ccc4:	eba3 0907 	sub.w	r9, r3, r7
 801ccc8:	f1b9 0f00 	cmp.w	r9, #0
 801cccc:	dc20      	bgt.n	801cd10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801ccce:	9e02      	ldr	r6, [sp, #8]
 801ccd0:	2700      	movs	r7, #0
 801ccd2:	2e00      	cmp	r6, #0
 801ccd4:	f340 8142 	ble.w	801cf5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801ccd8:	f108 0301 	add.w	r3, r8, #1
 801ccdc:	9307      	str	r3, [sp, #28]
 801ccde:	f898 3000 	ldrb.w	r3, [r8]
 801cce2:	b2db      	uxtb	r3, r3
 801cce4:	119a      	asrs	r2, r3, #6
 801cce6:	d12a      	bne.n	801cd3e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801cce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ccec:	9a00      	ldr	r2, [sp, #0]
 801ccee:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ccf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ccf6:	685d      	ldr	r5, [r3, #4]
 801ccf8:	f040 811f 	bne.w	801cf3a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801ccfc:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801cd00:	7025      	strb	r5, [r4, #0]
 801cd02:	7063      	strb	r3, [r4, #1]
 801cd04:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801cd08:	70a3      	strb	r3, [r4, #2]
 801cd0a:	e04e      	b.n	801cdaa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801cd0c:	1aff      	subs	r7, r7, r3
 801cd0e:	e77b      	b.n	801cc08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801cd10:	9b02      	ldr	r3, [sp, #8]
 801cd12:	4620      	mov	r0, r4
 801cd14:	462a      	mov	r2, r5
 801cd16:	454b      	cmp	r3, r9
 801cd18:	bfa8      	it	ge
 801cd1a:	464b      	movge	r3, r9
 801cd1c:	461f      	mov	r7, r3
 801cd1e:	9b02      	ldr	r3, [sp, #8]
 801cd20:	4639      	mov	r1, r7
 801cd22:	1bde      	subs	r6, r3, r7
 801cd24:	eba9 0907 	sub.w	r9, r9, r7
 801cd28:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cd2c:	465b      	mov	r3, fp
 801cd2e:	f7e6 fae5 	bl	80032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801cd32:	443c      	add	r4, r7
 801cd34:	e7cc      	b.n	801ccd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801cd36:	46c8      	mov	r8, r9
 801cd38:	9e02      	ldr	r6, [sp, #8]
 801cd3a:	46b9      	mov	r9, r7
 801cd3c:	e7c8      	b.n	801ccd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801cd3e:	2a01      	cmp	r2, #1
 801cd40:	d136      	bne.n	801cdb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801cd42:	f003 0103 	and.w	r1, r3, #3
 801cd46:	1ea8      	subs	r0, r5, #2
 801cd48:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801cd4c:	4408      	add	r0, r1
 801cd4e:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801cd52:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801cd56:	b2c0      	uxtb	r0, r0
 801cd58:	f1a1 0102 	sub.w	r1, r1, #2
 801cd5c:	f1a3 0302 	sub.w	r3, r3, #2
 801cd60:	f360 0507 	bfi	r5, r0, #0, #8
 801cd64:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801cd68:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801cd6c:	f361 250f 	bfi	r5, r1, #8, #8
 801cd70:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801cd74:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801cd78:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801cd7c:	f04f 0303 	mov.w	r3, #3
 801cd80:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801cd84:	f04f 0c07 	mov.w	ip, #7
 801cd88:	9b00      	ldr	r3, [sp, #0]
 801cd8a:	f368 4517 	bfi	r5, r8, #16, #8
 801cd8e:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801cd92:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801cd96:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801cd9a:	f8cc 5004 	str.w	r5, [ip, #4]
 801cd9e:	f040 80cd 	bne.w	801cf3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801cda2:	7020      	strb	r0, [r4, #0]
 801cda4:	7061      	strb	r1, [r4, #1]
 801cda6:	f884 8002 	strb.w	r8, [r4, #2]
 801cdaa:	3e01      	subs	r6, #1
 801cdac:	3403      	adds	r4, #3
 801cdae:	e0c1      	b.n	801cf34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801cdb0:	2a02      	cmp	r2, #2
 801cdb2:	d13d      	bne.n	801ce30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801cdb4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801cdb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cdbc:	f108 0202 	add.w	r2, r8, #2
 801cdc0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801cdc4:	b2c9      	uxtb	r1, r1
 801cdc6:	f1a3 0c20 	sub.w	ip, r3, #32
 801cdca:	9207      	str	r2, [sp, #28]
 801cdcc:	f001 000f 	and.w	r0, r1, #15
 801cdd0:	f1a0 0008 	sub.w	r0, r0, #8
 801cdd4:	4460      	add	r0, ip
 801cdd6:	4428      	add	r0, r5
 801cdd8:	b2c0      	uxtb	r0, r0
 801cdda:	f360 0507 	bfi	r5, r0, #0, #8
 801cdde:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801cde2:	f1a2 0220 	sub.w	r2, r2, #32
 801cde6:	4413      	add	r3, r2
 801cde8:	ea4f 1221 	mov.w	r2, r1, asr #4
 801cdec:	b2db      	uxtb	r3, r3
 801cdee:	f1a2 0208 	sub.w	r2, r2, #8
 801cdf2:	f363 250f 	bfi	r5, r3, #8, #8
 801cdf6:	4462      	add	r2, ip
 801cdf8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801cdfc:	f04f 0c03 	mov.w	ip, #3
 801ce00:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801ce04:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801ce08:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801ce0c:	f04f 0107 	mov.w	r1, #7
 801ce10:	f362 4517 	bfi	r5, r2, #16, #8
 801ce14:	fb11 c100 	smlabb	r1, r1, r0, ip
 801ce18:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801ce1c:	9900      	ldr	r1, [sp, #0]
 801ce1e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801ce22:	604d      	str	r5, [r1, #4]
 801ce24:	f040 8089 	bne.w	801cf3a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801ce28:	7020      	strb	r0, [r4, #0]
 801ce2a:	7063      	strb	r3, [r4, #1]
 801ce2c:	70a2      	strb	r2, [r4, #2]
 801ce2e:	e7bc      	b.n	801cdaa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801ce30:	2bfe      	cmp	r3, #254	@ 0xfe
 801ce32:	d12f      	bne.n	801ce94 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801ce34:	f898 0001 	ldrb.w	r0, [r8, #1]
 801ce38:	f108 0304 	add.w	r3, r8, #4
 801ce3c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ce40:	f04f 0c03 	mov.w	ip, #3
 801ce44:	f898 1003 	ldrb.w	r1, [r8, #3]
 801ce48:	b2c0      	uxtb	r0, r0
 801ce4a:	b2d2      	uxtb	r2, r2
 801ce4c:	9307      	str	r3, [sp, #28]
 801ce4e:	b2c9      	uxtb	r1, r1
 801ce50:	f360 0507 	bfi	r5, r0, #0, #8
 801ce54:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801ce58:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ce5c:	f362 250f 	bfi	r5, r2, #8, #8
 801ce60:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801ce64:	f04f 0307 	mov.w	r3, #7
 801ce68:	f361 4517 	bfi	r5, r1, #16, #8
 801ce6c:	fb13 c300 	smlabb	r3, r3, r0, ip
 801ce70:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801ce74:	9b00      	ldr	r3, [sp, #0]
 801ce76:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801ce7a:	605d      	str	r5, [r3, #4]
 801ce7c:	d15d      	bne.n	801cf3a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801ce7e:	7020      	strb	r0, [r4, #0]
 801ce80:	7062      	strb	r2, [r4, #1]
 801ce82:	70a1      	strb	r1, [r4, #2]
 801ce84:	e791      	b.n	801cdaa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801ce86:	bf00      	nop
 801ce88:	24025934 	.word	0x24025934
 801ce8c:	2402592e 	.word	0x2402592e
 801ce90:	24009780 	.word	0x24009780
 801ce94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ce98:	1c5a      	adds	r2, r3, #1
 801ce9a:	b94b      	cbnz	r3, 801ceb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801ce9c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801cea0:	d14c      	bne.n	801cf3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801cea2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801cea6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801ceaa:	7025      	strb	r5, [r4, #0]
 801ceac:	7062      	strb	r2, [r4, #1]
 801ceae:	e72b      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801ceb0:	4296      	cmp	r6, r2
 801ceb2:	46b0      	mov	r8, r6
 801ceb4:	bfa8      	it	ge
 801ceb6:	4690      	movge	r8, r2
 801ceb8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801cebc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801cec0:	eba6 0608 	sub.w	r6, r6, r8
 801cec4:	eba2 0908 	sub.w	r9, r2, r8
 801cec8:	9308      	str	r3, [sp, #32]
 801ceca:	b2eb      	uxtb	r3, r5
 801cecc:	930c      	str	r3, [sp, #48]	@ 0x30
 801cece:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ced2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ced4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801ced8:	930a      	str	r3, [sp, #40]	@ 0x28
 801ceda:	9b08      	ldr	r3, [sp, #32]
 801cedc:	d030      	beq.n	801cf40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801cede:	18fb      	adds	r3, r7, r3
 801cee0:	2bc0      	cmp	r3, #192	@ 0xc0
 801cee2:	dd15      	ble.n	801cf10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801cee4:	4650      	mov	r0, sl
 801cee6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801ceea:	f7e6 f9ed 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 801ceee:	2203      	movs	r2, #3
 801cef0:	4651      	mov	r1, sl
 801cef2:	465b      	mov	r3, fp
 801cef4:	4620      	mov	r0, r4
 801cef6:	443c      	add	r4, r7
 801cef8:	fb97 f2f2 	sdiv	r2, r7, r2
 801cefc:	f7e6 fa28 	bl	8003350 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801cf00:	4b3d      	ldr	r3, [pc, #244]	@ (801cff8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801cf02:	2700      	movs	r7, #0
 801cf04:	459a      	cmp	sl, r3
 801cf06:	bf0c      	ite	eq
 801cf08:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801d004 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801cf0c:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801cff8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801cf10:	eb0a 0307 	add.w	r3, sl, r7
 801cf14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cf16:	f1b8 0801 	subs.w	r8, r8, #1
 801cf1a:	f103 0303 	add.w	r3, r3, #3
 801cf1e:	f803 2c03 	strb.w	r2, [r3, #-3]
 801cf22:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cf24:	f803 2c02 	strb.w	r2, [r3, #-2]
 801cf28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cf2a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801cf2e:	d1f1      	bne.n	801cf14 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801cf30:	9b08      	ldr	r3, [sp, #32]
 801cf32:	441f      	add	r7, r3
 801cf34:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801cf38:	e6cb      	b.n	801ccd2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801cf3a:	2201      	movs	r2, #1
 801cf3c:	4690      	mov	r8, r2
 801cf3e:	e7bb      	b.n	801ceb8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801cf40:	4423      	add	r3, r4
 801cf42:	42a3      	cmp	r3, r4
 801cf44:	d9f6      	bls.n	801cf34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801cf46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cf48:	3403      	adds	r4, #3
 801cf4a:	f804 2c03 	strb.w	r2, [r4, #-3]
 801cf4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cf50:	f804 2c02 	strb.w	r2, [r4, #-2]
 801cf54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cf56:	f804 2c01 	strb.w	r2, [r4, #-1]
 801cf5a:	e7f2      	b.n	801cf42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801cf5c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801cf60:	d00e      	beq.n	801cf80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801cf62:	b16f      	cbz	r7, 801cf80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801cf64:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801cf68:	4650      	mov	r0, sl
 801cf6a:	f7e6 f9ad 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 801cf6e:	2203      	movs	r2, #3
 801cf70:	4620      	mov	r0, r4
 801cf72:	443c      	add	r4, r7
 801cf74:	465b      	mov	r3, fp
 801cf76:	4651      	mov	r1, sl
 801cf78:	fb97 f2f2 	sdiv	r2, r7, r2
 801cf7c:	f7e6 f9e8 	bl	8003350 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801cf80:	4b1e      	ldr	r3, [pc, #120]	@ (801cffc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801cf82:	9a02      	ldr	r2, [sp, #8]
 801cf84:	881b      	ldrh	r3, [r3, #0]
 801cf86:	1a9b      	subs	r3, r3, r2
 801cf88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf8c:	441c      	add	r4, r3
 801cf8e:	9b04      	ldr	r3, [sp, #16]
 801cf90:	3301      	adds	r3, #1
 801cf92:	9304      	str	r3, [sp, #16]
 801cf94:	9a04      	ldr	r2, [sp, #16]
 801cf96:	9b01      	ldr	r3, [sp, #4]
 801cf98:	4293      	cmp	r3, r2
 801cf9a:	d11c      	bne.n	801cfd6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801cf9c:	9b03      	ldr	r3, [sp, #12]
 801cf9e:	2500      	movs	r5, #0
 801cfa0:	9a03      	ldr	r2, [sp, #12]
 801cfa2:	1c5e      	adds	r6, r3, #1
 801cfa4:	9b05      	ldr	r3, [sp, #20]
 801cfa6:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801cfaa:	4629      	mov	r1, r5
 801cfac:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801cfb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cfb4:	9b06      	ldr	r3, [sp, #24]
 801cfb6:	fa98 f888 	rev.w	r8, r8
 801cfba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cfbc:	4498      	add	r8, r3
 801cfbe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801cfc2:	1aff      	subs	r7, r7, r3
 801cfc4:	f007 ff72 	bl	8024eac <memset>
 801cfc8:	b2bf      	uxth	r7, r7
 801cfca:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801cfce:	f7e6 f971 	bl	80032b4 <_ZN8touchgfx5paint8tearDownEv>
 801cfd2:	46c1      	mov	r9, r8
 801cfd4:	e5db      	b.n	801cb8e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801cfd6:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801cfda:	9b02      	ldr	r3, [sp, #8]
 801cfdc:	1aff      	subs	r7, r7, r3
 801cfde:	eba7 0709 	sub.w	r7, r7, r9
 801cfe2:	b2bf      	uxth	r7, r7
 801cfe4:	e7f3      	b.n	801cfce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801cfe6:	4b06      	ldr	r3, [pc, #24]	@ (801d000 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801cfe8:	6818      	ldr	r0, [r3, #0]
 801cfea:	6803      	ldr	r3, [r0, #0]
 801cfec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfee:	4798      	blx	r3
 801cff0:	b013      	add	sp, #76	@ 0x4c
 801cff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cff6:	bf00      	nop
 801cff8:	24009780 	.word	0x24009780
 801cffc:	2402592e 	.word	0x2402592e
 801d000:	24025934 	.word	0x24025934
 801d004:	24009880 	.word	0x24009880

0801d008 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d00c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801d010:	9c06      	ldr	r4, [sp, #24]
 801d012:	2800      	cmp	r0, #0
 801d014:	d06e      	beq.n	801d0f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d016:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d01a:	2d00      	cmp	r5, #0
 801d01c:	dd6a      	ble.n	801d0f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d01e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801d022:	f1bc 0f00 	cmp.w	ip, #0
 801d026:	dd65      	ble.n	801d0f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d028:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801d02c:	28ff      	cmp	r0, #255	@ 0xff
 801d02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d032:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801d036:	fb02 3306 	mla	r3, r2, r6, r3
 801d03a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801d03e:	b2e4      	uxtb	r4, r4
 801d040:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d044:	4419      	add	r1, r3
 801d046:	fb02 f30c 	mul.w	r3, r2, ip
 801d04a:	eba2 0205 	sub.w	r2, r2, r5
 801d04e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d052:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d056:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d05a:	440b      	add	r3, r1
 801d05c:	d03e      	beq.n	801d0dc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801d05e:	fa1f fc80 	uxth.w	ip, r0
 801d062:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801d066:	fb06 f60c 	mul.w	r6, r6, ip
 801d06a:	b280      	uxth	r0, r0
 801d06c:	fb07 f70c 	mul.w	r7, r7, ip
 801d070:	fb04 f40c 	mul.w	r4, r4, ip
 801d074:	4299      	cmp	r1, r3
 801d076:	d23d      	bcs.n	801d0f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d078:	eb01 0c05 	add.w	ip, r1, r5
 801d07c:	458c      	cmp	ip, r1
 801d07e:	f101 0e03 	add.w	lr, r1, #3
 801d082:	d928      	bls.n	801d0d6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801d084:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d088:	fb11 f100 	smulbb	r1, r1, r0
 801d08c:	4421      	add	r1, r4
 801d08e:	b289      	uxth	r1, r1
 801d090:	f101 0801 	add.w	r8, r1, #1
 801d094:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d098:	1209      	asrs	r1, r1, #8
 801d09a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d09e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801d0a2:	fb11 f100 	smulbb	r1, r1, r0
 801d0a6:	4439      	add	r1, r7
 801d0a8:	b289      	uxth	r1, r1
 801d0aa:	f101 0801 	add.w	r8, r1, #1
 801d0ae:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d0b2:	1209      	asrs	r1, r1, #8
 801d0b4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d0b8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d0bc:	fb11 f100 	smulbb	r1, r1, r0
 801d0c0:	4431      	add	r1, r6
 801d0c2:	b289      	uxth	r1, r1
 801d0c4:	f101 0801 	add.w	r8, r1, #1
 801d0c8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801d0cc:	1209      	asrs	r1, r1, #8
 801d0ce:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801d0d2:	4671      	mov	r1, lr
 801d0d4:	e7d2      	b.n	801d07c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801d0d6:	4411      	add	r1, r2
 801d0d8:	e7cc      	b.n	801d074 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801d0da:	4411      	add	r1, r2
 801d0dc:	4299      	cmp	r1, r3
 801d0de:	d209      	bcs.n	801d0f4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801d0e0:	1948      	adds	r0, r1, r5
 801d0e2:	4281      	cmp	r1, r0
 801d0e4:	d2f9      	bcs.n	801d0da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801d0e6:	700c      	strb	r4, [r1, #0]
 801d0e8:	3103      	adds	r1, #3
 801d0ea:	f801 7c02 	strb.w	r7, [r1, #-2]
 801d0ee:	f801 6c01 	strb.w	r6, [r1, #-1]
 801d0f2:	e7f6      	b.n	801d0e2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d0f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801d0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0fc:	b093      	sub	sp, #76	@ 0x4c
 801d0fe:	4699      	mov	r9, r3
 801d100:	4617      	mov	r7, r2
 801d102:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d106:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801d10a:	4604      	mov	r4, r0
 801d10c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d110:	a80c      	add	r0, sp, #48	@ 0x30
 801d112:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801d116:	460d      	mov	r5, r1
 801d118:	4649      	mov	r1, r9
 801d11a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801d11e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d122:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801d126:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801d12a:	f7f2 f9d5 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 801d12e:	4639      	mov	r1, r7
 801d130:	a80c      	add	r0, sp, #48	@ 0x30
 801d132:	f7f2 f9d1 	bl	800f4d8 <_ZN8touchgfx4RectaNERKS0_>
 801d136:	4b78      	ldr	r3, [pc, #480]	@ (801d318 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801d138:	8818      	ldrh	r0, [r3, #0]
 801d13a:	4b78      	ldr	r3, [pc, #480]	@ (801d31c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801d13c:	b202      	sxth	r2, r0
 801d13e:	8819      	ldrh	r1, [r3, #0]
 801d140:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801d144:	b20f      	sxth	r7, r1
 801d146:	2b00      	cmp	r3, #0
 801d148:	da07      	bge.n	801d15a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801d14a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801d14e:	4463      	add	r3, ip
 801d150:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801d154:	2300      	movs	r3, #0
 801d156:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801d15a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801d15e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801d162:	1ad2      	subs	r2, r2, r3
 801d164:	4594      	cmp	ip, r2
 801d166:	bfc4      	itt	gt
 801d168:	1ac2      	subgt	r2, r0, r3
 801d16a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801d16e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d172:	2a00      	cmp	r2, #0
 801d174:	da07      	bge.n	801d186 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801d176:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801d17a:	4462      	add	r2, ip
 801d17c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801d180:	2200      	movs	r2, #0
 801d182:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801d186:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801d18a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801d18e:	1abf      	subs	r7, r7, r2
 801d190:	45bc      	cmp	ip, r7
 801d192:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801d324 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801d196:	bfc8      	it	gt
 801d198:	1a8f      	subgt	r7, r1, r2
 801d19a:	f89c c000 	ldrb.w	ip, [ip]
 801d19e:	bfc8      	it	gt
 801d1a0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801d1a4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801d1a8:	f1bc 0f00 	cmp.w	ip, #0
 801d1ac:	d176      	bne.n	801d29c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801d1ae:	4287      	cmp	r7, r0
 801d1b0:	bf14      	ite	ne
 801d1b2:	2100      	movne	r1, #0
 801d1b4:	2101      	moveq	r1, #1
 801d1b6:	2f00      	cmp	r7, #0
 801d1b8:	9107      	str	r1, [sp, #28]
 801d1ba:	dd73      	ble.n	801d2a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d1bc:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801d1c0:	2900      	cmp	r1, #0
 801d1c2:	9104      	str	r1, [sp, #16]
 801d1c4:	dd6e      	ble.n	801d2a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801d1c6:	f8b9 1000 	ldrh.w	r1, [r9]
 801d1ca:	a80e      	add	r0, sp, #56	@ 0x38
 801d1cc:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801d1d0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801d1d4:	1a5b      	subs	r3, r3, r1
 801d1d6:	a910      	add	r1, sp, #64	@ 0x40
 801d1d8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801d1dc:	b21b      	sxth	r3, r3
 801d1de:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801d1e2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801d328 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d1e6:	9305      	str	r3, [sp, #20]
 801d1e8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801d1ec:	1ad2      	subs	r2, r2, r3
 801d1ee:	b213      	sxth	r3, r2
 801d1f0:	9306      	str	r3, [sp, #24]
 801d1f2:	9b05      	ldr	r3, [sp, #20]
 801d1f4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801d1f8:	9b06      	ldr	r3, [sp, #24]
 801d1fa:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d1fe:	9b04      	ldr	r3, [sp, #16]
 801d200:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801d204:	2300      	movs	r3, #0
 801d206:	9310      	str	r3, [sp, #64]	@ 0x40
 801d208:	f7f8 faa8 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d20c:	4640      	mov	r0, r8
 801d20e:	f7f8 fa7d 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d212:	a810      	add	r0, sp, #64	@ 0x40
 801d214:	f7f8 fa7a 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d218:	4b41      	ldr	r3, [pc, #260]	@ (801d320 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801d21a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801d21e:	4628      	mov	r0, r5
 801d220:	881b      	ldrh	r3, [r3, #0]
 801d222:	9308      	str	r3, [sp, #32]
 801d224:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801d228:	b21b      	sxth	r3, r3
 801d22a:	9303      	str	r3, [sp, #12]
 801d22c:	682b      	ldr	r3, [r5, #0]
 801d22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d230:	4798      	blx	r3
 801d232:	9a03      	ldr	r2, [sp, #12]
 801d234:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801d238:	4681      	mov	r9, r0
 801d23a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801d23e:	fb13 f302 	smulbb	r3, r3, r2
 801d242:	2203      	movs	r2, #3
 801d244:	f8da 0000 	ldr.w	r0, [sl]
 801d248:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d24c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801d24e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d250:	441d      	add	r5, r3
 801d252:	6803      	ldr	r3, [r0, #0]
 801d254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d256:	4798      	blx	r3
 801d258:	9009      	str	r0, [sp, #36]	@ 0x24
 801d25a:	f8da 0000 	ldr.w	r0, [sl]
 801d25e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801d262:	6803      	ldr	r3, [r0, #0]
 801d264:	910a      	str	r1, [sp, #40]	@ 0x28
 801d266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d268:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801d26c:	4798      	blx	r3
 801d26e:	f010 0f01 	tst.w	r0, #1
 801d272:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801d276:	d01e      	beq.n	801d2b6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801d278:	f8da 0000 	ldr.w	r0, [sl]
 801d27c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d280:	6803      	ldr	r3, [r0, #0]
 801d282:	9200      	str	r2, [sp, #0]
 801d284:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801d286:	462b      	mov	r3, r5
 801d288:	e898 0006 	ldmia.w	r8, {r1, r2}
 801d28c:	47b0      	blx	r6
 801d28e:	9b05      	ldr	r3, [sp, #20]
 801d290:	80a7      	strh	r7, [r4, #4]
 801d292:	8023      	strh	r3, [r4, #0]
 801d294:	9b06      	ldr	r3, [sp, #24]
 801d296:	8063      	strh	r3, [r4, #2]
 801d298:	9b04      	ldr	r3, [sp, #16]
 801d29a:	e007      	b.n	801d2ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801d29c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801d2a0:	4288      	cmp	r0, r1
 801d2a2:	e785      	b.n	801d1b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	8023      	strh	r3, [r4, #0]
 801d2a8:	8063      	strh	r3, [r4, #2]
 801d2aa:	80a3      	strh	r3, [r4, #4]
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	80e3      	strh	r3, [r4, #6]
 801d2b0:	b013      	add	sp, #76	@ 0x4c
 801d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2b6:	fb09 f606 	mul.w	r6, r9, r6
 801d2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2bc:	fb11 6602 	smlabb	r6, r1, r2, r6
 801d2c0:	9a07      	ldr	r2, [sp, #28]
 801d2c2:	4433      	add	r3, r6
 801d2c4:	461e      	mov	r6, r3
 801d2c6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801d2ca:	b16a      	cbz	r2, 801d2e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d2cc:	9a08      	ldr	r2, [sp, #32]
 801d2ce:	4593      	cmp	fp, r2
 801d2d0:	d10a      	bne.n	801d2e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801d2d2:	f8da 0000 	ldr.w	r0, [sl]
 801d2d6:	fb09 f303 	mul.w	r3, r9, r3
 801d2da:	4629      	mov	r1, r5
 801d2dc:	6802      	ldr	r2, [r0, #0]
 801d2de:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801d2e2:	4632      	mov	r2, r6
 801d2e4:	47d0      	blx	sl
 801d2e6:	e7d2      	b.n	801d28e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d2e8:	9a03      	ldr	r2, [sp, #12]
 801d2ea:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801d328 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801d2ee:	fb02 5803 	mla	r8, r2, r3, r5
 801d2f2:	4545      	cmp	r5, r8
 801d2f4:	d2cb      	bcs.n	801d28e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801d2f6:	f8db 0000 	ldr.w	r0, [fp]
 801d2fa:	4629      	mov	r1, r5
 801d2fc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801d300:	6802      	ldr	r2, [r0, #0]
 801d302:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d306:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801d30a:	4632      	mov	r2, r6
 801d30c:	47d0      	blx	sl
 801d30e:	9b03      	ldr	r3, [sp, #12]
 801d310:	444e      	add	r6, r9
 801d312:	441d      	add	r5, r3
 801d314:	e7ed      	b.n	801d2f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801d316:	bf00      	nop
 801d318:	24025928 	.word	0x24025928
 801d31c:	2402592a 	.word	0x2402592a
 801d320:	2402592e 	.word	0x2402592e
 801d324:	2402592c 	.word	0x2402592c
 801d328:	24025934 	.word	0x24025934

0801d32c <_ZN8touchgfx8LCD24bppC1Ev>:
 801d32c:	2200      	movs	r2, #0
 801d32e:	490e      	ldr	r1, [pc, #56]	@ (801d368 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801d330:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801d334:	6001      	str	r1, [r0, #0]
 801d336:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801d33a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801d33e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801d342:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801d346:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801d34a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801d34e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801d352:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801d356:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801d35a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801d35e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801d362:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801d366:	4770      	bx	lr
 801d368:	0802948c 	.word	0x0802948c

0801d36c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801d36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d370:	b091      	sub	sp, #68	@ 0x44
 801d372:	4607      	mov	r7, r0
 801d374:	4688      	mov	r8, r1
 801d376:	6810      	ldr	r0, [r2, #0]
 801d378:	6851      	ldr	r1, [r2, #4]
 801d37a:	ac0c      	add	r4, sp, #48	@ 0x30
 801d37c:	4616      	mov	r6, r2
 801d37e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801d382:	4d64      	ldr	r5, [pc, #400]	@ (801d514 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d384:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801d518 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801d388:	c403      	stmia	r4!, {r0, r1}
 801d38a:	6818      	ldr	r0, [r3, #0]
 801d38c:	ac0e      	add	r4, sp, #56	@ 0x38
 801d38e:	6859      	ldr	r1, [r3, #4]
 801d390:	c403      	stmia	r4!, {r0, r1}
 801d392:	a80c      	add	r0, sp, #48	@ 0x30
 801d394:	f7f8 f9ba 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d398:	4631      	mov	r1, r6
 801d39a:	a80e      	add	r0, sp, #56	@ 0x38
 801d39c:	f7f8 f9de 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d3a0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d3a4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d3a8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801d3ac:	6828      	ldr	r0, [r5, #0]
 801d3ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d3b2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801d3b6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801d3ba:	440f      	add	r7, r1
 801d3bc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d3c0:	440a      	add	r2, r1
 801d3c2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d3c6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801d3ca:	4413      	add	r3, r2
 801d3cc:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d3d0:	6803      	ldr	r3, [r0, #0]
 801d3d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d3d4:	4798      	blx	r3
 801d3d6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801d3da:	6828      	ldr	r0, [r5, #0]
 801d3dc:	d01f      	beq.n	801d41e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801d3de:	2201      	movs	r2, #1
 801d3e0:	2500      	movs	r5, #0
 801d3e2:	6801      	ldr	r1, [r0, #0]
 801d3e4:	b2a4      	uxth	r4, r4
 801d3e6:	b2b6      	uxth	r6, r6
 801d3e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d3ec:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801d3f0:	250b      	movs	r5, #11
 801d3f2:	9507      	str	r5, [sp, #28]
 801d3f4:	f8ba 5000 	ldrh.w	r5, [sl]
 801d3f8:	f8cd 9010 	str.w	r9, [sp, #16]
 801d3fc:	9602      	str	r6, [sp, #8]
 801d3fe:	9401      	str	r4, [sp, #4]
 801d400:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801d404:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801d408:	9203      	str	r2, [sp, #12]
 801d40a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d40e:	9200      	str	r2, [sp, #0]
 801d410:	4642      	mov	r2, r8
 801d412:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801d414:	4639      	mov	r1, r7
 801d416:	47a0      	blx	r4
 801d418:	b011      	add	sp, #68	@ 0x44
 801d41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d41e:	6803      	ldr	r3, [r0, #0]
 801d420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d422:	4798      	blx	r3
 801d424:	f8ba 5000 	ldrh.w	r5, [sl]
 801d428:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d42c:	f04f 0e04 	mov.w	lr, #4
 801d430:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d434:	436e      	muls	r6, r5
 801d436:	fb05 2303 	mla	r3, r5, r3, r2
 801d43a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d43e:	1b2d      	subs	r5, r5, r4
 801d440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d448:	4418      	add	r0, r3
 801d44a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d44e:	1982      	adds	r2, r0, r6
 801d450:	1b1b      	subs	r3, r3, r4
 801d452:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d456:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d458:	4290      	cmp	r0, r2
 801d45a:	d254      	bcs.n	801d506 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d45c:	eb00 0a04 	add.w	sl, r0, r4
 801d460:	4550      	cmp	r0, sl
 801d462:	d24c      	bcs.n	801d4fe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801d464:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d468:	fb1e e101 	smlabb	r1, lr, r1, lr
 801d46c:	eb08 0c01 	add.w	ip, r8, r1
 801d470:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801d474:	b173      	cbz	r3, 801d494 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d476:	2bff      	cmp	r3, #255	@ 0xff
 801d478:	f818 b001 	ldrb.w	fp, [r8, r1]
 801d47c:	d10c      	bne.n	801d498 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d47e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801d482:	d109      	bne.n	801d498 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801d484:	f880 b000 	strb.w	fp, [r0]
 801d488:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801d48c:	7043      	strb	r3, [r0, #1]
 801d48e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801d492:	7083      	strb	r3, [r0, #2]
 801d494:	3003      	adds	r0, #3
 801d496:	e7e3      	b.n	801d460 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801d498:	fb09 f103 	mul.w	r1, r9, r3
 801d49c:	1c4b      	adds	r3, r1, #1
 801d49e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d4a2:	7801      	ldrb	r1, [r0, #0]
 801d4a4:	121b      	asrs	r3, r3, #8
 801d4a6:	b29e      	uxth	r6, r3
 801d4a8:	43db      	mvns	r3, r3
 801d4aa:	fb1b fb06 	smulbb	fp, fp, r6
 801d4ae:	b2db      	uxtb	r3, r3
 801d4b0:	fb01 b103 	mla	r1, r1, r3, fp
 801d4b4:	b289      	uxth	r1, r1
 801d4b6:	f101 0b01 	add.w	fp, r1, #1
 801d4ba:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d4be:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d4c2:	fb1b fb03 	smulbb	fp, fp, r3
 801d4c6:	1209      	asrs	r1, r1, #8
 801d4c8:	7001      	strb	r1, [r0, #0]
 801d4ca:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d4ce:	fb01 b106 	mla	r1, r1, r6, fp
 801d4d2:	b289      	uxth	r1, r1
 801d4d4:	f101 0b01 	add.w	fp, r1, #1
 801d4d8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801d4dc:	1209      	asrs	r1, r1, #8
 801d4de:	7041      	strb	r1, [r0, #1]
 801d4e0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801d4e4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801d4e8:	fb1c f303 	smulbb	r3, ip, r3
 801d4ec:	fb01 3606 	mla	r6, r1, r6, r3
 801d4f0:	b2b6      	uxth	r6, r6
 801d4f2:	1c73      	adds	r3, r6, #1
 801d4f4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d4f8:	1236      	asrs	r6, r6, #8
 801d4fa:	7086      	strb	r6, [r0, #2]
 801d4fc:	e7ca      	b.n	801d494 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801d4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d500:	4428      	add	r0, r5
 801d502:	441f      	add	r7, r3
 801d504:	e7a8      	b.n	801d458 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801d506:	4b03      	ldr	r3, [pc, #12]	@ (801d514 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801d508:	6818      	ldr	r0, [r3, #0]
 801d50a:	6803      	ldr	r3, [r0, #0]
 801d50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d50e:	4798      	blx	r3
 801d510:	e782      	b.n	801d418 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801d512:	bf00      	nop
 801d514:	24025934 	.word	0x24025934
 801d518:	2402592e 	.word	0x2402592e

0801d51c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d520:	b091      	sub	sp, #68	@ 0x44
 801d522:	4680      	mov	r8, r0
 801d524:	460e      	mov	r6, r1
 801d526:	6810      	ldr	r0, [r2, #0]
 801d528:	6851      	ldr	r1, [r2, #4]
 801d52a:	ad0c      	add	r5, sp, #48	@ 0x30
 801d52c:	4614      	mov	r4, r2
 801d52e:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801d532:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801d6cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801d536:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801d6d0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801d53a:	c503      	stmia	r5!, {r0, r1}
 801d53c:	6818      	ldr	r0, [r3, #0]
 801d53e:	ad0e      	add	r5, sp, #56	@ 0x38
 801d540:	6859      	ldr	r1, [r3, #4]
 801d542:	c503      	stmia	r5!, {r0, r1}
 801d544:	a80c      	add	r0, sp, #48	@ 0x30
 801d546:	f7f8 f8e1 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d54a:	4621      	mov	r1, r4
 801d54c:	a80e      	add	r0, sp, #56	@ 0x38
 801d54e:	f7f8 f905 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d552:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801d556:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d55a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801d55e:	f8d9 0000 	ldr.w	r0, [r9]
 801d562:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d566:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801d56a:	eb08 0401 	add.w	r4, r8, r1
 801d56e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d572:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801d576:	440a      	add	r2, r1
 801d578:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801d57c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801d580:	4413      	add	r3, r2
 801d582:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801d586:	6803      	ldr	r3, [r0, #0]
 801d588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d58a:	4798      	blx	r3
 801d58c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801d590:	f8d9 0000 	ldr.w	r0, [r9]
 801d594:	d022      	beq.n	801d5dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801d596:	2200      	movs	r2, #0
 801d598:	f04f 0c01 	mov.w	ip, #1
 801d59c:	6801      	ldr	r1, [r0, #0]
 801d59e:	b2ad      	uxth	r5, r5
 801d5a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801d5a4:	e9cd c208 	strd	ip, r2, [sp, #32]
 801d5a8:	f04f 0c0b 	mov.w	ip, #11
 801d5ac:	f8cd c01c 	str.w	ip, [sp, #28]
 801d5b0:	f8ba c000 	ldrh.w	ip, [sl]
 801d5b4:	9704      	str	r7, [sp, #16]
 801d5b6:	9502      	str	r5, [sp, #8]
 801d5b8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801d5bc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801d5c0:	9203      	str	r2, [sp, #12]
 801d5c2:	fa1f f288 	uxth.w	r2, r8
 801d5c6:	9201      	str	r2, [sp, #4]
 801d5c8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801d5cc:	9200      	str	r2, [sp, #0]
 801d5ce:	4632      	mov	r2, r6
 801d5d0:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801d5d2:	4621      	mov	r1, r4
 801d5d4:	47a8      	blx	r5
 801d5d6:	b011      	add	sp, #68	@ 0x44
 801d5d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5dc:	6803      	ldr	r3, [r0, #0]
 801d5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5e0:	4798      	blx	r3
 801d5e2:	f8ba 2000 	ldrh.w	r2, [sl]
 801d5e6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801d5ea:	f04f 0e03 	mov.w	lr, #3
 801d5ee:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801d5f2:	4355      	muls	r5, r2
 801d5f4:	fa1f fc87 	uxth.w	ip, r7
 801d5f8:	fb02 1303 	mla	r3, r2, r3, r1
 801d5fc:	eba2 0208 	sub.w	r2, r2, r8
 801d600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d604:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d60c:	4418      	add	r0, r3
 801d60e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d610:	1943      	adds	r3, r0, r5
 801d612:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801d616:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801d61a:	eba2 0208 	sub.w	r2, r2, r8
 801d61e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d622:	b2ad      	uxth	r5, r5
 801d624:	4298      	cmp	r0, r3
 801d626:	d24a      	bcs.n	801d6be <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801d628:	eb00 0908 	add.w	r9, r0, r8
 801d62c:	4621      	mov	r1, r4
 801d62e:	4548      	cmp	r0, r9
 801d630:	460c      	mov	r4, r1
 801d632:	d240      	bcs.n	801d6b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801d634:	f04f 0a04 	mov.w	sl, #4
 801d638:	7824      	ldrb	r4, [r4, #0]
 801d63a:	2fff      	cmp	r7, #255	@ 0xff
 801d63c:	f101 0101 	add.w	r1, r1, #1
 801d640:	fb1e a404 	smlabb	r4, lr, r4, sl
 801d644:	eb06 0a04 	add.w	sl, r6, r4
 801d648:	f816 b004 	ldrb.w	fp, [r6, r4]
 801d64c:	d02b      	beq.n	801d6a6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801d64e:	7804      	ldrb	r4, [r0, #0]
 801d650:	fb14 f405 	smulbb	r4, r4, r5
 801d654:	fb0b 440c 	mla	r4, fp, ip, r4
 801d658:	b2a4      	uxth	r4, r4
 801d65a:	f104 0b01 	add.w	fp, r4, #1
 801d65e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d662:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d666:	fb1b fb05 	smulbb	fp, fp, r5
 801d66a:	1224      	asrs	r4, r4, #8
 801d66c:	7004      	strb	r4, [r0, #0]
 801d66e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d672:	fb04 b40c 	mla	r4, r4, ip, fp
 801d676:	b2a4      	uxth	r4, r4
 801d678:	f104 0b01 	add.w	fp, r4, #1
 801d67c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801d680:	1224      	asrs	r4, r4, #8
 801d682:	7044      	strb	r4, [r0, #1]
 801d684:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d688:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d68c:	fb1a fa05 	smulbb	sl, sl, r5
 801d690:	fb04 a40c 	mla	r4, r4, ip, sl
 801d694:	b2a4      	uxth	r4, r4
 801d696:	f104 0a01 	add.w	sl, r4, #1
 801d69a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d69e:	1224      	asrs	r4, r4, #8
 801d6a0:	7084      	strb	r4, [r0, #2]
 801d6a2:	3003      	adds	r0, #3
 801d6a4:	e7c3      	b.n	801d62e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801d6a6:	f880 b000 	strb.w	fp, [r0]
 801d6aa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801d6ae:	7044      	strb	r4, [r0, #1]
 801d6b0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801d6b4:	e7f4      	b.n	801d6a0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801d6b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d6b8:	4420      	add	r0, r4
 801d6ba:	188c      	adds	r4, r1, r2
 801d6bc:	e7b2      	b.n	801d624 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801d6be:	4b03      	ldr	r3, [pc, #12]	@ (801d6cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801d6c0:	6818      	ldr	r0, [r3, #0]
 801d6c2:	6803      	ldr	r3, [r0, #0]
 801d6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d6c6:	4798      	blx	r3
 801d6c8:	e785      	b.n	801d5d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801d6ca:	bf00      	nop
 801d6cc:	24025934 	.word	0x24025934
 801d6d0:	2402592e 	.word	0x2402592e

0801d6d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801d6d4:	b4f0      	push	{r4, r5, r6, r7}
 801d6d6:	460c      	mov	r4, r1
 801d6d8:	4611      	mov	r1, r2
 801d6da:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801d6de:	461a      	mov	r2, r3
 801d6e0:	780f      	ldrb	r7, [r1, #0]
 801d6e2:	9b04      	ldr	r3, [sp, #16]
 801d6e4:	784e      	ldrb	r6, [r1, #1]
 801d6e6:	b11f      	cbz	r7, 801d6f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801d6e8:	2f01      	cmp	r7, #1
 801d6ea:	d01d      	beq.n	801d728 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801d6ec:	bcf0      	pop	{r4, r5, r6, r7}
 801d6ee:	4770      	bx	lr
 801d6f0:	2e03      	cmp	r6, #3
 801d6f2:	d8fb      	bhi.n	801d6ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801d6f4:	e8df f006 	tbb	[pc, r6]
 801d6f8:	16140702 	.word	0x16140702
 801d6fc:	9504      	str	r5, [sp, #16]
 801d6fe:	4620      	mov	r0, r4
 801d700:	bcf0      	pop	{r4, r5, r6, r7}
 801d702:	f7ff be33 	b.w	801d36c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801d706:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801d708:	2800      	cmp	r0, #0
 801d70a:	d0ef      	beq.n	801d6ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801d70c:	6806      	ldr	r6, [r0, #0]
 801d70e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801d712:	68f5      	ldr	r5, [r6, #12]
 801d714:	4613      	mov	r3, r2
 801d716:	46ac      	mov	ip, r5
 801d718:	460a      	mov	r2, r1
 801d71a:	4621      	mov	r1, r4
 801d71c:	bcf0      	pop	{r4, r5, r6, r7}
 801d71e:	4760      	bx	ip
 801d720:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801d722:	e7f1      	b.n	801d708 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801d724:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801d726:	e7ef      	b.n	801d708 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801d728:	2e03      	cmp	r6, #3
 801d72a:	d8df      	bhi.n	801d6ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801d72c:	e8df f006 	tbb	[pc, r6]
 801d730:	110f0702 	.word	0x110f0702
 801d734:	9504      	str	r5, [sp, #16]
 801d736:	4620      	mov	r0, r4
 801d738:	bcf0      	pop	{r4, r5, r6, r7}
 801d73a:	f7ff beef 	b.w	801d51c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801d73e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801d740:	2800      	cmp	r0, #0
 801d742:	d0d3      	beq.n	801d6ec <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801d744:	6806      	ldr	r6, [r0, #0]
 801d746:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801d74a:	68b5      	ldr	r5, [r6, #8]
 801d74c:	e7e2      	b.n	801d714 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801d74e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801d750:	e7f6      	b.n	801d740 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801d752:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801d754:	e7f4      	b.n	801d740 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801d758 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801d758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d75c:	4605      	mov	r5, r0
 801d75e:	b08f      	sub	sp, #60	@ 0x3c
 801d760:	460c      	mov	r4, r1
 801d762:	461f      	mov	r7, r3
 801d764:	2b00      	cmp	r3, #0
 801d766:	d052      	beq.n	801d80e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801d768:	6808      	ldr	r0, [r1, #0]
 801d76a:	ab0a      	add	r3, sp, #40	@ 0x28
 801d76c:	6849      	ldr	r1, [r1, #4]
 801d76e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801d938 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801d772:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801d93c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801d776:	c303      	stmia	r3!, {r0, r1}
 801d778:	6810      	ldr	r0, [r2, #0]
 801d77a:	ab0c      	add	r3, sp, #48	@ 0x30
 801d77c:	6851      	ldr	r1, [r2, #4]
 801d77e:	c303      	stmia	r3!, {r0, r1}
 801d780:	a80a      	add	r0, sp, #40	@ 0x28
 801d782:	f7f7 ffc3 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d786:	4621      	mov	r1, r4
 801d788:	a80c      	add	r0, sp, #48	@ 0x30
 801d78a:	f7f7 ffe7 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d78e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d792:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d796:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801d79a:	f8d8 0000 	ldr.w	r0, [r8]
 801d79e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d7a2:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801d7a6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801d7aa:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801d7ae:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801d7b2:	440a      	add	r2, r1
 801d7b4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801d7b8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d7bc:	4413      	add	r3, r2
 801d7be:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d7c2:	6803      	ldr	r3, [r0, #0]
 801d7c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d7c6:	4798      	blx	r3
 801d7c8:	2fff      	cmp	r7, #255	@ 0xff
 801d7ca:	d023      	beq.n	801d814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801d7cc:	f010 0f04 	tst.w	r0, #4
 801d7d0:	f8d8 0000 	ldr.w	r0, [r8]
 801d7d4:	d021      	beq.n	801d81a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801d7d6:	2100      	movs	r1, #0
 801d7d8:	f04f 0e01 	mov.w	lr, #1
 801d7dc:	f8d0 c000 	ldr.w	ip, [r0]
 801d7e0:	b2a4      	uxth	r4, r4
 801d7e2:	9106      	str	r1, [sp, #24]
 801d7e4:	b2b6      	uxth	r6, r6
 801d7e6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801d7ea:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801d7ee:	e9cd e107 	strd	lr, r1, [sp, #28]
 801d7f2:	f8b9 e000 	ldrh.w	lr, [r9]
 801d7f6:	9703      	str	r7, [sp, #12]
 801d7f8:	9401      	str	r4, [sp, #4]
 801d7fa:	9600      	str	r6, [sp, #0]
 801d7fc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801d800:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801d804:	9102      	str	r1, [sp, #8]
 801d806:	4629      	mov	r1, r5
 801d808:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801d80c:	47a0      	blx	r4
 801d80e:	b00f      	add	sp, #60	@ 0x3c
 801d810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d814:	f010 0f01 	tst.w	r0, #1
 801d818:	e7da      	b.n	801d7d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801d81a:	6803      	ldr	r3, [r0, #0]
 801d81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d81e:	4798      	blx	r3
 801d820:	f8b9 1000 	ldrh.w	r1, [r9]
 801d824:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d828:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801d82c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d830:	434c      	muls	r4, r1
 801d832:	2fff      	cmp	r7, #255	@ 0xff
 801d834:	fb01 2303 	mla	r3, r1, r3, r2
 801d838:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d83c:	eba1 0106 	sub.w	r1, r1, r6
 801d840:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d844:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d848:	4418      	add	r0, r3
 801d84a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801d84e:	eba3 0606 	sub.w	r6, r3, r6
 801d852:	4404      	add	r4, r0
 801d854:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801d858:	d04a      	beq.n	801d8f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801d85a:	43fa      	mvns	r2, r7
 801d85c:	b2bb      	uxth	r3, r7
 801d85e:	b2d7      	uxtb	r7, r2
 801d860:	42a0      	cmp	r0, r4
 801d862:	d263      	bcs.n	801d92c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801d864:	eb00 0e0c 	add.w	lr, r0, ip
 801d868:	4586      	cmp	lr, r0
 801d86a:	f100 0803 	add.w	r8, r0, #3
 801d86e:	d93a      	bls.n	801d8e6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801d870:	f835 2b02 	ldrh.w	r2, [r5], #2
 801d874:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801d878:	00d0      	lsls	r0, r2, #3
 801d87a:	fb19 f907 	smulbb	r9, r9, r7
 801d87e:	b2c0      	uxtb	r0, r0
 801d880:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801d884:	fb00 9003 	mla	r0, r0, r3, r9
 801d888:	b280      	uxth	r0, r0
 801d88a:	f100 0901 	add.w	r9, r0, #1
 801d88e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d892:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801d896:	fb19 f907 	smulbb	r9, r9, r7
 801d89a:	1200      	asrs	r0, r0, #8
 801d89c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801d8a0:	10d0      	asrs	r0, r2, #3
 801d8a2:	1212      	asrs	r2, r2, #8
 801d8a4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801d8a8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801d8ac:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801d8b0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d8b4:	fb00 9003 	mla	r0, r0, r3, r9
 801d8b8:	b280      	uxth	r0, r0
 801d8ba:	f100 0901 	add.w	r9, r0, #1
 801d8be:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801d8c2:	1200      	asrs	r0, r0, #8
 801d8c4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801d8c8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801d8cc:	fb10 f007 	smulbb	r0, r0, r7
 801d8d0:	fb02 0203 	mla	r2, r2, r3, r0
 801d8d4:	b292      	uxth	r2, r2
 801d8d6:	1c50      	adds	r0, r2, #1
 801d8d8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d8dc:	4640      	mov	r0, r8
 801d8de:	1212      	asrs	r2, r2, #8
 801d8e0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801d8e4:	e7c0      	b.n	801d868 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801d8e6:	4408      	add	r0, r1
 801d8e8:	4435      	add	r5, r6
 801d8ea:	e7b9      	b.n	801d860 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801d8ec:	4408      	add	r0, r1
 801d8ee:	4435      	add	r5, r6
 801d8f0:	42a0      	cmp	r0, r4
 801d8f2:	d21b      	bcs.n	801d92c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801d8f4:	eb00 070c 	add.w	r7, r0, ip
 801d8f8:	42b8      	cmp	r0, r7
 801d8fa:	d2f7      	bcs.n	801d8ec <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801d8fc:	f835 3b02 	ldrh.w	r3, [r5], #2
 801d900:	3003      	adds	r0, #3
 801d902:	00da      	lsls	r2, r3, #3
 801d904:	b2d2      	uxtb	r2, r2
 801d906:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801d90a:	f800 2c03 	strb.w	r2, [r0, #-3]
 801d90e:	10da      	asrs	r2, r3, #3
 801d910:	121b      	asrs	r3, r3, #8
 801d912:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801d916:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801d91a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801d91e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801d922:	f800 2c02 	strb.w	r2, [r0, #-2]
 801d926:	f800 3c01 	strb.w	r3, [r0, #-1]
 801d92a:	e7e5      	b.n	801d8f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801d92c:	4b02      	ldr	r3, [pc, #8]	@ (801d938 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801d92e:	6818      	ldr	r0, [r3, #0]
 801d930:	6803      	ldr	r3, [r0, #0]
 801d932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d934:	4798      	blx	r3
 801d936:	e76a      	b.n	801d80e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801d938:	24025934 	.word	0x24025934
 801d93c:	2402592e 	.word	0x2402592e

0801d940 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d944:	b08a      	sub	sp, #40	@ 0x28
 801d946:	460d      	mov	r5, r1
 801d948:	4604      	mov	r4, r0
 801d94a:	461e      	mov	r6, r3
 801d94c:	6808      	ldr	r0, [r1, #0]
 801d94e:	ab06      	add	r3, sp, #24
 801d950:	6849      	ldr	r1, [r1, #4]
 801d952:	4f5d      	ldr	r7, [pc, #372]	@ (801dac8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801d954:	c303      	stmia	r3!, {r0, r1}
 801d956:	6810      	ldr	r0, [r2, #0]
 801d958:	ab08      	add	r3, sp, #32
 801d95a:	6851      	ldr	r1, [r2, #4]
 801d95c:	c303      	stmia	r3!, {r0, r1}
 801d95e:	a806      	add	r0, sp, #24
 801d960:	f7f7 fed4 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d964:	4629      	mov	r1, r5
 801d966:	a808      	add	r0, sp, #32
 801d968:	f7f7 fef8 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d96c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d970:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d974:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801d978:	6838      	ldr	r0, [r7, #0]
 801d97a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801d97e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801d982:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801d986:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801d98a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801d98e:	440a      	add	r2, r1
 801d990:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d994:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d998:	4413      	add	r3, r2
 801d99a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801d99e:	6803      	ldr	r3, [r0, #0]
 801d9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d9a2:	4798      	blx	r3
 801d9a4:	2eff      	cmp	r6, #255	@ 0xff
 801d9a6:	d119      	bne.n	801d9dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801d9a8:	f010 0f20 	tst.w	r0, #32
 801d9ac:	6838      	ldr	r0, [r7, #0]
 801d9ae:	d018      	beq.n	801d9e2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801d9b0:	b2ad      	uxth	r5, r5
 801d9b2:	2700      	movs	r7, #0
 801d9b4:	6801      	ldr	r1, [r0, #0]
 801d9b6:	9501      	str	r5, [sp, #4]
 801d9b8:	fa1f f588 	uxth.w	r5, r8
 801d9bc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801d9c0:	9500      	str	r5, [sp, #0]
 801d9c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d9c6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801d9ca:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801d9ce:	9602      	str	r6, [sp, #8]
 801d9d0:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801d9d2:	4621      	mov	r1, r4
 801d9d4:	47a8      	blx	r5
 801d9d6:	b00a      	add	sp, #40	@ 0x28
 801d9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d9dc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801d9e0:	e7e4      	b.n	801d9ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801d9e2:	6803      	ldr	r3, [r0, #0]
 801d9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9e6:	4798      	blx	r3
 801d9e8:	4b38      	ldr	r3, [pc, #224]	@ (801dacc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801d9ea:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d9ee:	f8b3 c000 	ldrh.w	ip, [r3]
 801d9f2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801d9f6:	fb0c f505 	mul.w	r5, ip, r5
 801d9fa:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801d9fe:	fb0c 2303 	mla	r3, ip, r3, r2
 801da02:	ebac 0c08 	sub.w	ip, ip, r8
 801da06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801da0a:	ebae 0e08 	sub.w	lr, lr, r8
 801da0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801da12:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801da16:	4418      	add	r0, r3
 801da18:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801da1c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801da20:	4405      	add	r5, r0
 801da22:	42a8      	cmp	r0, r5
 801da24:	d24a      	bcs.n	801dabc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801da26:	eb00 0803 	add.w	r8, r0, r3
 801da2a:	4540      	cmp	r0, r8
 801da2c:	d243      	bcs.n	801dab6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801da2e:	78e2      	ldrb	r2, [r4, #3]
 801da30:	b15a      	cbz	r2, 801da4a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801da32:	2aff      	cmp	r2, #255	@ 0xff
 801da34:	f894 9000 	ldrb.w	r9, [r4]
 801da38:	d10a      	bne.n	801da50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801da3a:	2eff      	cmp	r6, #255	@ 0xff
 801da3c:	d108      	bne.n	801da50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801da3e:	f880 9000 	strb.w	r9, [r0]
 801da42:	7862      	ldrb	r2, [r4, #1]
 801da44:	7042      	strb	r2, [r0, #1]
 801da46:	78a2      	ldrb	r2, [r4, #2]
 801da48:	7082      	strb	r2, [r0, #2]
 801da4a:	3003      	adds	r0, #3
 801da4c:	3404      	adds	r4, #4
 801da4e:	e7ec      	b.n	801da2a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801da50:	4372      	muls	r2, r6
 801da52:	1c51      	adds	r1, r2, #1
 801da54:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801da58:	1209      	asrs	r1, r1, #8
 801da5a:	fa1f fa81 	uxth.w	sl, r1
 801da5e:	43c9      	mvns	r1, r1
 801da60:	fb19 f90a 	smulbb	r9, r9, sl
 801da64:	b2ca      	uxtb	r2, r1
 801da66:	7801      	ldrb	r1, [r0, #0]
 801da68:	fb01 9902 	mla	r9, r1, r2, r9
 801da6c:	fa1f f989 	uxth.w	r9, r9
 801da70:	f109 0101 	add.w	r1, r9, #1
 801da74:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801da78:	ea4f 2929 	mov.w	r9, r9, asr #8
 801da7c:	f880 9000 	strb.w	r9, [r0]
 801da80:	f890 9001 	ldrb.w	r9, [r0, #1]
 801da84:	7861      	ldrb	r1, [r4, #1]
 801da86:	fb19 f902 	smulbb	r9, r9, r2
 801da8a:	fb01 910a 	mla	r1, r1, sl, r9
 801da8e:	b289      	uxth	r1, r1
 801da90:	f101 0901 	add.w	r9, r1, #1
 801da94:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801da98:	1209      	asrs	r1, r1, #8
 801da9a:	7041      	strb	r1, [r0, #1]
 801da9c:	7881      	ldrb	r1, [r0, #2]
 801da9e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801daa2:	fb11 f202 	smulbb	r2, r1, r2
 801daa6:	fb09 220a 	mla	r2, r9, sl, r2
 801daaa:	b292      	uxth	r2, r2
 801daac:	1c51      	adds	r1, r2, #1
 801daae:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dab2:	1212      	asrs	r2, r2, #8
 801dab4:	e7c8      	b.n	801da48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801dab6:	4460      	add	r0, ip
 801dab8:	4474      	add	r4, lr
 801daba:	e7b2      	b.n	801da22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801dabc:	6838      	ldr	r0, [r7, #0]
 801dabe:	6803      	ldr	r3, [r0, #0]
 801dac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dac2:	4798      	blx	r3
 801dac4:	e787      	b.n	801d9d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801dac6:	bf00      	nop
 801dac8:	24025934 	.word	0x24025934
 801dacc:	2402592e 	.word	0x2402592e

0801dad0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801dad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dad4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801dad8:	4607      	mov	r7, r0
 801dada:	460c      	mov	r4, r1
 801dadc:	4692      	mov	sl, r2
 801dade:	4699      	mov	r9, r3
 801dae0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dae2:	b335      	cbz	r5, 801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801dae4:	4608      	mov	r0, r1
 801dae6:	f7fb fdcb 	bl	8019680 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801daea:	4680      	mov	r8, r0
 801daec:	4620      	mov	r0, r4
 801daee:	f7fb fdfb 	bl	80196e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801daf2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801daf6:	4620      	mov	r0, r4
 801daf8:	f8ad a008 	strh.w	sl, [sp, #8]
 801dafc:	f8ad 900a 	strh.w	r9, [sp, #10]
 801db00:	f8ad 800c 	strh.w	r8, [sp, #12]
 801db04:	f7fb fefa 	bl	80198fc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801db08:	2810      	cmp	r0, #16
 801db0a:	d812      	bhi.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801db0c:	e8df f000 	tbb	[pc, r0]
 801db10:	11092d24 	.word	0x11092d24
 801db14:	11111111 	.word	0x11111111
 801db18:	14111111 	.word	0x14111111
 801db1c:	4c111111 	.word	0x4c111111
 801db20:	3c          	.byte	0x3c
 801db21:	00          	.byte	0x00
 801db22:	4620      	mov	r0, r4
 801db24:	f7fb fe66 	bl	80197f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db28:	462b      	mov	r3, r5
 801db2a:	4632      	mov	r2, r6
 801db2c:	a902      	add	r1, sp, #8
 801db2e:	f7ff ff07 	bl	801d940 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801db32:	b004      	add	sp, #16
 801db34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db38:	4620      	mov	r0, r4
 801db3a:	f7fb fe5b 	bl	80197f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db3e:	4680      	mov	r8, r0
 801db40:	4620      	mov	r0, r4
 801db42:	f7fb fe87 	bl	8019854 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801db46:	ab02      	add	r3, sp, #8
 801db48:	4602      	mov	r2, r0
 801db4a:	4641      	mov	r1, r8
 801db4c:	4638      	mov	r0, r7
 801db4e:	e9cd 6500 	strd	r6, r5, [sp]
 801db52:	f7ff fdbf 	bl	801d6d4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801db56:	e7ec      	b.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801db58:	4620      	mov	r0, r4
 801db5a:	f7fb fe4b 	bl	80197f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db5e:	462b      	mov	r3, r5
 801db60:	4632      	mov	r2, r6
 801db62:	a902      	add	r1, sp, #8
 801db64:	f7ff fdf8 	bl	801d758 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801db68:	e7e3      	b.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801db6a:	683b      	ldr	r3, [r7, #0]
 801db6c:	4620      	mov	r0, r4
 801db6e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801db72:	f7fb fe3f 	bl	80197f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db76:	2300      	movs	r3, #0
 801db78:	4601      	mov	r1, r0
 801db7a:	aa02      	add	r2, sp, #8
 801db7c:	4638      	mov	r0, r7
 801db7e:	e9cd 5300 	strd	r5, r3, [sp]
 801db82:	4633      	mov	r3, r6
 801db84:	47c0      	blx	r8
 801db86:	e7d4      	b.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801db88:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801db8a:	2f00      	cmp	r7, #0
 801db8c:	d0d1      	beq.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801db8e:	683b      	ldr	r3, [r7, #0]
 801db90:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801db94:	4620      	mov	r0, r4
 801db96:	f7fb fe2d 	bl	80197f4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801db9a:	9500      	str	r5, [sp, #0]
 801db9c:	4601      	mov	r1, r0
 801db9e:	4633      	mov	r3, r6
 801dba0:	aa02      	add	r2, sp, #8
 801dba2:	4638      	mov	r0, r7
 801dba4:	47c0      	blx	r8
 801dba6:	e7c4      	b.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801dba8:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801dbaa:	2f00      	cmp	r7, #0
 801dbac:	d0c1      	beq.n	801db32 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801dbae:	683b      	ldr	r3, [r7, #0]
 801dbb0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801dbb4:	e7ee      	b.n	801db94 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801dbb6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801dbb6:	b4f0      	push	{r4, r5, r6, r7}
 801dbb8:	4616      	mov	r6, r2
 801dbba:	461c      	mov	r4, r3
 801dbbc:	460d      	mov	r5, r1
 801dbbe:	9a04      	ldr	r2, [sp, #16]
 801dbc0:	2e01      	cmp	r6, #1
 801dbc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dbc6:	d00e      	beq.n	801dbe6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801dbc8:	d303      	bcc.n	801dbd2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801dbca:	2e02      	cmp	r6, #2
 801dbcc:	d006      	beq.n	801dbdc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801dbce:	bcf0      	pop	{r4, r5, r6, r7}
 801dbd0:	4770      	bx	lr
 801dbd2:	4621      	mov	r1, r4
 801dbd4:	4628      	mov	r0, r5
 801dbd6:	bcf0      	pop	{r4, r5, r6, r7}
 801dbd8:	f7ff bdbe 	b.w	801d758 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801dbdc:	4621      	mov	r1, r4
 801dbde:	4628      	mov	r0, r5
 801dbe0:	bcf0      	pop	{r4, r5, r6, r7}
 801dbe2:	f7ff bead 	b.w	801d940 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801dbe6:	6805      	ldr	r5, [r0, #0]
 801dbe8:	2600      	movs	r6, #0
 801dbea:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801dbee:	68ed      	ldr	r5, [r5, #12]
 801dbf0:	4613      	mov	r3, r2
 801dbf2:	4622      	mov	r2, r4
 801dbf4:	46ac      	mov	ip, r5
 801dbf6:	bcf0      	pop	{r4, r5, r6, r7}
 801dbf8:	4760      	bx	ip
	...

0801dbfc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801dbfc:	b160      	cbz	r0, 801dc18 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801dbfe:	2903      	cmp	r1, #3
 801dc00:	d818      	bhi.n	801dc34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801dc02:	e8df f001 	tbb	[pc, r1]
 801dc06:	1902      	.short	0x1902
 801dc08:	1b06      	.short	0x1b06
 801dc0a:	4b0e      	ldr	r3, [pc, #56]	@ (801dc44 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801dc0c:	8818      	ldrh	r0, [r3, #0]
 801dc0e:	4240      	negs	r0, r0
 801dc10:	4770      	bx	lr
 801dc12:	4b0c      	ldr	r3, [pc, #48]	@ (801dc44 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801dc14:	8818      	ldrh	r0, [r3, #0]
 801dc16:	4770      	bx	lr
 801dc18:	2903      	cmp	r1, #3
 801dc1a:	d80b      	bhi.n	801dc34 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801dc1c:	a301      	add	r3, pc, #4	@ (adr r3, 801dc24 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801dc1e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801dc22:	bf00      	nop
 801dc24:	0801dc39 	.word	0x0801dc39
 801dc28:	0801dc13 	.word	0x0801dc13
 801dc2c:	0801dc3d 	.word	0x0801dc3d
 801dc30:	0801dc0b 	.word	0x0801dc0b
 801dc34:	2000      	movs	r0, #0
 801dc36:	4770      	bx	lr
 801dc38:	2001      	movs	r0, #1
 801dc3a:	4770      	bx	lr
 801dc3c:	f04f 30ff 	mov.w	r0, #4294967295
 801dc40:	4770      	bx	lr
 801dc42:	bf00      	nop
 801dc44:	2402592e 	.word	0x2402592e

0801dc48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801dc48:	b160      	cbz	r0, 801dc64 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801dc4a:	2903      	cmp	r1, #3
 801dc4c:	d818      	bhi.n	801dc80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801dc4e:	e8df f001 	tbb	[pc, r1]
 801dc52:	0219      	.short	0x0219
 801dc54:	051b      	.short	0x051b
 801dc56:	4b0e      	ldr	r3, [pc, #56]	@ (801dc90 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801dc58:	8818      	ldrh	r0, [r3, #0]
 801dc5a:	4770      	bx	lr
 801dc5c:	4b0c      	ldr	r3, [pc, #48]	@ (801dc90 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801dc5e:	8818      	ldrh	r0, [r3, #0]
 801dc60:	4240      	negs	r0, r0
 801dc62:	4770      	bx	lr
 801dc64:	2903      	cmp	r1, #3
 801dc66:	d80b      	bhi.n	801dc80 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801dc68:	a301      	add	r3, pc, #4	@ (adr r3, 801dc70 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801dc6a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801dc6e:	bf00      	nop
 801dc70:	0801dc57 	.word	0x0801dc57
 801dc74:	0801dc89 	.word	0x0801dc89
 801dc78:	0801dc5d 	.word	0x0801dc5d
 801dc7c:	0801dc85 	.word	0x0801dc85
 801dc80:	2000      	movs	r0, #0
 801dc82:	4770      	bx	lr
 801dc84:	2001      	movs	r0, #1
 801dc86:	4770      	bx	lr
 801dc88:	f04f 30ff 	mov.w	r0, #4294967295
 801dc8c:	4770      	bx	lr
 801dc8e:	bf00      	nop
 801dc90:	2402592e 	.word	0x2402592e

0801dc94 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801dc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc98:	b097      	sub	sp, #92	@ 0x5c
 801dc9a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801dc9c:	a912      	add	r1, sp, #72	@ 0x48
 801dc9e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801dca2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801dca6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801dcaa:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801dcae:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801dcb2:	e881 000c 	stmia.w	r1, {r2, r3}
 801dcb6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801dcba:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcbc:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801dcc0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801dcc4:	9311      	str	r3, [sp, #68]	@ 0x44
 801dcc6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801dcca:	798d      	ldrb	r5, [r1, #6]
 801dccc:	930c      	str	r3, [sp, #48]	@ 0x30
 801dcce:	7b4b      	ldrb	r3, [r1, #13]
 801dcd0:	0158      	lsls	r0, r3, #5
 801dcd2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801dcd6:	4328      	orrs	r0, r5
 801dcd8:	9009      	str	r0, [sp, #36]	@ 0x24
 801dcda:	f000 817c 	beq.w	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dcde:	011b      	lsls	r3, r3, #4
 801dce0:	79c8      	ldrb	r0, [r1, #7]
 801dce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dce6:	4303      	orrs	r3, r0
 801dce8:	930e      	str	r3, [sp, #56]	@ 0x38
 801dcea:	f000 8174 	beq.w	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dcee:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801dcf2:	b29b      	uxth	r3, r3
 801dcf4:	2f00      	cmp	r7, #0
 801dcf6:	f000 8116 	beq.w	801df26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801dcfa:	1aff      	subs	r7, r7, r3
 801dcfc:	b2bf      	uxth	r7, r7
 801dcfe:	043b      	lsls	r3, r7, #16
 801dd00:	d502      	bpl.n	801dd08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801dd02:	1bf6      	subs	r6, r6, r7
 801dd04:	2700      	movs	r7, #0
 801dd06:	b236      	sxth	r6, r6
 801dd08:	f9b2 1000 	ldrsh.w	r1, [r2]
 801dd0c:	a812      	add	r0, sp, #72	@ 0x48
 801dd0e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801dd12:	428e      	cmp	r6, r1
 801dd14:	b28b      	uxth	r3, r1
 801dd16:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801dd1a:	bfbf      	itttt	lt
 801dd1c:	18ff      	addlt	r7, r7, r3
 801dd1e:	1bbe      	sublt	r6, r7, r6
 801dd20:	b2b7      	uxthlt	r7, r6
 801dd22:	460e      	movlt	r6, r1
 801dd24:	8891      	ldrh	r1, [r2, #4]
 801dd26:	440b      	add	r3, r1
 801dd28:	4631      	mov	r1, r6
 801dd2a:	b21b      	sxth	r3, r3
 801dd2c:	9310      	str	r3, [sp, #64]	@ 0x40
 801dd2e:	88d3      	ldrh	r3, [r2, #6]
 801dd30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dd32:	449a      	add	sl, r3
 801dd34:	fa0f f38a 	sxth.w	r3, sl
 801dd38:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801dd3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dd3e:	4bb5      	ldr	r3, [pc, #724]	@ (801e014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801dd40:	f893 b000 	ldrb.w	fp, [r3]
 801dd44:	f10b 3cff 	add.w	ip, fp, #4294967295
 801dd48:	f1dc 0300 	rsbs	r3, ip, #0
 801dd4c:	eb43 030c 	adc.w	r3, r3, ip
 801dd50:	930d      	str	r3, [sp, #52]	@ 0x34
 801dd52:	464b      	mov	r3, r9
 801dd54:	f7f7 fb4f 	bl	80153f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801dd58:	4631      	mov	r1, r6
 801dd5a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801dd5e:	464b      	mov	r3, r9
 801dd60:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dd62:	a812      	add	r0, sp, #72	@ 0x48
 801dd64:	f7f7 fb64 	bl	8015430 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801dd68:	a916      	add	r1, sp, #88	@ 0x58
 801dd6a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801dd6e:	a815      	add	r0, sp, #84	@ 0x54
 801dd70:	f7f7 fc8a 	bl	8015688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801dd74:	f1b9 0f00 	cmp.w	r9, #0
 801dd78:	f040 80d8 	bne.w	801df2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801dd7c:	f1bb 0f01 	cmp.w	fp, #1
 801dd80:	f040 80dc 	bne.w	801df3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801dd84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dd86:	b153      	cbz	r3, 801dd9e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801dd88:	2508      	movs	r5, #8
 801dd8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd8c:	fb95 f3f8 	sdiv	r3, r5, r8
 801dd90:	1e5d      	subs	r5, r3, #1
 801dd92:	4415      	add	r5, r2
 801dd94:	fb95 f5f3 	sdiv	r5, r5, r3
 801dd98:	fb15 f503 	smulbb	r5, r5, r3
 801dd9c:	b2ad      	uxth	r5, r5
 801dd9e:	b907      	cbnz	r7, 801dda2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801dda0:	b16c      	cbz	r4, 801ddbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801dda2:	fb04 7305 	mla	r3, r4, r5, r7
 801dda6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801dda8:	ebaa 0a04 	sub.w	sl, sl, r4
 801ddac:	fb08 f303 	mul.w	r3, r8, r3
 801ddb0:	fa1f fa8a 	uxth.w	sl, sl
 801ddb4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ddb8:	f003 0407 	and.w	r4, r3, #7
 801ddbc:	9226      	str	r2, [sp, #152]	@ 0x98
 801ddbe:	4649      	mov	r1, r9
 801ddc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ddc2:	f7ff ff1b 	bl	801dbfc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ddc6:	4683      	mov	fp, r0
 801ddc8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ddca:	f7ff ff3d 	bl	801dc48 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ddce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ddd2:	4681      	mov	r9, r0
 801ddd4:	1a9b      	subs	r3, r3, r2
 801ddd6:	459a      	cmp	sl, r3
 801ddd8:	bfa8      	it	ge
 801ddda:	469a      	movge	sl, r3
 801dddc:	f1ba 0f00 	cmp.w	sl, #0
 801dde0:	f340 80f9 	ble.w	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801dde4:	1bf6      	subs	r6, r6, r7
 801dde6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dde8:	1b9e      	subs	r6, r3, r6
 801ddea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddec:	429e      	cmp	r6, r3
 801ddee:	bfd4      	ite	le
 801ddf0:	ebc7 0706 	rsble	r7, r7, r6
 801ddf4:	ebc7 0703 	rsbgt	r7, r7, r3
 801ddf8:	2f00      	cmp	r7, #0
 801ddfa:	f340 80ec 	ble.w	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ddfe:	1bed      	subs	r5, r5, r7
 801de00:	fb08 f305 	mul.w	r3, r8, r5
 801de04:	930d      	str	r3, [sp, #52]	@ 0x34
 801de06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de08:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801de0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801de0e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801de14:	930f      	str	r3, [sp, #60]	@ 0x3c
 801de16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de18:	b2db      	uxtb	r3, r3
 801de1a:	9310      	str	r3, [sp, #64]	@ 0x40
 801de1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801de1e:	2b00      	cmp	r3, #0
 801de20:	f040 80de 	bne.w	801dfe0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801de24:	4b7c      	ldr	r3, [pc, #496]	@ (801e018 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801de26:	6818      	ldr	r0, [r3, #0]
 801de28:	6803      	ldr	r3, [r0, #0]
 801de2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de2c:	4798      	blx	r3
 801de2e:	2301      	movs	r3, #1
 801de30:	4a7a      	ldr	r2, [pc, #488]	@ (801e01c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801de32:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801de36:	fb07 9b1b 	mls	fp, r7, fp, r9
 801de3a:	fa03 f308 	lsl.w	r3, r3, r8
 801de3e:	8811      	ldrh	r1, [r2, #0]
 801de40:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801de44:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801de48:	3b01      	subs	r3, #1
 801de4a:	fb06 bb07 	mla	fp, r6, r7, fp
 801de4e:	b2db      	uxtb	r3, r3
 801de50:	930a      	str	r3, [sp, #40]	@ 0x28
 801de52:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801de56:	fb01 2303 	mla	r3, r1, r3, r2
 801de5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de5e:	18c3      	adds	r3, r0, r3
 801de60:	9309      	str	r3, [sp, #36]	@ 0x24
 801de62:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801de64:	781a      	ldrb	r2, [r3, #0]
 801de66:	4122      	asrs	r2, r4
 801de68:	b2d2      	uxtb	r2, r2
 801de6a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801de6e:	f0c0 80d7 	bcc.w	801e020 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801de72:	46be      	mov	lr, r7
 801de74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801de76:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801de7a:	f0c0 80ba 	bcc.w	801dff2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801de7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801de80:	4013      	ands	r3, r2
 801de82:	d041      	beq.n	801df08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801de84:	20ff      	movs	r0, #255	@ 0xff
 801de86:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801de88:	fb90 f5f5 	sdiv	r5, r0, r5
 801de8c:	436b      	muls	r3, r5
 801de8e:	2bfe      	cmp	r3, #254	@ 0xfe
 801de90:	dd03      	ble.n	801de9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801de92:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801de94:	4285      	cmp	r5, r0
 801de96:	f000 80a5 	beq.w	801dfe4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801de9a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801de9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801de9e:	fb15 f303 	smulbb	r3, r5, r3
 801dea2:	b29b      	uxth	r3, r3
 801dea4:	1c5d      	adds	r5, r3, #1
 801dea6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801deaa:	780d      	ldrb	r5, [r1, #0]
 801deac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801deb0:	fa1f fc83 	uxth.w	ip, r3
 801deb4:	43db      	mvns	r3, r3
 801deb6:	fb10 f90c 	smulbb	r9, r0, ip
 801deba:	b2db      	uxtb	r3, r3
 801debc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801debe:	fb05 9503 	mla	r5, r5, r3, r9
 801dec2:	b2ad      	uxth	r5, r5
 801dec4:	f105 0901 	add.w	r9, r5, #1
 801dec8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801decc:	fb10 f90c 	smulbb	r9, r0, ip
 801ded0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ded2:	122d      	asrs	r5, r5, #8
 801ded4:	fb10 fc0c 	smulbb	ip, r0, ip
 801ded8:	700d      	strb	r5, [r1, #0]
 801deda:	784d      	ldrb	r5, [r1, #1]
 801dedc:	fb05 9503 	mla	r5, r5, r3, r9
 801dee0:	b2ad      	uxth	r5, r5
 801dee2:	f105 0901 	add.w	r9, r5, #1
 801dee6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801deea:	122d      	asrs	r5, r5, #8
 801deec:	704d      	strb	r5, [r1, #1]
 801deee:	788d      	ldrb	r5, [r1, #2]
 801def0:	fb05 cc03 	mla	ip, r5, r3, ip
 801def4:	fa1f fc8c 	uxth.w	ip, ip
 801def8:	f10c 0301 	add.w	r3, ip, #1
 801defc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801df00:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801df04:	f881 c002 	strb.w	ip, [r1, #2]
 801df08:	4444      	add	r4, r8
 801df0a:	4431      	add	r1, r6
 801df0c:	b2a4      	uxth	r4, r4
 801df0e:	2c07      	cmp	r4, #7
 801df10:	bf89      	itett	hi
 801df12:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801df14:	fa42 f208 	asrls.w	r2, r2, r8
 801df18:	2400      	movhi	r4, #0
 801df1a:	785a      	ldrbhi	r2, [r3, #1]
 801df1c:	bf8a      	itet	hi
 801df1e:	3301      	addhi	r3, #1
 801df20:	b2d2      	uxtbls	r2, r2
 801df22:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801df24:	e7a7      	b.n	801de76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801df26:	441e      	add	r6, r3
 801df28:	b236      	sxth	r6, r6
 801df2a:	e6ed      	b.n	801dd08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801df2c:	f1b9 0f01 	cmp.w	r9, #1
 801df30:	f47f af28 	bne.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df34:	f1bb 0f01 	cmp.w	fp, #1
 801df38:	f47f af24 	bne.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df3c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801e018 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801df40:	f8db 0000 	ldr.w	r0, [fp]
 801df44:	6803      	ldr	r3, [r0, #0]
 801df46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801df48:	4798      	blx	r3
 801df4a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801df4e:	465a      	mov	r2, fp
 801df50:	d006      	beq.n	801df60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801df52:	f1b8 0f04 	cmp.w	r8, #4
 801df56:	d141      	bne.n	801dfdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801df58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801df5a:	3300      	adds	r3, #0
 801df5c:	bf18      	it	ne
 801df5e:	2301      	movne	r3, #1
 801df60:	0580      	lsls	r0, r0, #22
 801df62:	d566      	bpl.n	801e032 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801df64:	f1b8 0f08 	cmp.w	r8, #8
 801df68:	d163      	bne.n	801e032 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	bf0c      	ite	eq
 801df6e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801df72:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801df76:	2f00      	cmp	r7, #0
 801df78:	f47f af04 	bne.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df7c:	2c00      	cmp	r4, #0
 801df7e:	f47f af01 	bne.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df84:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801df86:	18f3      	adds	r3, r6, r3
 801df88:	4283      	cmp	r3, r0
 801df8a:	f73f aefb 	bgt.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801df90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df92:	4403      	add	r3, r0
 801df94:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801df96:	4283      	cmp	r3, r0
 801df98:	f73f aef4 	bgt.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801df9c:	f1b8 0f08 	cmp.w	r8, #8
 801dfa0:	6810      	ldr	r0, [r2, #0]
 801dfa2:	f04f 0600 	mov.w	r6, #0
 801dfa6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801dfaa:	bf18      	it	ne
 801dfac:	3501      	addne	r5, #1
 801dfae:	6804      	ldr	r4, [r0, #0]
 801dfb0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801dfb4:	bf18      	it	ne
 801dfb6:	f025 0501 	bicne.w	r5, r5, #1
 801dfba:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801dfbe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801dfc0:	bf18      	it	ne
 801dfc2:	b2ad      	uxthne	r5, r5
 801dfc4:	9104      	str	r1, [sp, #16]
 801dfc6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801dfc8:	e9cd 5a00 	strd	r5, sl, [sp]
 801dfcc:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801dfd0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801dfd2:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801dfd4:	47a0      	blx	r4
 801dfd6:	b017      	add	sp, #92	@ 0x5c
 801dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfdc:	2300      	movs	r3, #0
 801dfde:	e7bf      	b.n	801df60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801dfe0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801dfe2:	e724      	b.n	801de2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801dfe4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dfe6:	700b      	strb	r3, [r1, #0]
 801dfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dfea:	704b      	strb	r3, [r1, #1]
 801dfec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dfee:	708b      	strb	r3, [r1, #2]
 801dff0:	e78a      	b.n	801df08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801dff2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dff4:	b153      	cbz	r3, 801e00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801dff6:	441c      	add	r4, r3
 801dff8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dffa:	b2a4      	uxth	r4, r4
 801dffc:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801e000:	f004 0407 	and.w	r4, r4, #7
 801e004:	781a      	ldrb	r2, [r3, #0]
 801e006:	9326      	str	r3, [sp, #152]	@ 0x98
 801e008:	4122      	asrs	r2, r4
 801e00a:	b2d2      	uxtb	r2, r2
 801e00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e00e:	445b      	add	r3, fp
 801e010:	9309      	str	r3, [sp, #36]	@ 0x24
 801e012:	e72a      	b.n	801de6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801e014:	2402592c 	.word	0x2402592c
 801e018:	24025934 	.word	0x24025934
 801e01c:	2402592e 	.word	0x2402592e
 801e020:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e022:	2b00      	cmp	r3, #0
 801e024:	d1d7      	bne.n	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e026:	4b06      	ldr	r3, [pc, #24]	@ (801e040 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801e028:	6818      	ldr	r0, [r3, #0]
 801e02a:	6803      	ldr	r3, [r0, #0]
 801e02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e02e:	4798      	blx	r3
 801e030:	e7d1      	b.n	801dfd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801e032:	2b00      	cmp	r3, #0
 801e034:	f43f aea6 	beq.w	801dd84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801e038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801e03c:	e79b      	b.n	801df76 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801e03e:	bf00      	nop
 801e040:	24025934 	.word	0x24025934

0801e044 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801e044:	b538      	push	{r3, r4, r5, lr}
 801e046:	4c15      	ldr	r4, [pc, #84]	@ (801e09c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801e048:	4605      	mov	r5, r0
 801e04a:	7823      	ldrb	r3, [r4, #0]
 801e04c:	f3bf 8f5b 	dmb	ish
 801e050:	07da      	lsls	r2, r3, #31
 801e052:	d40b      	bmi.n	801e06c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e054:	4620      	mov	r0, r4
 801e056:	f006 f8f7 	bl	8024248 <__cxa_guard_acquire>
 801e05a:	b138      	cbz	r0, 801e06c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801e05c:	4620      	mov	r0, r4
 801e05e:	f006 f8ff 	bl	8024260 <__cxa_guard_release>
 801e062:	4a0f      	ldr	r2, [pc, #60]	@ (801e0a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e064:	490f      	ldr	r1, [pc, #60]	@ (801e0a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801e066:	4810      	ldr	r0, [pc, #64]	@ (801e0a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e068:	f006 f8e7 	bl	802423a <__aeabi_atexit>
 801e06c:	4c0f      	ldr	r4, [pc, #60]	@ (801e0ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801e06e:	7823      	ldrb	r3, [r4, #0]
 801e070:	f3bf 8f5b 	dmb	ish
 801e074:	07db      	lsls	r3, r3, #31
 801e076:	d40b      	bmi.n	801e090 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e078:	4620      	mov	r0, r4
 801e07a:	f006 f8e5 	bl	8024248 <__cxa_guard_acquire>
 801e07e:	b138      	cbz	r0, 801e090 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801e080:	4620      	mov	r0, r4
 801e082:	f006 f8ed 	bl	8024260 <__cxa_guard_release>
 801e086:	4a06      	ldr	r2, [pc, #24]	@ (801e0a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801e088:	4909      	ldr	r1, [pc, #36]	@ (801e0b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801e08a:	480a      	ldr	r0, [pc, #40]	@ (801e0b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e08c:	f006 f8d5 	bl	802423a <__aeabi_atexit>
 801e090:	4b05      	ldr	r3, [pc, #20]	@ (801e0a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801e092:	616b      	str	r3, [r5, #20]
 801e094:	4b07      	ldr	r3, [pc, #28]	@ (801e0b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801e096:	61ab      	str	r3, [r5, #24]
 801e098:	bd38      	pop	{r3, r4, r5, pc}
 801e09a:	bf00      	nop
 801e09c:	24025a18 	.word	0x24025a18
 801e0a0:	24000000 	.word	0x24000000
 801e0a4:	0801b335 	.word	0x0801b335
 801e0a8:	240000f8 	.word	0x240000f8
 801e0ac:	24025a1c 	.word	0x24025a1c
 801e0b0:	0801b333 	.word	0x0801b333
 801e0b4:	240000fc 	.word	0x240000fc

0801e0b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801e0b8:	b538      	push	{r3, r4, r5, lr}
 801e0ba:	4c15      	ldr	r4, [pc, #84]	@ (801e110 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801e0bc:	4605      	mov	r5, r0
 801e0be:	7823      	ldrb	r3, [r4, #0]
 801e0c0:	f3bf 8f5b 	dmb	ish
 801e0c4:	07da      	lsls	r2, r3, #31
 801e0c6:	d40b      	bmi.n	801e0e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f006 f8bd 	bl	8024248 <__cxa_guard_acquire>
 801e0ce:	b138      	cbz	r0, 801e0e0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f006 f8c5 	bl	8024260 <__cxa_guard_release>
 801e0d6:	4a0f      	ldr	r2, [pc, #60]	@ (801e114 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e0d8:	490f      	ldr	r1, [pc, #60]	@ (801e118 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801e0da:	4810      	ldr	r0, [pc, #64]	@ (801e11c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e0dc:	f006 f8ad 	bl	802423a <__aeabi_atexit>
 801e0e0:	4c0f      	ldr	r4, [pc, #60]	@ (801e120 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801e0e2:	7823      	ldrb	r3, [r4, #0]
 801e0e4:	f3bf 8f5b 	dmb	ish
 801e0e8:	07db      	lsls	r3, r3, #31
 801e0ea:	d40b      	bmi.n	801e104 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f006 f8ab 	bl	8024248 <__cxa_guard_acquire>
 801e0f2:	b138      	cbz	r0, 801e104 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801e0f4:	4620      	mov	r0, r4
 801e0f6:	f006 f8b3 	bl	8024260 <__cxa_guard_release>
 801e0fa:	4a06      	ldr	r2, [pc, #24]	@ (801e114 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801e0fc:	4909      	ldr	r1, [pc, #36]	@ (801e124 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801e0fe:	480a      	ldr	r0, [pc, #40]	@ (801e128 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e100:	f006 f89b 	bl	802423a <__aeabi_atexit>
 801e104:	4b05      	ldr	r3, [pc, #20]	@ (801e11c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801e106:	60eb      	str	r3, [r5, #12]
 801e108:	4b07      	ldr	r3, [pc, #28]	@ (801e128 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801e10a:	612b      	str	r3, [r5, #16]
 801e10c:	bd38      	pop	{r3, r4, r5, pc}
 801e10e:	bf00      	nop
 801e110:	240259f8 	.word	0x240259f8
 801e114:	24000000 	.word	0x24000000
 801e118:	0801b339 	.word	0x0801b339
 801e11c:	240000d8 	.word	0x240000d8
 801e120:	240259fc 	.word	0x240259fc
 801e124:	0801b337 	.word	0x0801b337
 801e128:	240000dc 	.word	0x240000dc

0801e12c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801e12c:	b510      	push	{r4, lr}
 801e12e:	4604      	mov	r4, r0
 801e130:	f7ff ff88 	bl	801e044 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801e134:	4620      	mov	r0, r4
 801e136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e13a:	f7ff bfbd 	b.w	801e0b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801e140 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801e140:	b538      	push	{r3, r4, r5, lr}
 801e142:	4c15      	ldr	r4, [pc, #84]	@ (801e198 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801e144:	4605      	mov	r5, r0
 801e146:	7823      	ldrb	r3, [r4, #0]
 801e148:	f3bf 8f5b 	dmb	ish
 801e14c:	07da      	lsls	r2, r3, #31
 801e14e:	d40b      	bmi.n	801e168 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e150:	4620      	mov	r0, r4
 801e152:	f006 f879 	bl	8024248 <__cxa_guard_acquire>
 801e156:	b138      	cbz	r0, 801e168 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801e158:	4620      	mov	r0, r4
 801e15a:	f006 f881 	bl	8024260 <__cxa_guard_release>
 801e15e:	4a0f      	ldr	r2, [pc, #60]	@ (801e19c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e160:	490f      	ldr	r1, [pc, #60]	@ (801e1a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801e162:	4810      	ldr	r0, [pc, #64]	@ (801e1a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e164:	f006 f869 	bl	802423a <__aeabi_atexit>
 801e168:	4c0f      	ldr	r4, [pc, #60]	@ (801e1a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801e16a:	7823      	ldrb	r3, [r4, #0]
 801e16c:	f3bf 8f5b 	dmb	ish
 801e170:	07db      	lsls	r3, r3, #31
 801e172:	d40b      	bmi.n	801e18c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e174:	4620      	mov	r0, r4
 801e176:	f006 f867 	bl	8024248 <__cxa_guard_acquire>
 801e17a:	b138      	cbz	r0, 801e18c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801e17c:	4620      	mov	r0, r4
 801e17e:	f006 f86f 	bl	8024260 <__cxa_guard_release>
 801e182:	4a06      	ldr	r2, [pc, #24]	@ (801e19c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801e184:	4909      	ldr	r1, [pc, #36]	@ (801e1ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801e186:	480a      	ldr	r0, [pc, #40]	@ (801e1b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e188:	f006 f857 	bl	802423a <__aeabi_atexit>
 801e18c:	4b05      	ldr	r3, [pc, #20]	@ (801e1a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801e18e:	626b      	str	r3, [r5, #36]	@ 0x24
 801e190:	4b07      	ldr	r3, [pc, #28]	@ (801e1b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801e192:	62ab      	str	r3, [r5, #40]	@ 0x28
 801e194:	bd38      	pop	{r3, r4, r5, pc}
 801e196:	bf00      	nop
 801e198:	24025a20 	.word	0x24025a20
 801e19c:	24000000 	.word	0x24000000
 801e1a0:	0801b32d 	.word	0x0801b32d
 801e1a4:	24000100 	.word	0x24000100
 801e1a8:	24025a24 	.word	0x24025a24
 801e1ac:	0801b32b 	.word	0x0801b32b
 801e1b0:	24000104 	.word	0x24000104

0801e1b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801e1b4:	b538      	push	{r3, r4, r5, lr}
 801e1b6:	4c15      	ldr	r4, [pc, #84]	@ (801e20c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801e1b8:	4605      	mov	r5, r0
 801e1ba:	7823      	ldrb	r3, [r4, #0]
 801e1bc:	f3bf 8f5b 	dmb	ish
 801e1c0:	07da      	lsls	r2, r3, #31
 801e1c2:	d40b      	bmi.n	801e1dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e1c4:	4620      	mov	r0, r4
 801e1c6:	f006 f83f 	bl	8024248 <__cxa_guard_acquire>
 801e1ca:	b138      	cbz	r0, 801e1dc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f006 f847 	bl	8024260 <__cxa_guard_release>
 801e1d2:	4a0f      	ldr	r2, [pc, #60]	@ (801e210 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e1d4:	490f      	ldr	r1, [pc, #60]	@ (801e214 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801e1d6:	4810      	ldr	r0, [pc, #64]	@ (801e218 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e1d8:	f006 f82f 	bl	802423a <__aeabi_atexit>
 801e1dc:	4c0f      	ldr	r4, [pc, #60]	@ (801e21c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801e1de:	7823      	ldrb	r3, [r4, #0]
 801e1e0:	f3bf 8f5b 	dmb	ish
 801e1e4:	07db      	lsls	r3, r3, #31
 801e1e6:	d40b      	bmi.n	801e200 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	f006 f82d 	bl	8024248 <__cxa_guard_acquire>
 801e1ee:	b138      	cbz	r0, 801e200 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	f006 f835 	bl	8024260 <__cxa_guard_release>
 801e1f6:	4a06      	ldr	r2, [pc, #24]	@ (801e210 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801e1f8:	4909      	ldr	r1, [pc, #36]	@ (801e220 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801e1fa:	480a      	ldr	r0, [pc, #40]	@ (801e224 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e1fc:	f006 f81d 	bl	802423a <__aeabi_atexit>
 801e200:	4b05      	ldr	r3, [pc, #20]	@ (801e218 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801e202:	61eb      	str	r3, [r5, #28]
 801e204:	4b07      	ldr	r3, [pc, #28]	@ (801e224 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801e206:	622b      	str	r3, [r5, #32]
 801e208:	bd38      	pop	{r3, r4, r5, pc}
 801e20a:	bf00      	nop
 801e20c:	24025a00 	.word	0x24025a00
 801e210:	24000000 	.word	0x24000000
 801e214:	0801b331 	.word	0x0801b331
 801e218:	240000e0 	.word	0x240000e0
 801e21c:	24025a04 	.word	0x24025a04
 801e220:	0801b32f 	.word	0x0801b32f
 801e224:	240000e4 	.word	0x240000e4

0801e228 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801e228:	b510      	push	{r4, lr}
 801e22a:	4604      	mov	r4, r0
 801e22c:	f7ff ff88 	bl	801e140 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801e230:	4620      	mov	r0, r4
 801e232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e236:	f7ff bfbd 	b.w	801e1b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801e23c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801e23c:	b538      	push	{r3, r4, r5, lr}
 801e23e:	4c15      	ldr	r4, [pc, #84]	@ (801e294 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801e240:	4605      	mov	r5, r0
 801e242:	7823      	ldrb	r3, [r4, #0]
 801e244:	f3bf 8f5b 	dmb	ish
 801e248:	07da      	lsls	r2, r3, #31
 801e24a:	d40b      	bmi.n	801e264 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e24c:	4620      	mov	r0, r4
 801e24e:	f005 fffb 	bl	8024248 <__cxa_guard_acquire>
 801e252:	b138      	cbz	r0, 801e264 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801e254:	4620      	mov	r0, r4
 801e256:	f006 f803 	bl	8024260 <__cxa_guard_release>
 801e25a:	4a0f      	ldr	r2, [pc, #60]	@ (801e298 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e25c:	490f      	ldr	r1, [pc, #60]	@ (801e29c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801e25e:	4810      	ldr	r0, [pc, #64]	@ (801e2a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e260:	f005 ffeb 	bl	802423a <__aeabi_atexit>
 801e264:	4c0f      	ldr	r4, [pc, #60]	@ (801e2a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801e266:	7823      	ldrb	r3, [r4, #0]
 801e268:	f3bf 8f5b 	dmb	ish
 801e26c:	07db      	lsls	r3, r3, #31
 801e26e:	d40b      	bmi.n	801e288 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e270:	4620      	mov	r0, r4
 801e272:	f005 ffe9 	bl	8024248 <__cxa_guard_acquire>
 801e276:	b138      	cbz	r0, 801e288 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801e278:	4620      	mov	r0, r4
 801e27a:	f005 fff1 	bl	8024260 <__cxa_guard_release>
 801e27e:	4a06      	ldr	r2, [pc, #24]	@ (801e298 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801e280:	4909      	ldr	r1, [pc, #36]	@ (801e2a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801e282:	480a      	ldr	r0, [pc, #40]	@ (801e2ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e284:	f005 ffd9 	bl	802423a <__aeabi_atexit>
 801e288:	4b05      	ldr	r3, [pc, #20]	@ (801e2a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801e28a:	636b      	str	r3, [r5, #52]	@ 0x34
 801e28c:	4b07      	ldr	r3, [pc, #28]	@ (801e2ac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801e28e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801e290:	bd38      	pop	{r3, r4, r5, pc}
 801e292:	bf00      	nop
 801e294:	24025a08 	.word	0x24025a08
 801e298:	24000000 	.word	0x24000000
 801e29c:	0801b325 	.word	0x0801b325
 801e2a0:	240000e8 	.word	0x240000e8
 801e2a4:	24025a0c 	.word	0x24025a0c
 801e2a8:	0801b323 	.word	0x0801b323
 801e2ac:	240000ec 	.word	0x240000ec

0801e2b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801e2b0:	b538      	push	{r3, r4, r5, lr}
 801e2b2:	4c15      	ldr	r4, [pc, #84]	@ (801e308 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801e2b4:	4605      	mov	r5, r0
 801e2b6:	7823      	ldrb	r3, [r4, #0]
 801e2b8:	f3bf 8f5b 	dmb	ish
 801e2bc:	07da      	lsls	r2, r3, #31
 801e2be:	d40b      	bmi.n	801e2d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e2c0:	4620      	mov	r0, r4
 801e2c2:	f005 ffc1 	bl	8024248 <__cxa_guard_acquire>
 801e2c6:	b138      	cbz	r0, 801e2d8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801e2c8:	4620      	mov	r0, r4
 801e2ca:	f005 ffc9 	bl	8024260 <__cxa_guard_release>
 801e2ce:	4a0f      	ldr	r2, [pc, #60]	@ (801e30c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e2d0:	490f      	ldr	r1, [pc, #60]	@ (801e310 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801e2d2:	4810      	ldr	r0, [pc, #64]	@ (801e314 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e2d4:	f005 ffb1 	bl	802423a <__aeabi_atexit>
 801e2d8:	4c0f      	ldr	r4, [pc, #60]	@ (801e318 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801e2da:	7823      	ldrb	r3, [r4, #0]
 801e2dc:	f3bf 8f5b 	dmb	ish
 801e2e0:	07db      	lsls	r3, r3, #31
 801e2e2:	d40b      	bmi.n	801e2fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	f005 ffaf 	bl	8024248 <__cxa_guard_acquire>
 801e2ea:	b138      	cbz	r0, 801e2fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801e2ec:	4620      	mov	r0, r4
 801e2ee:	f005 ffb7 	bl	8024260 <__cxa_guard_release>
 801e2f2:	4a06      	ldr	r2, [pc, #24]	@ (801e30c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801e2f4:	4909      	ldr	r1, [pc, #36]	@ (801e31c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801e2f6:	480a      	ldr	r0, [pc, #40]	@ (801e320 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e2f8:	f005 ff9f 	bl	802423a <__aeabi_atexit>
 801e2fc:	4b05      	ldr	r3, [pc, #20]	@ (801e314 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801e2fe:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801e300:	4b07      	ldr	r3, [pc, #28]	@ (801e320 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801e302:	632b      	str	r3, [r5, #48]	@ 0x30
 801e304:	bd38      	pop	{r3, r4, r5, pc}
 801e306:	bf00      	nop
 801e308:	240259e0 	.word	0x240259e0
 801e30c:	24000000 	.word	0x24000000
 801e310:	0801b329 	.word	0x0801b329
 801e314:	240000c0 	.word	0x240000c0
 801e318:	240259e4 	.word	0x240259e4
 801e31c:	0801b327 	.word	0x0801b327
 801e320:	240000c4 	.word	0x240000c4

0801e324 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801e324:	b510      	push	{r4, lr}
 801e326:	4604      	mov	r4, r0
 801e328:	f7ff ff88 	bl	801e23c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801e32c:	4620      	mov	r0, r4
 801e32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e332:	f7ff bfbd 	b.w	801e2b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801e338 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801e338:	b538      	push	{r3, r4, r5, lr}
 801e33a:	4c15      	ldr	r4, [pc, #84]	@ (801e390 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801e33c:	4605      	mov	r5, r0
 801e33e:	7823      	ldrb	r3, [r4, #0]
 801e340:	f3bf 8f5b 	dmb	ish
 801e344:	07da      	lsls	r2, r3, #31
 801e346:	d40b      	bmi.n	801e360 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e348:	4620      	mov	r0, r4
 801e34a:	f005 ff7d 	bl	8024248 <__cxa_guard_acquire>
 801e34e:	b138      	cbz	r0, 801e360 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801e350:	4620      	mov	r0, r4
 801e352:	f005 ff85 	bl	8024260 <__cxa_guard_release>
 801e356:	4a0f      	ldr	r2, [pc, #60]	@ (801e394 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e358:	490f      	ldr	r1, [pc, #60]	@ (801e398 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801e35a:	4810      	ldr	r0, [pc, #64]	@ (801e39c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e35c:	f005 ff6d 	bl	802423a <__aeabi_atexit>
 801e360:	4c0f      	ldr	r4, [pc, #60]	@ (801e3a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801e362:	7823      	ldrb	r3, [r4, #0]
 801e364:	f3bf 8f5b 	dmb	ish
 801e368:	07db      	lsls	r3, r3, #31
 801e36a:	d40b      	bmi.n	801e384 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e36c:	4620      	mov	r0, r4
 801e36e:	f005 ff6b 	bl	8024248 <__cxa_guard_acquire>
 801e372:	b138      	cbz	r0, 801e384 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801e374:	4620      	mov	r0, r4
 801e376:	f005 ff73 	bl	8024260 <__cxa_guard_release>
 801e37a:	4a06      	ldr	r2, [pc, #24]	@ (801e394 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801e37c:	4909      	ldr	r1, [pc, #36]	@ (801e3a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801e37e:	480a      	ldr	r0, [pc, #40]	@ (801e3a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e380:	f005 ff5b 	bl	802423a <__aeabi_atexit>
 801e384:	4b05      	ldr	r3, [pc, #20]	@ (801e39c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801e386:	646b      	str	r3, [r5, #68]	@ 0x44
 801e388:	4b07      	ldr	r3, [pc, #28]	@ (801e3a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801e38a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801e38c:	bd38      	pop	{r3, r4, r5, pc}
 801e38e:	bf00      	nop
 801e390:	24025a10 	.word	0x24025a10
 801e394:	24000000 	.word	0x24000000
 801e398:	0801b31d 	.word	0x0801b31d
 801e39c:	240000f0 	.word	0x240000f0
 801e3a0:	24025a14 	.word	0x24025a14
 801e3a4:	0801b31b 	.word	0x0801b31b
 801e3a8:	240000f4 	.word	0x240000f4

0801e3ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801e3ac:	b538      	push	{r3, r4, r5, lr}
 801e3ae:	4c15      	ldr	r4, [pc, #84]	@ (801e404 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801e3b0:	4605      	mov	r5, r0
 801e3b2:	7823      	ldrb	r3, [r4, #0]
 801e3b4:	f3bf 8f5b 	dmb	ish
 801e3b8:	07da      	lsls	r2, r3, #31
 801e3ba:	d40b      	bmi.n	801e3d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e3bc:	4620      	mov	r0, r4
 801e3be:	f005 ff43 	bl	8024248 <__cxa_guard_acquire>
 801e3c2:	b138      	cbz	r0, 801e3d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801e3c4:	4620      	mov	r0, r4
 801e3c6:	f005 ff4b 	bl	8024260 <__cxa_guard_release>
 801e3ca:	4a0f      	ldr	r2, [pc, #60]	@ (801e408 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e3cc:	490f      	ldr	r1, [pc, #60]	@ (801e40c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801e3ce:	4810      	ldr	r0, [pc, #64]	@ (801e410 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e3d0:	f005 ff33 	bl	802423a <__aeabi_atexit>
 801e3d4:	4c0f      	ldr	r4, [pc, #60]	@ (801e414 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801e3d6:	7823      	ldrb	r3, [r4, #0]
 801e3d8:	f3bf 8f5b 	dmb	ish
 801e3dc:	07db      	lsls	r3, r3, #31
 801e3de:	d40b      	bmi.n	801e3f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	f005 ff31 	bl	8024248 <__cxa_guard_acquire>
 801e3e6:	b138      	cbz	r0, 801e3f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f005 ff39 	bl	8024260 <__cxa_guard_release>
 801e3ee:	4a06      	ldr	r2, [pc, #24]	@ (801e408 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801e3f0:	4909      	ldr	r1, [pc, #36]	@ (801e418 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801e3f2:	480a      	ldr	r0, [pc, #40]	@ (801e41c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e3f4:	f005 ff21 	bl	802423a <__aeabi_atexit>
 801e3f8:	4b05      	ldr	r3, [pc, #20]	@ (801e410 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801e3fa:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801e3fc:	4b07      	ldr	r3, [pc, #28]	@ (801e41c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801e3fe:	642b      	str	r3, [r5, #64]	@ 0x40
 801e400:	bd38      	pop	{r3, r4, r5, pc}
 801e402:	bf00      	nop
 801e404:	240259f0 	.word	0x240259f0
 801e408:	24000000 	.word	0x24000000
 801e40c:	0801b321 	.word	0x0801b321
 801e410:	240000d0 	.word	0x240000d0
 801e414:	240259f4 	.word	0x240259f4
 801e418:	0801b31f 	.word	0x0801b31f
 801e41c:	240000d4 	.word	0x240000d4

0801e420 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801e420:	b510      	push	{r4, lr}
 801e422:	4604      	mov	r4, r0
 801e424:	f7ff ff88 	bl	801e338 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801e428:	4620      	mov	r0, r4
 801e42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e42e:	f7ff bfbd 	b.w	801e3ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801e434 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801e434:	b538      	push	{r3, r4, r5, lr}
 801e436:	4c15      	ldr	r4, [pc, #84]	@ (801e48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801e438:	4605      	mov	r5, r0
 801e43a:	7823      	ldrb	r3, [r4, #0]
 801e43c:	f3bf 8f5b 	dmb	ish
 801e440:	07da      	lsls	r2, r3, #31
 801e442:	d40b      	bmi.n	801e45c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e444:	4620      	mov	r0, r4
 801e446:	f005 feff 	bl	8024248 <__cxa_guard_acquire>
 801e44a:	b138      	cbz	r0, 801e45c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801e44c:	4620      	mov	r0, r4
 801e44e:	f005 ff07 	bl	8024260 <__cxa_guard_release>
 801e452:	4a0f      	ldr	r2, [pc, #60]	@ (801e490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e454:	490f      	ldr	r1, [pc, #60]	@ (801e494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801e456:	4810      	ldr	r0, [pc, #64]	@ (801e498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e458:	f005 feef 	bl	802423a <__aeabi_atexit>
 801e45c:	4c0f      	ldr	r4, [pc, #60]	@ (801e49c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801e45e:	7823      	ldrb	r3, [r4, #0]
 801e460:	f3bf 8f5b 	dmb	ish
 801e464:	07db      	lsls	r3, r3, #31
 801e466:	d40b      	bmi.n	801e480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e468:	4620      	mov	r0, r4
 801e46a:	f005 feed 	bl	8024248 <__cxa_guard_acquire>
 801e46e:	b138      	cbz	r0, 801e480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801e470:	4620      	mov	r0, r4
 801e472:	f005 fef5 	bl	8024260 <__cxa_guard_release>
 801e476:	4a06      	ldr	r2, [pc, #24]	@ (801e490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801e478:	4909      	ldr	r1, [pc, #36]	@ (801e4a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801e47a:	480a      	ldr	r0, [pc, #40]	@ (801e4a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e47c:	f005 fedd 	bl	802423a <__aeabi_atexit>
 801e480:	4b05      	ldr	r3, [pc, #20]	@ (801e498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801e482:	656b      	str	r3, [r5, #84]	@ 0x54
 801e484:	4b07      	ldr	r3, [pc, #28]	@ (801e4a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801e486:	65ab      	str	r3, [r5, #88]	@ 0x58
 801e488:	bd38      	pop	{r3, r4, r5, pc}
 801e48a:	bf00      	nop
 801e48c:	240259e8 	.word	0x240259e8
 801e490:	24000000 	.word	0x24000000
 801e494:	0801b315 	.word	0x0801b315
 801e498:	240000c8 	.word	0x240000c8
 801e49c:	240259ec 	.word	0x240259ec
 801e4a0:	0801b313 	.word	0x0801b313
 801e4a4:	240000cc 	.word	0x240000cc

0801e4a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801e4a8:	b538      	push	{r3, r4, r5, lr}
 801e4aa:	4c15      	ldr	r4, [pc, #84]	@ (801e500 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801e4ac:	4605      	mov	r5, r0
 801e4ae:	7823      	ldrb	r3, [r4, #0]
 801e4b0:	f3bf 8f5b 	dmb	ish
 801e4b4:	07da      	lsls	r2, r3, #31
 801e4b6:	d40b      	bmi.n	801e4d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	f005 fec5 	bl	8024248 <__cxa_guard_acquire>
 801e4be:	b138      	cbz	r0, 801e4d0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801e4c0:	4620      	mov	r0, r4
 801e4c2:	f005 fecd 	bl	8024260 <__cxa_guard_release>
 801e4c6:	4a0f      	ldr	r2, [pc, #60]	@ (801e504 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e4c8:	490f      	ldr	r1, [pc, #60]	@ (801e508 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801e4ca:	4810      	ldr	r0, [pc, #64]	@ (801e50c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e4cc:	f005 feb5 	bl	802423a <__aeabi_atexit>
 801e4d0:	4c0f      	ldr	r4, [pc, #60]	@ (801e510 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801e4d2:	7823      	ldrb	r3, [r4, #0]
 801e4d4:	f3bf 8f5b 	dmb	ish
 801e4d8:	07db      	lsls	r3, r3, #31
 801e4da:	d40b      	bmi.n	801e4f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f005 feb3 	bl	8024248 <__cxa_guard_acquire>
 801e4e2:	b138      	cbz	r0, 801e4f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801e4e4:	4620      	mov	r0, r4
 801e4e6:	f005 febb 	bl	8024260 <__cxa_guard_release>
 801e4ea:	4a06      	ldr	r2, [pc, #24]	@ (801e504 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801e4ec:	4909      	ldr	r1, [pc, #36]	@ (801e514 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801e4ee:	480a      	ldr	r0, [pc, #40]	@ (801e518 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e4f0:	f005 fea3 	bl	802423a <__aeabi_atexit>
 801e4f4:	4b05      	ldr	r3, [pc, #20]	@ (801e50c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801e4f6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801e4f8:	4b07      	ldr	r3, [pc, #28]	@ (801e518 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801e4fa:	652b      	str	r3, [r5, #80]	@ 0x50
 801e4fc:	bd38      	pop	{r3, r4, r5, pc}
 801e4fe:	bf00      	nop
 801e500:	240259d8 	.word	0x240259d8
 801e504:	24000000 	.word	0x24000000
 801e508:	0801b319 	.word	0x0801b319
 801e50c:	240000b8 	.word	0x240000b8
 801e510:	240259dc 	.word	0x240259dc
 801e514:	0801b317 	.word	0x0801b317
 801e518:	240000bc 	.word	0x240000bc

0801e51c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801e51c:	b510      	push	{r4, lr}
 801e51e:	4604      	mov	r4, r0
 801e520:	f7ff ff88 	bl	801e434 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801e524:	4620      	mov	r0, r4
 801e526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e52a:	f7ff bfbd 	b.w	801e4a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801e52e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801e52e:	b510      	push	{r4, lr}
 801e530:	4604      	mov	r4, r0
 801e532:	f7ff fff3 	bl	801e51c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801e536:	4620      	mov	r0, r4
 801e538:	f7ff ff72 	bl	801e420 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801e53c:	4620      	mov	r0, r4
 801e53e:	f7ff fe73 	bl	801e228 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801e542:	4620      	mov	r0, r4
 801e544:	f7ff fdf2 	bl	801e12c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801e548:	4620      	mov	r0, r4
 801e54a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e54e:	f7ff bee9 	b.w	801e324 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801e554 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801e554:	b538      	push	{r3, r4, r5, lr}
 801e556:	4c0b      	ldr	r4, [pc, #44]	@ (801e584 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801e558:	4605      	mov	r5, r0
 801e55a:	7823      	ldrb	r3, [r4, #0]
 801e55c:	f3bf 8f5b 	dmb	ish
 801e560:	07db      	lsls	r3, r3, #31
 801e562:	d40b      	bmi.n	801e57c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801e564:	4620      	mov	r0, r4
 801e566:	f005 fe6f 	bl	8024248 <__cxa_guard_acquire>
 801e56a:	b138      	cbz	r0, 801e57c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801e56c:	4620      	mov	r0, r4
 801e56e:	f005 fe77 	bl	8024260 <__cxa_guard_release>
 801e572:	4a05      	ldr	r2, [pc, #20]	@ (801e588 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801e574:	4905      	ldr	r1, [pc, #20]	@ (801e58c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801e576:	4806      	ldr	r0, [pc, #24]	@ (801e590 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801e578:	f005 fe5f 	bl	802423a <__aeabi_atexit>
 801e57c:	4b04      	ldr	r3, [pc, #16]	@ (801e590 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801e57e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801e580:	bd38      	pop	{r3, r4, r5, pc}
 801e582:	bf00      	nop
 801e584:	240259cc 	.word	0x240259cc
 801e588:	24000000 	.word	0x24000000
 801e58c:	0801b311 	.word	0x0801b311
 801e590:	240000b0 	.word	0x240000b0

0801e594 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801e594:	b538      	push	{r3, r4, r5, lr}
 801e596:	4c0b      	ldr	r4, [pc, #44]	@ (801e5c4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801e598:	4605      	mov	r5, r0
 801e59a:	7823      	ldrb	r3, [r4, #0]
 801e59c:	f3bf 8f5b 	dmb	ish
 801e5a0:	07db      	lsls	r3, r3, #31
 801e5a2:	d40b      	bmi.n	801e5bc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801e5a4:	4620      	mov	r0, r4
 801e5a6:	f005 fe4f 	bl	8024248 <__cxa_guard_acquire>
 801e5aa:	b138      	cbz	r0, 801e5bc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801e5ac:	4620      	mov	r0, r4
 801e5ae:	f005 fe57 	bl	8024260 <__cxa_guard_release>
 801e5b2:	4a05      	ldr	r2, [pc, #20]	@ (801e5c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801e5b4:	4905      	ldr	r1, [pc, #20]	@ (801e5cc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801e5b6:	4806      	ldr	r0, [pc, #24]	@ (801e5d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801e5b8:	f005 fe3f 	bl	802423a <__aeabi_atexit>
 801e5bc:	4b04      	ldr	r3, [pc, #16]	@ (801e5d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801e5be:	662b      	str	r3, [r5, #96]	@ 0x60
 801e5c0:	bd38      	pop	{r3, r4, r5, pc}
 801e5c2:	bf00      	nop
 801e5c4:	240259d0 	.word	0x240259d0
 801e5c8:	24000000 	.word	0x24000000
 801e5cc:	0801b30f 	.word	0x0801b30f
 801e5d0:	240000b4 	.word	0x240000b4

0801e5d4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801e5d4:	b570      	push	{r4, r5, r6, lr}
 801e5d6:	4d0c      	ldr	r5, [pc, #48]	@ (801e608 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801e5d8:	4606      	mov	r6, r0
 801e5da:	4c0c      	ldr	r4, [pc, #48]	@ (801e60c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801e5dc:	782b      	ldrb	r3, [r5, #0]
 801e5de:	f3bf 8f5b 	dmb	ish
 801e5e2:	f013 0f01 	tst.w	r3, #1
 801e5e6:	d10d      	bne.n	801e604 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801e5e8:	4628      	mov	r0, r5
 801e5ea:	f005 fe2d 	bl	8024248 <__cxa_guard_acquire>
 801e5ee:	b148      	cbz	r0, 801e604 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801e5f0:	4b07      	ldr	r3, [pc, #28]	@ (801e610 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801e5f2:	4628      	mov	r0, r5
 801e5f4:	6023      	str	r3, [r4, #0]
 801e5f6:	f005 fe33 	bl	8024260 <__cxa_guard_release>
 801e5fa:	4a06      	ldr	r2, [pc, #24]	@ (801e614 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801e5fc:	4620      	mov	r0, r4
 801e5fe:	4906      	ldr	r1, [pc, #24]	@ (801e618 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801e600:	f005 fe1b 	bl	802423a <__aeabi_atexit>
 801e604:	6674      	str	r4, [r6, #100]	@ 0x64
 801e606:	bd70      	pop	{r4, r5, r6, pc}
 801e608:	240259d4 	.word	0x240259d4
 801e60c:	24025b2c 	.word	0x24025b2c
 801e610:	080292cc 	.word	0x080292cc
 801e614:	24000000 	.word	0x24000000
 801e618:	0801b30d 	.word	0x0801b30d

0801e61c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801e61c:	b510      	push	{r4, lr}
 801e61e:	4604      	mov	r4, r0
 801e620:	f7ff ff98 	bl	801e554 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801e624:	4620      	mov	r0, r4
 801e626:	f7ff ffb5 	bl	801e594 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801e62a:	4620      	mov	r0, r4
 801e62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e630:	f7ff bfd0 	b.w	801e5d4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801e634 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801e634:	b570      	push	{r4, r5, r6, lr}
 801e636:	4d0c      	ldr	r5, [pc, #48]	@ (801e668 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801e638:	4606      	mov	r6, r0
 801e63a:	4c0c      	ldr	r4, [pc, #48]	@ (801e66c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801e63c:	782b      	ldrb	r3, [r5, #0]
 801e63e:	f3bf 8f5b 	dmb	ish
 801e642:	f013 0f01 	tst.w	r3, #1
 801e646:	d10d      	bne.n	801e664 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801e648:	4628      	mov	r0, r5
 801e64a:	f005 fdfd 	bl	8024248 <__cxa_guard_acquire>
 801e64e:	b148      	cbz	r0, 801e664 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801e650:	4b07      	ldr	r3, [pc, #28]	@ (801e670 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801e652:	4628      	mov	r0, r5
 801e654:	6023      	str	r3, [r4, #0]
 801e656:	f005 fe03 	bl	8024260 <__cxa_guard_release>
 801e65a:	4a06      	ldr	r2, [pc, #24]	@ (801e674 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801e65c:	4620      	mov	r0, r4
 801e65e:	4906      	ldr	r1, [pc, #24]	@ (801e678 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801e660:	f005 fdeb 	bl	802423a <__aeabi_atexit>
 801e664:	66b4      	str	r4, [r6, #104]	@ 0x68
 801e666:	bd70      	pop	{r4, r5, r6, pc}
 801e668:	240259c8 	.word	0x240259c8
 801e66c:	24025a28 	.word	0x24025a28
 801e670:	080292e4 	.word	0x080292e4
 801e674:	24000000 	.word	0x24000000
 801e678:	0801b30b 	.word	0x0801b30b

0801e67c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e680:	b087      	sub	sp, #28
 801e682:	788d      	ldrb	r5, [r1, #2]
 801e684:	f891 9000 	ldrb.w	r9, [r1]
 801e688:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801e68c:	9501      	str	r5, [sp, #4]
 801e68e:	784d      	ldrb	r5, [r1, #1]
 801e690:	9203      	str	r2, [sp, #12]
 801e692:	9502      	str	r5, [sp, #8]
 801e694:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801e698:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801e69c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801e6a0:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801e6a4:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801e6a8:	fb06 0708 	mla	r7, r6, r8, r0
 801e6ac:	2e00      	cmp	r6, #0
 801e6ae:	eb02 0a07 	add.w	sl, r2, r7
 801e6b2:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801e6b6:	9d01      	ldr	r5, [sp, #4]
 801e6b8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801e6bc:	ea45 0509 	orr.w	r5, r5, r9
 801e6c0:	9505      	str	r5, [sp, #20]
 801e6c2:	f2c0 80b2 	blt.w	801e82a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e6c6:	45b3      	cmp	fp, r6
 801e6c8:	f340 80af 	ble.w	801e82a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	f2c0 80aa 	blt.w	801e826 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e6d2:	4580      	cmp	r8, r0
 801e6d4:	f340 80a7 	ble.w	801e826 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801e6d8:	9a03      	ldr	r2, [sp, #12]
 801e6da:	5dd7      	ldrb	r7, [r2, r7]
 801e6dc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e6e0:	441f      	add	r7, r3
 801e6e2:	1c42      	adds	r2, r0, #1
 801e6e4:	f100 80a4 	bmi.w	801e830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e6e8:	4590      	cmp	r8, r2
 801e6ea:	f340 80a1 	ble.w	801e830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e6ee:	2c00      	cmp	r4, #0
 801e6f0:	f000 809e 	beq.w	801e830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801e6f4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801e6f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e6fc:	441d      	add	r5, r3
 801e6fe:	3601      	adds	r6, #1
 801e700:	f100 809a 	bmi.w	801e838 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e704:	45b3      	cmp	fp, r6
 801e706:	f340 8097 	ble.w	801e838 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e70a:	f1bc 0f00 	cmp.w	ip, #0
 801e70e:	f000 8093 	beq.w	801e838 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801e712:	2800      	cmp	r0, #0
 801e714:	f2c0 808e 	blt.w	801e834 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e718:	4580      	cmp	r8, r0
 801e71a:	f340 808b 	ble.w	801e834 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801e71e:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801e722:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e726:	441e      	add	r6, r3
 801e728:	3001      	adds	r0, #1
 801e72a:	f100 8088 	bmi.w	801e83e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e72e:	4580      	cmp	r8, r0
 801e730:	f340 8085 	ble.w	801e83e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e734:	2c00      	cmp	r4, #0
 801e736:	f000 8082 	beq.w	801e83e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801e73a:	44d0      	add	r8, sl
 801e73c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e744:	4413      	add	r3, r2
 801e746:	b2a4      	uxth	r4, r4
 801e748:	f895 a000 	ldrb.w	sl, [r5]
 801e74c:	fa1f fc8c 	uxth.w	ip, ip
 801e750:	fb04 fb0c 	mul.w	fp, r4, ip
 801e754:	0124      	lsls	r4, r4, #4
 801e756:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801e75a:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801e75e:	eba4 040b 	sub.w	r4, r4, fp
 801e762:	fa1f f08c 	uxth.w	r0, ip
 801e766:	b2a2      	uxth	r2, r4
 801e768:	783c      	ldrb	r4, [r7, #0]
 801e76a:	eba8 0800 	sub.w	r8, r8, r0
 801e76e:	fa1f fc8e 	uxth.w	ip, lr
 801e772:	fb02 fa0a 	mul.w	sl, r2, sl
 801e776:	ea6f 0e0e 	mvn.w	lr, lr
 801e77a:	fa1f f888 	uxth.w	r8, r8
 801e77e:	fa5f fe8e 	uxtb.w	lr, lr
 801e782:	fb08 aa04 	mla	sl, r8, r4, sl
 801e786:	7834      	ldrb	r4, [r6, #0]
 801e788:	fb19 f90e 	smulbb	r9, r9, lr
 801e78c:	fb00 aa04 	mla	sl, r0, r4, sl
 801e790:	781c      	ldrb	r4, [r3, #0]
 801e792:	fb0b a404 	mla	r4, fp, r4, sl
 801e796:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e79a:	fb04 990c 	mla	r9, r4, ip, r9
 801e79e:	fa1f f989 	uxth.w	r9, r9
 801e7a2:	f109 0401 	add.w	r4, r9, #1
 801e7a6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801e7aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e7ae:	f881 9000 	strb.w	r9, [r1]
 801e7b2:	f895 9001 	ldrb.w	r9, [r5, #1]
 801e7b6:	787c      	ldrb	r4, [r7, #1]
 801e7b8:	fb02 f909 	mul.w	r9, r2, r9
 801e7bc:	fb08 9904 	mla	r9, r8, r4, r9
 801e7c0:	7874      	ldrb	r4, [r6, #1]
 801e7c2:	fb00 9904 	mla	r9, r0, r4, r9
 801e7c6:	785c      	ldrb	r4, [r3, #1]
 801e7c8:	fb0b 9404 	mla	r4, fp, r4, r9
 801e7cc:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801e7d0:	9c02      	ldr	r4, [sp, #8]
 801e7d2:	fb14 f90e 	smulbb	r9, r4, lr
 801e7d6:	fb0a 940c 	mla	r4, sl, ip, r9
 801e7da:	b2a4      	uxth	r4, r4
 801e7dc:	f104 0901 	add.w	r9, r4, #1
 801e7e0:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801e7e4:	1224      	asrs	r4, r4, #8
 801e7e6:	704c      	strb	r4, [r1, #1]
 801e7e8:	78ad      	ldrb	r5, [r5, #2]
 801e7ea:	78bc      	ldrb	r4, [r7, #2]
 801e7ec:	436a      	muls	r2, r5
 801e7ee:	789b      	ldrb	r3, [r3, #2]
 801e7f0:	fb08 2204 	mla	r2, r8, r4, r2
 801e7f4:	78b4      	ldrb	r4, [r6, #2]
 801e7f6:	fb00 2004 	mla	r0, r0, r4, r2
 801e7fa:	fb0b 0b03 	mla	fp, fp, r3, r0
 801e7fe:	9b01      	ldr	r3, [sp, #4]
 801e800:	fb13 fe0e 	smulbb	lr, r3, lr
 801e804:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801e808:	fb0b ec0c 	mla	ip, fp, ip, lr
 801e80c:	fa1f fc8c 	uxth.w	ip, ip
 801e810:	f10c 0e01 	add.w	lr, ip, #1
 801e814:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801e818:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e81c:	f881 c002 	strb.w	ip, [r1, #2]
 801e820:	b007      	add	sp, #28
 801e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e826:	af05      	add	r7, sp, #20
 801e828:	e75b      	b.n	801e6e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801e82a:	ad05      	add	r5, sp, #20
 801e82c:	462f      	mov	r7, r5
 801e82e:	e766      	b.n	801e6fe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e830:	ad05      	add	r5, sp, #20
 801e832:	e764      	b.n	801e6fe <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801e834:	ae05      	add	r6, sp, #20
 801e836:	e777      	b.n	801e728 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801e838:	ab05      	add	r3, sp, #20
 801e83a:	461e      	mov	r6, r3
 801e83c:	e783      	b.n	801e746 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801e83e:	ab05      	add	r3, sp, #20
 801e840:	e781      	b.n	801e746 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801e842 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e846:	b093      	sub	sp, #76	@ 0x4c
 801e848:	9210      	str	r2, [sp, #64]	@ 0x40
 801e84a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e84c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e84e:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801e852:	9011      	str	r0, [sp, #68]	@ 0x44
 801e854:	930e      	str	r3, [sp, #56]	@ 0x38
 801e856:	6850      	ldr	r0, [r2, #4]
 801e858:	910d      	str	r1, [sp, #52]	@ 0x34
 801e85a:	6812      	ldr	r2, [r2, #0]
 801e85c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801e860:	fb00 1303 	mla	r3, r0, r3, r1
 801e864:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e868:	18d3      	adds	r3, r2, r3
 801e86a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e86c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	930c      	str	r3, [sp, #48]	@ 0x30
 801e872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e874:	685c      	ldr	r4, [r3, #4]
 801e876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e878:	3404      	adds	r4, #4
 801e87a:	43db      	mvns	r3, r3
 801e87c:	b2db      	uxtb	r3, r3
 801e87e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e880:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e882:	2b00      	cmp	r3, #0
 801e884:	dc03      	bgt.n	801e88e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e886:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e888:	2b00      	cmp	r3, #0
 801e88a:	f340 8250 	ble.w	801ed2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801e88e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e890:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e898:	1e48      	subs	r0, r1, #1
 801e89a:	1e55      	subs	r5, r2, #1
 801e89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e89e:	2b00      	cmp	r3, #0
 801e8a0:	f340 80ee 	ble.w	801ea80 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801e8a4:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801e8a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e8a8:	1436      	asrs	r6, r6, #16
 801e8aa:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e8ae:	d406      	bmi.n	801e8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8b0:	4286      	cmp	r6, r0
 801e8b2:	da04      	bge.n	801e8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	db02      	blt.n	801e8be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e8b8:	42ab      	cmp	r3, r5
 801e8ba:	f2c0 80e2 	blt.w	801ea82 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e8be:	3601      	adds	r6, #1
 801e8c0:	f100 80cf 	bmi.w	801ea62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e8c4:	42b1      	cmp	r1, r6
 801e8c6:	f2c0 80cc 	blt.w	801ea62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e8ca:	3301      	adds	r3, #1
 801e8cc:	f100 80c9 	bmi.w	801ea62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e8d0:	429a      	cmp	r2, r3
 801e8d2:	f2c0 80c6 	blt.w	801ea62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801e8d6:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801e8da:	f1bb 0f00 	cmp.w	fp, #0
 801e8de:	f340 80f1 	ble.w	801eac4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801e8e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e8e4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e8e6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801e8e8:	141d      	asrs	r5, r3, #16
 801e8ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8ec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801e8f0:	68c7      	ldr	r7, [r0, #12]
 801e8f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801e8f4:	1418      	asrs	r0, r3, #16
 801e8f6:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801e8fa:	6892      	ldr	r2, [r2, #8]
 801e8fc:	f100 8137 	bmi.w	801eb6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e900:	f102 3cff 	add.w	ip, r2, #4294967295
 801e904:	4560      	cmp	r0, ip
 801e906:	f280 8132 	bge.w	801eb6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e90a:	2d00      	cmp	r5, #0
 801e90c:	f2c0 812f 	blt.w	801eb6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e910:	f107 3cff 	add.w	ip, r7, #4294967295
 801e914:	4565      	cmp	r5, ip
 801e916:	f280 812a 	bge.w	801eb6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801e91a:	b212      	sxth	r2, r2
 801e91c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801e91e:	fb05 0002 	mla	r0, r5, r2, r0
 801e922:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801e924:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e928:	4405      	add	r5, r0
 801e92a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e92e:	eb04 0e0c 	add.w	lr, r4, ip
 801e932:	f1b8 0f00 	cmp.w	r8, #0
 801e936:	f000 810c 	beq.w	801eb52 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801e93a:	786f      	ldrb	r7, [r5, #1]
 801e93c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e940:	4427      	add	r7, r4
 801e942:	2900      	cmp	r1, #0
 801e944:	f000 810d 	beq.w	801eb62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801e948:	18a8      	adds	r0, r5, r2
 801e94a:	5caa      	ldrb	r2, [r5, r2]
 801e94c:	7840      	ldrb	r0, [r0, #1]
 801e94e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e952:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801e956:	4422      	add	r2, r4
 801e958:	4420      	add	r0, r4
 801e95a:	fa1f f388 	uxth.w	r3, r8
 801e95e:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801e962:	b289      	uxth	r1, r1
 801e964:	f897 c000 	ldrb.w	ip, [r7]
 801e968:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801e96c:	fb03 f901 	mul.w	r9, r3, r1
 801e970:	011b      	lsls	r3, r3, #4
 801e972:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e976:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801e97a:	eba3 0309 	sub.w	r3, r3, r9
 801e97e:	b289      	uxth	r1, r1
 801e980:	b29b      	uxth	r3, r3
 801e982:	eba8 0801 	sub.w	r8, r8, r1
 801e986:	fb03 fc0c 	mul.w	ip, r3, ip
 801e98a:	fa1f f888 	uxth.w	r8, r8
 801e98e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e992:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e996:	f892 a000 	ldrb.w	sl, [r2]
 801e99a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e99e:	f890 a000 	ldrb.w	sl, [r0]
 801e9a2:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e9a6:	f896 a000 	ldrb.w	sl, [r6]
 801e9aa:	fb1a fa03 	smulbb	sl, sl, r3
 801e9ae:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e9b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9b4:	fb0c ac05 	mla	ip, ip, r5, sl
 801e9b8:	fa1f fc8c 	uxth.w	ip, ip
 801e9bc:	f10c 0a01 	add.w	sl, ip, #1
 801e9c0:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801e9c4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801e9c8:	f886 a000 	strb.w	sl, [r6]
 801e9cc:	f897 c001 	ldrb.w	ip, [r7, #1]
 801e9d0:	f89e a001 	ldrb.w	sl, [lr, #1]
 801e9d4:	fb03 fc0c 	mul.w	ip, r3, ip
 801e9d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e9da:	fb08 cc0a 	mla	ip, r8, sl, ip
 801e9de:	f892 a001 	ldrb.w	sl, [r2, #1]
 801e9e2:	fb01 cc0a 	mla	ip, r1, sl, ip
 801e9e6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801e9ea:	fb09 cc0a 	mla	ip, r9, sl, ip
 801e9ee:	f896 a001 	ldrb.w	sl, [r6, #1]
 801e9f2:	fb1a fa03 	smulbb	sl, sl, r3
 801e9f6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801e9fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9fc:	fb0c ac05 	mla	ip, ip, r5, sl
 801ea00:	fa1f fc8c 	uxth.w	ip, ip
 801ea04:	f10c 0a01 	add.w	sl, ip, #1
 801ea08:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801ea0c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ea10:	f886 c001 	strb.w	ip, [r6, #1]
 801ea14:	78bf      	ldrb	r7, [r7, #2]
 801ea16:	f89e c002 	ldrb.w	ip, [lr, #2]
 801ea1a:	437b      	muls	r3, r7
 801ea1c:	fb08 330c 	mla	r3, r8, ip, r3
 801ea20:	f892 c002 	ldrb.w	ip, [r2, #2]
 801ea24:	7882      	ldrb	r2, [r0, #2]
 801ea26:	fb01 310c 	mla	r1, r1, ip, r3
 801ea2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea2c:	fb09 1902 	mla	r9, r9, r2, r1
 801ea30:	78b1      	ldrb	r1, [r6, #2]
 801ea32:	fb11 f103 	smulbb	r1, r1, r3
 801ea36:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ea3a:	fb09 1505 	mla	r5, r9, r5, r1
 801ea3e:	b2ad      	uxth	r5, r5
 801ea40:	1c6b      	adds	r3, r5, #1
 801ea42:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ea46:	122d      	asrs	r5, r5, #8
 801ea48:	70b5      	strb	r5, [r6, #2]
 801ea4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea4c:	3603      	adds	r6, #3
 801ea4e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801ea50:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea54:	4413      	add	r3, r2
 801ea56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ea58:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea5a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ea5c:	4413      	add	r3, r2
 801ea5e:	931e      	str	r3, [sp, #120]	@ 0x78
 801ea60:	e73b      	b.n	801e8da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ea62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea64:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801ea66:	4433      	add	r3, r6
 801ea68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ea6a:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea6c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ea6e:	4433      	add	r3, r6
 801ea70:	931e      	str	r3, [sp, #120]	@ 0x78
 801ea72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea74:	3b01      	subs	r3, #1
 801ea76:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ea7a:	3303      	adds	r3, #3
 801ea7c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ea7e:	e70d      	b.n	801e89c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ea80:	d028      	beq.n	801ead4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ea82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea84:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801ea86:	3b01      	subs	r3, #1
 801ea88:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ea8a:	fb00 5003 	mla	r0, r0, r3, r5
 801ea8e:	1400      	asrs	r0, r0, #16
 801ea90:	f53f af21 	bmi.w	801e8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea94:	3901      	subs	r1, #1
 801ea96:	4288      	cmp	r0, r1
 801ea98:	f6bf af1d 	bge.w	801e8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ea9c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801ea9e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801eaa0:	fb01 0303 	mla	r3, r1, r3, r0
 801eaa4:	141b      	asrs	r3, r3, #16
 801eaa6:	f53f af16 	bmi.w	801e8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eaaa:	3a01      	subs	r2, #1
 801eaac:	4293      	cmp	r3, r2
 801eaae:	f6bf af12 	bge.w	801e8d6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eab4:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801eab8:	1cdf      	adds	r7, r3, #3
 801eaba:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801eabe:	f1b9 0f00 	cmp.w	r9, #0
 801eac2:	dc73      	bgt.n	801ebac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801eac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eacc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ead0:	441a      	add	r2, r3
 801ead2:	920a      	str	r2, [sp, #40]	@ 0x28
 801ead4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	f340 8129 	ble.w	801ed2e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801eadc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eae0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eae6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eaea:	eef0 6a62 	vmov.f32	s13, s5
 801eaee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801eaf2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eaf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eafa:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801eafe:	eef0 6a43 	vmov.f32	s13, s6
 801eb02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801eb06:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801eb0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb0e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb12:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb22:	ee12 2a90 	vmov	r2, s5
 801eb26:	eef0 2a47 	vmov.f32	s5, s14
 801eb2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb2e:	ee13 2a10 	vmov	r2, s6
 801eb32:	931f      	str	r3, [sp, #124]	@ 0x7c
 801eb34:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eb36:	eeb0 3a67 	vmov.f32	s6, s15
 801eb3a:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb3e:	9320      	str	r3, [sp, #128]	@ 0x80
 801eb40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb42:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eb44:	3b01      	subs	r3, #1
 801eb46:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb48:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eb4a:	bf08      	it	eq
 801eb4c:	4613      	moveq	r3, r2
 801eb4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb50:	e696      	b.n	801e880 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801eb52:	b149      	cbz	r1, 801eb68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801eb54:	5caa      	ldrb	r2, [r5, r2]
 801eb56:	4670      	mov	r0, lr
 801eb58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb5c:	4422      	add	r2, r4
 801eb5e:	4677      	mov	r7, lr
 801eb60:	e6fb      	b.n	801e95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801eb62:	4670      	mov	r0, lr
 801eb64:	4672      	mov	r2, lr
 801eb66:	e6f8      	b.n	801e95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801eb68:	4670      	mov	r0, lr
 801eb6a:	4672      	mov	r2, lr
 801eb6c:	e7f7      	b.n	801eb5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801eb6e:	f110 0c01 	adds.w	ip, r0, #1
 801eb72:	f53f af6a 	bmi.w	801ea4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb76:	4562      	cmp	r2, ip
 801eb78:	f6ff af67 	blt.w	801ea4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb7c:	f115 0c01 	adds.w	ip, r5, #1
 801eb80:	f53f af63 	bmi.w	801ea4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb84:	4567      	cmp	r7, ip
 801eb86:	f6ff af60 	blt.w	801ea4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801eb8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb8c:	b23f      	sxth	r7, r7
 801eb8e:	b212      	sxth	r2, r2
 801eb90:	9002      	str	r0, [sp, #8]
 801eb92:	9701      	str	r7, [sp, #4]
 801eb94:	9200      	str	r2, [sp, #0]
 801eb96:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801eb98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb9a:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801eb9e:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801eba2:	4623      	mov	r3, r4
 801eba4:	4631      	mov	r1, r6
 801eba6:	f7ff fd69 	bl	801e67c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801ebaa:	e74e      	b.n	801ea4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ebac:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ebae:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801ebb0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ebb4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ebb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ebb8:	1400      	asrs	r0, r0, #16
 801ebba:	142d      	asrs	r5, r5, #16
 801ebbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ebbe:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801ebc2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ebc6:	fb02 5000 	mla	r0, r2, r0, r5
 801ebca:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801ebcc:	f815 e000 	ldrb.w	lr, [r5, r0]
 801ebd0:	eb05 0c00 	add.w	ip, r5, r0
 801ebd4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ebd8:	eb04 060e 	add.w	r6, r4, lr
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	f000 8097 	beq.w	801ed10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801ebe2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ebe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ebea:	4425      	add	r5, r4
 801ebec:	2900      	cmp	r1, #0
 801ebee:	f000 8098 	beq.w	801ed22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801ebf2:	eb0c 0002 	add.w	r0, ip, r2
 801ebf6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ebfa:	7840      	ldrb	r0, [r0, #1]
 801ebfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ec00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ec04:	4422      	add	r2, r4
 801ec06:	4420      	add	r0, r4
 801ec08:	b29b      	uxth	r3, r3
 801ec0a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ec0e:	b289      	uxth	r1, r1
 801ec10:	f895 e000 	ldrb.w	lr, [r5]
 801ec14:	3703      	adds	r7, #3
 801ec16:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec1a:	fb03 f801 	mul.w	r8, r3, r1
 801ec1e:	011b      	lsls	r3, r3, #4
 801ec20:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ec24:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801ec28:	eba3 0308 	sub.w	r3, r3, r8
 801ec2c:	b289      	uxth	r1, r1
 801ec2e:	b29b      	uxth	r3, r3
 801ec30:	ebac 0c01 	sub.w	ip, ip, r1
 801ec34:	fb03 fe0e 	mul.w	lr, r3, lr
 801ec38:	fa1f fc8c 	uxth.w	ip, ip
 801ec3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec40:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ec44:	f892 b000 	ldrb.w	fp, [r2]
 801ec48:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ec4c:	f890 b000 	ldrb.w	fp, [r0]
 801ec50:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ec54:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ec58:	fb1b fb03 	smulbb	fp, fp, r3
 801ec5c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ec60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec62:	fb0e be0a 	mla	lr, lr, sl, fp
 801ec66:	fa1f fe8e 	uxth.w	lr, lr
 801ec6a:	f10e 0b01 	add.w	fp, lr, #1
 801ec6e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ec72:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ec76:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ec7a:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ec7e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ec82:	fb03 fe0e 	mul.w	lr, r3, lr
 801ec86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ec88:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ec8c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ec90:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ec94:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ec98:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ec9c:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801eca0:	fb1b fb03 	smulbb	fp, fp, r3
 801eca4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801eca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ecaa:	fb0e be0a 	mla	lr, lr, sl, fp
 801ecae:	fa1f fe8e 	uxth.w	lr, lr
 801ecb2:	f10e 0b01 	add.w	fp, lr, #1
 801ecb6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ecba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ecbe:	f807 ec05 	strb.w	lr, [r7, #-5]
 801ecc2:	78ad      	ldrb	r5, [r5, #2]
 801ecc4:	78b6      	ldrb	r6, [r6, #2]
 801ecc6:	436b      	muls	r3, r5
 801ecc8:	7895      	ldrb	r5, [r2, #2]
 801ecca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801eccc:	fb0c 3306 	mla	r3, ip, r6, r3
 801ecd0:	fb01 3305 	mla	r3, r1, r5, r3
 801ecd4:	7885      	ldrb	r5, [r0, #2]
 801ecd6:	fb08 3805 	mla	r8, r8, r5, r3
 801ecda:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801ecde:	fb13 f302 	smulbb	r3, r3, r2
 801ece2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801ece6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801ece8:	fb08 380a 	mla	r8, r8, sl, r3
 801ecec:	fa1f f888 	uxth.w	r8, r8
 801ecf0:	f108 0301 	add.w	r3, r8, #1
 801ecf4:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801ecf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ecfa:	4413      	add	r3, r2
 801ecfc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ecfe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ed02:	931d      	str	r3, [sp, #116]	@ 0x74
 801ed04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ed06:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ed0a:	4413      	add	r3, r2
 801ed0c:	931e      	str	r3, [sp, #120]	@ 0x78
 801ed0e:	e6d6      	b.n	801eabe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ed10:	b151      	cbz	r1, 801ed28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ed12:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ed16:	4630      	mov	r0, r6
 801ed18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ed1c:	4422      	add	r2, r4
 801ed1e:	4635      	mov	r5, r6
 801ed20:	e772      	b.n	801ec08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ed22:	4630      	mov	r0, r6
 801ed24:	4632      	mov	r2, r6
 801ed26:	e76f      	b.n	801ec08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ed28:	4630      	mov	r0, r6
 801ed2a:	4632      	mov	r2, r6
 801ed2c:	e7f7      	b.n	801ed1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ed2e:	b013      	add	sp, #76	@ 0x4c
 801ed30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ed34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ed38:	784c      	ldrb	r4, [r1, #1]
 801ed3a:	f891 a002 	ldrb.w	sl, [r1, #2]
 801ed3e:	0224      	lsls	r4, r4, #8
 801ed40:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ed44:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801ed48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ed4c:	f891 a000 	ldrb.w	sl, [r1]
 801ed50:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801ed54:	ea44 040a 	orr.w	r4, r4, sl
 801ed58:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801ed5c:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801ed60:	9401      	str	r4, [sp, #4]
 801ed62:	fb05 c70e 	mla	r7, r5, lr, ip
 801ed66:	2d00      	cmp	r5, #0
 801ed68:	eb02 0807 	add.w	r8, r2, r7
 801ed6c:	db72      	blt.n	801ee54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ed6e:	45a9      	cmp	r9, r5
 801ed70:	dd70      	ble.n	801ee54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ed72:	f1bc 0f00 	cmp.w	ip, #0
 801ed76:	db6b      	blt.n	801ee50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ed78:	45e6      	cmp	lr, ip
 801ed7a:	dd69      	ble.n	801ee50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ed7c:	5dd7      	ldrb	r7, [r2, r7]
 801ed7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed82:	441f      	add	r7, r3
 801ed84:	f11c 0201 	adds.w	r2, ip, #1
 801ed88:	d467      	bmi.n	801ee5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ed8a:	4596      	cmp	lr, r2
 801ed8c:	dd65      	ble.n	801ee5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ed8e:	2800      	cmp	r0, #0
 801ed90:	d063      	beq.n	801ee5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ed92:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ed96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ed9a:	441c      	add	r4, r3
 801ed9c:	3501      	adds	r5, #1
 801ed9e:	d460      	bmi.n	801ee62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801eda0:	45a9      	cmp	r9, r5
 801eda2:	dd5e      	ble.n	801ee62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801eda4:	2e00      	cmp	r6, #0
 801eda6:	d05c      	beq.n	801ee62 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801eda8:	f1bc 0f00 	cmp.w	ip, #0
 801edac:	db57      	blt.n	801ee5e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801edae:	45e6      	cmp	lr, ip
 801edb0:	dd55      	ble.n	801ee5e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801edb2:	f818 500e 	ldrb.w	r5, [r8, lr]
 801edb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801edba:	441d      	add	r5, r3
 801edbc:	f11c 0201 	adds.w	r2, ip, #1
 801edc0:	d452      	bmi.n	801ee68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801edc2:	4596      	cmp	lr, r2
 801edc4:	dd50      	ble.n	801ee68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d04e      	beq.n	801ee68 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801edca:	44c6      	add	lr, r8
 801edcc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801edd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801edd4:	4413      	add	r3, r2
 801edd6:	b280      	uxth	r0, r0
 801edd8:	f897 8000 	ldrb.w	r8, [r7]
 801eddc:	b2b2      	uxth	r2, r6
 801edde:	fb00 f602 	mul.w	r6, r0, r2
 801ede2:	0100      	lsls	r0, r0, #4
 801ede4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ede8:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801edec:	1b80      	subs	r0, r0, r6
 801edee:	fa1f fc82 	uxth.w	ip, r2
 801edf2:	b282      	uxth	r2, r0
 801edf4:	7820      	ldrb	r0, [r4, #0]
 801edf6:	ebae 0e0c 	sub.w	lr, lr, ip
 801edfa:	4350      	muls	r0, r2
 801edfc:	fa1f fe8e 	uxth.w	lr, lr
 801ee00:	fb0e 0808 	mla	r8, lr, r8, r0
 801ee04:	7828      	ldrb	r0, [r5, #0]
 801ee06:	fb0c 8800 	mla	r8, ip, r0, r8
 801ee0a:	7818      	ldrb	r0, [r3, #0]
 801ee0c:	fb06 8000 	mla	r0, r6, r0, r8
 801ee10:	1200      	asrs	r0, r0, #8
 801ee12:	7008      	strb	r0, [r1, #0]
 801ee14:	7860      	ldrb	r0, [r4, #1]
 801ee16:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ee1a:	4350      	muls	r0, r2
 801ee1c:	fb0e 0808 	mla	r8, lr, r8, r0
 801ee20:	7868      	ldrb	r0, [r5, #1]
 801ee22:	fb0c 8800 	mla	r8, ip, r0, r8
 801ee26:	7858      	ldrb	r0, [r3, #1]
 801ee28:	fb06 8000 	mla	r0, r6, r0, r8
 801ee2c:	1200      	asrs	r0, r0, #8
 801ee2e:	7048      	strb	r0, [r1, #1]
 801ee30:	78a0      	ldrb	r0, [r4, #2]
 801ee32:	78bf      	ldrb	r7, [r7, #2]
 801ee34:	4350      	muls	r0, r2
 801ee36:	78aa      	ldrb	r2, [r5, #2]
 801ee38:	fb0e 0007 	mla	r0, lr, r7, r0
 801ee3c:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ee40:	789a      	ldrb	r2, [r3, #2]
 801ee42:	fb06 c202 	mla	r2, r6, r2, ip
 801ee46:	1212      	asrs	r2, r2, #8
 801ee48:	708a      	strb	r2, [r1, #2]
 801ee4a:	b002      	add	sp, #8
 801ee4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee50:	af01      	add	r7, sp, #4
 801ee52:	e797      	b.n	801ed84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ee54:	ac01      	add	r4, sp, #4
 801ee56:	4627      	mov	r7, r4
 801ee58:	e7a0      	b.n	801ed9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ee5a:	ac01      	add	r4, sp, #4
 801ee5c:	e79e      	b.n	801ed9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ee5e:	ad01      	add	r5, sp, #4
 801ee60:	e7ac      	b.n	801edbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801ee62:	ab01      	add	r3, sp, #4
 801ee64:	461d      	mov	r5, r3
 801ee66:	e7b6      	b.n	801edd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801ee68:	ab01      	add	r3, sp, #4
 801ee6a:	e7b4      	b.n	801edd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801ee6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ee6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee70:	b08d      	sub	sp, #52	@ 0x34
 801ee72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee76:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801ee7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ee7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ee7e:	9306      	str	r3, [sp, #24]
 801ee80:	6850      	ldr	r0, [r2, #4]
 801ee82:	6812      	ldr	r2, [r2, #0]
 801ee84:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ee86:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801ee8a:	fb00 1303 	mla	r3, r0, r3, r1
 801ee8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ee92:	18d3      	adds	r3, r2, r3
 801ee94:	9307      	str	r3, [sp, #28]
 801ee96:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	9308      	str	r3, [sp, #32]
 801ee9c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ee9e:	685d      	ldr	r5, [r3, #4]
 801eea0:	3504      	adds	r5, #4
 801eea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eea4:	2b00      	cmp	r3, #0
 801eea6:	dc03      	bgt.n	801eeb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801eea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	f340 81e6 	ble.w	801f27c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801eeb0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801eeb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eeb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eeba:	1e48      	subs	r0, r1, #1
 801eebc:	1e56      	subs	r6, r2, #1
 801eebe:	9b06      	ldr	r3, [sp, #24]
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	f340 80bd 	ble.w	801f040 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801eec6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eec8:	1427      	asrs	r7, r4, #16
 801eeca:	ea4f 4323 	mov.w	r3, r3, asr #16
 801eece:	d406      	bmi.n	801eede <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eed0:	4287      	cmp	r7, r0
 801eed2:	da04      	bge.n	801eede <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	db02      	blt.n	801eede <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eed8:	42b3      	cmp	r3, r6
 801eeda:	f2c0 80b2 	blt.w	801f042 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801eede:	3701      	adds	r7, #1
 801eee0:	f100 80a1 	bmi.w	801f026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801eee4:	42b9      	cmp	r1, r7
 801eee6:	f2c0 809e 	blt.w	801f026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801eeea:	3301      	adds	r3, #1
 801eeec:	f100 809b 	bmi.w	801f026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801eef0:	429a      	cmp	r2, r3
 801eef2:	f2c0 8098 	blt.w	801f026 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801eef6:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801eefa:	f1bb 0f00 	cmp.w	fp, #0
 801eefe:	f340 80bf 	ble.w	801f080 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef02:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ef04:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801ef06:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ef08:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ef0c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801ef10:	1420      	asrs	r0, r4, #16
 801ef12:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ef14:	ea4f 4723 	mov.w	r7, r3, asr #16
 801ef18:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ef1c:	6892      	ldr	r2, [r2, #8]
 801ef1e:	f100 8103 	bmi.w	801f128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef22:	f102 3eff 	add.w	lr, r2, #4294967295
 801ef26:	4570      	cmp	r0, lr
 801ef28:	f280 80fe 	bge.w	801f128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef2c:	2f00      	cmp	r7, #0
 801ef2e:	f2c0 80fb 	blt.w	801f128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef32:	f10c 3eff 	add.w	lr, ip, #4294967295
 801ef36:	4577      	cmp	r7, lr
 801ef38:	f280 80f6 	bge.w	801f128 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ef3c:	b212      	sxth	r2, r2
 801ef3e:	fb07 0002 	mla	r0, r7, r2, r0
 801ef42:	9f08      	ldr	r7, [sp, #32]
 801ef44:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ef48:	eb07 0e00 	add.w	lr, r7, r0
 801ef4c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ef50:	eb05 0c08 	add.w	ip, r5, r8
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	f000 80d8 	beq.w	801f10a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ef5a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801ef5e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ef62:	442f      	add	r7, r5
 801ef64:	2900      	cmp	r1, #0
 801ef66:	f000 80d9 	beq.w	801f11c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ef6a:	eb0e 0002 	add.w	r0, lr, r2
 801ef6e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ef72:	7840      	ldrb	r0, [r0, #1]
 801ef74:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ef78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ef7c:	442a      	add	r2, r5
 801ef7e:	4428      	add	r0, r5
 801ef80:	b29b      	uxth	r3, r3
 801ef82:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ef86:	b289      	uxth	r1, r1
 801ef88:	f897 8000 	ldrb.w	r8, [r7]
 801ef8c:	fb03 f901 	mul.w	r9, r3, r1
 801ef90:	011b      	lsls	r3, r3, #4
 801ef92:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ef96:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ef9a:	eba3 0309 	sub.w	r3, r3, r9
 801ef9e:	b289      	uxth	r1, r1
 801efa0:	b29b      	uxth	r3, r3
 801efa2:	ebae 0e01 	sub.w	lr, lr, r1
 801efa6:	fb03 f808 	mul.w	r8, r3, r8
 801efaa:	fa1f fe8e 	uxth.w	lr, lr
 801efae:	fb0e 880a 	mla	r8, lr, sl, r8
 801efb2:	f892 a000 	ldrb.w	sl, [r2]
 801efb6:	fb01 880a 	mla	r8, r1, sl, r8
 801efba:	f890 a000 	ldrb.w	sl, [r0]
 801efbe:	fb09 880a 	mla	r8, r9, sl, r8
 801efc2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801efc6:	f886 8000 	strb.w	r8, [r6]
 801efca:	f897 8001 	ldrb.w	r8, [r7, #1]
 801efce:	f89c a001 	ldrb.w	sl, [ip, #1]
 801efd2:	fb03 f808 	mul.w	r8, r3, r8
 801efd6:	fb0e 880a 	mla	r8, lr, sl, r8
 801efda:	f892 a001 	ldrb.w	sl, [r2, #1]
 801efde:	fb01 880a 	mla	r8, r1, sl, r8
 801efe2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801efe6:	fb09 880a 	mla	r8, r9, sl, r8
 801efea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801efee:	f886 8001 	strb.w	r8, [r6, #1]
 801eff2:	78bf      	ldrb	r7, [r7, #2]
 801eff4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801eff8:	437b      	muls	r3, r7
 801effa:	7892      	ldrb	r2, [r2, #2]
 801effc:	fb0e 330c 	mla	r3, lr, ip, r3
 801f000:	fb01 3102 	mla	r1, r1, r2, r3
 801f004:	7882      	ldrb	r2, [r0, #2]
 801f006:	fb09 1902 	mla	r9, r9, r2, r1
 801f00a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f00e:	f886 9002 	strb.w	r9, [r6, #2]
 801f012:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f014:	3603      	adds	r6, #3
 801f016:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f018:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f01c:	441c      	add	r4, r3
 801f01e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f020:	4413      	add	r3, r2
 801f022:	9318      	str	r3, [sp, #96]	@ 0x60
 801f024:	e769      	b.n	801eefa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f026:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f028:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f02a:	441c      	add	r4, r3
 801f02c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f02e:	443b      	add	r3, r7
 801f030:	9318      	str	r3, [sp, #96]	@ 0x60
 801f032:	9b06      	ldr	r3, [sp, #24]
 801f034:	3b01      	subs	r3, #1
 801f036:	9306      	str	r3, [sp, #24]
 801f038:	9b07      	ldr	r3, [sp, #28]
 801f03a:	3303      	adds	r3, #3
 801f03c:	9307      	str	r3, [sp, #28]
 801f03e:	e73e      	b.n	801eebe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f040:	d026      	beq.n	801f090 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801f042:	9b06      	ldr	r3, [sp, #24]
 801f044:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f046:	3b01      	subs	r3, #1
 801f048:	fb00 4003 	mla	r0, r0, r3, r4
 801f04c:	1400      	asrs	r0, r0, #16
 801f04e:	f53f af52 	bmi.w	801eef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f052:	3901      	subs	r1, #1
 801f054:	4288      	cmp	r0, r1
 801f056:	f6bf af4e 	bge.w	801eef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f05a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801f05c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f05e:	fb01 0303 	mla	r3, r1, r3, r0
 801f062:	141b      	asrs	r3, r3, #16
 801f064:	f53f af47 	bmi.w	801eef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f068:	3a01      	subs	r2, #1
 801f06a:	4293      	cmp	r3, r2
 801f06c:	f6bf af43 	bge.w	801eef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f070:	9b07      	ldr	r3, [sp, #28]
 801f072:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f076:	f103 0803 	add.w	r8, r3, #3
 801f07a:	f1ba 0f00 	cmp.w	sl, #0
 801f07e:	dc71      	bgt.n	801f164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f080:	9b06      	ldr	r3, [sp, #24]
 801f082:	9a07      	ldr	r2, [sp, #28]
 801f084:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f08c:	441a      	add	r2, r3
 801f08e:	9207      	str	r2, [sp, #28]
 801f090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f092:	2b00      	cmp	r3, #0
 801f094:	f340 80f2 	ble.w	801f27c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801f098:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f09c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f09e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0a2:	eeb0 6a62 	vmov.f32	s12, s5
 801f0a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0b2:	ee16 4a10 	vmov	r4, s12
 801f0b6:	eeb0 6a43 	vmov.f32	s12, s6
 801f0ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0be:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801f0c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0da:	ee12 2a90 	vmov	r2, s5
 801f0de:	eef0 2a47 	vmov.f32	s5, s14
 801f0e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0e6:	ee13 2a10 	vmov	r2, s6
 801f0ea:	9319      	str	r3, [sp, #100]	@ 0x64
 801f0ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f0ee:	eeb0 3a67 	vmov.f32	s6, s15
 801f0f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f0f6:	931a      	str	r3, [sp, #104]	@ 0x68
 801f0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0fc:	3b01      	subs	r3, #1
 801f0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801f100:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f102:	bf08      	it	eq
 801f104:	4613      	moveq	r3, r2
 801f106:	9306      	str	r3, [sp, #24]
 801f108:	e6cb      	b.n	801eea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f10a:	b151      	cbz	r1, 801f122 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801f10c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801f110:	4660      	mov	r0, ip
 801f112:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f116:	442a      	add	r2, r5
 801f118:	4667      	mov	r7, ip
 801f11a:	e731      	b.n	801ef80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f11c:	4660      	mov	r0, ip
 801f11e:	4662      	mov	r2, ip
 801f120:	e72e      	b.n	801ef80 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f122:	4660      	mov	r0, ip
 801f124:	4662      	mov	r2, ip
 801f126:	e7f7      	b.n	801f118 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801f128:	f110 0e01 	adds.w	lr, r0, #1
 801f12c:	f53f af71 	bmi.w	801f012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f130:	4572      	cmp	r2, lr
 801f132:	f6ff af6e 	blt.w	801f012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f136:	f117 0e01 	adds.w	lr, r7, #1
 801f13a:	f53f af6a 	bmi.w	801f012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f13e:	45f4      	cmp	ip, lr
 801f140:	f6ff af67 	blt.w	801f012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f144:	b212      	sxth	r2, r2
 801f146:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801f14a:	fa0f f38c 	sxth.w	r3, ip
 801f14e:	9200      	str	r2, [sp, #0]
 801f150:	4631      	mov	r1, r6
 801f152:	9a08      	ldr	r2, [sp, #32]
 801f154:	9301      	str	r3, [sp, #4]
 801f156:	462b      	mov	r3, r5
 801f158:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801f15c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801f15e:	f7ff fde9 	bl	801ed34 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801f162:	e756      	b.n	801f012 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801f164:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f166:	1426      	asrs	r6, r4, #16
 801f168:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801f16a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801f16e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f172:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f174:	1400      	asrs	r0, r0, #16
 801f176:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f17a:	fb02 6000 	mla	r0, r2, r0, r6
 801f17e:	9e08      	ldr	r6, [sp, #32]
 801f180:	f816 e000 	ldrb.w	lr, [r6, r0]
 801f184:	eb06 0c00 	add.w	ip, r6, r0
 801f188:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f18c:	eb05 070e 	add.w	r7, r5, lr
 801f190:	2b00      	cmp	r3, #0
 801f192:	d064      	beq.n	801f25e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801f194:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801f198:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f19c:	442e      	add	r6, r5
 801f19e:	2900      	cmp	r1, #0
 801f1a0:	d066      	beq.n	801f270 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801f1a2:	eb0c 0002 	add.w	r0, ip, r2
 801f1a6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f1aa:	7840      	ldrb	r0, [r0, #1]
 801f1ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f1b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1b4:	442a      	add	r2, r5
 801f1b6:	4428      	add	r0, r5
 801f1b8:	b29b      	uxth	r3, r3
 801f1ba:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801f1be:	b289      	uxth	r1, r1
 801f1c0:	f896 e000 	ldrb.w	lr, [r6]
 801f1c4:	f108 0803 	add.w	r8, r8, #3
 801f1c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f1cc:	fb03 f901 	mul.w	r9, r3, r1
 801f1d0:	011b      	lsls	r3, r3, #4
 801f1d2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f1d6:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801f1da:	eba3 0309 	sub.w	r3, r3, r9
 801f1de:	b289      	uxth	r1, r1
 801f1e0:	b29b      	uxth	r3, r3
 801f1e2:	ebac 0c01 	sub.w	ip, ip, r1
 801f1e6:	fb03 fe0e 	mul.w	lr, r3, lr
 801f1ea:	fa1f fc8c 	uxth.w	ip, ip
 801f1ee:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f1f2:	f892 b000 	ldrb.w	fp, [r2]
 801f1f6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f1fa:	f890 b000 	ldrb.w	fp, [r0]
 801f1fe:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f202:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f206:	f808 ec06 	strb.w	lr, [r8, #-6]
 801f20a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801f20e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801f212:	fb03 fe0e 	mul.w	lr, r3, lr
 801f216:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f21a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801f21e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f222:	f890 b001 	ldrb.w	fp, [r0, #1]
 801f226:	fb09 ee0b 	mla	lr, r9, fp, lr
 801f22a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f22e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801f232:	78b6      	ldrb	r6, [r6, #2]
 801f234:	78bf      	ldrb	r7, [r7, #2]
 801f236:	4373      	muls	r3, r6
 801f238:	7896      	ldrb	r6, [r2, #2]
 801f23a:	7882      	ldrb	r2, [r0, #2]
 801f23c:	fb0c 3307 	mla	r3, ip, r7, r3
 801f240:	fb01 3306 	mla	r3, r1, r6, r3
 801f244:	fb09 3902 	mla	r9, r9, r2, r3
 801f248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f24a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f24c:	441c      	add	r4, r3
 801f24e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f250:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f254:	4413      	add	r3, r2
 801f256:	f808 9c04 	strb.w	r9, [r8, #-4]
 801f25a:	9318      	str	r3, [sp, #96]	@ 0x60
 801f25c:	e70d      	b.n	801f07a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801f25e:	b151      	cbz	r1, 801f276 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801f260:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f264:	4638      	mov	r0, r7
 801f266:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f26a:	442a      	add	r2, r5
 801f26c:	463e      	mov	r6, r7
 801f26e:	e7a3      	b.n	801f1b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f270:	4638      	mov	r0, r7
 801f272:	463a      	mov	r2, r7
 801f274:	e7a0      	b.n	801f1b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801f276:	4638      	mov	r0, r7
 801f278:	463a      	mov	r2, r7
 801f27a:	e7f7      	b.n	801f26c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801f27c:	b00d      	add	sp, #52	@ 0x34
 801f27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f282 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801f282:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f286:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801f28a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801f28e:	2d00      	cmp	r5, #0
 801f290:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801f294:	fb05 700c 	mla	r0, r5, ip, r7
 801f298:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801f29c:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801f2a0:	eb02 0800 	add.w	r8, r2, r0
 801f2a4:	f2c0 8118 	blt.w	801f4d8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f2a8:	45a9      	cmp	r9, r5
 801f2aa:	f340 8115 	ble.w	801f4d8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801f2ae:	2f00      	cmp	r7, #0
 801f2b0:	f2c0 8110 	blt.w	801f4d4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f2b4:	45bc      	cmp	ip, r7
 801f2b6:	f340 810d 	ble.w	801f4d4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801f2ba:	5c12      	ldrb	r2, [r2, r0]
 801f2bc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f2c0:	1c7a      	adds	r2, r7, #1
 801f2c2:	f100 810c 	bmi.w	801f4de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f2c6:	4594      	cmp	ip, r2
 801f2c8:	f340 8109 	ble.w	801f4de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801f2cc:	2c00      	cmp	r4, #0
 801f2ce:	f000 8108 	beq.w	801f4e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801f2d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f2d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801f2da:	3501      	adds	r5, #1
 801f2dc:	f100 8105 	bmi.w	801f4ea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f2e0:	45a9      	cmp	r9, r5
 801f2e2:	f340 8102 	ble.w	801f4ea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801f2e6:	f1be 0f00 	cmp.w	lr, #0
 801f2ea:	f000 8101 	beq.w	801f4f0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801f2ee:	2f00      	cmp	r7, #0
 801f2f0:	f2c0 80f9 	blt.w	801f4e6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f2f4:	45bc      	cmp	ip, r7
 801f2f6:	f340 80f6 	ble.w	801f4e6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801f2fa:	f818 200c 	ldrb.w	r2, [r8, ip]
 801f2fe:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f302:	3701      	adds	r7, #1
 801f304:	f100 80f7 	bmi.w	801f4f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f308:	45bc      	cmp	ip, r7
 801f30a:	f340 80f4 	ble.w	801f4f6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801f30e:	2c00      	cmp	r4, #0
 801f310:	f000 80f3 	beq.w	801f4fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801f314:	44c4      	add	ip, r8
 801f316:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801f31a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801f31e:	fa1f fc84 	uxth.w	ip, r4
 801f322:	fa1f f48e 	uxth.w	r4, lr
 801f326:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801f32a:	fb04 fe0c 	mul.w	lr, r4, ip
 801f32e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f332:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801f336:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801f33a:	ebac 070e 	sub.w	r7, ip, lr
 801f33e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f342:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801f346:	b2a4      	uxth	r4, r4
 801f348:	b2bf      	uxth	r7, r7
 801f34a:	1b1b      	subs	r3, r3, r4
 801f34c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f350:	fb07 fc0a 	mul.w	ip, r7, sl
 801f354:	b29b      	uxth	r3, r3
 801f356:	fb03 cc0b 	mla	ip, r3, fp, ip
 801f35a:	9300      	str	r3, [sp, #0]
 801f35c:	fb04 cc09 	mla	ip, r4, r9, ip
 801f360:	fb0e cc08 	mla	ip, lr, r8, ip
 801f364:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f368:	9301      	str	r3, [sp, #4]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	f000 80af 	beq.w	801f4ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801f370:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801f374:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f378:	fb0b fc0c 	mul.w	ip, fp, ip
 801f37c:	fb0b f606 	mul.w	r6, fp, r6
 801f380:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f384:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f388:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801f38c:	44dc      	add	ip, fp
 801f38e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801f392:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f396:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f39a:	fb0a fb0b 	mul.w	fp, sl, fp
 801f39e:	fb0a fa00 	mul.w	sl, sl, r0
 801f3a2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801f3a6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f3aa:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801f3ae:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f3b2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801f3b6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f3ba:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801f3be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f3c2:	0a36      	lsrs	r6, r6, #8
 801f3c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f3c8:	44dc      	add	ip, fp
 801f3ca:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801f3ce:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f3d2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f3d6:	fb09 fb0b 	mul.w	fp, r9, fp
 801f3da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f3de:	fb09 f905 	mul.w	r9, r9, r5
 801f3e2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801f3e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f3ea:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801f3ee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f3f2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f3f6:	fb0c fc07 	mul.w	ip, ip, r7
 801f3fa:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801f3fe:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801f402:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f406:	4458      	add	r0, fp
 801f408:	fb08 f505 	mul.w	r5, r8, r5
 801f40c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f410:	fb08 f802 	mul.w	r8, r8, r2
 801f414:	0a00      	lsrs	r0, r0, #8
 801f416:	0a2a      	lsrs	r2, r5, #8
 801f418:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801f41c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f420:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801f424:	4415      	add	r5, r2
 801f426:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801f42a:	0a2d      	lsrs	r5, r5, #8
 801f42c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f430:	9a00      	ldr	r2, [sp, #0]
 801f432:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801f436:	fb03 cc02 	mla	ip, r3, r2, ip
 801f43a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f43e:	9b01      	ldr	r3, [sp, #4]
 801f440:	fb05 c50e 	mla	r5, r5, lr, ip
 801f444:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801f448:	fb00 5004 	mla	r0, r0, r4, r5
 801f44c:	0a00      	lsrs	r0, r0, #8
 801f44e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801f452:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801f456:	4378      	muls	r0, r7
 801f458:	fb02 0006 	mla	r0, r2, r6, r0
 801f45c:	fb0e 0e08 	mla	lr, lr, r8, r0
 801f460:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801f464:	fb04 e000 	mla	r0, r4, r0, lr
 801f468:	0a00      	lsrs	r0, r0, #8
 801f46a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f46e:	4328      	orrs	r0, r5
 801f470:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801f474:	b2ad      	uxth	r5, r5
 801f476:	b2c4      	uxtb	r4, r0
 801f478:	436b      	muls	r3, r5
 801f47a:	fb14 f405 	smulbb	r4, r4, r5
 801f47e:	1c5a      	adds	r2, r3, #1
 801f480:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f484:	780b      	ldrb	r3, [r1, #0]
 801f486:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801f48a:	b2d2      	uxtb	r2, r2
 801f48c:	fb03 4302 	mla	r3, r3, r2, r4
 801f490:	b29b      	uxth	r3, r3
 801f492:	1c5c      	adds	r4, r3, #1
 801f494:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f498:	784c      	ldrb	r4, [r1, #1]
 801f49a:	fb14 f402 	smulbb	r4, r4, r2
 801f49e:	121b      	asrs	r3, r3, #8
 801f4a0:	700b      	strb	r3, [r1, #0]
 801f4a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801f4a6:	fb03 4305 	mla	r3, r3, r5, r4
 801f4aa:	b29b      	uxth	r3, r3
 801f4ac:	1c5c      	adds	r4, r3, #1
 801f4ae:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801f4b2:	0c04      	lsrs	r4, r0, #16
 801f4b4:	7888      	ldrb	r0, [r1, #2]
 801f4b6:	121b      	asrs	r3, r3, #8
 801f4b8:	fb10 f002 	smulbb	r0, r0, r2
 801f4bc:	704b      	strb	r3, [r1, #1]
 801f4be:	fb04 0005 	mla	r0, r4, r5, r0
 801f4c2:	b280      	uxth	r0, r0
 801f4c4:	1c43      	adds	r3, r0, #1
 801f4c6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f4ca:	1200      	asrs	r0, r0, #8
 801f4cc:	7088      	strb	r0, [r1, #2]
 801f4ce:	b003      	add	sp, #12
 801f4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4d4:	2600      	movs	r6, #0
 801f4d6:	e6f3      	b.n	801f2c0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801f4d8:	2000      	movs	r0, #0
 801f4da:	4606      	mov	r6, r0
 801f4dc:	e6fd      	b.n	801f2da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f4de:	2000      	movs	r0, #0
 801f4e0:	e6fb      	b.n	801f2da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f4e2:	4620      	mov	r0, r4
 801f4e4:	e6f9      	b.n	801f2da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801f4e6:	2500      	movs	r5, #0
 801f4e8:	e70b      	b.n	801f302 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801f4ea:	2200      	movs	r2, #0
 801f4ec:	4615      	mov	r5, r2
 801f4ee:	e716      	b.n	801f31e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f4f0:	4672      	mov	r2, lr
 801f4f2:	4675      	mov	r5, lr
 801f4f4:	e713      	b.n	801f31e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f4f6:	2200      	movs	r2, #0
 801f4f8:	e711      	b.n	801f31e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801f4fa:	4622      	mov	r2, r4
 801f4fc:	e70f      	b.n	801f31e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801f4fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f502:	b09f      	sub	sp, #124	@ 0x7c
 801f504:	921b      	str	r2, [sp, #108]	@ 0x6c
 801f506:	9309      	str	r3, [sp, #36]	@ 0x24
 801f508:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801f50a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801f50e:	901d      	str	r0, [sp, #116]	@ 0x74
 801f510:	931c      	str	r3, [sp, #112]	@ 0x70
 801f512:	6850      	ldr	r0, [r2, #4]
 801f514:	9119      	str	r1, [sp, #100]	@ 0x64
 801f516:	6812      	ldr	r2, [r2, #0]
 801f518:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801f51a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801f51e:	fb00 1303 	mla	r3, r0, r3, r1
 801f522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f526:	18d3      	adds	r3, r2, r3
 801f528:	930c      	str	r3, [sp, #48]	@ 0x30
 801f52a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f52c:	681b      	ldr	r3, [r3, #0]
 801f52e:	9312      	str	r3, [sp, #72]	@ 0x48
 801f530:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f532:	685e      	ldr	r6, [r3, #4]
 801f534:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801f538:	3604      	adds	r6, #4
 801f53a:	930d      	str	r3, [sp, #52]	@ 0x34
 801f53c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f53e:	2b00      	cmp	r3, #0
 801f540:	dc03      	bgt.n	801f54a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f542:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f544:	2b00      	cmp	r3, #0
 801f546:	f340 8378 	ble.w	801fc3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f54a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f54c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f550:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f554:	1e48      	subs	r0, r1, #1
 801f556:	1e57      	subs	r7, r2, #1
 801f558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	f340 818c 	ble.w	801f878 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801f560:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f562:	142b      	asrs	r3, r5, #16
 801f564:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801f568:	d406      	bmi.n	801f578 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f56a:	4584      	cmp	ip, r0
 801f56c:	da04      	bge.n	801f578 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f56e:	2b00      	cmp	r3, #0
 801f570:	db02      	blt.n	801f578 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f572:	42bb      	cmp	r3, r7
 801f574:	f2c0 8181 	blt.w	801f87a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801f578:	f11c 0c01 	adds.w	ip, ip, #1
 801f57c:	f100 816f 	bmi.w	801f85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f580:	4561      	cmp	r1, ip
 801f582:	f2c0 816c 	blt.w	801f85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f586:	3301      	adds	r3, #1
 801f588:	f100 8169 	bmi.w	801f85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f58c:	429a      	cmp	r2, r3
 801f58e:	f2c0 8166 	blt.w	801f85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801f592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f594:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f596:	931a      	str	r3, [sp, #104]	@ 0x68
 801f598:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	f340 818c 	ble.w	801f8b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f5a0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f5a2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801f5a6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f5aa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f5ae:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f5b0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801f5b4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f5b6:	141b      	asrs	r3, r3, #16
 801f5b8:	f100 81d0 	bmi.w	801f95c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f5bc:	f100 38ff 	add.w	r8, r0, #4294967295
 801f5c0:	4543      	cmp	r3, r8
 801f5c2:	f280 81cb 	bge.w	801f95c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f5c6:	f1bc 0f00 	cmp.w	ip, #0
 801f5ca:	f2c0 81c7 	blt.w	801f95c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f5ce:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f5d2:	45c4      	cmp	ip, r8
 801f5d4:	f280 81c2 	bge.w	801f95c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f5d8:	b200      	sxth	r0, r0
 801f5da:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f5dc:	fb0c 3300 	mla	r3, ip, r0, r3
 801f5e0:	eb04 0803 	add.w	r8, r4, r3
 801f5e4:	5ce3      	ldrb	r3, [r4, r3]
 801f5e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f5ea:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801f5ee:	2a00      	cmp	r2, #0
 801f5f0:	f000 81a9 	beq.w	801f946 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801f5f4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f5f8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801f5fc:	940e      	str	r4, [sp, #56]	@ 0x38
 801f5fe:	0e24      	lsrs	r4, r4, #24
 801f600:	9415      	str	r4, [sp, #84]	@ 0x54
 801f602:	b179      	cbz	r1, 801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f604:	eb08 0c00 	add.w	ip, r8, r0
 801f608:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f60c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f610:	900a      	str	r0, [sp, #40]	@ 0x28
 801f612:	0e00      	lsrs	r0, r0, #24
 801f614:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f616:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f61a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f61e:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f620:	0e00      	lsrs	r0, r0, #24
 801f622:	9016      	str	r0, [sp, #88]	@ 0x58
 801f624:	b292      	uxth	r2, r2
 801f626:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f628:	b289      	uxth	r1, r1
 801f62a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f62c:	fb02 f901 	mul.w	r9, r2, r1
 801f630:	0112      	lsls	r2, r2, #4
 801f632:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f636:	eba2 0809 	sub.w	r8, r2, r9
 801f63a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801f63e:	b289      	uxth	r1, r1
 801f640:	fa1f f888 	uxth.w	r8, r8
 801f644:	1a52      	subs	r2, r2, r1
 801f646:	fb08 f000 	mul.w	r0, r8, r0
 801f64a:	b292      	uxth	r2, r2
 801f64c:	fb02 000e 	mla	r0, r2, lr, r0
 801f650:	fb01 0004 	mla	r0, r1, r4, r0
 801f654:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f656:	fb09 0004 	mla	r0, r9, r4, r0
 801f65a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f65e:	2800      	cmp	r0, #0
 801f660:	f000 80f2 	beq.w	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f664:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801f668:	d01b      	beq.n	801f6a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f66a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801f66e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f672:	fb0e fa0a 	mul.w	sl, lr, sl
 801f676:	fb0e fe03 	mul.w	lr, lr, r3
 801f67a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801f67e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801f682:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801f686:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f68a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f68e:	4453      	add	r3, sl
 801f690:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f694:	0a1b      	lsrs	r3, r3, #8
 801f696:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801f69a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f69e:	ea43 030c 	orr.w	r3, r3, ip
 801f6a2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f6a4:	2cff      	cmp	r4, #255	@ 0xff
 801f6a6:	d021      	beq.n	801f6ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f6a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f6aa:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f6ae:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f6b0:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6b4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f6b6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f6ba:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f6bc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f6c0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f6c4:	fb04 fa0a 	mul.w	sl, r4, sl
 801f6c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f6cc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f6d0:	44de      	add	lr, fp
 801f6d2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f6d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f6da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f6de:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f6e2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f6e6:	ea4e 040a 	orr.w	r4, lr, sl
 801f6ea:	940e      	str	r4, [sp, #56]	@ 0x38
 801f6ec:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f6ee:	2cff      	cmp	r4, #255	@ 0xff
 801f6f0:	d021      	beq.n	801f736 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801f6f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f6f4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f6f8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f6fa:	fb04 fb0b 	mul.w	fp, r4, fp
 801f6fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f700:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f704:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f706:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f70a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f70e:	fb04 fa0a 	mul.w	sl, r4, sl
 801f712:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f716:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f71a:	44de      	add	lr, fp
 801f71c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f720:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f724:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f728:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f72c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f730:	ea4e 040a 	orr.w	r4, lr, sl
 801f734:	940a      	str	r4, [sp, #40]	@ 0x28
 801f736:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f738:	2cff      	cmp	r4, #255	@ 0xff
 801f73a:	d021      	beq.n	801f780 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f73c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f73e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801f742:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f744:	fb04 fb0b 	mul.w	fp, r4, fp
 801f748:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f74a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f74e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801f750:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f754:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801f758:	fb04 fa0a 	mul.w	sl, r4, sl
 801f75c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f760:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f764:	44de      	add	lr, fp
 801f766:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f76a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f76e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f772:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f776:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f77a:	ea4e 040a 	orr.w	r4, lr, sl
 801f77e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801f780:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f782:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801f786:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f78a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f78e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f790:	fb08 fc0c 	mul.w	ip, r8, ip
 801f794:	fb02 cc0e 	mla	ip, r2, lr, ip
 801f798:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f79c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801f79e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f7a2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f7a6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f7a8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f7ac:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f7b0:	fb08 f80e 	mul.w	r8, r8, lr
 801f7b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f7b8:	fb02 8303 	mla	r3, r2, r3, r8
 801f7bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f7be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7c2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801f7c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f7c8:	fb01 330a 	mla	r3, r1, sl, r3
 801f7cc:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801f7d0:	fb09 3901 	mla	r9, r9, r1, r3
 801f7d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7d6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f7d8:	4343      	muls	r3, r0
 801f7da:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f7de:	1c58      	adds	r0, r3, #1
 801f7e0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801f7e4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f7e8:	ea4c 0c09 	orr.w	ip, ip, r9
 801f7ec:	783b      	ldrb	r3, [r7, #0]
 801f7ee:	fa5f f28c 	uxtb.w	r2, ip
 801f7f2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f7f6:	fb12 f201 	smulbb	r2, r2, r1
 801f7fa:	b2c0      	uxtb	r0, r0
 801f7fc:	fb03 2300 	mla	r3, r3, r0, r2
 801f800:	b29b      	uxth	r3, r3
 801f802:	1c5a      	adds	r2, r3, #1
 801f804:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f808:	787a      	ldrb	r2, [r7, #1]
 801f80a:	fb12 f200 	smulbb	r2, r2, r0
 801f80e:	121b      	asrs	r3, r3, #8
 801f810:	703b      	strb	r3, [r7, #0]
 801f812:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f816:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f81a:	fb03 2301 	mla	r3, r3, r1, r2
 801f81e:	b29b      	uxth	r3, r3
 801f820:	1c5a      	adds	r2, r3, #1
 801f822:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f826:	121b      	asrs	r3, r3, #8
 801f828:	707b      	strb	r3, [r7, #1]
 801f82a:	78bb      	ldrb	r3, [r7, #2]
 801f82c:	fb13 f000 	smulbb	r0, r3, r0
 801f830:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f834:	fa1f fc8c 	uxth.w	ip, ip
 801f838:	f10c 0301 	add.w	r3, ip, #1
 801f83c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f840:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f844:	f887 c002 	strb.w	ip, [r7, #2]
 801f848:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f84a:	3703      	adds	r7, #3
 801f84c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f84e:	441a      	add	r2, r3
 801f850:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f852:	441d      	add	r5, r3
 801f854:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f856:	9229      	str	r2, [sp, #164]	@ 0xa4
 801f858:	3b01      	subs	r3, #1
 801f85a:	931a      	str	r3, [sp, #104]	@ 0x68
 801f85c:	e69c      	b.n	801f598 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f85e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f860:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f862:	441c      	add	r4, r3
 801f864:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f866:	441d      	add	r5, r3
 801f868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f86a:	9429      	str	r4, [sp, #164]	@ 0xa4
 801f86c:	3b01      	subs	r3, #1
 801f86e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f870:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f872:	3303      	adds	r3, #3
 801f874:	930c      	str	r3, [sp, #48]	@ 0x30
 801f876:	e66f      	b.n	801f558 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f878:	d026      	beq.n	801f8c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801f87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f87c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801f87e:	3b01      	subs	r3, #1
 801f880:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f882:	fb00 4003 	mla	r0, r0, r3, r4
 801f886:	1400      	asrs	r0, r0, #16
 801f888:	f53f ae83 	bmi.w	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f88c:	3901      	subs	r1, #1
 801f88e:	4288      	cmp	r0, r1
 801f890:	f6bf ae7f 	bge.w	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f894:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f896:	fb01 5303 	mla	r3, r1, r3, r5
 801f89a:	141b      	asrs	r3, r3, #16
 801f89c:	f53f ae79 	bmi.w	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f8a0:	3a01      	subs	r2, #1
 801f8a2:	4293      	cmp	r3, r2
 801f8a4:	f6bf ae75 	bge.w	801f592 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f8a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8aa:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801f8ae:	f103 0e03 	add.w	lr, r3, #3
 801f8b2:	f1bb 0f00 	cmp.w	fp, #0
 801f8b6:	dc71      	bgt.n	801f99c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f8be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f8c4:	4423      	add	r3, r4
 801f8c6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f8ca:	2b00      	cmp	r3, #0
 801f8cc:	f340 81b5 	ble.w	801fc3a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801f8d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f8d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8de:	eef0 6a62 	vmov.f32	s13, s5
 801f8e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8ee:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801f8f2:	eef0 6a43 	vmov.f32	s13, s6
 801f8f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8fa:	ee16 5a90 	vmov	r5, s13
 801f8fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f902:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f906:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f90a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f90e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f912:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f916:	ee12 2a90 	vmov	r2, s5
 801f91a:	eef0 2a47 	vmov.f32	s5, s14
 801f91e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f922:	ee13 2a10 	vmov	r2, s6
 801f926:	932b      	str	r3, [sp, #172]	@ 0xac
 801f928:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f92a:	eeb0 3a67 	vmov.f32	s6, s15
 801f92e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f932:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f934:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f936:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801f938:	3b01      	subs	r3, #1
 801f93a:	9319      	str	r3, [sp, #100]	@ 0x64
 801f93c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f93e:	bf08      	it	eq
 801f940:	4613      	moveq	r3, r2
 801f942:	9309      	str	r3, [sp, #36]	@ 0x24
 801f944:	e5fa      	b.n	801f53c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f946:	2900      	cmp	r1, #0
 801f948:	f43f ae6c 	beq.w	801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f94c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801f950:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801f954:	900a      	str	r0, [sp, #40]	@ 0x28
 801f956:	0e00      	lsrs	r0, r0, #24
 801f958:	9013      	str	r0, [sp, #76]	@ 0x4c
 801f95a:	e663      	b.n	801f624 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f95c:	f113 0801 	adds.w	r8, r3, #1
 801f960:	f53f af72 	bmi.w	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f964:	4540      	cmp	r0, r8
 801f966:	f6ff af6f 	blt.w	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f96a:	f11c 0801 	adds.w	r8, ip, #1
 801f96e:	f53f af6b 	bmi.w	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f972:	45c6      	cmp	lr, r8
 801f974:	f6ff af68 	blt.w	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f978:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f97a:	b200      	sxth	r0, r0
 801f97c:	9302      	str	r3, [sp, #8]
 801f97e:	fa0f f38e 	sxth.w	r3, lr
 801f982:	9000      	str	r0, [sp, #0]
 801f984:	9301      	str	r3, [sp, #4]
 801f986:	4633      	mov	r3, r6
 801f988:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f98a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f98e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801f992:	4639      	mov	r1, r7
 801f994:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f996:	f7ff fc74 	bl	801f282 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801f99a:	e755      	b.n	801f848 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801f99c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801f99e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801f9a2:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801f9a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f9a8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801f9aa:	1427      	asrs	r7, r4, #16
 801f9ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f9ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f9b2:	142b      	asrs	r3, r5, #16
 801f9b4:	fb01 7303 	mla	r3, r1, r3, r7
 801f9b8:	18e7      	adds	r7, r4, r3
 801f9ba:	5ce3      	ldrb	r3, [r4, r3]
 801f9bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f9c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801f9c4:	2a00      	cmp	r2, #0
 801f9c6:	f000 812e 	beq.w	801fc26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801f9ca:	f897 8001 	ldrb.w	r8, [r7, #1]
 801f9ce:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801f9d2:	9410      	str	r4, [sp, #64]	@ 0x40
 801f9d4:	0e24      	lsrs	r4, r4, #24
 801f9d6:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f9d8:	b170      	cbz	r0, 801f9f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801f9da:	eb07 0801 	add.w	r8, r7, r1
 801f9de:	5c79      	ldrb	r1, [r7, r1]
 801f9e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f9e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f9e6:	0e09      	lsrs	r1, r1, #24
 801f9e8:	9114      	str	r1, [sp, #80]	@ 0x50
 801f9ea:	f898 1001 	ldrb.w	r1, [r8, #1]
 801f9ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801f9f2:	9111      	str	r1, [sp, #68]	@ 0x44
 801f9f4:	0e09      	lsrs	r1, r1, #24
 801f9f6:	9118      	str	r1, [sp, #96]	@ 0x60
 801f9f8:	b292      	uxth	r2, r2
 801f9fa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f9fc:	b280      	uxth	r0, r0
 801f9fe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fa00:	fb02 f900 	mul.w	r9, r2, r0
 801fa04:	0112      	lsls	r2, r2, #4
 801fa06:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fa0a:	eba2 0809 	sub.w	r8, r2, r9
 801fa0e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801fa12:	b280      	uxth	r0, r0
 801fa14:	fa1f f888 	uxth.w	r8, r8
 801fa18:	1a12      	subs	r2, r2, r0
 801fa1a:	fb08 f101 	mul.w	r1, r8, r1
 801fa1e:	b292      	uxth	r2, r2
 801fa20:	fb02 110c 	mla	r1, r2, ip, r1
 801fa24:	fb00 1104 	mla	r1, r0, r4, r1
 801fa28:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801fa2a:	fb09 1104 	mla	r1, r9, r4, r1
 801fa2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa32:	2900      	cmp	r1, #0
 801fa34:	f000 80ec 	beq.w	801fc10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801fa38:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801fa3c:	d019      	beq.n	801fa72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801fa3e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fa42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fa46:	fb0c fa0a 	mul.w	sl, ip, sl
 801fa4a:	fb0c fc03 	mul.w	ip, ip, r3
 801fa4e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fa52:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fa56:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801fa5a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fa5e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fa62:	4453      	add	r3, sl
 801fa64:	0a3f      	lsrs	r7, r7, #8
 801fa66:	0a1b      	lsrs	r3, r3, #8
 801fa68:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fa6c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fa70:	433b      	orrs	r3, r7
 801fa72:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fa74:	2cff      	cmp	r4, #255	@ 0xff
 801fa76:	d020      	beq.n	801faba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801fa78:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fa7a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fa7e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fa80:	4367      	muls	r7, r4
 801fa82:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fa84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fa88:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fa8c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fa8e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fa92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fa96:	fb04 fa0a 	mul.w	sl, r4, sl
 801fa9a:	44bc      	add	ip, r7
 801fa9c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801faa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faa4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801faa8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801faac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fab0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fab4:	ea4c 040a 	orr.w	r4, ip, sl
 801fab8:	9410      	str	r4, [sp, #64]	@ 0x40
 801faba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fabc:	2cff      	cmp	r4, #255	@ 0xff
 801fabe:	d020      	beq.n	801fb02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801fac0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fac2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fac6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fac8:	4367      	muls	r7, r4
 801faca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801facc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fad0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fad4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fad6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fada:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fade:	fb04 fa0a 	mul.w	sl, r4, sl
 801fae2:	44bc      	add	ip, r7
 801fae4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fae8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801faf0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801faf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801faf8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fafc:	ea4c 040a 	orr.w	r4, ip, sl
 801fb00:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fb02:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801fb04:	2cff      	cmp	r4, #255	@ 0xff
 801fb06:	d020      	beq.n	801fb4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801fb08:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb0a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fb0e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801fb10:	4367      	muls	r7, r4
 801fb12:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb14:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb18:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb1c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801fb1e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fb22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fb26:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb2a:	44bc      	add	ip, r7
 801fb2c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fb30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb34:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fb3c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb40:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb44:	ea4c 040a 	orr.w	r4, ip, sl
 801fb48:	9411      	str	r4, [sp, #68]	@ 0x44
 801fb4a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fb4c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801fb50:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fb54:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fb58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801fb5a:	fb08 f707 	mul.w	r7, r8, r7
 801fb5e:	fb02 770c 	mla	r7, r2, ip, r7
 801fb62:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fb66:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb68:	fb00 770c 	mla	r7, r0, ip, r7
 801fb6c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fb70:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fb72:	fb09 770c 	mla	r7, r9, ip, r7
 801fb76:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801fb7a:	fb08 f80c 	mul.w	r8, r8, ip
 801fb7e:	0a3f      	lsrs	r7, r7, #8
 801fb80:	fb02 8303 	mla	r3, r2, r3, r8
 801fb84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fb86:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801fb8a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801fb8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fb90:	fb00 330a 	mla	r3, r0, sl, r3
 801fb94:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801fb98:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801fb9a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fb9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fba0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fba4:	434b      	muls	r3, r1
 801fba6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801fbaa:	1c59      	adds	r1, r3, #1
 801fbac:	ea47 070c 	orr.w	r7, r7, ip
 801fbb0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fbb4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fbb8:	b2fa      	uxtb	r2, r7
 801fbba:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fbbe:	fb12 f200 	smulbb	r2, r2, r0
 801fbc2:	b2c9      	uxtb	r1, r1
 801fbc4:	fb03 2301 	mla	r3, r3, r1, r2
 801fbc8:	b29b      	uxth	r3, r3
 801fbca:	1c5a      	adds	r2, r3, #1
 801fbcc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbd0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fbd4:	fb12 f201 	smulbb	r2, r2, r1
 801fbd8:	121b      	asrs	r3, r3, #8
 801fbda:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fbde:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fbe2:	0c3f      	lsrs	r7, r7, #16
 801fbe4:	fb03 2300 	mla	r3, r3, r0, r2
 801fbe8:	b29b      	uxth	r3, r3
 801fbea:	1c5a      	adds	r2, r3, #1
 801fbec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fbf0:	121b      	asrs	r3, r3, #8
 801fbf2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fbf6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fbfa:	fb13 f101 	smulbb	r1, r3, r1
 801fbfe:	fb07 1700 	mla	r7, r7, r0, r1
 801fc02:	b2bf      	uxth	r7, r7
 801fc04:	1c7b      	adds	r3, r7, #1
 801fc06:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801fc0a:	123f      	asrs	r7, r7, #8
 801fc0c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fc10:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801fc12:	f10e 0e03 	add.w	lr, lr, #3
 801fc16:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801fc18:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc1c:	441a      	add	r2, r3
 801fc1e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fc20:	9229      	str	r2, [sp, #164]	@ 0xa4
 801fc22:	441d      	add	r5, r3
 801fc24:	e645      	b.n	801f8b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801fc26:	2800      	cmp	r0, #0
 801fc28:	f43f aee6 	beq.w	801f9f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fc2c:	5c79      	ldrb	r1, [r7, r1]
 801fc2e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801fc32:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fc34:	0e09      	lsrs	r1, r1, #24
 801fc36:	9114      	str	r1, [sp, #80]	@ 0x50
 801fc38:	e6de      	b.n	801f9f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801fc3a:	b01f      	add	sp, #124	@ 0x7c
 801fc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801fc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc44:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801fc48:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801fc4c:	2d00      	cmp	r5, #0
 801fc4e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801fc52:	fb05 700e 	mla	r0, r5, lr, r7
 801fc56:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801fc5a:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801fc5e:	eb02 0800 	add.w	r8, r2, r0
 801fc62:	f2c0 8105 	blt.w	801fe70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801fc66:	45a9      	cmp	r9, r5
 801fc68:	f340 8102 	ble.w	801fe70 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801fc6c:	2f00      	cmp	r7, #0
 801fc6e:	f2c0 80fd 	blt.w	801fe6c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801fc72:	45be      	cmp	lr, r7
 801fc74:	f340 80fa 	ble.w	801fe6c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801fc78:	5c12      	ldrb	r2, [r2, r0]
 801fc7a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fc7e:	1c7a      	adds	r2, r7, #1
 801fc80:	f100 80f9 	bmi.w	801fe76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801fc84:	4596      	cmp	lr, r2
 801fc86:	f340 80f6 	ble.w	801fe76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801fc8a:	2c00      	cmp	r4, #0
 801fc8c:	f000 80f5 	beq.w	801fe7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801fc90:	f898 2001 	ldrb.w	r2, [r8, #1]
 801fc94:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801fc98:	3501      	adds	r5, #1
 801fc9a:	f100 80f2 	bmi.w	801fe82 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801fc9e:	45a9      	cmp	r9, r5
 801fca0:	f340 80ef 	ble.w	801fe82 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801fca4:	f1bc 0f00 	cmp.w	ip, #0
 801fca8:	f000 80ee 	beq.w	801fe88 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801fcac:	2f00      	cmp	r7, #0
 801fcae:	f2c0 80e6 	blt.w	801fe7e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801fcb2:	45be      	cmp	lr, r7
 801fcb4:	f340 80e3 	ble.w	801fe7e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801fcb8:	f818 200e 	ldrb.w	r2, [r8, lr]
 801fcbc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801fcc0:	3701      	adds	r7, #1
 801fcc2:	f100 80e4 	bmi.w	801fe8e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801fcc6:	45be      	cmp	lr, r7
 801fcc8:	f340 80e1 	ble.w	801fe8e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801fccc:	2c00      	cmp	r4, #0
 801fcce:	f000 80e0 	beq.w	801fe92 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801fcd2:	44c6      	add	lr, r8
 801fcd4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fcd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fcdc:	b2a3      	uxth	r3, r4
 801fcde:	fa1f fc8c 	uxth.w	ip, ip
 801fce2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801fce6:	fb0c fe03 	mul.w	lr, ip, r3
 801fcea:	011b      	lsls	r3, r3, #4
 801fcec:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801fcf0:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801fcf4:	eba3 070e 	sub.w	r7, r3, lr
 801fcf8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801fcfc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801fd00:	fa1f f48c 	uxth.w	r4, ip
 801fd04:	b2bf      	uxth	r7, r7
 801fd06:	1b1b      	subs	r3, r3, r4
 801fd08:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801fd0c:	fb07 fc0a 	mul.w	ip, r7, sl
 801fd10:	b29b      	uxth	r3, r3
 801fd12:	fb03 cc0b 	mla	ip, r3, fp, ip
 801fd16:	9300      	str	r3, [sp, #0]
 801fd18:	fb04 cc09 	mla	ip, r4, r9, ip
 801fd1c:	fb0e cc08 	mla	ip, lr, r8, ip
 801fd20:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fd24:	9301      	str	r3, [sp, #4]
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	f000 809d 	beq.w	801fe66 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801fd2c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801fd30:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fd34:	fb0b fc0c 	mul.w	ip, fp, ip
 801fd38:	fb0b f606 	mul.w	r6, fp, r6
 801fd3c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801fd40:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801fd44:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801fd48:	44dc      	add	ip, fp
 801fd4a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801fd4e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fd52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd56:	fb0a fb0b 	mul.w	fp, sl, fp
 801fd5a:	fb0a fa00 	mul.w	sl, sl, r0
 801fd5e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801fd62:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801fd66:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801fd6a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fd6e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801fd72:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fd76:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801fd7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fd7e:	0a36      	lsrs	r6, r6, #8
 801fd80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd84:	44dc      	add	ip, fp
 801fd86:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801fd8a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801fd8e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801fd92:	fb09 fb0b 	mul.w	fp, r9, fp
 801fd96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd9a:	fb09 f905 	mul.w	r9, r9, r5
 801fd9e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801fda2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fda6:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801fdaa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fdae:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fdb2:	fb0c fc07 	mul.w	ip, ip, r7
 801fdb6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801fdba:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801fdbe:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fdc2:	4458      	add	r0, fp
 801fdc4:	fb08 f505 	mul.w	r5, r8, r5
 801fdc8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fdcc:	fb08 f802 	mul.w	r8, r8, r2
 801fdd0:	0a00      	lsrs	r0, r0, #8
 801fdd2:	0a2a      	lsrs	r2, r5, #8
 801fdd4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801fdd8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801fddc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fde0:	4415      	add	r5, r2
 801fde2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801fde6:	0a2d      	lsrs	r5, r5, #8
 801fde8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801fdec:	9a00      	ldr	r2, [sp, #0]
 801fdee:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801fdf2:	fb03 cc02 	mla	ip, r3, r2, ip
 801fdf6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801fdfa:	9b01      	ldr	r3, [sp, #4]
 801fdfc:	fb05 c50e 	mla	r5, r5, lr, ip
 801fe00:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801fe04:	43db      	mvns	r3, r3
 801fe06:	fb00 5004 	mla	r0, r0, r4, r5
 801fe0a:	b2db      	uxtb	r3, r3
 801fe0c:	0a00      	lsrs	r0, r0, #8
 801fe0e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801fe12:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801fe16:	4378      	muls	r0, r7
 801fe18:	fb02 0006 	mla	r0, r2, r6, r0
 801fe1c:	780a      	ldrb	r2, [r1, #0]
 801fe1e:	fb0e 0e08 	mla	lr, lr, r8, r0
 801fe22:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801fe26:	fb04 e000 	mla	r0, r4, r0, lr
 801fe2a:	fb02 f403 	mul.w	r4, r2, r3
 801fe2e:	0a00      	lsrs	r0, r0, #8
 801fe30:	1c62      	adds	r2, r4, #1
 801fe32:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801fe36:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fe3a:	4328      	orrs	r0, r5
 801fe3c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801fe40:	700a      	strb	r2, [r1, #0]
 801fe42:	784a      	ldrb	r2, [r1, #1]
 801fe44:	435a      	muls	r2, r3
 801fe46:	1c54      	adds	r4, r2, #1
 801fe48:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801fe4c:	0a02      	lsrs	r2, r0, #8
 801fe4e:	0c00      	lsrs	r0, r0, #16
 801fe50:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801fe54:	704a      	strb	r2, [r1, #1]
 801fe56:	788a      	ldrb	r2, [r1, #2]
 801fe58:	4353      	muls	r3, r2
 801fe5a:	1c5a      	adds	r2, r3, #1
 801fe5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe60:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fe64:	7088      	strb	r0, [r1, #2]
 801fe66:	b003      	add	sp, #12
 801fe68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe6c:	2600      	movs	r6, #0
 801fe6e:	e706      	b.n	801fc7e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801fe70:	2000      	movs	r0, #0
 801fe72:	4606      	mov	r6, r0
 801fe74:	e710      	b.n	801fc98 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fe76:	2000      	movs	r0, #0
 801fe78:	e70e      	b.n	801fc98 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fe7a:	4620      	mov	r0, r4
 801fe7c:	e70c      	b.n	801fc98 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801fe7e:	2500      	movs	r5, #0
 801fe80:	e71e      	b.n	801fcc0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801fe82:	2200      	movs	r2, #0
 801fe84:	4615      	mov	r5, r2
 801fe86:	e729      	b.n	801fcdc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fe88:	4662      	mov	r2, ip
 801fe8a:	4665      	mov	r5, ip
 801fe8c:	e726      	b.n	801fcdc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fe8e:	2200      	movs	r2, #0
 801fe90:	e724      	b.n	801fcdc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801fe92:	4622      	mov	r2, r4
 801fe94:	e722      	b.n	801fcdc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801fe96 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe9a:	b09b      	sub	sp, #108	@ 0x6c
 801fe9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fea0:	9218      	str	r2, [sp, #96]	@ 0x60
 801fea2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801fea4:	9019      	str	r0, [sp, #100]	@ 0x64
 801fea6:	9116      	str	r1, [sp, #88]	@ 0x58
 801fea8:	6850      	ldr	r0, [r2, #4]
 801feaa:	9307      	str	r3, [sp, #28]
 801feac:	6812      	ldr	r2, [r2, #0]
 801feae:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801feb0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801feb4:	fb00 1303 	mla	r3, r0, r3, r1
 801feb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801febc:	18d3      	adds	r3, r2, r3
 801febe:	930a      	str	r3, [sp, #40]	@ 0x28
 801fec0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fec2:	681b      	ldr	r3, [r3, #0]
 801fec4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fec6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fec8:	685e      	ldr	r6, [r3, #4]
 801feca:	3604      	adds	r6, #4
 801fecc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fece:	2b00      	cmp	r3, #0
 801fed0:	dc03      	bgt.n	801feda <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fed2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	f340 834f 	ble.w	8020578 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801feda:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801fedc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fee0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fee4:	1e48      	subs	r0, r1, #1
 801fee6:	1e57      	subs	r7, r2, #1
 801fee8:	9b07      	ldr	r3, [sp, #28]
 801feea:	2b00      	cmp	r3, #0
 801feec:	f340 8178 	ble.w	80201e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801fef0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801fef2:	142b      	asrs	r3, r5, #16
 801fef4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fef8:	d406      	bmi.n	801ff08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fefa:	4584      	cmp	ip, r0
 801fefc:	da04      	bge.n	801ff08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	db02      	blt.n	801ff08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff02:	42bb      	cmp	r3, r7
 801ff04:	f2c0 816d 	blt.w	80201e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ff08:	f11c 0c01 	adds.w	ip, ip, #1
 801ff0c:	f100 815b 	bmi.w	80201c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff10:	4561      	cmp	r1, ip
 801ff12:	f2c0 8158 	blt.w	80201c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff16:	3301      	adds	r3, #1
 801ff18:	f100 8155 	bmi.w	80201c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff1c:	429a      	cmp	r2, r3
 801ff1e:	f2c0 8152 	blt.w	80201c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801ff22:	9b07      	ldr	r3, [sp, #28]
 801ff24:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801ff26:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ff28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	f340 8178 	ble.w	8020220 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ff30:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ff32:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ff36:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ff3a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ff3e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ff40:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801ff44:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ff46:	141b      	asrs	r3, r3, #16
 801ff48:	f100 81ba 	bmi.w	80202c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff4c:	f101 38ff 	add.w	r8, r1, #4294967295
 801ff50:	4543      	cmp	r3, r8
 801ff52:	f280 81b5 	bge.w	80202c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff56:	f1bc 0f00 	cmp.w	ip, #0
 801ff5a:	f2c0 81b1 	blt.w	80202c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff5e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ff62:	45c4      	cmp	ip, r8
 801ff64:	f280 81ac 	bge.w	80202c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff68:	b209      	sxth	r1, r1
 801ff6a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff6c:	fb0c 3301 	mla	r3, ip, r1, r3
 801ff70:	eb04 0803 	add.w	r8, r4, r3
 801ff74:	5ce3      	ldrb	r3, [r4, r3]
 801ff76:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ff7a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ff7e:	2a00      	cmp	r2, #0
 801ff80:	f000 8193 	beq.w	80202aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801ff84:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ff88:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801ff8c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ff8e:	0e24      	lsrs	r4, r4, #24
 801ff90:	9412      	str	r4, [sp, #72]	@ 0x48
 801ff92:	b178      	cbz	r0, 801ffb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ff94:	eb08 0c01 	add.w	ip, r8, r1
 801ff98:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ff9c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ffa0:	9108      	str	r1, [sp, #32]
 801ffa2:	0e09      	lsrs	r1, r1, #24
 801ffa4:	9110      	str	r1, [sp, #64]	@ 0x40
 801ffa6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801ffaa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ffae:	910c      	str	r1, [sp, #48]	@ 0x30
 801ffb0:	0e09      	lsrs	r1, r1, #24
 801ffb2:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ffb4:	b292      	uxth	r2, r2
 801ffb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ffb8:	b280      	uxth	r0, r0
 801ffba:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ffbc:	fb02 f900 	mul.w	r9, r2, r0
 801ffc0:	0112      	lsls	r2, r2, #4
 801ffc2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ffc6:	eba2 0809 	sub.w	r8, r2, r9
 801ffca:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ffce:	b280      	uxth	r0, r0
 801ffd0:	fa1f f888 	uxth.w	r8, r8
 801ffd4:	1a12      	subs	r2, r2, r0
 801ffd6:	fb08 f101 	mul.w	r1, r8, r1
 801ffda:	b292      	uxth	r2, r2
 801ffdc:	fb02 110e 	mla	r1, r2, lr, r1
 801ffe0:	fb00 1104 	mla	r1, r0, r4, r1
 801ffe4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ffe6:	fb09 1104 	mla	r1, r9, r4, r1
 801ffea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ffee:	2900      	cmp	r1, #0
 801fff0:	f000 80de 	beq.w	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801fff4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fff8:	d01b      	beq.n	8020032 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801fffa:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fffe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020002:	fb0e fa0a 	mul.w	sl, lr, sl
 8020006:	fb0e fe03 	mul.w	lr, lr, r3
 802000a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802000e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020012:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020016:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802001a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802001e:	4453      	add	r3, sl
 8020020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020024:	0a1b      	lsrs	r3, r3, #8
 8020026:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802002a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802002e:	ea43 030c 	orr.w	r3, r3, ip
 8020032:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020034:	2cff      	cmp	r4, #255	@ 0xff
 8020036:	d021      	beq.n	802007c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020038:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802003a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802003e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020040:	fb04 fb0b 	mul.w	fp, r4, fp
 8020044:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020046:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802004a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802004c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020050:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020054:	fb04 fa0a 	mul.w	sl, r4, sl
 8020058:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802005c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020060:	44de      	add	lr, fp
 8020062:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020066:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802006a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802006e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020072:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020076:	ea4e 040a 	orr.w	r4, lr, sl
 802007a:	940b      	str	r4, [sp, #44]	@ 0x2c
 802007c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802007e:	2cff      	cmp	r4, #255	@ 0xff
 8020080:	d021      	beq.n	80200c6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020082:	9c08      	ldr	r4, [sp, #32]
 8020084:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020088:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802008a:	fb04 fb0b 	mul.w	fp, r4, fp
 802008e:	9c08      	ldr	r4, [sp, #32]
 8020090:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020094:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020096:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802009a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802009e:	fb04 fa0a 	mul.w	sl, r4, sl
 80200a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80200a6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80200aa:	44de      	add	lr, fp
 80200ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80200bc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80200c0:	ea4e 040a 	orr.w	r4, lr, sl
 80200c4:	9408      	str	r4, [sp, #32]
 80200c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80200c8:	2cff      	cmp	r4, #255	@ 0xff
 80200ca:	d021      	beq.n	8020110 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80200cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80200ce:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80200d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80200d4:	fb04 fb0b 	mul.w	fp, r4, fp
 80200d8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80200da:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80200de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80200e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80200e4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80200e8:	fb04 fa0a 	mul.w	sl, r4, sl
 80200ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80200f0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80200f4:	44de      	add	lr, fp
 80200f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80200fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020102:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020106:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802010a:	ea4e 040a 	orr.w	r4, lr, sl
 802010e:	940c      	str	r4, [sp, #48]	@ 0x30
 8020110:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020112:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8020116:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802011a:	43c9      	mvns	r1, r1
 802011c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020120:	9c08      	ldr	r4, [sp, #32]
 8020122:	b2c9      	uxtb	r1, r1
 8020124:	fb08 fc0c 	mul.w	ip, r8, ip
 8020128:	fb02 cc0e 	mla	ip, r2, lr, ip
 802012c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020130:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8020132:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020136:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802013a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802013c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020140:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020144:	fb08 f80e 	mul.w	r8, r8, lr
 8020148:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802014c:	fb02 8303 	mla	r3, r2, r3, r8
 8020150:	9a08      	ldr	r2, [sp, #32]
 8020152:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020156:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802015a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802015c:	fb00 330a 	mla	r3, r0, sl, r3
 8020160:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 8020164:	fb09 3900 	mla	r9, r9, r0, r3
 8020168:	783b      	ldrb	r3, [r7, #0]
 802016a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802016e:	fb03 f201 	mul.w	r2, r3, r1
 8020172:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020176:	1c53      	adds	r3, r2, #1
 8020178:	ea4c 0c09 	orr.w	ip, ip, r9
 802017c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020180:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020184:	703b      	strb	r3, [r7, #0]
 8020186:	787b      	ldrb	r3, [r7, #1]
 8020188:	434b      	muls	r3, r1
 802018a:	1c5a      	adds	r2, r3, #1
 802018c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020190:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020194:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020198:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802019c:	707b      	strb	r3, [r7, #1]
 802019e:	78bb      	ldrb	r3, [r7, #2]
 80201a0:	4359      	muls	r1, r3
 80201a2:	1c4b      	adds	r3, r1, #1
 80201a4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80201a8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80201ac:	f887 c002 	strb.w	ip, [r7, #2]
 80201b0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80201b2:	3703      	adds	r7, #3
 80201b4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80201b6:	441a      	add	r2, r3
 80201b8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80201ba:	441d      	add	r5, r3
 80201bc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80201be:	9225      	str	r2, [sp, #148]	@ 0x94
 80201c0:	3b01      	subs	r3, #1
 80201c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80201c4:	e6b0      	b.n	801ff28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80201c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80201c8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80201ca:	441c      	add	r4, r3
 80201cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80201ce:	441d      	add	r5, r3
 80201d0:	9b07      	ldr	r3, [sp, #28]
 80201d2:	9425      	str	r4, [sp, #148]	@ 0x94
 80201d4:	3b01      	subs	r3, #1
 80201d6:	9307      	str	r3, [sp, #28]
 80201d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80201da:	3303      	adds	r3, #3
 80201dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80201de:	e683      	b.n	801fee8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80201e0:	d026      	beq.n	8020230 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 80201e2:	9b07      	ldr	r3, [sp, #28]
 80201e4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80201e6:	3b01      	subs	r3, #1
 80201e8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80201ea:	fb00 4003 	mla	r0, r0, r3, r4
 80201ee:	1400      	asrs	r0, r0, #16
 80201f0:	f53f ae97 	bmi.w	801ff22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80201f4:	3901      	subs	r1, #1
 80201f6:	4288      	cmp	r0, r1
 80201f8:	f6bf ae93 	bge.w	801ff22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80201fc:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80201fe:	fb01 5303 	mla	r3, r1, r3, r5
 8020202:	141b      	asrs	r3, r3, #16
 8020204:	f53f ae8d 	bmi.w	801ff22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020208:	3a01      	subs	r2, #1
 802020a:	4293      	cmp	r3, r2
 802020c:	f6bf ae89 	bge.w	801ff22 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020212:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020216:	f103 0e03 	add.w	lr, r3, #3
 802021a:	f1bb 0f00 	cmp.w	fp, #0
 802021e:	dc6d      	bgt.n	80202fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8020220:	9b07      	ldr	r3, [sp, #28]
 8020222:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020228:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802022c:	4423      	add	r3, r4
 802022e:	930a      	str	r3, [sp, #40]	@ 0x28
 8020230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020232:	2b00      	cmp	r3, #0
 8020234:	f340 81a0 	ble.w	8020578 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020238:	ee30 0a04 	vadd.f32	s0, s0, s8
 802023c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802023e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020242:	eeb0 6a62 	vmov.f32	s12, s5
 8020246:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802024a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802024e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020252:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8020256:	eeb0 6a43 	vmov.f32	s12, s6
 802025a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802025e:	ee16 5a10 	vmov	r5, s12
 8020262:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020266:	ee61 7a27 	vmul.f32	s15, s2, s15
 802026a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802026e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020272:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020276:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802027a:	ee12 2a90 	vmov	r2, s5
 802027e:	eef0 2a47 	vmov.f32	s5, s14
 8020282:	fb92 f3f3 	sdiv	r3, r2, r3
 8020286:	ee13 2a10 	vmov	r2, s6
 802028a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802028c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802028e:	eeb0 3a67 	vmov.f32	s6, s15
 8020292:	fb92 f3f3 	sdiv	r3, r2, r3
 8020296:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802029a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802029c:	3b01      	subs	r3, #1
 802029e:	9316      	str	r3, [sp, #88]	@ 0x58
 80202a0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80202a2:	bf08      	it	eq
 80202a4:	4613      	moveq	r3, r2
 80202a6:	9307      	str	r3, [sp, #28]
 80202a8:	e610      	b.n	801fecc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80202aa:	2800      	cmp	r0, #0
 80202ac:	f43f ae82 	beq.w	801ffb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80202b0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80202b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80202b8:	9108      	str	r1, [sp, #32]
 80202ba:	0e09      	lsrs	r1, r1, #24
 80202bc:	9110      	str	r1, [sp, #64]	@ 0x40
 80202be:	e679      	b.n	801ffb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80202c0:	f113 0801 	adds.w	r8, r3, #1
 80202c4:	f53f af74 	bmi.w	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80202c8:	4541      	cmp	r1, r8
 80202ca:	f6ff af71 	blt.w	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80202ce:	f11c 0801 	adds.w	r8, ip, #1
 80202d2:	f53f af6d 	bmi.w	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80202d6:	45c6      	cmp	lr, r8
 80202d8:	f6ff af6a 	blt.w	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80202dc:	b209      	sxth	r1, r1
 80202de:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80202e2:	fa0f f38e 	sxth.w	r3, lr
 80202e6:	9100      	str	r1, [sp, #0]
 80202e8:	4639      	mov	r1, r7
 80202ea:	9301      	str	r3, [sp, #4]
 80202ec:	4633      	mov	r3, r6
 80202ee:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80202f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80202f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80202f6:	f7ff fca3 	bl	801fc40 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 80202fa:	e759      	b.n	80201b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80202fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80202fe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020302:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020304:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020308:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802030a:	1427      	asrs	r7, r4, #16
 802030c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802030e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020312:	142b      	asrs	r3, r5, #16
 8020314:	fb01 7303 	mla	r3, r1, r3, r7
 8020318:	18e7      	adds	r7, r4, r3
 802031a:	5ce3      	ldrb	r3, [r4, r3]
 802031c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020320:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020324:	2a00      	cmp	r2, #0
 8020326:	f000 811d 	beq.w	8020564 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 802032a:	f897 8001 	ldrb.w	r8, [r7, #1]
 802032e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8020332:	940d      	str	r4, [sp, #52]	@ 0x34
 8020334:	0e24      	lsrs	r4, r4, #24
 8020336:	9414      	str	r4, [sp, #80]	@ 0x50
 8020338:	b170      	cbz	r0, 8020358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802033a:	eb07 0801 	add.w	r8, r7, r1
 802033e:	5c79      	ldrb	r1, [r7, r1]
 8020340:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020344:	9109      	str	r1, [sp, #36]	@ 0x24
 8020346:	0e09      	lsrs	r1, r1, #24
 8020348:	9111      	str	r1, [sp, #68]	@ 0x44
 802034a:	f898 1001 	ldrb.w	r1, [r8, #1]
 802034e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020352:	910e      	str	r1, [sp, #56]	@ 0x38
 8020354:	0e09      	lsrs	r1, r1, #24
 8020356:	9115      	str	r1, [sp, #84]	@ 0x54
 8020358:	b292      	uxth	r2, r2
 802035a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802035c:	b280      	uxth	r0, r0
 802035e:	fb02 f900 	mul.w	r9, r2, r0
 8020362:	0112      	lsls	r2, r2, #4
 8020364:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020368:	eba2 0809 	sub.w	r8, r2, r9
 802036c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020370:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020372:	b280      	uxth	r0, r0
 8020374:	fa1f f888 	uxth.w	r8, r8
 8020378:	1a09      	subs	r1, r1, r0
 802037a:	fb08 f202 	mul.w	r2, r8, r2
 802037e:	b289      	uxth	r1, r1
 8020380:	fb01 220c 	mla	r2, r1, ip, r2
 8020384:	fb00 2204 	mla	r2, r0, r4, r2
 8020388:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802038a:	fb09 2204 	mla	r2, r9, r4, r2
 802038e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020392:	2a00      	cmp	r2, #0
 8020394:	f000 80db 	beq.w	802054e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8020398:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802039c:	d019      	beq.n	80203d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 802039e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80203a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80203a6:	fb0c fa0a 	mul.w	sl, ip, sl
 80203aa:	fb0c fc03 	mul.w	ip, ip, r3
 80203ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80203b2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80203b6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80203ba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80203be:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80203c2:	4453      	add	r3, sl
 80203c4:	0a3f      	lsrs	r7, r7, #8
 80203c6:	0a1b      	lsrs	r3, r3, #8
 80203c8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80203cc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80203d0:	433b      	orrs	r3, r7
 80203d2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203d4:	2cff      	cmp	r4, #255	@ 0xff
 80203d6:	d020      	beq.n	802041a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 80203d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80203da:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80203de:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203e0:	4367      	muls	r7, r4
 80203e2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80203e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80203e8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80203ec:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203ee:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80203f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80203f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80203fa:	44bc      	add	ip, r7
 80203fc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020400:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020404:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020408:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802040c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020410:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020414:	ea4c 040a 	orr.w	r4, ip, sl
 8020418:	940d      	str	r4, [sp, #52]	@ 0x34
 802041a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802041c:	2cff      	cmp	r4, #255	@ 0xff
 802041e:	d020      	beq.n	8020462 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8020420:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8020422:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020426:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020428:	4367      	muls	r7, r4
 802042a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802042c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020430:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020434:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020436:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802043a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802043e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020442:	44bc      	add	ip, r7
 8020444:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020448:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802044c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020450:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020454:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020458:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802045c:	ea4c 040a 	orr.w	r4, ip, sl
 8020460:	9409      	str	r4, [sp, #36]	@ 0x24
 8020462:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020464:	2cff      	cmp	r4, #255	@ 0xff
 8020466:	d020      	beq.n	80204aa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 8020468:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802046a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802046e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8020470:	4367      	muls	r7, r4
 8020472:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020474:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020478:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802047c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802047e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020482:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020486:	fb04 fa0a 	mul.w	sl, r4, sl
 802048a:	44bc      	add	ip, r7
 802048c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020490:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020494:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020498:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802049c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204a0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80204a4:	ea4c 040a 	orr.w	r4, ip, sl
 80204a8:	940e      	str	r4, [sp, #56]	@ 0x38
 80204aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80204ac:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80204b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80204b4:	43d2      	mvns	r2, r2
 80204b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80204ba:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80204bc:	b2d2      	uxtb	r2, r2
 80204be:	fb08 f707 	mul.w	r7, r8, r7
 80204c2:	fb01 770c 	mla	r7, r1, ip, r7
 80204c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204ca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80204cc:	fb00 770c 	mla	r7, r0, ip, r7
 80204d0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204d4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80204d6:	fb09 770c 	mla	r7, r9, ip, r7
 80204da:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80204de:	fb08 f80c 	mul.w	r8, r8, ip
 80204e2:	0a3f      	lsrs	r7, r7, #8
 80204e4:	fb01 8303 	mla	r3, r1, r3, r8
 80204e8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80204ea:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80204ee:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80204f2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80204f4:	fb00 330a 	mla	r3, r0, sl, r3
 80204f8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80204fc:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020500:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020504:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020508:	fb03 f102 	mul.w	r1, r3, r2
 802050c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020510:	1c4b      	adds	r3, r1, #1
 8020512:	ea47 070c 	orr.w	r7, r7, ip
 8020516:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802051a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802051e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020522:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8020526:	4353      	muls	r3, r2
 8020528:	1c59      	adds	r1, r3, #1
 802052a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802052e:	0a3b      	lsrs	r3, r7, #8
 8020530:	0c3f      	lsrs	r7, r7, #16
 8020532:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8020536:	f80e 3c02 	strb.w	r3, [lr, #-2]
 802053a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802053e:	435a      	muls	r2, r3
 8020540:	1c53      	adds	r3, r2, #1
 8020542:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020546:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802054a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802054e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020550:	f10e 0e03 	add.w	lr, lr, #3
 8020554:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020556:	f10b 3bff 	add.w	fp, fp, #4294967295
 802055a:	441a      	add	r2, r3
 802055c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802055e:	9225      	str	r2, [sp, #148]	@ 0x94
 8020560:	441d      	add	r5, r3
 8020562:	e65a      	b.n	802021a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8020564:	2800      	cmp	r0, #0
 8020566:	f43f aef7 	beq.w	8020358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802056a:	5c79      	ldrb	r1, [r7, r1]
 802056c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020570:	9109      	str	r1, [sp, #36]	@ 0x24
 8020572:	0e09      	lsrs	r1, r1, #24
 8020574:	9111      	str	r1, [sp, #68]	@ 0x44
 8020576:	e6ef      	b.n	8020358 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8020578:	b01b      	add	sp, #108	@ 0x6c
 802057a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802057e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 802057e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020582:	b08d      	sub	sp, #52	@ 0x34
 8020584:	468b      	mov	fp, r1
 8020586:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 802058a:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 802058e:	fb0c 5703 	mla	r7, ip, r3, r5
 8020592:	f1bc 0f00 	cmp.w	ip, #0
 8020596:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020598:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802059c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 80205a0:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 80205a4:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 80205a8:	eb02 0607 	add.w	r6, r2, r7
 80205ac:	f89b 4000 	ldrb.w	r4, [fp]
 80205b0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80205b4:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80205b8:	f2c0 80c1 	blt.w	802073e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80205bc:	45e6      	cmp	lr, ip
 80205be:	f340 80be 	ble.w	802073e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80205c2:	2d00      	cmp	r5, #0
 80205c4:	f2c0 80b7 	blt.w	8020736 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80205c8:	42ab      	cmp	r3, r5
 80205ca:	f340 80b4 	ble.w	8020736 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 80205ce:	5dd2      	ldrb	r2, [r2, r7]
 80205d0:	9205      	str	r2, [sp, #20]
 80205d2:	7872      	ldrb	r2, [r6, #1]
 80205d4:	9206      	str	r2, [sp, #24]
 80205d6:	78b2      	ldrb	r2, [r6, #2]
 80205d8:	9207      	str	r2, [sp, #28]
 80205da:	1c6a      	adds	r2, r5, #1
 80205dc:	f100 80b6 	bmi.w	802074c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80205e0:	4293      	cmp	r3, r2
 80205e2:	f340 80b3 	ble.w	802074c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80205e6:	f1b8 0f00 	cmp.w	r8, #0
 80205ea:	f000 80af 	beq.w	802074c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 80205ee:	78f2      	ldrb	r2, [r6, #3]
 80205f0:	9201      	str	r2, [sp, #4]
 80205f2:	7932      	ldrb	r2, [r6, #4]
 80205f4:	9202      	str	r2, [sp, #8]
 80205f6:	7972      	ldrb	r2, [r6, #5]
 80205f8:	9203      	str	r2, [sp, #12]
 80205fa:	f11c 0c01 	adds.w	ip, ip, #1
 80205fe:	f100 80ad 	bmi.w	802075c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020602:	45e6      	cmp	lr, ip
 8020604:	f340 80aa 	ble.w	802075c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020608:	f1ba 0f00 	cmp.w	sl, #0
 802060c:	f000 80a6 	beq.w	802075c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8020610:	2d00      	cmp	r5, #0
 8020612:	f2c0 809f 	blt.w	8020754 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8020616:	42ab      	cmp	r3, r5
 8020618:	f340 809c 	ble.w	8020754 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 802061c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020620:	f816 9002 	ldrb.w	r9, [r6, r2]
 8020624:	2203      	movs	r2, #3
 8020626:	fb03 6c02 	mla	ip, r3, r2, r6
 802062a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802062e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020632:	9704      	str	r7, [sp, #16]
 8020634:	3501      	adds	r5, #1
 8020636:	f100 8098 	bmi.w	802076a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802063a:	42ab      	cmp	r3, r5
 802063c:	f340 8095 	ble.w	802076a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020640:	f1b8 0f00 	cmp.w	r8, #0
 8020644:	f000 8091 	beq.w	802076a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8020648:	f04f 0c03 	mov.w	ip, #3
 802064c:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8020650:	5cb5      	ldrb	r5, [r6, r2]
 8020652:	fb03 620c 	mla	r2, r3, ip, r6
 8020656:	fb03 630c 	mla	r3, r3, ip, r6
 802065a:	7912      	ldrb	r2, [r2, #4]
 802065c:	795e      	ldrb	r6, [r3, #5]
 802065e:	fa1f f388 	uxth.w	r3, r8
 8020662:	fa1f fc8a 	uxth.w	ip, sl
 8020666:	fb03 f70c 	mul.w	r7, r3, ip
 802066a:	011b      	lsls	r3, r3, #4
 802066c:	9708      	str	r7, [sp, #32]
 802066e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8020672:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 8020676:	1bdb      	subs	r3, r3, r7
 8020678:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 802067c:	fa1f fc8c 	uxth.w	ip, ip
 8020680:	b29b      	uxth	r3, r3
 8020682:	9709      	str	r7, [sp, #36]	@ 0x24
 8020684:	ebaa 0a0c 	sub.w	sl, sl, ip
 8020688:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802068a:	930a      	str	r3, [sp, #40]	@ 0x28
 802068c:	fa1f fa8a 	uxth.w	sl, sl
 8020690:	ea6f 0807 	mvn.w	r8, r7
 8020694:	9f01      	ldr	r7, [sp, #4]
 8020696:	435f      	muls	r7, r3
 8020698:	9b05      	ldr	r3, [sp, #20]
 802069a:	fa5f f888 	uxtb.w	r8, r8
 802069e:	fb0a 7703 	mla	r7, sl, r3, r7
 80206a2:	9b08      	ldr	r3, [sp, #32]
 80206a4:	fb14 f408 	smulbb	r4, r4, r8
 80206a8:	fb0c 7709 	mla	r7, ip, r9, r7
 80206ac:	fb10 f008 	smulbb	r0, r0, r8
 80206b0:	fb11 f108 	smulbb	r1, r1, r8
 80206b4:	fb03 7705 	mla	r7, r3, r5, r7
 80206b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206ba:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80206be:	fb07 4703 	mla	r7, r7, r3, r4
 80206c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80206c4:	b2bf      	uxth	r7, r7
 80206c6:	1c7c      	adds	r4, r7, #1
 80206c8:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 80206cc:	1224      	asrs	r4, r4, #8
 80206ce:	f88b 4000 	strb.w	r4, [fp]
 80206d2:	9c02      	ldr	r4, [sp, #8]
 80206d4:	435c      	muls	r4, r3
 80206d6:	9b06      	ldr	r3, [sp, #24]
 80206d8:	fb0a 4403 	mla	r4, sl, r3, r4
 80206dc:	9b04      	ldr	r3, [sp, #16]
 80206de:	fb0c 4403 	mla	r4, ip, r3, r4
 80206e2:	9b08      	ldr	r3, [sp, #32]
 80206e4:	fb03 4402 	mla	r4, r3, r2, r4
 80206e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80206ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80206f0:	fb04 0403 	mla	r4, r4, r3, r0
 80206f4:	9b03      	ldr	r3, [sp, #12]
 80206f6:	435a      	muls	r2, r3
 80206f8:	b2a4      	uxth	r4, r4
 80206fa:	4613      	mov	r3, r2
 80206fc:	9a07      	ldr	r2, [sp, #28]
 80206fe:	1c60      	adds	r0, r4, #1
 8020700:	fb0a 3a02 	mla	sl, sl, r2, r3
 8020704:	9b08      	ldr	r3, [sp, #32]
 8020706:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802070a:	fb0c ac0e 	mla	ip, ip, lr, sl
 802070e:	1224      	asrs	r4, r4, #8
 8020710:	fb03 c606 	mla	r6, r3, r6, ip
 8020714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020716:	f88b 4001 	strb.w	r4, [fp, #1]
 802071a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802071e:	fb06 1103 	mla	r1, r6, r3, r1
 8020722:	b289      	uxth	r1, r1
 8020724:	1c4e      	adds	r6, r1, #1
 8020726:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 802072a:	1209      	asrs	r1, r1, #8
 802072c:	f88b 1002 	strb.w	r1, [fp, #2]
 8020730:	b00d      	add	sp, #52	@ 0x34
 8020732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020736:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802073a:	9405      	str	r4, [sp, #20]
 802073c:	e74d      	b.n	80205da <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 802073e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020742:	9401      	str	r4, [sp, #4]
 8020744:	9405      	str	r4, [sp, #20]
 8020746:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802074a:	e756      	b.n	80205fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 802074c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020750:	9401      	str	r4, [sp, #4]
 8020752:	e752      	b.n	80205fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8020754:	468e      	mov	lr, r1
 8020756:	9004      	str	r0, [sp, #16]
 8020758:	46a1      	mov	r9, r4
 802075a:	e76b      	b.n	8020634 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 802075c:	460e      	mov	r6, r1
 802075e:	4602      	mov	r2, r0
 8020760:	4625      	mov	r5, r4
 8020762:	468e      	mov	lr, r1
 8020764:	9004      	str	r0, [sp, #16]
 8020766:	46a1      	mov	r9, r4
 8020768:	e779      	b.n	802065e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 802076a:	460e      	mov	r6, r1
 802076c:	4602      	mov	r2, r0
 802076e:	4625      	mov	r5, r4
 8020770:	e775      	b.n	802065e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08020772 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020776:	b09f      	sub	sp, #124	@ 0x7c
 8020778:	920e      	str	r2, [sp, #56]	@ 0x38
 802077a:	9307      	str	r3, [sp, #28]
 802077c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802077e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8020782:	901d      	str	r0, [sp, #116]	@ 0x74
 8020784:	930c      	str	r3, [sp, #48]	@ 0x30
 8020786:	6850      	ldr	r0, [r2, #4]
 8020788:	910b      	str	r1, [sp, #44]	@ 0x2c
 802078a:	6812      	ldr	r2, [r2, #0]
 802078c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8020790:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 8020794:	fb00 1303 	mla	r3, r0, r3, r1
 8020798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802079c:	18d3      	adds	r3, r2, r3
 802079e:	9308      	str	r3, [sp, #32]
 80207a0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80207a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207a8:	43db      	mvns	r3, r3
 80207aa:	b2db      	uxtb	r3, r3
 80207ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80207ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	dc03      	bgt.n	80207bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80207b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	f340 81f5 	ble.w	8020ba6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80207bc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80207be:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207c2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207c6:	1e48      	subs	r0, r1, #1
 80207c8:	1e54      	subs	r4, r2, #1
 80207ca:	9b07      	ldr	r3, [sp, #28]
 80207cc:	2b00      	cmp	r3, #0
 80207ce:	f340 80d5 	ble.w	802097c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80207d2:	ea5f 452a 	movs.w	r5, sl, asr #16
 80207d6:	ea4f 4328 	mov.w	r3, r8, asr #16
 80207da:	d406      	bmi.n	80207ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80207dc:	4285      	cmp	r5, r0
 80207de:	da04      	bge.n	80207ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	db02      	blt.n	80207ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80207e4:	42a3      	cmp	r3, r4
 80207e6:	f2c0 80ca 	blt.w	802097e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80207ea:	3501      	adds	r5, #1
 80207ec:	f100 80bb 	bmi.w	8020966 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80207f0:	42a9      	cmp	r1, r5
 80207f2:	f2c0 80b8 	blt.w	8020966 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80207f6:	3301      	adds	r3, #1
 80207f8:	f100 80b5 	bmi.w	8020966 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 80207fc:	429a      	cmp	r2, r3
 80207fe:	f2c0 80b2 	blt.w	8020966 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8020802:	9b07      	ldr	r3, [sp, #28]
 8020804:	9d08      	ldr	r5, [sp, #32]
 8020806:	930d      	str	r3, [sp, #52]	@ 0x34
 8020808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802080a:	2b00      	cmp	r3, #0
 802080c:	f340 80d6 	ble.w	80209bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8020810:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 8020812:	ea4f 4428 	mov.w	r4, r8, asr #16
 8020816:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020818:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802081c:	68c6      	ldr	r6, [r0, #12]
 802081e:	ea5f 402a 	movs.w	r0, sl, asr #16
 8020822:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8020826:	689b      	ldr	r3, [r3, #8]
 8020828:	f100 810f 	bmi.w	8020a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802082c:	1e5f      	subs	r7, r3, #1
 802082e:	42b8      	cmp	r0, r7
 8020830:	f280 810b 	bge.w	8020a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020834:	2c00      	cmp	r4, #0
 8020836:	f2c0 8108 	blt.w	8020a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802083a:	1e77      	subs	r7, r6, #1
 802083c:	42bc      	cmp	r4, r7
 802083e:	f280 8104 	bge.w	8020a4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8020842:	b21b      	sxth	r3, r3
 8020844:	fb04 0003 	mla	r0, r4, r3, r0
 8020848:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802084a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802084e:	1826      	adds	r6, r4, r0
 8020850:	5c24      	ldrb	r4, [r4, r0]
 8020852:	78b7      	ldrb	r7, [r6, #2]
 8020854:	7870      	ldrb	r0, [r6, #1]
 8020856:	970f      	str	r7, [sp, #60]	@ 0x3c
 8020858:	7977      	ldrb	r7, [r6, #5]
 802085a:	f896 e003 	ldrb.w	lr, [r6, #3]
 802085e:	f896 c004 	ldrb.w	ip, [r6, #4]
 8020862:	9710      	str	r7, [sp, #64]	@ 0x40
 8020864:	b1c9      	cbz	r1, 802089a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020866:	f04f 0b03 	mov.w	fp, #3
 802086a:	f06f 0904 	mvn.w	r9, #4
 802086e:	3605      	adds	r6, #5
 8020870:	fb13 930b 	smlabb	r3, r3, fp, r9
 8020874:	eb06 0b03 	add.w	fp, r6, r3
 8020878:	5cf3      	ldrb	r3, [r6, r3]
 802087a:	9311      	str	r3, [sp, #68]	@ 0x44
 802087c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8020880:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020882:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8020886:	9315      	str	r3, [sp, #84]	@ 0x54
 8020888:	f89b 3003 	ldrb.w	r3, [fp, #3]
 802088c:	9312      	str	r3, [sp, #72]	@ 0x48
 802088e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8020892:	9314      	str	r3, [sp, #80]	@ 0x50
 8020894:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8020898:	9316      	str	r3, [sp, #88]	@ 0x58
 802089a:	b292      	uxth	r2, r2
 802089c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 802089e:	b289      	uxth	r1, r1
 80208a0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80208a4:	fb02 f601 	mul.w	r6, r2, r1
 80208a8:	0112      	lsls	r2, r2, #4
 80208aa:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80208ae:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 80208b2:	1b92      	subs	r2, r2, r6
 80208b4:	b289      	uxth	r1, r1
 80208b6:	b292      	uxth	r2, r2
 80208b8:	eba9 0901 	sub.w	r9, r9, r1
 80208bc:	fb02 fe0e 	mul.w	lr, r2, lr
 80208c0:	fa1f f989 	uxth.w	r9, r9
 80208c4:	fb02 fc0c 	mul.w	ip, r2, ip
 80208c8:	fb09 e404 	mla	r4, r9, r4, lr
 80208cc:	f895 e000 	ldrb.w	lr, [r5]
 80208d0:	fb09 c000 	mla	r0, r9, r0, ip
 80208d4:	fb01 4407 	mla	r4, r1, r7, r4
 80208d8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80208da:	fb06 4407 	mla	r4, r6, r7, r4
 80208de:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80208e0:	fb1e fe07 	smulbb	lr, lr, r7
 80208e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80208e8:	fb04 e403 	mla	r4, r4, r3, lr
 80208ec:	b2a4      	uxth	r4, r4
 80208ee:	f104 0e01 	add.w	lr, r4, #1
 80208f2:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 80208f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80208f8:	fb01 0004 	mla	r0, r1, r4, r0
 80208fc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80208fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020902:	fb06 0004 	mla	r0, r6, r4, r0
 8020906:	786c      	ldrb	r4, [r5, #1]
 8020908:	f885 e000 	strb.w	lr, [r5]
 802090c:	fb14 f407 	smulbb	r4, r4, r7
 8020910:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020914:	fb00 4003 	mla	r0, r0, r3, r4
 8020918:	b280      	uxth	r0, r0
 802091a:	1c44      	adds	r4, r0, #1
 802091c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8020920:	1200      	asrs	r0, r0, #8
 8020922:	7068      	strb	r0, [r5, #1]
 8020924:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020926:	4342      	muls	r2, r0
 8020928:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802092a:	fb09 2200 	mla	r2, r9, r0, r2
 802092e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020930:	fb01 2100 	mla	r1, r1, r0, r2
 8020934:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020936:	fb06 1602 	mla	r6, r6, r2, r1
 802093a:	78a9      	ldrb	r1, [r5, #2]
 802093c:	fb11 f107 	smulbb	r1, r1, r7
 8020940:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8020944:	fb06 1303 	mla	r3, r6, r3, r1
 8020948:	b29b      	uxth	r3, r3
 802094a:	1c5e      	adds	r6, r3, #1
 802094c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8020950:	121b      	asrs	r3, r3, #8
 8020952:	70ab      	strb	r3, [r5, #2]
 8020954:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020956:	3503      	adds	r5, #3
 8020958:	449a      	add	sl, r3
 802095a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802095c:	4498      	add	r8, r3
 802095e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020960:	3b01      	subs	r3, #1
 8020962:	930d      	str	r3, [sp, #52]	@ 0x34
 8020964:	e750      	b.n	8020808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020966:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020968:	449a      	add	sl, r3
 802096a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802096c:	4498      	add	r8, r3
 802096e:	9b07      	ldr	r3, [sp, #28]
 8020970:	3b01      	subs	r3, #1
 8020972:	9307      	str	r3, [sp, #28]
 8020974:	9b08      	ldr	r3, [sp, #32]
 8020976:	3303      	adds	r3, #3
 8020978:	9308      	str	r3, [sp, #32]
 802097a:	e726      	b.n	80207ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802097c:	d026      	beq.n	80209cc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802097e:	9b07      	ldr	r3, [sp, #28]
 8020980:	982b      	ldr	r0, [sp, #172]	@ 0xac
 8020982:	3b01      	subs	r3, #1
 8020984:	fb00 a003 	mla	r0, r0, r3, sl
 8020988:	1400      	asrs	r0, r0, #16
 802098a:	f53f af3a 	bmi.w	8020802 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802098e:	3901      	subs	r1, #1
 8020990:	4288      	cmp	r0, r1
 8020992:	f6bf af36 	bge.w	8020802 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020996:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8020998:	fb01 8303 	mla	r3, r1, r3, r8
 802099c:	141b      	asrs	r3, r3, #16
 802099e:	f53f af30 	bmi.w	8020802 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80209a2:	3a01      	subs	r2, #1
 80209a4:	4293      	cmp	r3, r2
 80209a6:	f6bf af2c 	bge.w	8020802 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80209aa:	9b08      	ldr	r3, [sp, #32]
 80209ac:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80209b0:	1cdd      	adds	r5, r3, #3
 80209b2:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 80209b6:	f1bc 0f00 	cmp.w	ip, #0
 80209ba:	dc5f      	bgt.n	8020a7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80209bc:	9b07      	ldr	r3, [sp, #28]
 80209be:	9a08      	ldr	r2, [sp, #32]
 80209c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80209c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80209c8:	441a      	add	r2, r3
 80209ca:	9208      	str	r2, [sp, #32]
 80209cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	f340 80e9 	ble.w	8020ba6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80209d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80209d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80209da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80209de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80209e2:	eef0 6a62 	vmov.f32	s13, s5
 80209e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80209ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209f2:	ee16 aa90 	vmov	sl, s13
 80209f6:	eef0 6a43 	vmov.f32	s13, s6
 80209fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209fe:	ee16 8a90 	vmov	r8, s13
 8020a02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a1a:	ee12 2a90 	vmov	r2, s5
 8020a1e:	eef0 2a47 	vmov.f32	s5, s14
 8020a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a26:	ee13 2a10 	vmov	r2, s6
 8020a2a:	932b      	str	r3, [sp, #172]	@ 0xac
 8020a2c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020a2e:	eeb0 3a67 	vmov.f32	s6, s15
 8020a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a36:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020a38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020a3c:	3b01      	subs	r3, #1
 8020a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020a40:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020a42:	bf08      	it	eq
 8020a44:	4613      	moveq	r3, r2
 8020a46:	9307      	str	r3, [sp, #28]
 8020a48:	e6b1      	b.n	80207ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020a4a:	1c47      	adds	r7, r0, #1
 8020a4c:	d482      	bmi.n	8020954 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a4e:	42bb      	cmp	r3, r7
 8020a50:	db80      	blt.n	8020954 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a52:	1c67      	adds	r7, r4, #1
 8020a54:	f53f af7e 	bmi.w	8020954 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a58:	42be      	cmp	r6, r7
 8020a5a:	f6ff af7b 	blt.w	8020954 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a5e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8020a60:	b236      	sxth	r6, r6
 8020a62:	9001      	str	r0, [sp, #4]
 8020a64:	b21b      	sxth	r3, r3
 8020a66:	9600      	str	r6, [sp, #0]
 8020a68:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8020a6a:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8020a6e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8020a72:	4629      	mov	r1, r5
 8020a74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a76:	f7ff fd82 	bl	802057e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8020a7a:	e76b      	b.n	8020954 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020a7c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8020a7e:	ea4f 402a 	mov.w	r0, sl, asr #16
 8020a82:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8020a86:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8020a8a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8020a8e:	ea4f 4128 	mov.w	r1, r8, asr #16
 8020a92:	fb07 0101 	mla	r1, r7, r1, r0
 8020a96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020a9c:	1844      	adds	r4, r0, r1
 8020a9e:	5c40      	ldrb	r0, [r0, r1]
 8020aa0:	78a6      	ldrb	r6, [r4, #2]
 8020aa2:	7861      	ldrb	r1, [r4, #1]
 8020aa4:	960f      	str	r6, [sp, #60]	@ 0x3c
 8020aa6:	78e6      	ldrb	r6, [r4, #3]
 8020aa8:	910d      	str	r1, [sp, #52]	@ 0x34
 8020aaa:	9610      	str	r6, [sp, #64]	@ 0x40
 8020aac:	f894 9004 	ldrb.w	r9, [r4, #4]
 8020ab0:	f894 b005 	ldrb.w	fp, [r4, #5]
 8020ab4:	b192      	cbz	r2, 8020adc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8020ab6:	f06f 0604 	mvn.w	r6, #4
 8020aba:	2103      	movs	r1, #3
 8020abc:	3405      	adds	r4, #5
 8020abe:	fb17 6701 	smlabb	r7, r7, r1, r6
 8020ac2:	19e6      	adds	r6, r4, r7
 8020ac4:	5de4      	ldrb	r4, [r4, r7]
 8020ac6:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020ac8:	7874      	ldrb	r4, [r6, #1]
 8020aca:	9419      	str	r4, [sp, #100]	@ 0x64
 8020acc:	78b4      	ldrb	r4, [r6, #2]
 8020ace:	941b      	str	r4, [sp, #108]	@ 0x6c
 8020ad0:	78f4      	ldrb	r4, [r6, #3]
 8020ad2:	9418      	str	r4, [sp, #96]	@ 0x60
 8020ad4:	7934      	ldrb	r4, [r6, #4]
 8020ad6:	941a      	str	r4, [sp, #104]	@ 0x68
 8020ad8:	7974      	ldrb	r4, [r6, #5]
 8020ada:	941c      	str	r4, [sp, #112]	@ 0x70
 8020adc:	b29b      	uxth	r3, r3
 8020ade:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020ae0:	b292      	uxth	r2, r2
 8020ae2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020ae4:	3503      	adds	r5, #3
 8020ae6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020aea:	fb03 f402 	mul.w	r4, r3, r2
 8020aee:	011b      	lsls	r3, r3, #4
 8020af0:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8020af4:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8020af8:	1b1b      	subs	r3, r3, r4
 8020afa:	b292      	uxth	r2, r2
 8020afc:	b29b      	uxth	r3, r3
 8020afe:	1ab6      	subs	r6, r6, r2
 8020b00:	435f      	muls	r7, r3
 8020b02:	b2b6      	uxth	r6, r6
 8020b04:	fb03 f909 	mul.w	r9, r3, r9
 8020b08:	fb03 fb0b 	mul.w	fp, r3, fp
 8020b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b0e:	fb06 7000 	mla	r0, r6, r0, r7
 8020b12:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8020b14:	fb06 bb03 	mla	fp, r6, r3, fp
 8020b18:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020b1a:	fb02 0007 	mla	r0, r2, r7, r0
 8020b1e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8020b20:	fb02 bb03 	mla	fp, r2, r3, fp
 8020b24:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8020b26:	fb04 0007 	mla	r0, r4, r7, r0
 8020b2a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8020b2e:	fb17 f701 	smulbb	r7, r7, r1
 8020b32:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020b36:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020b38:	fb00 700e 	mla	r0, r0, lr, r7
 8020b3c:	fb06 9101 	mla	r1, r6, r1, r9
 8020b40:	b280      	uxth	r0, r0
 8020b42:	1c47      	adds	r7, r0, #1
 8020b44:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8020b48:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020b4a:	1200      	asrs	r0, r0, #8
 8020b4c:	f805 0c06 	strb.w	r0, [r5, #-6]
 8020b50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020b52:	fb02 1100 	mla	r1, r2, r0, r1
 8020b56:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8020b58:	fb04 1100 	mla	r1, r4, r0, r1
 8020b5c:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8020b60:	fb04 b403 	mla	r4, r4, r3, fp
 8020b64:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8020b68:	fb10 f007 	smulbb	r0, r0, r7
 8020b6c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020b70:	fb13 f307 	smulbb	r3, r3, r7
 8020b74:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8020b78:	fb01 010e 	mla	r1, r1, lr, r0
 8020b7c:	fb04 340e 	mla	r4, r4, lr, r3
 8020b80:	b289      	uxth	r1, r1
 8020b82:	b2a4      	uxth	r4, r4
 8020b84:	1c48      	adds	r0, r1, #1
 8020b86:	1c63      	adds	r3, r4, #1
 8020b88:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8020b8c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020b90:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020b92:	1209      	asrs	r1, r1, #8
 8020b94:	1224      	asrs	r4, r4, #8
 8020b96:	449a      	add	sl, r3
 8020b98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020b9a:	f805 1c05 	strb.w	r1, [r5, #-5]
 8020b9e:	f805 4c04 	strb.w	r4, [r5, #-4]
 8020ba2:	4498      	add	r8, r3
 8020ba4:	e707      	b.n	80209b6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8020ba6:	b01f      	add	sp, #124	@ 0x7c
 8020ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020bac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8020bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bb0:	b087      	sub	sp, #28
 8020bb2:	780d      	ldrb	r5, [r1, #0]
 8020bb4:	784c      	ldrb	r4, [r1, #1]
 8020bb6:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8020bba:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8020bbe:	9004      	str	r0, [sp, #16]
 8020bc0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8020bc4:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8020bc8:	9005      	str	r0, [sp, #20]
 8020bca:	fb06 bc03 	mla	ip, r6, r3, fp
 8020bce:	2e00      	cmp	r6, #0
 8020bd0:	7888      	ldrb	r0, [r1, #2]
 8020bd2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8020bd6:	eb02 090c 	add.w	r9, r2, ip
 8020bda:	f2c0 8084 	blt.w	8020ce6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020bde:	42b7      	cmp	r7, r6
 8020be0:	f340 8081 	ble.w	8020ce6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8020be4:	f1bb 0f00 	cmp.w	fp, #0
 8020be8:	db79      	blt.n	8020cde <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020bea:	455b      	cmp	r3, fp
 8020bec:	dd77      	ble.n	8020cde <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8020bee:	f812 200c 	ldrb.w	r2, [r2, ip]
 8020bf2:	9201      	str	r2, [sp, #4]
 8020bf4:	f899 2001 	ldrb.w	r2, [r9, #1]
 8020bf8:	9202      	str	r2, [sp, #8]
 8020bfa:	f899 2002 	ldrb.w	r2, [r9, #2]
 8020bfe:	9203      	str	r2, [sp, #12]
 8020c00:	f11b 0201 	adds.w	r2, fp, #1
 8020c04:	d476      	bmi.n	8020cf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020c06:	4293      	cmp	r3, r2
 8020c08:	dd74      	ble.n	8020cf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020c0a:	9a04      	ldr	r2, [sp, #16]
 8020c0c:	2a00      	cmp	r2, #0
 8020c0e:	d071      	beq.n	8020cf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8020c10:	f899 8003 	ldrb.w	r8, [r9, #3]
 8020c14:	f899 c004 	ldrb.w	ip, [r9, #4]
 8020c18:	f899 a005 	ldrb.w	sl, [r9, #5]
 8020c1c:	3601      	adds	r6, #1
 8020c1e:	d471      	bmi.n	8020d04 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020c20:	42b7      	cmp	r7, r6
 8020c22:	dd6f      	ble.n	8020d04 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020c24:	9a05      	ldr	r2, [sp, #20]
 8020c26:	2a00      	cmp	r2, #0
 8020c28:	d06c      	beq.n	8020d04 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8020c2a:	f1bb 0f00 	cmp.w	fp, #0
 8020c2e:	db65      	blt.n	8020cfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020c30:	455b      	cmp	r3, fp
 8020c32:	dd63      	ble.n	8020cfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8020c34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8020c38:	f819 e002 	ldrb.w	lr, [r9, r2]
 8020c3c:	2203      	movs	r2, #3
 8020c3e:	fb03 9602 	mla	r6, r3, r2, r9
 8020c42:	7877      	ldrb	r7, [r6, #1]
 8020c44:	78b6      	ldrb	r6, [r6, #2]
 8020c46:	f11b 0b01 	adds.w	fp, fp, #1
 8020c4a:	d40c      	bmi.n	8020c66 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020c4c:	455b      	cmp	r3, fp
 8020c4e:	dd0a      	ble.n	8020c66 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020c50:	9a04      	ldr	r2, [sp, #16]
 8020c52:	b142      	cbz	r2, 8020c66 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8020c54:	2203      	movs	r2, #3
 8020c56:	fb13 2002 	smlabb	r0, r3, r2, r2
 8020c5a:	f819 5000 	ldrb.w	r5, [r9, r0]
 8020c5e:	fb03 9002 	mla	r0, r3, r2, r9
 8020c62:	7904      	ldrb	r4, [r0, #4]
 8020c64:	7940      	ldrb	r0, [r0, #5]
 8020c66:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8020c6a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8020c6e:	fb03 fb02 	mul.w	fp, r3, r2
 8020c72:	011b      	lsls	r3, r3, #4
 8020c74:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8020c78:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8020c7c:	eba3 030b 	sub.w	r3, r3, fp
 8020c80:	b292      	uxth	r2, r2
 8020c82:	b29b      	uxth	r3, r3
 8020c84:	eba9 0902 	sub.w	r9, r9, r2
 8020c88:	9304      	str	r3, [sp, #16]
 8020c8a:	fa1f f989 	uxth.w	r9, r9
 8020c8e:	fb03 f808 	mul.w	r8, r3, r8
 8020c92:	9b01      	ldr	r3, [sp, #4]
 8020c94:	fb09 8803 	mla	r8, r9, r3, r8
 8020c98:	9b04      	ldr	r3, [sp, #16]
 8020c9a:	fb03 fc0c 	mul.w	ip, r3, ip
 8020c9e:	9b02      	ldr	r3, [sp, #8]
 8020ca0:	fb02 880e 	mla	r8, r2, lr, r8
 8020ca4:	fb09 cc03 	mla	ip, r9, r3, ip
 8020ca8:	9b04      	ldr	r3, [sp, #16]
 8020caa:	fb0b 8805 	mla	r8, fp, r5, r8
 8020cae:	fb02 c707 	mla	r7, r2, r7, ip
 8020cb2:	fb03 f30a 	mul.w	r3, r3, sl
 8020cb6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020cba:	fb0b 7404 	mla	r4, fp, r4, r7
 8020cbe:	f881 8000 	strb.w	r8, [r1]
 8020cc2:	1224      	asrs	r4, r4, #8
 8020cc4:	704c      	strb	r4, [r1, #1]
 8020cc6:	9c03      	ldr	r4, [sp, #12]
 8020cc8:	fb09 3904 	mla	r9, r9, r4, r3
 8020ccc:	fb02 9206 	mla	r2, r2, r6, r9
 8020cd0:	fb0b 2000 	mla	r0, fp, r0, r2
 8020cd4:	1200      	asrs	r0, r0, #8
 8020cd6:	7088      	strb	r0, [r1, #2]
 8020cd8:	b007      	add	sp, #28
 8020cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cde:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020ce2:	9501      	str	r5, [sp, #4]
 8020ce4:	e78c      	b.n	8020c00 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8020ce6:	4682      	mov	sl, r0
 8020ce8:	46a4      	mov	ip, r4
 8020cea:	46a8      	mov	r8, r5
 8020cec:	9501      	str	r5, [sp, #4]
 8020cee:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8020cf2:	e793      	b.n	8020c1c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020cf4:	4682      	mov	sl, r0
 8020cf6:	46a4      	mov	ip, r4
 8020cf8:	46a8      	mov	r8, r5
 8020cfa:	e78f      	b.n	8020c1c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8020cfc:	4606      	mov	r6, r0
 8020cfe:	4627      	mov	r7, r4
 8020d00:	46ae      	mov	lr, r5
 8020d02:	e7a0      	b.n	8020c46 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8020d04:	4606      	mov	r6, r0
 8020d06:	4627      	mov	r7, r4
 8020d08:	46ae      	mov	lr, r5
 8020d0a:	e7ac      	b.n	8020c66 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08020d0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d10:	b09b      	sub	sp, #108	@ 0x6c
 8020d12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8020d14:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020d16:	9019      	str	r0, [sp, #100]	@ 0x64
 8020d18:	9109      	str	r1, [sp, #36]	@ 0x24
 8020d1a:	6850      	ldr	r0, [r2, #4]
 8020d1c:	9306      	str	r3, [sp, #24]
 8020d1e:	6812      	ldr	r2, [r2, #0]
 8020d20:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8020d24:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8020d28:	fb00 1303 	mla	r3, r0, r3, r1
 8020d2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d30:	18d3      	adds	r3, r2, r3
 8020d32:	9307      	str	r3, [sp, #28]
 8020d34:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020d36:	681b      	ldr	r3, [r3, #0]
 8020d38:	9308      	str	r3, [sp, #32]
 8020d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	dc03      	bgt.n	8020d48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8020d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	f340 81ab 	ble.w	802109e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020d48:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020d4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d52:	1e48      	subs	r0, r1, #1
 8020d54:	1e55      	subs	r5, r2, #1
 8020d56:	9b06      	ldr	r3, [sp, #24]
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	f340 80b1 	ble.w	8020ec0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020d5e:	ea5f 462b 	movs.w	r6, fp, asr #16
 8020d62:	ea4f 4324 	mov.w	r3, r4, asr #16
 8020d66:	d406      	bmi.n	8020d76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020d68:	4286      	cmp	r6, r0
 8020d6a:	da04      	bge.n	8020d76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	db02      	blt.n	8020d76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020d70:	42ab      	cmp	r3, r5
 8020d72:	f2c0 80a6 	blt.w	8020ec2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8020d76:	3601      	adds	r6, #1
 8020d78:	f100 8097 	bmi.w	8020eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d7c:	42b1      	cmp	r1, r6
 8020d7e:	f2c0 8094 	blt.w	8020eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d82:	3301      	adds	r3, #1
 8020d84:	f100 8091 	bmi.w	8020eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d88:	429a      	cmp	r2, r3
 8020d8a:	f2c0 808e 	blt.w	8020eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8020d8e:	9b06      	ldr	r3, [sp, #24]
 8020d90:	9e07      	ldr	r6, [sp, #28]
 8020d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8020d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020d96:	2b00      	cmp	r3, #0
 8020d98:	f340 80b0 	ble.w	8020efc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020d9c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8020d9e:	1425      	asrs	r5, r4, #16
 8020da0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020da2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020da6:	68c7      	ldr	r7, [r0, #12]
 8020da8:	ea5f 402b 	movs.w	r0, fp, asr #16
 8020dac:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8020db0:	689b      	ldr	r3, [r3, #8]
 8020db2:	f100 80ea 	bmi.w	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020db6:	f103 3cff 	add.w	ip, r3, #4294967295
 8020dba:	4560      	cmp	r0, ip
 8020dbc:	f280 80e5 	bge.w	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020dc0:	2d00      	cmp	r5, #0
 8020dc2:	f2c0 80e2 	blt.w	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020dc6:	f107 3cff 	add.w	ip, r7, #4294967295
 8020dca:	4565      	cmp	r5, ip
 8020dcc:	f280 80dd 	bge.w	8020f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8020dd0:	b21b      	sxth	r3, r3
 8020dd2:	fb05 0003 	mla	r0, r5, r3, r0
 8020dd6:	9d08      	ldr	r5, [sp, #32]
 8020dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020ddc:	182f      	adds	r7, r5, r0
 8020dde:	5c2d      	ldrb	r5, [r5, r0]
 8020de0:	7878      	ldrb	r0, [r7, #1]
 8020de2:	f897 e002 	ldrb.w	lr, [r7, #2]
 8020de6:	900c      	str	r0, [sp, #48]	@ 0x30
 8020de8:	f897 9003 	ldrb.w	r9, [r7, #3]
 8020dec:	f897 8004 	ldrb.w	r8, [r7, #4]
 8020df0:	f897 a005 	ldrb.w	sl, [r7, #5]
 8020df4:	b1c9      	cbz	r1, 8020e2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020df6:	f04f 0c03 	mov.w	ip, #3
 8020dfa:	f06f 0004 	mvn.w	r0, #4
 8020dfe:	3705      	adds	r7, #5
 8020e00:	fb13 030c 	smlabb	r3, r3, ip, r0
 8020e04:	eb07 0c03 	add.w	ip, r7, r3
 8020e08:	5cfb      	ldrb	r3, [r7, r3]
 8020e0a:	930d      	str	r3, [sp, #52]	@ 0x34
 8020e0c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020e10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e12:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8020e16:	9311      	str	r3, [sp, #68]	@ 0x44
 8020e18:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020e1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e1e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8020e22:	9310      	str	r3, [sp, #64]	@ 0x40
 8020e24:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8020e28:	9312      	str	r3, [sp, #72]	@ 0x48
 8020e2a:	b292      	uxth	r2, r2
 8020e2c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8020e2e:	b289      	uxth	r1, r1
 8020e30:	fb02 f301 	mul.w	r3, r2, r1
 8020e34:	0112      	lsls	r2, r2, #4
 8020e36:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020e3a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8020e3e:	1ad2      	subs	r2, r2, r3
 8020e40:	b289      	uxth	r1, r1
 8020e42:	b292      	uxth	r2, r2
 8020e44:	1a7f      	subs	r7, r7, r1
 8020e46:	fb02 f909 	mul.w	r9, r2, r9
 8020e4a:	b2bf      	uxth	r7, r7
 8020e4c:	fb02 f808 	mul.w	r8, r2, r8
 8020e50:	fb02 fa0a 	mul.w	sl, r2, sl
 8020e54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020e56:	fb07 9905 	mla	r9, r7, r5, r9
 8020e5a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8020e5c:	fb07 8800 	mla	r8, r7, r0, r8
 8020e60:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8020e62:	fb07 aa0e 	mla	sl, r7, lr, sl
 8020e66:	fb01 9905 	mla	r9, r1, r5, r9
 8020e6a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8020e6c:	fb01 8800 	mla	r8, r1, r0, r8
 8020e70:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8020e72:	fb01 a102 	mla	r1, r1, r2, sl
 8020e76:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020e78:	fb03 9905 	mla	r9, r3, r5, r9
 8020e7c:	fb03 8800 	mla	r8, r3, r0, r8
 8020e80:	fb03 1302 	mla	r3, r3, r2, r1
 8020e84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020e88:	ea4f 2828 	mov.w	r8, r8, asr #8
 8020e8c:	121b      	asrs	r3, r3, #8
 8020e8e:	f886 9000 	strb.w	r9, [r6]
 8020e92:	f886 8001 	strb.w	r8, [r6, #1]
 8020e96:	70b3      	strb	r3, [r6, #2]
 8020e98:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020e9a:	3603      	adds	r6, #3
 8020e9c:	449b      	add	fp, r3
 8020e9e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020ea0:	441c      	add	r4, r3
 8020ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020ea4:	3b01      	subs	r3, #1
 8020ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8020ea8:	e774      	b.n	8020d94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8020eaa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8020eac:	449b      	add	fp, r3
 8020eae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020eb0:	441c      	add	r4, r3
 8020eb2:	9b06      	ldr	r3, [sp, #24]
 8020eb4:	3b01      	subs	r3, #1
 8020eb6:	9306      	str	r3, [sp, #24]
 8020eb8:	9b07      	ldr	r3, [sp, #28]
 8020eba:	3303      	adds	r3, #3
 8020ebc:	9307      	str	r3, [sp, #28]
 8020ebe:	e74a      	b.n	8020d56 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020ec0:	d024      	beq.n	8020f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020ec2:	9b06      	ldr	r3, [sp, #24]
 8020ec4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8020ec6:	3b01      	subs	r3, #1
 8020ec8:	fb00 b003 	mla	r0, r0, r3, fp
 8020ecc:	1400      	asrs	r0, r0, #16
 8020ece:	f53f af5e 	bmi.w	8020d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020ed2:	3901      	subs	r1, #1
 8020ed4:	4288      	cmp	r0, r1
 8020ed6:	f6bf af5a 	bge.w	8020d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020eda:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8020edc:	fb01 4303 	mla	r3, r1, r3, r4
 8020ee0:	141b      	asrs	r3, r3, #16
 8020ee2:	f53f af54 	bmi.w	8020d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020ee6:	3a01      	subs	r2, #1
 8020ee8:	4293      	cmp	r3, r2
 8020eea:	f6bf af50 	bge.w	8020d8e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020eee:	9b07      	ldr	r3, [sp, #28]
 8020ef0:	f8dd e018 	ldr.w	lr, [sp, #24]
 8020ef4:	1cde      	adds	r6, r3, #3
 8020ef6:	f1be 0f00 	cmp.w	lr, #0
 8020efa:	dc5f      	bgt.n	8020fbc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020efc:	9b06      	ldr	r3, [sp, #24]
 8020efe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020f02:	9b07      	ldr	r3, [sp, #28]
 8020f04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020f08:	4423      	add	r3, r4
 8020f0a:	9307      	str	r3, [sp, #28]
 8020f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f0e:	2b00      	cmp	r3, #0
 8020f10:	f340 80c5 	ble.w	802109e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8020f14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020f18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020f1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f22:	eef0 6a62 	vmov.f32	s13, s5
 8020f26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020f2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f32:	ee16 ba90 	vmov	fp, s13
 8020f36:	eef0 6a43 	vmov.f32	s13, s6
 8020f3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f3e:	ee16 4a90 	vmov	r4, s13
 8020f42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f5a:	ee12 2a90 	vmov	r2, s5
 8020f5e:	eef0 2a47 	vmov.f32	s5, s14
 8020f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f66:	ee13 2a10 	vmov	r2, s6
 8020f6a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8020f6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020f6e:	eeb0 3a67 	vmov.f32	s6, s15
 8020f72:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f76:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020f7c:	3b01      	subs	r3, #1
 8020f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f80:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020f82:	bf08      	it	eq
 8020f84:	4613      	moveq	r3, r2
 8020f86:	9306      	str	r3, [sp, #24]
 8020f88:	e6d7      	b.n	8020d3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020f8a:	f110 0c01 	adds.w	ip, r0, #1
 8020f8e:	d483      	bmi.n	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f90:	4563      	cmp	r3, ip
 8020f92:	db81      	blt.n	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f94:	f115 0c01 	adds.w	ip, r5, #1
 8020f98:	f53f af7e 	bmi.w	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020f9c:	4567      	cmp	r7, ip
 8020f9e:	f6ff af7b 	blt.w	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020fa2:	b23f      	sxth	r7, r7
 8020fa4:	b21b      	sxth	r3, r3
 8020fa6:	9700      	str	r7, [sp, #0]
 8020fa8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8020fac:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8020fb0:	9a08      	ldr	r2, [sp, #32]
 8020fb2:	4631      	mov	r1, r6
 8020fb4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8020fb6:	f7ff fdf9 	bl	8020bac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8020fba:	e76d      	b.n	8020e98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8020fbc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8020fbe:	ea4f 402b 	mov.w	r0, fp, asr #16
 8020fc2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8020fc6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020fca:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8020fce:	1421      	asrs	r1, r4, #16
 8020fd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8020fd2:	fb0c 0101 	mla	r1, ip, r1, r0
 8020fd6:	9808      	ldr	r0, [sp, #32]
 8020fd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020fdc:	1845      	adds	r5, r0, r1
 8020fde:	5c40      	ldrb	r0, [r0, r1]
 8020fe0:	796f      	ldrb	r7, [r5, #5]
 8020fe2:	7869      	ldrb	r1, [r5, #1]
 8020fe4:	f895 8002 	ldrb.w	r8, [r5, #2]
 8020fe8:	f895 a003 	ldrb.w	sl, [r5, #3]
 8020fec:	f895 9004 	ldrb.w	r9, [r5, #4]
 8020ff0:	970c      	str	r7, [sp, #48]	@ 0x30
 8020ff2:	b1a2      	cbz	r2, 802101e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8020ff4:	2703      	movs	r7, #3
 8020ff6:	f06f 0304 	mvn.w	r3, #4
 8020ffa:	3505      	adds	r5, #5
 8020ffc:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021000:	eb05 070c 	add.w	r7, r5, ip
 8021004:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021008:	9513      	str	r5, [sp, #76]	@ 0x4c
 802100a:	787d      	ldrb	r5, [r7, #1]
 802100c:	9515      	str	r5, [sp, #84]	@ 0x54
 802100e:	78bd      	ldrb	r5, [r7, #2]
 8021010:	9517      	str	r5, [sp, #92]	@ 0x5c
 8021012:	78fd      	ldrb	r5, [r7, #3]
 8021014:	9514      	str	r5, [sp, #80]	@ 0x50
 8021016:	793d      	ldrb	r5, [r7, #4]
 8021018:	9516      	str	r5, [sp, #88]	@ 0x58
 802101a:	797d      	ldrb	r5, [r7, #5]
 802101c:	9518      	str	r5, [sp, #96]	@ 0x60
 802101e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021022:	b292      	uxth	r2, r2
 8021024:	3603      	adds	r6, #3
 8021026:	f10e 3eff 	add.w	lr, lr, #4294967295
 802102a:	fb03 f502 	mul.w	r5, r3, r2
 802102e:	011b      	lsls	r3, r3, #4
 8021030:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021034:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8021038:	1b5b      	subs	r3, r3, r5
 802103a:	b292      	uxth	r2, r2
 802103c:	b29b      	uxth	r3, r3
 802103e:	1abf      	subs	r7, r7, r2
 8021040:	fb03 f909 	mul.w	r9, r3, r9
 8021044:	b2bf      	uxth	r7, r7
 8021046:	fb03 fa0a 	mul.w	sl, r3, sl
 802104a:	fb07 9901 	mla	r9, r7, r1, r9
 802104e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021050:	fb07 aa00 	mla	sl, r7, r0, sl
 8021054:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021056:	fb02 9901 	mla	r9, r2, r1, r9
 802105a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802105c:	fb02 aa00 	mla	sl, r2, r0, sl
 8021060:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8021062:	fb05 9901 	mla	r9, r5, r1, r9
 8021066:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021068:	fb05 aa00 	mla	sl, r5, r0, sl
 802106c:	434b      	muls	r3, r1
 802106e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021070:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021074:	fb07 3308 	mla	r3, r7, r8, r3
 8021078:	ea4f 2929 	mov.w	r9, r9, asr #8
 802107c:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021080:	fb02 3201 	mla	r2, r2, r1, r3
 8021084:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021086:	f806 9c05 	strb.w	r9, [r6, #-5]
 802108a:	fb05 2503 	mla	r5, r5, r3, r2
 802108e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021090:	122d      	asrs	r5, r5, #8
 8021092:	449b      	add	fp, r3
 8021094:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021096:	f806 5c04 	strb.w	r5, [r6, #-4]
 802109a:	441c      	add	r4, r3
 802109c:	e72b      	b.n	8020ef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802109e:	b01b      	add	sp, #108	@ 0x6c
 80210a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080210a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 80210a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210a8:	b087      	sub	sp, #28
 80210aa:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 80210ae:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 80210b2:	fb05 7003 	mla	r0, r5, r3, r7
 80210b6:	2d00      	cmp	r5, #0
 80210b8:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80210bc:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80210c0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80210c4:	f2c0 811f 	blt.w	8021306 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80210c8:	45a8      	cmp	r8, r5
 80210ca:	f340 811c 	ble.w	8021306 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 80210ce:	2f00      	cmp	r7, #0
 80210d0:	f2c0 8117 	blt.w	8021302 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80210d4:	42bb      	cmp	r3, r7
 80210d6:	f340 8114 	ble.w	8021302 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 80210da:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80210de:	1c7a      	adds	r2, r7, #1
 80210e0:	f100 8114 	bmi.w	802130c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80210e4:	4293      	cmp	r3, r2
 80210e6:	f340 8111 	ble.w	802130c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 80210ea:	2c00      	cmp	r4, #0
 80210ec:	f000 8110 	beq.w	8021310 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 80210f0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80210f4:	3501      	adds	r5, #1
 80210f6:	f100 810f 	bmi.w	8021318 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 80210fa:	45a8      	cmp	r8, r5
 80210fc:	f340 810c 	ble.w	8021318 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021100:	f1be 0f00 	cmp.w	lr, #0
 8021104:	f000 810b 	beq.w	802131e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8021108:	2f00      	cmp	r7, #0
 802110a:	f2c0 8103 	blt.w	8021314 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802110e:	42bb      	cmp	r3, r7
 8021110:	f340 8100 	ble.w	8021314 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021114:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021118:	3701      	adds	r7, #1
 802111a:	f100 8103 	bmi.w	8021324 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802111e:	42bb      	cmp	r3, r7
 8021120:	f340 8100 	ble.w	8021324 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021124:	2c00      	cmp	r4, #0
 8021126:	f000 80ff 	beq.w	8021328 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 802112a:	3301      	adds	r3, #1
 802112c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021130:	fa1f fc84 	uxth.w	ip, r4
 8021134:	fa1f fe8e 	uxth.w	lr, lr
 8021138:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802113c:	fb0c f90e 	mul.w	r9, ip, lr
 8021140:	0e13      	lsrs	r3, r2, #24
 8021142:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021146:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802114a:	9302      	str	r3, [sp, #8]
 802114c:	ebac 0709 	sub.w	r7, ip, r9
 8021150:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8021154:	fa1f f48e 	uxth.w	r4, lr
 8021158:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 802115c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021160:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021164:	fb0a fe0e 	mul.w	lr, sl, lr
 8021168:	1b1b      	subs	r3, r3, r4
 802116a:	fb0a f606 	mul.w	r6, sl, r6
 802116e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021172:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021176:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 802117a:	b29b      	uxth	r3, r3
 802117c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021180:	b2bf      	uxth	r7, r7
 8021182:	9301      	str	r3, [sp, #4]
 8021184:	44e6      	add	lr, ip
 8021186:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 802118a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802118e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021192:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8021196:	9303      	str	r3, [sp, #12]
 8021198:	0a33      	lsrs	r3, r6, #8
 802119a:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 802119e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80211a2:	9304      	str	r3, [sp, #16]
 80211a4:	fb0b f606 	mul.w	r6, fp, r6
 80211a8:	fb0b f000 	mul.w	r0, fp, r0
 80211ac:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80211b0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80211b4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80211b8:	44b6      	add	lr, r6
 80211ba:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80211be:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80211c2:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 80211c6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80211ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80211ce:	fb08 f606 	mul.w	r6, r8, r6
 80211d2:	0a03      	lsrs	r3, r0, #8
 80211d4:	fb08 f505 	mul.w	r5, r8, r5
 80211d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80211dc:	0a30      	lsrs	r0, r6, #8
 80211de:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80211e2:	9305      	str	r3, [sp, #20]
 80211e4:	0e13      	lsrs	r3, r2, #24
 80211e6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 80211ea:	fb0e fe07 	mul.w	lr, lr, r7
 80211ee:	4430      	add	r0, r6
 80211f0:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 80211f4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 80211f8:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 80211fc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021200:	0a00      	lsrs	r0, r0, #8
 8021202:	435e      	muls	r6, r3
 8021204:	0a2d      	lsrs	r5, r5, #8
 8021206:	435a      	muls	r2, r3
 8021208:	9b03      	ldr	r3, [sp, #12]
 802120a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802120e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021212:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021216:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802121a:	44b4      	add	ip, r6
 802121c:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8021220:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021224:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021228:	9e01      	ldr	r6, [sp, #4]
 802122a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802122e:	fb03 ee06 	mla	lr, r3, r6, lr
 8021232:	9b04      	ldr	r3, [sp, #16]
 8021234:	0a12      	lsrs	r2, r2, #8
 8021236:	fb0c ee09 	mla	lr, ip, r9, lr
 802123a:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 802123e:	9b05      	ldr	r3, [sp, #20]
 8021240:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021244:	fb00 ee04 	mla	lr, r0, r4, lr
 8021248:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802124c:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8021250:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8021254:	9b01      	ldr	r3, [sp, #4]
 8021256:	fb07 fe0e 	mul.w	lr, r7, lr
 802125a:	fb07 f70b 	mul.w	r7, r7, fp
 802125e:	fb03 ee06 	mla	lr, r3, r6, lr
 8021262:	fb03 730a 	mla	r3, r3, sl, r7
 8021266:	fb09 e202 	mla	r2, r9, r2, lr
 802126a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802126e:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021272:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 8021276:	fb04 3408 	mla	r4, r4, r8, r3
 802127a:	9b02      	ldr	r3, [sp, #8]
 802127c:	b292      	uxth	r2, r2
 802127e:	fb09 4903 	mla	r9, r9, r3, r4
 8021282:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021286:	f3c9 2907 	ubfx	r9, r9, #8, #8
 802128a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802128e:	fb09 f902 	mul.w	r9, r9, r2
 8021292:	ea40 0e0e 	orr.w	lr, r0, lr
 8021296:	f109 0301 	add.w	r3, r9, #1
 802129a:	fa5f f08e 	uxtb.w	r0, lr
 802129e:	fb10 f002 	smulbb	r0, r0, r2
 80212a2:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80212a6:	780b      	ldrb	r3, [r1, #0]
 80212a8:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80212ac:	fa5f f989 	uxtb.w	r9, r9
 80212b0:	fb03 0309 	mla	r3, r3, r9, r0
 80212b4:	b29b      	uxth	r3, r3
 80212b6:	1c58      	adds	r0, r3, #1
 80212b8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80212bc:	7848      	ldrb	r0, [r1, #1]
 80212be:	fb10 f009 	smulbb	r0, r0, r9
 80212c2:	121b      	asrs	r3, r3, #8
 80212c4:	700b      	strb	r3, [r1, #0]
 80212c6:	f3ce 2307 	ubfx	r3, lr, #8, #8
 80212ca:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80212ce:	fb03 0302 	mla	r3, r3, r2, r0
 80212d2:	b29b      	uxth	r3, r3
 80212d4:	1c58      	adds	r0, r3, #1
 80212d6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80212da:	121b      	asrs	r3, r3, #8
 80212dc:	704b      	strb	r3, [r1, #1]
 80212de:	788b      	ldrb	r3, [r1, #2]
 80212e0:	fb13 f909 	smulbb	r9, r3, r9
 80212e4:	fb0e 9e02 	mla	lr, lr, r2, r9
 80212e8:	fa1f fe8e 	uxth.w	lr, lr
 80212ec:	f10e 0301 	add.w	r3, lr, #1
 80212f0:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 80212f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80212f8:	f881 e002 	strb.w	lr, [r1, #2]
 80212fc:	b007      	add	sp, #28
 80212fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021302:	2600      	movs	r6, #0
 8021304:	e6eb      	b.n	80210de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8021306:	2000      	movs	r0, #0
 8021308:	4606      	mov	r6, r0
 802130a:	e6f3      	b.n	80210f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802130c:	2000      	movs	r0, #0
 802130e:	e6f1      	b.n	80210f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021310:	4620      	mov	r0, r4
 8021312:	e6ef      	b.n	80210f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8021314:	2500      	movs	r5, #0
 8021316:	e6ff      	b.n	8021118 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8021318:	2200      	movs	r2, #0
 802131a:	4615      	mov	r5, r2
 802131c:	e708      	b.n	8021130 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802131e:	4672      	mov	r2, lr
 8021320:	4675      	mov	r5, lr
 8021322:	e705      	b.n	8021130 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021324:	2200      	movs	r2, #0
 8021326:	e703      	b.n	8021130 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8021328:	4622      	mov	r2, r4
 802132a:	e701      	b.n	8021130 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0802132c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021330:	b09d      	sub	sp, #116	@ 0x74
 8021332:	9219      	str	r2, [sp, #100]	@ 0x64
 8021334:	9307      	str	r3, [sp, #28]
 8021336:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8021338:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 802133c:	901b      	str	r0, [sp, #108]	@ 0x6c
 802133e:	931a      	str	r3, [sp, #104]	@ 0x68
 8021340:	6850      	ldr	r0, [r2, #4]
 8021342:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021344:	6812      	ldr	r2, [r2, #0]
 8021346:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 802134a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 802134e:	fb00 1303 	mla	r3, r0, r3, r1
 8021352:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021356:	18d3      	adds	r3, r2, r3
 8021358:	930a      	str	r3, [sp, #40]	@ 0x28
 802135a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802135c:	681b      	ldr	r3, [r3, #0]
 802135e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021360:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8021364:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021366:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021368:	2b00      	cmp	r3, #0
 802136a:	dc03      	bgt.n	8021374 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802136c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802136e:	2b00      	cmp	r3, #0
 8021370:	f340 8368 	ble.w	8021a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8021374:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8021376:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802137a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802137e:	1e48      	subs	r0, r1, #1
 8021380:	1e57      	subs	r7, r2, #1
 8021382:	9b07      	ldr	r3, [sp, #28]
 8021384:	2b00      	cmp	r3, #0
 8021386:	f340 8187 	ble.w	8021698 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802138a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802138e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021392:	d406      	bmi.n	80213a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021394:	4584      	cmp	ip, r0
 8021396:	da04      	bge.n	80213a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8021398:	2b00      	cmp	r3, #0
 802139a:	db02      	blt.n	80213a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802139c:	42bb      	cmp	r3, r7
 802139e:	f2c0 817c 	blt.w	802169a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80213a2:	f11c 0c01 	adds.w	ip, ip, #1
 80213a6:	f100 816c 	bmi.w	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213aa:	4561      	cmp	r1, ip
 80213ac:	f2c0 8169 	blt.w	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213b0:	3301      	adds	r3, #1
 80213b2:	f100 8166 	bmi.w	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213b6:	429a      	cmp	r2, r3
 80213b8:	f2c0 8163 	blt.w	8021682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80213bc:	9b07      	ldr	r3, [sp, #28]
 80213be:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80213c0:	9318      	str	r3, [sp, #96]	@ 0x60
 80213c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80213c4:	2b00      	cmp	r3, #0
 80213c6:	f340 8186 	ble.w	80216d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 80213ca:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80213cc:	142a      	asrs	r2, r5, #16
 80213ce:	ea4f 4026 	mov.w	r0, r6, asr #16
 80213d2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80213d6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80213da:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80213de:	f100 81cb 	bmi.w	8021778 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80213e2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80213e6:	4542      	cmp	r2, r8
 80213e8:	f280 81c6 	bge.w	8021778 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80213ec:	2800      	cmp	r0, #0
 80213ee:	f2c0 81c3 	blt.w	8021778 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80213f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80213f6:	4540      	cmp	r0, r8
 80213f8:	f280 81be 	bge.w	8021778 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80213fc:	fa0f f38e 	sxth.w	r3, lr
 8021400:	fb00 2203 	mla	r2, r0, r3, r2
 8021404:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021406:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 802140a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802140e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021412:	2900      	cmp	r1, #0
 8021414:	f000 81a6 	beq.w	8021764 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8021418:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802141c:	900c      	str	r0, [sp, #48]	@ 0x30
 802141e:	0e00      	lsrs	r0, r0, #24
 8021420:	9013      	str	r0, [sp, #76]	@ 0x4c
 8021422:	f1bc 0f00 	cmp.w	ip, #0
 8021426:	d00f      	beq.n	8021448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802142c:	3b01      	subs	r3, #1
 802142e:	009b      	lsls	r3, r3, #2
 8021430:	3304      	adds	r3, #4
 8021432:	eb08 0003 	add.w	r0, r8, r3
 8021436:	f858 3003 	ldr.w	r3, [r8, r3]
 802143a:	9308      	str	r3, [sp, #32]
 802143c:	0e1b      	lsrs	r3, r3, #24
 802143e:	9311      	str	r3, [sp, #68]	@ 0x44
 8021440:	6843      	ldr	r3, [r0, #4]
 8021442:	930d      	str	r3, [sp, #52]	@ 0x34
 8021444:	0e1b      	lsrs	r3, r3, #24
 8021446:	9314      	str	r3, [sp, #80]	@ 0x50
 8021448:	b289      	uxth	r1, r1
 802144a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802144c:	fa1f fc8c 	uxth.w	ip, ip
 8021450:	0108      	lsls	r0, r1, #4
 8021452:	fb01 f90c 	mul.w	r9, r1, ip
 8021456:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 802145a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802145e:	eba0 0809 	sub.w	r8, r0, r9
 8021462:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021464:	fa1f f18c 	uxth.w	r1, ip
 8021468:	fa1f f888 	uxth.w	r8, r8
 802146c:	1a5b      	subs	r3, r3, r1
 802146e:	fb08 f000 	mul.w	r0, r8, r0
 8021472:	b29b      	uxth	r3, r3
 8021474:	fb03 000e 	mla	r0, r3, lr, r0
 8021478:	fb01 0004 	mla	r0, r1, r4, r0
 802147c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802147e:	fb09 0004 	mla	r0, r9, r4, r0
 8021482:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021486:	2800      	cmp	r0, #0
 8021488:	f000 80f2 	beq.w	8021670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802148c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021490:	d01b      	beq.n	80214ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021492:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8021496:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802149a:	fb0e fa0a 	mul.w	sl, lr, sl
 802149e:	fb0e fe02 	mul.w	lr, lr, r2
 80214a2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80214a6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80214aa:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80214ae:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80214b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80214b6:	4452      	add	r2, sl
 80214b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214bc:	0a12      	lsrs	r2, r2, #8
 80214be:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80214c2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80214c6:	ea42 020c 	orr.w	r2, r2, ip
 80214ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80214cc:	2cff      	cmp	r4, #255	@ 0xff
 80214ce:	d021      	beq.n	8021514 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80214d0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80214d2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80214d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80214d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80214dc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80214de:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80214e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80214e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80214e8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80214ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80214f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80214f4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80214f8:	44de      	add	lr, fp
 80214fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80214fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021502:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021506:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802150a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802150e:	ea4e 040a 	orr.w	r4, lr, sl
 8021512:	940c      	str	r4, [sp, #48]	@ 0x30
 8021514:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021516:	2cff      	cmp	r4, #255	@ 0xff
 8021518:	d021      	beq.n	802155e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802151a:	9c08      	ldr	r4, [sp, #32]
 802151c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8021520:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021522:	fb04 fb0b 	mul.w	fp, r4, fp
 8021526:	9c08      	ldr	r4, [sp, #32]
 8021528:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802152c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802152e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021532:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021536:	fb04 fa0a 	mul.w	sl, r4, sl
 802153a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802153e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021542:	44de      	add	lr, fp
 8021544:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021548:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802154c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021550:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021554:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021558:	ea4e 040a 	orr.w	r4, lr, sl
 802155c:	9408      	str	r4, [sp, #32]
 802155e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021560:	2cff      	cmp	r4, #255	@ 0xff
 8021562:	d021      	beq.n	80215a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8021564:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021566:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802156a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802156c:	fb04 fb0b 	mul.w	fp, r4, fp
 8021570:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021572:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021576:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021578:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802157c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021580:	fb04 fa0a 	mul.w	sl, r4, sl
 8021584:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021588:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802158c:	44de      	add	lr, fp
 802158e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021592:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021596:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802159a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802159e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80215a2:	ea4e 040a 	orr.w	r4, lr, sl
 80215a6:	940d      	str	r4, [sp, #52]	@ 0x34
 80215a8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80215aa:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80215ae:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80215b2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80215b6:	9c08      	ldr	r4, [sp, #32]
 80215b8:	fb08 fc0c 	mul.w	ip, r8, ip
 80215bc:	fb03 cc0e 	mla	ip, r3, lr, ip
 80215c0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80215c4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80215c6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80215ca:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80215ce:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80215d0:	fb09 cc0e 	mla	ip, r9, lr, ip
 80215d4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80215d8:	fb08 f80e 	mul.w	r8, r8, lr
 80215dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80215e0:	fb03 8202 	mla	r2, r3, r2, r8
 80215e4:	9b08      	ldr	r3, [sp, #32]
 80215e6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80215ea:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 80215ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80215f0:	fb01 220a 	mla	r2, r1, sl, r2
 80215f4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 80215f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80215fa:	fb09 2901 	mla	r9, r9, r1, r2
 80215fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021600:	4343      	muls	r3, r0
 8021602:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021606:	1c58      	adds	r0, r3, #1
 8021608:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802160c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021610:	783b      	ldrb	r3, [r7, #0]
 8021612:	ea4c 0c09 	orr.w	ip, ip, r9
 8021616:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802161a:	fa5f f28c 	uxtb.w	r2, ip
 802161e:	b2c0      	uxtb	r0, r0
 8021620:	fb12 f201 	smulbb	r2, r2, r1
 8021624:	fb03 2300 	mla	r3, r3, r0, r2
 8021628:	b29b      	uxth	r3, r3
 802162a:	1c5a      	adds	r2, r3, #1
 802162c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021630:	787a      	ldrb	r2, [r7, #1]
 8021632:	fb12 f200 	smulbb	r2, r2, r0
 8021636:	121b      	asrs	r3, r3, #8
 8021638:	703b      	strb	r3, [r7, #0]
 802163a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802163e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021642:	fb03 2301 	mla	r3, r3, r1, r2
 8021646:	b29b      	uxth	r3, r3
 8021648:	1c5a      	adds	r2, r3, #1
 802164a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802164e:	121b      	asrs	r3, r3, #8
 8021650:	707b      	strb	r3, [r7, #1]
 8021652:	78bb      	ldrb	r3, [r7, #2]
 8021654:	fb13 f000 	smulbb	r0, r3, r0
 8021658:	fb0c 0c01 	mla	ip, ip, r1, r0
 802165c:	fa1f fc8c 	uxth.w	ip, ip
 8021660:	f10c 0301 	add.w	r3, ip, #1
 8021664:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8021668:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802166c:	f887 c002 	strb.w	ip, [r7, #2]
 8021670:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021672:	3703      	adds	r7, #3
 8021674:	441d      	add	r5, r3
 8021676:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021678:	441e      	add	r6, r3
 802167a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802167c:	3b01      	subs	r3, #1
 802167e:	9318      	str	r3, [sp, #96]	@ 0x60
 8021680:	e69f      	b.n	80213c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021682:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021684:	441d      	add	r5, r3
 8021686:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021688:	441e      	add	r6, r3
 802168a:	9b07      	ldr	r3, [sp, #28]
 802168c:	3b01      	subs	r3, #1
 802168e:	9307      	str	r3, [sp, #28]
 8021690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021692:	3303      	adds	r3, #3
 8021694:	930a      	str	r3, [sp, #40]	@ 0x28
 8021696:	e674      	b.n	8021382 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8021698:	d025      	beq.n	80216e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802169a:	9b07      	ldr	r3, [sp, #28]
 802169c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802169e:	3b01      	subs	r3, #1
 80216a0:	fb00 5003 	mla	r0, r0, r3, r5
 80216a4:	1400      	asrs	r0, r0, #16
 80216a6:	f53f ae89 	bmi.w	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216aa:	3901      	subs	r1, #1
 80216ac:	4288      	cmp	r0, r1
 80216ae:	f6bf ae85 	bge.w	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216b2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80216b4:	fb01 6303 	mla	r3, r1, r3, r6
 80216b8:	141b      	asrs	r3, r3, #16
 80216ba:	f53f ae7f 	bmi.w	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216be:	3a01      	subs	r2, #1
 80216c0:	4293      	cmp	r3, r2
 80216c2:	f6bf ae7b 	bge.w	80213bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80216c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80216c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80216cc:	f103 0e03 	add.w	lr, r3, #3
 80216d0:	f1bb 0f00 	cmp.w	fp, #0
 80216d4:	dc6e      	bgt.n	80217b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80216d6:	9b07      	ldr	r3, [sp, #28]
 80216d8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80216dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80216de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80216e2:	4423      	add	r3, r4
 80216e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80216e6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	f340 81ab 	ble.w	8021a44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80216ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80216f2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80216f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80216f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80216fc:	eef0 6a62 	vmov.f32	s13, s5
 8021700:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021704:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021708:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802170c:	ee16 5a90 	vmov	r5, s13
 8021710:	eef0 6a43 	vmov.f32	s13, s6
 8021714:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021718:	ee16 6a90 	vmov	r6, s13
 802171c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021720:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021724:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021728:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802172c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021730:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021734:	ee12 2a90 	vmov	r2, s5
 8021738:	eef0 2a47 	vmov.f32	s5, s14
 802173c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021740:	ee13 2a10 	vmov	r2, s6
 8021744:	9329      	str	r3, [sp, #164]	@ 0xa4
 8021746:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021748:	eeb0 3a67 	vmov.f32	s6, s15
 802174c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021750:	932a      	str	r3, [sp, #168]	@ 0xa8
 8021752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8021754:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8021756:	3b01      	subs	r3, #1
 8021758:	9317      	str	r3, [sp, #92]	@ 0x5c
 802175a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802175c:	bf08      	it	eq
 802175e:	4613      	moveq	r3, r2
 8021760:	9307      	str	r3, [sp, #28]
 8021762:	e600      	b.n	8021366 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021764:	f1bc 0f00 	cmp.w	ip, #0
 8021768:	f43f ae6e 	beq.w	8021448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802176c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021770:	9308      	str	r3, [sp, #32]
 8021772:	0e1b      	lsrs	r3, r3, #24
 8021774:	9311      	str	r3, [sp, #68]	@ 0x44
 8021776:	e667      	b.n	8021448 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021778:	f112 0801 	adds.w	r8, r2, #1
 802177c:	f53f af78 	bmi.w	8021670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021780:	45c6      	cmp	lr, r8
 8021782:	f6ff af75 	blt.w	8021670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021786:	f110 0801 	adds.w	r8, r0, #1
 802178a:	f53f af71 	bmi.w	8021670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802178e:	4543      	cmp	r3, r8
 8021790:	f6ff af6e 	blt.w	8021670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8021794:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8021796:	b21b      	sxth	r3, r3
 8021798:	9201      	str	r2, [sp, #4]
 802179a:	9300      	str	r3, [sp, #0]
 802179c:	fa0f f38e 	sxth.w	r3, lr
 80217a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80217a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80217a6:	e9cd c404 	strd	ip, r4, [sp, #16]
 80217aa:	4639      	mov	r1, r7
 80217ac:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80217ae:	f7ff fc79 	bl	80210a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80217b2:	e75d      	b.n	8021670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80217b4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80217b6:	142f      	asrs	r7, r5, #16
 80217b8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80217ba:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80217be:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80217c2:	1433      	asrs	r3, r6, #16
 80217c4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80217c8:	fb02 7303 	mla	r3, r2, r3, r7
 80217cc:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 80217d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80217d4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80217d8:	2900      	cmp	r1, #0
 80217da:	f000 812a 	beq.w	8021a32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 80217de:	687c      	ldr	r4, [r7, #4]
 80217e0:	940e      	str	r4, [sp, #56]	@ 0x38
 80217e2:	0e24      	lsrs	r4, r4, #24
 80217e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80217e6:	b178      	cbz	r0, 8021808 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80217e8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80217ec:	3a01      	subs	r2, #1
 80217ee:	0092      	lsls	r2, r2, #2
 80217f0:	3204      	adds	r2, #4
 80217f2:	eb07 0802 	add.w	r8, r7, r2
 80217f6:	58ba      	ldr	r2, [r7, r2]
 80217f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80217fa:	0e12      	lsrs	r2, r2, #24
 80217fc:	9212      	str	r2, [sp, #72]	@ 0x48
 80217fe:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8021802:	920f      	str	r2, [sp, #60]	@ 0x3c
 8021804:	0e12      	lsrs	r2, r2, #24
 8021806:	9216      	str	r2, [sp, #88]	@ 0x58
 8021808:	b289      	uxth	r1, r1
 802180a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802180c:	b280      	uxth	r0, r0
 802180e:	fb01 f900 	mul.w	r9, r1, r0
 8021812:	0109      	lsls	r1, r1, #4
 8021814:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021818:	eba1 0809 	sub.w	r8, r1, r9
 802181c:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 8021820:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021822:	b280      	uxth	r0, r0
 8021824:	fa1f f888 	uxth.w	r8, r8
 8021828:	1a12      	subs	r2, r2, r0
 802182a:	fb08 f101 	mul.w	r1, r8, r1
 802182e:	b292      	uxth	r2, r2
 8021830:	fb02 110c 	mla	r1, r2, ip, r1
 8021834:	fb00 1104 	mla	r1, r0, r4, r1
 8021838:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802183a:	fb09 1104 	mla	r1, r9, r4, r1
 802183e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021842:	2900      	cmp	r1, #0
 8021844:	f000 80ec 	beq.w	8021a20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8021848:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802184c:	d019      	beq.n	8021882 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802184e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8021852:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021856:	fb0c fa0a 	mul.w	sl, ip, sl
 802185a:	fb0c fc03 	mul.w	ip, ip, r3
 802185e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021862:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8021866:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802186a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802186e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021872:	4453      	add	r3, sl
 8021874:	0a3f      	lsrs	r7, r7, #8
 8021876:	0a1b      	lsrs	r3, r3, #8
 8021878:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802187c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8021880:	433b      	orrs	r3, r7
 8021882:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021884:	2cff      	cmp	r4, #255	@ 0xff
 8021886:	d020      	beq.n	80218ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8021888:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802188a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802188e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8021890:	4367      	muls	r7, r4
 8021892:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021894:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021898:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802189c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802189e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80218a2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80218a6:	fb04 fa0a 	mul.w	sl, r4, sl
 80218aa:	44bc      	add	ip, r7
 80218ac:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80218b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80218b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80218bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80218c0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80218c4:	ea4c 040a 	orr.w	r4, ip, sl
 80218c8:	940e      	str	r4, [sp, #56]	@ 0x38
 80218ca:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80218cc:	2cff      	cmp	r4, #255	@ 0xff
 80218ce:	d020      	beq.n	8021912 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 80218d0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80218d2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80218d6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80218d8:	4367      	muls	r7, r4
 80218da:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80218dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80218e0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80218e4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80218e6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80218ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80218ee:	fb04 fa0a 	mul.w	sl, r4, sl
 80218f2:	44bc      	add	ip, r7
 80218f4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80218f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021900:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021904:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021908:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802190c:	ea4c 040a 	orr.w	r4, ip, sl
 8021910:	9409      	str	r4, [sp, #36]	@ 0x24
 8021912:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021914:	2cff      	cmp	r4, #255	@ 0xff
 8021916:	d020      	beq.n	802195a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8021918:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802191a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802191e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8021920:	4367      	muls	r7, r4
 8021922:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021924:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021928:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802192c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802192e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021932:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021936:	fb04 fa0a 	mul.w	sl, r4, sl
 802193a:	44bc      	add	ip, r7
 802193c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021940:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021944:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021948:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802194c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021950:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021954:	ea4c 040a 	orr.w	r4, ip, sl
 8021958:	940f      	str	r4, [sp, #60]	@ 0x3c
 802195a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802195c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8021960:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021964:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021968:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802196a:	fb08 f707 	mul.w	r7, r8, r7
 802196e:	fb02 770c 	mla	r7, r2, ip, r7
 8021972:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021976:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021978:	fb00 770c 	mla	r7, r0, ip, r7
 802197c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021980:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021982:	fb09 770c 	mla	r7, r9, ip, r7
 8021986:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802198a:	fb08 f80c 	mul.w	r8, r8, ip
 802198e:	0a3f      	lsrs	r7, r7, #8
 8021990:	fb02 8303 	mla	r3, r2, r3, r8
 8021994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021996:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802199a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802199e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80219a0:	fb00 330a 	mla	r3, r0, sl, r3
 80219a4:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80219a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80219aa:	fb09 3c0c 	mla	ip, r9, ip, r3
 80219ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80219b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80219b4:	434b      	muls	r3, r1
 80219b6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80219ba:	1c59      	adds	r1, r3, #1
 80219bc:	ea47 070c 	orr.w	r7, r7, ip
 80219c0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80219c4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 80219c8:	b2fa      	uxtb	r2, r7
 80219ca:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80219ce:	fb12 f200 	smulbb	r2, r2, r0
 80219d2:	b2c9      	uxtb	r1, r1
 80219d4:	fb03 2301 	mla	r3, r3, r1, r2
 80219d8:	b29b      	uxth	r3, r3
 80219da:	1c5a      	adds	r2, r3, #1
 80219dc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80219e0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80219e4:	fb12 f201 	smulbb	r2, r2, r1
 80219e8:	121b      	asrs	r3, r3, #8
 80219ea:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80219ee:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80219f2:	0c3f      	lsrs	r7, r7, #16
 80219f4:	fb03 2300 	mla	r3, r3, r0, r2
 80219f8:	b29b      	uxth	r3, r3
 80219fa:	1c5a      	adds	r2, r3, #1
 80219fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021a00:	121b      	asrs	r3, r3, #8
 8021a02:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021a06:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8021a0a:	fb13 f101 	smulbb	r1, r3, r1
 8021a0e:	fb07 1700 	mla	r7, r7, r0, r1
 8021a12:	b2bf      	uxth	r7, r7
 8021a14:	1c79      	adds	r1, r7, #1
 8021a16:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8021a1a:	123f      	asrs	r7, r7, #8
 8021a1c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8021a20:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8021a22:	f10e 0e03 	add.w	lr, lr, #3
 8021a26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021a2a:	441d      	add	r5, r3
 8021a2c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021a2e:	441e      	add	r6, r3
 8021a30:	e64e      	b.n	80216d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8021a32:	2800      	cmp	r0, #0
 8021a34:	f43f aee8 	beq.w	8021808 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021a38:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8021a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8021a3e:	0e12      	lsrs	r2, r2, #24
 8021a40:	9212      	str	r2, [sp, #72]	@ 0x48
 8021a42:	e6e1      	b.n	8021808 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8021a44:	b01d      	add	sp, #116	@ 0x74
 8021a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021a4a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8021a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a4e:	b087      	sub	sp, #28
 8021a50:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8021a54:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8021a58:	fb05 7003 	mla	r0, r5, r3, r7
 8021a5c:	2d00      	cmp	r5, #0
 8021a5e:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8021a62:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8021a66:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021a6a:	f2c0 810a 	blt.w	8021c82 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021a6e:	45a8      	cmp	r8, r5
 8021a70:	f340 8107 	ble.w	8021c82 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8021a74:	2f00      	cmp	r7, #0
 8021a76:	f2c0 8102 	blt.w	8021c7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021a7a:	42bb      	cmp	r3, r7
 8021a7c:	f340 80ff 	ble.w	8021c7e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8021a80:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021a84:	1c7a      	adds	r2, r7, #1
 8021a86:	f100 80ff 	bmi.w	8021c88 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021a8a:	4293      	cmp	r3, r2
 8021a8c:	f340 80fc 	ble.w	8021c88 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8021a90:	2c00      	cmp	r4, #0
 8021a92:	f000 80fb 	beq.w	8021c8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8021a96:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021a9a:	3501      	adds	r5, #1
 8021a9c:	f100 80fa 	bmi.w	8021c94 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021aa0:	45a8      	cmp	r8, r5
 8021aa2:	f340 80f7 	ble.w	8021c94 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8021aa6:	f1be 0f00 	cmp.w	lr, #0
 8021aaa:	f000 80f6 	beq.w	8021c9a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8021aae:	2f00      	cmp	r7, #0
 8021ab0:	f2c0 80ee 	blt.w	8021c90 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021ab4:	42bb      	cmp	r3, r7
 8021ab6:	f340 80eb 	ble.w	8021c90 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8021aba:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021abe:	3701      	adds	r7, #1
 8021ac0:	f100 80ee 	bmi.w	8021ca0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021ac4:	42bb      	cmp	r3, r7
 8021ac6:	f340 80eb 	ble.w	8021ca0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8021aca:	2c00      	cmp	r4, #0
 8021acc:	f000 80ea 	beq.w	8021ca4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8021ad0:	3301      	adds	r3, #1
 8021ad2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021ad6:	fa1f fc84 	uxth.w	ip, r4
 8021ada:	fa1f fe8e 	uxth.w	lr, lr
 8021ade:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021ae2:	fb0c f90e 	mul.w	r9, ip, lr
 8021ae6:	0e13      	lsrs	r3, r2, #24
 8021ae8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021aec:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021af0:	9302      	str	r3, [sp, #8]
 8021af2:	ebac 0709 	sub.w	r7, ip, r9
 8021af6:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8021afa:	fa1f f48e 	uxth.w	r4, lr
 8021afe:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8021b02:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8021b06:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021b0a:	fb0a fe0e 	mul.w	lr, sl, lr
 8021b0e:	1b1b      	subs	r3, r3, r4
 8021b10:	fb0a f606 	mul.w	r6, sl, r6
 8021b14:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021b18:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021b1c:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8021b20:	b29b      	uxth	r3, r3
 8021b22:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021b26:	b2bf      	uxth	r7, r7
 8021b28:	9301      	str	r3, [sp, #4]
 8021b2a:	44e6      	add	lr, ip
 8021b2c:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8021b30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b34:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021b38:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8021b3c:	9303      	str	r3, [sp, #12]
 8021b3e:	0a33      	lsrs	r3, r6, #8
 8021b40:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8021b44:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8021b48:	9304      	str	r3, [sp, #16]
 8021b4a:	fb0b f606 	mul.w	r6, fp, r6
 8021b4e:	fb0b f000 	mul.w	r0, fp, r0
 8021b52:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021b56:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021b5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021b5e:	44b6      	add	lr, r6
 8021b60:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8021b64:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021b68:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8021b6c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8021b70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021b74:	fb08 f606 	mul.w	r6, r8, r6
 8021b78:	0a03      	lsrs	r3, r0, #8
 8021b7a:	fb08 f505 	mul.w	r5, r8, r5
 8021b7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021b82:	0a30      	lsrs	r0, r6, #8
 8021b84:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021b88:	9305      	str	r3, [sp, #20]
 8021b8a:	0e13      	lsrs	r3, r2, #24
 8021b8c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021b90:	fb0e fe07 	mul.w	lr, lr, r7
 8021b94:	4430      	add	r0, r6
 8021b96:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8021b9a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021b9e:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8021ba2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021ba6:	0a00      	lsrs	r0, r0, #8
 8021ba8:	435e      	muls	r6, r3
 8021baa:	0a2d      	lsrs	r5, r5, #8
 8021bac:	435a      	muls	r2, r3
 8021bae:	9b03      	ldr	r3, [sp, #12]
 8021bb0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021bb4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8021bb8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8021bbc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021bc0:	44b4      	add	ip, r6
 8021bc2:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8021bc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021bca:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021bce:	9e01      	ldr	r6, [sp, #4]
 8021bd0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021bd4:	fb03 ee06 	mla	lr, r3, r6, lr
 8021bd8:	9b04      	ldr	r3, [sp, #16]
 8021bda:	0a12      	lsrs	r2, r2, #8
 8021bdc:	fb0c ee09 	mla	lr, ip, r9, lr
 8021be0:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8021be4:	9b05      	ldr	r3, [sp, #20]
 8021be6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021bea:	fb00 ee04 	mla	lr, r0, r4, lr
 8021bee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021bf2:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8021bf6:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8021bfa:	9b01      	ldr	r3, [sp, #4]
 8021bfc:	fb07 fe0e 	mul.w	lr, r7, lr
 8021c00:	fb07 f70b 	mul.w	r7, r7, fp
 8021c04:	fb03 ee06 	mla	lr, r3, r6, lr
 8021c08:	fb03 730a 	mla	r3, r3, sl, r7
 8021c0c:	fb09 e202 	mla	r2, r9, r2, lr
 8021c10:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8021c14:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021c18:	fb04 3408 	mla	r4, r4, r8, r3
 8021c1c:	9b02      	ldr	r3, [sp, #8]
 8021c1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021c22:	fb09 4903 	mla	r9, r9, r3, r4
 8021c26:	780b      	ldrb	r3, [r1, #0]
 8021c28:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8021c2c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8021c30:	ea40 0e0e 	orr.w	lr, r0, lr
 8021c34:	fa5f f989 	uxtb.w	r9, r9
 8021c38:	fb03 f209 	mul.w	r2, r3, r9
 8021c3c:	1c53      	adds	r3, r2, #1
 8021c3e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c42:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021c46:	700b      	strb	r3, [r1, #0]
 8021c48:	784b      	ldrb	r3, [r1, #1]
 8021c4a:	fb03 f309 	mul.w	r3, r3, r9
 8021c4e:	1c5a      	adds	r2, r3, #1
 8021c50:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021c54:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8021c58:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8021c5c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c60:	704b      	strb	r3, [r1, #1]
 8021c62:	788b      	ldrb	r3, [r1, #2]
 8021c64:	fb03 f909 	mul.w	r9, r3, r9
 8021c68:	f109 0301 	add.w	r3, r9, #1
 8021c6c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8021c70:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8021c74:	f881 e002 	strb.w	lr, [r1, #2]
 8021c78:	b007      	add	sp, #28
 8021c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c7e:	2600      	movs	r6, #0
 8021c80:	e700      	b.n	8021a84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8021c82:	2000      	movs	r0, #0
 8021c84:	4606      	mov	r6, r0
 8021c86:	e708      	b.n	8021a9a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021c88:	2000      	movs	r0, #0
 8021c8a:	e706      	b.n	8021a9a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021c8c:	4620      	mov	r0, r4
 8021c8e:	e704      	b.n	8021a9a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8021c90:	2500      	movs	r5, #0
 8021c92:	e714      	b.n	8021abe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8021c94:	2200      	movs	r2, #0
 8021c96:	4615      	mov	r5, r2
 8021c98:	e71d      	b.n	8021ad6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021c9a:	4672      	mov	r2, lr
 8021c9c:	4675      	mov	r5, lr
 8021c9e:	e71a      	b.n	8021ad6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021ca0:	2200      	movs	r2, #0
 8021ca2:	e718      	b.n	8021ad6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8021ca4:	4622      	mov	r2, r4
 8021ca6:	e716      	b.n	8021ad6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08021ca8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cac:	b099      	sub	sp, #100	@ 0x64
 8021cae:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8021cb2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8021cb4:	9017      	str	r0, [sp, #92]	@ 0x5c
 8021cb6:	9306      	str	r3, [sp, #24]
 8021cb8:	6850      	ldr	r0, [r2, #4]
 8021cba:	6812      	ldr	r2, [r2, #0]
 8021cbc:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8021cc0:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8021cc4:	fb00 1303 	mla	r3, r0, r3, r1
 8021cc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ccc:	18d3      	adds	r3, r2, r3
 8021cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8021cd0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8021cd6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8021cd8:	2b00      	cmp	r3, #0
 8021cda:	dc03      	bgt.n	8021ce4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021cdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	f340 8360 	ble.w	80223a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8021ce4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021ce6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021cea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021cee:	1e48      	subs	r0, r1, #1
 8021cf0:	1e57      	subs	r7, r2, #1
 8021cf2:	9b06      	ldr	r3, [sp, #24]
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	f340 817b 	ble.w	8021ff0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8021cfa:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021cfe:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021d02:	d406      	bmi.n	8021d12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021d04:	4584      	cmp	ip, r0
 8021d06:	da04      	bge.n	8021d12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	db02      	blt.n	8021d12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021d0c:	42bb      	cmp	r3, r7
 8021d0e:	f2c0 8170 	blt.w	8021ff2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8021d12:	f11c 0c01 	adds.w	ip, ip, #1
 8021d16:	f100 8160 	bmi.w	8021fda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d1a:	4561      	cmp	r1, ip
 8021d1c:	f2c0 815d 	blt.w	8021fda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d20:	3301      	adds	r3, #1
 8021d22:	f100 815a 	bmi.w	8021fda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d26:	429a      	cmp	r2, r3
 8021d28:	f2c0 8157 	blt.w	8021fda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8021d2c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8021d30:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021d32:	f1b8 0f00 	cmp.w	r8, #0
 8021d36:	f340 8179 	ble.w	802202c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8021d3a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8021d3c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021d40:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8021d42:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8021d46:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021d4a:	142a      	asrs	r2, r5, #16
 8021d4c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021d50:	689b      	ldr	r3, [r3, #8]
 8021d52:	f100 81be 	bmi.w	80220d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021d56:	f103 39ff 	add.w	r9, r3, #4294967295
 8021d5a:	454a      	cmp	r2, r9
 8021d5c:	f280 81b9 	bge.w	80220d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021d60:	f1bc 0f00 	cmp.w	ip, #0
 8021d64:	f2c0 81b5 	blt.w	80220d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021d68:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021d6c:	45cc      	cmp	ip, r9
 8021d6e:	f280 81b0 	bge.w	80220d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8021d72:	b21b      	sxth	r3, r3
 8021d74:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021d76:	fb0c 2203 	mla	r2, ip, r3, r2
 8021d7a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8021d7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021d82:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021d86:	2900      	cmp	r1, #0
 8021d88:	f000 8197 	beq.w	80220ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8021d8c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8021d90:	940a      	str	r4, [sp, #40]	@ 0x28
 8021d92:	0e24      	lsrs	r4, r4, #24
 8021d94:	9411      	str	r4, [sp, #68]	@ 0x44
 8021d96:	b180      	cbz	r0, 8021dba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021d98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8021d9c:	3b01      	subs	r3, #1
 8021d9e:	009b      	lsls	r3, r3, #2
 8021da0:	3304      	adds	r3, #4
 8021da2:	eb09 0c03 	add.w	ip, r9, r3
 8021da6:	f859 3003 	ldr.w	r3, [r9, r3]
 8021daa:	9307      	str	r3, [sp, #28]
 8021dac:	0e1b      	lsrs	r3, r3, #24
 8021dae:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021db0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021db6:	0e1b      	lsrs	r3, r3, #24
 8021db8:	9312      	str	r3, [sp, #72]	@ 0x48
 8021dba:	b289      	uxth	r1, r1
 8021dbc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8021dbe:	b280      	uxth	r0, r0
 8021dc0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021dc2:	fb01 fa00 	mul.w	sl, r1, r0
 8021dc6:	0109      	lsls	r1, r1, #4
 8021dc8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8021dcc:	eba1 090a 	sub.w	r9, r1, sl
 8021dd0:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8021dd4:	b280      	uxth	r0, r0
 8021dd6:	fa1f f989 	uxth.w	r9, r9
 8021dda:	1a09      	subs	r1, r1, r0
 8021ddc:	fb09 f303 	mul.w	r3, r9, r3
 8021de0:	b289      	uxth	r1, r1
 8021de2:	fb01 330e 	mla	r3, r1, lr, r3
 8021de6:	fb00 3304 	mla	r3, r0, r4, r3
 8021dea:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021dec:	fb0a 3304 	mla	r3, sl, r4, r3
 8021df0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	f000 80e8 	beq.w	8021fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8021dfa:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8021dfe:	d01b      	beq.n	8021e38 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8021e00:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8021e04:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021e08:	fb0e fb0b 	mul.w	fp, lr, fp
 8021e0c:	fb0e fe02 	mul.w	lr, lr, r2
 8021e10:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8021e14:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021e18:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8021e1c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021e20:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021e24:	445a      	add	r2, fp
 8021e26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e2a:	0a12      	lsrs	r2, r2, #8
 8021e2c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8021e30:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8021e34:	ea42 020c 	orr.w	r2, r2, ip
 8021e38:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e3a:	2cff      	cmp	r4, #255	@ 0xff
 8021e3c:	d021      	beq.n	8021e82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8021e3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021e40:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021e44:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e46:	fb04 fc0c 	mul.w	ip, r4, ip
 8021e4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021e4c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021e50:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8021e54:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021e56:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8021e5a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021e5e:	fb04 fb0b 	mul.w	fp, r4, fp
 8021e62:	44e6      	add	lr, ip
 8021e64:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8021e68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e6c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021e70:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021e74:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021e78:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8021e7c:	ea4e 040b 	orr.w	r4, lr, fp
 8021e80:	940a      	str	r4, [sp, #40]	@ 0x28
 8021e82:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021e84:	2cff      	cmp	r4, #255	@ 0xff
 8021e86:	d021      	beq.n	8021ecc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8021e88:	9c07      	ldr	r4, [sp, #28]
 8021e8a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021e8e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021e90:	fb04 fc0c 	mul.w	ip, r4, ip
 8021e94:	9c07      	ldr	r4, [sp, #28]
 8021e96:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021e9a:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8021e9e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8021ea0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8021ea4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021ea8:	fb04 fb0b 	mul.w	fp, r4, fp
 8021eac:	44e6      	add	lr, ip
 8021eae:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8021eb2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021eb6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021eba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021ebe:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021ec2:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8021ec6:	ea4e 040b 	orr.w	r4, lr, fp
 8021eca:	9407      	str	r4, [sp, #28]
 8021ecc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021ece:	2cff      	cmp	r4, #255	@ 0xff
 8021ed0:	d021      	beq.n	8021f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8021ed2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021ed4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021ed8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021eda:	fb04 fc0c 	mul.w	ip, r4, ip
 8021ede:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021ee0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8021ee4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8021ee8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8021eea:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8021eee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021ef2:	fb04 fb0b 	mul.w	fp, r4, fp
 8021ef6:	44e6      	add	lr, ip
 8021ef8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8021efc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f00:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8021f04:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021f08:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8021f0c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8021f10:	ea4e 040b 	orr.w	r4, lr, fp
 8021f14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8021f16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021f18:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8021f1c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8021f20:	2bff      	cmp	r3, #255	@ 0xff
 8021f22:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021f26:	9c07      	ldr	r4, [sp, #28]
 8021f28:	fb09 fc0c 	mul.w	ip, r9, ip
 8021f2c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021f30:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021f34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021f36:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021f3a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021f3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021f40:	fb0a cc0e 	mla	ip, sl, lr, ip
 8021f44:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8021f48:	fb09 f90e 	mul.w	r9, r9, lr
 8021f4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f50:	fb01 9202 	mla	r2, r1, r2, r9
 8021f54:	9907      	ldr	r1, [sp, #28]
 8021f56:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021f5a:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8021f5e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021f60:	fb00 220b 	mla	r2, r0, fp, r2
 8021f64:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8021f68:	fb0a 2a00 	mla	sl, sl, r0, r2
 8021f6c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021f70:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021f74:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021f78:	fa5f f08c 	uxtb.w	r0, ip
 8021f7c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8021f80:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8021f84:	f000 80a2 	beq.w	80220cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8021f88:	43db      	mvns	r3, r3
 8021f8a:	783a      	ldrb	r2, [r7, #0]
 8021f8c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8021f90:	b2db      	uxtb	r3, r3
 8021f92:	fb02 fe03 	mul.w	lr, r2, r3
 8021f96:	fb0a fa03 	mul.w	sl, sl, r3
 8021f9a:	f10e 0201 	add.w	r2, lr, #1
 8021f9e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8021fa2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8021fa6:	703a      	strb	r2, [r7, #0]
 8021fa8:	787a      	ldrb	r2, [r7, #1]
 8021faa:	fb02 f003 	mul.w	r0, r2, r3
 8021fae:	f10a 0301 	add.w	r3, sl, #1
 8021fb2:	1c42      	adds	r2, r0, #1
 8021fb4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8021fb8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021fbc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021fc0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021fc4:	707a      	strb	r2, [r7, #1]
 8021fc6:	f887 c002 	strb.w	ip, [r7, #2]
 8021fca:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021fcc:	3703      	adds	r7, #3
 8021fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8021fd2:	441d      	add	r5, r3
 8021fd4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021fd6:	441e      	add	r6, r3
 8021fd8:	e6ab      	b.n	8021d32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021fda:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8021fdc:	441d      	add	r5, r3
 8021fde:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8021fe0:	441e      	add	r6, r3
 8021fe2:	9b06      	ldr	r3, [sp, #24]
 8021fe4:	3b01      	subs	r3, #1
 8021fe6:	9306      	str	r3, [sp, #24]
 8021fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021fea:	3303      	adds	r3, #3
 8021fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8021fee:	e680      	b.n	8021cf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021ff0:	d024      	beq.n	802203c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8021ff2:	9b06      	ldr	r3, [sp, #24]
 8021ff4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8021ff6:	3b01      	subs	r3, #1
 8021ff8:	fb00 5003 	mla	r0, r0, r3, r5
 8021ffc:	1400      	asrs	r0, r0, #16
 8021ffe:	f53f ae95 	bmi.w	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022002:	3901      	subs	r1, #1
 8022004:	4288      	cmp	r0, r1
 8022006:	f6bf ae91 	bge.w	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802200a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 802200c:	fb01 6303 	mla	r3, r1, r3, r6
 8022010:	141b      	asrs	r3, r3, #16
 8022012:	f53f ae8b 	bmi.w	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022016:	3a01      	subs	r2, #1
 8022018:	4293      	cmp	r3, r2
 802201a:	f6bf ae87 	bge.w	8021d2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802201e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022020:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022024:	1cdf      	adds	r7, r3, #3
 8022026:	f1bb 0f00 	cmp.w	fp, #0
 802202a:	dc6e      	bgt.n	802210a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802202c:	9b06      	ldr	r3, [sp, #24]
 802202e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022034:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022038:	4423      	add	r3, r4
 802203a:	9309      	str	r3, [sp, #36]	@ 0x24
 802203c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802203e:	2b00      	cmp	r3, #0
 8022040:	f340 81b0 	ble.w	80223a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022044:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022048:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802204a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802204e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022052:	eef0 6a62 	vmov.f32	s13, s5
 8022056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802205a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802205e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022062:	ee16 5a90 	vmov	r5, s13
 8022066:	eef0 6a43 	vmov.f32	s13, s6
 802206a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802206e:	ee16 6a90 	vmov	r6, s13
 8022072:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022076:	ee61 7a27 	vmul.f32	s15, s2, s15
 802207a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802207e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022082:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022086:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802208a:	ee12 2a90 	vmov	r2, s5
 802208e:	eef0 2a47 	vmov.f32	s5, s14
 8022092:	fb92 f3f3 	sdiv	r3, r2, r3
 8022096:	ee13 2a10 	vmov	r2, s6
 802209a:	9325      	str	r3, [sp, #148]	@ 0x94
 802209c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802209e:	eeb0 3a67 	vmov.f32	s6, s15
 80220a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80220a6:	9326      	str	r3, [sp, #152]	@ 0x98
 80220a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80220aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80220ac:	3b01      	subs	r3, #1
 80220ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80220b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80220b2:	bf08      	it	eq
 80220b4:	4613      	moveq	r3, r2
 80220b6:	9306      	str	r3, [sp, #24]
 80220b8:	e60d      	b.n	8021cd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80220ba:	2800      	cmp	r0, #0
 80220bc:	f43f ae7d 	beq.w	8021dba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80220c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80220c4:	9307      	str	r3, [sp, #28]
 80220c6:	0e1b      	lsrs	r3, r3, #24
 80220c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80220ca:	e676      	b.n	8021dba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80220cc:	7038      	strb	r0, [r7, #0]
 80220ce:	7079      	strb	r1, [r7, #1]
 80220d0:	e779      	b.n	8021fc6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80220d2:	f112 0901 	adds.w	r9, r2, #1
 80220d6:	f53f af78 	bmi.w	8021fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80220da:	454b      	cmp	r3, r9
 80220dc:	f6ff af75 	blt.w	8021fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80220e0:	f11c 0901 	adds.w	r9, ip, #1
 80220e4:	f53f af71 	bmi.w	8021fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80220e8:	45ce      	cmp	lr, r9
 80220ea:	f6ff af6e 	blt.w	8021fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80220ee:	b21b      	sxth	r3, r3
 80220f0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80220f4:	fa0f f28e 	sxth.w	r2, lr
 80220f8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80220fc:	9200      	str	r2, [sp, #0]
 80220fe:	4639      	mov	r1, r7
 8022100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022102:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8022104:	f7ff fca1 	bl	8021a4a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022108:	e75f      	b.n	8021fca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802210a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802210c:	1429      	asrs	r1, r5, #16
 802210e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022110:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022114:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8022118:	1433      	asrs	r3, r6, #16
 802211a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802211e:	fb0c 1303 	mla	r3, ip, r3, r1
 8022122:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8022124:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022128:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802212c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022130:	2a00      	cmp	r2, #0
 8022132:	f000 8129 	beq.w	8022388 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022136:	684c      	ldr	r4, [r1, #4]
 8022138:	940c      	str	r4, [sp, #48]	@ 0x30
 802213a:	0e24      	lsrs	r4, r4, #24
 802213c:	9413      	str	r4, [sp, #76]	@ 0x4c
 802213e:	b198      	cbz	r0, 8022168 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022140:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8022144:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022148:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802214c:	f10c 0c04 	add.w	ip, ip, #4
 8022150:	eb01 080c 	add.w	r8, r1, ip
 8022154:	f851 100c 	ldr.w	r1, [r1, ip]
 8022158:	9108      	str	r1, [sp, #32]
 802215a:	0e09      	lsrs	r1, r1, #24
 802215c:	9110      	str	r1, [sp, #64]	@ 0x40
 802215e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022162:	910d      	str	r1, [sp, #52]	@ 0x34
 8022164:	0e09      	lsrs	r1, r1, #24
 8022166:	9114      	str	r1, [sp, #80]	@ 0x50
 8022168:	b292      	uxth	r2, r2
 802216a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802216c:	b280      	uxth	r0, r0
 802216e:	fb02 f900 	mul.w	r9, r2, r0
 8022172:	0112      	lsls	r2, r2, #4
 8022174:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022178:	eba2 0809 	sub.w	r8, r2, r9
 802217c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8022180:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022182:	b280      	uxth	r0, r0
 8022184:	fa1f f888 	uxth.w	r8, r8
 8022188:	1a09      	subs	r1, r1, r0
 802218a:	fb08 f202 	mul.w	r2, r8, r2
 802218e:	b289      	uxth	r1, r1
 8022190:	fb01 220e 	mla	r2, r1, lr, r2
 8022194:	fb00 2204 	mla	r2, r0, r4, r2
 8022198:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802219a:	fb09 2204 	mla	r2, r9, r4, r2
 802219e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80221a2:	2a00      	cmp	r2, #0
 80221a4:	f000 80e8 	beq.w	8022378 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80221a8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80221ac:	d01b      	beq.n	80221e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80221ae:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80221b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80221b6:	fb0e fa0a 	mul.w	sl, lr, sl
 80221ba:	fb0e fe03 	mul.w	lr, lr, r3
 80221be:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80221c2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80221c6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80221ca:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80221ce:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80221d2:	4453      	add	r3, sl
 80221d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221d8:	0a1b      	lsrs	r3, r3, #8
 80221da:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80221de:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80221e2:	ea43 030c 	orr.w	r3, r3, ip
 80221e6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80221e8:	2cff      	cmp	r4, #255	@ 0xff
 80221ea:	d021      	beq.n	8022230 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80221ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80221ee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80221f2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80221f4:	fb04 fc0c 	mul.w	ip, r4, ip
 80221f8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80221fa:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80221fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022202:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022204:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022208:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802220c:	fb04 fa0a 	mul.w	sl, r4, sl
 8022210:	44e6      	add	lr, ip
 8022212:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022216:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802221a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802221e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022222:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022226:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802222a:	ea4e 040a 	orr.w	r4, lr, sl
 802222e:	940c      	str	r4, [sp, #48]	@ 0x30
 8022230:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8022232:	2cff      	cmp	r4, #255	@ 0xff
 8022234:	d021      	beq.n	802227a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8022236:	9c08      	ldr	r4, [sp, #32]
 8022238:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802223c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802223e:	fb04 fc0c 	mul.w	ip, r4, ip
 8022242:	9c08      	ldr	r4, [sp, #32]
 8022244:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022248:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802224a:	fb04 fa0e 	mul.w	sl, r4, lr
 802224e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022252:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022256:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802225a:	44e6      	add	lr, ip
 802225c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022260:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022264:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022268:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802226c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022270:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022274:	ea4e 040a 	orr.w	r4, lr, sl
 8022278:	9408      	str	r4, [sp, #32]
 802227a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802227c:	2cff      	cmp	r4, #255	@ 0xff
 802227e:	d021      	beq.n	80222c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022280:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022282:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022286:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022288:	fb04 fc0c 	mul.w	ip, r4, ip
 802228c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802228e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022292:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022296:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8022298:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802229c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80222a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80222a4:	44e6      	add	lr, ip
 80222a6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80222aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80222b2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80222b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222ba:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80222be:	ea4e 040a 	orr.w	r4, lr, sl
 80222c2:	940d      	str	r4, [sp, #52]	@ 0x34
 80222c4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80222c6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80222ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80222ce:	2aff      	cmp	r2, #255	@ 0xff
 80222d0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80222d4:	9c08      	ldr	r4, [sp, #32]
 80222d6:	fb08 fc0c 	mul.w	ip, r8, ip
 80222da:	fb01 cc0e 	mla	ip, r1, lr, ip
 80222de:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80222e2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80222e4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80222e8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80222ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80222ee:	fb09 cc0e 	mla	ip, r9, lr, ip
 80222f2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80222f6:	fb08 f80e 	mul.w	r8, r8, lr
 80222fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80222fe:	fb01 8303 	mla	r3, r1, r3, r8
 8022302:	9908      	ldr	r1, [sp, #32]
 8022304:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022308:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802230c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802230e:	fb00 330a 	mla	r3, r0, sl, r3
 8022312:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8022316:	fb09 3e0e 	mla	lr, r9, lr, r3
 802231a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802231e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022322:	ea4c 0c0e 	orr.w	ip, ip, lr
 8022326:	fa5f f08c 	uxtb.w	r0, ip
 802232a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802232e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022332:	d032      	beq.n	802239a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8022334:	43d2      	mvns	r2, r2
 8022336:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802233a:	b2d2      	uxtb	r2, r2
 802233c:	fb0e fe02 	mul.w	lr, lr, r2
 8022340:	f10e 0301 	add.w	r3, lr, #1
 8022344:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8022348:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802234c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8022350:	4350      	muls	r0, r2
 8022352:	f807 3c03 	strb.w	r3, [r7, #-3]
 8022356:	1c43      	adds	r3, r0, #1
 8022358:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802235c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022360:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8022364:	4353      	muls	r3, r2
 8022366:	f807 1c02 	strb.w	r1, [r7, #-2]
 802236a:	1c5a      	adds	r2, r3, #1
 802236c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022370:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8022374:	f807 cc01 	strb.w	ip, [r7, #-1]
 8022378:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802237a:	3703      	adds	r7, #3
 802237c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022380:	441d      	add	r5, r3
 8022382:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022384:	441e      	add	r6, r3
 8022386:	e64e      	b.n	8022026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8022388:	2800      	cmp	r0, #0
 802238a:	f43f aeed 	beq.w	8022168 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802238e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8022392:	9108      	str	r1, [sp, #32]
 8022394:	0e09      	lsrs	r1, r1, #24
 8022396:	9110      	str	r1, [sp, #64]	@ 0x40
 8022398:	e6e6      	b.n	8022168 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802239a:	f807 0c03 	strb.w	r0, [r7, #-3]
 802239e:	f807 1c02 	strb.w	r1, [r7, #-2]
 80223a2:	e7e7      	b.n	8022374 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80223a4:	b019      	add	sp, #100	@ 0x64
 80223a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080223ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80223ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223b0:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80223b4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80223b8:	2c00      	cmp	r4, #0
 80223ba:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80223be:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80223c2:	fb00 4e03 	mla	lr, r0, r3, r4
 80223c6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80223ca:	f2c0 80b8 	blt.w	802253e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80223ce:	45a1      	cmp	r9, r4
 80223d0:	f340 80b5 	ble.w	802253e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80223d4:	2800      	cmp	r0, #0
 80223d6:	f2c0 80b2 	blt.w	802253e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80223da:	4580      	cmp	r8, r0
 80223dc:	f340 80af 	ble.w	802253e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80223e0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 80223e4:	f01e 0f01 	tst.w	lr, #1
 80223e8:	5d56      	ldrb	r6, [r2, r5]
 80223ea:	bf0c      	ite	eq
 80223ec:	f006 060f 	andeq.w	r6, r6, #15
 80223f0:	1136      	asrne	r6, r6, #4
 80223f2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80223f6:	b2f6      	uxtb	r6, r6
 80223f8:	f114 0a01 	adds.w	sl, r4, #1
 80223fc:	f100 80a1 	bmi.w	8022542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022400:	45d1      	cmp	r9, sl
 8022402:	f340 809e 	ble.w	8022542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022406:	2800      	cmp	r0, #0
 8022408:	f2c0 809b 	blt.w	8022542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802240c:	4580      	cmp	r8, r0
 802240e:	f340 8098 	ble.w	8022542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8022412:	2f00      	cmp	r7, #0
 8022414:	f000 8097 	beq.w	8022546 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8022418:	f10e 0b01 	add.w	fp, lr, #1
 802241c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022420:	f01b 0f01 	tst.w	fp, #1
 8022424:	5d55      	ldrb	r5, [r2, r5]
 8022426:	bf0c      	ite	eq
 8022428:	f005 050f 	andeq.w	r5, r5, #15
 802242c:	112d      	asrne	r5, r5, #4
 802242e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022432:	b2ed      	uxtb	r5, r5
 8022434:	f1bc 0f00 	cmp.w	ip, #0
 8022438:	f000 8089 	beq.w	802254e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 802243c:	2c00      	cmp	r4, #0
 802243e:	f100 0001 	add.w	r0, r0, #1
 8022442:	f2c0 8082 	blt.w	802254a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022446:	45a1      	cmp	r9, r4
 8022448:	dd7f      	ble.n	802254a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802244a:	2800      	cmp	r0, #0
 802244c:	db7d      	blt.n	802254a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802244e:	4580      	cmp	r8, r0
 8022450:	dd7b      	ble.n	802254a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8022452:	eb03 0b0e 	add.w	fp, r3, lr
 8022456:	ea4f 045b 	mov.w	r4, fp, lsr #1
 802245a:	f01b 0f01 	tst.w	fp, #1
 802245e:	5d14      	ldrb	r4, [r2, r4]
 8022460:	bf0c      	ite	eq
 8022462:	f004 040f 	andeq.w	r4, r4, #15
 8022466:	1124      	asrne	r4, r4, #4
 8022468:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802246c:	b2e4      	uxtb	r4, r4
 802246e:	f1ba 0f00 	cmp.w	sl, #0
 8022472:	db6f      	blt.n	8022554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022474:	45d1      	cmp	r9, sl
 8022476:	dd6d      	ble.n	8022554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022478:	2800      	cmp	r0, #0
 802247a:	db6b      	blt.n	8022554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 802247c:	4580      	cmp	r8, r0
 802247e:	dd69      	ble.n	8022554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8022480:	2f00      	cmp	r7, #0
 8022482:	d069      	beq.n	8022558 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8022484:	3301      	adds	r3, #1
 8022486:	449e      	add	lr, r3
 8022488:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802248c:	f01e 0f01 	tst.w	lr, #1
 8022490:	5cd0      	ldrb	r0, [r2, r3]
 8022492:	bf0c      	ite	eq
 8022494:	f000 000f 	andeq.w	r0, r0, #15
 8022498:	1100      	asrne	r0, r0, #4
 802249a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802249e:	b2c3      	uxtb	r3, r0
 80224a0:	b2ba      	uxth	r2, r7
 80224a2:	fa1f fc8c 	uxth.w	ip, ip
 80224a6:	fb02 f00c 	mul.w	r0, r2, ip
 80224aa:	0112      	lsls	r2, r2, #4
 80224ac:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80224b0:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80224b4:	1a12      	subs	r2, r2, r0
 80224b6:	fa1f fc8c 	uxth.w	ip, ip
 80224ba:	b292      	uxth	r2, r2
 80224bc:	eba7 070c 	sub.w	r7, r7, ip
 80224c0:	436a      	muls	r2, r5
 80224c2:	b2bf      	uxth	r7, r7
 80224c4:	fb06 2207 	mla	r2, r6, r7, r2
 80224c8:	fb0c 2404 	mla	r4, ip, r4, r2
 80224cc:	fb00 4303 	mla	r3, r0, r3, r4
 80224d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80224d4:	b38b      	cbz	r3, 802253a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 80224d6:	4a21      	ldr	r2, [pc, #132]	@ (802255c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 80224d8:	6814      	ldr	r4, [r2, #0]
 80224da:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 80224de:	b2e5      	uxtb	r5, r4
 80224e0:	4353      	muls	r3, r2
 80224e2:	1c5a      	adds	r2, r3, #1
 80224e4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80224e8:	1212      	asrs	r2, r2, #8
 80224ea:	b290      	uxth	r0, r2
 80224ec:	43d2      	mvns	r2, r2
 80224ee:	fb15 f500 	smulbb	r5, r5, r0
 80224f2:	b2d3      	uxtb	r3, r2
 80224f4:	780a      	ldrb	r2, [r1, #0]
 80224f6:	fb02 5203 	mla	r2, r2, r3, r5
 80224fa:	b292      	uxth	r2, r2
 80224fc:	1c55      	adds	r5, r2, #1
 80224fe:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022502:	784d      	ldrb	r5, [r1, #1]
 8022504:	fb15 f503 	smulbb	r5, r5, r3
 8022508:	1212      	asrs	r2, r2, #8
 802250a:	700a      	strb	r2, [r1, #0]
 802250c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8022510:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022514:	fb02 5200 	mla	r2, r2, r0, r5
 8022518:	b292      	uxth	r2, r2
 802251a:	1c55      	adds	r5, r2, #1
 802251c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8022520:	1212      	asrs	r2, r2, #8
 8022522:	704a      	strb	r2, [r1, #1]
 8022524:	788a      	ldrb	r2, [r1, #2]
 8022526:	fb12 f303 	smulbb	r3, r2, r3
 802252a:	fb04 3300 	mla	r3, r4, r0, r3
 802252e:	b29b      	uxth	r3, r3
 8022530:	1c5a      	adds	r2, r3, #1
 8022532:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022536:	121b      	asrs	r3, r3, #8
 8022538:	708b      	strb	r3, [r1, #2]
 802253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802253e:	2600      	movs	r6, #0
 8022540:	e75a      	b.n	80223f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8022542:	2500      	movs	r5, #0
 8022544:	e776      	b.n	8022434 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8022546:	463d      	mov	r5, r7
 8022548:	e774      	b.n	8022434 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802254a:	2400      	movs	r4, #0
 802254c:	e78f      	b.n	802246e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 802254e:	4663      	mov	r3, ip
 8022550:	4664      	mov	r4, ip
 8022552:	e7a5      	b.n	80224a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022554:	2300      	movs	r3, #0
 8022556:	e7a3      	b.n	80224a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8022558:	463b      	mov	r3, r7
 802255a:	e7a1      	b.n	80224a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802255c:	24025944 	.word	0x24025944

08022560 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022564:	b097      	sub	sp, #92	@ 0x5c
 8022566:	9214      	str	r2, [sp, #80]	@ 0x50
 8022568:	9309      	str	r3, [sp, #36]	@ 0x24
 802256a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802256c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8022570:	9015      	str	r0, [sp, #84]	@ 0x54
 8022572:	910c      	str	r1, [sp, #48]	@ 0x30
 8022574:	6850      	ldr	r0, [r2, #4]
 8022576:	930e      	str	r3, [sp, #56]	@ 0x38
 8022578:	6812      	ldr	r2, [r2, #0]
 802257a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802257e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8022582:	fb00 1303 	mla	r3, r0, r3, r1
 8022586:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802258a:	eb02 0a03 	add.w	sl, r2, r3
 802258e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8022590:	689b      	ldr	r3, [r3, #8]
 8022592:	3301      	adds	r3, #1
 8022594:	f023 0301 	bic.w	r3, r3, #1
 8022598:	930f      	str	r3, [sp, #60]	@ 0x3c
 802259a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802259c:	681f      	ldr	r7, [r3, #0]
 802259e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	dc03      	bgt.n	80225ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80225a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	f340 8247 	ble.w	8022a3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80225ac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80225ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80225b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80225b6:	1e48      	subs	r0, r1, #1
 80225b8:	f102 3cff 	add.w	ip, r2, #4294967295
 80225bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225be:	2b00      	cmp	r3, #0
 80225c0:	f340 80e5 	ble.w	802278e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80225c4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 80225c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80225cc:	d406      	bmi.n	80225dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80225ce:	4586      	cmp	lr, r0
 80225d0:	da04      	bge.n	80225dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	db02      	blt.n	80225dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80225d6:	4563      	cmp	r3, ip
 80225d8:	f2c0 80da 	blt.w	8022790 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80225dc:	f11e 0e01 	adds.w	lr, lr, #1
 80225e0:	f100 80cb 	bmi.w	802277a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80225e4:	4571      	cmp	r1, lr
 80225e6:	f2c0 80c8 	blt.w	802277a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80225ea:	3301      	adds	r3, #1
 80225ec:	f100 80c5 	bmi.w	802277a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80225f0:	429a      	cmp	r2, r3
 80225f2:	f2c0 80c2 	blt.w	802277a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 80225f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80225f8:	46d0      	mov	r8, sl
 80225fa:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80225fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8022600:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022602:	2b00      	cmp	r3, #0
 8022604:	f340 80e3 	ble.w	80227ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022608:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802260a:	1430      	asrs	r0, r6, #16
 802260c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022610:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022614:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022618:	142b      	asrs	r3, r5, #16
 802261a:	f100 812e 	bmi.w	802287a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802261e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022622:	455b      	cmp	r3, fp
 8022624:	f280 8129 	bge.w	802287a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022628:	2800      	cmp	r0, #0
 802262a:	f2c0 8126 	blt.w	802287a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802262e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022632:	4558      	cmp	r0, fp
 8022634:	f280 8121 	bge.w	802287a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8022638:	fb00 3309 	mla	r3, r0, r9, r3
 802263c:	0858      	lsrs	r0, r3, #1
 802263e:	07dc      	lsls	r4, r3, #31
 8022640:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022644:	bf54      	ite	pl
 8022646:	f00c 0c0f 	andpl.w	ip, ip, #15
 802264a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802264e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022652:	fa5f fc8c 	uxtb.w	ip, ip
 8022656:	2a00      	cmp	r2, #0
 8022658:	f000 80fe 	beq.w	8022858 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 802265c:	1c58      	adds	r0, r3, #1
 802265e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022662:	07c0      	lsls	r0, r0, #31
 8022664:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022668:	bf54      	ite	pl
 802266a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802266e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022672:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022676:	fa5f f08e 	uxtb.w	r0, lr
 802267a:	9010      	str	r0, [sp, #64]	@ 0x40
 802267c:	b1d9      	cbz	r1, 80226b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802267e:	444b      	add	r3, r9
 8022680:	0858      	lsrs	r0, r3, #1
 8022682:	07dc      	lsls	r4, r3, #31
 8022684:	f103 0301 	add.w	r3, r3, #1
 8022688:	5c38      	ldrb	r0, [r7, r0]
 802268a:	bf54      	ite	pl
 802268c:	f000 000f 	andpl.w	r0, r0, #15
 8022690:	1100      	asrmi	r0, r0, #4
 8022692:	07dc      	lsls	r4, r3, #31
 8022694:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022698:	b2c0      	uxtb	r0, r0
 802269a:	900a      	str	r0, [sp, #40]	@ 0x28
 802269c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80226a0:	f817 e000 	ldrb.w	lr, [r7, r0]
 80226a4:	bf54      	ite	pl
 80226a6:	f00e 030f 	andpl.w	r3, lr, #15
 80226aa:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80226ae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80226b2:	b2db      	uxtb	r3, r3
 80226b4:	9311      	str	r3, [sp, #68]	@ 0x44
 80226b6:	b292      	uxth	r2, r2
 80226b8:	b289      	uxth	r1, r1
 80226ba:	0113      	lsls	r3, r2, #4
 80226bc:	fb02 f001 	mul.w	r0, r2, r1
 80226c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80226c2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80226c6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 80226ca:	1a1b      	subs	r3, r3, r0
 80226cc:	b289      	uxth	r1, r1
 80226ce:	b29b      	uxth	r3, r3
 80226d0:	ebae 0e01 	sub.w	lr, lr, r1
 80226d4:	4353      	muls	r3, r2
 80226d6:	fa1f fe8e 	uxth.w	lr, lr
 80226da:	fb0c 320e 	mla	r2, ip, lr, r3
 80226de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80226e0:	fb01 2203 	mla	r2, r1, r3, r2
 80226e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80226e6:	fb00 2203 	mla	r2, r0, r3, r2
 80226ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80226ee:	2a00      	cmp	r2, #0
 80226f0:	d039      	beq.n	8022766 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80226f2:	4bc7      	ldr	r3, [pc, #796]	@ (8022a10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80226f4:	6819      	ldr	r1, [r3, #0]
 80226f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80226f8:	fa5f fc81 	uxtb.w	ip, r1
 80226fc:	435a      	muls	r2, r3
 80226fe:	1c53      	adds	r3, r2, #1
 8022700:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022704:	1212      	asrs	r2, r2, #8
 8022706:	b290      	uxth	r0, r2
 8022708:	43d2      	mvns	r2, r2
 802270a:	fb1c fc00 	smulbb	ip, ip, r0
 802270e:	b2d3      	uxtb	r3, r2
 8022710:	f898 2000 	ldrb.w	r2, [r8]
 8022714:	fb02 c203 	mla	r2, r2, r3, ip
 8022718:	b292      	uxth	r2, r2
 802271a:	f102 0c01 	add.w	ip, r2, #1
 802271e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022722:	f898 c001 	ldrb.w	ip, [r8, #1]
 8022726:	fb1c fc03 	smulbb	ip, ip, r3
 802272a:	1212      	asrs	r2, r2, #8
 802272c:	f888 2000 	strb.w	r2, [r8]
 8022730:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8022734:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8022738:	fb02 c200 	mla	r2, r2, r0, ip
 802273c:	b292      	uxth	r2, r2
 802273e:	f102 0c01 	add.w	ip, r2, #1
 8022742:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022746:	1212      	asrs	r2, r2, #8
 8022748:	f888 2001 	strb.w	r2, [r8, #1]
 802274c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8022750:	fb12 f303 	smulbb	r3, r2, r3
 8022754:	fb01 3300 	mla	r3, r1, r0, r3
 8022758:	b29b      	uxth	r3, r3
 802275a:	1c5a      	adds	r2, r3, #1
 802275c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8022760:	121b      	asrs	r3, r3, #8
 8022762:	f888 3002 	strb.w	r3, [r8, #2]
 8022766:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022768:	f108 0803 	add.w	r8, r8, #3
 802276c:	441d      	add	r5, r3
 802276e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022770:	441e      	add	r6, r3
 8022772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022774:	3b01      	subs	r3, #1
 8022776:	930d      	str	r3, [sp, #52]	@ 0x34
 8022778:	e742      	b.n	8022600 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802277a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802277c:	f10a 0a03 	add.w	sl, sl, #3
 8022780:	441d      	add	r5, r3
 8022782:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022784:	441e      	add	r6, r3
 8022786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022788:	3b01      	subs	r3, #1
 802278a:	9309      	str	r3, [sp, #36]	@ 0x24
 802278c:	e716      	b.n	80225bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802278e:	d024      	beq.n	80227da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8022790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022792:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8022794:	3b01      	subs	r3, #1
 8022796:	fb00 5003 	mla	r0, r0, r3, r5
 802279a:	1400      	asrs	r0, r0, #16
 802279c:	f53f af2b 	bmi.w	80225f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227a0:	3901      	subs	r1, #1
 80227a2:	4288      	cmp	r0, r1
 80227a4:	f6bf af27 	bge.w	80225f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227a8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80227aa:	fb01 6303 	mla	r3, r1, r3, r6
 80227ae:	141b      	asrs	r3, r3, #16
 80227b0:	f53f af21 	bmi.w	80225f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227b4:	3a01      	subs	r2, #1
 80227b6:	4293      	cmp	r3, r2
 80227b8:	f6bf af1d 	bge.w	80225f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80227bc:	f10a 0e03 	add.w	lr, sl, #3
 80227c0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80227c4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 80227c8:	f1b8 0f00 	cmp.w	r8, #0
 80227cc:	dc76      	bgt.n	80228bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 80227ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80227d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80227d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80227d8:	44a2      	add	sl, r4
 80227da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80227dc:	2b00      	cmp	r3, #0
 80227de:	f340 812c 	ble.w	8022a3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80227e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80227e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80227e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80227ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80227f0:	eef0 6a62 	vmov.f32	s13, s5
 80227f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80227f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80227fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022800:	ee16 5a90 	vmov	r5, s13
 8022804:	eef0 6a43 	vmov.f32	s13, s6
 8022808:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802280c:	ee16 6a90 	vmov	r6, s13
 8022810:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022814:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022818:	ee77 2a62 	vsub.f32	s5, s14, s5
 802281c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022820:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022824:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022828:	ee12 2a90 	vmov	r2, s5
 802282c:	eef0 2a47 	vmov.f32	s5, s14
 8022830:	fb92 f3f3 	sdiv	r3, r2, r3
 8022834:	ee13 2a10 	vmov	r2, s6
 8022838:	9323      	str	r3, [sp, #140]	@ 0x8c
 802283a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802283c:	eeb0 3a67 	vmov.f32	s6, s15
 8022840:	fb92 f3f3 	sdiv	r3, r2, r3
 8022844:	9324      	str	r3, [sp, #144]	@ 0x90
 8022846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022848:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802284a:	3b01      	subs	r3, #1
 802284c:	930c      	str	r3, [sp, #48]	@ 0x30
 802284e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022850:	bf08      	it	eq
 8022852:	4613      	moveq	r3, r2
 8022854:	9309      	str	r3, [sp, #36]	@ 0x24
 8022856:	e6a2      	b.n	802259e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022858:	2900      	cmp	r1, #0
 802285a:	f43f af2c 	beq.w	80226b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802285e:	eb09 0003 	add.w	r0, r9, r3
 8022862:	0843      	lsrs	r3, r0, #1
 8022864:	07c0      	lsls	r0, r0, #31
 8022866:	5cfb      	ldrb	r3, [r7, r3]
 8022868:	bf54      	ite	pl
 802286a:	f003 030f 	andpl.w	r3, r3, #15
 802286e:	111b      	asrmi	r3, r3, #4
 8022870:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022874:	b2db      	uxtb	r3, r3
 8022876:	930a      	str	r3, [sp, #40]	@ 0x28
 8022878:	e71d      	b.n	80226b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802287a:	f113 0b01 	adds.w	fp, r3, #1
 802287e:	f53f af72 	bmi.w	8022766 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022882:	45dc      	cmp	ip, fp
 8022884:	f6ff af6f 	blt.w	8022766 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022888:	f110 0b01 	adds.w	fp, r0, #1
 802288c:	f53f af6b 	bmi.w	8022766 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022890:	45de      	cmp	lr, fp
 8022892:	f6ff af68 	blt.w	8022766 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022896:	9302      	str	r3, [sp, #8]
 8022898:	fa0f f38e 	sxth.w	r3, lr
 802289c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802289e:	9301      	str	r3, [sp, #4]
 80228a0:	fa0f f38c 	sxth.w	r3, ip
 80228a4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80228a8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80228ac:	9300      	str	r3, [sp, #0]
 80228ae:	463a      	mov	r2, r7
 80228b0:	464b      	mov	r3, r9
 80228b2:	4641      	mov	r1, r8
 80228b4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80228b6:	f7ff fd79 	bl	80223ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80228ba:	e754      	b.n	8022766 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80228bc:	142a      	asrs	r2, r5, #16
 80228be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80228c2:	1433      	asrs	r3, r6, #16
 80228c4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80228c8:	fb09 2303 	mla	r3, r9, r3, r2
 80228cc:	085a      	lsrs	r2, r3, #1
 80228ce:	07dc      	lsls	r4, r3, #31
 80228d0:	5cba      	ldrb	r2, [r7, r2]
 80228d2:	bf54      	ite	pl
 80228d4:	f002 020f 	andpl.w	r2, r2, #15
 80228d8:	1112      	asrmi	r2, r2, #4
 80228da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80228de:	b2d2      	uxtb	r2, r2
 80228e0:	2900      	cmp	r1, #0
 80228e2:	f000 8097 	beq.w	8022a14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80228e6:	f103 0b01 	add.w	fp, r3, #1
 80228ea:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 80228ee:	f01b 0f01 	tst.w	fp, #1
 80228f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228f6:	bf0c      	ite	eq
 80228f8:	f00c 0c0f 	andeq.w	ip, ip, #15
 80228fc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8022900:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022904:	fa5f f48c 	uxtb.w	r4, ip
 8022908:	9412      	str	r4, [sp, #72]	@ 0x48
 802290a:	b300      	cbz	r0, 802294e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802290c:	444b      	add	r3, r9
 802290e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022912:	07dc      	lsls	r4, r3, #31
 8022914:	f103 0301 	add.w	r3, r3, #1
 8022918:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802291c:	bf54      	ite	pl
 802291e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022922:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022926:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802292a:	fa5f f48c 	uxtb.w	r4, ip
 802292e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022932:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022934:	07dc      	lsls	r4, r3, #31
 8022936:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802293a:	bf54      	ite	pl
 802293c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022940:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022944:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022948:	fa5f f38c 	uxtb.w	r3, ip
 802294c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802294e:	b289      	uxth	r1, r1
 8022950:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022952:	b280      	uxth	r0, r0
 8022954:	fb01 f300 	mul.w	r3, r1, r0
 8022958:	0109      	lsls	r1, r1, #4
 802295a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802295e:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8022962:	1ac9      	subs	r1, r1, r3
 8022964:	b280      	uxth	r0, r0
 8022966:	b289      	uxth	r1, r1
 8022968:	ebac 0c00 	sub.w	ip, ip, r0
 802296c:	4361      	muls	r1, r4
 802296e:	fa1f fc8c 	uxth.w	ip, ip
 8022972:	fb02 120c 	mla	r2, r2, ip, r1
 8022976:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022978:	fb00 2001 	mla	r0, r0, r1, r2
 802297c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802297e:	fb03 0302 	mla	r3, r3, r2, r0
 8022982:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022986:	2b00      	cmp	r3, #0
 8022988:	d039      	beq.n	80229fe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802298a:	4a21      	ldr	r2, [pc, #132]	@ (8022a10 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802298c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8022990:	6810      	ldr	r0, [r2, #0]
 8022992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022994:	fa5f fc80 	uxtb.w	ip, r0
 8022998:	4353      	muls	r3, r2
 802299a:	1c5a      	adds	r2, r3, #1
 802299c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80229a0:	121b      	asrs	r3, r3, #8
 80229a2:	b29a      	uxth	r2, r3
 80229a4:	43db      	mvns	r3, r3
 80229a6:	fb1c fc02 	smulbb	ip, ip, r2
 80229aa:	b2db      	uxtb	r3, r3
 80229ac:	fb01 c103 	mla	r1, r1, r3, ip
 80229b0:	b289      	uxth	r1, r1
 80229b2:	f101 0c01 	add.w	ip, r1, #1
 80229b6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80229ba:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80229be:	fb1c fc03 	smulbb	ip, ip, r3
 80229c2:	1209      	asrs	r1, r1, #8
 80229c4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80229c8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80229cc:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80229d0:	fb01 c102 	mla	r1, r1, r2, ip
 80229d4:	b289      	uxth	r1, r1
 80229d6:	f101 0c01 	add.w	ip, r1, #1
 80229da:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80229de:	1209      	asrs	r1, r1, #8
 80229e0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80229e4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80229e8:	fb11 f303 	smulbb	r3, r1, r3
 80229ec:	fb00 3002 	mla	r0, r0, r2, r3
 80229f0:	b280      	uxth	r0, r0
 80229f2:	1c42      	adds	r2, r0, #1
 80229f4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80229f8:	1200      	asrs	r0, r0, #8
 80229fa:	f80e 0c01 	strb.w	r0, [lr, #-1]
 80229fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8022a00:	f10e 0e03 	add.w	lr, lr, #3
 8022a04:	f108 38ff 	add.w	r8, r8, #4294967295
 8022a08:	441d      	add	r5, r3
 8022a0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022a0c:	441e      	add	r6, r3
 8022a0e:	e6db      	b.n	80227c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022a10:	24025944 	.word	0x24025944
 8022a14:	2800      	cmp	r0, #0
 8022a16:	d09a      	beq.n	802294e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022a18:	444b      	add	r3, r9
 8022a1a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8022a1e:	07db      	lsls	r3, r3, #31
 8022a20:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022a24:	bf54      	ite	pl
 8022a26:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022a2a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022a2e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022a32:	fa5f f38c 	uxtb.w	r3, ip
 8022a36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022a38:	e789      	b.n	802294e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8022a3a:	b017      	add	sp, #92	@ 0x5c
 8022a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8022a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a44:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8022a48:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022a4c:	2d00      	cmp	r5, #0
 8022a4e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8022a52:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8022a56:	fb04 5e03 	mla	lr, r4, r3, r5
 8022a5a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8022a5e:	f2c0 80b1 	blt.w	8022bc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022a62:	45a9      	cmp	r9, r5
 8022a64:	f340 80ae 	ble.w	8022bc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022a68:	2c00      	cmp	r4, #0
 8022a6a:	f2c0 80ab 	blt.w	8022bc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022a6e:	45a0      	cmp	r8, r4
 8022a70:	f340 80a8 	ble.w	8022bc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8022a74:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8022a78:	f01e 0f01 	tst.w	lr, #1
 8022a7c:	5d97      	ldrb	r7, [r2, r6]
 8022a7e:	bf0c      	ite	eq
 8022a80:	f007 070f 	andeq.w	r7, r7, #15
 8022a84:	113f      	asrne	r7, r7, #4
 8022a86:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8022a8a:	b2ff      	uxtb	r7, r7
 8022a8c:	f115 0a01 	adds.w	sl, r5, #1
 8022a90:	f100 809a 	bmi.w	8022bc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022a94:	45d1      	cmp	r9, sl
 8022a96:	f340 8097 	ble.w	8022bc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022a9a:	2c00      	cmp	r4, #0
 8022a9c:	f2c0 8094 	blt.w	8022bc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022aa0:	45a0      	cmp	r8, r4
 8022aa2:	f340 8091 	ble.w	8022bc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8022aa6:	2800      	cmp	r0, #0
 8022aa8:	f000 8090 	beq.w	8022bcc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8022aac:	f10e 0b01 	add.w	fp, lr, #1
 8022ab0:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8022ab4:	f01b 0f01 	tst.w	fp, #1
 8022ab8:	5d96      	ldrb	r6, [r2, r6]
 8022aba:	bf0c      	ite	eq
 8022abc:	f006 060f 	andeq.w	r6, r6, #15
 8022ac0:	1136      	asrne	r6, r6, #4
 8022ac2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022ac6:	b2f6      	uxtb	r6, r6
 8022ac8:	f1bc 0f00 	cmp.w	ip, #0
 8022acc:	f000 8082 	beq.w	8022bd4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8022ad0:	2d00      	cmp	r5, #0
 8022ad2:	f104 0401 	add.w	r4, r4, #1
 8022ad6:	db7b      	blt.n	8022bd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022ad8:	45a9      	cmp	r9, r5
 8022ada:	dd79      	ble.n	8022bd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022adc:	2c00      	cmp	r4, #0
 8022ade:	db77      	blt.n	8022bd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022ae0:	45a0      	cmp	r8, r4
 8022ae2:	dd75      	ble.n	8022bd0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8022ae4:	eb03 0b0e 	add.w	fp, r3, lr
 8022ae8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8022aec:	f01b 0f01 	tst.w	fp, #1
 8022af0:	5d55      	ldrb	r5, [r2, r5]
 8022af2:	bf0c      	ite	eq
 8022af4:	f005 050f 	andeq.w	r5, r5, #15
 8022af8:	112d      	asrne	r5, r5, #4
 8022afa:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022afe:	b2ed      	uxtb	r5, r5
 8022b00:	f1ba 0f00 	cmp.w	sl, #0
 8022b04:	db69      	blt.n	8022bda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b06:	45d1      	cmp	r9, sl
 8022b08:	dd67      	ble.n	8022bda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b0a:	2c00      	cmp	r4, #0
 8022b0c:	db65      	blt.n	8022bda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b0e:	45a0      	cmp	r8, r4
 8022b10:	dd63      	ble.n	8022bda <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8022b12:	2800      	cmp	r0, #0
 8022b14:	d063      	beq.n	8022bde <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8022b16:	3301      	adds	r3, #1
 8022b18:	449e      	add	lr, r3
 8022b1a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022b1e:	f01e 0f01 	tst.w	lr, #1
 8022b22:	5cd4      	ldrb	r4, [r2, r3]
 8022b24:	bf0c      	ite	eq
 8022b26:	f004 040f 	andeq.w	r4, r4, #15
 8022b2a:	1124      	asrne	r4, r4, #4
 8022b2c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022b30:	b2e3      	uxtb	r3, r4
 8022b32:	b282      	uxth	r2, r0
 8022b34:	fa1f fc8c 	uxth.w	ip, ip
 8022b38:	fb02 f40c 	mul.w	r4, r2, ip
 8022b3c:	0112      	lsls	r2, r2, #4
 8022b3e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8022b42:	fa1f f08c 	uxth.w	r0, ip
 8022b46:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8022b4a:	1b12      	subs	r2, r2, r4
 8022b4c:	ebac 0c00 	sub.w	ip, ip, r0
 8022b50:	b292      	uxth	r2, r2
 8022b52:	fa1f fc8c 	uxth.w	ip, ip
 8022b56:	4372      	muls	r2, r6
 8022b58:	fb07 220c 	mla	r2, r7, ip, r2
 8022b5c:	fb00 2005 	mla	r0, r0, r5, r2
 8022b60:	fb04 0303 	mla	r3, r4, r3, r0
 8022b64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b68:	b353      	cbz	r3, 8022bc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8022b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8022be4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8022b6c:	7808      	ldrb	r0, [r1, #0]
 8022b6e:	6814      	ldr	r4, [r2, #0]
 8022b70:	b29a      	uxth	r2, r3
 8022b72:	43db      	mvns	r3, r3
 8022b74:	b2e5      	uxtb	r5, r4
 8022b76:	b2db      	uxtb	r3, r3
 8022b78:	fb15 f502 	smulbb	r5, r5, r2
 8022b7c:	fb00 5003 	mla	r0, r0, r3, r5
 8022b80:	b280      	uxth	r0, r0
 8022b82:	1c45      	adds	r5, r0, #1
 8022b84:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022b88:	784d      	ldrb	r5, [r1, #1]
 8022b8a:	fb15 f503 	smulbb	r5, r5, r3
 8022b8e:	1200      	asrs	r0, r0, #8
 8022b90:	7008      	strb	r0, [r1, #0]
 8022b92:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8022b96:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8022b9a:	fb00 5002 	mla	r0, r0, r2, r5
 8022b9e:	b280      	uxth	r0, r0
 8022ba0:	1c45      	adds	r5, r0, #1
 8022ba2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8022ba6:	1200      	asrs	r0, r0, #8
 8022ba8:	7048      	strb	r0, [r1, #1]
 8022baa:	7888      	ldrb	r0, [r1, #2]
 8022bac:	fb10 f303 	smulbb	r3, r0, r3
 8022bb0:	fb04 3202 	mla	r2, r4, r2, r3
 8022bb4:	b292      	uxth	r2, r2
 8022bb6:	1c53      	adds	r3, r2, #1
 8022bb8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8022bbc:	1212      	asrs	r2, r2, #8
 8022bbe:	708a      	strb	r2, [r1, #2]
 8022bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bc4:	2700      	movs	r7, #0
 8022bc6:	e761      	b.n	8022a8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8022bc8:	2600      	movs	r6, #0
 8022bca:	e77d      	b.n	8022ac8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022bcc:	4606      	mov	r6, r0
 8022bce:	e77b      	b.n	8022ac8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8022bd0:	2500      	movs	r5, #0
 8022bd2:	e795      	b.n	8022b00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8022bd4:	4663      	mov	r3, ip
 8022bd6:	4665      	mov	r5, ip
 8022bd8:	e7ab      	b.n	8022b32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022bda:	2300      	movs	r3, #0
 8022bdc:	e7a9      	b.n	8022b32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022bde:	4603      	mov	r3, r0
 8022be0:	e7a7      	b.n	8022b32 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8022be2:	bf00      	nop
 8022be4:	24025944 	.word	0x24025944

08022be8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bec:	b093      	sub	sp, #76	@ 0x4c
 8022bee:	461c      	mov	r4, r3
 8022bf0:	920c      	str	r2, [sp, #48]	@ 0x30
 8022bf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8022bf4:	9011      	str	r0, [sp, #68]	@ 0x44
 8022bf6:	9107      	str	r1, [sp, #28]
 8022bf8:	6850      	ldr	r0, [r2, #4]
 8022bfa:	6812      	ldr	r2, [r2, #0]
 8022bfc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8022c00:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8022c04:	fb00 1303 	mla	r3, r0, r3, r1
 8022c08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c0c:	eb02 0b03 	add.w	fp, r2, r3
 8022c10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c12:	689b      	ldr	r3, [r3, #8]
 8022c14:	3301      	adds	r3, #1
 8022c16:	f023 0301 	bic.w	r3, r3, #1
 8022c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c1e:	f8d3 8000 	ldr.w	r8, [r3]
 8022c22:	9b07      	ldr	r3, [sp, #28]
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	dc03      	bgt.n	8022c30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	f340 822b 	ble.w	8023086 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022c30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c3a:	1e48      	subs	r0, r1, #1
 8022c3c:	1e57      	subs	r7, r2, #1
 8022c3e:	2c00      	cmp	r4, #0
 8022c40:	f340 80d7 	ble.w	8022df2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8022c44:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022c48:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c4c:	d406      	bmi.n	8022c5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022c4e:	4584      	cmp	ip, r0
 8022c50:	da04      	bge.n	8022c5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022c52:	2b00      	cmp	r3, #0
 8022c54:	db02      	blt.n	8022c5c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022c56:	42bb      	cmp	r3, r7
 8022c58:	f2c0 80cc 	blt.w	8022df4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022c5c:	f11c 0c01 	adds.w	ip, ip, #1
 8022c60:	f100 80bf 	bmi.w	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022c64:	4561      	cmp	r1, ip
 8022c66:	f2c0 80bc 	blt.w	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022c6a:	3301      	adds	r3, #1
 8022c6c:	f100 80b9 	bmi.w	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022c70:	429a      	cmp	r2, r3
 8022c72:	f2c0 80b6 	blt.w	8022de2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8022c76:	46a2      	mov	sl, r4
 8022c78:	465f      	mov	r7, fp
 8022c7a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022c7e:	f1ba 0f00 	cmp.w	sl, #0
 8022c82:	f340 80d4 	ble.w	8022e2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8022c86:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8022c8a:	1430      	asrs	r0, r6, #16
 8022c8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022c90:	9308      	str	r3, [sp, #32]
 8022c92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8022c94:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022c98:	142b      	asrs	r3, r5, #16
 8022c9a:	f100 8124 	bmi.w	8022ee6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022c9e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8022ca2:	4293      	cmp	r3, r2
 8022ca4:	f280 811f 	bge.w	8022ee6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022ca8:	2800      	cmp	r0, #0
 8022caa:	f2c0 811c 	blt.w	8022ee6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022cae:	f10e 32ff 	add.w	r2, lr, #4294967295
 8022cb2:	4290      	cmp	r0, r2
 8022cb4:	f280 8117 	bge.w	8022ee6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8022cb8:	fb00 3309 	mla	r3, r0, r9, r3
 8022cbc:	0858      	lsrs	r0, r3, #1
 8022cbe:	07da      	lsls	r2, r3, #31
 8022cc0:	9a08      	ldr	r2, [sp, #32]
 8022cc2:	f818 c000 	ldrb.w	ip, [r8, r0]
 8022cc6:	bf54      	ite	pl
 8022cc8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ccc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022cd0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022cd4:	fa5f fc8c 	uxtb.w	ip, ip
 8022cd8:	2a00      	cmp	r2, #0
 8022cda:	f000 80ed 	beq.w	8022eb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8022cde:	1c58      	adds	r0, r3, #1
 8022ce0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022ce4:	07c0      	lsls	r0, r0, #31
 8022ce6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022cea:	bf54      	ite	pl
 8022cec:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022cf0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022cf4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022cf8:	fa5f fe8e 	uxtb.w	lr, lr
 8022cfc:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8022d00:	b1c9      	cbz	r1, 8022d36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022d02:	444b      	add	r3, r9
 8022d04:	0858      	lsrs	r0, r3, #1
 8022d06:	07da      	lsls	r2, r3, #31
 8022d08:	f818 0000 	ldrb.w	r0, [r8, r0]
 8022d0c:	bf54      	ite	pl
 8022d0e:	f000 000f 	andpl.w	r0, r0, #15
 8022d12:	1100      	asrmi	r0, r0, #4
 8022d14:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d18:	b2c0      	uxtb	r0, r0
 8022d1a:	900a      	str	r0, [sp, #40]	@ 0x28
 8022d1c:	1c58      	adds	r0, r3, #1
 8022d1e:	0843      	lsrs	r3, r0, #1
 8022d20:	07c2      	lsls	r2, r0, #31
 8022d22:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022d26:	bf54      	ite	pl
 8022d28:	f003 030f 	andpl.w	r3, r3, #15
 8022d2c:	111b      	asrmi	r3, r3, #4
 8022d2e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022d32:	b2db      	uxtb	r3, r3
 8022d34:	930e      	str	r3, [sp, #56]	@ 0x38
 8022d36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d3a:	b289      	uxth	r1, r1
 8022d3c:	fb02 f301 	mul.w	r3, r2, r1
 8022d40:	0112      	lsls	r2, r2, #4
 8022d42:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022d46:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8022d4a:	1ad2      	subs	r2, r2, r3
 8022d4c:	b289      	uxth	r1, r1
 8022d4e:	b292      	uxth	r2, r2
 8022d50:	1a40      	subs	r0, r0, r1
 8022d52:	fa1f fe80 	uxth.w	lr, r0
 8022d56:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022d58:	4342      	muls	r2, r0
 8022d5a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022d5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022d60:	fb01 c102 	mla	r1, r1, r2, ip
 8022d64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022d66:	fb03 1302 	mla	r3, r3, r2, r1
 8022d6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d6e:	b383      	cbz	r3, 8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022d70:	4ac6      	ldr	r2, [pc, #792]	@ (802308c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022d72:	2bff      	cmp	r3, #255	@ 0xff
 8022d74:	6812      	ldr	r2, [r2, #0]
 8022d76:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8022d7a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8022d7e:	b2d2      	uxtb	r2, r2
 8022d80:	f000 80ac 	beq.w	8022edc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022d84:	b299      	uxth	r1, r3
 8022d86:	43db      	mvns	r3, r3
 8022d88:	f897 c000 	ldrb.w	ip, [r7]
 8022d8c:	fb12 f201 	smulbb	r2, r2, r1
 8022d90:	b2db      	uxtb	r3, r3
 8022d92:	fb10 f001 	smulbb	r0, r0, r1
 8022d96:	fb0c 2203 	mla	r2, ip, r3, r2
 8022d9a:	fb1e f101 	smulbb	r1, lr, r1
 8022d9e:	b292      	uxth	r2, r2
 8022da0:	f102 0c01 	add.w	ip, r2, #1
 8022da4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8022da8:	1212      	asrs	r2, r2, #8
 8022daa:	703a      	strb	r2, [r7, #0]
 8022dac:	787a      	ldrb	r2, [r7, #1]
 8022dae:	fb02 0003 	mla	r0, r2, r3, r0
 8022db2:	b280      	uxth	r0, r0
 8022db4:	1c42      	adds	r2, r0, #1
 8022db6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022dba:	78ba      	ldrb	r2, [r7, #2]
 8022dbc:	fb02 1303 	mla	r3, r2, r3, r1
 8022dc0:	1200      	asrs	r0, r0, #8
 8022dc2:	b29b      	uxth	r3, r3
 8022dc4:	7078      	strb	r0, [r7, #1]
 8022dc6:	f103 0e01 	add.w	lr, r3, #1
 8022dca:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022dce:	121b      	asrs	r3, r3, #8
 8022dd0:	70bb      	strb	r3, [r7, #2]
 8022dd2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022dd4:	3703      	adds	r7, #3
 8022dd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8022dda:	441d      	add	r5, r3
 8022ddc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022dde:	441e      	add	r6, r3
 8022de0:	e74d      	b.n	8022c7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022de2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8022de4:	3c01      	subs	r4, #1
 8022de6:	f10b 0b03 	add.w	fp, fp, #3
 8022dea:	441d      	add	r5, r3
 8022dec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8022dee:	441e      	add	r6, r3
 8022df0:	e725      	b.n	8022c3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022df2:	d021      	beq.n	8022e38 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8022df4:	1e63      	subs	r3, r4, #1
 8022df6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8022df8:	fb00 5003 	mla	r0, r0, r3, r5
 8022dfc:	1400      	asrs	r0, r0, #16
 8022dfe:	f53f af3a 	bmi.w	8022c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e02:	3901      	subs	r1, #1
 8022e04:	4288      	cmp	r0, r1
 8022e06:	f6bf af36 	bge.w	8022c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e0a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8022e0c:	fb01 6303 	mla	r3, r1, r3, r6
 8022e10:	141b      	asrs	r3, r3, #16
 8022e12:	f53f af30 	bmi.w	8022c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e16:	3a01      	subs	r2, #1
 8022e18:	4293      	cmp	r3, r2
 8022e1a:	f6bf af2c 	bge.w	8022c76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8022e1e:	f10b 0c03 	add.w	ip, fp, #3
 8022e22:	46a6      	mov	lr, r4
 8022e24:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8022e28:	f1be 0f00 	cmp.w	lr, #0
 8022e2c:	dc79      	bgt.n	8022f22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8022e2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8022e32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022e36:	44a3      	add	fp, r4
 8022e38:	9b07      	ldr	r3, [sp, #28]
 8022e3a:	2b00      	cmp	r3, #0
 8022e3c:	f340 8123 	ble.w	8023086 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022e40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022e44:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022e46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e4e:	eef0 6a62 	vmov.f32	s13, s5
 8022e52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e5e:	ee16 5a90 	vmov	r5, s13
 8022e62:	eef0 6a43 	vmov.f32	s13, s6
 8022e66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e6a:	ee16 6a90 	vmov	r6, s13
 8022e6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e86:	ee12 2a90 	vmov	r2, s5
 8022e8a:	eef0 2a47 	vmov.f32	s5, s14
 8022e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e92:	ee13 2a10 	vmov	r2, s6
 8022e96:	931f      	str	r3, [sp, #124]	@ 0x7c
 8022e98:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022e9a:	eeb0 3a67 	vmov.f32	s6, s15
 8022e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ea2:	9320      	str	r3, [sp, #128]	@ 0x80
 8022ea4:	9b07      	ldr	r3, [sp, #28]
 8022ea6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022ea8:	3b01      	subs	r3, #1
 8022eaa:	9307      	str	r3, [sp, #28]
 8022eac:	bf08      	it	eq
 8022eae:	4614      	moveq	r4, r2
 8022eb0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8022eb2:	bf18      	it	ne
 8022eb4:	461c      	movne	r4, r3
 8022eb6:	e6b4      	b.n	8022c22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022eb8:	2900      	cmp	r1, #0
 8022eba:	f43f af3c 	beq.w	8022d36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022ebe:	eb09 0003 	add.w	r0, r9, r3
 8022ec2:	0843      	lsrs	r3, r0, #1
 8022ec4:	07c0      	lsls	r0, r0, #31
 8022ec6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8022eca:	bf54      	ite	pl
 8022ecc:	f003 030f 	andpl.w	r3, r3, #15
 8022ed0:	111b      	asrmi	r3, r3, #4
 8022ed2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022ed6:	b2db      	uxtb	r3, r3
 8022ed8:	930a      	str	r3, [sp, #40]	@ 0x28
 8022eda:	e72c      	b.n	8022d36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022edc:	703a      	strb	r2, [r7, #0]
 8022ede:	7078      	strb	r0, [r7, #1]
 8022ee0:	f887 e002 	strb.w	lr, [r7, #2]
 8022ee4:	e775      	b.n	8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022ee6:	1c5a      	adds	r2, r3, #1
 8022ee8:	f53f af73 	bmi.w	8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022eec:	4594      	cmp	ip, r2
 8022eee:	f6ff af70 	blt.w	8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022ef2:	1c42      	adds	r2, r0, #1
 8022ef4:	f53f af6d 	bmi.w	8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022ef8:	4596      	cmp	lr, r2
 8022efa:	f6ff af6a 	blt.w	8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022efe:	9302      	str	r3, [sp, #8]
 8022f00:	fa0f f38e 	sxth.w	r3, lr
 8022f04:	9a08      	ldr	r2, [sp, #32]
 8022f06:	9301      	str	r3, [sp, #4]
 8022f08:	fa0f f38c 	sxth.w	r3, ip
 8022f0c:	9105      	str	r1, [sp, #20]
 8022f0e:	4639      	mov	r1, r7
 8022f10:	9300      	str	r3, [sp, #0]
 8022f12:	464b      	mov	r3, r9
 8022f14:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022f18:	4642      	mov	r2, r8
 8022f1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022f1c:	f7ff fd90 	bl	8022a40 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8022f20:	e757      	b.n	8022dd2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022f22:	142a      	asrs	r2, r5, #16
 8022f24:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022f28:	1433      	asrs	r3, r6, #16
 8022f2a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8022f2e:	fb09 2303 	mla	r3, r9, r3, r2
 8022f32:	085a      	lsrs	r2, r3, #1
 8022f34:	07d9      	lsls	r1, r3, #31
 8022f36:	f818 2002 	ldrb.w	r2, [r8, r2]
 8022f3a:	bf54      	ite	pl
 8022f3c:	f002 020f 	andpl.w	r2, r2, #15
 8022f40:	1112      	asrmi	r2, r2, #4
 8022f42:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f46:	b2d2      	uxtb	r2, r2
 8022f48:	2800      	cmp	r0, #0
 8022f4a:	f000 8085 	beq.w	8023058 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8022f4e:	f103 0a01 	add.w	sl, r3, #1
 8022f52:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022f56:	f01a 0f01 	tst.w	sl, #1
 8022f5a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022f5e:	bf0c      	ite	eq
 8022f60:	f001 010f 	andeq.w	r1, r1, #15
 8022f64:	1109      	asrne	r1, r1, #4
 8022f66:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f6a:	b2c9      	uxtb	r1, r1
 8022f6c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022f6e:	b1df      	cbz	r7, 8022fa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8022f70:	444b      	add	r3, r9
 8022f72:	0859      	lsrs	r1, r3, #1
 8022f74:	f013 0f01 	tst.w	r3, #1
 8022f78:	f103 0301 	add.w	r3, r3, #1
 8022f7c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022f80:	bf0c      	ite	eq
 8022f82:	f001 010f 	andeq.w	r1, r1, #15
 8022f86:	1109      	asrne	r1, r1, #4
 8022f88:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022f8c:	b2c9      	uxtb	r1, r1
 8022f8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8022f90:	0859      	lsrs	r1, r3, #1
 8022f92:	07db      	lsls	r3, r3, #31
 8022f94:	f818 1001 	ldrb.w	r1, [r8, r1]
 8022f98:	bf54      	ite	pl
 8022f9a:	f001 010f 	andpl.w	r1, r1, #15
 8022f9e:	1109      	asrmi	r1, r1, #4
 8022fa0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fa4:	b2c9      	uxtb	r1, r1
 8022fa6:	9110      	str	r1, [sp, #64]	@ 0x40
 8022fa8:	b280      	uxth	r0, r0
 8022faa:	b2bf      	uxth	r7, r7
 8022fac:	fb00 f307 	mul.w	r3, r0, r7
 8022fb0:	0100      	lsls	r0, r0, #4
 8022fb2:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8022fb6:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8022fba:	1ac0      	subs	r0, r0, r3
 8022fbc:	b2bf      	uxth	r7, r7
 8022fbe:	b280      	uxth	r0, r0
 8022fc0:	1bc9      	subs	r1, r1, r7
 8022fc2:	fa1f fa81 	uxth.w	sl, r1
 8022fc6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022fc8:	4348      	muls	r0, r1
 8022fca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022fcc:	fb02 020a 	mla	r2, r2, sl, r0
 8022fd0:	fb07 2701 	mla	r7, r7, r1, r2
 8022fd4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8022fd6:	fb03 7302 	mla	r3, r3, r2, r7
 8022fda:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022fde:	b393      	cbz	r3, 8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8022fe0:	4a2a      	ldr	r2, [pc, #168]	@ (802308c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8022fe2:	2bff      	cmp	r3, #255	@ 0xff
 8022fe4:	6811      	ldr	r1, [r2, #0]
 8022fe6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8022fea:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8022fee:	b2c9      	uxtb	r1, r1
 8022ff0:	d042      	beq.n	8023078 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022ff2:	b298      	uxth	r0, r3
 8022ff4:	43db      	mvns	r3, r3
 8022ff6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8022ffa:	fb11 f100 	smulbb	r1, r1, r0
 8022ffe:	b2db      	uxtb	r3, r3
 8023000:	fb17 f700 	smulbb	r7, r7, r0
 8023004:	fb02 1103 	mla	r1, r2, r3, r1
 8023008:	fb1a f000 	smulbb	r0, sl, r0
 802300c:	b289      	uxth	r1, r1
 802300e:	1c4a      	adds	r2, r1, #1
 8023010:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023014:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8023018:	fb02 7703 	mla	r7, r2, r3, r7
 802301c:	1209      	asrs	r1, r1, #8
 802301e:	b2bf      	uxth	r7, r7
 8023020:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023024:	1c7a      	adds	r2, r7, #1
 8023026:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802302a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802302e:	fb02 0303 	mla	r3, r2, r3, r0
 8023032:	123f      	asrs	r7, r7, #8
 8023034:	b29b      	uxth	r3, r3
 8023036:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802303a:	1c5a      	adds	r2, r3, #1
 802303c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023040:	121b      	asrs	r3, r3, #8
 8023042:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8023046:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023048:	f10c 0c03 	add.w	ip, ip, #3
 802304c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023050:	441d      	add	r5, r3
 8023052:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023054:	441e      	add	r6, r3
 8023056:	e6e7      	b.n	8022e28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023058:	2f00      	cmp	r7, #0
 802305a:	d0a5      	beq.n	8022fa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802305c:	444b      	add	r3, r9
 802305e:	0859      	lsrs	r1, r3, #1
 8023060:	07db      	lsls	r3, r3, #31
 8023062:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023066:	bf54      	ite	pl
 8023068:	f001 010f 	andpl.w	r1, r1, #15
 802306c:	1109      	asrmi	r1, r1, #4
 802306e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023072:	b2c9      	uxtb	r1, r1
 8023074:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023076:	e797      	b.n	8022fa8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023078:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802307c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023080:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023084:	e7df      	b.n	8023046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023086:	b013      	add	sp, #76	@ 0x4c
 8023088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802308c:	24025944 	.word	0x24025944

08023090 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8023090:	b530      	push	{r4, r5, lr}
 8023092:	b29d      	uxth	r5, r3
 8023094:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8023098:	780c      	ldrb	r4, [r1, #0]
 802309a:	b298      	uxth	r0, r3
 802309c:	7813      	ldrb	r3, [r2, #0]
 802309e:	fb14 f405 	smulbb	r4, r4, r5
 80230a2:	fb13 f300 	smulbb	r3, r3, r0
 80230a6:	441c      	add	r4, r3
 80230a8:	b2a4      	uxth	r4, r4
 80230aa:	1c63      	adds	r3, r4, #1
 80230ac:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80230b0:	7853      	ldrb	r3, [r2, #1]
 80230b2:	fb13 f300 	smulbb	r3, r3, r0
 80230b6:	1224      	asrs	r4, r4, #8
 80230b8:	7014      	strb	r4, [r2, #0]
 80230ba:	784c      	ldrb	r4, [r1, #1]
 80230bc:	fb14 f405 	smulbb	r4, r4, r5
 80230c0:	441c      	add	r4, r3
 80230c2:	b2a4      	uxth	r4, r4
 80230c4:	1c63      	adds	r3, r4, #1
 80230c6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80230ca:	1224      	asrs	r4, r4, #8
 80230cc:	7054      	strb	r4, [r2, #1]
 80230ce:	788b      	ldrb	r3, [r1, #2]
 80230d0:	7891      	ldrb	r1, [r2, #2]
 80230d2:	fb13 f305 	smulbb	r3, r3, r5
 80230d6:	fb11 f000 	smulbb	r0, r1, r0
 80230da:	4403      	add	r3, r0
 80230dc:	b29b      	uxth	r3, r3
 80230de:	1c59      	adds	r1, r3, #1
 80230e0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80230e4:	121b      	asrs	r3, r3, #8
 80230e6:	7093      	strb	r3, [r2, #2]
 80230e8:	bd30      	pop	{r4, r5, pc}
	...

080230ec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80230ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230f0:	461c      	mov	r4, r3
 80230f2:	b08b      	sub	sp, #44	@ 0x2c
 80230f4:	460e      	mov	r6, r1
 80230f6:	4615      	mov	r5, r2
 80230f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80230fa:	4682      	mov	sl, r0
 80230fc:	6861      	ldr	r1, [r4, #4]
 80230fe:	aa06      	add	r2, sp, #24
 8023100:	6820      	ldr	r0, [r4, #0]
 8023102:	2702      	movs	r7, #2
 8023104:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8023108:	3504      	adds	r5, #4
 802310a:	c203      	stmia	r2!, {r0, r1}
 802310c:	6818      	ldr	r0, [r3, #0]
 802310e:	aa08      	add	r2, sp, #32
 8023110:	6859      	ldr	r1, [r3, #4]
 8023112:	c203      	stmia	r2!, {r0, r1}
 8023114:	a806      	add	r0, sp, #24
 8023116:	f7f2 faf9 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802311a:	4621      	mov	r1, r4
 802311c:	a808      	add	r0, sp, #32
 802311e:	f7f2 fb1d 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023122:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8023126:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802312a:	f002 0301 	and.w	r3, r2, #1
 802312e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8023132:	9302      	str	r3, [sp, #8]
 8023134:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023138:	f003 0101 	and.w	r1, r3, #1
 802313c:	9101      	str	r1, [sp, #4]
 802313e:	9801      	ldr	r0, [sp, #4]
 8023140:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8023144:	4403      	add	r3, r0
 8023146:	fb01 2303 	mla	r3, r1, r3, r2
 802314a:	fb93 f3f7 	sdiv	r3, r3, r7
 802314e:	441e      	add	r6, r3
 8023150:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8023154:	441a      	add	r2, r3
 8023156:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802315a:	4419      	add	r1, r3
 802315c:	4b70      	ldr	r3, [pc, #448]	@ (8023320 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802315e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8023162:	6818      	ldr	r0, [r3, #0]
 8023164:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8023168:	6803      	ldr	r3, [r0, #0]
 802316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802316c:	4798      	blx	r3
 802316e:	4a6d      	ldr	r2, [pc, #436]	@ (8023324 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8023170:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8023174:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8023178:	8813      	ldrh	r3, [r2, #0]
 802317a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802317e:	fb03 1404 	mla	r4, r3, r4, r1
 8023182:	4611      	mov	r1, r2
 8023184:	fb0b f303 	mul.w	r3, fp, r3
 8023188:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802318c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023190:	4404      	add	r4, r0
 8023192:	4423      	add	r3, r4
 8023194:	d073      	beq.n	802327e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8023196:	9705      	str	r7, [sp, #20]
 8023198:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802319c:	9b03      	ldr	r3, [sp, #12]
 802319e:	429c      	cmp	r4, r3
 80231a0:	f080 80b5 	bcs.w	802330e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80231a4:	9b02      	ldr	r3, [sp, #8]
 80231a6:	b35b      	cbz	r3, 8023200 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80231a8:	7831      	ldrb	r1, [r6, #0]
 80231aa:	4622      	mov	r2, r4
 80231ac:	1c77      	adds	r7, r6, #1
 80231ae:	3403      	adds	r4, #3
 80231b0:	f001 010f 	and.w	r1, r1, #15
 80231b4:	f108 3bff 	add.w	fp, r8, #4294967295
 80231b8:	464b      	mov	r3, r9
 80231ba:	4650      	mov	r0, sl
 80231bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80231c0:	4429      	add	r1, r5
 80231c2:	f7ff ff65 	bl	8023090 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80231c6:	f1bb 0f01 	cmp.w	fp, #1
 80231ca:	dd1c      	ble.n	8023206 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80231cc:	7839      	ldrb	r1, [r7, #0]
 80231ce:	4622      	mov	r2, r4
 80231d0:	464b      	mov	r3, r9
 80231d2:	4650      	mov	r0, sl
 80231d4:	0909      	lsrs	r1, r1, #4
 80231d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80231da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80231de:	4429      	add	r1, r5
 80231e0:	f7ff ff56 	bl	8023090 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80231e4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80231e8:	1ce2      	adds	r2, r4, #3
 80231ea:	464b      	mov	r3, r9
 80231ec:	f001 010f 	and.w	r1, r1, #15
 80231f0:	4650      	mov	r0, sl
 80231f2:	3406      	adds	r4, #6
 80231f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80231f8:	4429      	add	r1, r5
 80231fa:	f7ff ff49 	bl	8023090 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80231fe:	e7e2      	b.n	80231c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023200:	4637      	mov	r7, r6
 8023202:	46c3      	mov	fp, r8
 8023204:	e7df      	b.n	80231c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8023206:	d10a      	bne.n	802321e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8023208:	7839      	ldrb	r1, [r7, #0]
 802320a:	4622      	mov	r2, r4
 802320c:	3403      	adds	r4, #3
 802320e:	464b      	mov	r3, r9
 8023210:	0909      	lsrs	r1, r1, #4
 8023212:	4650      	mov	r0, sl
 8023214:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023218:	4429      	add	r1, r5
 802321a:	f7ff ff39 	bl	8023090 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802321e:	9b04      	ldr	r3, [sp, #16]
 8023220:	9a01      	ldr	r2, [sp, #4]
 8023222:	881b      	ldrh	r3, [r3, #0]
 8023224:	eba3 0308 	sub.w	r3, r3, r8
 8023228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802322c:	441c      	add	r4, r3
 802322e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8023232:	4413      	add	r3, r2
 8023234:	9a05      	ldr	r2, [sp, #20]
 8023236:	fb93 f3f2 	sdiv	r3, r3, r2
 802323a:	441e      	add	r6, r3
 802323c:	e7ae      	b.n	802319c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802323e:	4632      	mov	r2, r6
 8023240:	46c4      	mov	ip, r8
 8023242:	e037      	b.n	80232b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8023244:	d10e      	bne.n	8023264 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8023246:	7812      	ldrb	r2, [r2, #0]
 8023248:	3003      	adds	r0, #3
 802324a:	0912      	lsrs	r2, r2, #4
 802324c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023250:	18ac      	adds	r4, r5, r2
 8023252:	5caa      	ldrb	r2, [r5, r2]
 8023254:	f800 2c03 	strb.w	r2, [r0, #-3]
 8023258:	7862      	ldrb	r2, [r4, #1]
 802325a:	f800 2c02 	strb.w	r2, [r0, #-2]
 802325e:	78a2      	ldrb	r2, [r4, #2]
 8023260:	f800 2c01 	strb.w	r2, [r0, #-1]
 8023264:	880c      	ldrh	r4, [r1, #0]
 8023266:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802326a:	eba4 0408 	sub.w	r4, r4, r8
 802326e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023272:	4404      	add	r4, r0
 8023274:	9801      	ldr	r0, [sp, #4]
 8023276:	4402      	add	r2, r0
 8023278:	fb92 f2f7 	sdiv	r2, r2, r7
 802327c:	4416      	add	r6, r2
 802327e:	429c      	cmp	r4, r3
 8023280:	d245      	bcs.n	802330e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8023282:	9a02      	ldr	r2, [sp, #8]
 8023284:	2a00      	cmp	r2, #0
 8023286:	d0da      	beq.n	802323e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8023288:	7830      	ldrb	r0, [r6, #0]
 802328a:	1c72      	adds	r2, r6, #1
 802328c:	3403      	adds	r4, #3
 802328e:	f000 000f 	and.w	r0, r0, #15
 8023292:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023296:	eb05 0c00 	add.w	ip, r5, r0
 802329a:	5c28      	ldrb	r0, [r5, r0]
 802329c:	f804 0c03 	strb.w	r0, [r4, #-3]
 80232a0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80232a4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80232a8:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80232ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80232b0:	f804 0c01 	strb.w	r0, [r4, #-1]
 80232b4:	f1bc 0f01 	cmp.w	ip, #1
 80232b8:	4620      	mov	r0, r4
 80232ba:	f104 0406 	add.w	r4, r4, #6
 80232be:	ddc1      	ble.n	8023244 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80232c0:	7810      	ldrb	r0, [r2, #0]
 80232c2:	f1ac 0c02 	sub.w	ip, ip, #2
 80232c6:	0900      	lsrs	r0, r0, #4
 80232c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80232cc:	eb05 0e00 	add.w	lr, r5, r0
 80232d0:	5c28      	ldrb	r0, [r5, r0]
 80232d2:	f804 0c06 	strb.w	r0, [r4, #-6]
 80232d6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80232da:	f804 0c05 	strb.w	r0, [r4, #-5]
 80232de:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80232e2:	f804 0c04 	strb.w	r0, [r4, #-4]
 80232e6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80232ea:	f000 000f 	and.w	r0, r0, #15
 80232ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80232f2:	eb05 0e00 	add.w	lr, r5, r0
 80232f6:	5c28      	ldrb	r0, [r5, r0]
 80232f8:	f804 0c03 	strb.w	r0, [r4, #-3]
 80232fc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023300:	f804 0c02 	strb.w	r0, [r4, #-2]
 8023304:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023308:	f804 0c01 	strb.w	r0, [r4, #-1]
 802330c:	e7d2      	b.n	80232b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802330e:	4b04      	ldr	r3, [pc, #16]	@ (8023320 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8023310:	6818      	ldr	r0, [r3, #0]
 8023312:	6803      	ldr	r3, [r0, #0]
 8023314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023316:	4798      	blx	r3
 8023318:	b00b      	add	sp, #44	@ 0x2c
 802331a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802331e:	bf00      	nop
 8023320:	24025934 	.word	0x24025934
 8023324:	2402592e 	.word	0x2402592e

08023328 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8023328:	b530      	push	{r4, r5, lr}
 802332a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802332e:	780d      	ldrb	r5, [r1, #0]
 8023330:	28ff      	cmp	r0, #255	@ 0xff
 8023332:	d107      	bne.n	8023344 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023334:	2bff      	cmp	r3, #255	@ 0xff
 8023336:	d105      	bne.n	8023344 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8023338:	7015      	strb	r5, [r2, #0]
 802333a:	784b      	ldrb	r3, [r1, #1]
 802333c:	7053      	strb	r3, [r2, #1]
 802333e:	788b      	ldrb	r3, [r1, #2]
 8023340:	7093      	strb	r3, [r2, #2]
 8023342:	bd30      	pop	{r4, r5, pc}
 8023344:	fb10 f003 	smulbb	r0, r0, r3
 8023348:	b283      	uxth	r3, r0
 802334a:	1c58      	adds	r0, r3, #1
 802334c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8023350:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023354:	b284      	uxth	r4, r0
 8023356:	43c0      	mvns	r0, r0
 8023358:	fb15 f504 	smulbb	r5, r5, r4
 802335c:	b2c3      	uxtb	r3, r0
 802335e:	7810      	ldrb	r0, [r2, #0]
 8023360:	fb00 5003 	mla	r0, r0, r3, r5
 8023364:	b280      	uxth	r0, r0
 8023366:	1c45      	adds	r5, r0, #1
 8023368:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802336c:	7855      	ldrb	r5, [r2, #1]
 802336e:	fb15 f503 	smulbb	r5, r5, r3
 8023372:	1200      	asrs	r0, r0, #8
 8023374:	7010      	strb	r0, [r2, #0]
 8023376:	7848      	ldrb	r0, [r1, #1]
 8023378:	fb00 5004 	mla	r0, r0, r4, r5
 802337c:	b280      	uxth	r0, r0
 802337e:	1c45      	adds	r5, r0, #1
 8023380:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023384:	1200      	asrs	r0, r0, #8
 8023386:	7050      	strb	r0, [r2, #1]
 8023388:	7888      	ldrb	r0, [r1, #2]
 802338a:	7891      	ldrb	r1, [r2, #2]
 802338c:	fb11 f303 	smulbb	r3, r1, r3
 8023390:	fb00 3304 	mla	r3, r0, r4, r3
 8023394:	b29b      	uxth	r3, r3
 8023396:	1c59      	adds	r1, r3, #1
 8023398:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802339c:	121b      	asrs	r3, r3, #8
 802339e:	e7cf      	b.n	8023340 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080233a0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80233a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233a4:	461d      	mov	r5, r3
 80233a6:	b08f      	sub	sp, #60	@ 0x3c
 80233a8:	460c      	mov	r4, r1
 80233aa:	4616      	mov	r6, r2
 80233ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80233ae:	4680      	mov	r8, r0
 80233b0:	6869      	ldr	r1, [r5, #4]
 80233b2:	aa0a      	add	r2, sp, #40	@ 0x28
 80233b4:	6828      	ldr	r0, [r5, #0]
 80233b6:	3604      	adds	r6, #4
 80233b8:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80233bc:	4f57      	ldr	r7, [pc, #348]	@ (802351c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80233be:	c203      	stmia	r2!, {r0, r1}
 80233c0:	6818      	ldr	r0, [r3, #0]
 80233c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80233c4:	6859      	ldr	r1, [r3, #4]
 80233c6:	c203      	stmia	r2!, {r0, r1}
 80233c8:	a80a      	add	r0, sp, #40	@ 0x28
 80233ca:	f7f2 f99f 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80233ce:	4629      	mov	r1, r5
 80233d0:	a80c      	add	r0, sp, #48	@ 0x30
 80233d2:	2502      	movs	r5, #2
 80233d4:	f7f2 f9c2 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80233d8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80233dc:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 80233e0:	f002 0301 	and.w	r3, r2, #1
 80233e4:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 80233e8:	9304      	str	r3, [sp, #16]
 80233ea:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80233ee:	f003 0101 	and.w	r1, r3, #1
 80233f2:	9103      	str	r1, [sp, #12]
 80233f4:	9803      	ldr	r0, [sp, #12]
 80233f6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80233fa:	4403      	add	r3, r0
 80233fc:	6838      	ldr	r0, [r7, #0]
 80233fe:	fb01 2303 	mla	r3, r1, r3, r2
 8023402:	fb93 f3f5 	sdiv	r3, r3, r5
 8023406:	18e5      	adds	r5, r4, r3
 8023408:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802340c:	441a      	add	r2, r3
 802340e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8023412:	4419      	add	r1, r3
 8023414:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8023418:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802341c:	6803      	ldr	r3, [r0, #0]
 802341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023420:	4798      	blx	r3
 8023422:	4a3f      	ldr	r2, [pc, #252]	@ (8023520 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8023424:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8023428:	8813      	ldrh	r3, [r2, #0]
 802342a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802342e:	9207      	str	r2, [sp, #28]
 8023430:	fb03 1404 	mla	r4, r3, r4, r1
 8023434:	fb0a f303 	mul.w	r3, sl, r3
 8023438:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802343c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023440:	4404      	add	r4, r0
 8023442:	18e3      	adds	r3, r4, r3
 8023444:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8023448:	9b05      	ldr	r3, [sp, #20]
 802344a:	429c      	cmp	r4, r3
 802344c:	d25d      	bcs.n	802350a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 802344e:	9b04      	ldr	r3, [sp, #16]
 8023450:	2b00      	cmp	r3, #0
 8023452:	d037      	beq.n	80234c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8023454:	782b      	ldrb	r3, [r5, #0]
 8023456:	1c6f      	adds	r7, r5, #1
 8023458:	f003 030f 	and.w	r3, r3, #15
 802345c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023460:	9309      	str	r3, [sp, #36]	@ 0x24
 8023462:	0e1b      	lsrs	r3, r3, #24
 8023464:	d006      	beq.n	8023474 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8023466:	9300      	str	r3, [sp, #0]
 8023468:	4622      	mov	r2, r4
 802346a:	464b      	mov	r3, r9
 802346c:	a909      	add	r1, sp, #36	@ 0x24
 802346e:	4640      	mov	r0, r8
 8023470:	f7ff ff5a 	bl	8023328 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8023474:	3403      	adds	r4, #3
 8023476:	f10b 3aff 	add.w	sl, fp, #4294967295
 802347a:	f1ba 0f01 	cmp.w	sl, #1
 802347e:	dd24      	ble.n	80234ca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8023480:	783b      	ldrb	r3, [r7, #0]
 8023482:	091b      	lsrs	r3, r3, #4
 8023484:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023488:	9308      	str	r3, [sp, #32]
 802348a:	0e1b      	lsrs	r3, r3, #24
 802348c:	d006      	beq.n	802349c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 802348e:	9300      	str	r3, [sp, #0]
 8023490:	4622      	mov	r2, r4
 8023492:	464b      	mov	r3, r9
 8023494:	a908      	add	r1, sp, #32
 8023496:	4640      	mov	r0, r8
 8023498:	f7ff ff46 	bl	8023328 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 802349c:	f817 3b01 	ldrb.w	r3, [r7], #1
 80234a0:	f003 030f 	and.w	r3, r3, #15
 80234a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80234a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80234aa:	0e1b      	lsrs	r3, r3, #24
 80234ac:	d006      	beq.n	80234bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80234ae:	9300      	str	r3, [sp, #0]
 80234b0:	1ce2      	adds	r2, r4, #3
 80234b2:	464b      	mov	r3, r9
 80234b4:	a909      	add	r1, sp, #36	@ 0x24
 80234b6:	4640      	mov	r0, r8
 80234b8:	f7ff ff36 	bl	8023328 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80234bc:	3406      	adds	r4, #6
 80234be:	f1aa 0a02 	sub.w	sl, sl, #2
 80234c2:	e7da      	b.n	802347a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80234c4:	462f      	mov	r7, r5
 80234c6:	46da      	mov	sl, fp
 80234c8:	e7d7      	b.n	802347a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80234ca:	d10e      	bne.n	80234ea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 80234cc:	783b      	ldrb	r3, [r7, #0]
 80234ce:	091b      	lsrs	r3, r3, #4
 80234d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80234d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80234d6:	0e1b      	lsrs	r3, r3, #24
 80234d8:	d006      	beq.n	80234e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 80234da:	9300      	str	r3, [sp, #0]
 80234dc:	4622      	mov	r2, r4
 80234de:	464b      	mov	r3, r9
 80234e0:	a909      	add	r1, sp, #36	@ 0x24
 80234e2:	4640      	mov	r0, r8
 80234e4:	f7ff ff20 	bl	8023328 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80234e8:	3403      	adds	r4, #3
 80234ea:	9b07      	ldr	r3, [sp, #28]
 80234ec:	9a03      	ldr	r2, [sp, #12]
 80234ee:	881b      	ldrh	r3, [r3, #0]
 80234f0:	eba3 030b 	sub.w	r3, r3, fp
 80234f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80234f8:	441c      	add	r4, r3
 80234fa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80234fe:	4413      	add	r3, r2
 8023500:	2202      	movs	r2, #2
 8023502:	fb93 f3f2 	sdiv	r3, r3, r2
 8023506:	441d      	add	r5, r3
 8023508:	e79e      	b.n	8023448 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802350a:	9b06      	ldr	r3, [sp, #24]
 802350c:	6818      	ldr	r0, [r3, #0]
 802350e:	6803      	ldr	r3, [r0, #0]
 8023510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023512:	4798      	blx	r3
 8023514:	b00f      	add	sp, #60	@ 0x3c
 8023516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802351a:	bf00      	nop
 802351c:	24025934 	.word	0x24025934
 8023520:	2402592e 	.word	0x2402592e

08023524 <CRC_Lock>:
 8023524:	4a2d      	ldr	r2, [pc, #180]	@ (80235dc <CRC_Lock+0xb8>)
 8023526:	b530      	push	{r4, r5, lr}
 8023528:	6813      	ldr	r3, [r2, #0]
 802352a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802352e:	f023 0301 	bic.w	r3, r3, #1
 8023532:	6013      	str	r3, [r2, #0]
 8023534:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8023538:	4b29      	ldr	r3, [pc, #164]	@ (80235e0 <CRC_Lock+0xbc>)
 802353a:	681c      	ldr	r4, [r3, #0]
 802353c:	4014      	ands	r4, r2
 802353e:	42ac      	cmp	r4, r5
 8023540:	d005      	beq.n	802354e <CRC_Lock+0x2a>
 8023542:	681c      	ldr	r4, [r3, #0]
 8023544:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8023548:	4014      	ands	r4, r2
 802354a:	42ac      	cmp	r4, r5
 802354c:	d125      	bne.n	802359a <CRC_Lock+0x76>
 802354e:	4b25      	ldr	r3, [pc, #148]	@ (80235e4 <CRC_Lock+0xc0>)
 8023550:	681b      	ldr	r3, [r3, #0]
 8023552:	2b00      	cmp	r3, #0
 8023554:	d139      	bne.n	80235ca <CRC_Lock+0xa6>
 8023556:	4b24      	ldr	r3, [pc, #144]	@ (80235e8 <CRC_Lock+0xc4>)
 8023558:	681a      	ldr	r2, [r3, #0]
 802355a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802355e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8023562:	d00d      	beq.n	8023580 <CRC_Lock+0x5c>
 8023564:	681a      	ldr	r2, [r3, #0]
 8023566:	f240 4483 	movw	r4, #1155	@ 0x483
 802356a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802356e:	42a2      	cmp	r2, r4
 8023570:	d006      	beq.n	8023580 <CRC_Lock+0x5c>
 8023572:	681b      	ldr	r3, [r3, #0]
 8023574:	f240 4285 	movw	r2, #1157	@ 0x485
 8023578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802357c:	4293      	cmp	r3, r2
 802357e:	d124      	bne.n	80235ca <CRC_Lock+0xa6>
 8023580:	4b1a      	ldr	r3, [pc, #104]	@ (80235ec <CRC_Lock+0xc8>)
 8023582:	2201      	movs	r2, #1
 8023584:	601a      	str	r2, [r3, #0]
 8023586:	681a      	ldr	r2, [r3, #0]
 8023588:	2a00      	cmp	r2, #0
 802358a:	d1fc      	bne.n	8023586 <CRC_Lock+0x62>
 802358c:	4b18      	ldr	r3, [pc, #96]	@ (80235f0 <CRC_Lock+0xcc>)
 802358e:	6018      	str	r0, [r3, #0]
 8023590:	6818      	ldr	r0, [r3, #0]
 8023592:	1a43      	subs	r3, r0, r1
 8023594:	4258      	negs	r0, r3
 8023596:	4158      	adcs	r0, r3
 8023598:	e00e      	b.n	80235b8 <CRC_Lock+0x94>
 802359a:	681b      	ldr	r3, [r3, #0]
 802359c:	4013      	ands	r3, r2
 802359e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80235a2:	4293      	cmp	r3, r2
 80235a4:	d111      	bne.n	80235ca <CRC_Lock+0xa6>
 80235a6:	4b13      	ldr	r3, [pc, #76]	@ (80235f4 <CRC_Lock+0xd0>)
 80235a8:	f240 4286 	movw	r2, #1158	@ 0x486
 80235ac:	681b      	ldr	r3, [r3, #0]
 80235ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80235b2:	4293      	cmp	r3, r2
 80235b4:	d001      	beq.n	80235ba <CRC_Lock+0x96>
 80235b6:	2000      	movs	r0, #0
 80235b8:	bd30      	pop	{r4, r5, pc}
 80235ba:	4b0f      	ldr	r3, [pc, #60]	@ (80235f8 <CRC_Lock+0xd4>)
 80235bc:	2201      	movs	r2, #1
 80235be:	601a      	str	r2, [r3, #0]
 80235c0:	681a      	ldr	r2, [r3, #0]
 80235c2:	2a00      	cmp	r2, #0
 80235c4:	d1fc      	bne.n	80235c0 <CRC_Lock+0x9c>
 80235c6:	4b0d      	ldr	r3, [pc, #52]	@ (80235fc <CRC_Lock+0xd8>)
 80235c8:	e7e1      	b.n	802358e <CRC_Lock+0x6a>
 80235ca:	4b0d      	ldr	r3, [pc, #52]	@ (8023600 <CRC_Lock+0xdc>)
 80235cc:	2201      	movs	r2, #1
 80235ce:	601a      	str	r2, [r3, #0]
 80235d0:	681a      	ldr	r2, [r3, #0]
 80235d2:	2a00      	cmp	r2, #0
 80235d4:	d1fc      	bne.n	80235d0 <CRC_Lock+0xac>
 80235d6:	4b0b      	ldr	r3, [pc, #44]	@ (8023604 <CRC_Lock+0xe0>)
 80235d8:	e7d9      	b.n	802358e <CRC_Lock+0x6a>
 80235da:	bf00      	nop
 80235dc:	e0002000 	.word	0xe0002000
 80235e0:	e000ed00 	.word	0xe000ed00
 80235e4:	e0042000 	.word	0xe0042000
 80235e8:	5c001000 	.word	0x5c001000
 80235ec:	58024c08 	.word	0x58024c08
 80235f0:	58024c00 	.word	0x58024c00
 80235f4:	46008ff0 	.word	0x46008ff0
 80235f8:	46024c08 	.word	0x46024c08
 80235fc:	46024c00 	.word	0x46024c00
 8023600:	40023008 	.word	0x40023008
 8023604:	40023000 	.word	0x40023000

08023608 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023608:	6101      	str	r1, [r0, #16]
 802360a:	4770      	bx	lr

0802360c <_ZN8touchgfx8Gestures4tickEv>:
 802360c:	7b83      	ldrb	r3, [r0, #14]
 802360e:	b14b      	cbz	r3, 8023624 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023610:	8903      	ldrh	r3, [r0, #8]
 8023612:	3301      	adds	r3, #1
 8023614:	b29b      	uxth	r3, r3
 8023616:	2b07      	cmp	r3, #7
 8023618:	8103      	strh	r3, [r0, #8]
 802361a:	bf81      	itttt	hi
 802361c:	2300      	movhi	r3, #0
 802361e:	8143      	strhhi	r3, [r0, #10]
 8023620:	8183      	strhhi	r3, [r0, #12]
 8023622:	7383      	strbhi	r3, [r0, #14]
 8023624:	4770      	bx	lr
	...

08023628 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023628:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802362c:	4698      	mov	r8, r3
 802362e:	8883      	ldrh	r3, [r0, #4]
 8023630:	4604      	mov	r4, r0
 8023632:	4617      	mov	r7, r2
 8023634:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023638:	eba8 0303 	sub.w	r3, r8, r3
 802363c:	4a19      	ldr	r2, [pc, #100]	@ (80236a4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802363e:	460e      	mov	r6, r1
 8023640:	b21b      	sxth	r3, r3
 8023642:	88c1      	ldrh	r1, [r0, #6]
 8023644:	9200      	str	r2, [sp, #0]
 8023646:	2000      	movs	r0, #0
 8023648:	2b00      	cmp	r3, #0
 802364a:	8aa2      	ldrh	r2, [r4, #20]
 802364c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8023650:	bfb8      	it	lt
 8023652:	425b      	neglt	r3, r3
 8023654:	f88d 0004 	strb.w	r0, [sp, #4]
 8023658:	f8ad 1008 	strh.w	r1, [sp, #8]
 802365c:	b21b      	sxth	r3, r3
 802365e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023662:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023666:	4293      	cmp	r3, r2
 8023668:	dc07      	bgt.n	802367a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802366a:	1a69      	subs	r1, r5, r1
 802366c:	b209      	sxth	r1, r1
 802366e:	2900      	cmp	r1, #0
 8023670:	bfb8      	it	lt
 8023672:	4249      	neglt	r1, r1
 8023674:	b209      	sxth	r1, r1
 8023676:	428a      	cmp	r2, r1
 8023678:	da10      	bge.n	802369c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802367a:	6920      	ldr	r0, [r4, #16]
 802367c:	4669      	mov	r1, sp
 802367e:	eba8 0606 	sub.w	r6, r8, r6
 8023682:	1bef      	subs	r7, r5, r7
 8023684:	6803      	ldr	r3, [r0, #0]
 8023686:	685b      	ldr	r3, [r3, #4]
 8023688:	4798      	blx	r3
 802368a:	2300      	movs	r3, #0
 802368c:	2001      	movs	r0, #1
 802368e:	8166      	strh	r6, [r4, #10]
 8023690:	8123      	strh	r3, [r4, #8]
 8023692:	81a7      	strh	r7, [r4, #12]
 8023694:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023698:	80e5      	strh	r5, [r4, #6]
 802369a:	73a0      	strb	r0, [r4, #14]
 802369c:	b004      	add	sp, #16
 802369e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236a2:	bf00      	nop
 80236a4:	08029240 	.word	0x08029240

080236a8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80236a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80236aa:	461e      	mov	r6, r3
 80236ac:	1e4b      	subs	r3, r1, #1
 80236ae:	b085      	sub	sp, #20
 80236b0:	4604      	mov	r4, r0
 80236b2:	2b01      	cmp	r3, #1
 80236b4:	460d      	mov	r5, r1
 80236b6:	4617      	mov	r7, r2
 80236b8:	d84b      	bhi.n	8023752 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80236ba:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80236be:	1cd3      	adds	r3, r2, #3
 80236c0:	b29b      	uxth	r3, r3
 80236c2:	2b06      	cmp	r3, #6
 80236c4:	d916      	bls.n	80236f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80236c6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8023768 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80236ca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80236ce:	f8cd c004 	str.w	ip, [sp, #4]
 80236d2:	f04f 0c00 	mov.w	ip, #0
 80236d6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80236da:	6900      	ldr	r0, [r0, #16]
 80236dc:	f8ad 100c 	strh.w	r1, [sp, #12]
 80236e0:	a901      	add	r1, sp, #4
 80236e2:	f88d c008 	strb.w	ip, [sp, #8]
 80236e6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80236ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 80236ee:	6803      	ldr	r3, [r0, #0]
 80236f0:	689b      	ldr	r3, [r3, #8]
 80236f2:	4798      	blx	r3
 80236f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80236f8:	1cd3      	adds	r3, r2, #3
 80236fa:	b29b      	uxth	r3, r3
 80236fc:	2b06      	cmp	r3, #6
 80236fe:	d916      	bls.n	802372e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023700:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8023768 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023704:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023708:	f8cd c004 	str.w	ip, [sp, #4]
 802370c:	f04f 0c01 	mov.w	ip, #1
 8023710:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023714:	6920      	ldr	r0, [r4, #16]
 8023716:	f8ad 100c 	strh.w	r1, [sp, #12]
 802371a:	a901      	add	r1, sp, #4
 802371c:	f88d c008 	strb.w	ip, [sp, #8]
 8023720:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023724:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023728:	6803      	ldr	r3, [r0, #0]
 802372a:	689b      	ldr	r3, [r3, #8]
 802372c:	4798      	blx	r3
 802372e:	4b0d      	ldr	r3, [pc, #52]	@ (8023764 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8023730:	a901      	add	r1, sp, #4
 8023732:	6920      	ldr	r0, [r4, #16]
 8023734:	9301      	str	r3, [sp, #4]
 8023736:	2300      	movs	r3, #0
 8023738:	f88d 5008 	strb.w	r5, [sp, #8]
 802373c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023740:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023744:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023748:	6803      	ldr	r3, [r0, #0]
 802374a:	681b      	ldr	r3, [r3, #0]
 802374c:	4798      	blx	r3
 802374e:	b005      	add	sp, #20
 8023750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023752:	2900      	cmp	r1, #0
 8023754:	d1eb      	bne.n	802372e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023756:	80a2      	strh	r2, [r4, #4]
 8023758:	80c6      	strh	r6, [r0, #6]
 802375a:	60a1      	str	r1, [r4, #8]
 802375c:	81a1      	strh	r1, [r4, #12]
 802375e:	73a1      	strb	r1, [r4, #14]
 8023760:	e7e5      	b.n	802372e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023762:	bf00      	nop
 8023764:	08029054 	.word	0x08029054
 8023768:	08029254 	.word	0x08029254

0802376c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802376c:	10c9      	asrs	r1, r1, #3
 802376e:	2900      	cmp	r1, #0
 8023770:	bfb8      	it	lt
 8023772:	4249      	neglt	r1, r1
 8023774:	2801      	cmp	r0, #1
 8023776:	d108      	bne.n	802378a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8023778:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802377c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8023780:	4601      	mov	r1, r0
 8023782:	dd02      	ble.n	802378a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8023784:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8023788:	4770      	bx	lr
 802378a:	29ff      	cmp	r1, #255	@ 0xff
 802378c:	bfa8      	it	ge
 802378e:	21ff      	movge	r1, #255	@ 0xff
 8023790:	4608      	mov	r0, r1
 8023792:	4770      	bx	lr

08023794 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8023794:	b410      	push	{r4}
 8023796:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802379a:	429c      	cmp	r4, r3
 802379c:	d803      	bhi.n	80237a6 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802379e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237a2:	f7f0 babd 	b.w	8013d20 <_ZN8touchgfx7Outline6lineToEii>
 80237a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237aa:	4770      	bx	lr

080237ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80237ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237b0:	b08b      	sub	sp, #44	@ 0x2c
 80237b2:	4606      	mov	r6, r0
 80237b4:	468a      	mov	sl, r1
 80237b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80237ba:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80237be:	9308      	str	r3, [sp, #32]
 80237c0:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80237c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80237c6:	f7f0 fc16 	bl	8013ff6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80237ca:	68b5      	ldr	r5, [r6, #8]
 80237cc:	4604      	mov	r4, r0
 80237ce:	2d00      	cmp	r5, #0
 80237d0:	d044      	beq.n	802385c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80237d2:	6873      	ldr	r3, [r6, #4]
 80237d4:	42ab      	cmp	r3, r5
 80237d6:	d33d      	bcc.n	8023854 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80237d8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80237dc:	f04f 0800 	mov.w	r8, #0
 80237e0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80237e4:	eb02 0b03 	add.w	fp, r2, r3
 80237e8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80237ec:	fb02 1203 	mla	r2, r2, r3, r1
 80237f0:	9205      	str	r2, [sp, #20]
 80237f2:	1e6a      	subs	r2, r5, #1
 80237f4:	9204      	str	r2, [sp, #16]
 80237f6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80237fa:	f9b4 7000 	ldrsh.w	r7, [r4]
 80237fe:	454b      	cmp	r3, r9
 8023800:	463a      	mov	r2, r7
 8023802:	d008      	beq.n	8023816 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8023804:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8023808:	eb03 0b09 	add.w	fp, r3, r9
 802380c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8023810:	fb03 1309 	mla	r3, r3, r9, r1
 8023814:	9305      	str	r3, [sp, #20]
 8023816:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802381a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802381e:	4498      	add	r8, r3
 8023820:	9b04      	ldr	r3, [sp, #16]
 8023822:	3b01      	subs	r3, #1
 8023824:	9304      	str	r3, [sp, #16]
 8023826:	9b04      	ldr	r3, [sp, #16]
 8023828:	3301      	adds	r3, #1
 802382a:	d015      	beq.n	8023858 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802382c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8023830:	42bb      	cmp	r3, r7
 8023832:	d117      	bne.n	8023864 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8023834:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8023838:	9b04      	ldr	r3, [sp, #16]
 802383a:	4548      	cmp	r0, r9
 802383c:	f103 33ff 	add.w	r3, r3, #4294967295
 8023840:	d17d      	bne.n	802393e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8023842:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8023846:	4401      	add	r1, r0
 8023848:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802384c:	4480      	add	r8, r0
 802384e:	e7e9      	b.n	8023824 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8023850:	461f      	mov	r7, r3
 8023852:	e042      	b.n	80238da <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8023854:	2000      	movs	r0, #0
 8023856:	e002      	b.n	802385e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8023858:	2900      	cmp	r1, #0
 802385a:	d16d      	bne.n	8023938 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802385c:	2001      	movs	r0, #1
 802385e:	b00b      	add	sp, #44	@ 0x2c
 8023860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023864:	b379      	cbz	r1, 80238c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8023866:	2f00      	cmp	r7, #0
 8023868:	db29      	blt.n	80238be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802386a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802386e:	42bb      	cmp	r3, r7
 8023870:	dd25      	ble.n	80238be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8023872:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8023876:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802387a:	f7ff ff77 	bl	802376c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802387e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023880:	fb10 f003 	smulbb	r0, r0, r3
 8023884:	b280      	uxth	r0, r0
 8023886:	1c41      	adds	r1, r0, #1
 8023888:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802388c:	1209      	asrs	r1, r1, #8
 802388e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8023892:	d014      	beq.n	80238be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8023894:	b2c9      	uxtb	r1, r1
 8023896:	9808      	ldr	r0, [sp, #32]
 8023898:	b2ba      	uxth	r2, r7
 802389a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802389c:	9102      	str	r1, [sp, #8]
 802389e:	2101      	movs	r1, #1
 80238a0:	4413      	add	r3, r2
 80238a2:	4402      	add	r2, r0
 80238a4:	9101      	str	r1, [sp, #4]
 80238a6:	fa0f f18b 	sxth.w	r1, fp
 80238aa:	f8da 0000 	ldr.w	r0, [sl]
 80238ae:	b21b      	sxth	r3, r3
 80238b0:	9100      	str	r1, [sp, #0]
 80238b2:	b212      	sxth	r2, r2
 80238b4:	6941      	ldr	r1, [r0, #20]
 80238b6:	4650      	mov	r0, sl
 80238b8:	460d      	mov	r5, r1
 80238ba:	9905      	ldr	r1, [sp, #20]
 80238bc:	47a8      	blx	r5
 80238be:	9b04      	ldr	r3, [sp, #16]
 80238c0:	1c7a      	adds	r2, r7, #1
 80238c2:	3301      	adds	r3, #1
 80238c4:	d0ca      	beq.n	802385c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80238c6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80238ca:	1abb      	subs	r3, r7, r2
 80238cc:	2b00      	cmp	r3, #0
 80238ce:	dd31      	ble.n	8023934 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80238d0:	2a00      	cmp	r2, #0
 80238d2:	dabd      	bge.n	8023850 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80238d4:	2f00      	cmp	r7, #0
 80238d6:	dd2d      	ble.n	8023934 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80238d8:	2200      	movs	r2, #0
 80238da:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80238de:	19d1      	adds	r1, r2, r7
 80238e0:	4299      	cmp	r1, r3
 80238e2:	db02      	blt.n	80238ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80238e4:	1a9f      	subs	r7, r3, r2
 80238e6:	2f00      	cmp	r7, #0
 80238e8:	dd24      	ble.n	8023934 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80238ea:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80238ee:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80238f2:	f7ff ff3b 	bl	802376c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80238f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80238f8:	fb10 f003 	smulbb	r0, r0, r3
 80238fc:	b280      	uxth	r0, r0
 80238fe:	1c41      	adds	r1, r0, #1
 8023900:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8023904:	1209      	asrs	r1, r1, #8
 8023906:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802390a:	d013      	beq.n	8023934 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802390c:	b292      	uxth	r2, r2
 802390e:	9808      	ldr	r0, [sp, #32]
 8023910:	b2c9      	uxtb	r1, r1
 8023912:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8023914:	b23f      	sxth	r7, r7
 8023916:	4413      	add	r3, r2
 8023918:	9102      	str	r1, [sp, #8]
 802391a:	4402      	add	r2, r0
 802391c:	fa0f f18b 	sxth.w	r1, fp
 8023920:	f8da 0000 	ldr.w	r0, [sl]
 8023924:	b21b      	sxth	r3, r3
 8023926:	9100      	str	r1, [sp, #0]
 8023928:	b212      	sxth	r2, r2
 802392a:	9701      	str	r7, [sp, #4]
 802392c:	9905      	ldr	r1, [sp, #20]
 802392e:	6947      	ldr	r7, [r0, #20]
 8023930:	4650      	mov	r0, sl
 8023932:	47b8      	blx	r7
 8023934:	464b      	mov	r3, r9
 8023936:	e75e      	b.n	80237f6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8023938:	2f00      	cmp	r7, #0
 802393a:	da96      	bge.n	802386a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802393c:	e78e      	b.n	802385c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802393e:	2900      	cmp	r1, #0
 8023940:	d0f8      	beq.n	8023934 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8023942:	e790      	b.n	8023866 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08023944 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8023944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023948:	461e      	mov	r6, r3
 802394a:	4b36      	ldr	r3, [pc, #216]	@ (8023a24 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802394c:	2500      	movs	r5, #0
 802394e:	f100 0814 	add.w	r8, r0, #20
 8023952:	4604      	mov	r4, r0
 8023954:	4617      	mov	r7, r2
 8023956:	e9c0 3100 	strd	r3, r1, [r0]
 802395a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802395e:	8185      	strh	r5, [r0, #12]
 8023960:	8103      	strh	r3, [r0, #8]
 8023962:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8023966:	81c5      	strh	r5, [r0, #14]
 8023968:	7283      	strb	r3, [r0, #10]
 802396a:	8205      	strh	r5, [r0, #16]
 802396c:	8245      	strh	r5, [r0, #18]
 802396e:	4640      	mov	r0, r8
 8023970:	f7ef fd1c 	bl	80133ac <_ZN8touchgfx7OutlineC1Ev>
 8023974:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8023978:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802397c:	466b      	mov	r3, sp
 802397e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8023982:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8023986:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802398a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802398e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8023992:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8023996:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802399a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802399e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 80239a2:	6830      	ldr	r0, [r6, #0]
 80239a4:	6871      	ldr	r1, [r6, #4]
 80239a6:	8872      	ldrh	r2, [r6, #2]
 80239a8:	8835      	ldrh	r5, [r6, #0]
 80239aa:	c303      	stmia	r3!, {r0, r1}
 80239ac:	887b      	ldrh	r3, [r7, #2]
 80239ae:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80239b2:	4413      	add	r3, r2
 80239b4:	883a      	ldrh	r2, [r7, #0]
 80239b6:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80239ba:	442a      	add	r2, r5
 80239bc:	81e3      	strh	r3, [r4, #14]
 80239be:	8220      	strh	r0, [r4, #16]
 80239c0:	4668      	mov	r0, sp
 80239c2:	81a2      	strh	r2, [r4, #12]
 80239c4:	8261      	strh	r1, [r4, #18]
 80239c6:	4639      	mov	r1, r7
 80239c8:	f7f1 fec8 	bl	801575c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80239cc:	f104 000c 	add.w	r0, r4, #12
 80239d0:	f7f1 fe9c 	bl	801570c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80239d4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80239d8:	f8bd 2000 	ldrh.w	r2, [sp]
 80239dc:	4640      	mov	r0, r8
 80239de:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80239e2:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80239e6:	f7ef fcc6 	bl	8013376 <_ZN8touchgfx7Outline5resetEv>
 80239ea:	f9bd 3000 	ldrsh.w	r3, [sp]
 80239ee:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80239f2:	4620      	mov	r0, r4
 80239f4:	015b      	lsls	r3, r3, #5
 80239f6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80239f8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80239fc:	015b      	lsls	r3, r3, #5
 80239fe:	6523      	str	r3, [r4, #80]	@ 0x50
 8023a00:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023a04:	015b      	lsls	r3, r3, #5
 8023a06:	6563      	str	r3, [r4, #84]	@ 0x54
 8023a08:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8023a0c:	015b      	lsls	r3, r3, #5
 8023a0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8023a10:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8023a14:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8023a18:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8023a1c:	b002      	add	sp, #8
 8023a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a22:	bf00      	nop
 8023a24:	080294e4 	.word	0x080294e4

08023a28 <_ZN8touchgfx6Canvas5closeEv>:
 8023a28:	b538      	push	{r3, r4, r5, lr}
 8023a2a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8023a2e:	4604      	mov	r4, r0
 8023a30:	b193      	cbz	r3, 8023a58 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023a32:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8023a36:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 8023a3a:	4213      	tst	r3, r2
 8023a3c:	d10c      	bne.n	8023a58 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8023a3e:	f100 0514 	add.w	r5, r0, #20
 8023a42:	b123      	cbz	r3, 8023a4e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8023a44:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8023a48:	4628      	mov	r0, r5
 8023a4a:	f7ff fea3 	bl	8023794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023a4e:	4628      	mov	r0, r5
 8023a50:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8023a54:	f7ff fe9e 	bl	8023794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023a58:	2300      	movs	r3, #0
 8023a5a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8023a5e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8023a62:	4298      	cmp	r0, r3
 8023a64:	bf34      	ite	cc
 8023a66:	2000      	movcc	r0, #0
 8023a68:	2001      	movcs	r0, #1
 8023a6a:	bd38      	pop	{r3, r4, r5, pc}

08023a6c <_ZN8touchgfx6Canvas6renderEh>:
 8023a6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023a70:	7a85      	ldrb	r5, [r0, #10]
 8023a72:	4604      	mov	r4, r0
 8023a74:	4369      	muls	r1, r5
 8023a76:	1c4d      	adds	r5, r1, #1
 8023a78:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8023a7c:	122d      	asrs	r5, r5, #8
 8023a7e:	f000 8098 	beq.w	8023bb2 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8023a82:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	f000 8093 	beq.w	8023bb2 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8023a8c:	f7ff ffcc 	bl	8023a28 <_ZN8touchgfx6Canvas5closeEv>
 8023a90:	4607      	mov	r7, r0
 8023a92:	2800      	cmp	r0, #0
 8023a94:	d045      	beq.n	8023b22 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8023a96:	6860      	ldr	r0, [r4, #4]
 8023a98:	4e47      	ldr	r6, [pc, #284]	@ (8023bb8 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 8023a9a:	6803      	ldr	r3, [r0, #0]
 8023a9c:	6837      	ldr	r7, [r6, #0]
 8023a9e:	689b      	ldr	r3, [r3, #8]
 8023aa0:	4798      	blx	r3
 8023aa2:	4601      	mov	r1, r0
 8023aa4:	4638      	mov	r0, r7
 8023aa6:	f7ec fc59 	bl	801035c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8023aaa:	4607      	mov	r7, r0
 8023aac:	f7e0 fac6 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8023ab0:	6803      	ldr	r3, [r0, #0]
 8023ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023ab4:	4798      	blx	r3
 8023ab6:	4680      	mov	r8, r0
 8023ab8:	f7e0 fac0 	bl	800403c <_ZN8touchgfx3HAL3lcdEv>
 8023abc:	6803      	ldr	r3, [r0, #0]
 8023abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023ac0:	4798      	blx	r3
 8023ac2:	280b      	cmp	r0, #11
 8023ac4:	d85a      	bhi.n	8023b7c <_ZN8touchgfx6Canvas6renderEh+0x110>
 8023ac6:	e8df f000 	tbb	[pc, r0]
 8023aca:	5b50      	.short	0x5b50
 8023acc:	3059066b 	.word	0x3059066b
 8023ad0:	64646440 	.word	0x64646440
 8023ad4:	6464      	.short	0x6464
 8023ad6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8023ada:	2208      	movs	r2, #8
 8023adc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023ae0:	fb91 f2f2 	sdiv	r2, r1, r2
 8023ae4:	fb08 2303 	mla	r3, r8, r3, r2
 8023ae8:	441f      	add	r7, r3
 8023aea:	424b      	negs	r3, r1
 8023aec:	f001 0107 	and.w	r1, r1, #7
 8023af0:	f003 0307 	and.w	r3, r3, #7
 8023af4:	bf58      	it	pl
 8023af6:	4259      	negpl	r1, r3
 8023af8:	b2c9      	uxtb	r1, r1
 8023afa:	b2ed      	uxtb	r5, r5
 8023afc:	463a      	mov	r2, r7
 8023afe:	fa0f f388 	sxth.w	r3, r8
 8023b02:	f104 0014 	add.w	r0, r4, #20
 8023b06:	e9cd 1500 	strd	r1, r5, [sp]
 8023b0a:	6861      	ldr	r1, [r4, #4]
 8023b0c:	f7ff fe4e 	bl	80237ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8023b10:	4607      	mov	r7, r0
 8023b12:	6860      	ldr	r0, [r4, #4]
 8023b14:	6803      	ldr	r3, [r0, #0]
 8023b16:	691b      	ldr	r3, [r3, #16]
 8023b18:	4798      	blx	r3
 8023b1a:	6830      	ldr	r0, [r6, #0]
 8023b1c:	6803      	ldr	r3, [r0, #0]
 8023b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8023b20:	4798      	blx	r3
 8023b22:	4638      	mov	r0, r7
 8023b24:	b002      	add	sp, #8
 8023b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b2a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8023b2e:	2204      	movs	r2, #4
 8023b30:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023b34:	fb91 f2f2 	sdiv	r2, r1, r2
 8023b38:	fb08 2303 	mla	r3, r8, r3, r2
 8023b3c:	441f      	add	r7, r3
 8023b3e:	424b      	negs	r3, r1
 8023b40:	f001 0103 	and.w	r1, r1, #3
 8023b44:	f003 0303 	and.w	r3, r3, #3
 8023b48:	e7d4      	b.n	8023af4 <_ZN8touchgfx6Canvas6renderEh+0x88>
 8023b4a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8023b4e:	2202      	movs	r2, #2
 8023b50:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023b54:	2900      	cmp	r1, #0
 8023b56:	fb91 f2f2 	sdiv	r2, r1, r2
 8023b5a:	f001 0101 	and.w	r1, r1, #1
 8023b5e:	fb08 2303 	mla	r3, r8, r3, r2
 8023b62:	bfb8      	it	lt
 8023b64:	4249      	neglt	r1, r1
 8023b66:	441f      	add	r7, r3
 8023b68:	e7c6      	b.n	8023af8 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 8023b6a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023b6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b72:	fb08 f303 	mul.w	r3, r8, r3
 8023b76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8023b7a:	441f      	add	r7, r3
 8023b7c:	2100      	movs	r1, #0
 8023b7e:	e7bc      	b.n	8023afa <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8023b80:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023b84:	2103      	movs	r1, #3
 8023b86:	fb08 f203 	mul.w	r2, r8, r3
 8023b8a:	89a3      	ldrh	r3, [r4, #12]
 8023b8c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8023b90:	e7f3      	b.n	8023b7a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8023b92:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b9a:	fb08 2303 	mla	r3, r8, r3, r2
 8023b9e:	e7ec      	b.n	8023b7a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8023ba0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8023ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023ba8:	fb08 f303 	mul.w	r3, r8, r3
 8023bac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023bb0:	e7e3      	b.n	8023b7a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8023bb2:	2701      	movs	r7, #1
 8023bb4:	e7b5      	b.n	8023b22 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8023bb6:	bf00      	nop
 8023bb8:	24025934 	.word	0x24025934

08023bbc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8023bbc:	4b06      	ldr	r3, [pc, #24]	@ (8023bd8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 8023bbe:	b510      	push	{r4, lr}
 8023bc0:	781b      	ldrb	r3, [r3, #0]
 8023bc2:	2b01      	cmp	r3, #1
 8023bc4:	d107      	bne.n	8023bd6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8023bc6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8023bca:	680b      	ldr	r3, [r1, #0]
 8023bcc:	6814      	ldr	r4, [r2, #0]
 8023bce:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8023bd2:	6013      	str	r3, [r2, #0]
 8023bd4:	600c      	str	r4, [r1, #0]
 8023bd6:	bd10      	pop	{r4, pc}
 8023bd8:	2402592c 	.word	0x2402592c

08023bdc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8023bdc:	b513      	push	{r0, r1, r4, lr}
 8023bde:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8023be2:	4604      	mov	r4, r0
 8023be4:	e9cd 2100 	strd	r2, r1, [sp]
 8023be8:	b9a3      	cbnz	r3, 8023c14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8023bea:	466a      	mov	r2, sp
 8023bec:	a901      	add	r1, sp, #4
 8023bee:	4620      	mov	r0, r4
 8023bf0:	f7ff ffe4 	bl	8023bbc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023bf4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8023bf6:	9901      	ldr	r1, [sp, #4]
 8023bf8:	9a00      	ldr	r2, [sp, #0]
 8023bfa:	1ac9      	subs	r1, r1, r3
 8023bfc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8023bfe:	1ad2      	subs	r2, r2, r3
 8023c00:	9101      	str	r1, [sp, #4]
 8023c02:	2a00      	cmp	r2, #0
 8023c04:	9200      	str	r2, [sp, #0]
 8023c06:	da0b      	bge.n	8023c20 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8023c08:	2301      	movs	r3, #1
 8023c0a:	2900      	cmp	r1, #0
 8023c0c:	da0e      	bge.n	8023c2c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8023c0e:	f043 0304 	orr.w	r3, r3, #4
 8023c12:	e013      	b.n	8023c3c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8023c14:	f7ff ff08 	bl	8023a28 <_ZN8touchgfx6Canvas5closeEv>
 8023c18:	2800      	cmp	r0, #0
 8023c1a:	d1e6      	bne.n	8023bea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8023c1c:	b002      	add	sp, #8
 8023c1e:	bd10      	pop	{r4, pc}
 8023c20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023c22:	429a      	cmp	r2, r3
 8023c24:	bfac      	ite	ge
 8023c26:	2302      	movge	r3, #2
 8023c28:	2300      	movlt	r3, #0
 8023c2a:	e7ee      	b.n	8023c0a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8023c2c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8023c2e:	4281      	cmp	r1, r0
 8023c30:	bfac      	ite	ge
 8023c32:	2008      	movge	r0, #8
 8023c34:	2000      	movlt	r0, #0
 8023c36:	4318      	orrs	r0, r3
 8023c38:	b2c3      	uxtb	r3, r0
 8023c3a:	b158      	cbz	r0, 8023c54 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8023c3c:	2200      	movs	r2, #0
 8023c3e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8023c42:	9901      	ldr	r1, [sp, #4]
 8023c44:	9a00      	ldr	r2, [sp, #0]
 8023c46:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8023c48:	6722      	str	r2, [r4, #112]	@ 0x70
 8023c4a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8023c4e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8023c52:	e7e3      	b.n	8023c1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8023c54:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8023c58:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8023c5c:	4298      	cmp	r0, r3
 8023c5e:	d803      	bhi.n	8023c68 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8023c60:	f104 0014 	add.w	r0, r4, #20
 8023c64:	f7f0 f876 	bl	8013d54 <_ZN8touchgfx7Outline6moveToEii>
 8023c68:	2301      	movs	r3, #1
 8023c6a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8023c6e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8023c72:	2300      	movs	r3, #0
 8023c74:	e7e5      	b.n	8023c42 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08023c76 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8023c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023c78:	ab02      	add	r3, sp, #8
 8023c7a:	4604      	mov	r4, r0
 8023c7c:	9101      	str	r1, [sp, #4]
 8023c7e:	a901      	add	r1, sp, #4
 8023c80:	f843 2d08 	str.w	r2, [r3, #-8]!
 8023c84:	461a      	mov	r2, r3
 8023c86:	f7ff ff99 	bl	8023bbc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8023c8a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8023c8c:	9901      	ldr	r1, [sp, #4]
 8023c8e:	9a00      	ldr	r2, [sp, #0]
 8023c90:	1ac9      	subs	r1, r1, r3
 8023c92:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8023c94:	1ad2      	subs	r2, r2, r3
 8023c96:	9101      	str	r1, [sp, #4]
 8023c98:	2a00      	cmp	r2, #0
 8023c9a:	9200      	str	r2, [sp, #0]
 8023c9c:	db1c      	blt.n	8023cd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8023c9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8023ca0:	429a      	cmp	r2, r3
 8023ca2:	bfac      	ite	ge
 8023ca4:	2002      	movge	r0, #2
 8023ca6:	2000      	movlt	r0, #0
 8023ca8:	2900      	cmp	r1, #0
 8023caa:	db17      	blt.n	8023cdc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8023cac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8023cae:	4299      	cmp	r1, r3
 8023cb0:	bfac      	ite	ge
 8023cb2:	2308      	movge	r3, #8
 8023cb4:	2300      	movlt	r3, #0
 8023cb6:	4303      	orrs	r3, r0
 8023cb8:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8023cbc:	b2dd      	uxtb	r5, r3
 8023cbe:	b978      	cbnz	r0, 8023ce0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8023cc0:	f104 0014 	add.w	r0, r4, #20
 8023cc4:	f7ff fd66 	bl	8023794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023cc8:	9b01      	ldr	r3, [sp, #4]
 8023cca:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8023cce:	6623      	str	r3, [r4, #96]	@ 0x60
 8023cd0:	9b00      	ldr	r3, [sp, #0]
 8023cd2:	6663      	str	r3, [r4, #100]	@ 0x64
 8023cd4:	b002      	add	sp, #8
 8023cd6:	bd70      	pop	{r4, r5, r6, pc}
 8023cd8:	2001      	movs	r0, #1
 8023cda:	e7e5      	b.n	8023ca8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8023cdc:	2304      	movs	r3, #4
 8023cde:	e7ea      	b.n	8023cb6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8023ce0:	b113      	cbz	r3, 8023ce8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8023ce2:	ea10 0305 	ands.w	r3, r0, r5
 8023ce6:	d11c      	bne.n	8023d22 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8023ce8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8023cec:	f104 0614 	add.w	r6, r4, #20
 8023cf0:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8023cf4:	b98b      	cbnz	r3, 8023d1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8023cf6:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8023cfa:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8023cfe:	4298      	cmp	r0, r3
 8023d00:	d802      	bhi.n	8023d08 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8023d02:	4630      	mov	r0, r6
 8023d04:	f7f0 f826 	bl	8013d54 <_ZN8touchgfx7Outline6moveToEii>
 8023d08:	2301      	movs	r3, #1
 8023d0a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8023d0e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8023d12:	4630      	mov	r0, r6
 8023d14:	e9dd 2100 	ldrd	r2, r1, [sp]
 8023d18:	e7d4      	b.n	8023cc4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8023d1a:	4630      	mov	r0, r6
 8023d1c:	f7ff fd3a 	bl	8023794 <_ZN8touchgfx10Rasterizer6lineToEii>
 8023d20:	e7f7      	b.n	8023d12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8023d22:	461d      	mov	r5, r3
 8023d24:	e7d0      	b.n	8023cc8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08023d28 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8023d28:	b538      	push	{r3, r4, r5, lr}
 8023d2a:	ed2d 8b10 	vpush	{d8-d15}
 8023d2e:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8023d32:	4605      	mov	r5, r0
 8023d34:	eeb0 ca40 	vmov.f32	s24, s0
 8023d38:	460c      	mov	r4, r1
 8023d3a:	eef0 ca60 	vmov.f32	s25, s1
 8023d3e:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8023e9c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8023d42:	eeb0 da41 	vmov.f32	s26, s2
 8023d46:	eef0 da61 	vmov.f32	s27, s3
 8023d4a:	eeb0 ea42 	vmov.f32	s28, s4
 8023d4e:	eef0 ea62 	vmov.f32	s29, s5
 8023d52:	eef0 aa6b 	vmov.f32	s21, s23
 8023d56:	2c08      	cmp	r4, #8
 8023d58:	d86e      	bhi.n	8023e38 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8023d5a:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8023d5e:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8023d62:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8023d66:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8023d6a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8023d6e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8023d72:	ee7c faad 	vadd.f32	s31, s25, s27
 8023d76:	eee6 7a07 	vfma.f32	s15, s12, s14
 8023d7a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8023d7e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8023d82:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8023d86:	ee6f faab 	vmul.f32	s31, s31, s23
 8023d8a:	ee69 9aab 	vmul.f32	s19, s19, s23
 8023d8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8023d92:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8023d96:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8023d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d9e:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8023da2:	ee68 8aab 	vmul.f32	s17, s17, s23
 8023da6:	bf48      	it	mi
 8023da8:	eef1 7a67 	vnegmi.f32	s15, s15
 8023dac:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8023db0:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8023db4:	eef4 7acb 	vcmpe.f32	s15, s22
 8023db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dbc:	dd3f      	ble.n	8023e3e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8023dbe:	ee27 7a07 	vmul.f32	s14, s14, s14
 8023dc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8023dc6:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8023dca:	ee27 7a06 	vmul.f32	s14, s14, s12
 8023dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023dd6:	d847      	bhi.n	8023e68 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8023dd8:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8023ddc:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8023de0:	f000 fa57 	bl	8024292 <atan2f>
 8023de4:	eeb0 8a40 	vmov.f32	s16, s0
 8023de8:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8023dec:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8023df0:	f000 fa4f 	bl	8024292 <atan2f>
 8023df4:	ee38 0a40 	vsub.f32	s0, s16, s0
 8023df8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8023ea0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8023dfc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8023e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e04:	bf48      	it	mi
 8023e06:	eeb1 0a40 	vnegmi.f32	s0, s0
 8023e0a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e12:	bfa4      	itt	ge
 8023e14:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8023ea4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8023e18:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8023e1c:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8023ea8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8023e20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8023e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e28:	d51e      	bpl.n	8023e68 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8023e2a:	eef0 0a49 	vmov.f32	s1, s18
 8023e2e:	4628      	mov	r0, r5
 8023e30:	eeb0 0a68 	vmov.f32	s0, s17
 8023e34:	f7ed f998 	bl	8011168 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8023e38:	ecbd 8b10 	vpop	{d8-d15}
 8023e3c:	bd38      	pop	{r3, r4, r5, pc}
 8023e3e:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8023e42:	eeb0 7a68 	vmov.f32	s14, s17
 8023e46:	eef0 6a49 	vmov.f32	s13, s18
 8023e4a:	eea7 7aea 	vfms.f32	s14, s15, s21
 8023e4e:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8023e52:	eee7 6aea 	vfms.f32	s13, s15, s21
 8023e56:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8023e5a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8023e5e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8023e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e66:	d9e0      	bls.n	8023e2a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8023e68:	3401      	adds	r4, #1
 8023e6a:	eef0 0a6c 	vmov.f32	s1, s25
 8023e6e:	eeb0 0a4c 	vmov.f32	s0, s24
 8023e72:	4628      	mov	r0, r5
 8023e74:	4621      	mov	r1, r4
 8023e76:	eef0 2a49 	vmov.f32	s5, s18
 8023e7a:	eeb0 2a68 	vmov.f32	s4, s17
 8023e7e:	eef0 1a6f 	vmov.f32	s3, s31
 8023e82:	eeb0 1a4f 	vmov.f32	s2, s30
 8023e86:	f7ff ff4f 	bl	8023d28 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8023e8a:	eef0 da4a 	vmov.f32	s27, s20
 8023e8e:	eeb0 da69 	vmov.f32	s26, s19
 8023e92:	eef0 ca49 	vmov.f32	s25, s18
 8023e96:	eeb0 ca68 	vmov.f32	s24, s17
 8023e9a:	e75c      	b.n	8023d56 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8023e9c:	2edbe6ff 	.word	0x2edbe6ff
 8023ea0:	40490fdb 	.word	0x40490fdb
 8023ea4:	40c90fdb 	.word	0x40c90fdb
 8023ea8:	3dcccccd 	.word	0x3dcccccd

08023eac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8023eac:	b530      	push	{r4, r5, lr}
 8023eae:	ed2d 8b10 	vpush	{d8-d15}
 8023eb2:	eef0 8a40 	vmov.f32	s17, s0
 8023eb6:	b085      	sub	sp, #20
 8023eb8:	eef0 9a60 	vmov.f32	s19, s1
 8023ebc:	4604      	mov	r4, r0
 8023ebe:	eef0 fa41 	vmov.f32	s31, s2
 8023ec2:	460d      	mov	r5, r1
 8023ec4:	eeb0 fa61 	vmov.f32	s30, s3
 8023ec8:	eef0 ba42 	vmov.f32	s23, s4
 8023ecc:	eeb0 ca62 	vmov.f32	s24, s5
 8023ed0:	eef0 aa43 	vmov.f32	s21, s6
 8023ed4:	eeb0 ba63 	vmov.f32	s22, s7
 8023ed8:	2d08      	cmp	r5, #8
 8023eda:	f200 8113 	bhi.w	8024104 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8023ede:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8023ee2:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8023ee6:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8023eea:	ee38 daaf 	vadd.f32	s26, s17, s31
 8023eee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8023ef2:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8023ef6:	ee2d da27 	vmul.f32	s26, s26, s15
 8023efa:	ed8d 6a01 	vstr	s12, [sp, #4]
 8023efe:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8023f02:	ee6c caa7 	vmul.f32	s25, s25, s15
 8023f06:	eeb0 ea4d 	vmov.f32	s28, s26
 8023f0a:	ee79 da8f 	vadd.f32	s27, s19, s30
 8023f0e:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8023f12:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8023f16:	ee66 6a27 	vmul.f32	s13, s12, s15
 8023f1a:	ee6d daa7 	vmul.f32	s27, s27, s15
 8023f1e:	edcd 6a03 	vstr	s13, [sp, #12]
 8023f22:	eef0 6a6c 	vmov.f32	s13, s25
 8023f26:	eef0 ea6d 	vmov.f32	s29, s27
 8023f2a:	ee2e ea27 	vmul.f32	s28, s28, s15
 8023f2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8023f32:	eee7 ea27 	vfma.f32	s29, s14, s15
 8023f36:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8023f3a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8023f3e:	eef0 6a67 	vmov.f32	s13, s15
 8023f42:	ed8d 7a02 	vstr	s14, [sp, #8]
 8023f46:	ed9d 7a03 	vldr	s14, [sp, #12]
 8023f4a:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8023f4e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8023f52:	ee3e aa87 	vadd.f32	s20, s29, s14
 8023f56:	ee29 9a27 	vmul.f32	s18, s18, s15
 8023f5a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8023f5e:	2d00      	cmp	r5, #0
 8023f60:	f000 810b 	beq.w	802417a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8023f64:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8023f68:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80241c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8023f6c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8023f70:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8023f74:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8023f78:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8023f7c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8023f80:	eea6 7a27 	vfma.f32	s14, s12, s15
 8023f84:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8023f88:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8023f8c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8023f90:	eea5 6a27 	vfma.f32	s12, s10, s15
 8023f94:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8023f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023f9c:	bf48      	it	mi
 8023f9e:	eeb1 7a47 	vnegmi.f32	s14, s14
 8023fa2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8023fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023faa:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8023fae:	bf48      	it	mi
 8023fb0:	eeb1 6a46 	vnegmi.f32	s12, s12
 8023fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fb8:	f340 80a8 	ble.w	802410c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8023fbc:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8023fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fc4:	dd5a      	ble.n	802407c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8023fc6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8023fca:	ee37 7a06 	vadd.f32	s14, s14, s12
 8023fce:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8023fd2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8023fd6:	ee65 7a85 	vmul.f32	s15, s11, s10
 8023fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023fe2:	f200 80ca 	bhi.w	802417a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8023fe6:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8023fea:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8023fee:	f000 f950 	bl	8024292 <atan2f>
 8023ff2:	eeb0 8a40 	vmov.f32	s16, s0
 8023ff6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8023ffa:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8023ffe:	f000 f948 	bl	8024292 <atan2f>
 8024002:	ee38 fa40 	vsub.f32	s30, s16, s0
 8024006:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 802400a:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802400e:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8024012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024016:	bf48      	it	mi
 8024018:	eeb1 fa4f 	vnegmi.f32	s30, s30
 802401c:	f000 f939 	bl	8024292 <atan2f>
 8024020:	ee30 0a48 	vsub.f32	s0, s0, s16
 8024024:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80241c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8024028:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024030:	eeb4 fae7 	vcmpe.f32	s30, s15
 8024034:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80241c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8024038:	bf48      	it	mi
 802403a:	eeb1 0a40 	vnegmi.f32	s0, s0
 802403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024042:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8024046:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80241c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802404a:	bfa4      	itt	ge
 802404c:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80241cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8024050:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8024054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024058:	bfa4      	itt	ge
 802405a:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80241cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802405e:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8024062:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8024066:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802406e:	f140 8084 	bpl.w	802417a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024072:	eef0 0a4a 	vmov.f32	s1, s20
 8024076:	eeb0 0a49 	vmov.f32	s0, s18
 802407a:	e040      	b.n	80240fe <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802407c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8024080:	ee27 7a07 	vmul.f32	s14, s14, s14
 8024084:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024088:	ee67 7a85 	vmul.f32	s15, s15, s10
 802408c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8024090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024094:	d871      	bhi.n	802417a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024096:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802409a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802409e:	f000 f8f8 	bl	8024292 <atan2f>
 80240a2:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80240a6:	eeb0 8a40 	vmov.f32	s16, s0
 80240aa:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80240ae:	f000 f8f0 	bl	8024292 <atan2f>
 80240b2:	ee38 0a40 	vsub.f32	s0, s16, s0
 80240b6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80241c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80240ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80240be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240c2:	bf48      	it	mi
 80240c4:	eeb1 0a40 	vnegmi.f32	s0, s0
 80240c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80240cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240d0:	bfa4      	itt	ge
 80240d2:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80241cc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80240d6:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80240da:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80241c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80240de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80240e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240e6:	d548      	bpl.n	802417a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80240e8:	eef0 0a4f 	vmov.f32	s1, s30
 80240ec:	4620      	mov	r0, r4
 80240ee:	eeb0 0a6f 	vmov.f32	s0, s31
 80240f2:	f7ed f839 	bl	8011168 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80240f6:	eef0 0a4c 	vmov.f32	s1, s24
 80240fa:	eeb0 0a6b 	vmov.f32	s0, s23
 80240fe:	4620      	mov	r0, r4
 8024100:	f7ed f832 	bl	8011168 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8024104:	b005      	add	sp, #20
 8024106:	ecbd 8b10 	vpop	{d8-d15}
 802410a:	bd30      	pop	{r4, r5, pc}
 802410c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80241c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8024110:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8024114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024118:	dd19      	ble.n	802414e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 802411a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 802411e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8024122:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8024126:	ee67 7a85 	vmul.f32	s15, s15, s10
 802412a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802412e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024132:	d822      	bhi.n	802417a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8024134:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8024138:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802413c:	f000 f8a9 	bl	8024292 <atan2f>
 8024140:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8024144:	eeb0 8a40 	vmov.f32	s16, s0
 8024148:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802414c:	e7af      	b.n	80240ae <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802414e:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8024152:	eeb0 7a49 	vmov.f32	s14, s18
 8024156:	eeb0 6a4a 	vmov.f32	s12, s20
 802415a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802415e:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8024162:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8024166:	ee66 7a06 	vmul.f32	s15, s12, s12
 802416a:	eee7 7a07 	vfma.f32	s15, s14, s14
 802416e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8024172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024176:	f67f af7c 	bls.w	8024072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802417a:	3501      	adds	r5, #1
 802417c:	eef0 0a69 	vmov.f32	s1, s19
 8024180:	eeb0 0a68 	vmov.f32	s0, s17
 8024184:	4620      	mov	r0, r4
 8024186:	4629      	mov	r1, r5
 8024188:	eef0 3a4a 	vmov.f32	s7, s20
 802418c:	eeb0 3a49 	vmov.f32	s6, s18
 8024190:	eef0 2a6e 	vmov.f32	s5, s29
 8024194:	eeb0 2a4e 	vmov.f32	s4, s28
 8024198:	eef0 1a6d 	vmov.f32	s3, s27
 802419c:	eeb0 1a4d 	vmov.f32	s2, s26
 80241a0:	f7ff fe84 	bl	8023eac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 80241a4:	eeb0 ca6c 	vmov.f32	s24, s25
 80241a8:	eddd ba01 	vldr	s23, [sp, #4]
 80241ac:	eef0 9a4a 	vmov.f32	s19, s20
 80241b0:	ed9d fa02 	vldr	s30, [sp, #8]
 80241b4:	eef0 8a49 	vmov.f32	s17, s18
 80241b8:	eddd fa03 	vldr	s31, [sp, #12]
 80241bc:	e68c      	b.n	8023ed8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80241be:	bf00      	nop
 80241c0:	2edbe6ff 	.word	0x2edbe6ff
 80241c4:	40490fdb 	.word	0x40490fdb
 80241c8:	3dcccccd 	.word	0x3dcccccd
 80241cc:	40c90fdb 	.word	0x40c90fdb

080241d0 <_ZN8touchgfx6CanvasD1Ev>:
 80241d0:	4b04      	ldr	r3, [pc, #16]	@ (80241e4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80241d2:	b510      	push	{r4, lr}
 80241d4:	4604      	mov	r4, r0
 80241d6:	f840 3b14 	str.w	r3, [r0], #20
 80241da:	f7ef f8c4 	bl	8013366 <_ZN8touchgfx7OutlineD1Ev>
 80241de:	4620      	mov	r0, r4
 80241e0:	bd10      	pop	{r4, pc}
 80241e2:	bf00      	nop
 80241e4:	080294e4 	.word	0x080294e4

080241e8 <_ZN8touchgfx6CanvasD0Ev>:
 80241e8:	b510      	push	{r4, lr}
 80241ea:	4604      	mov	r4, r0
 80241ec:	f7ff fff0 	bl	80241d0 <_ZN8touchgfx6CanvasD1Ev>
 80241f0:	2174      	movs	r1, #116	@ 0x74
 80241f2:	4620      	mov	r0, r4
 80241f4:	f000 f826 	bl	8024244 <_ZdlPvj>
 80241f8:	4620      	mov	r0, r4
 80241fa:	bd10      	pop	{r4, pc}

080241fc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80241fc:	790b      	ldrb	r3, [r1, #4]
 80241fe:	2b00      	cmp	r3, #0
 8024200:	bf0c      	ite	eq
 8024202:	2301      	moveq	r3, #1
 8024204:	2300      	movne	r3, #0
 8024206:	b570      	push	{r4, r5, r6, lr}
 8024208:	4604      	mov	r4, r0
 802420a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 802420e:	460e      	mov	r6, r1
 8024210:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8024214:	d109      	bne.n	802422a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8024216:	b14d      	cbz	r5, 802422c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8024218:	7933      	ldrb	r3, [r6, #4]
 802421a:	2b01      	cmp	r3, #1
 802421c:	d10c      	bne.n	8024238 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802421e:	6823      	ldr	r3, [r4, #0]
 8024220:	4620      	mov	r0, r4
 8024222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024228:	4718      	bx	r3
 802422a:	b12d      	cbz	r5, 8024238 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802422c:	6823      	ldr	r3, [r4, #0]
 802422e:	4620      	mov	r0, r4
 8024230:	695b      	ldr	r3, [r3, #20]
 8024232:	4798      	blx	r3
 8024234:	2d00      	cmp	r5, #0
 8024236:	d1ef      	bne.n	8024218 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8024238:	bd70      	pop	{r4, r5, r6, pc}

0802423a <__aeabi_atexit>:
 802423a:	460b      	mov	r3, r1
 802423c:	4601      	mov	r1, r0
 802423e:	4618      	mov	r0, r3
 8024240:	f000 bc58 	b.w	8024af4 <__cxa_atexit>

08024244 <_ZdlPvj>:
 8024244:	f000 b812 	b.w	802426c <_ZdlPv>

08024248 <__cxa_guard_acquire>:
 8024248:	6802      	ldr	r2, [r0, #0]
 802424a:	07d2      	lsls	r2, r2, #31
 802424c:	4603      	mov	r3, r0
 802424e:	d405      	bmi.n	802425c <__cxa_guard_acquire+0x14>
 8024250:	7842      	ldrb	r2, [r0, #1]
 8024252:	b102      	cbz	r2, 8024256 <__cxa_guard_acquire+0xe>
 8024254:	deff      	udf	#255	@ 0xff
 8024256:	2001      	movs	r0, #1
 8024258:	7058      	strb	r0, [r3, #1]
 802425a:	4770      	bx	lr
 802425c:	2000      	movs	r0, #0
 802425e:	4770      	bx	lr

08024260 <__cxa_guard_release>:
 8024260:	2301      	movs	r3, #1
 8024262:	6003      	str	r3, [r0, #0]
 8024264:	4770      	bx	lr

08024266 <__cxa_pure_virtual>:
 8024266:	b508      	push	{r3, lr}
 8024268:	f000 f80e 	bl	8024288 <_ZSt9terminatev>

0802426c <_ZdlPv>:
 802426c:	f000 bb8c 	b.w	8024988 <free>

08024270 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8024270:	b508      	push	{r3, lr}
 8024272:	4780      	blx	r0
 8024274:	f000 fb55 	bl	8024922 <abort>

08024278 <_ZSt13get_terminatev>:
 8024278:	4b02      	ldr	r3, [pc, #8]	@ (8024284 <_ZSt13get_terminatev+0xc>)
 802427a:	6818      	ldr	r0, [r3, #0]
 802427c:	f3bf 8f5b 	dmb	ish
 8024280:	4770      	bx	lr
 8024282:	bf00      	nop
 8024284:	24000108 	.word	0x24000108

08024288 <_ZSt9terminatev>:
 8024288:	b508      	push	{r3, lr}
 802428a:	f7ff fff5 	bl	8024278 <_ZSt13get_terminatev>
 802428e:	f7ff ffef 	bl	8024270 <_ZN10__cxxabiv111__terminateEPFvvE>

08024292 <atan2f>:
 8024292:	f000 b9cd 	b.w	8024630 <__ieee754_atan2f>
	...

08024298 <sqrtf>:
 8024298:	b508      	push	{r3, lr}
 802429a:	ed2d 8b02 	vpush	{d8}
 802429e:	eeb0 8a40 	vmov.f32	s16, s0
 80242a2:	f000 f9c2 	bl	802462a <__ieee754_sqrtf>
 80242a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80242aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242ae:	d60c      	bvs.n	80242ca <sqrtf+0x32>
 80242b0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80242d0 <sqrtf+0x38>
 80242b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80242b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80242bc:	d505      	bpl.n	80242ca <sqrtf+0x32>
 80242be:	f000 fea9 	bl	8025014 <__errno>
 80242c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80242c6:	2321      	movs	r3, #33	@ 0x21
 80242c8:	6003      	str	r3, [r0, #0]
 80242ca:	ecbd 8b02 	vpop	{d8}
 80242ce:	bd08      	pop	{r3, pc}
 80242d0:	00000000 	.word	0x00000000

080242d4 <sinf_poly>:
 80242d4:	07cb      	lsls	r3, r1, #31
 80242d6:	d412      	bmi.n	80242fe <sinf_poly+0x2a>
 80242d8:	ee21 5b00 	vmul.f64	d5, d1, d0
 80242dc:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80242e0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80242e4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80242e8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80242ec:	ee21 1b05 	vmul.f64	d1, d1, d5
 80242f0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80242f4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80242f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80242fc:	4770      	bx	lr
 80242fe:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8024302:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024306:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802430a:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802430e:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024312:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8024316:	eea1 0b06 	vfma.f64	d0, d1, d6
 802431a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802431e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024322:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024326:	e7e5      	b.n	80242f4 <sinf_poly+0x20>

08024328 <sinf>:
 8024328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802432a:	ee10 4a10 	vmov	r4, s0
 802432e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024332:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8024336:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802433a:	eef0 7a40 	vmov.f32	s15, s0
 802433e:	d218      	bcs.n	8024372 <sinf+0x4a>
 8024340:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024344:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8024348:	d20a      	bcs.n	8024360 <sinf+0x38>
 802434a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 802434e:	d103      	bne.n	8024358 <sinf+0x30>
 8024350:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8024354:	ed8d 1a01 	vstr	s2, [sp, #4]
 8024358:	eeb0 0a67 	vmov.f32	s0, s15
 802435c:	b003      	add	sp, #12
 802435e:	bd30      	pop	{r4, r5, pc}
 8024360:	483b      	ldr	r0, [pc, #236]	@ (8024450 <sinf+0x128>)
 8024362:	eeb0 0b46 	vmov.f64	d0, d6
 8024366:	2100      	movs	r1, #0
 8024368:	b003      	add	sp, #12
 802436a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802436e:	f7ff bfb1 	b.w	80242d4 <sinf_poly>
 8024372:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024376:	4293      	cmp	r3, r2
 8024378:	d824      	bhi.n	80243c4 <sinf+0x9c>
 802437a:	4b35      	ldr	r3, [pc, #212]	@ (8024450 <sinf+0x128>)
 802437c:	ed93 7b08 	vldr	d7, [r3, #32]
 8024380:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024384:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8024388:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802438c:	ee17 1a90 	vmov	r1, s15
 8024390:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024394:	1609      	asrs	r1, r1, #24
 8024396:	ee07 1a90 	vmov	s15, r1
 802439a:	f001 0203 	and.w	r2, r1, #3
 802439e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80243a2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80243a6:	ed92 0b00 	vldr	d0, [r2]
 80243aa:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80243ae:	f011 0f02 	tst.w	r1, #2
 80243b2:	eea5 6b47 	vfms.f64	d6, d5, d7
 80243b6:	bf08      	it	eq
 80243b8:	4618      	moveq	r0, r3
 80243ba:	ee26 1b06 	vmul.f64	d1, d6, d6
 80243be:	ee20 0b06 	vmul.f64	d0, d0, d6
 80243c2:	e7d1      	b.n	8024368 <sinf+0x40>
 80243c4:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80243c8:	d237      	bcs.n	802443a <sinf+0x112>
 80243ca:	4922      	ldr	r1, [pc, #136]	@ (8024454 <sinf+0x12c>)
 80243cc:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80243d0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80243d4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80243d8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80243dc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80243e0:	6a10      	ldr	r0, [r2, #32]
 80243e2:	6912      	ldr	r2, [r2, #16]
 80243e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80243e8:	40ab      	lsls	r3, r5
 80243ea:	fba0 5003 	umull	r5, r0, r0, r3
 80243ee:	4359      	muls	r1, r3
 80243f0:	fbe3 0102 	umlal	r0, r1, r3, r2
 80243f4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80243f8:	0f9d      	lsrs	r5, r3, #30
 80243fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80243fe:	1ac9      	subs	r1, r1, r3
 8024400:	f7dc f954 	bl	80006ac <__aeabi_l2d>
 8024404:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8024408:	4b11      	ldr	r3, [pc, #68]	@ (8024450 <sinf+0x128>)
 802440a:	f004 0203 	and.w	r2, r4, #3
 802440e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024412:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8024448 <sinf+0x120>
 8024416:	ed92 0b00 	vldr	d0, [r2]
 802441a:	ec41 0b17 	vmov	d7, r0, r1
 802441e:	f014 0f02 	tst.w	r4, #2
 8024422:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024426:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802442a:	4629      	mov	r1, r5
 802442c:	bf08      	it	eq
 802442e:	4618      	moveq	r0, r3
 8024430:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024434:	ee20 0b07 	vmul.f64	d0, d0, d7
 8024438:	e796      	b.n	8024368 <sinf+0x40>
 802443a:	b003      	add	sp, #12
 802443c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024440:	f000 b8e4 	b.w	802460c <__math_invalidf>
 8024444:	f3af 8000 	nop.w
 8024448:	54442d18 	.word	0x54442d18
 802444c:	3c1921fb 	.word	0x3c1921fb
 8024450:	08029550 	.word	0x08029550
 8024454:	080294f0 	.word	0x080294f0

08024458 <sinf_poly>:
 8024458:	07cb      	lsls	r3, r1, #31
 802445a:	d412      	bmi.n	8024482 <sinf_poly+0x2a>
 802445c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8024460:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8024464:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8024468:	eea6 7b01 	vfma.f64	d7, d6, d1
 802446c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8024470:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024474:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024478:	eea7 0b01 	vfma.f64	d0, d7, d1
 802447c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024480:	4770      	bx	lr
 8024482:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8024486:	ee21 5b01 	vmul.f64	d5, d1, d1
 802448a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802448e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8024492:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024496:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802449a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802449e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80244a2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80244a6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80244aa:	e7e5      	b.n	8024478 <sinf_poly+0x20>
 80244ac:	0000      	movs	r0, r0
	...

080244b0 <cosf>:
 80244b0:	b538      	push	{r3, r4, r5, lr}
 80244b2:	ee10 4a10 	vmov	r4, s0
 80244b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80244ba:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80244be:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80244c2:	d21f      	bcs.n	8024504 <cosf+0x54>
 80244c4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80244c8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80244cc:	f0c0 8082 	bcc.w	80245d4 <cosf+0x124>
 80244d0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80244d4:	4b44      	ldr	r3, [pc, #272]	@ (80245e8 <cosf+0x138>)
 80244d6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80244da:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80244de:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80244e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80244e6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80244ea:	eea7 0b05 	vfma.f64	d0, d7, d5
 80244ee:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80244f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80244f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80244fa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80244fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8024502:	bd38      	pop	{r3, r4, r5, pc}
 8024504:	f240 422e 	movw	r2, #1070	@ 0x42e
 8024508:	4293      	cmp	r3, r2
 802450a:	d829      	bhi.n	8024560 <cosf+0xb0>
 802450c:	4b36      	ldr	r3, [pc, #216]	@ (80245e8 <cosf+0x138>)
 802450e:	ed93 6b08 	vldr	d6, [r3, #32]
 8024512:	ee27 6b06 	vmul.f64	d6, d7, d6
 8024516:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 802451a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802451e:	ee16 1a90 	vmov	r1, s13
 8024522:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8024526:	1609      	asrs	r1, r1, #24
 8024528:	ee06 1a90 	vmov	s13, r1
 802452c:	f001 0203 	and.w	r2, r1, #3
 8024530:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024534:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024538:	ed92 0b00 	vldr	d0, [r2]
 802453c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8024540:	f011 0f02 	tst.w	r1, #2
 8024544:	f081 0101 	eor.w	r1, r1, #1
 8024548:	eea5 7b46 	vfms.f64	d7, d5, d6
 802454c:	bf08      	it	eq
 802454e:	4618      	moveq	r0, r3
 8024550:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024558:	ee20 0b07 	vmul.f64	d0, d0, d7
 802455c:	f7ff bf7c 	b.w	8024458 <sinf_poly>
 8024560:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8024564:	d232      	bcs.n	80245cc <cosf+0x11c>
 8024566:	4921      	ldr	r1, [pc, #132]	@ (80245ec <cosf+0x13c>)
 8024568:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802456c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8024570:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8024574:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8024578:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802457c:	6a10      	ldr	r0, [r2, #32]
 802457e:	6912      	ldr	r2, [r2, #16]
 8024580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8024584:	40ab      	lsls	r3, r5
 8024586:	fba0 5003 	umull	r5, r0, r0, r3
 802458a:	4359      	muls	r1, r3
 802458c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8024590:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8024594:	0f9d      	lsrs	r5, r3, #30
 8024596:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802459a:	1ac9      	subs	r1, r1, r3
 802459c:	f7dc f886 	bl	80006ac <__aeabi_l2d>
 80245a0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80245a4:	4b10      	ldr	r3, [pc, #64]	@ (80245e8 <cosf+0x138>)
 80245a6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80245e0 <cosf+0x130>
 80245aa:	ec41 0b17 	vmov	d7, r0, r1
 80245ae:	f004 0203 	and.w	r2, r4, #3
 80245b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80245b6:	ed92 0b00 	vldr	d0, [r2]
 80245ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80245be:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80245c2:	f014 0f02 	tst.w	r4, #2
 80245c6:	f085 0101 	eor.w	r1, r5, #1
 80245ca:	e7bf      	b.n	802454c <cosf+0x9c>
 80245cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80245d0:	f000 b81c 	b.w	802460c <__math_invalidf>
 80245d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80245d8:	e793      	b.n	8024502 <cosf+0x52>
 80245da:	bf00      	nop
 80245dc:	f3af 8000 	nop.w
 80245e0:	54442d18 	.word	0x54442d18
 80245e4:	3c1921fb 	.word	0x3c1921fb
 80245e8:	08029550 	.word	0x08029550
 80245ec:	080294f0 	.word	0x080294f0

080245f0 <with_errnof>:
 80245f0:	b510      	push	{r4, lr}
 80245f2:	ed2d 8b02 	vpush	{d8}
 80245f6:	eeb0 8a40 	vmov.f32	s16, s0
 80245fa:	4604      	mov	r4, r0
 80245fc:	f000 fd0a 	bl	8025014 <__errno>
 8024600:	eeb0 0a48 	vmov.f32	s0, s16
 8024604:	ecbd 8b02 	vpop	{d8}
 8024608:	6004      	str	r4, [r0, #0]
 802460a:	bd10      	pop	{r4, pc}

0802460c <__math_invalidf>:
 802460c:	eef0 7a40 	vmov.f32	s15, s0
 8024610:	ee30 7a40 	vsub.f32	s14, s0, s0
 8024614:	eef4 7a67 	vcmp.f32	s15, s15
 8024618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802461c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8024620:	d602      	bvs.n	8024628 <__math_invalidf+0x1c>
 8024622:	2021      	movs	r0, #33	@ 0x21
 8024624:	f7ff bfe4 	b.w	80245f0 <with_errnof>
 8024628:	4770      	bx	lr

0802462a <__ieee754_sqrtf>:
 802462a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 802462e:	4770      	bx	lr

08024630 <__ieee754_atan2f>:
 8024630:	ee10 2a90 	vmov	r2, s1
 8024634:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8024638:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802463c:	b510      	push	{r4, lr}
 802463e:	eef0 7a40 	vmov.f32	s15, s0
 8024642:	d806      	bhi.n	8024652 <__ieee754_atan2f+0x22>
 8024644:	ee10 0a10 	vmov	r0, s0
 8024648:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802464c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8024650:	d904      	bls.n	802465c <__ieee754_atan2f+0x2c>
 8024652:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8024656:	eeb0 0a67 	vmov.f32	s0, s15
 802465a:	bd10      	pop	{r4, pc}
 802465c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8024660:	d103      	bne.n	802466a <__ieee754_atan2f+0x3a>
 8024662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024666:	f000 b881 	b.w	802476c <atanf>
 802466a:	1794      	asrs	r4, r2, #30
 802466c:	f004 0402 	and.w	r4, r4, #2
 8024670:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8024674:	b93b      	cbnz	r3, 8024686 <__ieee754_atan2f+0x56>
 8024676:	2c02      	cmp	r4, #2
 8024678:	d05c      	beq.n	8024734 <__ieee754_atan2f+0x104>
 802467a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8024748 <__ieee754_atan2f+0x118>
 802467e:	2c03      	cmp	r4, #3
 8024680:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8024684:	e7e7      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024686:	b939      	cbnz	r1, 8024698 <__ieee754_atan2f+0x68>
 8024688:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802474c <__ieee754_atan2f+0x11c>
 802468c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8024750 <__ieee754_atan2f+0x120>
 8024690:	2800      	cmp	r0, #0
 8024692:	fe67 7a27 	vselge.f32	s15, s14, s15
 8024696:	e7de      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024698:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802469c:	d110      	bne.n	80246c0 <__ieee754_atan2f+0x90>
 802469e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80246a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80246a6:	d107      	bne.n	80246b8 <__ieee754_atan2f+0x88>
 80246a8:	2c02      	cmp	r4, #2
 80246aa:	d846      	bhi.n	802473a <__ieee754_atan2f+0x10a>
 80246ac:	4b29      	ldr	r3, [pc, #164]	@ (8024754 <__ieee754_atan2f+0x124>)
 80246ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80246b2:	edd3 7a00 	vldr	s15, [r3]
 80246b6:	e7ce      	b.n	8024656 <__ieee754_atan2f+0x26>
 80246b8:	2c02      	cmp	r4, #2
 80246ba:	d841      	bhi.n	8024740 <__ieee754_atan2f+0x110>
 80246bc:	4b26      	ldr	r3, [pc, #152]	@ (8024758 <__ieee754_atan2f+0x128>)
 80246be:	e7f6      	b.n	80246ae <__ieee754_atan2f+0x7e>
 80246c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80246c4:	d0e0      	beq.n	8024688 <__ieee754_atan2f+0x58>
 80246c6:	1a5b      	subs	r3, r3, r1
 80246c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80246cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80246d0:	da1a      	bge.n	8024708 <__ieee754_atan2f+0xd8>
 80246d2:	2a00      	cmp	r2, #0
 80246d4:	da01      	bge.n	80246da <__ieee754_atan2f+0xaa>
 80246d6:	313c      	adds	r1, #60	@ 0x3c
 80246d8:	db19      	blt.n	802470e <__ieee754_atan2f+0xde>
 80246da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80246de:	f000 f919 	bl	8024914 <fabsf>
 80246e2:	f000 f843 	bl	802476c <atanf>
 80246e6:	eef0 7a40 	vmov.f32	s15, s0
 80246ea:	2c01      	cmp	r4, #1
 80246ec:	d012      	beq.n	8024714 <__ieee754_atan2f+0xe4>
 80246ee:	2c02      	cmp	r4, #2
 80246f0:	d017      	beq.n	8024722 <__ieee754_atan2f+0xf2>
 80246f2:	2c00      	cmp	r4, #0
 80246f4:	d0af      	beq.n	8024656 <__ieee754_atan2f+0x26>
 80246f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802475c <__ieee754_atan2f+0x12c>
 80246fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80246fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8024760 <__ieee754_atan2f+0x130>
 8024702:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024706:	e7a6      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024708:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8024750 <__ieee754_atan2f+0x120>
 802470c:	e7ed      	b.n	80246ea <__ieee754_atan2f+0xba>
 802470e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8024764 <__ieee754_atan2f+0x134>
 8024712:	e7ea      	b.n	80246ea <__ieee754_atan2f+0xba>
 8024714:	ee17 3a90 	vmov	r3, s15
 8024718:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802471c:	ee07 3a90 	vmov	s15, r3
 8024720:	e799      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024722:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802475c <__ieee754_atan2f+0x12c>
 8024726:	ee77 7a87 	vadd.f32	s15, s15, s14
 802472a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8024760 <__ieee754_atan2f+0x130>
 802472e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024732:	e790      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024734:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8024760 <__ieee754_atan2f+0x130>
 8024738:	e78d      	b.n	8024656 <__ieee754_atan2f+0x26>
 802473a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8024768 <__ieee754_atan2f+0x138>
 802473e:	e78a      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024740:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8024764 <__ieee754_atan2f+0x134>
 8024744:	e787      	b.n	8024656 <__ieee754_atan2f+0x26>
 8024746:	bf00      	nop
 8024748:	c0490fdb 	.word	0xc0490fdb
 802474c:	bfc90fdb 	.word	0xbfc90fdb
 8024750:	3fc90fdb 	.word	0x3fc90fdb
 8024754:	0802963c 	.word	0x0802963c
 8024758:	08029630 	.word	0x08029630
 802475c:	33bbbd2e 	.word	0x33bbbd2e
 8024760:	40490fdb 	.word	0x40490fdb
 8024764:	00000000 	.word	0x00000000
 8024768:	3f490fdb 	.word	0x3f490fdb

0802476c <atanf>:
 802476c:	b538      	push	{r3, r4, r5, lr}
 802476e:	ee10 5a10 	vmov	r5, s0
 8024772:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8024776:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802477a:	eef0 7a40 	vmov.f32	s15, s0
 802477e:	d30f      	bcc.n	80247a0 <atanf+0x34>
 8024780:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8024784:	d904      	bls.n	8024790 <atanf+0x24>
 8024786:	ee70 7a00 	vadd.f32	s15, s0, s0
 802478a:	eeb0 0a67 	vmov.f32	s0, s15
 802478e:	bd38      	pop	{r3, r4, r5, pc}
 8024790:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80248c8 <atanf+0x15c>
 8024794:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80248cc <atanf+0x160>
 8024798:	2d00      	cmp	r5, #0
 802479a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802479e:	e7f4      	b.n	802478a <atanf+0x1e>
 80247a0:	4b4b      	ldr	r3, [pc, #300]	@ (80248d0 <atanf+0x164>)
 80247a2:	429c      	cmp	r4, r3
 80247a4:	d810      	bhi.n	80247c8 <atanf+0x5c>
 80247a6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80247aa:	d20a      	bcs.n	80247c2 <atanf+0x56>
 80247ac:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80248d4 <atanf+0x168>
 80247b0:	ee30 7a07 	vadd.f32	s14, s0, s14
 80247b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80247b8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80247bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80247c0:	dce3      	bgt.n	802478a <atanf+0x1e>
 80247c2:	f04f 33ff 	mov.w	r3, #4294967295
 80247c6:	e013      	b.n	80247f0 <atanf+0x84>
 80247c8:	f000 f8a4 	bl	8024914 <fabsf>
 80247cc:	4b42      	ldr	r3, [pc, #264]	@ (80248d8 <atanf+0x16c>)
 80247ce:	429c      	cmp	r4, r3
 80247d0:	d84f      	bhi.n	8024872 <atanf+0x106>
 80247d2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80247d6:	429c      	cmp	r4, r3
 80247d8:	d841      	bhi.n	802485e <atanf+0xf2>
 80247da:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80247de:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80247e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80247e6:	2300      	movs	r3, #0
 80247e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80247ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80247f0:	1c5a      	adds	r2, r3, #1
 80247f2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80247f6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80248dc <atanf+0x170>
 80247fa:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80248e0 <atanf+0x174>
 80247fe:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80248e4 <atanf+0x178>
 8024802:	ee66 6a06 	vmul.f32	s13, s12, s12
 8024806:	eee6 5a87 	vfma.f32	s11, s13, s14
 802480a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80248e8 <atanf+0x17c>
 802480e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024812:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80248ec <atanf+0x180>
 8024816:	eee7 5a26 	vfma.f32	s11, s14, s13
 802481a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80248f0 <atanf+0x184>
 802481e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8024822:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80248f4 <atanf+0x188>
 8024826:	eee7 5a26 	vfma.f32	s11, s14, s13
 802482a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80248f8 <atanf+0x18c>
 802482e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8024832:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80248fc <atanf+0x190>
 8024836:	eea5 7a26 	vfma.f32	s14, s10, s13
 802483a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8024900 <atanf+0x194>
 802483e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8024842:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8024904 <atanf+0x198>
 8024846:	eea5 7a26 	vfma.f32	s14, s10, s13
 802484a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802484e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8024852:	ee27 7a87 	vmul.f32	s14, s15, s14
 8024856:	d121      	bne.n	802489c <atanf+0x130>
 8024858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802485c:	e795      	b.n	802478a <atanf+0x1e>
 802485e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8024862:	ee30 7a67 	vsub.f32	s14, s0, s15
 8024866:	ee30 0a27 	vadd.f32	s0, s0, s15
 802486a:	2301      	movs	r3, #1
 802486c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024870:	e7be      	b.n	80247f0 <atanf+0x84>
 8024872:	4b25      	ldr	r3, [pc, #148]	@ (8024908 <atanf+0x19c>)
 8024874:	429c      	cmp	r4, r3
 8024876:	d80b      	bhi.n	8024890 <atanf+0x124>
 8024878:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802487c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024880:	eea0 7a27 	vfma.f32	s14, s0, s15
 8024884:	2302      	movs	r3, #2
 8024886:	ee70 6a67 	vsub.f32	s13, s0, s15
 802488a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802488e:	e7af      	b.n	80247f0 <atanf+0x84>
 8024890:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8024894:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024898:	2303      	movs	r3, #3
 802489a:	e7a9      	b.n	80247f0 <atanf+0x84>
 802489c:	4a1b      	ldr	r2, [pc, #108]	@ (802490c <atanf+0x1a0>)
 802489e:	491c      	ldr	r1, [pc, #112]	@ (8024910 <atanf+0x1a4>)
 80248a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80248a4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80248a8:	edd3 6a00 	vldr	s13, [r3]
 80248ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 80248b0:	2d00      	cmp	r5, #0
 80248b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80248b6:	edd2 7a00 	vldr	s15, [r2]
 80248ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80248be:	bfb8      	it	lt
 80248c0:	eef1 7a67 	vneglt.f32	s15, s15
 80248c4:	e761      	b.n	802478a <atanf+0x1e>
 80248c6:	bf00      	nop
 80248c8:	bfc90fdb 	.word	0xbfc90fdb
 80248cc:	3fc90fdb 	.word	0x3fc90fdb
 80248d0:	3edfffff 	.word	0x3edfffff
 80248d4:	7149f2ca 	.word	0x7149f2ca
 80248d8:	3f97ffff 	.word	0x3f97ffff
 80248dc:	3c8569d7 	.word	0x3c8569d7
 80248e0:	3d4bda59 	.word	0x3d4bda59
 80248e4:	bd6ef16b 	.word	0xbd6ef16b
 80248e8:	3d886b35 	.word	0x3d886b35
 80248ec:	3dba2e6e 	.word	0x3dba2e6e
 80248f0:	3e124925 	.word	0x3e124925
 80248f4:	3eaaaaab 	.word	0x3eaaaaab
 80248f8:	bd15a221 	.word	0xbd15a221
 80248fc:	bd9d8795 	.word	0xbd9d8795
 8024900:	bde38e38 	.word	0xbde38e38
 8024904:	be4ccccd 	.word	0xbe4ccccd
 8024908:	401bffff 	.word	0x401bffff
 802490c:	08029658 	.word	0x08029658
 8024910:	08029648 	.word	0x08029648

08024914 <fabsf>:
 8024914:	ee10 3a10 	vmov	r3, s0
 8024918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802491c:	ee00 3a10 	vmov	s0, r3
 8024920:	4770      	bx	lr

08024922 <abort>:
 8024922:	b508      	push	{r3, lr}
 8024924:	2006      	movs	r0, #6
 8024926:	f000 fb03 	bl	8024f30 <raise>
 802492a:	2001      	movs	r0, #1
 802492c:	f7dd f8bc 	bl	8001aa8 <_exit>

08024930 <__assert_func>:
 8024930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024932:	4614      	mov	r4, r2
 8024934:	461a      	mov	r2, r3
 8024936:	4b09      	ldr	r3, [pc, #36]	@ (802495c <__assert_func+0x2c>)
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	4605      	mov	r5, r0
 802493c:	68d8      	ldr	r0, [r3, #12]
 802493e:	b14c      	cbz	r4, 8024954 <__assert_func+0x24>
 8024940:	4b07      	ldr	r3, [pc, #28]	@ (8024960 <__assert_func+0x30>)
 8024942:	9100      	str	r1, [sp, #0]
 8024944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024948:	4906      	ldr	r1, [pc, #24]	@ (8024964 <__assert_func+0x34>)
 802494a:	462b      	mov	r3, r5
 802494c:	f000 f984 	bl	8024c58 <fiprintf>
 8024950:	f7ff ffe7 	bl	8024922 <abort>
 8024954:	4b04      	ldr	r3, [pc, #16]	@ (8024968 <__assert_func+0x38>)
 8024956:	461c      	mov	r4, r3
 8024958:	e7f3      	b.n	8024942 <__assert_func+0x12>
 802495a:	bf00      	nop
 802495c:	24000118 	.word	0x24000118
 8024960:	08027bcd 	.word	0x08027bcd
 8024964:	08027bda 	.word	0x08027bda
 8024968:	08027bba 	.word	0x08027bba

0802496c <atexit>:
 802496c:	2300      	movs	r3, #0
 802496e:	4601      	mov	r1, r0
 8024970:	461a      	mov	r2, r3
 8024972:	4618      	mov	r0, r3
 8024974:	f000 bb8a 	b.w	802508c <__register_exitproc>

08024978 <malloc>:
 8024978:	4b02      	ldr	r3, [pc, #8]	@ (8024984 <malloc+0xc>)
 802497a:	4601      	mov	r1, r0
 802497c:	6818      	ldr	r0, [r3, #0]
 802497e:	f000 b82d 	b.w	80249dc <_malloc_r>
 8024982:	bf00      	nop
 8024984:	24000118 	.word	0x24000118

08024988 <free>:
 8024988:	4b02      	ldr	r3, [pc, #8]	@ (8024994 <free+0xc>)
 802498a:	4601      	mov	r1, r0
 802498c:	6818      	ldr	r0, [r3, #0]
 802498e:	f000 bbd9 	b.w	8025144 <_free_r>
 8024992:	bf00      	nop
 8024994:	24000118 	.word	0x24000118

08024998 <sbrk_aligned>:
 8024998:	b570      	push	{r4, r5, r6, lr}
 802499a:	4e0f      	ldr	r6, [pc, #60]	@ (80249d8 <sbrk_aligned+0x40>)
 802499c:	460c      	mov	r4, r1
 802499e:	6831      	ldr	r1, [r6, #0]
 80249a0:	4605      	mov	r5, r0
 80249a2:	b911      	cbnz	r1, 80249aa <sbrk_aligned+0x12>
 80249a4:	f000 fb14 	bl	8024fd0 <_sbrk_r>
 80249a8:	6030      	str	r0, [r6, #0]
 80249aa:	4621      	mov	r1, r4
 80249ac:	4628      	mov	r0, r5
 80249ae:	f000 fb0f 	bl	8024fd0 <_sbrk_r>
 80249b2:	1c43      	adds	r3, r0, #1
 80249b4:	d103      	bne.n	80249be <sbrk_aligned+0x26>
 80249b6:	f04f 34ff 	mov.w	r4, #4294967295
 80249ba:	4620      	mov	r0, r4
 80249bc:	bd70      	pop	{r4, r5, r6, pc}
 80249be:	1cc4      	adds	r4, r0, #3
 80249c0:	f024 0403 	bic.w	r4, r4, #3
 80249c4:	42a0      	cmp	r0, r4
 80249c6:	d0f8      	beq.n	80249ba <sbrk_aligned+0x22>
 80249c8:	1a21      	subs	r1, r4, r0
 80249ca:	4628      	mov	r0, r5
 80249cc:	f000 fb00 	bl	8024fd0 <_sbrk_r>
 80249d0:	3001      	adds	r0, #1
 80249d2:	d1f2      	bne.n	80249ba <sbrk_aligned+0x22>
 80249d4:	e7ef      	b.n	80249b6 <sbrk_aligned+0x1e>
 80249d6:	bf00      	nop
 80249d8:	24026370 	.word	0x24026370

080249dc <_malloc_r>:
 80249dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80249e0:	1ccd      	adds	r5, r1, #3
 80249e2:	f025 0503 	bic.w	r5, r5, #3
 80249e6:	3508      	adds	r5, #8
 80249e8:	2d0c      	cmp	r5, #12
 80249ea:	bf38      	it	cc
 80249ec:	250c      	movcc	r5, #12
 80249ee:	2d00      	cmp	r5, #0
 80249f0:	4606      	mov	r6, r0
 80249f2:	db01      	blt.n	80249f8 <_malloc_r+0x1c>
 80249f4:	42a9      	cmp	r1, r5
 80249f6:	d904      	bls.n	8024a02 <_malloc_r+0x26>
 80249f8:	230c      	movs	r3, #12
 80249fa:	6033      	str	r3, [r6, #0]
 80249fc:	2000      	movs	r0, #0
 80249fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024ad8 <_malloc_r+0xfc>
 8024a06:	f000 f869 	bl	8024adc <__malloc_lock>
 8024a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8024a0e:	461c      	mov	r4, r3
 8024a10:	bb44      	cbnz	r4, 8024a64 <_malloc_r+0x88>
 8024a12:	4629      	mov	r1, r5
 8024a14:	4630      	mov	r0, r6
 8024a16:	f7ff ffbf 	bl	8024998 <sbrk_aligned>
 8024a1a:	1c43      	adds	r3, r0, #1
 8024a1c:	4604      	mov	r4, r0
 8024a1e:	d158      	bne.n	8024ad2 <_malloc_r+0xf6>
 8024a20:	f8d8 4000 	ldr.w	r4, [r8]
 8024a24:	4627      	mov	r7, r4
 8024a26:	2f00      	cmp	r7, #0
 8024a28:	d143      	bne.n	8024ab2 <_malloc_r+0xd6>
 8024a2a:	2c00      	cmp	r4, #0
 8024a2c:	d04b      	beq.n	8024ac6 <_malloc_r+0xea>
 8024a2e:	6823      	ldr	r3, [r4, #0]
 8024a30:	4639      	mov	r1, r7
 8024a32:	4630      	mov	r0, r6
 8024a34:	eb04 0903 	add.w	r9, r4, r3
 8024a38:	f000 faca 	bl	8024fd0 <_sbrk_r>
 8024a3c:	4581      	cmp	r9, r0
 8024a3e:	d142      	bne.n	8024ac6 <_malloc_r+0xea>
 8024a40:	6821      	ldr	r1, [r4, #0]
 8024a42:	1a6d      	subs	r5, r5, r1
 8024a44:	4629      	mov	r1, r5
 8024a46:	4630      	mov	r0, r6
 8024a48:	f7ff ffa6 	bl	8024998 <sbrk_aligned>
 8024a4c:	3001      	adds	r0, #1
 8024a4e:	d03a      	beq.n	8024ac6 <_malloc_r+0xea>
 8024a50:	6823      	ldr	r3, [r4, #0]
 8024a52:	442b      	add	r3, r5
 8024a54:	6023      	str	r3, [r4, #0]
 8024a56:	f8d8 3000 	ldr.w	r3, [r8]
 8024a5a:	685a      	ldr	r2, [r3, #4]
 8024a5c:	bb62      	cbnz	r2, 8024ab8 <_malloc_r+0xdc>
 8024a5e:	f8c8 7000 	str.w	r7, [r8]
 8024a62:	e00f      	b.n	8024a84 <_malloc_r+0xa8>
 8024a64:	6822      	ldr	r2, [r4, #0]
 8024a66:	1b52      	subs	r2, r2, r5
 8024a68:	d420      	bmi.n	8024aac <_malloc_r+0xd0>
 8024a6a:	2a0b      	cmp	r2, #11
 8024a6c:	d917      	bls.n	8024a9e <_malloc_r+0xc2>
 8024a6e:	1961      	adds	r1, r4, r5
 8024a70:	42a3      	cmp	r3, r4
 8024a72:	6025      	str	r5, [r4, #0]
 8024a74:	bf18      	it	ne
 8024a76:	6059      	strne	r1, [r3, #4]
 8024a78:	6863      	ldr	r3, [r4, #4]
 8024a7a:	bf08      	it	eq
 8024a7c:	f8c8 1000 	streq.w	r1, [r8]
 8024a80:	5162      	str	r2, [r4, r5]
 8024a82:	604b      	str	r3, [r1, #4]
 8024a84:	4630      	mov	r0, r6
 8024a86:	f000 f82f 	bl	8024ae8 <__malloc_unlock>
 8024a8a:	f104 000b 	add.w	r0, r4, #11
 8024a8e:	1d23      	adds	r3, r4, #4
 8024a90:	f020 0007 	bic.w	r0, r0, #7
 8024a94:	1ac2      	subs	r2, r0, r3
 8024a96:	bf1c      	itt	ne
 8024a98:	1a1b      	subne	r3, r3, r0
 8024a9a:	50a3      	strne	r3, [r4, r2]
 8024a9c:	e7af      	b.n	80249fe <_malloc_r+0x22>
 8024a9e:	6862      	ldr	r2, [r4, #4]
 8024aa0:	42a3      	cmp	r3, r4
 8024aa2:	bf0c      	ite	eq
 8024aa4:	f8c8 2000 	streq.w	r2, [r8]
 8024aa8:	605a      	strne	r2, [r3, #4]
 8024aaa:	e7eb      	b.n	8024a84 <_malloc_r+0xa8>
 8024aac:	4623      	mov	r3, r4
 8024aae:	6864      	ldr	r4, [r4, #4]
 8024ab0:	e7ae      	b.n	8024a10 <_malloc_r+0x34>
 8024ab2:	463c      	mov	r4, r7
 8024ab4:	687f      	ldr	r7, [r7, #4]
 8024ab6:	e7b6      	b.n	8024a26 <_malloc_r+0x4a>
 8024ab8:	461a      	mov	r2, r3
 8024aba:	685b      	ldr	r3, [r3, #4]
 8024abc:	42a3      	cmp	r3, r4
 8024abe:	d1fb      	bne.n	8024ab8 <_malloc_r+0xdc>
 8024ac0:	2300      	movs	r3, #0
 8024ac2:	6053      	str	r3, [r2, #4]
 8024ac4:	e7de      	b.n	8024a84 <_malloc_r+0xa8>
 8024ac6:	230c      	movs	r3, #12
 8024ac8:	6033      	str	r3, [r6, #0]
 8024aca:	4630      	mov	r0, r6
 8024acc:	f000 f80c 	bl	8024ae8 <__malloc_unlock>
 8024ad0:	e794      	b.n	80249fc <_malloc_r+0x20>
 8024ad2:	6005      	str	r5, [r0, #0]
 8024ad4:	e7d6      	b.n	8024a84 <_malloc_r+0xa8>
 8024ad6:	bf00      	nop
 8024ad8:	24026374 	.word	0x24026374

08024adc <__malloc_lock>:
 8024adc:	4801      	ldr	r0, [pc, #4]	@ (8024ae4 <__malloc_lock+0x8>)
 8024ade:	f000 bac4 	b.w	802506a <__retarget_lock_acquire_recursive>
 8024ae2:	bf00      	nop
 8024ae4:	240264b8 	.word	0x240264b8

08024ae8 <__malloc_unlock>:
 8024ae8:	4801      	ldr	r0, [pc, #4]	@ (8024af0 <__malloc_unlock+0x8>)
 8024aea:	f000 babf 	b.w	802506c <__retarget_lock_release_recursive>
 8024aee:	bf00      	nop
 8024af0:	240264b8 	.word	0x240264b8

08024af4 <__cxa_atexit>:
 8024af4:	b510      	push	{r4, lr}
 8024af6:	4604      	mov	r4, r0
 8024af8:	4804      	ldr	r0, [pc, #16]	@ (8024b0c <__cxa_atexit+0x18>)
 8024afa:	4613      	mov	r3, r2
 8024afc:	b120      	cbz	r0, 8024b08 <__cxa_atexit+0x14>
 8024afe:	460a      	mov	r2, r1
 8024b00:	2002      	movs	r0, #2
 8024b02:	4621      	mov	r1, r4
 8024b04:	f000 fac2 	bl	802508c <__register_exitproc>
 8024b08:	bd10      	pop	{r4, pc}
 8024b0a:	bf00      	nop
 8024b0c:	0802508d 	.word	0x0802508d

08024b10 <std>:
 8024b10:	2300      	movs	r3, #0
 8024b12:	b510      	push	{r4, lr}
 8024b14:	4604      	mov	r4, r0
 8024b16:	e9c0 3300 	strd	r3, r3, [r0]
 8024b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024b1e:	6083      	str	r3, [r0, #8]
 8024b20:	8181      	strh	r1, [r0, #12]
 8024b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8024b24:	81c2      	strh	r2, [r0, #14]
 8024b26:	6183      	str	r3, [r0, #24]
 8024b28:	4619      	mov	r1, r3
 8024b2a:	2208      	movs	r2, #8
 8024b2c:	305c      	adds	r0, #92	@ 0x5c
 8024b2e:	f000 f9bd 	bl	8024eac <memset>
 8024b32:	4b0d      	ldr	r3, [pc, #52]	@ (8024b68 <std+0x58>)
 8024b34:	6263      	str	r3, [r4, #36]	@ 0x24
 8024b36:	4b0d      	ldr	r3, [pc, #52]	@ (8024b6c <std+0x5c>)
 8024b38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8024b70 <std+0x60>)
 8024b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8024b74 <std+0x64>)
 8024b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8024b42:	4b0d      	ldr	r3, [pc, #52]	@ (8024b78 <std+0x68>)
 8024b44:	6224      	str	r4, [r4, #32]
 8024b46:	429c      	cmp	r4, r3
 8024b48:	d006      	beq.n	8024b58 <std+0x48>
 8024b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024b4e:	4294      	cmp	r4, r2
 8024b50:	d002      	beq.n	8024b58 <std+0x48>
 8024b52:	33d0      	adds	r3, #208	@ 0xd0
 8024b54:	429c      	cmp	r4, r3
 8024b56:	d105      	bne.n	8024b64 <std+0x54>
 8024b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b60:	f000 ba82 	b.w	8025068 <__retarget_lock_init_recursive>
 8024b64:	bd10      	pop	{r4, pc}
 8024b66:	bf00      	nop
 8024b68:	08024cfd 	.word	0x08024cfd
 8024b6c:	08024d1f 	.word	0x08024d1f
 8024b70:	08024d57 	.word	0x08024d57
 8024b74:	08024d7b 	.word	0x08024d7b
 8024b78:	24026378 	.word	0x24026378

08024b7c <stdio_exit_handler>:
 8024b7c:	4a02      	ldr	r2, [pc, #8]	@ (8024b88 <stdio_exit_handler+0xc>)
 8024b7e:	4903      	ldr	r1, [pc, #12]	@ (8024b8c <stdio_exit_handler+0x10>)
 8024b80:	4803      	ldr	r0, [pc, #12]	@ (8024b90 <stdio_exit_handler+0x14>)
 8024b82:	f000 b87b 	b.w	8024c7c <_fwalk_sglue>
 8024b86:	bf00      	nop
 8024b88:	2400010c 	.word	0x2400010c
 8024b8c:	08025b2d 	.word	0x08025b2d
 8024b90:	2400011c 	.word	0x2400011c

08024b94 <cleanup_stdio>:
 8024b94:	6841      	ldr	r1, [r0, #4]
 8024b96:	4b0c      	ldr	r3, [pc, #48]	@ (8024bc8 <cleanup_stdio+0x34>)
 8024b98:	4299      	cmp	r1, r3
 8024b9a:	b510      	push	{r4, lr}
 8024b9c:	4604      	mov	r4, r0
 8024b9e:	d001      	beq.n	8024ba4 <cleanup_stdio+0x10>
 8024ba0:	f000 ffc4 	bl	8025b2c <_fflush_r>
 8024ba4:	68a1      	ldr	r1, [r4, #8]
 8024ba6:	4b09      	ldr	r3, [pc, #36]	@ (8024bcc <cleanup_stdio+0x38>)
 8024ba8:	4299      	cmp	r1, r3
 8024baa:	d002      	beq.n	8024bb2 <cleanup_stdio+0x1e>
 8024bac:	4620      	mov	r0, r4
 8024bae:	f000 ffbd 	bl	8025b2c <_fflush_r>
 8024bb2:	68e1      	ldr	r1, [r4, #12]
 8024bb4:	4b06      	ldr	r3, [pc, #24]	@ (8024bd0 <cleanup_stdio+0x3c>)
 8024bb6:	4299      	cmp	r1, r3
 8024bb8:	d004      	beq.n	8024bc4 <cleanup_stdio+0x30>
 8024bba:	4620      	mov	r0, r4
 8024bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024bc0:	f000 bfb4 	b.w	8025b2c <_fflush_r>
 8024bc4:	bd10      	pop	{r4, pc}
 8024bc6:	bf00      	nop
 8024bc8:	24026378 	.word	0x24026378
 8024bcc:	240263e0 	.word	0x240263e0
 8024bd0:	24026448 	.word	0x24026448

08024bd4 <global_stdio_init.part.0>:
 8024bd4:	b510      	push	{r4, lr}
 8024bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8024c04 <global_stdio_init.part.0+0x30>)
 8024bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8024c08 <global_stdio_init.part.0+0x34>)
 8024bda:	4a0c      	ldr	r2, [pc, #48]	@ (8024c0c <global_stdio_init.part.0+0x38>)
 8024bdc:	601a      	str	r2, [r3, #0]
 8024bde:	4620      	mov	r0, r4
 8024be0:	2200      	movs	r2, #0
 8024be2:	2104      	movs	r1, #4
 8024be4:	f7ff ff94 	bl	8024b10 <std>
 8024be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024bec:	2201      	movs	r2, #1
 8024bee:	2109      	movs	r1, #9
 8024bf0:	f7ff ff8e 	bl	8024b10 <std>
 8024bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024bf8:	2202      	movs	r2, #2
 8024bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024bfe:	2112      	movs	r1, #18
 8024c00:	f7ff bf86 	b.w	8024b10 <std>
 8024c04:	240264b0 	.word	0x240264b0
 8024c08:	24026378 	.word	0x24026378
 8024c0c:	08024b7d 	.word	0x08024b7d

08024c10 <__sfp_lock_acquire>:
 8024c10:	4801      	ldr	r0, [pc, #4]	@ (8024c18 <__sfp_lock_acquire+0x8>)
 8024c12:	f000 ba2a 	b.w	802506a <__retarget_lock_acquire_recursive>
 8024c16:	bf00      	nop
 8024c18:	240264ba 	.word	0x240264ba

08024c1c <__sfp_lock_release>:
 8024c1c:	4801      	ldr	r0, [pc, #4]	@ (8024c24 <__sfp_lock_release+0x8>)
 8024c1e:	f000 ba25 	b.w	802506c <__retarget_lock_release_recursive>
 8024c22:	bf00      	nop
 8024c24:	240264ba 	.word	0x240264ba

08024c28 <__sinit>:
 8024c28:	b510      	push	{r4, lr}
 8024c2a:	4604      	mov	r4, r0
 8024c2c:	f7ff fff0 	bl	8024c10 <__sfp_lock_acquire>
 8024c30:	6a23      	ldr	r3, [r4, #32]
 8024c32:	b11b      	cbz	r3, 8024c3c <__sinit+0x14>
 8024c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c38:	f7ff bff0 	b.w	8024c1c <__sfp_lock_release>
 8024c3c:	4b04      	ldr	r3, [pc, #16]	@ (8024c50 <__sinit+0x28>)
 8024c3e:	6223      	str	r3, [r4, #32]
 8024c40:	4b04      	ldr	r3, [pc, #16]	@ (8024c54 <__sinit+0x2c>)
 8024c42:	681b      	ldr	r3, [r3, #0]
 8024c44:	2b00      	cmp	r3, #0
 8024c46:	d1f5      	bne.n	8024c34 <__sinit+0xc>
 8024c48:	f7ff ffc4 	bl	8024bd4 <global_stdio_init.part.0>
 8024c4c:	e7f2      	b.n	8024c34 <__sinit+0xc>
 8024c4e:	bf00      	nop
 8024c50:	08024b95 	.word	0x08024b95
 8024c54:	240264b0 	.word	0x240264b0

08024c58 <fiprintf>:
 8024c58:	b40e      	push	{r1, r2, r3}
 8024c5a:	b503      	push	{r0, r1, lr}
 8024c5c:	4601      	mov	r1, r0
 8024c5e:	ab03      	add	r3, sp, #12
 8024c60:	4805      	ldr	r0, [pc, #20]	@ (8024c78 <fiprintf+0x20>)
 8024c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8024c66:	6800      	ldr	r0, [r0, #0]
 8024c68:	9301      	str	r3, [sp, #4]
 8024c6a:	f000 fc37 	bl	80254dc <_vfiprintf_r>
 8024c6e:	b002      	add	sp, #8
 8024c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8024c74:	b003      	add	sp, #12
 8024c76:	4770      	bx	lr
 8024c78:	24000118 	.word	0x24000118

08024c7c <_fwalk_sglue>:
 8024c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c80:	4607      	mov	r7, r0
 8024c82:	4688      	mov	r8, r1
 8024c84:	4614      	mov	r4, r2
 8024c86:	2600      	movs	r6, #0
 8024c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8024c90:	d505      	bpl.n	8024c9e <_fwalk_sglue+0x22>
 8024c92:	6824      	ldr	r4, [r4, #0]
 8024c94:	2c00      	cmp	r4, #0
 8024c96:	d1f7      	bne.n	8024c88 <_fwalk_sglue+0xc>
 8024c98:	4630      	mov	r0, r6
 8024c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024c9e:	89ab      	ldrh	r3, [r5, #12]
 8024ca0:	2b01      	cmp	r3, #1
 8024ca2:	d907      	bls.n	8024cb4 <_fwalk_sglue+0x38>
 8024ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024ca8:	3301      	adds	r3, #1
 8024caa:	d003      	beq.n	8024cb4 <_fwalk_sglue+0x38>
 8024cac:	4629      	mov	r1, r5
 8024cae:	4638      	mov	r0, r7
 8024cb0:	47c0      	blx	r8
 8024cb2:	4306      	orrs	r6, r0
 8024cb4:	3568      	adds	r5, #104	@ 0x68
 8024cb6:	e7e9      	b.n	8024c8c <_fwalk_sglue+0x10>

08024cb8 <siprintf>:
 8024cb8:	b40e      	push	{r1, r2, r3}
 8024cba:	b510      	push	{r4, lr}
 8024cbc:	b09d      	sub	sp, #116	@ 0x74
 8024cbe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024cc0:	9002      	str	r0, [sp, #8]
 8024cc2:	9006      	str	r0, [sp, #24]
 8024cc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8024cc8:	480a      	ldr	r0, [pc, #40]	@ (8024cf4 <siprintf+0x3c>)
 8024cca:	9107      	str	r1, [sp, #28]
 8024ccc:	9104      	str	r1, [sp, #16]
 8024cce:	490a      	ldr	r1, [pc, #40]	@ (8024cf8 <siprintf+0x40>)
 8024cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8024cd4:	9105      	str	r1, [sp, #20]
 8024cd6:	2400      	movs	r4, #0
 8024cd8:	a902      	add	r1, sp, #8
 8024cda:	6800      	ldr	r0, [r0, #0]
 8024cdc:	9301      	str	r3, [sp, #4]
 8024cde:	941b      	str	r4, [sp, #108]	@ 0x6c
 8024ce0:	f000 fad6 	bl	8025290 <_svfiprintf_r>
 8024ce4:	9b02      	ldr	r3, [sp, #8]
 8024ce6:	701c      	strb	r4, [r3, #0]
 8024ce8:	b01d      	add	sp, #116	@ 0x74
 8024cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024cee:	b003      	add	sp, #12
 8024cf0:	4770      	bx	lr
 8024cf2:	bf00      	nop
 8024cf4:	24000118 	.word	0x24000118
 8024cf8:	ffff0208 	.word	0xffff0208

08024cfc <__sread>:
 8024cfc:	b510      	push	{r4, lr}
 8024cfe:	460c      	mov	r4, r1
 8024d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d04:	f000 f93e 	bl	8024f84 <_read_r>
 8024d08:	2800      	cmp	r0, #0
 8024d0a:	bfab      	itete	ge
 8024d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8024d10:	181b      	addge	r3, r3, r0
 8024d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024d16:	bfac      	ite	ge
 8024d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024d1a:	81a3      	strhlt	r3, [r4, #12]
 8024d1c:	bd10      	pop	{r4, pc}

08024d1e <__swrite>:
 8024d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d22:	461f      	mov	r7, r3
 8024d24:	898b      	ldrh	r3, [r1, #12]
 8024d26:	05db      	lsls	r3, r3, #23
 8024d28:	4605      	mov	r5, r0
 8024d2a:	460c      	mov	r4, r1
 8024d2c:	4616      	mov	r6, r2
 8024d2e:	d505      	bpl.n	8024d3c <__swrite+0x1e>
 8024d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d34:	2302      	movs	r3, #2
 8024d36:	2200      	movs	r2, #0
 8024d38:	f000 f912 	bl	8024f60 <_lseek_r>
 8024d3c:	89a3      	ldrh	r3, [r4, #12]
 8024d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024d46:	81a3      	strh	r3, [r4, #12]
 8024d48:	4632      	mov	r2, r6
 8024d4a:	463b      	mov	r3, r7
 8024d4c:	4628      	mov	r0, r5
 8024d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d52:	f000 b94d 	b.w	8024ff0 <_write_r>

08024d56 <__sseek>:
 8024d56:	b510      	push	{r4, lr}
 8024d58:	460c      	mov	r4, r1
 8024d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d5e:	f000 f8ff 	bl	8024f60 <_lseek_r>
 8024d62:	1c43      	adds	r3, r0, #1
 8024d64:	89a3      	ldrh	r3, [r4, #12]
 8024d66:	bf15      	itete	ne
 8024d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024d72:	81a3      	strheq	r3, [r4, #12]
 8024d74:	bf18      	it	ne
 8024d76:	81a3      	strhne	r3, [r4, #12]
 8024d78:	bd10      	pop	{r4, pc}

08024d7a <__sclose>:
 8024d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d7e:	f000 b8df 	b.w	8024f40 <_close_r>

08024d82 <__swbuf_r>:
 8024d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d84:	460e      	mov	r6, r1
 8024d86:	4614      	mov	r4, r2
 8024d88:	4605      	mov	r5, r0
 8024d8a:	b118      	cbz	r0, 8024d94 <__swbuf_r+0x12>
 8024d8c:	6a03      	ldr	r3, [r0, #32]
 8024d8e:	b90b      	cbnz	r3, 8024d94 <__swbuf_r+0x12>
 8024d90:	f7ff ff4a 	bl	8024c28 <__sinit>
 8024d94:	69a3      	ldr	r3, [r4, #24]
 8024d96:	60a3      	str	r3, [r4, #8]
 8024d98:	89a3      	ldrh	r3, [r4, #12]
 8024d9a:	071a      	lsls	r2, r3, #28
 8024d9c:	d501      	bpl.n	8024da2 <__swbuf_r+0x20>
 8024d9e:	6923      	ldr	r3, [r4, #16]
 8024da0:	b943      	cbnz	r3, 8024db4 <__swbuf_r+0x32>
 8024da2:	4621      	mov	r1, r4
 8024da4:	4628      	mov	r0, r5
 8024da6:	f000 f82b 	bl	8024e00 <__swsetup_r>
 8024daa:	b118      	cbz	r0, 8024db4 <__swbuf_r+0x32>
 8024dac:	f04f 37ff 	mov.w	r7, #4294967295
 8024db0:	4638      	mov	r0, r7
 8024db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024db4:	6823      	ldr	r3, [r4, #0]
 8024db6:	6922      	ldr	r2, [r4, #16]
 8024db8:	1a98      	subs	r0, r3, r2
 8024dba:	6963      	ldr	r3, [r4, #20]
 8024dbc:	b2f6      	uxtb	r6, r6
 8024dbe:	4283      	cmp	r3, r0
 8024dc0:	4637      	mov	r7, r6
 8024dc2:	dc05      	bgt.n	8024dd0 <__swbuf_r+0x4e>
 8024dc4:	4621      	mov	r1, r4
 8024dc6:	4628      	mov	r0, r5
 8024dc8:	f000 feb0 	bl	8025b2c <_fflush_r>
 8024dcc:	2800      	cmp	r0, #0
 8024dce:	d1ed      	bne.n	8024dac <__swbuf_r+0x2a>
 8024dd0:	68a3      	ldr	r3, [r4, #8]
 8024dd2:	3b01      	subs	r3, #1
 8024dd4:	60a3      	str	r3, [r4, #8]
 8024dd6:	6823      	ldr	r3, [r4, #0]
 8024dd8:	1c5a      	adds	r2, r3, #1
 8024dda:	6022      	str	r2, [r4, #0]
 8024ddc:	701e      	strb	r6, [r3, #0]
 8024dde:	6962      	ldr	r2, [r4, #20]
 8024de0:	1c43      	adds	r3, r0, #1
 8024de2:	429a      	cmp	r2, r3
 8024de4:	d004      	beq.n	8024df0 <__swbuf_r+0x6e>
 8024de6:	89a3      	ldrh	r3, [r4, #12]
 8024de8:	07db      	lsls	r3, r3, #31
 8024dea:	d5e1      	bpl.n	8024db0 <__swbuf_r+0x2e>
 8024dec:	2e0a      	cmp	r6, #10
 8024dee:	d1df      	bne.n	8024db0 <__swbuf_r+0x2e>
 8024df0:	4621      	mov	r1, r4
 8024df2:	4628      	mov	r0, r5
 8024df4:	f000 fe9a 	bl	8025b2c <_fflush_r>
 8024df8:	2800      	cmp	r0, #0
 8024dfa:	d0d9      	beq.n	8024db0 <__swbuf_r+0x2e>
 8024dfc:	e7d6      	b.n	8024dac <__swbuf_r+0x2a>
	...

08024e00 <__swsetup_r>:
 8024e00:	b538      	push	{r3, r4, r5, lr}
 8024e02:	4b29      	ldr	r3, [pc, #164]	@ (8024ea8 <__swsetup_r+0xa8>)
 8024e04:	4605      	mov	r5, r0
 8024e06:	6818      	ldr	r0, [r3, #0]
 8024e08:	460c      	mov	r4, r1
 8024e0a:	b118      	cbz	r0, 8024e14 <__swsetup_r+0x14>
 8024e0c:	6a03      	ldr	r3, [r0, #32]
 8024e0e:	b90b      	cbnz	r3, 8024e14 <__swsetup_r+0x14>
 8024e10:	f7ff ff0a 	bl	8024c28 <__sinit>
 8024e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e18:	0719      	lsls	r1, r3, #28
 8024e1a:	d422      	bmi.n	8024e62 <__swsetup_r+0x62>
 8024e1c:	06da      	lsls	r2, r3, #27
 8024e1e:	d407      	bmi.n	8024e30 <__swsetup_r+0x30>
 8024e20:	2209      	movs	r2, #9
 8024e22:	602a      	str	r2, [r5, #0]
 8024e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024e28:	81a3      	strh	r3, [r4, #12]
 8024e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8024e2e:	e033      	b.n	8024e98 <__swsetup_r+0x98>
 8024e30:	0758      	lsls	r0, r3, #29
 8024e32:	d512      	bpl.n	8024e5a <__swsetup_r+0x5a>
 8024e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024e36:	b141      	cbz	r1, 8024e4a <__swsetup_r+0x4a>
 8024e38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024e3c:	4299      	cmp	r1, r3
 8024e3e:	d002      	beq.n	8024e46 <__swsetup_r+0x46>
 8024e40:	4628      	mov	r0, r5
 8024e42:	f000 f97f 	bl	8025144 <_free_r>
 8024e46:	2300      	movs	r3, #0
 8024e48:	6363      	str	r3, [r4, #52]	@ 0x34
 8024e4a:	89a3      	ldrh	r3, [r4, #12]
 8024e4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8024e50:	81a3      	strh	r3, [r4, #12]
 8024e52:	2300      	movs	r3, #0
 8024e54:	6063      	str	r3, [r4, #4]
 8024e56:	6923      	ldr	r3, [r4, #16]
 8024e58:	6023      	str	r3, [r4, #0]
 8024e5a:	89a3      	ldrh	r3, [r4, #12]
 8024e5c:	f043 0308 	orr.w	r3, r3, #8
 8024e60:	81a3      	strh	r3, [r4, #12]
 8024e62:	6923      	ldr	r3, [r4, #16]
 8024e64:	b94b      	cbnz	r3, 8024e7a <__swsetup_r+0x7a>
 8024e66:	89a3      	ldrh	r3, [r4, #12]
 8024e68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024e70:	d003      	beq.n	8024e7a <__swsetup_r+0x7a>
 8024e72:	4621      	mov	r1, r4
 8024e74:	4628      	mov	r0, r5
 8024e76:	f000 fea7 	bl	8025bc8 <__smakebuf_r>
 8024e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024e7e:	f013 0201 	ands.w	r2, r3, #1
 8024e82:	d00a      	beq.n	8024e9a <__swsetup_r+0x9a>
 8024e84:	2200      	movs	r2, #0
 8024e86:	60a2      	str	r2, [r4, #8]
 8024e88:	6962      	ldr	r2, [r4, #20]
 8024e8a:	4252      	negs	r2, r2
 8024e8c:	61a2      	str	r2, [r4, #24]
 8024e8e:	6922      	ldr	r2, [r4, #16]
 8024e90:	b942      	cbnz	r2, 8024ea4 <__swsetup_r+0xa4>
 8024e92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024e96:	d1c5      	bne.n	8024e24 <__swsetup_r+0x24>
 8024e98:	bd38      	pop	{r3, r4, r5, pc}
 8024e9a:	0799      	lsls	r1, r3, #30
 8024e9c:	bf58      	it	pl
 8024e9e:	6962      	ldrpl	r2, [r4, #20]
 8024ea0:	60a2      	str	r2, [r4, #8]
 8024ea2:	e7f4      	b.n	8024e8e <__swsetup_r+0x8e>
 8024ea4:	2000      	movs	r0, #0
 8024ea6:	e7f7      	b.n	8024e98 <__swsetup_r+0x98>
 8024ea8:	24000118 	.word	0x24000118

08024eac <memset>:
 8024eac:	4402      	add	r2, r0
 8024eae:	4603      	mov	r3, r0
 8024eb0:	4293      	cmp	r3, r2
 8024eb2:	d100      	bne.n	8024eb6 <memset+0xa>
 8024eb4:	4770      	bx	lr
 8024eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8024eba:	e7f9      	b.n	8024eb0 <memset+0x4>

08024ebc <strncmp>:
 8024ebc:	b510      	push	{r4, lr}
 8024ebe:	b16a      	cbz	r2, 8024edc <strncmp+0x20>
 8024ec0:	3901      	subs	r1, #1
 8024ec2:	1884      	adds	r4, r0, r2
 8024ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ec8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8024ecc:	429a      	cmp	r2, r3
 8024ece:	d103      	bne.n	8024ed8 <strncmp+0x1c>
 8024ed0:	42a0      	cmp	r0, r4
 8024ed2:	d001      	beq.n	8024ed8 <strncmp+0x1c>
 8024ed4:	2a00      	cmp	r2, #0
 8024ed6:	d1f5      	bne.n	8024ec4 <strncmp+0x8>
 8024ed8:	1ad0      	subs	r0, r2, r3
 8024eda:	bd10      	pop	{r4, pc}
 8024edc:	4610      	mov	r0, r2
 8024ede:	e7fc      	b.n	8024eda <strncmp+0x1e>

08024ee0 <_raise_r>:
 8024ee0:	291f      	cmp	r1, #31
 8024ee2:	b538      	push	{r3, r4, r5, lr}
 8024ee4:	4605      	mov	r5, r0
 8024ee6:	460c      	mov	r4, r1
 8024ee8:	d904      	bls.n	8024ef4 <_raise_r+0x14>
 8024eea:	2316      	movs	r3, #22
 8024eec:	6003      	str	r3, [r0, #0]
 8024eee:	f04f 30ff 	mov.w	r0, #4294967295
 8024ef2:	bd38      	pop	{r3, r4, r5, pc}
 8024ef4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024ef6:	b112      	cbz	r2, 8024efe <_raise_r+0x1e>
 8024ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024efc:	b94b      	cbnz	r3, 8024f12 <_raise_r+0x32>
 8024efe:	4628      	mov	r0, r5
 8024f00:	f000 f864 	bl	8024fcc <_getpid_r>
 8024f04:	4622      	mov	r2, r4
 8024f06:	4601      	mov	r1, r0
 8024f08:	4628      	mov	r0, r5
 8024f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024f0e:	f000 b84b 	b.w	8024fa8 <_kill_r>
 8024f12:	2b01      	cmp	r3, #1
 8024f14:	d00a      	beq.n	8024f2c <_raise_r+0x4c>
 8024f16:	1c59      	adds	r1, r3, #1
 8024f18:	d103      	bne.n	8024f22 <_raise_r+0x42>
 8024f1a:	2316      	movs	r3, #22
 8024f1c:	6003      	str	r3, [r0, #0]
 8024f1e:	2001      	movs	r0, #1
 8024f20:	e7e7      	b.n	8024ef2 <_raise_r+0x12>
 8024f22:	2100      	movs	r1, #0
 8024f24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024f28:	4620      	mov	r0, r4
 8024f2a:	4798      	blx	r3
 8024f2c:	2000      	movs	r0, #0
 8024f2e:	e7e0      	b.n	8024ef2 <_raise_r+0x12>

08024f30 <raise>:
 8024f30:	4b02      	ldr	r3, [pc, #8]	@ (8024f3c <raise+0xc>)
 8024f32:	4601      	mov	r1, r0
 8024f34:	6818      	ldr	r0, [r3, #0]
 8024f36:	f7ff bfd3 	b.w	8024ee0 <_raise_r>
 8024f3a:	bf00      	nop
 8024f3c:	24000118 	.word	0x24000118

08024f40 <_close_r>:
 8024f40:	b538      	push	{r3, r4, r5, lr}
 8024f42:	4d06      	ldr	r5, [pc, #24]	@ (8024f5c <_close_r+0x1c>)
 8024f44:	2300      	movs	r3, #0
 8024f46:	4604      	mov	r4, r0
 8024f48:	4608      	mov	r0, r1
 8024f4a:	602b      	str	r3, [r5, #0]
 8024f4c:	f7dc fdce 	bl	8001aec <_close>
 8024f50:	1c43      	adds	r3, r0, #1
 8024f52:	d102      	bne.n	8024f5a <_close_r+0x1a>
 8024f54:	682b      	ldr	r3, [r5, #0]
 8024f56:	b103      	cbz	r3, 8024f5a <_close_r+0x1a>
 8024f58:	6023      	str	r3, [r4, #0]
 8024f5a:	bd38      	pop	{r3, r4, r5, pc}
 8024f5c:	240264b4 	.word	0x240264b4

08024f60 <_lseek_r>:
 8024f60:	b538      	push	{r3, r4, r5, lr}
 8024f62:	4d07      	ldr	r5, [pc, #28]	@ (8024f80 <_lseek_r+0x20>)
 8024f64:	4604      	mov	r4, r0
 8024f66:	4608      	mov	r0, r1
 8024f68:	4611      	mov	r1, r2
 8024f6a:	2200      	movs	r2, #0
 8024f6c:	602a      	str	r2, [r5, #0]
 8024f6e:	461a      	mov	r2, r3
 8024f70:	f7dc fdc6 	bl	8001b00 <_lseek>
 8024f74:	1c43      	adds	r3, r0, #1
 8024f76:	d102      	bne.n	8024f7e <_lseek_r+0x1e>
 8024f78:	682b      	ldr	r3, [r5, #0]
 8024f7a:	b103      	cbz	r3, 8024f7e <_lseek_r+0x1e>
 8024f7c:	6023      	str	r3, [r4, #0]
 8024f7e:	bd38      	pop	{r3, r4, r5, pc}
 8024f80:	240264b4 	.word	0x240264b4

08024f84 <_read_r>:
 8024f84:	b538      	push	{r3, r4, r5, lr}
 8024f86:	4d07      	ldr	r5, [pc, #28]	@ (8024fa4 <_read_r+0x20>)
 8024f88:	4604      	mov	r4, r0
 8024f8a:	4608      	mov	r0, r1
 8024f8c:	4611      	mov	r1, r2
 8024f8e:	2200      	movs	r2, #0
 8024f90:	602a      	str	r2, [r5, #0]
 8024f92:	461a      	mov	r2, r3
 8024f94:	f7dc fd8e 	bl	8001ab4 <_read>
 8024f98:	1c43      	adds	r3, r0, #1
 8024f9a:	d102      	bne.n	8024fa2 <_read_r+0x1e>
 8024f9c:	682b      	ldr	r3, [r5, #0]
 8024f9e:	b103      	cbz	r3, 8024fa2 <_read_r+0x1e>
 8024fa0:	6023      	str	r3, [r4, #0]
 8024fa2:	bd38      	pop	{r3, r4, r5, pc}
 8024fa4:	240264b4 	.word	0x240264b4

08024fa8 <_kill_r>:
 8024fa8:	b538      	push	{r3, r4, r5, lr}
 8024faa:	4d07      	ldr	r5, [pc, #28]	@ (8024fc8 <_kill_r+0x20>)
 8024fac:	2300      	movs	r3, #0
 8024fae:	4604      	mov	r4, r0
 8024fb0:	4608      	mov	r0, r1
 8024fb2:	4611      	mov	r1, r2
 8024fb4:	602b      	str	r3, [r5, #0]
 8024fb6:	f7dc fd6f 	bl	8001a98 <_kill>
 8024fba:	1c43      	adds	r3, r0, #1
 8024fbc:	d102      	bne.n	8024fc4 <_kill_r+0x1c>
 8024fbe:	682b      	ldr	r3, [r5, #0]
 8024fc0:	b103      	cbz	r3, 8024fc4 <_kill_r+0x1c>
 8024fc2:	6023      	str	r3, [r4, #0]
 8024fc4:	bd38      	pop	{r3, r4, r5, pc}
 8024fc6:	bf00      	nop
 8024fc8:	240264b4 	.word	0x240264b4

08024fcc <_getpid_r>:
 8024fcc:	f7dc bd62 	b.w	8001a94 <_getpid>

08024fd0 <_sbrk_r>:
 8024fd0:	b538      	push	{r3, r4, r5, lr}
 8024fd2:	4d06      	ldr	r5, [pc, #24]	@ (8024fec <_sbrk_r+0x1c>)
 8024fd4:	2300      	movs	r3, #0
 8024fd6:	4604      	mov	r4, r0
 8024fd8:	4608      	mov	r0, r1
 8024fda:	602b      	str	r3, [r5, #0]
 8024fdc:	f7dc fd92 	bl	8001b04 <_sbrk>
 8024fe0:	1c43      	adds	r3, r0, #1
 8024fe2:	d102      	bne.n	8024fea <_sbrk_r+0x1a>
 8024fe4:	682b      	ldr	r3, [r5, #0]
 8024fe6:	b103      	cbz	r3, 8024fea <_sbrk_r+0x1a>
 8024fe8:	6023      	str	r3, [r4, #0]
 8024fea:	bd38      	pop	{r3, r4, r5, pc}
 8024fec:	240264b4 	.word	0x240264b4

08024ff0 <_write_r>:
 8024ff0:	b538      	push	{r3, r4, r5, lr}
 8024ff2:	4d07      	ldr	r5, [pc, #28]	@ (8025010 <_write_r+0x20>)
 8024ff4:	4604      	mov	r4, r0
 8024ff6:	4608      	mov	r0, r1
 8024ff8:	4611      	mov	r1, r2
 8024ffa:	2200      	movs	r2, #0
 8024ffc:	602a      	str	r2, [r5, #0]
 8024ffe:	461a      	mov	r2, r3
 8025000:	f7dc fd66 	bl	8001ad0 <_write>
 8025004:	1c43      	adds	r3, r0, #1
 8025006:	d102      	bne.n	802500e <_write_r+0x1e>
 8025008:	682b      	ldr	r3, [r5, #0]
 802500a:	b103      	cbz	r3, 802500e <_write_r+0x1e>
 802500c:	6023      	str	r3, [r4, #0]
 802500e:	bd38      	pop	{r3, r4, r5, pc}
 8025010:	240264b4 	.word	0x240264b4

08025014 <__errno>:
 8025014:	4b01      	ldr	r3, [pc, #4]	@ (802501c <__errno+0x8>)
 8025016:	6818      	ldr	r0, [r3, #0]
 8025018:	4770      	bx	lr
 802501a:	bf00      	nop
 802501c:	24000118 	.word	0x24000118

08025020 <__libc_init_array>:
 8025020:	b570      	push	{r4, r5, r6, lr}
 8025022:	4d0d      	ldr	r5, [pc, #52]	@ (8025058 <__libc_init_array+0x38>)
 8025024:	4c0d      	ldr	r4, [pc, #52]	@ (802505c <__libc_init_array+0x3c>)
 8025026:	1b64      	subs	r4, r4, r5
 8025028:	10a4      	asrs	r4, r4, #2
 802502a:	2600      	movs	r6, #0
 802502c:	42a6      	cmp	r6, r4
 802502e:	d109      	bne.n	8025044 <__libc_init_array+0x24>
 8025030:	4d0b      	ldr	r5, [pc, #44]	@ (8025060 <__libc_init_array+0x40>)
 8025032:	4c0c      	ldr	r4, [pc, #48]	@ (8025064 <__libc_init_array+0x44>)
 8025034:	f000 fe76 	bl	8025d24 <_init>
 8025038:	1b64      	subs	r4, r4, r5
 802503a:	10a4      	asrs	r4, r4, #2
 802503c:	2600      	movs	r6, #0
 802503e:	42a6      	cmp	r6, r4
 8025040:	d105      	bne.n	802504e <__libc_init_array+0x2e>
 8025042:	bd70      	pop	{r4, r5, r6, pc}
 8025044:	f855 3b04 	ldr.w	r3, [r5], #4
 8025048:	4798      	blx	r3
 802504a:	3601      	adds	r6, #1
 802504c:	e7ee      	b.n	802502c <__libc_init_array+0xc>
 802504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025052:	4798      	blx	r3
 8025054:	3601      	adds	r6, #1
 8025056:	e7f2      	b.n	802503e <__libc_init_array+0x1e>
 8025058:	0802cf1c 	.word	0x0802cf1c
 802505c:	0802cf1c 	.word	0x0802cf1c
 8025060:	0802cf1c 	.word	0x0802cf1c
 8025064:	0802cf3c 	.word	0x0802cf3c

08025068 <__retarget_lock_init_recursive>:
 8025068:	4770      	bx	lr

0802506a <__retarget_lock_acquire_recursive>:
 802506a:	4770      	bx	lr

0802506c <__retarget_lock_release_recursive>:
 802506c:	4770      	bx	lr

0802506e <memcpy>:
 802506e:	440a      	add	r2, r1
 8025070:	4291      	cmp	r1, r2
 8025072:	f100 33ff 	add.w	r3, r0, #4294967295
 8025076:	d100      	bne.n	802507a <memcpy+0xc>
 8025078:	4770      	bx	lr
 802507a:	b510      	push	{r4, lr}
 802507c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025084:	4291      	cmp	r1, r2
 8025086:	d1f9      	bne.n	802507c <memcpy+0xe>
 8025088:	bd10      	pop	{r4, pc}
	...

0802508c <__register_exitproc>:
 802508c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025090:	4d27      	ldr	r5, [pc, #156]	@ (8025130 <__register_exitproc+0xa4>)
 8025092:	4607      	mov	r7, r0
 8025094:	6828      	ldr	r0, [r5, #0]
 8025096:	4691      	mov	r9, r2
 8025098:	460e      	mov	r6, r1
 802509a:	4698      	mov	r8, r3
 802509c:	f7ff ffe5 	bl	802506a <__retarget_lock_acquire_recursive>
 80250a0:	4a24      	ldr	r2, [pc, #144]	@ (8025134 <__register_exitproc+0xa8>)
 80250a2:	6814      	ldr	r4, [r2, #0]
 80250a4:	b93c      	cbnz	r4, 80250b6 <__register_exitproc+0x2a>
 80250a6:	4b24      	ldr	r3, [pc, #144]	@ (8025138 <__register_exitproc+0xac>)
 80250a8:	6013      	str	r3, [r2, #0]
 80250aa:	4a24      	ldr	r2, [pc, #144]	@ (802513c <__register_exitproc+0xb0>)
 80250ac:	b112      	cbz	r2, 80250b4 <__register_exitproc+0x28>
 80250ae:	6812      	ldr	r2, [r2, #0]
 80250b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80250b4:	4c20      	ldr	r4, [pc, #128]	@ (8025138 <__register_exitproc+0xac>)
 80250b6:	6863      	ldr	r3, [r4, #4]
 80250b8:	2b1f      	cmp	r3, #31
 80250ba:	dd06      	ble.n	80250ca <__register_exitproc+0x3e>
 80250bc:	6828      	ldr	r0, [r5, #0]
 80250be:	f7ff ffd5 	bl	802506c <__retarget_lock_release_recursive>
 80250c2:	f04f 30ff 	mov.w	r0, #4294967295
 80250c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80250ca:	b32f      	cbz	r7, 8025118 <__register_exitproc+0x8c>
 80250cc:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80250d0:	b968      	cbnz	r0, 80250ee <__register_exitproc+0x62>
 80250d2:	4b1b      	ldr	r3, [pc, #108]	@ (8025140 <__register_exitproc+0xb4>)
 80250d4:	2b00      	cmp	r3, #0
 80250d6:	d0f1      	beq.n	80250bc <__register_exitproc+0x30>
 80250d8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80250dc:	f7ff fc4c 	bl	8024978 <malloc>
 80250e0:	2800      	cmp	r0, #0
 80250e2:	d0eb      	beq.n	80250bc <__register_exitproc+0x30>
 80250e4:	2300      	movs	r3, #0
 80250e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80250ea:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80250ee:	6863      	ldr	r3, [r4, #4]
 80250f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80250f4:	2201      	movs	r2, #1
 80250f6:	409a      	lsls	r2, r3
 80250f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80250fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8025100:	4313      	orrs	r3, r2
 8025102:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8025106:	2f02      	cmp	r7, #2
 8025108:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802510c:	bf02      	ittt	eq
 802510e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8025112:	4313      	orreq	r3, r2
 8025114:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8025118:	6863      	ldr	r3, [r4, #4]
 802511a:	6828      	ldr	r0, [r5, #0]
 802511c:	1c5a      	adds	r2, r3, #1
 802511e:	3302      	adds	r3, #2
 8025120:	6062      	str	r2, [r4, #4]
 8025122:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8025126:	f7ff ffa1 	bl	802506c <__retarget_lock_release_recursive>
 802512a:	2000      	movs	r0, #0
 802512c:	e7cb      	b.n	80250c6 <__register_exitproc+0x3a>
 802512e:	bf00      	nop
 8025130:	24000168 	.word	0x24000168
 8025134:	24026548 	.word	0x24026548
 8025138:	240264bc 	.word	0x240264bc
 802513c:	08029668 	.word	0x08029668
 8025140:	08024979 	.word	0x08024979

08025144 <_free_r>:
 8025144:	b538      	push	{r3, r4, r5, lr}
 8025146:	4605      	mov	r5, r0
 8025148:	2900      	cmp	r1, #0
 802514a:	d041      	beq.n	80251d0 <_free_r+0x8c>
 802514c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025150:	1f0c      	subs	r4, r1, #4
 8025152:	2b00      	cmp	r3, #0
 8025154:	bfb8      	it	lt
 8025156:	18e4      	addlt	r4, r4, r3
 8025158:	f7ff fcc0 	bl	8024adc <__malloc_lock>
 802515c:	4a1d      	ldr	r2, [pc, #116]	@ (80251d4 <_free_r+0x90>)
 802515e:	6813      	ldr	r3, [r2, #0]
 8025160:	b933      	cbnz	r3, 8025170 <_free_r+0x2c>
 8025162:	6063      	str	r3, [r4, #4]
 8025164:	6014      	str	r4, [r2, #0]
 8025166:	4628      	mov	r0, r5
 8025168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802516c:	f7ff bcbc 	b.w	8024ae8 <__malloc_unlock>
 8025170:	42a3      	cmp	r3, r4
 8025172:	d908      	bls.n	8025186 <_free_r+0x42>
 8025174:	6820      	ldr	r0, [r4, #0]
 8025176:	1821      	adds	r1, r4, r0
 8025178:	428b      	cmp	r3, r1
 802517a:	bf01      	itttt	eq
 802517c:	6819      	ldreq	r1, [r3, #0]
 802517e:	685b      	ldreq	r3, [r3, #4]
 8025180:	1809      	addeq	r1, r1, r0
 8025182:	6021      	streq	r1, [r4, #0]
 8025184:	e7ed      	b.n	8025162 <_free_r+0x1e>
 8025186:	461a      	mov	r2, r3
 8025188:	685b      	ldr	r3, [r3, #4]
 802518a:	b10b      	cbz	r3, 8025190 <_free_r+0x4c>
 802518c:	42a3      	cmp	r3, r4
 802518e:	d9fa      	bls.n	8025186 <_free_r+0x42>
 8025190:	6811      	ldr	r1, [r2, #0]
 8025192:	1850      	adds	r0, r2, r1
 8025194:	42a0      	cmp	r0, r4
 8025196:	d10b      	bne.n	80251b0 <_free_r+0x6c>
 8025198:	6820      	ldr	r0, [r4, #0]
 802519a:	4401      	add	r1, r0
 802519c:	1850      	adds	r0, r2, r1
 802519e:	4283      	cmp	r3, r0
 80251a0:	6011      	str	r1, [r2, #0]
 80251a2:	d1e0      	bne.n	8025166 <_free_r+0x22>
 80251a4:	6818      	ldr	r0, [r3, #0]
 80251a6:	685b      	ldr	r3, [r3, #4]
 80251a8:	6053      	str	r3, [r2, #4]
 80251aa:	4408      	add	r0, r1
 80251ac:	6010      	str	r0, [r2, #0]
 80251ae:	e7da      	b.n	8025166 <_free_r+0x22>
 80251b0:	d902      	bls.n	80251b8 <_free_r+0x74>
 80251b2:	230c      	movs	r3, #12
 80251b4:	602b      	str	r3, [r5, #0]
 80251b6:	e7d6      	b.n	8025166 <_free_r+0x22>
 80251b8:	6820      	ldr	r0, [r4, #0]
 80251ba:	1821      	adds	r1, r4, r0
 80251bc:	428b      	cmp	r3, r1
 80251be:	bf04      	itt	eq
 80251c0:	6819      	ldreq	r1, [r3, #0]
 80251c2:	685b      	ldreq	r3, [r3, #4]
 80251c4:	6063      	str	r3, [r4, #4]
 80251c6:	bf04      	itt	eq
 80251c8:	1809      	addeq	r1, r1, r0
 80251ca:	6021      	streq	r1, [r4, #0]
 80251cc:	6054      	str	r4, [r2, #4]
 80251ce:	e7ca      	b.n	8025166 <_free_r+0x22>
 80251d0:	bd38      	pop	{r3, r4, r5, pc}
 80251d2:	bf00      	nop
 80251d4:	24026374 	.word	0x24026374

080251d8 <__ssputs_r>:
 80251d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80251dc:	688e      	ldr	r6, [r1, #8]
 80251de:	461f      	mov	r7, r3
 80251e0:	42be      	cmp	r6, r7
 80251e2:	680b      	ldr	r3, [r1, #0]
 80251e4:	4682      	mov	sl, r0
 80251e6:	460c      	mov	r4, r1
 80251e8:	4690      	mov	r8, r2
 80251ea:	d82d      	bhi.n	8025248 <__ssputs_r+0x70>
 80251ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80251f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80251f4:	d026      	beq.n	8025244 <__ssputs_r+0x6c>
 80251f6:	6965      	ldr	r5, [r4, #20]
 80251f8:	6909      	ldr	r1, [r1, #16]
 80251fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80251fe:	eba3 0901 	sub.w	r9, r3, r1
 8025202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025206:	1c7b      	adds	r3, r7, #1
 8025208:	444b      	add	r3, r9
 802520a:	106d      	asrs	r5, r5, #1
 802520c:	429d      	cmp	r5, r3
 802520e:	bf38      	it	cc
 8025210:	461d      	movcc	r5, r3
 8025212:	0553      	lsls	r3, r2, #21
 8025214:	d527      	bpl.n	8025266 <__ssputs_r+0x8e>
 8025216:	4629      	mov	r1, r5
 8025218:	f7ff fbe0 	bl	80249dc <_malloc_r>
 802521c:	4606      	mov	r6, r0
 802521e:	b360      	cbz	r0, 802527a <__ssputs_r+0xa2>
 8025220:	6921      	ldr	r1, [r4, #16]
 8025222:	464a      	mov	r2, r9
 8025224:	f7ff ff23 	bl	802506e <memcpy>
 8025228:	89a3      	ldrh	r3, [r4, #12]
 802522a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802522e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025232:	81a3      	strh	r3, [r4, #12]
 8025234:	6126      	str	r6, [r4, #16]
 8025236:	6165      	str	r5, [r4, #20]
 8025238:	444e      	add	r6, r9
 802523a:	eba5 0509 	sub.w	r5, r5, r9
 802523e:	6026      	str	r6, [r4, #0]
 8025240:	60a5      	str	r5, [r4, #8]
 8025242:	463e      	mov	r6, r7
 8025244:	42be      	cmp	r6, r7
 8025246:	d900      	bls.n	802524a <__ssputs_r+0x72>
 8025248:	463e      	mov	r6, r7
 802524a:	6820      	ldr	r0, [r4, #0]
 802524c:	4632      	mov	r2, r6
 802524e:	4641      	mov	r1, r8
 8025250:	f000 fcf6 	bl	8025c40 <memmove>
 8025254:	68a3      	ldr	r3, [r4, #8]
 8025256:	1b9b      	subs	r3, r3, r6
 8025258:	60a3      	str	r3, [r4, #8]
 802525a:	6823      	ldr	r3, [r4, #0]
 802525c:	4433      	add	r3, r6
 802525e:	6023      	str	r3, [r4, #0]
 8025260:	2000      	movs	r0, #0
 8025262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025266:	462a      	mov	r2, r5
 8025268:	f000 fd26 	bl	8025cb8 <_realloc_r>
 802526c:	4606      	mov	r6, r0
 802526e:	2800      	cmp	r0, #0
 8025270:	d1e0      	bne.n	8025234 <__ssputs_r+0x5c>
 8025272:	6921      	ldr	r1, [r4, #16]
 8025274:	4650      	mov	r0, sl
 8025276:	f7ff ff65 	bl	8025144 <_free_r>
 802527a:	230c      	movs	r3, #12
 802527c:	f8ca 3000 	str.w	r3, [sl]
 8025280:	89a3      	ldrh	r3, [r4, #12]
 8025282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025286:	81a3      	strh	r3, [r4, #12]
 8025288:	f04f 30ff 	mov.w	r0, #4294967295
 802528c:	e7e9      	b.n	8025262 <__ssputs_r+0x8a>
	...

08025290 <_svfiprintf_r>:
 8025290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025294:	4698      	mov	r8, r3
 8025296:	898b      	ldrh	r3, [r1, #12]
 8025298:	061b      	lsls	r3, r3, #24
 802529a:	b09d      	sub	sp, #116	@ 0x74
 802529c:	4607      	mov	r7, r0
 802529e:	460d      	mov	r5, r1
 80252a0:	4614      	mov	r4, r2
 80252a2:	d510      	bpl.n	80252c6 <_svfiprintf_r+0x36>
 80252a4:	690b      	ldr	r3, [r1, #16]
 80252a6:	b973      	cbnz	r3, 80252c6 <_svfiprintf_r+0x36>
 80252a8:	2140      	movs	r1, #64	@ 0x40
 80252aa:	f7ff fb97 	bl	80249dc <_malloc_r>
 80252ae:	6028      	str	r0, [r5, #0]
 80252b0:	6128      	str	r0, [r5, #16]
 80252b2:	b930      	cbnz	r0, 80252c2 <_svfiprintf_r+0x32>
 80252b4:	230c      	movs	r3, #12
 80252b6:	603b      	str	r3, [r7, #0]
 80252b8:	f04f 30ff 	mov.w	r0, #4294967295
 80252bc:	b01d      	add	sp, #116	@ 0x74
 80252be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252c2:	2340      	movs	r3, #64	@ 0x40
 80252c4:	616b      	str	r3, [r5, #20]
 80252c6:	2300      	movs	r3, #0
 80252c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80252ca:	2320      	movs	r3, #32
 80252cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80252d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80252d4:	2330      	movs	r3, #48	@ 0x30
 80252d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8025474 <_svfiprintf_r+0x1e4>
 80252da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80252de:	f04f 0901 	mov.w	r9, #1
 80252e2:	4623      	mov	r3, r4
 80252e4:	469a      	mov	sl, r3
 80252e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80252ea:	b10a      	cbz	r2, 80252f0 <_svfiprintf_r+0x60>
 80252ec:	2a25      	cmp	r2, #37	@ 0x25
 80252ee:	d1f9      	bne.n	80252e4 <_svfiprintf_r+0x54>
 80252f0:	ebba 0b04 	subs.w	fp, sl, r4
 80252f4:	d00b      	beq.n	802530e <_svfiprintf_r+0x7e>
 80252f6:	465b      	mov	r3, fp
 80252f8:	4622      	mov	r2, r4
 80252fa:	4629      	mov	r1, r5
 80252fc:	4638      	mov	r0, r7
 80252fe:	f7ff ff6b 	bl	80251d8 <__ssputs_r>
 8025302:	3001      	adds	r0, #1
 8025304:	f000 80a7 	beq.w	8025456 <_svfiprintf_r+0x1c6>
 8025308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802530a:	445a      	add	r2, fp
 802530c:	9209      	str	r2, [sp, #36]	@ 0x24
 802530e:	f89a 3000 	ldrb.w	r3, [sl]
 8025312:	2b00      	cmp	r3, #0
 8025314:	f000 809f 	beq.w	8025456 <_svfiprintf_r+0x1c6>
 8025318:	2300      	movs	r3, #0
 802531a:	f04f 32ff 	mov.w	r2, #4294967295
 802531e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025322:	f10a 0a01 	add.w	sl, sl, #1
 8025326:	9304      	str	r3, [sp, #16]
 8025328:	9307      	str	r3, [sp, #28]
 802532a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802532e:	931a      	str	r3, [sp, #104]	@ 0x68
 8025330:	4654      	mov	r4, sl
 8025332:	2205      	movs	r2, #5
 8025334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025338:	484e      	ldr	r0, [pc, #312]	@ (8025474 <_svfiprintf_r+0x1e4>)
 802533a:	f7da ffd9 	bl	80002f0 <memchr>
 802533e:	9a04      	ldr	r2, [sp, #16]
 8025340:	b9d8      	cbnz	r0, 802537a <_svfiprintf_r+0xea>
 8025342:	06d0      	lsls	r0, r2, #27
 8025344:	bf44      	itt	mi
 8025346:	2320      	movmi	r3, #32
 8025348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802534c:	0711      	lsls	r1, r2, #28
 802534e:	bf44      	itt	mi
 8025350:	232b      	movmi	r3, #43	@ 0x2b
 8025352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025356:	f89a 3000 	ldrb.w	r3, [sl]
 802535a:	2b2a      	cmp	r3, #42	@ 0x2a
 802535c:	d015      	beq.n	802538a <_svfiprintf_r+0xfa>
 802535e:	9a07      	ldr	r2, [sp, #28]
 8025360:	4654      	mov	r4, sl
 8025362:	2000      	movs	r0, #0
 8025364:	f04f 0c0a 	mov.w	ip, #10
 8025368:	4621      	mov	r1, r4
 802536a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802536e:	3b30      	subs	r3, #48	@ 0x30
 8025370:	2b09      	cmp	r3, #9
 8025372:	d94b      	bls.n	802540c <_svfiprintf_r+0x17c>
 8025374:	b1b0      	cbz	r0, 80253a4 <_svfiprintf_r+0x114>
 8025376:	9207      	str	r2, [sp, #28]
 8025378:	e014      	b.n	80253a4 <_svfiprintf_r+0x114>
 802537a:	eba0 0308 	sub.w	r3, r0, r8
 802537e:	fa09 f303 	lsl.w	r3, r9, r3
 8025382:	4313      	orrs	r3, r2
 8025384:	9304      	str	r3, [sp, #16]
 8025386:	46a2      	mov	sl, r4
 8025388:	e7d2      	b.n	8025330 <_svfiprintf_r+0xa0>
 802538a:	9b03      	ldr	r3, [sp, #12]
 802538c:	1d19      	adds	r1, r3, #4
 802538e:	681b      	ldr	r3, [r3, #0]
 8025390:	9103      	str	r1, [sp, #12]
 8025392:	2b00      	cmp	r3, #0
 8025394:	bfbb      	ittet	lt
 8025396:	425b      	neglt	r3, r3
 8025398:	f042 0202 	orrlt.w	r2, r2, #2
 802539c:	9307      	strge	r3, [sp, #28]
 802539e:	9307      	strlt	r3, [sp, #28]
 80253a0:	bfb8      	it	lt
 80253a2:	9204      	strlt	r2, [sp, #16]
 80253a4:	7823      	ldrb	r3, [r4, #0]
 80253a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80253a8:	d10a      	bne.n	80253c0 <_svfiprintf_r+0x130>
 80253aa:	7863      	ldrb	r3, [r4, #1]
 80253ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80253ae:	d132      	bne.n	8025416 <_svfiprintf_r+0x186>
 80253b0:	9b03      	ldr	r3, [sp, #12]
 80253b2:	1d1a      	adds	r2, r3, #4
 80253b4:	681b      	ldr	r3, [r3, #0]
 80253b6:	9203      	str	r2, [sp, #12]
 80253b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80253bc:	3402      	adds	r4, #2
 80253be:	9305      	str	r3, [sp, #20]
 80253c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8025484 <_svfiprintf_r+0x1f4>
 80253c4:	7821      	ldrb	r1, [r4, #0]
 80253c6:	2203      	movs	r2, #3
 80253c8:	4650      	mov	r0, sl
 80253ca:	f7da ff91 	bl	80002f0 <memchr>
 80253ce:	b138      	cbz	r0, 80253e0 <_svfiprintf_r+0x150>
 80253d0:	9b04      	ldr	r3, [sp, #16]
 80253d2:	eba0 000a 	sub.w	r0, r0, sl
 80253d6:	2240      	movs	r2, #64	@ 0x40
 80253d8:	4082      	lsls	r2, r0
 80253da:	4313      	orrs	r3, r2
 80253dc:	3401      	adds	r4, #1
 80253de:	9304      	str	r3, [sp, #16]
 80253e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80253e4:	4824      	ldr	r0, [pc, #144]	@ (8025478 <_svfiprintf_r+0x1e8>)
 80253e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80253ea:	2206      	movs	r2, #6
 80253ec:	f7da ff80 	bl	80002f0 <memchr>
 80253f0:	2800      	cmp	r0, #0
 80253f2:	d036      	beq.n	8025462 <_svfiprintf_r+0x1d2>
 80253f4:	4b21      	ldr	r3, [pc, #132]	@ (802547c <_svfiprintf_r+0x1ec>)
 80253f6:	bb1b      	cbnz	r3, 8025440 <_svfiprintf_r+0x1b0>
 80253f8:	9b03      	ldr	r3, [sp, #12]
 80253fa:	3307      	adds	r3, #7
 80253fc:	f023 0307 	bic.w	r3, r3, #7
 8025400:	3308      	adds	r3, #8
 8025402:	9303      	str	r3, [sp, #12]
 8025404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025406:	4433      	add	r3, r6
 8025408:	9309      	str	r3, [sp, #36]	@ 0x24
 802540a:	e76a      	b.n	80252e2 <_svfiprintf_r+0x52>
 802540c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025410:	460c      	mov	r4, r1
 8025412:	2001      	movs	r0, #1
 8025414:	e7a8      	b.n	8025368 <_svfiprintf_r+0xd8>
 8025416:	2300      	movs	r3, #0
 8025418:	3401      	adds	r4, #1
 802541a:	9305      	str	r3, [sp, #20]
 802541c:	4619      	mov	r1, r3
 802541e:	f04f 0c0a 	mov.w	ip, #10
 8025422:	4620      	mov	r0, r4
 8025424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025428:	3a30      	subs	r2, #48	@ 0x30
 802542a:	2a09      	cmp	r2, #9
 802542c:	d903      	bls.n	8025436 <_svfiprintf_r+0x1a6>
 802542e:	2b00      	cmp	r3, #0
 8025430:	d0c6      	beq.n	80253c0 <_svfiprintf_r+0x130>
 8025432:	9105      	str	r1, [sp, #20]
 8025434:	e7c4      	b.n	80253c0 <_svfiprintf_r+0x130>
 8025436:	fb0c 2101 	mla	r1, ip, r1, r2
 802543a:	4604      	mov	r4, r0
 802543c:	2301      	movs	r3, #1
 802543e:	e7f0      	b.n	8025422 <_svfiprintf_r+0x192>
 8025440:	ab03      	add	r3, sp, #12
 8025442:	9300      	str	r3, [sp, #0]
 8025444:	462a      	mov	r2, r5
 8025446:	4b0e      	ldr	r3, [pc, #56]	@ (8025480 <_svfiprintf_r+0x1f0>)
 8025448:	a904      	add	r1, sp, #16
 802544a:	4638      	mov	r0, r7
 802544c:	f3af 8000 	nop.w
 8025450:	1c42      	adds	r2, r0, #1
 8025452:	4606      	mov	r6, r0
 8025454:	d1d6      	bne.n	8025404 <_svfiprintf_r+0x174>
 8025456:	89ab      	ldrh	r3, [r5, #12]
 8025458:	065b      	lsls	r3, r3, #25
 802545a:	f53f af2d 	bmi.w	80252b8 <_svfiprintf_r+0x28>
 802545e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025460:	e72c      	b.n	80252bc <_svfiprintf_r+0x2c>
 8025462:	ab03      	add	r3, sp, #12
 8025464:	9300      	str	r3, [sp, #0]
 8025466:	462a      	mov	r2, r5
 8025468:	4b05      	ldr	r3, [pc, #20]	@ (8025480 <_svfiprintf_r+0x1f0>)
 802546a:	a904      	add	r1, sp, #16
 802546c:	4638      	mov	r0, r7
 802546e:	f000 f9bb 	bl	80257e8 <_printf_i>
 8025472:	e7ed      	b.n	8025450 <_svfiprintf_r+0x1c0>
 8025474:	08027c09 	.word	0x08027c09
 8025478:	08027c13 	.word	0x08027c13
 802547c:	00000000 	.word	0x00000000
 8025480:	080251d9 	.word	0x080251d9
 8025484:	08027c0f 	.word	0x08027c0f

08025488 <__sfputc_r>:
 8025488:	6893      	ldr	r3, [r2, #8]
 802548a:	3b01      	subs	r3, #1
 802548c:	2b00      	cmp	r3, #0
 802548e:	b410      	push	{r4}
 8025490:	6093      	str	r3, [r2, #8]
 8025492:	da08      	bge.n	80254a6 <__sfputc_r+0x1e>
 8025494:	6994      	ldr	r4, [r2, #24]
 8025496:	42a3      	cmp	r3, r4
 8025498:	db01      	blt.n	802549e <__sfputc_r+0x16>
 802549a:	290a      	cmp	r1, #10
 802549c:	d103      	bne.n	80254a6 <__sfputc_r+0x1e>
 802549e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80254a2:	f7ff bc6e 	b.w	8024d82 <__swbuf_r>
 80254a6:	6813      	ldr	r3, [r2, #0]
 80254a8:	1c58      	adds	r0, r3, #1
 80254aa:	6010      	str	r0, [r2, #0]
 80254ac:	7019      	strb	r1, [r3, #0]
 80254ae:	4608      	mov	r0, r1
 80254b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80254b4:	4770      	bx	lr

080254b6 <__sfputs_r>:
 80254b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254b8:	4606      	mov	r6, r0
 80254ba:	460f      	mov	r7, r1
 80254bc:	4614      	mov	r4, r2
 80254be:	18d5      	adds	r5, r2, r3
 80254c0:	42ac      	cmp	r4, r5
 80254c2:	d101      	bne.n	80254c8 <__sfputs_r+0x12>
 80254c4:	2000      	movs	r0, #0
 80254c6:	e007      	b.n	80254d8 <__sfputs_r+0x22>
 80254c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80254cc:	463a      	mov	r2, r7
 80254ce:	4630      	mov	r0, r6
 80254d0:	f7ff ffda 	bl	8025488 <__sfputc_r>
 80254d4:	1c43      	adds	r3, r0, #1
 80254d6:	d1f3      	bne.n	80254c0 <__sfputs_r+0xa>
 80254d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080254dc <_vfiprintf_r>:
 80254dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254e0:	460d      	mov	r5, r1
 80254e2:	b09d      	sub	sp, #116	@ 0x74
 80254e4:	4614      	mov	r4, r2
 80254e6:	4698      	mov	r8, r3
 80254e8:	4606      	mov	r6, r0
 80254ea:	b118      	cbz	r0, 80254f4 <_vfiprintf_r+0x18>
 80254ec:	6a03      	ldr	r3, [r0, #32]
 80254ee:	b90b      	cbnz	r3, 80254f4 <_vfiprintf_r+0x18>
 80254f0:	f7ff fb9a 	bl	8024c28 <__sinit>
 80254f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80254f6:	07d9      	lsls	r1, r3, #31
 80254f8:	d405      	bmi.n	8025506 <_vfiprintf_r+0x2a>
 80254fa:	89ab      	ldrh	r3, [r5, #12]
 80254fc:	059a      	lsls	r2, r3, #22
 80254fe:	d402      	bmi.n	8025506 <_vfiprintf_r+0x2a>
 8025500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025502:	f7ff fdb2 	bl	802506a <__retarget_lock_acquire_recursive>
 8025506:	89ab      	ldrh	r3, [r5, #12]
 8025508:	071b      	lsls	r3, r3, #28
 802550a:	d501      	bpl.n	8025510 <_vfiprintf_r+0x34>
 802550c:	692b      	ldr	r3, [r5, #16]
 802550e:	b99b      	cbnz	r3, 8025538 <_vfiprintf_r+0x5c>
 8025510:	4629      	mov	r1, r5
 8025512:	4630      	mov	r0, r6
 8025514:	f7ff fc74 	bl	8024e00 <__swsetup_r>
 8025518:	b170      	cbz	r0, 8025538 <_vfiprintf_r+0x5c>
 802551a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802551c:	07dc      	lsls	r4, r3, #31
 802551e:	d504      	bpl.n	802552a <_vfiprintf_r+0x4e>
 8025520:	f04f 30ff 	mov.w	r0, #4294967295
 8025524:	b01d      	add	sp, #116	@ 0x74
 8025526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802552a:	89ab      	ldrh	r3, [r5, #12]
 802552c:	0598      	lsls	r0, r3, #22
 802552e:	d4f7      	bmi.n	8025520 <_vfiprintf_r+0x44>
 8025530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025532:	f7ff fd9b 	bl	802506c <__retarget_lock_release_recursive>
 8025536:	e7f3      	b.n	8025520 <_vfiprintf_r+0x44>
 8025538:	2300      	movs	r3, #0
 802553a:	9309      	str	r3, [sp, #36]	@ 0x24
 802553c:	2320      	movs	r3, #32
 802553e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025542:	f8cd 800c 	str.w	r8, [sp, #12]
 8025546:	2330      	movs	r3, #48	@ 0x30
 8025548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80256f8 <_vfiprintf_r+0x21c>
 802554c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025550:	f04f 0901 	mov.w	r9, #1
 8025554:	4623      	mov	r3, r4
 8025556:	469a      	mov	sl, r3
 8025558:	f813 2b01 	ldrb.w	r2, [r3], #1
 802555c:	b10a      	cbz	r2, 8025562 <_vfiprintf_r+0x86>
 802555e:	2a25      	cmp	r2, #37	@ 0x25
 8025560:	d1f9      	bne.n	8025556 <_vfiprintf_r+0x7a>
 8025562:	ebba 0b04 	subs.w	fp, sl, r4
 8025566:	d00b      	beq.n	8025580 <_vfiprintf_r+0xa4>
 8025568:	465b      	mov	r3, fp
 802556a:	4622      	mov	r2, r4
 802556c:	4629      	mov	r1, r5
 802556e:	4630      	mov	r0, r6
 8025570:	f7ff ffa1 	bl	80254b6 <__sfputs_r>
 8025574:	3001      	adds	r0, #1
 8025576:	f000 80a7 	beq.w	80256c8 <_vfiprintf_r+0x1ec>
 802557a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802557c:	445a      	add	r2, fp
 802557e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025580:	f89a 3000 	ldrb.w	r3, [sl]
 8025584:	2b00      	cmp	r3, #0
 8025586:	f000 809f 	beq.w	80256c8 <_vfiprintf_r+0x1ec>
 802558a:	2300      	movs	r3, #0
 802558c:	f04f 32ff 	mov.w	r2, #4294967295
 8025590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025594:	f10a 0a01 	add.w	sl, sl, #1
 8025598:	9304      	str	r3, [sp, #16]
 802559a:	9307      	str	r3, [sp, #28]
 802559c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80255a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80255a2:	4654      	mov	r4, sl
 80255a4:	2205      	movs	r2, #5
 80255a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80255aa:	4853      	ldr	r0, [pc, #332]	@ (80256f8 <_vfiprintf_r+0x21c>)
 80255ac:	f7da fea0 	bl	80002f0 <memchr>
 80255b0:	9a04      	ldr	r2, [sp, #16]
 80255b2:	b9d8      	cbnz	r0, 80255ec <_vfiprintf_r+0x110>
 80255b4:	06d1      	lsls	r1, r2, #27
 80255b6:	bf44      	itt	mi
 80255b8:	2320      	movmi	r3, #32
 80255ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80255be:	0713      	lsls	r3, r2, #28
 80255c0:	bf44      	itt	mi
 80255c2:	232b      	movmi	r3, #43	@ 0x2b
 80255c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80255c8:	f89a 3000 	ldrb.w	r3, [sl]
 80255cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80255ce:	d015      	beq.n	80255fc <_vfiprintf_r+0x120>
 80255d0:	9a07      	ldr	r2, [sp, #28]
 80255d2:	4654      	mov	r4, sl
 80255d4:	2000      	movs	r0, #0
 80255d6:	f04f 0c0a 	mov.w	ip, #10
 80255da:	4621      	mov	r1, r4
 80255dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80255e0:	3b30      	subs	r3, #48	@ 0x30
 80255e2:	2b09      	cmp	r3, #9
 80255e4:	d94b      	bls.n	802567e <_vfiprintf_r+0x1a2>
 80255e6:	b1b0      	cbz	r0, 8025616 <_vfiprintf_r+0x13a>
 80255e8:	9207      	str	r2, [sp, #28]
 80255ea:	e014      	b.n	8025616 <_vfiprintf_r+0x13a>
 80255ec:	eba0 0308 	sub.w	r3, r0, r8
 80255f0:	fa09 f303 	lsl.w	r3, r9, r3
 80255f4:	4313      	orrs	r3, r2
 80255f6:	9304      	str	r3, [sp, #16]
 80255f8:	46a2      	mov	sl, r4
 80255fa:	e7d2      	b.n	80255a2 <_vfiprintf_r+0xc6>
 80255fc:	9b03      	ldr	r3, [sp, #12]
 80255fe:	1d19      	adds	r1, r3, #4
 8025600:	681b      	ldr	r3, [r3, #0]
 8025602:	9103      	str	r1, [sp, #12]
 8025604:	2b00      	cmp	r3, #0
 8025606:	bfbb      	ittet	lt
 8025608:	425b      	neglt	r3, r3
 802560a:	f042 0202 	orrlt.w	r2, r2, #2
 802560e:	9307      	strge	r3, [sp, #28]
 8025610:	9307      	strlt	r3, [sp, #28]
 8025612:	bfb8      	it	lt
 8025614:	9204      	strlt	r2, [sp, #16]
 8025616:	7823      	ldrb	r3, [r4, #0]
 8025618:	2b2e      	cmp	r3, #46	@ 0x2e
 802561a:	d10a      	bne.n	8025632 <_vfiprintf_r+0x156>
 802561c:	7863      	ldrb	r3, [r4, #1]
 802561e:	2b2a      	cmp	r3, #42	@ 0x2a
 8025620:	d132      	bne.n	8025688 <_vfiprintf_r+0x1ac>
 8025622:	9b03      	ldr	r3, [sp, #12]
 8025624:	1d1a      	adds	r2, r3, #4
 8025626:	681b      	ldr	r3, [r3, #0]
 8025628:	9203      	str	r2, [sp, #12]
 802562a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802562e:	3402      	adds	r4, #2
 8025630:	9305      	str	r3, [sp, #20]
 8025632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025708 <_vfiprintf_r+0x22c>
 8025636:	7821      	ldrb	r1, [r4, #0]
 8025638:	2203      	movs	r2, #3
 802563a:	4650      	mov	r0, sl
 802563c:	f7da fe58 	bl	80002f0 <memchr>
 8025640:	b138      	cbz	r0, 8025652 <_vfiprintf_r+0x176>
 8025642:	9b04      	ldr	r3, [sp, #16]
 8025644:	eba0 000a 	sub.w	r0, r0, sl
 8025648:	2240      	movs	r2, #64	@ 0x40
 802564a:	4082      	lsls	r2, r0
 802564c:	4313      	orrs	r3, r2
 802564e:	3401      	adds	r4, #1
 8025650:	9304      	str	r3, [sp, #16]
 8025652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025656:	4829      	ldr	r0, [pc, #164]	@ (80256fc <_vfiprintf_r+0x220>)
 8025658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802565c:	2206      	movs	r2, #6
 802565e:	f7da fe47 	bl	80002f0 <memchr>
 8025662:	2800      	cmp	r0, #0
 8025664:	d03f      	beq.n	80256e6 <_vfiprintf_r+0x20a>
 8025666:	4b26      	ldr	r3, [pc, #152]	@ (8025700 <_vfiprintf_r+0x224>)
 8025668:	bb1b      	cbnz	r3, 80256b2 <_vfiprintf_r+0x1d6>
 802566a:	9b03      	ldr	r3, [sp, #12]
 802566c:	3307      	adds	r3, #7
 802566e:	f023 0307 	bic.w	r3, r3, #7
 8025672:	3308      	adds	r3, #8
 8025674:	9303      	str	r3, [sp, #12]
 8025676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025678:	443b      	add	r3, r7
 802567a:	9309      	str	r3, [sp, #36]	@ 0x24
 802567c:	e76a      	b.n	8025554 <_vfiprintf_r+0x78>
 802567e:	fb0c 3202 	mla	r2, ip, r2, r3
 8025682:	460c      	mov	r4, r1
 8025684:	2001      	movs	r0, #1
 8025686:	e7a8      	b.n	80255da <_vfiprintf_r+0xfe>
 8025688:	2300      	movs	r3, #0
 802568a:	3401      	adds	r4, #1
 802568c:	9305      	str	r3, [sp, #20]
 802568e:	4619      	mov	r1, r3
 8025690:	f04f 0c0a 	mov.w	ip, #10
 8025694:	4620      	mov	r0, r4
 8025696:	f810 2b01 	ldrb.w	r2, [r0], #1
 802569a:	3a30      	subs	r2, #48	@ 0x30
 802569c:	2a09      	cmp	r2, #9
 802569e:	d903      	bls.n	80256a8 <_vfiprintf_r+0x1cc>
 80256a0:	2b00      	cmp	r3, #0
 80256a2:	d0c6      	beq.n	8025632 <_vfiprintf_r+0x156>
 80256a4:	9105      	str	r1, [sp, #20]
 80256a6:	e7c4      	b.n	8025632 <_vfiprintf_r+0x156>
 80256a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80256ac:	4604      	mov	r4, r0
 80256ae:	2301      	movs	r3, #1
 80256b0:	e7f0      	b.n	8025694 <_vfiprintf_r+0x1b8>
 80256b2:	ab03      	add	r3, sp, #12
 80256b4:	9300      	str	r3, [sp, #0]
 80256b6:	462a      	mov	r2, r5
 80256b8:	4b12      	ldr	r3, [pc, #72]	@ (8025704 <_vfiprintf_r+0x228>)
 80256ba:	a904      	add	r1, sp, #16
 80256bc:	4630      	mov	r0, r6
 80256be:	f3af 8000 	nop.w
 80256c2:	4607      	mov	r7, r0
 80256c4:	1c78      	adds	r0, r7, #1
 80256c6:	d1d6      	bne.n	8025676 <_vfiprintf_r+0x19a>
 80256c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80256ca:	07d9      	lsls	r1, r3, #31
 80256cc:	d405      	bmi.n	80256da <_vfiprintf_r+0x1fe>
 80256ce:	89ab      	ldrh	r3, [r5, #12]
 80256d0:	059a      	lsls	r2, r3, #22
 80256d2:	d402      	bmi.n	80256da <_vfiprintf_r+0x1fe>
 80256d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80256d6:	f7ff fcc9 	bl	802506c <__retarget_lock_release_recursive>
 80256da:	89ab      	ldrh	r3, [r5, #12]
 80256dc:	065b      	lsls	r3, r3, #25
 80256de:	f53f af1f 	bmi.w	8025520 <_vfiprintf_r+0x44>
 80256e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80256e4:	e71e      	b.n	8025524 <_vfiprintf_r+0x48>
 80256e6:	ab03      	add	r3, sp, #12
 80256e8:	9300      	str	r3, [sp, #0]
 80256ea:	462a      	mov	r2, r5
 80256ec:	4b05      	ldr	r3, [pc, #20]	@ (8025704 <_vfiprintf_r+0x228>)
 80256ee:	a904      	add	r1, sp, #16
 80256f0:	4630      	mov	r0, r6
 80256f2:	f000 f879 	bl	80257e8 <_printf_i>
 80256f6:	e7e4      	b.n	80256c2 <_vfiprintf_r+0x1e6>
 80256f8:	08027c09 	.word	0x08027c09
 80256fc:	08027c13 	.word	0x08027c13
 8025700:	00000000 	.word	0x00000000
 8025704:	080254b7 	.word	0x080254b7
 8025708:	08027c0f 	.word	0x08027c0f

0802570c <_printf_common>:
 802570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025710:	4616      	mov	r6, r2
 8025712:	4698      	mov	r8, r3
 8025714:	688a      	ldr	r2, [r1, #8]
 8025716:	690b      	ldr	r3, [r1, #16]
 8025718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802571c:	4293      	cmp	r3, r2
 802571e:	bfb8      	it	lt
 8025720:	4613      	movlt	r3, r2
 8025722:	6033      	str	r3, [r6, #0]
 8025724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025728:	4607      	mov	r7, r0
 802572a:	460c      	mov	r4, r1
 802572c:	b10a      	cbz	r2, 8025732 <_printf_common+0x26>
 802572e:	3301      	adds	r3, #1
 8025730:	6033      	str	r3, [r6, #0]
 8025732:	6823      	ldr	r3, [r4, #0]
 8025734:	0699      	lsls	r1, r3, #26
 8025736:	bf42      	ittt	mi
 8025738:	6833      	ldrmi	r3, [r6, #0]
 802573a:	3302      	addmi	r3, #2
 802573c:	6033      	strmi	r3, [r6, #0]
 802573e:	6825      	ldr	r5, [r4, #0]
 8025740:	f015 0506 	ands.w	r5, r5, #6
 8025744:	d106      	bne.n	8025754 <_printf_common+0x48>
 8025746:	f104 0a19 	add.w	sl, r4, #25
 802574a:	68e3      	ldr	r3, [r4, #12]
 802574c:	6832      	ldr	r2, [r6, #0]
 802574e:	1a9b      	subs	r3, r3, r2
 8025750:	42ab      	cmp	r3, r5
 8025752:	dc26      	bgt.n	80257a2 <_printf_common+0x96>
 8025754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025758:	6822      	ldr	r2, [r4, #0]
 802575a:	3b00      	subs	r3, #0
 802575c:	bf18      	it	ne
 802575e:	2301      	movne	r3, #1
 8025760:	0692      	lsls	r2, r2, #26
 8025762:	d42b      	bmi.n	80257bc <_printf_common+0xb0>
 8025764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8025768:	4641      	mov	r1, r8
 802576a:	4638      	mov	r0, r7
 802576c:	47c8      	blx	r9
 802576e:	3001      	adds	r0, #1
 8025770:	d01e      	beq.n	80257b0 <_printf_common+0xa4>
 8025772:	6823      	ldr	r3, [r4, #0]
 8025774:	6922      	ldr	r2, [r4, #16]
 8025776:	f003 0306 	and.w	r3, r3, #6
 802577a:	2b04      	cmp	r3, #4
 802577c:	bf02      	ittt	eq
 802577e:	68e5      	ldreq	r5, [r4, #12]
 8025780:	6833      	ldreq	r3, [r6, #0]
 8025782:	1aed      	subeq	r5, r5, r3
 8025784:	68a3      	ldr	r3, [r4, #8]
 8025786:	bf0c      	ite	eq
 8025788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802578c:	2500      	movne	r5, #0
 802578e:	4293      	cmp	r3, r2
 8025790:	bfc4      	itt	gt
 8025792:	1a9b      	subgt	r3, r3, r2
 8025794:	18ed      	addgt	r5, r5, r3
 8025796:	2600      	movs	r6, #0
 8025798:	341a      	adds	r4, #26
 802579a:	42b5      	cmp	r5, r6
 802579c:	d11a      	bne.n	80257d4 <_printf_common+0xc8>
 802579e:	2000      	movs	r0, #0
 80257a0:	e008      	b.n	80257b4 <_printf_common+0xa8>
 80257a2:	2301      	movs	r3, #1
 80257a4:	4652      	mov	r2, sl
 80257a6:	4641      	mov	r1, r8
 80257a8:	4638      	mov	r0, r7
 80257aa:	47c8      	blx	r9
 80257ac:	3001      	adds	r0, #1
 80257ae:	d103      	bne.n	80257b8 <_printf_common+0xac>
 80257b0:	f04f 30ff 	mov.w	r0, #4294967295
 80257b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80257b8:	3501      	adds	r5, #1
 80257ba:	e7c6      	b.n	802574a <_printf_common+0x3e>
 80257bc:	18e1      	adds	r1, r4, r3
 80257be:	1c5a      	adds	r2, r3, #1
 80257c0:	2030      	movs	r0, #48	@ 0x30
 80257c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80257c6:	4422      	add	r2, r4
 80257c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80257cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80257d0:	3302      	adds	r3, #2
 80257d2:	e7c7      	b.n	8025764 <_printf_common+0x58>
 80257d4:	2301      	movs	r3, #1
 80257d6:	4622      	mov	r2, r4
 80257d8:	4641      	mov	r1, r8
 80257da:	4638      	mov	r0, r7
 80257dc:	47c8      	blx	r9
 80257de:	3001      	adds	r0, #1
 80257e0:	d0e6      	beq.n	80257b0 <_printf_common+0xa4>
 80257e2:	3601      	adds	r6, #1
 80257e4:	e7d9      	b.n	802579a <_printf_common+0x8e>
	...

080257e8 <_printf_i>:
 80257e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80257ec:	7e0f      	ldrb	r7, [r1, #24]
 80257ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80257f0:	2f78      	cmp	r7, #120	@ 0x78
 80257f2:	4691      	mov	r9, r2
 80257f4:	4680      	mov	r8, r0
 80257f6:	460c      	mov	r4, r1
 80257f8:	469a      	mov	sl, r3
 80257fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80257fe:	d807      	bhi.n	8025810 <_printf_i+0x28>
 8025800:	2f62      	cmp	r7, #98	@ 0x62
 8025802:	d80a      	bhi.n	802581a <_printf_i+0x32>
 8025804:	2f00      	cmp	r7, #0
 8025806:	f000 80d1 	beq.w	80259ac <_printf_i+0x1c4>
 802580a:	2f58      	cmp	r7, #88	@ 0x58
 802580c:	f000 80b8 	beq.w	8025980 <_printf_i+0x198>
 8025810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025818:	e03a      	b.n	8025890 <_printf_i+0xa8>
 802581a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802581e:	2b15      	cmp	r3, #21
 8025820:	d8f6      	bhi.n	8025810 <_printf_i+0x28>
 8025822:	a101      	add	r1, pc, #4	@ (adr r1, 8025828 <_printf_i+0x40>)
 8025824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025828:	08025881 	.word	0x08025881
 802582c:	08025895 	.word	0x08025895
 8025830:	08025811 	.word	0x08025811
 8025834:	08025811 	.word	0x08025811
 8025838:	08025811 	.word	0x08025811
 802583c:	08025811 	.word	0x08025811
 8025840:	08025895 	.word	0x08025895
 8025844:	08025811 	.word	0x08025811
 8025848:	08025811 	.word	0x08025811
 802584c:	08025811 	.word	0x08025811
 8025850:	08025811 	.word	0x08025811
 8025854:	08025993 	.word	0x08025993
 8025858:	080258bf 	.word	0x080258bf
 802585c:	0802594d 	.word	0x0802594d
 8025860:	08025811 	.word	0x08025811
 8025864:	08025811 	.word	0x08025811
 8025868:	080259b5 	.word	0x080259b5
 802586c:	08025811 	.word	0x08025811
 8025870:	080258bf 	.word	0x080258bf
 8025874:	08025811 	.word	0x08025811
 8025878:	08025811 	.word	0x08025811
 802587c:	08025955 	.word	0x08025955
 8025880:	6833      	ldr	r3, [r6, #0]
 8025882:	1d1a      	adds	r2, r3, #4
 8025884:	681b      	ldr	r3, [r3, #0]
 8025886:	6032      	str	r2, [r6, #0]
 8025888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802588c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025890:	2301      	movs	r3, #1
 8025892:	e09c      	b.n	80259ce <_printf_i+0x1e6>
 8025894:	6833      	ldr	r3, [r6, #0]
 8025896:	6820      	ldr	r0, [r4, #0]
 8025898:	1d19      	adds	r1, r3, #4
 802589a:	6031      	str	r1, [r6, #0]
 802589c:	0606      	lsls	r6, r0, #24
 802589e:	d501      	bpl.n	80258a4 <_printf_i+0xbc>
 80258a0:	681d      	ldr	r5, [r3, #0]
 80258a2:	e003      	b.n	80258ac <_printf_i+0xc4>
 80258a4:	0645      	lsls	r5, r0, #25
 80258a6:	d5fb      	bpl.n	80258a0 <_printf_i+0xb8>
 80258a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80258ac:	2d00      	cmp	r5, #0
 80258ae:	da03      	bge.n	80258b8 <_printf_i+0xd0>
 80258b0:	232d      	movs	r3, #45	@ 0x2d
 80258b2:	426d      	negs	r5, r5
 80258b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80258b8:	4858      	ldr	r0, [pc, #352]	@ (8025a1c <_printf_i+0x234>)
 80258ba:	230a      	movs	r3, #10
 80258bc:	e011      	b.n	80258e2 <_printf_i+0xfa>
 80258be:	6821      	ldr	r1, [r4, #0]
 80258c0:	6833      	ldr	r3, [r6, #0]
 80258c2:	0608      	lsls	r0, r1, #24
 80258c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80258c8:	d402      	bmi.n	80258d0 <_printf_i+0xe8>
 80258ca:	0649      	lsls	r1, r1, #25
 80258cc:	bf48      	it	mi
 80258ce:	b2ad      	uxthmi	r5, r5
 80258d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80258d2:	4852      	ldr	r0, [pc, #328]	@ (8025a1c <_printf_i+0x234>)
 80258d4:	6033      	str	r3, [r6, #0]
 80258d6:	bf14      	ite	ne
 80258d8:	230a      	movne	r3, #10
 80258da:	2308      	moveq	r3, #8
 80258dc:	2100      	movs	r1, #0
 80258de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80258e2:	6866      	ldr	r6, [r4, #4]
 80258e4:	60a6      	str	r6, [r4, #8]
 80258e6:	2e00      	cmp	r6, #0
 80258e8:	db05      	blt.n	80258f6 <_printf_i+0x10e>
 80258ea:	6821      	ldr	r1, [r4, #0]
 80258ec:	432e      	orrs	r6, r5
 80258ee:	f021 0104 	bic.w	r1, r1, #4
 80258f2:	6021      	str	r1, [r4, #0]
 80258f4:	d04b      	beq.n	802598e <_printf_i+0x1a6>
 80258f6:	4616      	mov	r6, r2
 80258f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80258fc:	fb03 5711 	mls	r7, r3, r1, r5
 8025900:	5dc7      	ldrb	r7, [r0, r7]
 8025902:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025906:	462f      	mov	r7, r5
 8025908:	42bb      	cmp	r3, r7
 802590a:	460d      	mov	r5, r1
 802590c:	d9f4      	bls.n	80258f8 <_printf_i+0x110>
 802590e:	2b08      	cmp	r3, #8
 8025910:	d10b      	bne.n	802592a <_printf_i+0x142>
 8025912:	6823      	ldr	r3, [r4, #0]
 8025914:	07df      	lsls	r7, r3, #31
 8025916:	d508      	bpl.n	802592a <_printf_i+0x142>
 8025918:	6923      	ldr	r3, [r4, #16]
 802591a:	6861      	ldr	r1, [r4, #4]
 802591c:	4299      	cmp	r1, r3
 802591e:	bfde      	ittt	le
 8025920:	2330      	movle	r3, #48	@ 0x30
 8025922:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025926:	f106 36ff 	addle.w	r6, r6, #4294967295
 802592a:	1b92      	subs	r2, r2, r6
 802592c:	6122      	str	r2, [r4, #16]
 802592e:	f8cd a000 	str.w	sl, [sp]
 8025932:	464b      	mov	r3, r9
 8025934:	aa03      	add	r2, sp, #12
 8025936:	4621      	mov	r1, r4
 8025938:	4640      	mov	r0, r8
 802593a:	f7ff fee7 	bl	802570c <_printf_common>
 802593e:	3001      	adds	r0, #1
 8025940:	d14a      	bne.n	80259d8 <_printf_i+0x1f0>
 8025942:	f04f 30ff 	mov.w	r0, #4294967295
 8025946:	b004      	add	sp, #16
 8025948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802594c:	6823      	ldr	r3, [r4, #0]
 802594e:	f043 0320 	orr.w	r3, r3, #32
 8025952:	6023      	str	r3, [r4, #0]
 8025954:	4832      	ldr	r0, [pc, #200]	@ (8025a20 <_printf_i+0x238>)
 8025956:	2778      	movs	r7, #120	@ 0x78
 8025958:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802595c:	6823      	ldr	r3, [r4, #0]
 802595e:	6831      	ldr	r1, [r6, #0]
 8025960:	061f      	lsls	r7, r3, #24
 8025962:	f851 5b04 	ldr.w	r5, [r1], #4
 8025966:	d402      	bmi.n	802596e <_printf_i+0x186>
 8025968:	065f      	lsls	r7, r3, #25
 802596a:	bf48      	it	mi
 802596c:	b2ad      	uxthmi	r5, r5
 802596e:	6031      	str	r1, [r6, #0]
 8025970:	07d9      	lsls	r1, r3, #31
 8025972:	bf44      	itt	mi
 8025974:	f043 0320 	orrmi.w	r3, r3, #32
 8025978:	6023      	strmi	r3, [r4, #0]
 802597a:	b11d      	cbz	r5, 8025984 <_printf_i+0x19c>
 802597c:	2310      	movs	r3, #16
 802597e:	e7ad      	b.n	80258dc <_printf_i+0xf4>
 8025980:	4826      	ldr	r0, [pc, #152]	@ (8025a1c <_printf_i+0x234>)
 8025982:	e7e9      	b.n	8025958 <_printf_i+0x170>
 8025984:	6823      	ldr	r3, [r4, #0]
 8025986:	f023 0320 	bic.w	r3, r3, #32
 802598a:	6023      	str	r3, [r4, #0]
 802598c:	e7f6      	b.n	802597c <_printf_i+0x194>
 802598e:	4616      	mov	r6, r2
 8025990:	e7bd      	b.n	802590e <_printf_i+0x126>
 8025992:	6833      	ldr	r3, [r6, #0]
 8025994:	6825      	ldr	r5, [r4, #0]
 8025996:	6961      	ldr	r1, [r4, #20]
 8025998:	1d18      	adds	r0, r3, #4
 802599a:	6030      	str	r0, [r6, #0]
 802599c:	062e      	lsls	r6, r5, #24
 802599e:	681b      	ldr	r3, [r3, #0]
 80259a0:	d501      	bpl.n	80259a6 <_printf_i+0x1be>
 80259a2:	6019      	str	r1, [r3, #0]
 80259a4:	e002      	b.n	80259ac <_printf_i+0x1c4>
 80259a6:	0668      	lsls	r0, r5, #25
 80259a8:	d5fb      	bpl.n	80259a2 <_printf_i+0x1ba>
 80259aa:	8019      	strh	r1, [r3, #0]
 80259ac:	2300      	movs	r3, #0
 80259ae:	6123      	str	r3, [r4, #16]
 80259b0:	4616      	mov	r6, r2
 80259b2:	e7bc      	b.n	802592e <_printf_i+0x146>
 80259b4:	6833      	ldr	r3, [r6, #0]
 80259b6:	1d1a      	adds	r2, r3, #4
 80259b8:	6032      	str	r2, [r6, #0]
 80259ba:	681e      	ldr	r6, [r3, #0]
 80259bc:	6862      	ldr	r2, [r4, #4]
 80259be:	2100      	movs	r1, #0
 80259c0:	4630      	mov	r0, r6
 80259c2:	f7da fc95 	bl	80002f0 <memchr>
 80259c6:	b108      	cbz	r0, 80259cc <_printf_i+0x1e4>
 80259c8:	1b80      	subs	r0, r0, r6
 80259ca:	6060      	str	r0, [r4, #4]
 80259cc:	6863      	ldr	r3, [r4, #4]
 80259ce:	6123      	str	r3, [r4, #16]
 80259d0:	2300      	movs	r3, #0
 80259d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80259d6:	e7aa      	b.n	802592e <_printf_i+0x146>
 80259d8:	6923      	ldr	r3, [r4, #16]
 80259da:	4632      	mov	r2, r6
 80259dc:	4649      	mov	r1, r9
 80259de:	4640      	mov	r0, r8
 80259e0:	47d0      	blx	sl
 80259e2:	3001      	adds	r0, #1
 80259e4:	d0ad      	beq.n	8025942 <_printf_i+0x15a>
 80259e6:	6823      	ldr	r3, [r4, #0]
 80259e8:	079b      	lsls	r3, r3, #30
 80259ea:	d413      	bmi.n	8025a14 <_printf_i+0x22c>
 80259ec:	68e0      	ldr	r0, [r4, #12]
 80259ee:	9b03      	ldr	r3, [sp, #12]
 80259f0:	4298      	cmp	r0, r3
 80259f2:	bfb8      	it	lt
 80259f4:	4618      	movlt	r0, r3
 80259f6:	e7a6      	b.n	8025946 <_printf_i+0x15e>
 80259f8:	2301      	movs	r3, #1
 80259fa:	4632      	mov	r2, r6
 80259fc:	4649      	mov	r1, r9
 80259fe:	4640      	mov	r0, r8
 8025a00:	47d0      	blx	sl
 8025a02:	3001      	adds	r0, #1
 8025a04:	d09d      	beq.n	8025942 <_printf_i+0x15a>
 8025a06:	3501      	adds	r5, #1
 8025a08:	68e3      	ldr	r3, [r4, #12]
 8025a0a:	9903      	ldr	r1, [sp, #12]
 8025a0c:	1a5b      	subs	r3, r3, r1
 8025a0e:	42ab      	cmp	r3, r5
 8025a10:	dcf2      	bgt.n	80259f8 <_printf_i+0x210>
 8025a12:	e7eb      	b.n	80259ec <_printf_i+0x204>
 8025a14:	2500      	movs	r5, #0
 8025a16:	f104 0619 	add.w	r6, r4, #25
 8025a1a:	e7f5      	b.n	8025a08 <_printf_i+0x220>
 8025a1c:	08027c1a 	.word	0x08027c1a
 8025a20:	08027c2b 	.word	0x08027c2b

08025a24 <__sflush_r>:
 8025a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8025a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a2c:	0716      	lsls	r6, r2, #28
 8025a2e:	4605      	mov	r5, r0
 8025a30:	460c      	mov	r4, r1
 8025a32:	d454      	bmi.n	8025ade <__sflush_r+0xba>
 8025a34:	684b      	ldr	r3, [r1, #4]
 8025a36:	2b00      	cmp	r3, #0
 8025a38:	dc02      	bgt.n	8025a40 <__sflush_r+0x1c>
 8025a3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8025a3c:	2b00      	cmp	r3, #0
 8025a3e:	dd48      	ble.n	8025ad2 <__sflush_r+0xae>
 8025a40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025a42:	2e00      	cmp	r6, #0
 8025a44:	d045      	beq.n	8025ad2 <__sflush_r+0xae>
 8025a46:	2300      	movs	r3, #0
 8025a48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8025a4c:	682f      	ldr	r7, [r5, #0]
 8025a4e:	6a21      	ldr	r1, [r4, #32]
 8025a50:	602b      	str	r3, [r5, #0]
 8025a52:	d030      	beq.n	8025ab6 <__sflush_r+0x92>
 8025a54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025a56:	89a3      	ldrh	r3, [r4, #12]
 8025a58:	0759      	lsls	r1, r3, #29
 8025a5a:	d505      	bpl.n	8025a68 <__sflush_r+0x44>
 8025a5c:	6863      	ldr	r3, [r4, #4]
 8025a5e:	1ad2      	subs	r2, r2, r3
 8025a60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025a62:	b10b      	cbz	r3, 8025a68 <__sflush_r+0x44>
 8025a64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8025a66:	1ad2      	subs	r2, r2, r3
 8025a68:	2300      	movs	r3, #0
 8025a6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8025a6c:	6a21      	ldr	r1, [r4, #32]
 8025a6e:	4628      	mov	r0, r5
 8025a70:	47b0      	blx	r6
 8025a72:	1c43      	adds	r3, r0, #1
 8025a74:	89a3      	ldrh	r3, [r4, #12]
 8025a76:	d106      	bne.n	8025a86 <__sflush_r+0x62>
 8025a78:	6829      	ldr	r1, [r5, #0]
 8025a7a:	291d      	cmp	r1, #29
 8025a7c:	d82b      	bhi.n	8025ad6 <__sflush_r+0xb2>
 8025a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8025b28 <__sflush_r+0x104>)
 8025a80:	40ca      	lsrs	r2, r1
 8025a82:	07d6      	lsls	r6, r2, #31
 8025a84:	d527      	bpl.n	8025ad6 <__sflush_r+0xb2>
 8025a86:	2200      	movs	r2, #0
 8025a88:	6062      	str	r2, [r4, #4]
 8025a8a:	04d9      	lsls	r1, r3, #19
 8025a8c:	6922      	ldr	r2, [r4, #16]
 8025a8e:	6022      	str	r2, [r4, #0]
 8025a90:	d504      	bpl.n	8025a9c <__sflush_r+0x78>
 8025a92:	1c42      	adds	r2, r0, #1
 8025a94:	d101      	bne.n	8025a9a <__sflush_r+0x76>
 8025a96:	682b      	ldr	r3, [r5, #0]
 8025a98:	b903      	cbnz	r3, 8025a9c <__sflush_r+0x78>
 8025a9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8025a9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025a9e:	602f      	str	r7, [r5, #0]
 8025aa0:	b1b9      	cbz	r1, 8025ad2 <__sflush_r+0xae>
 8025aa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025aa6:	4299      	cmp	r1, r3
 8025aa8:	d002      	beq.n	8025ab0 <__sflush_r+0x8c>
 8025aaa:	4628      	mov	r0, r5
 8025aac:	f7ff fb4a 	bl	8025144 <_free_r>
 8025ab0:	2300      	movs	r3, #0
 8025ab2:	6363      	str	r3, [r4, #52]	@ 0x34
 8025ab4:	e00d      	b.n	8025ad2 <__sflush_r+0xae>
 8025ab6:	2301      	movs	r3, #1
 8025ab8:	4628      	mov	r0, r5
 8025aba:	47b0      	blx	r6
 8025abc:	4602      	mov	r2, r0
 8025abe:	1c50      	adds	r0, r2, #1
 8025ac0:	d1c9      	bne.n	8025a56 <__sflush_r+0x32>
 8025ac2:	682b      	ldr	r3, [r5, #0]
 8025ac4:	2b00      	cmp	r3, #0
 8025ac6:	d0c6      	beq.n	8025a56 <__sflush_r+0x32>
 8025ac8:	2b1d      	cmp	r3, #29
 8025aca:	d001      	beq.n	8025ad0 <__sflush_r+0xac>
 8025acc:	2b16      	cmp	r3, #22
 8025ace:	d11e      	bne.n	8025b0e <__sflush_r+0xea>
 8025ad0:	602f      	str	r7, [r5, #0]
 8025ad2:	2000      	movs	r0, #0
 8025ad4:	e022      	b.n	8025b1c <__sflush_r+0xf8>
 8025ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025ada:	b21b      	sxth	r3, r3
 8025adc:	e01b      	b.n	8025b16 <__sflush_r+0xf2>
 8025ade:	690f      	ldr	r7, [r1, #16]
 8025ae0:	2f00      	cmp	r7, #0
 8025ae2:	d0f6      	beq.n	8025ad2 <__sflush_r+0xae>
 8025ae4:	0793      	lsls	r3, r2, #30
 8025ae6:	680e      	ldr	r6, [r1, #0]
 8025ae8:	bf08      	it	eq
 8025aea:	694b      	ldreq	r3, [r1, #20]
 8025aec:	600f      	str	r7, [r1, #0]
 8025aee:	bf18      	it	ne
 8025af0:	2300      	movne	r3, #0
 8025af2:	eba6 0807 	sub.w	r8, r6, r7
 8025af6:	608b      	str	r3, [r1, #8]
 8025af8:	f1b8 0f00 	cmp.w	r8, #0
 8025afc:	dde9      	ble.n	8025ad2 <__sflush_r+0xae>
 8025afe:	6a21      	ldr	r1, [r4, #32]
 8025b00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8025b02:	4643      	mov	r3, r8
 8025b04:	463a      	mov	r2, r7
 8025b06:	4628      	mov	r0, r5
 8025b08:	47b0      	blx	r6
 8025b0a:	2800      	cmp	r0, #0
 8025b0c:	dc08      	bgt.n	8025b20 <__sflush_r+0xfc>
 8025b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025b16:	81a3      	strh	r3, [r4, #12]
 8025b18:	f04f 30ff 	mov.w	r0, #4294967295
 8025b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b20:	4407      	add	r7, r0
 8025b22:	eba8 0800 	sub.w	r8, r8, r0
 8025b26:	e7e7      	b.n	8025af8 <__sflush_r+0xd4>
 8025b28:	20400001 	.word	0x20400001

08025b2c <_fflush_r>:
 8025b2c:	b538      	push	{r3, r4, r5, lr}
 8025b2e:	690b      	ldr	r3, [r1, #16]
 8025b30:	4605      	mov	r5, r0
 8025b32:	460c      	mov	r4, r1
 8025b34:	b913      	cbnz	r3, 8025b3c <_fflush_r+0x10>
 8025b36:	2500      	movs	r5, #0
 8025b38:	4628      	mov	r0, r5
 8025b3a:	bd38      	pop	{r3, r4, r5, pc}
 8025b3c:	b118      	cbz	r0, 8025b46 <_fflush_r+0x1a>
 8025b3e:	6a03      	ldr	r3, [r0, #32]
 8025b40:	b90b      	cbnz	r3, 8025b46 <_fflush_r+0x1a>
 8025b42:	f7ff f871 	bl	8024c28 <__sinit>
 8025b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b4a:	2b00      	cmp	r3, #0
 8025b4c:	d0f3      	beq.n	8025b36 <_fflush_r+0xa>
 8025b4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8025b50:	07d0      	lsls	r0, r2, #31
 8025b52:	d404      	bmi.n	8025b5e <_fflush_r+0x32>
 8025b54:	0599      	lsls	r1, r3, #22
 8025b56:	d402      	bmi.n	8025b5e <_fflush_r+0x32>
 8025b58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025b5a:	f7ff fa86 	bl	802506a <__retarget_lock_acquire_recursive>
 8025b5e:	4628      	mov	r0, r5
 8025b60:	4621      	mov	r1, r4
 8025b62:	f7ff ff5f 	bl	8025a24 <__sflush_r>
 8025b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025b68:	07da      	lsls	r2, r3, #31
 8025b6a:	4605      	mov	r5, r0
 8025b6c:	d4e4      	bmi.n	8025b38 <_fflush_r+0xc>
 8025b6e:	89a3      	ldrh	r3, [r4, #12]
 8025b70:	059b      	lsls	r3, r3, #22
 8025b72:	d4e1      	bmi.n	8025b38 <_fflush_r+0xc>
 8025b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025b76:	f7ff fa79 	bl	802506c <__retarget_lock_release_recursive>
 8025b7a:	e7dd      	b.n	8025b38 <_fflush_r+0xc>

08025b7c <__swhatbuf_r>:
 8025b7c:	b570      	push	{r4, r5, r6, lr}
 8025b7e:	460c      	mov	r4, r1
 8025b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b84:	2900      	cmp	r1, #0
 8025b86:	b096      	sub	sp, #88	@ 0x58
 8025b88:	4615      	mov	r5, r2
 8025b8a:	461e      	mov	r6, r3
 8025b8c:	da0d      	bge.n	8025baa <__swhatbuf_r+0x2e>
 8025b8e:	89a3      	ldrh	r3, [r4, #12]
 8025b90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025b94:	f04f 0100 	mov.w	r1, #0
 8025b98:	bf14      	ite	ne
 8025b9a:	2340      	movne	r3, #64	@ 0x40
 8025b9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8025ba0:	2000      	movs	r0, #0
 8025ba2:	6031      	str	r1, [r6, #0]
 8025ba4:	602b      	str	r3, [r5, #0]
 8025ba6:	b016      	add	sp, #88	@ 0x58
 8025ba8:	bd70      	pop	{r4, r5, r6, pc}
 8025baa:	466a      	mov	r2, sp
 8025bac:	f000 f862 	bl	8025c74 <_fstat_r>
 8025bb0:	2800      	cmp	r0, #0
 8025bb2:	dbec      	blt.n	8025b8e <__swhatbuf_r+0x12>
 8025bb4:	9901      	ldr	r1, [sp, #4]
 8025bb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025bba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8025bbe:	4259      	negs	r1, r3
 8025bc0:	4159      	adcs	r1, r3
 8025bc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025bc6:	e7eb      	b.n	8025ba0 <__swhatbuf_r+0x24>

08025bc8 <__smakebuf_r>:
 8025bc8:	898b      	ldrh	r3, [r1, #12]
 8025bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025bcc:	079d      	lsls	r5, r3, #30
 8025bce:	4606      	mov	r6, r0
 8025bd0:	460c      	mov	r4, r1
 8025bd2:	d507      	bpl.n	8025be4 <__smakebuf_r+0x1c>
 8025bd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8025bd8:	6023      	str	r3, [r4, #0]
 8025bda:	6123      	str	r3, [r4, #16]
 8025bdc:	2301      	movs	r3, #1
 8025bde:	6163      	str	r3, [r4, #20]
 8025be0:	b003      	add	sp, #12
 8025be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025be4:	ab01      	add	r3, sp, #4
 8025be6:	466a      	mov	r2, sp
 8025be8:	f7ff ffc8 	bl	8025b7c <__swhatbuf_r>
 8025bec:	9f00      	ldr	r7, [sp, #0]
 8025bee:	4605      	mov	r5, r0
 8025bf0:	4639      	mov	r1, r7
 8025bf2:	4630      	mov	r0, r6
 8025bf4:	f7fe fef2 	bl	80249dc <_malloc_r>
 8025bf8:	b948      	cbnz	r0, 8025c0e <__smakebuf_r+0x46>
 8025bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bfe:	059a      	lsls	r2, r3, #22
 8025c00:	d4ee      	bmi.n	8025be0 <__smakebuf_r+0x18>
 8025c02:	f023 0303 	bic.w	r3, r3, #3
 8025c06:	f043 0302 	orr.w	r3, r3, #2
 8025c0a:	81a3      	strh	r3, [r4, #12]
 8025c0c:	e7e2      	b.n	8025bd4 <__smakebuf_r+0xc>
 8025c0e:	89a3      	ldrh	r3, [r4, #12]
 8025c10:	6020      	str	r0, [r4, #0]
 8025c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025c16:	81a3      	strh	r3, [r4, #12]
 8025c18:	9b01      	ldr	r3, [sp, #4]
 8025c1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8025c1e:	b15b      	cbz	r3, 8025c38 <__smakebuf_r+0x70>
 8025c20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025c24:	4630      	mov	r0, r6
 8025c26:	f000 f837 	bl	8025c98 <_isatty_r>
 8025c2a:	b128      	cbz	r0, 8025c38 <__smakebuf_r+0x70>
 8025c2c:	89a3      	ldrh	r3, [r4, #12]
 8025c2e:	f023 0303 	bic.w	r3, r3, #3
 8025c32:	f043 0301 	orr.w	r3, r3, #1
 8025c36:	81a3      	strh	r3, [r4, #12]
 8025c38:	89a3      	ldrh	r3, [r4, #12]
 8025c3a:	431d      	orrs	r5, r3
 8025c3c:	81a5      	strh	r5, [r4, #12]
 8025c3e:	e7cf      	b.n	8025be0 <__smakebuf_r+0x18>

08025c40 <memmove>:
 8025c40:	4288      	cmp	r0, r1
 8025c42:	b510      	push	{r4, lr}
 8025c44:	eb01 0402 	add.w	r4, r1, r2
 8025c48:	d902      	bls.n	8025c50 <memmove+0x10>
 8025c4a:	4284      	cmp	r4, r0
 8025c4c:	4623      	mov	r3, r4
 8025c4e:	d807      	bhi.n	8025c60 <memmove+0x20>
 8025c50:	1e43      	subs	r3, r0, #1
 8025c52:	42a1      	cmp	r1, r4
 8025c54:	d008      	beq.n	8025c68 <memmove+0x28>
 8025c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025c5e:	e7f8      	b.n	8025c52 <memmove+0x12>
 8025c60:	4402      	add	r2, r0
 8025c62:	4601      	mov	r1, r0
 8025c64:	428a      	cmp	r2, r1
 8025c66:	d100      	bne.n	8025c6a <memmove+0x2a>
 8025c68:	bd10      	pop	{r4, pc}
 8025c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025c72:	e7f7      	b.n	8025c64 <memmove+0x24>

08025c74 <_fstat_r>:
 8025c74:	b538      	push	{r3, r4, r5, lr}
 8025c76:	4d07      	ldr	r5, [pc, #28]	@ (8025c94 <_fstat_r+0x20>)
 8025c78:	2300      	movs	r3, #0
 8025c7a:	4604      	mov	r4, r0
 8025c7c:	4608      	mov	r0, r1
 8025c7e:	4611      	mov	r1, r2
 8025c80:	602b      	str	r3, [r5, #0]
 8025c82:	f7db ff36 	bl	8001af2 <_fstat>
 8025c86:	1c43      	adds	r3, r0, #1
 8025c88:	d102      	bne.n	8025c90 <_fstat_r+0x1c>
 8025c8a:	682b      	ldr	r3, [r5, #0]
 8025c8c:	b103      	cbz	r3, 8025c90 <_fstat_r+0x1c>
 8025c8e:	6023      	str	r3, [r4, #0]
 8025c90:	bd38      	pop	{r3, r4, r5, pc}
 8025c92:	bf00      	nop
 8025c94:	240264b4 	.word	0x240264b4

08025c98 <_isatty_r>:
 8025c98:	b538      	push	{r3, r4, r5, lr}
 8025c9a:	4d06      	ldr	r5, [pc, #24]	@ (8025cb4 <_isatty_r+0x1c>)
 8025c9c:	2300      	movs	r3, #0
 8025c9e:	4604      	mov	r4, r0
 8025ca0:	4608      	mov	r0, r1
 8025ca2:	602b      	str	r3, [r5, #0]
 8025ca4:	f7db ff2a 	bl	8001afc <_isatty>
 8025ca8:	1c43      	adds	r3, r0, #1
 8025caa:	d102      	bne.n	8025cb2 <_isatty_r+0x1a>
 8025cac:	682b      	ldr	r3, [r5, #0]
 8025cae:	b103      	cbz	r3, 8025cb2 <_isatty_r+0x1a>
 8025cb0:	6023      	str	r3, [r4, #0]
 8025cb2:	bd38      	pop	{r3, r4, r5, pc}
 8025cb4:	240264b4 	.word	0x240264b4

08025cb8 <_realloc_r>:
 8025cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025cbc:	4607      	mov	r7, r0
 8025cbe:	4614      	mov	r4, r2
 8025cc0:	460d      	mov	r5, r1
 8025cc2:	b921      	cbnz	r1, 8025cce <_realloc_r+0x16>
 8025cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025cc8:	4611      	mov	r1, r2
 8025cca:	f7fe be87 	b.w	80249dc <_malloc_r>
 8025cce:	b92a      	cbnz	r2, 8025cdc <_realloc_r+0x24>
 8025cd0:	f7ff fa38 	bl	8025144 <_free_r>
 8025cd4:	4625      	mov	r5, r4
 8025cd6:	4628      	mov	r0, r5
 8025cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025cdc:	f000 f81a 	bl	8025d14 <_malloc_usable_size_r>
 8025ce0:	4284      	cmp	r4, r0
 8025ce2:	4606      	mov	r6, r0
 8025ce4:	d802      	bhi.n	8025cec <_realloc_r+0x34>
 8025ce6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8025cea:	d8f4      	bhi.n	8025cd6 <_realloc_r+0x1e>
 8025cec:	4621      	mov	r1, r4
 8025cee:	4638      	mov	r0, r7
 8025cf0:	f7fe fe74 	bl	80249dc <_malloc_r>
 8025cf4:	4680      	mov	r8, r0
 8025cf6:	b908      	cbnz	r0, 8025cfc <_realloc_r+0x44>
 8025cf8:	4645      	mov	r5, r8
 8025cfa:	e7ec      	b.n	8025cd6 <_realloc_r+0x1e>
 8025cfc:	42b4      	cmp	r4, r6
 8025cfe:	4622      	mov	r2, r4
 8025d00:	4629      	mov	r1, r5
 8025d02:	bf28      	it	cs
 8025d04:	4632      	movcs	r2, r6
 8025d06:	f7ff f9b2 	bl	802506e <memcpy>
 8025d0a:	4629      	mov	r1, r5
 8025d0c:	4638      	mov	r0, r7
 8025d0e:	f7ff fa19 	bl	8025144 <_free_r>
 8025d12:	e7f1      	b.n	8025cf8 <_realloc_r+0x40>

08025d14 <_malloc_usable_size_r>:
 8025d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025d18:	1f18      	subs	r0, r3, #4
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	bfbc      	itt	lt
 8025d1e:	580b      	ldrlt	r3, [r1, r0]
 8025d20:	18c0      	addlt	r0, r0, r3
 8025d22:	4770      	bx	lr

08025d24 <_init>:
 8025d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d26:	bf00      	nop
 8025d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d2a:	bc08      	pop	{r3}
 8025d2c:	469e      	mov	lr, r3
 8025d2e:	4770      	bx	lr

08025d30 <_fini>:
 8025d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d32:	bf00      	nop
 8025d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025d36:	bc08      	pop	{r3}
 8025d38:	469e      	mov	lr, r3
 8025d3a:	4770      	bx	lr
