
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023ce8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034a4  08023f88  08023f88  00024f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000076a  0802742c  0802742c  0002842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000003c  08027b98  08027b98  00028b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 003d5c20  90000000  90000000  00033000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000072  903d5c20  903d5c20  00408c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08027bd4  08027bd4  00408c92  2**0
                  CONTENTS
  8 .ARM          00000008  08027bd4  08027bd4  00028bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08027bdc  08027bdc  00408c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08027bdc  08027bdc  00028bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08027bf8  08027bf8  00028bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08027c00  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_MCU_Data_OutBuffer1 00004b00  24000140  08027d3c  00029140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_MCU_Data_OutBuffer0 00004b00  24004c40  0802c83c  0002dc40  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 TouchGFX_ScratchbufferA 00000100  24009740  0803133c  00032740  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 TouchGFX_ScratchbufferB 00000100  24009840  0803143c  00032840  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0001c758  24009940  0803153c  00032940  2**2
                  ALLOC
 18 ._user_heap_stack 00002000  24026098  0803153c  00033098  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  00408c92  2**0
                  CONTENTS, READONLY
 20 BufferSection 00232800  d0000000  d0000000  00409000  2**2
                  ALLOC
 21 .debug_info   000e48d0  00000000  00000000  00408cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00018d6d  00000000  00000000  004ed590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003f80  00000000  00000000  00506300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00004442  00000000  00000000  0050a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00054b09  00000000  00000000  0050e6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   00071c27  00000000  00000000  005631cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    001e97e9  00000000  00000000  005d4df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c2  00000000  00000000  007be5db  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000b300  00000000  00000000  007be6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 00029272  00000000  00000000  007c99a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 00000071  00000000  00000000  007f2c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24009940 	.word	0x24009940
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023f70 	.word	0x08023f70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24009944 	.word	0x24009944
 80002dc:	08023f70 	.word	0x08023f70

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b988 	b.w	8000a20 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	468e      	mov	lr, r1
 8000730:	4604      	mov	r4, r0
 8000732:	4688      	mov	r8, r1
 8000734:	2b00      	cmp	r3, #0
 8000736:	d14a      	bne.n	80007ce <__udivmoddi4+0xa6>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d962      	bls.n	8000804 <__udivmoddi4+0xdc>
 800073e:	fab2 f682 	clz	r6, r2
 8000742:	b14e      	cbz	r6, 8000758 <__udivmoddi4+0x30>
 8000744:	f1c6 0320 	rsb	r3, r6, #32
 8000748:	fa01 f806 	lsl.w	r8, r1, r6
 800074c:	fa20 f303 	lsr.w	r3, r0, r3
 8000750:	40b7      	lsls	r7, r6
 8000752:	ea43 0808 	orr.w	r8, r3, r8
 8000756:	40b4      	lsls	r4, r6
 8000758:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800075c:	fa1f fc87 	uxth.w	ip, r7
 8000760:	fbb8 f1fe 	udiv	r1, r8, lr
 8000764:	0c23      	lsrs	r3, r4, #16
 8000766:	fb0e 8811 	mls	r8, lr, r1, r8
 800076a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800076e:	fb01 f20c 	mul.w	r2, r1, ip
 8000772:	429a      	cmp	r2, r3
 8000774:	d909      	bls.n	800078a <__udivmoddi4+0x62>
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	f101 30ff 	add.w	r0, r1, #4294967295
 800077c:	f080 80ea 	bcs.w	8000954 <__udivmoddi4+0x22c>
 8000780:	429a      	cmp	r2, r3
 8000782:	f240 80e7 	bls.w	8000954 <__udivmoddi4+0x22c>
 8000786:	3902      	subs	r1, #2
 8000788:	443b      	add	r3, r7
 800078a:	1a9a      	subs	r2, r3, r2
 800078c:	b2a3      	uxth	r3, r4
 800078e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000792:	fb0e 2210 	mls	r2, lr, r0, r2
 8000796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800079a:	fb00 fc0c 	mul.w	ip, r0, ip
 800079e:	459c      	cmp	ip, r3
 80007a0:	d909      	bls.n	80007b6 <__udivmoddi4+0x8e>
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007a8:	f080 80d6 	bcs.w	8000958 <__udivmoddi4+0x230>
 80007ac:	459c      	cmp	ip, r3
 80007ae:	f240 80d3 	bls.w	8000958 <__udivmoddi4+0x230>
 80007b2:	443b      	add	r3, r7
 80007b4:	3802      	subs	r0, #2
 80007b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ba:	eba3 030c 	sub.w	r3, r3, ip
 80007be:	2100      	movs	r1, #0
 80007c0:	b11d      	cbz	r5, 80007ca <__udivmoddi4+0xa2>
 80007c2:	40f3      	lsrs	r3, r6
 80007c4:	2200      	movs	r2, #0
 80007c6:	e9c5 3200 	strd	r3, r2, [r5]
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d905      	bls.n	80007de <__udivmoddi4+0xb6>
 80007d2:	b10d      	cbz	r5, 80007d8 <__udivmoddi4+0xb0>
 80007d4:	e9c5 0100 	strd	r0, r1, [r5]
 80007d8:	2100      	movs	r1, #0
 80007da:	4608      	mov	r0, r1
 80007dc:	e7f5      	b.n	80007ca <__udivmoddi4+0xa2>
 80007de:	fab3 f183 	clz	r1, r3
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d146      	bne.n	8000874 <__udivmoddi4+0x14c>
 80007e6:	4573      	cmp	r3, lr
 80007e8:	d302      	bcc.n	80007f0 <__udivmoddi4+0xc8>
 80007ea:	4282      	cmp	r2, r0
 80007ec:	f200 8105 	bhi.w	80009fa <__udivmoddi4+0x2d2>
 80007f0:	1a84      	subs	r4, r0, r2
 80007f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007f6:	2001      	movs	r0, #1
 80007f8:	4690      	mov	r8, r2
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d0e5      	beq.n	80007ca <__udivmoddi4+0xa2>
 80007fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000802:	e7e2      	b.n	80007ca <__udivmoddi4+0xa2>
 8000804:	2a00      	cmp	r2, #0
 8000806:	f000 8090 	beq.w	800092a <__udivmoddi4+0x202>
 800080a:	fab2 f682 	clz	r6, r2
 800080e:	2e00      	cmp	r6, #0
 8000810:	f040 80a4 	bne.w	800095c <__udivmoddi4+0x234>
 8000814:	1a8a      	subs	r2, r1, r2
 8000816:	0c03      	lsrs	r3, r0, #16
 8000818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081c:	b280      	uxth	r0, r0
 800081e:	b2bc      	uxth	r4, r7
 8000820:	2101      	movs	r1, #1
 8000822:	fbb2 fcfe 	udiv	ip, r2, lr
 8000826:	fb0e 221c 	mls	r2, lr, ip, r2
 800082a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800082e:	fb04 f20c 	mul.w	r2, r4, ip
 8000832:	429a      	cmp	r2, r3
 8000834:	d907      	bls.n	8000846 <__udivmoddi4+0x11e>
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	f10c 38ff 	add.w	r8, ip, #4294967295
 800083c:	d202      	bcs.n	8000844 <__udivmoddi4+0x11c>
 800083e:	429a      	cmp	r2, r3
 8000840:	f200 80e0 	bhi.w	8000a04 <__udivmoddi4+0x2dc>
 8000844:	46c4      	mov	ip, r8
 8000846:	1a9b      	subs	r3, r3, r2
 8000848:	fbb3 f2fe 	udiv	r2, r3, lr
 800084c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000850:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000854:	fb02 f404 	mul.w	r4, r2, r4
 8000858:	429c      	cmp	r4, r3
 800085a:	d907      	bls.n	800086c <__udivmoddi4+0x144>
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000862:	d202      	bcs.n	800086a <__udivmoddi4+0x142>
 8000864:	429c      	cmp	r4, r3
 8000866:	f200 80ca 	bhi.w	80009fe <__udivmoddi4+0x2d6>
 800086a:	4602      	mov	r2, r0
 800086c:	1b1b      	subs	r3, r3, r4
 800086e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000872:	e7a5      	b.n	80007c0 <__udivmoddi4+0x98>
 8000874:	f1c1 0620 	rsb	r6, r1, #32
 8000878:	408b      	lsls	r3, r1
 800087a:	fa22 f706 	lsr.w	r7, r2, r6
 800087e:	431f      	orrs	r7, r3
 8000880:	fa0e f401 	lsl.w	r4, lr, r1
 8000884:	fa20 f306 	lsr.w	r3, r0, r6
 8000888:	fa2e fe06 	lsr.w	lr, lr, r6
 800088c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000890:	4323      	orrs	r3, r4
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	fa1f fc87 	uxth.w	ip, r7
 800089a:	fbbe f0f9 	udiv	r0, lr, r9
 800089e:	0c1c      	lsrs	r4, r3, #16
 80008a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008ac:	45a6      	cmp	lr, r4
 80008ae:	fa02 f201 	lsl.w	r2, r2, r1
 80008b2:	d909      	bls.n	80008c8 <__udivmoddi4+0x1a0>
 80008b4:	193c      	adds	r4, r7, r4
 80008b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ba:	f080 809c 	bcs.w	80009f6 <__udivmoddi4+0x2ce>
 80008be:	45a6      	cmp	lr, r4
 80008c0:	f240 8099 	bls.w	80009f6 <__udivmoddi4+0x2ce>
 80008c4:	3802      	subs	r0, #2
 80008c6:	443c      	add	r4, r7
 80008c8:	eba4 040e 	sub.w	r4, r4, lr
 80008cc:	fa1f fe83 	uxth.w	lr, r3
 80008d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008d4:	fb09 4413 	mls	r4, r9, r3, r4
 80008d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e0:	45a4      	cmp	ip, r4
 80008e2:	d908      	bls.n	80008f6 <__udivmoddi4+0x1ce>
 80008e4:	193c      	adds	r4, r7, r4
 80008e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ea:	f080 8082 	bcs.w	80009f2 <__udivmoddi4+0x2ca>
 80008ee:	45a4      	cmp	ip, r4
 80008f0:	d97f      	bls.n	80009f2 <__udivmoddi4+0x2ca>
 80008f2:	3b02      	subs	r3, #2
 80008f4:	443c      	add	r4, r7
 80008f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008fa:	eba4 040c 	sub.w	r4, r4, ip
 80008fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000902:	4564      	cmp	r4, ip
 8000904:	4673      	mov	r3, lr
 8000906:	46e1      	mov	r9, ip
 8000908:	d362      	bcc.n	80009d0 <__udivmoddi4+0x2a8>
 800090a:	d05f      	beq.n	80009cc <__udivmoddi4+0x2a4>
 800090c:	b15d      	cbz	r5, 8000926 <__udivmoddi4+0x1fe>
 800090e:	ebb8 0203 	subs.w	r2, r8, r3
 8000912:	eb64 0409 	sbc.w	r4, r4, r9
 8000916:	fa04 f606 	lsl.w	r6, r4, r6
 800091a:	fa22 f301 	lsr.w	r3, r2, r1
 800091e:	431e      	orrs	r6, r3
 8000920:	40cc      	lsrs	r4, r1
 8000922:	e9c5 6400 	strd	r6, r4, [r5]
 8000926:	2100      	movs	r1, #0
 8000928:	e74f      	b.n	80007ca <__udivmoddi4+0xa2>
 800092a:	fbb1 fcf2 	udiv	ip, r1, r2
 800092e:	0c01      	lsrs	r1, r0, #16
 8000930:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000934:	b280      	uxth	r0, r0
 8000936:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800093a:	463b      	mov	r3, r7
 800093c:	4638      	mov	r0, r7
 800093e:	463c      	mov	r4, r7
 8000940:	46b8      	mov	r8, r7
 8000942:	46be      	mov	lr, r7
 8000944:	2620      	movs	r6, #32
 8000946:	fbb1 f1f7 	udiv	r1, r1, r7
 800094a:	eba2 0208 	sub.w	r2, r2, r8
 800094e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000952:	e766      	b.n	8000822 <__udivmoddi4+0xfa>
 8000954:	4601      	mov	r1, r0
 8000956:	e718      	b.n	800078a <__udivmoddi4+0x62>
 8000958:	4610      	mov	r0, r2
 800095a:	e72c      	b.n	80007b6 <__udivmoddi4+0x8e>
 800095c:	f1c6 0220 	rsb	r2, r6, #32
 8000960:	fa2e f302 	lsr.w	r3, lr, r2
 8000964:	40b7      	lsls	r7, r6
 8000966:	40b1      	lsls	r1, r6
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000970:	430a      	orrs	r2, r1
 8000972:	fbb3 f8fe 	udiv	r8, r3, lr
 8000976:	b2bc      	uxth	r4, r7
 8000978:	fb0e 3318 	mls	r3, lr, r8, r3
 800097c:	0c11      	lsrs	r1, r2, #16
 800097e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000982:	fb08 f904 	mul.w	r9, r8, r4
 8000986:	40b0      	lsls	r0, r6
 8000988:	4589      	cmp	r9, r1
 800098a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800098e:	b280      	uxth	r0, r0
 8000990:	d93e      	bls.n	8000a10 <__udivmoddi4+0x2e8>
 8000992:	1879      	adds	r1, r7, r1
 8000994:	f108 3cff 	add.w	ip, r8, #4294967295
 8000998:	d201      	bcs.n	800099e <__udivmoddi4+0x276>
 800099a:	4589      	cmp	r9, r1
 800099c:	d81f      	bhi.n	80009de <__udivmoddi4+0x2b6>
 800099e:	eba1 0109 	sub.w	r1, r1, r9
 80009a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009a6:	fb09 f804 	mul.w	r8, r9, r4
 80009aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009ae:	b292      	uxth	r2, r2
 80009b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009b4:	4542      	cmp	r2, r8
 80009b6:	d229      	bcs.n	8000a0c <__udivmoddi4+0x2e4>
 80009b8:	18ba      	adds	r2, r7, r2
 80009ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80009be:	d2c4      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c0:	4542      	cmp	r2, r8
 80009c2:	d2c2      	bcs.n	800094a <__udivmoddi4+0x222>
 80009c4:	f1a9 0102 	sub.w	r1, r9, #2
 80009c8:	443a      	add	r2, r7
 80009ca:	e7be      	b.n	800094a <__udivmoddi4+0x222>
 80009cc:	45f0      	cmp	r8, lr
 80009ce:	d29d      	bcs.n	800090c <__udivmoddi4+0x1e4>
 80009d0:	ebbe 0302 	subs.w	r3, lr, r2
 80009d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009d8:	3801      	subs	r0, #1
 80009da:	46e1      	mov	r9, ip
 80009dc:	e796      	b.n	800090c <__udivmoddi4+0x1e4>
 80009de:	eba7 0909 	sub.w	r9, r7, r9
 80009e2:	4449      	add	r1, r9
 80009e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ec:	fb09 f804 	mul.w	r8, r9, r4
 80009f0:	e7db      	b.n	80009aa <__udivmoddi4+0x282>
 80009f2:	4673      	mov	r3, lr
 80009f4:	e77f      	b.n	80008f6 <__udivmoddi4+0x1ce>
 80009f6:	4650      	mov	r0, sl
 80009f8:	e766      	b.n	80008c8 <__udivmoddi4+0x1a0>
 80009fa:	4608      	mov	r0, r1
 80009fc:	e6fd      	b.n	80007fa <__udivmoddi4+0xd2>
 80009fe:	443b      	add	r3, r7
 8000a00:	3a02      	subs	r2, #2
 8000a02:	e733      	b.n	800086c <__udivmoddi4+0x144>
 8000a04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a08:	443b      	add	r3, r7
 8000a0a:	e71c      	b.n	8000846 <__udivmoddi4+0x11e>
 8000a0c:	4649      	mov	r1, r9
 8000a0e:	e79c      	b.n	800094a <__udivmoddi4+0x222>
 8000a10:	eba1 0109 	sub.w	r1, r1, r9
 8000a14:	46c4      	mov	ip, r8
 8000a16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a1a:	fb09 f804 	mul.w	r8, r9, r4
 8000a1e:	e7c4      	b.n	80009aa <__udivmoddi4+0x282>

08000a20 <__aeabi_idiv0>:
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000a24:	4901      	ldr	r1, [pc, #4]	@ (8000a2c <vApplicationIdleHook+0x8>)
 8000a26:	2000      	movs	r0, #0
 8000a28:	f00d bba8 	b.w	800e17c <vTaskSetApplicationTaskTag>
 8000a2c:	08002589 	.word	0x08002589

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a32:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a34:	224c      	movs	r2, #76	@ 0x4c
 8000a36:	2100      	movs	r1, #0
 8000a38:	a809      	add	r0, sp, #36	@ 0x24
 8000a3a:	f022 fd05 	bl	8023448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3e:	2220      	movs	r2, #32
 8000a40:	2100      	movs	r1, #0
 8000a42:	a801      	add	r0, sp, #4
 8000a44:	f022 fd00 	bl	8023448 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f009 f861 	bl	8009b10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <SystemClock_Config+0xbc>)
 8000a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a56:	f022 0201 	bic.w	r2, r2, #1
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <SystemClock_Config+0xc0>)
 8000a66:	699a      	ldr	r2, [r3, #24]
 8000a68:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000a6c:	619a      	str	r2, [r3, #24]
 8000a6e:	699a      	ldr	r2, [r3, #24]
 8000a70:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	0491      	lsls	r1, r2, #18
 8000a7c:	d5fc      	bpl.n	8000a78 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a82:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a84:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a86:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8a:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8e:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a9a:	23a0      	movs	r3, #160	@ 0xa0
 8000a9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa0:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa6:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aaa:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aae:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f009 fb28 	bl	800a104 <HAL_RCC_OscConfig>
 8000ab4:	b108      	cbz	r0, 8000aba <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aba:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000abc:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ac6:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000acc:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ad0:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad4:	f009 feae 	bl	800a834 <HAL_RCC_ClockConfig>
 8000ad8:	4601      	mov	r1, r0
 8000ada:	b108      	cbz	r0, 8000ae0 <SystemClock_Config+0xb0>
 8000adc:	b672      	cpsid	i
  while (1)
 8000ade:	e7fe      	b.n	8000ade <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ae0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ae4:	f009 fdb6 	bl	800a654 <HAL_RCC_MCOConfig>
}
 8000ae8:	b01d      	add	sp, #116	@ 0x74
 8000aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aec:	58000400 	.word	0x58000400
 8000af0:	58024800 	.word	0x58024800

08000af4 <main>:
{
 8000af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000af8:	b0bb      	sub	sp, #236	@ 0xec
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000afa:	2210      	movs	r2, #16
 8000afc:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000afe:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b00:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b02:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b04:	f022 fca0 	bl	8023448 <memset>
  HAL_MPU_Disable();
 8000b08:	f006 fa0a 	bl	8006f20 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b0c:	f04f 4c10 	mov.w	ip, #2415919104	@ 0x90000000
 8000b10:	4bbe      	ldr	r3, [pc, #760]	@ (8000e0c <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b12:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b14:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b18:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b1a:	e9cd c32e 	strd	ip, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b1e:	f006 fa1d 	bl	8006f5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b22:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b24:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b26:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b2a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b2e:	f006 fa15 	bl	8006f5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b32:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b34:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b36:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b3a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b3e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000b42:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000b44:	2318      	movs	r3, #24
 8000b46:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b4a:	f006 fa07 	bl	8006f5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b4e:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b50:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b52:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b56:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000b5a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b5c:	2312      	movs	r3, #18
 8000b5e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b68:	f006 f9f8 	bl	8006f5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b70:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b72:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b76:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b78:	2311      	movs	r3, #17
 8000b7a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b7e:	f006 f9ed 	bl	8006f5c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b82:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b84:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b86:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b8a:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000b8e:	4ba0      	ldr	r3, [pc, #640]	@ (8000e10 <main+0x31c>)
 8000b90:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000b92:	230e      	movs	r3, #14
 8000b94:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b98:	f006 f9e0 	bl	8006f5c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f006 f9cd 	bl	8006f3c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ba2:	4b9c      	ldr	r3, [pc, #624]	@ (8000e14 <main+0x320>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000baa:	d111      	bne.n	8000bd0 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bb0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000bb4:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bbc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000bc6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bcc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000bd0:	4a90      	ldr	r2, [pc, #576]	@ (8000e14 <main+0x320>)
 8000bd2:	6953      	ldr	r3, [r2, #20]
 8000bd4:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000bd8:	d123      	bne.n	8000c22 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bda:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bde:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000be2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000be6:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bea:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bee:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000bf2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bf4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bf8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bfa:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bfe:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c00:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000c04:	d2f9      	bcs.n	8000bfa <main+0x106>
    } while(sets-- != 0U);
 8000c06:	3b20      	subs	r3, #32
 8000c08:	f113 0f20 	cmn.w	r3, #32
 8000c0c:	d1f2      	bne.n	8000bf4 <main+0x100>
 8000c0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c12:	6953      	ldr	r3, [r2, #20]
 8000c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c1e:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c26:	4d7c      	ldr	r5, [pc, #496]	@ (8000e18 <main+0x324>)
 8000c28:	682c      	ldr	r4, [r5, #0]
 8000c2a:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000c2e:	f000 836a 	beq.w	8001306 <main+0x812>
 8000c32:	3b01      	subs	r3, #1
 8000c34:	d2f8      	bcs.n	8000c28 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c36:	b672      	cpsid	i
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <main+0x144>
 8000c3a:	b672      	cpsid	i
 8000c3c:	e7fe      	b.n	8000c3c <main+0x148>
  hqspi.Instance = QUADSPI;
 8000c3e:	4877      	ldr	r0, [pc, #476]	@ (8000e1c <main+0x328>)
 8000c40:	4a77      	ldr	r2, [pc, #476]	@ (8000e20 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c42:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c44:	f8c0 a020 	str.w	sl, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000c48:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c4c:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c50:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c54:	f009 f878 	bl	8009d48 <HAL_QSPI_Init>
 8000c58:	b108      	cbz	r0, 8000c5e <main+0x16a>
 8000c5a:	b672      	cpsid	i
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <main+0x168>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c5e:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c62:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000c64:	f88d a0b6 	strb.w	sl, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c68:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c6c:	f005 fc38 	bl	80064e0 <BSP_QSPI_Init>
 8000c70:	b108      	cbz	r0, 8000c76 <main+0x182>
 8000c72:	b672      	cpsid	i
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x180>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c76:	f005 fbdf 	bl	8006438 <BSP_QSPI_EnableMemoryMappedMode>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	b108      	cbz	r0, 8000c82 <main+0x18e>
 8000c7e:	b672      	cpsid	i
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <main+0x18c>
  hdma2d.Instance = DMA2D;
 8000c82:	4868      	ldr	r0, [pc, #416]	@ (8000e24 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c84:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c88:	4e67      	ldr	r6, [pc, #412]	@ (8000e28 <main+0x334>)
  hdma2d.Init.OutputOffset = 0;
 8000c8a:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c8e:	e9c0 6200 	strd	r6, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c92:	f006 f9f0 	bl	8007076 <HAL_DMA2D_Init>
 8000c96:	4606      	mov	r6, r0
 8000c98:	b108      	cbz	r0, 8000c9e <main+0x1aa>
 8000c9a:	b672      	cpsid	i
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	4649      	mov	r1, r9
 8000ca2:	4862      	ldr	r0, [pc, #392]	@ (8000e2c <main+0x338>)
 8000ca4:	f007 f8ca 	bl	8007e3c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000ca8:	2014      	movs	r0, #20
 8000caa:	f006 f8bd 	bl	8006e28 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000cae:	462a      	mov	r2, r5
 8000cb0:	4649      	mov	r1, r9
 8000cb2:	485e      	ldr	r0, [pc, #376]	@ (8000e2c <main+0x338>)
 8000cb4:	f007 f8c2 	bl	8007e3c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f006 f8b5 	bl	8006e28 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000cbe:	2224      	movs	r2, #36	@ 0x24
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	a817      	add	r0, sp, #92	@ 0x5c
 8000cc4:	f022 fbc0 	bl	8023448 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000cc8:	2218      	movs	r2, #24
 8000cca:	4631      	mov	r1, r6
 8000ccc:	a811      	add	r0, sp, #68	@ 0x44
 8000cce:	f022 fbbb 	bl	8023448 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000cd2:	2234      	movs	r2, #52	@ 0x34
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	a82d      	add	r0, sp, #180	@ 0xb4
 8000cd8:	f022 fbb6 	bl	8023448 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000cdc:	4631      	mov	r1, r6
 8000cde:	222c      	movs	r2, #44	@ 0x2c
 8000ce0:	a820      	add	r0, sp, #128	@ 0x80
 8000ce2:	f022 fbb1 	bl	8023448 <memset>
  hdsi.Instance = DSI;
 8000ce6:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8000e30 <main+0x33c>
 8000cea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cee:	a90e      	add	r1, sp, #56	@ 0x38
 8000cf0:	4640      	mov	r0, r8
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000cf2:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000cf4:	e9c8 3600 	strd	r3, r6, [r8]
  PLLInit.PLLNDIV = 119;
 8000cf8:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000cfa:	e9c8 4502 	strd	r4, r5, [r8, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000cfe:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d02:	f006 fb05 	bl	8007310 <HAL_DSI_Init>
 8000d06:	b108      	cbz	r0, 8000d0c <main+0x218>
 8000d08:	b672      	cpsid	i
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <main+0x216>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d0c:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d10:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d14:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d18:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000d1c:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d1e:	a917      	add	r1, sp, #92	@ 0x5c
 8000d20:	4640      	mov	r0, r8
 8000d22:	f006 fd61 	bl	80077e8 <HAL_DSI_ConfigHostTimeouts>
 8000d26:	b108      	cbz	r0, 8000d2c <main+0x238>
 8000d28:	b672      	cpsid	i
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <main+0x236>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d2c:	2321      	movs	r3, #33	@ 0x21
 8000d2e:	241c      	movs	r4, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d30:	250f      	movs	r5, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d32:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d34:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d38:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000d3a:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d3e:	4640      	mov	r0, r8
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d40:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d44:	f006 fd13 	bl	800776e <HAL_DSI_ConfigPhyTimer>
 8000d48:	b108      	cbz	r0, 8000d4e <main+0x25a>
 8000d4a:	b672      	cpsid	i
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <main+0x258>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d4e:	2104      	movs	r1, #4
 8000d50:	4837      	ldr	r0, [pc, #220]	@ (8000e30 <main+0x33c>)
 8000d52:	f006 fcfb 	bl	800774c <HAL_DSI_ConfigFlowControl>
 8000d56:	b108      	cbz	r0, 8000d5c <main+0x268>
 8000d58:	b672      	cpsid	i
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <main+0x266>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d5c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d60:	4833      	ldr	r0, [pc, #204]	@ (8000e30 <main+0x33c>)
 8000d62:	f006 feca 	bl	8007afa <HAL_DSI_SetLowPowerRXFilter>
 8000d66:	4601      	mov	r1, r0
 8000d68:	b108      	cbz	r0, 8000d6e <main+0x27a>
 8000d6a:	b672      	cpsid	i
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <main+0x278>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d6e:	4830      	ldr	r0, [pc, #192]	@ (8000e30 <main+0x33c>)
 8000d70:	f006 fa6b 	bl	800724a <HAL_DSI_ConfigErrorMonitor>
 8000d74:	b108      	cbz	r0, 8000d7a <main+0x286>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <main+0x284>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d7e:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d82:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d86:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d8e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d92:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d96:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d9a:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000da2:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000da6:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dae:	e9cd b331 	strd	fp, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db6:	e9cd 2333 	strd	r2, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000dba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000dbe:	e9cd 1335 	strd	r1, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000dc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000dc6:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000dc8:	e9cd 0337 	strd	r0, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000dcc:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <main+0x33c>)
 8000dce:	f006 fc89 	bl	80076e4 <HAL_DSI_ConfigCommand>
 8000dd2:	b108      	cbz	r0, 8000dd8 <main+0x2e4>
 8000dd4:	b672      	cpsid	i
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <main+0x2e2>
  CmdCfg.CommandSize = 400;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000dde:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000de0:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000de2:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000de4:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000de6:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000dea:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dec:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000df0:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000df2:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000df6:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000dfa:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <main+0x33c>)
 8000e00:	f006 fbfe 	bl	8007600 <HAL_DSI_ConfigAdaptedCommandMode>
 8000e04:	4601      	mov	r1, r0
 8000e06:	b1a8      	cbz	r0, 8000e34 <main+0x340>
 8000e08:	b672      	cpsid	i
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <main+0x316>
 8000e0c:	0300001b 	.word	0x0300001b
 8000e10:	10040000 	.word	0x10040000
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	24009af0 	.word	0x24009af0
 8000e20:	52005000 	.word	0x52005000
 8000e24:	24009d30 	.word	0x24009d30
 8000e28:	52001000 	.word	0x52001000
 8000e2c:	58021800 	.word	0x58021800
 8000e30:	24009d14 	.word	0x24009d14
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e34:	488f      	ldr	r0, [pc, #572]	@ (8001074 <main+0x580>)
 8000e36:	f006 fbd2 	bl	80075de <HAL_DSI_SetGenericVCID>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	b108      	cbz	r0, 8000e42 <main+0x34e>
 8000e3e:	b672      	cpsid	i
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e42:	2234      	movs	r2, #52	@ 0x34
 8000e44:	4601      	mov	r1, r0
 8000e46:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000e48:	4d8b      	ldr	r5, [pc, #556]	@ (8001078 <main+0x584>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e4a:	f022 fafd 	bl	8023448 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e4e:	f8df c27c 	ldr.w	ip, [pc, #636]	@ 80010cc <main+0x5d8>
 8000e52:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000e56:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000e5a:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e5e:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000e60:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000e62:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e66:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000e6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e6e:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e72:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000e76:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e7a:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000e7e:	f240 1893 	movw	r8, #403	@ 0x193
 8000e82:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000e86:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000e8a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e8e:	f008 fb35 	bl	80094fc <HAL_LTDC_Init>
 8000e92:	4602      	mov	r2, r0
 8000e94:	b108      	cbz	r0, 8000e9a <main+0x3a6>
 8000e96:	b672      	cpsid	i
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000e9a:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000e9c:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000e9e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000ea2:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000ea6:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000eaa:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000eac:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000eb0:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000eb4:	2107      	movs	r1, #7
 8000eb6:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000eba:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000ebe:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ec2:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000ec4:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ec8:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000eca:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ece:	f008 fbca 	bl	8009666 <HAL_LTDC_ConfigLayer>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	b108      	cbz	r0, 8000eda <main+0x3e6>
 8000ed6:	b672      	cpsid	i
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000eda:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000edc:	4865      	ldr	r0, [pc, #404]	@ (8001074 <main+0x580>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000ede:	6993      	ldr	r3, [r2, #24]
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000ee6:	f006 fce5 	bl	80078b4 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000eea:	4964      	ldr	r1, [pc, #400]	@ (800107c <main+0x588>)
  IOCtx.GetTick     = BSP_GetTick;
 8000eec:	4b64      	ldr	r3, [pc, #400]	@ (8001080 <main+0x58c>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000eee:	4865      	ldr	r0, [pc, #404]	@ (8001084 <main+0x590>)
  IOCtx.GetTick     = BSP_GetTick;
 8000ef0:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000ef2:	4b65      	ldr	r3, [pc, #404]	@ (8001088 <main+0x594>)
  IOCtx.Address     = 0;
 8000ef4:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000ef6:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000ef8:	4b64      	ldr	r3, [pc, #400]	@ (800108c <main+0x598>)
 8000efa:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000efc:	f005 f892 	bl	8006024 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000f00:	4632      	mov	r2, r6
 8000f02:	4621      	mov	r1, r4
 8000f04:	485f      	ldr	r0, [pc, #380]	@ (8001084 <main+0x590>)
 8000f06:	f004 fcfd 	bl	8005904 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000f0a:	2328      	movs	r3, #40	@ 0x28
 8000f0c:	2215      	movs	r2, #21
 8000f0e:	4621      	mov	r1, r4
 8000f10:	4858      	ldr	r0, [pc, #352]	@ (8001074 <main+0x580>)
 8000f12:	9400      	str	r4, [sp, #0]
 8000f14:	f006 fd01 	bl	800791a <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f18:	a92d      	add	r1, sp, #180	@ 0xb4
 8000f1a:	4856      	ldr	r0, [pc, #344]	@ (8001074 <main+0x580>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000f1c:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000f1e:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000f22:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000f26:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000f2a:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000f2e:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f32:	f006 fbd7 	bl	80076e4 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000f36:	4622      	mov	r2, r4
 8000f38:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f008 fbbf 	bl	80096c0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000f42:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000f44:	4852      	ldr	r0, [pc, #328]	@ (8001090 <main+0x59c>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000f46:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f48:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000f50:	4b50      	ldr	r3, [pc, #320]	@ (8001094 <main+0x5a0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f52:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000f54:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f56:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f5a:	f006 f82b 	bl	8006fb4 <HAL_CRC_Init>
 8000f5e:	b108      	cbz	r0, 8000f64 <main+0x470>
 8000f60:	b672      	cpsid	i
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000f64:	484c      	ldr	r0, [pc, #304]	@ (8001098 <main+0x5a4>)
 8000f66:	4b4d      	ldr	r3, [pc, #308]	@ (800109c <main+0x5a8>)
 8000f68:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f6a:	f007 fcc1 	bl	80088f0 <HAL_JPEG_Init>
 8000f6e:	b108      	cbz	r0, 8000f74 <main+0x480>
 8000f70:	b672      	cpsid	i
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <main+0x47e>
  huart2.Instance = USART2;
 8000f74:	4c4a      	ldr	r4, [pc, #296]	@ (80010a0 <main+0x5ac>)
  huart2.Init.BaudRate = 115200;
 8000f76:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
 8000f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80010a4 <main+0x5b0>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	250c      	movs	r5, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000f80:	e9c4 3600 	strd	r3, r6, [r4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f84:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f86:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	6123      	str	r3, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8c:	e9c4 5305 	strd	r5, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f90:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f94:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f98:	f00b fa47 	bl	800c42a <HAL_UART_Init>
 8000f9c:	4601      	mov	r1, r0
 8000f9e:	b108      	cbz	r0, 8000fa4 <main+0x4b0>
 8000fa0:	b672      	cpsid	i
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f00b faae 	bl	800c506 <HAL_UARTEx_SetTxFifoThreshold>
 8000faa:	4601      	mov	r1, r0
 8000fac:	b108      	cbz	r0, 8000fb2 <main+0x4be>
 8000fae:	b672      	cpsid	i
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f00b fac7 	bl	800c546 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb8:	b108      	cbz	r0, 8000fbe <main+0x4ca>
 8000fba:	b672      	cpsid	i
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	f00b fa86 	bl	800c4d0 <HAL_UARTEx_DisableFifoMode>
 8000fc4:	b108      	cbz	r0, 8000fca <main+0x4d6>
 8000fc6:	b672      	cpsid	i
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <main+0x4d4>
  huart1.Instance = USART1;
 8000fca:	4c37      	ldr	r4, [pc, #220]	@ (80010a8 <main+0x5b4>)
 8000fcc:	4b37      	ldr	r3, [pc, #220]	@ (80010ac <main+0x5b8>)
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fce:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	e9c4 0504 	strd	r0, r5, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe0:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8000fe2:	e9c4 3600 	strd	r3, r6, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe6:	f00b fa20 	bl	800c42a <HAL_UART_Init>
 8000fea:	4601      	mov	r1, r0
 8000fec:	b108      	cbz	r0, 8000ff2 <main+0x4fe>
 8000fee:	b672      	cpsid	i
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <main+0x4fc>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f00b fa87 	bl	800c506 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff8:	4601      	mov	r1, r0
 8000ffa:	b108      	cbz	r0, 8001000 <main+0x50c>
 8000ffc:	b672      	cpsid	i
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <main+0x50a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001000:	4620      	mov	r0, r4
 8001002:	f00b faa0 	bl	800c546 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	b108      	cbz	r0, 800100c <main+0x518>
 8001008:	b672      	cpsid	i
  while (1)
 800100a:	e7fe      	b.n	800100a <main+0x516>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800100c:	4620      	mov	r0, r4
 800100e:	f00b fa5f 	bl	800c4d0 <HAL_UARTEx_DisableFifoMode>
 8001012:	4605      	mov	r5, r0
 8001014:	b108      	cbz	r0, 800101a <main+0x526>
 8001016:	b672      	cpsid	i
  while (1)
 8001018:	e7fe      	b.n	8001018 <main+0x524>
  MX_TouchGFX_Init();
 800101a:	f000 fe47 	bl	8001cac <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 800101e:	f000 fe44 	bl	8001caa <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8001022:	f00b fb53 	bl	800c6cc <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001026:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <main+0x5bc>)
 8001028:	4629      	mov	r1, r5
 800102a:	4822      	ldr	r0, [pc, #136]	@ (80010b4 <main+0x5c0>)
 800102c:	f00b fb7a 	bl	800c724 <osThreadNew>
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <main+0x5c4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001032:	4a22      	ldr	r2, [pc, #136]	@ (80010bc <main+0x5c8>)
 8001034:	4629      	mov	r1, r5
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001036:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001038:	4821      	ldr	r0, [pc, #132]	@ (80010c0 <main+0x5cc>)
 800103a:	f00b fb73 	bl	800c724 <osThreadNew>
 800103e:	4b21      	ldr	r3, [pc, #132]	@ (80010c4 <main+0x5d0>)
  HAL_UART_Transmit(&huart1, (uint8_t *)"SQ", 2, HAL_MAX_DELAY);
 8001040:	2202      	movs	r2, #2
 8001042:	4921      	ldr	r1, [pc, #132]	@ (80010c8 <main+0x5d4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001044:	6018      	str	r0, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)"SQ", 2, HAL_MAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	4620      	mov	r0, r4
 800104c:	f00b f93d 	bl	800c2ca <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)"SQ", 2, HAL_MAX_DELAY);
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2202      	movs	r2, #2
 8001056:	491c      	ldr	r1, [pc, #112]	@ (80010c8 <main+0x5d4>)
 8001058:	4620      	mov	r0, r4
 800105a:	f00b f936 	bl	800c2ca <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)"SQ", 2, HAL_MAX_DELAY);
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	2202      	movs	r2, #2
 8001064:	4918      	ldr	r1, [pc, #96]	@ (80010c8 <main+0x5d4>)
 8001066:	4620      	mov	r0, r4
 8001068:	f00b f92f 	bl	800c2ca <HAL_UART_Transmit>
  osKernelStart();
 800106c:	f00b fb40 	bl	800c6f0 <osKernelStart>
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0x57c>
 8001072:	bf00      	nop
 8001074:	24009d14 	.word	0x24009d14
 8001078:	24009b3c 	.word	0x24009b3c
 800107c:	2400995c 	.word	0x2400995c
 8001080:	08006409 	.word	0x08006409
 8001084:	2400996c 	.word	0x2400996c
 8001088:	08002281 	.word	0x08002281
 800108c:	080022b9 	.word	0x080022b9
 8001090:	24009d98 	.word	0x24009d98
 8001094:	58024c00 	.word	0x58024c00
 8001098:	24009cbc 	.word	0x24009cbc
 800109c:	52003000 	.word	0x52003000
 80010a0:	240099c8 	.word	0x240099c8
 80010a4:	40004400 	.word	0x40004400
 80010a8:	24009a5c 	.word	0x24009a5c
 80010ac:	40011000 	.word	0x40011000
 80010b0:	08025f0c 	.word	0x08025f0c
 80010b4:	08001cbb 	.word	0x08001cbb
 80010b8:	24009990 	.word	0x24009990
 80010bc:	08025ee8 	.word	0x08025ee8
 80010c0:	08003e15 	.word	0x08003e15
 80010c4:	2400998c 	.word	0x2400998c
 80010c8:	08023fc8 	.word	0x08023fc8
 80010cc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	2214      	movs	r2, #20
 80010d2:	2100      	movs	r1, #0
 80010d4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f022 f9b6 	bl	8023448 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80010ea:	4898      	ldr	r0, [pc, #608]	@ (800134c <main+0x858>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2600      	movs	r6, #0
 80010ee:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	f44f 7a80 	mov.w	sl, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001100:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001104:	f04f 0908 	mov.w	r9, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800111c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	9305      	str	r3, [sp, #20]
 8001126:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001128:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800112c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001130:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001134:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800113c:	9306      	str	r3, [sp, #24]
 800113e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800114c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	9307      	str	r3, [sp, #28]
 8001156:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001158:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001164:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	9308      	str	r3, [sp, #32]
 800116e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001170:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001178:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800117c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001184:	9309      	str	r3, [sp, #36]	@ 0x24
 8001186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001194:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	930a      	str	r3, [sp, #40]	@ 0x28
 800119e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80011b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80011ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011d4:	f043 0320 	orr.w	r3, r3, #32
 80011d8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80011e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 80011e8:	f006 fe28 	bl	8007e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80011f2:	4857      	ldr	r0, [pc, #348]	@ (8001350 <main+0x85c>)
 80011f4:	f006 fe22 	bl	8007e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2108      	movs	r1, #8
 80011fc:	4855      	ldr	r0, [pc, #340]	@ (8001354 <main+0x860>)
 80011fe:	f006 fe1d 	bl	8007e3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001208:	4853      	ldr	r0, [pc, #332]	@ (8001358 <main+0x864>)
 800120a:	f006 fe17 	bl	8007e3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001212:	a92d      	add	r1, sp, #180	@ 0xb4
 8001214:	484d      	ldr	r0, [pc, #308]	@ (800134c <main+0x858>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800121e:	f006 fc83 	bl	8007b28 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	a92d      	add	r1, sp, #180	@ 0xb4
 8001224:	484d      	ldr	r0, [pc, #308]	@ (800135c <main+0x868>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001226:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	e9cd a82d 	strd	sl, r8, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f006 fc7a 	bl	8007b28 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001234:	a92d      	add	r1, sp, #180	@ 0xb4
 8001236:	4846      	ldr	r0, [pc, #280]	@ (8001350 <main+0x85c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	e9cd b52d 	strd	fp, r5, [sp, #180]	@ 0xb4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001240:	f006 fc72 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001244:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001248:	a92d      	add	r1, sp, #180	@ 0xb4
 800124a:	4841      	ldr	r0, [pc, #260]	@ (8001350 <main+0x85c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001254:	f006 fc68 	bl	8007b28 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001258:	a92d      	add	r1, sp, #180	@ 0xb4
 800125a:	483e      	ldr	r0, [pc, #248]	@ (8001354 <main+0x860>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	e9cd 572f 	strd	r5, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001264:	f006 fc60 	bl	8007b28 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001268:	a92d      	add	r1, sp, #180	@ 0xb4
 800126a:	483b      	ldr	r0, [pc, #236]	@ (8001358 <main+0x864>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	e9cd a52d 	strd	sl, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8001274:	f006 fc58 	bl	8007b28 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001278:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 800127c:	4632      	mov	r2, r6
 800127e:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001280:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001282:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001284:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001288:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 800128c:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001290:	2404      	movs	r4, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001292:	402b      	ands	r3, r5
 8001294:	9303      	str	r3, [sp, #12]
 8001296:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001298:	f005 fdf0 	bl	8006e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800129c:	207a      	movs	r0, #122	@ 0x7a
 800129e:	f005 fe1f 	bl	8006ee0 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80012a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001360 <main+0x86c>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012a4:	482f      	ldr	r0, [pc, #188]	@ (8001364 <main+0x870>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012a6:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80012a8:	6813      	ldr	r3, [r2, #0]
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <main+0x874>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012b2:	61c6      	str	r6, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012b4:	6286      	str	r6, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80012b6:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 80012b8:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80012bc:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80012c0:	2320      	movs	r3, #32
 80012c2:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80012c6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012ca:	e9c0 a305 	strd	sl, r3, [r0, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80012ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012d2:	e9c0 3b08 	strd	r3, fp, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80012d6:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 80012d8:	e9cd 8832 	strd	r8, r8, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 80012dc:	e9cd 342e 	strd	r3, r4, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 80012e0:	e9cd 3730 	strd	r3, r7, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012e4:	f00a fb98 	bl	800ba18 <HAL_SDRAM_Init>
 80012e8:	4606      	mov	r6, r0
 80012ea:	2800      	cmp	r0, #0
 80012ec:	f47f aca5 	bne.w	8000c3a <main+0x146>
  BSP_SDRAM_DeInit(0);
 80012f0:	f005 fab0 	bl	8006854 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 80012f4:	4630      	mov	r0, r6
 80012f6:	f005 fafb 	bl	80068f0 <BSP_SDRAM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2800      	cmp	r0, #0
 80012fe:	f43f ac9e 	beq.w	8000c3e <main+0x14a>
 8001302:	b672      	cpsid	i
  while (1)
 8001304:	e7fe      	b.n	8001304 <main+0x810>
  HAL_Init();
 8001306:	f005 fd4f 	bl	8006da8 <HAL_Init>
  SystemClock_Config();
 800130a:	f7ff fb91 	bl	8000a30 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800130e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001312:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001314:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001318:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800131c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001328:	f006 fd96 	bl	8007e58 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800132c:	4621      	mov	r1, r4
 800132e:	4620      	mov	r0, r4
 8001330:	f006 fda0 	bl	8007e74 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001334:	4c0d      	ldr	r4, [pc, #52]	@ (800136c <main+0x878>)
timeout = 0xFFFF;
 8001336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800133a:	6822      	ldr	r2, [r4, #0]
 800133c:	0417      	lsls	r7, r2, #16
 800133e:	f53f aec7 	bmi.w	80010d0 <main+0x5dc>
 8001342:	3b01      	subs	r3, #1
 8001344:	d2f9      	bcs.n	800133a <main+0x846>
 8001346:	b672      	cpsid	i
  while (1)
 8001348:	e7fe      	b.n	8001348 <main+0x854>
 800134a:	bf00      	nop
 800134c:	58022400 	.word	0x58022400
 8001350:	58022000 	.word	0x58022000
 8001354:	58021800 	.word	0x58021800
 8001358:	58021400 	.word	0x58021400
 800135c:	58020000 	.word	0x58020000
 8001360:	52004000 	.word	0x52004000
 8001364:	24009994 	.word	0x24009994
 8001368:	52004140 	.word	0x52004140
 800136c:	58024400 	.word	0x58024400

08001370 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001374:	429a      	cmp	r2, r3
 8001376:	d101      	bne.n	800137c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001378:	f005 bd44 	b.w	8006e04 <HAL_IncTick>
}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40001000 	.word	0x40001000

08001384 <Error_Handler>:
 8001384:	b672      	cpsid	i
  while (1)
 8001386:	e7fe      	b.n	8001386 <Error_Handler+0x2>

08001388 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_MspInit+0x2c>)
{
 800138a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138c:	210f      	movs	r1, #15
 800138e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001396:	f042 0202 	orr.w	r2, r2, #2
 800139a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ac:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ae:	f005 bd65 	b.w	8006e7c <HAL_NVIC_SetPriority>
 80013b2:	bf00      	nop
 80013b4:	58024400 	.word	0x58024400

080013b8 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b8:	6802      	ldr	r2, [r0, #0]
{
 80013ba:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_CRC_MspInit+0x2c>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	d10d      	bne.n	80013de <HAL_CRC_MspInit+0x26>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013c2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80013c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013ca:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80013ce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80013de:	b002      	add	sp, #8
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	58024c00 	.word	0x58024c00

080013e8 <HAL_DMA2D_MspInit>:
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <HAL_DMA2D_MspInit+0x40>)
{
 80013ea:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013ec:	6802      	ldr	r2, [r0, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d117      	bne.n	8001422 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 80013f4:	2107      	movs	r1, #7
 80013f6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80013fc:	f042 0210 	orr.w	r2, r2, #16
 8001400:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001404:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001412:	f005 fd33 	bl	8006e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001416:	205a      	movs	r0, #90	@ 0x5a

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001418:	b003      	add	sp, #12
 800141a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800141e:	f005 bd5f 	b.w	8006ee0 <HAL_NVIC_EnableIRQ>
}
 8001422:	b003      	add	sp, #12
 8001424:	f85d fb04 	ldr.w	pc, [sp], #4
 8001428:	52001000 	.word	0x52001000
 800142c:	58024400 	.word	0x58024400

08001430 <HAL_DSI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdsi: DSI handle pointer
  * @retval None
  */
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001430:	b510      	push	{r4, lr}
 8001432:	b0ba      	sub	sp, #232	@ 0xe8
 8001434:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	2214      	movs	r2, #20
 8001438:	2100      	movs	r1, #0
 800143a:	a803      	add	r0, sp, #12
 800143c:	f022 f804 	bl	8023448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001440:	22c8      	movs	r2, #200	@ 0xc8
 8001442:	2100      	movs	r1, #0
 8001444:	a808      	add	r0, sp, #32
 8001446:	f021 ffff 	bl	8023448 <memset>
  if(hdsi->Instance==DSI)
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001450:	d138      	bne.n	80014c4 <HAL_DSI_MspInit+0x94>

    /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001452:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001456:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001458:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800145a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145e:	f009 fc6b 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	b108      	cbz	r0, 8001468 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001464:	f7ff ff8e 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001468:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800146c:	a903      	add	r1, sp, #12
 800146e:	4817      	ldr	r0, [pc, #92]	@ (80014cc <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001470:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001474:	f042 0210 	orr.w	r2, r2, #16
 8001478:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800147c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001480:	f002 0210 	and.w	r2, r2, #16
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001488:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800148c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001490:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149e:	9302      	str	r3, [sp, #8]
 80014a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80014a8:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80014ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014b0:	f006 fb3a 	bl	8007b28 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 80014b4:	207b      	movs	r0, #123	@ 0x7b
 80014b6:	4622      	mov	r2, r4
 80014b8:	2107      	movs	r1, #7
 80014ba:	f005 fcdf 	bl	8006e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80014be:	207b      	movs	r0, #123	@ 0x7b
 80014c0:	f005 fd0e 	bl	8006ee0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DSI_MspInit 1 */

  }

}
 80014c4:	b03a      	add	sp, #232	@ 0xe8
 80014c6:	bd10      	pop	{r4, pc}
 80014c8:	58024400 	.word	0x58024400
 80014cc:	58022400 	.word	0x58022400

080014d0 <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80014d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <HAL_JPEG_MspInit+0xf4>)
{
 80014d4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80014d6:	6802      	ldr	r2, [r0, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d170      	bne.n	80015be <HAL_JPEG_MspInit+0xee>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014dc:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80014de:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80014e0:	4c3a      	ldr	r4, [pc, #232]	@ (80015cc <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80014e2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80014ea:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80015d8 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80014ee:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014f0:	f042 0220 	orr.w	r2, r2, #32
 80014f4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80014f8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80014fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001506:	2311      	movs	r3, #17
 8001508:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001512:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001516:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001518:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800151a:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800151e:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001522:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001526:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800152a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800152e:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001532:	f008 f922 	bl	800977a <HAL_MDMA_Init>
 8001536:	b108      	cbz	r0, 800153c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001538:	f7ff ff24 	bl	8001384 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800153c:	2200      	movs	r2, #0
 800153e:	4823      	ldr	r0, [pc, #140]	@ (80015cc <HAL_JPEG_MspInit+0xfc>)
 8001540:	4611      	mov	r1, r2
 8001542:	f008 f9a8 	bl	8009896 <HAL_MDMA_ConfigPostRequestMask>
 8001546:	b108      	cbz	r0, 800154c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001548:	f7ff ff1c 	bl	8001384 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800154c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800154e:	2313      	movs	r3, #19
 8001550:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001552:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001554:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001556:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800155a:	4c1e      	ldr	r4, [pc, #120]	@ (80015d4 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800155c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	22c0      	movs	r2, #192	@ 0xc0
 8001564:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001568:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800156a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800156c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001570:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001574:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001578:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800157c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001580:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001582:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001586:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800158a:	f008 f8f6 	bl	800977a <HAL_MDMA_Init>
 800158e:	b108      	cbz	r0, 8001594 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001590:	f7ff fef8 	bl	8001384 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001594:	2200      	movs	r2, #0
 8001596:	480f      	ldr	r0, [pc, #60]	@ (80015d4 <HAL_JPEG_MspInit+0x104>)
 8001598:	4611      	mov	r1, r2
 800159a:	f008 f97c 	bl	8009896 <HAL_MDMA_ConfigPostRequestMask>
 800159e:	b108      	cbz	r0, 80015a4 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80015a0:	f7ff fef0 	bl	8001384 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80015a4:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80015ac:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80015ae:	f005 fc65 	bl	8006e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80015b2:	2079      	movs	r0, #121	@ 0x79

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 80015b4:	b003      	add	sp, #12
 80015b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 80015ba:	f005 bc91 	b.w	8006ee0 <HAL_NVIC_EnableIRQ>
}
 80015be:	b003      	add	sp, #12
 80015c0:	bd30      	pop	{r4, r5, pc}
 80015c2:	bf00      	nop
 80015c4:	52003000 	.word	0x52003000
 80015c8:	58024400 	.word	0x58024400
 80015cc:	24009c50 	.word	0x24009c50
 80015d0:	520001c0 	.word	0x520001c0
 80015d4:	24009be4 	.word	0x24009be4
 80015d8:	52000200 	.word	0x52000200

080015dc <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80015dc:	b510      	push	{r4, lr}
 80015de:	b0b4      	sub	sp, #208	@ 0xd0
 80015e0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e2:	22c8      	movs	r2, #200	@ 0xc8
 80015e4:	2100      	movs	r1, #0
 80015e6:	a802      	add	r0, sp, #8
 80015e8:	f021 ff2e 	bl	8023448 <memset>
  if(hltdc->Instance==LTDC)
 80015ec:	6822      	ldr	r2, [r4, #0]
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <HAL_LTDC_MspInit+0x74>)
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d12b      	bne.n	800164c <HAL_LTDC_MspInit+0x70>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80015f8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80015fa:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001602:	23a1      	movs	r3, #161	@ 0xa1
 8001604:	2205      	movs	r2, #5
 8001606:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800160a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800160c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001614:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001618:	f009 fb8e 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	b108      	cbz	r0, 8001622 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800161e:	f7ff feb1 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001624:	2058      	movs	r0, #88	@ 0x58
 8001626:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001628:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800162c:	f042 0208 	orr.w	r2, r2, #8
 8001630:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001634:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001636:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001642:	f005 fc1b 	bl	8006e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001646:	2058      	movs	r0, #88	@ 0x58
 8001648:	f005 fc4a 	bl	8006ee0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800164c:	b034      	add	sp, #208	@ 0xd0
 800164e:	bd10      	pop	{r4, pc}
 8001650:	50001000 	.word	0x50001000
 8001654:	58024400 	.word	0x58024400

08001658 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b0bf      	sub	sp, #252	@ 0xfc
 800165c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	2214      	movs	r2, #20
 8001660:	2100      	movs	r1, #0
 8001662:	a807      	add	r0, sp, #28
 8001664:	f021 fef0 	bl	8023448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001668:	22c8      	movs	r2, #200	@ 0xc8
 800166a:	2100      	movs	r1, #0
 800166c:	a80c      	add	r0, sp, #48	@ 0x30
 800166e:	f021 feeb 	bl	8023448 <memset>
  if(hqspi->Instance==QUADSPI)
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <HAL_QSPI_MspInit+0x16c>)
 8001676:	429a      	cmp	r2, r3
 8001678:	f040 80a1 	bne.w	80017be <HAL_QSPI_MspInit+0x166>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800167c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001680:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001682:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001688:	f009 fb56 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 800168c:	b108      	cbz	r0, 8001692 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800168e:	f7ff fe79 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001692:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001698:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800169a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169e:	a907      	add	r1, sp, #28
 80016a0:	484a      	ldr	r0, [pc, #296]	@ (80017cc <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016a2:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016a8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80016ac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80016b0:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80016b4:	9201      	str	r2, [sp, #4]
 80016b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016c0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016c8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80016cc:	9202      	str	r2, [sp, #8]
 80016ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016e0:	f002 0220 	and.w	r2, r2, #32
 80016e4:	9203      	str	r2, [sp, #12]
 80016e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80016f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80016f8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80016fc:	9204      	str	r2, [sp, #16]
 80016fe:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001704:	f042 0202 	orr.w	r2, r2, #2
 8001708:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800170c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001710:	f002 0202 	and.w	r2, r2, #2
 8001714:	9205      	str	r2, [sp, #20]
 8001716:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001718:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800171c:	f042 0208 	orr.w	r2, r2, #8
 8001720:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	9306      	str	r3, [sp, #24]
 800172e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001734:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800173c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800173e:	f006 f9f3 	bl	8007b28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001742:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001744:	a907      	add	r1, sp, #28
 8001746:	4821      	ldr	r0, [pc, #132]	@ (80017cc <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001748:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f006 f9e9 	bl	8007b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001756:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001758:	a907      	add	r1, sp, #28
 800175a:	481d      	ldr	r0, [pc, #116]	@ (80017d0 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800175c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001766:	f006 f9df 	bl	8007b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800176e:	a907      	add	r1, sp, #28
 8001770:	4817      	ldr	r0, [pc, #92]	@ (80017d0 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001772:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800177c:	f006 f9d4 	bl	8007b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001780:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001782:	a907      	add	r1, sp, #28
 8001784:	4813      	ldr	r0, [pc, #76]	@ (80017d4 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001786:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001790:	f006 f9ca 	bl	8007b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001794:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	a907      	add	r1, sp, #28
 8001798:	480f      	ldr	r0, [pc, #60]	@ (80017d8 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800179a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f006 f9c0 	bl	8007b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	a907      	add	r1, sp, #28
 80017ae:	480b      	ldr	r0, [pc, #44]	@ (80017dc <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017b0:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ba:	f006 f9b5 	bl	8007b28 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80017be:	b03f      	add	sp, #252	@ 0xfc
 80017c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	52005000 	.word	0x52005000
 80017c8:	58024400 	.word	0x58024400
 80017cc:	58021800 	.word	0x58021800
 80017d0:	58021400 	.word	0x58021400
 80017d4:	58021c00 	.word	0x58021c00
 80017d8:	58020400 	.word	0x58020400
 80017dc:	58020c00 	.word	0x58020c00

080017e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	2214      	movs	r2, #20
{
 80017e4:	b0bc      	sub	sp, #240	@ 0xf0
 80017e6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	2100      	movs	r1, #0
 80017ea:	eb0d 0002 	add.w	r0, sp, r2
 80017ee:	f021 fe2b 	bl	8023448 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f2:	22c8      	movs	r2, #200	@ 0xc8
 80017f4:	2100      	movs	r1, #0
 80017f6:	a80a      	add	r0, sp, #40	@ 0x28
 80017f8:	f021 fe26 	bl	8023448 <memset>
  if(huart->Instance==USART1)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_UART_MspInit+0xf0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d132      	bne.n	800186a <HAL_UART_MspInit+0x8a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001804:	2201      	movs	r2, #1
 8001806:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001808:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800180a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f009 fa93 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	b108      	cbz	r0, 8001818 <HAL_UART_MspInit+0x38>
    {
      Error_Handler();
 8001814:	f7ff fdb6 	bl	8001384 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001818:	4b2e      	ldr	r3, [pc, #184]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	482e      	ldr	r0, [pc, #184]	@ (80018d8 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001820:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001824:	f042 0210 	orr.w	r2, r2, #16
 8001828:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800182c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001830:	f002 0210 	and.w	r2, r2, #16
 8001834:	9201      	str	r2, [sp, #4]
 8001836:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800183c:	f042 0202 	orr.w	r2, r2, #2
 8001840:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	9302      	str	r3, [sp, #8]
 800184e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800185e:	2304      	movs	r3, #4
 8001860:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001862:	f006 f961 	bl	8007b28 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001866:	b03c      	add	sp, #240	@ 0xf0
 8001868:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <HAL_UART_MspInit+0xfc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d1fa      	bne.n	8001866 <HAL_UART_MspInit+0x86>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001870:	2202      	movs	r2, #2
 8001872:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001874:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001876:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187a:	f009 fa5d 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	b108      	cbz	r0, 8001884 <HAL_UART_MspInit+0xa4>
      Error_Handler();
 8001880:	f7ff fd80 	bl	8001384 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001886:	a905      	add	r1, sp, #20
 8001888:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800188a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800188e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001892:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001896:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800189a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800189e:	9203      	str	r2, [sp, #12]
 80018a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80018a6:	f042 0208 	orr.w	r2, r2, #8
 80018aa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2260      	movs	r2, #96	@ 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	9304      	str	r3, [sp, #16]
 80018ba:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c8:	2307      	movs	r3, #7
 80018ca:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	e7c9      	b.n	8001862 <HAL_UART_MspInit+0x82>
 80018ce:	bf00      	nop
 80018d0:	40011000 	.word	0x40011000
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58020400 	.word	0x58020400
 80018dc:	40004400 	.word	0x40004400
 80018e0:	58020c00 	.word	0x58020c00

080018e4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018e8:	2100      	movs	r1, #0
 80018ea:	2214      	movs	r2, #20
 80018ec:	a801      	add	r0, sp, #4
 80018ee:	f021 fdab 	bl	8023448 <memset>
  if (FMC_Initialized) {
 80018f2:	4b3f      	ldr	r3, [pc, #252]	@ (80019f0 <HAL_SDRAM_MspInit+0x10c>)
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	2900      	cmp	r1, #0
 80018f8:	d177      	bne.n	80019ea <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80018fa:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80018fe:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001900:	22c0      	movs	r2, #192	@ 0xc0
 8001902:	f021 fda1 	bl	8023448 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001906:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800190a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800190e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001912:	f009 fa11 	bl	800ad38 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	b108      	cbz	r0, 800191c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001918:	f7ff fd34 	bl	8001384 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800191c:	4b35      	ldr	r3, [pc, #212]	@ (80019f4 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2600      	movs	r6, #0
 8001922:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001924:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001928:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800192a:	a901      	add	r1, sp, #4
 800192c:	4832      	ldr	r0, [pc, #200]	@ (80019f8 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800192e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001932:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001936:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800193a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800193c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001950:	f006 f8ea 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001954:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	a901      	add	r1, sp, #4
 8001958:	4828      	ldr	r0, [pc, #160]	@ (80019fc <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800195a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f006 f8e0 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001968:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196c:	a901      	add	r1, sp, #4
 800196e:	4824      	ldr	r0, [pc, #144]	@ (8001a00 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001970:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197a:	f006 f8d5 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800197e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001982:	a901      	add	r1, sp, #4
 8001984:	481f      	ldr	r0, [pc, #124]	@ (8001a04 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001986:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001990:	f006 f8ca 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001994:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001998:	a901      	add	r1, sp, #4
 800199a:	481b      	ldr	r0, [pc, #108]	@ (8001a08 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800199c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a6:	f006 f8bf 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80019aa:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ae:	a901      	add	r1, sp, #4
 80019b0:	4816      	ldr	r0, [pc, #88]	@ (8001a0c <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019bc:	f006 f8b4 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80019c0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c4:	a901      	add	r1, sp, #4
 80019c6:	4812      	ldr	r0, [pc, #72]	@ (8001a10 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d2:	f006 f8a9 	bl	8007b28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019d6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d8:	a901      	add	r1, sp, #4
 80019da:	480e      	ldr	r0, [pc, #56]	@ (8001a14 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019dc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	f006 f89f 	bl	8007b28 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80019ea:	b039      	add	sp, #228	@ 0xe4
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24009dc0 	.word	0x24009dc0
 80019f4:	58024400 	.word	0x58024400
 80019f8:	58022000 	.word	0x58022000
 80019fc:	58020400 	.word	0x58020400
 8001a00:	58021000 	.word	0x58021000
 8001a04:	58021c00 	.word	0x58021c00
 8001a08:	58021800 	.word	0x58021800
 8001a0c:	58020c00 	.word	0x58020c00
 8001a10:	58021400 	.word	0x58021400
 8001a14:	58020800 	.word	0x58020800

08001a18 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_SDRAM_MspDeInit+0x6c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001a1c:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001a1e:	bb82      	cbnz	r2, 8001a82 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001a20:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001a22:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001a24:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001a28:	4818      	ldr	r0, [pc, #96]	@ (8001a8c <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001a2a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001a2c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001a30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001a38:	f006 f95e 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001a3c:	2160      	movs	r1, #96	@ 0x60
 8001a3e:	4814      	ldr	r0, [pc, #80]	@ (8001a90 <HAL_SDRAM_MspDeInit+0x78>)
 8001a40:	f006 f95a 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001a44:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001a48:	4812      	ldr	r0, [pc, #72]	@ (8001a94 <HAL_SDRAM_MspDeInit+0x7c>)
 8001a4a:	f006 f955 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001a4e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001a52:	4811      	ldr	r0, [pc, #68]	@ (8001a98 <HAL_SDRAM_MspDeInit+0x80>)
 8001a54:	f006 f950 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001a58:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001a5c:	480f      	ldr	r0, [pc, #60]	@ (8001a9c <HAL_SDRAM_MspDeInit+0x84>)
 8001a5e:	f006 f94b 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001a62:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001a66:	480e      	ldr	r0, [pc, #56]	@ (8001aa0 <HAL_SDRAM_MspDeInit+0x88>)
 8001a68:	f006 f946 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001a6c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001a70:	480c      	ldr	r0, [pc, #48]	@ (8001aa4 <HAL_SDRAM_MspDeInit+0x8c>)
 8001a72:	f006 f941 	bl	8007cf8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001a76:	4621      	mov	r1, r4
 8001a78:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001a7e:	f006 b93b 	b.w	8007cf8 <HAL_GPIO_DeInit>
}
 8001a82:	bd10      	pop	{r4, pc}
 8001a84:	24009dbc 	.word	0x24009dbc
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	58022000 	.word	0x58022000
 8001a90:	58020400 	.word	0x58020400
 8001a94:	58021000 	.word	0x58021000
 8001a98:	58021c00 	.word	0x58021c00
 8001a9c:	58021800 	.word	0x58021800
 8001aa0:	58020c00 	.word	0x58020c00
 8001aa4:	58021400 	.word	0x58021400
 8001aa8:	58020800 	.word	0x58020800

08001aac <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aac:	280f      	cmp	r0, #15
{
 8001aae:	b510      	push	{r4, lr}
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab4:	d902      	bls.n	8001abc <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001ab6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001ab8:	b00a      	add	sp, #40	@ 0x28
 8001aba:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001abc:	4601      	mov	r1, r0
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2036      	movs	r0, #54	@ 0x36
 8001ac2:	f005 f9db 	bl	8006e7c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ac6:	2036      	movs	r0, #54	@ 0x36
 8001ac8:	f005 fa0a 	bl	8006ee0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001acc:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ace:	4669      	mov	r1, sp
 8001ad0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8001ad2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ad4:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_InitTick+0x88>)
 8001ad6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001ada:	f042 0210 	orr.w	r2, r2, #16
 8001ade:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aee:	f009 f80d 	bl	800ab0c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001af2:	9b07      	ldr	r3, [sp, #28]
 8001af4:	b9c3      	cbnz	r3, 8001b28 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001af6:	f008 ffe5 	bl	800aac4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001afa:	4c0f      	ldr	r4, [pc, #60]	@ (8001b38 <HAL_InitTick+0x8c>)
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_InitTick+0x90>)
 8001afe:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b00:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001b04:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_InitTick+0x94>)
 8001b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b0c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001b0e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b10:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b12:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001b14:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b18:	f00a f95c 	bl	800bdd4 <HAL_TIM_Base_Init>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d1ca      	bne.n	8001ab6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b20:	4620      	mov	r0, r4
 8001b22:	f00a f821 	bl	800bb68 <HAL_TIM_Base_Start_IT>
 8001b26:	e7c7      	b.n	8001ab8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b28:	f008 ffcc 	bl	800aac4 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	0040      	lsls	r0, r0, #1
 8001b2e:	e7e4      	b.n	8001afa <HAL_InitTick+0x4e>
 8001b30:	24000074 	.word	0x24000074
 8001b34:	58024400 	.word	0x58024400
 8001b38:	24009dc4 	.word	0x24009dc4
 8001b3c:	40001000 	.word	0x40001000
 8001b40:	000f4240 	.word	0x000f4240

08001b44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler>

08001b46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler>

08001b48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <MemManage_Handler>

08001b4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler>

08001b4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler>

08001b4e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	4770      	bx	lr

08001b50 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b50:	4801      	ldr	r0, [pc, #4]	@ (8001b58 <TIM6_DAC_IRQHandler+0x8>)
 8001b52:	f00a b84b 	b.w	800bbec <HAL_TIM_IRQHandler>
 8001b56:	bf00      	nop
 8001b58:	24009dc4 	.word	0x24009dc4

08001b5c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b5c:	4801      	ldr	r0, [pc, #4]	@ (8001b64 <LTDC_IRQHandler+0x8>)
 8001b5e:	f007 bd25 	b.w	80095ac <HAL_LTDC_IRQHandler>
 8001b62:	bf00      	nop
 8001b64:	24009b3c 	.word	0x24009b3c

08001b68 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b68:	4801      	ldr	r0, [pc, #4]	@ (8001b70 <DMA2D_IRQHandler+0x8>)
 8001b6a:	f005 bac3 	b.w	80070f4 <HAL_DMA2D_IRQHandler>
 8001b6e:	bf00      	nop
 8001b70:	24009d30 	.word	0x24009d30

08001b74 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001b74:	4801      	ldr	r0, [pc, #4]	@ (8001b7c <JPEG_IRQHandler+0x8>)
 8001b76:	f007 bbf1 	b.w	800935c <HAL_JPEG_IRQHandler>
 8001b7a:	bf00      	nop
 8001b7c:	24009cbc 	.word	0x24009cbc

08001b80 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001b80:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <MDMA_IRQHandler+0x14>)
{
 8001b82:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001b84:	f007 ff0c 	bl	80099a0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001b8e:	f007 bf07 	b.w	80099a0 <HAL_MDMA_IRQHandler>
 8001b92:	bf00      	nop
 8001b94:	24009be4 	.word	0x24009be4
 8001b98:	24009c50 	.word	0x24009c50

08001b9c <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001b9c:	4801      	ldr	r0, [pc, #4]	@ (8001ba4 <DSI_IRQHandler+0x8>)
 8001b9e:	f005 bcac 	b.w	80074fa <HAL_DSI_IRQHandler>
 8001ba2:	bf00      	nop
 8001ba4:	24009d14 	.word	0x24009d14

08001ba8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bae:	f021 fcff 	bl	80235b0 <__errno>
 8001bb2:	2316      	movs	r3, #22
 8001bb4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bba:	bd08      	pop	{r3, pc}

08001bbc <_exit>:

void _exit (int status)
{
 8001bbc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bbe:	f021 fcf7 	bl	80235b0 <__errno>
 8001bc2:	2316      	movs	r3, #22
 8001bc4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001bc6:	e7fe      	b.n	8001bc6 <_exit+0xa>

08001bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	460d      	mov	r5, r1
 8001bcc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	460e      	mov	r6, r1
 8001bd0:	1b73      	subs	r3, r6, r5
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	dc01      	bgt.n	8001bda <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001bda:	f3af 8000 	nop.w
 8001bde:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	e7f5      	b.n	8001bd0 <_read+0x8>

08001be4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	460d      	mov	r5, r1
 8001be8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	460e      	mov	r6, r1
 8001bec:	1b73      	subs	r3, r6, r5
 8001bee:	429c      	cmp	r4, r3
 8001bf0:	dc01      	bgt.n	8001bf6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001bf6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001bfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	e7f5      	b.n	8001bec <_write+0x8>

08001c00 <_close>:

int _close(int file)
{
	return -1;
}
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001c0a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001c0c:	604b      	str	r3, [r1, #4]
}
 8001c0e:	4770      	bx	lr

08001c10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c10:	2001      	movs	r0, #1
 8001c12:	4770      	bx	lr

08001c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	4770      	bx	lr

08001c18 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <_sbrk+0x30>)
{
 8001c1a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001c1c:	6811      	ldr	r1, [r2, #0]
{
 8001c1e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001c20:	b909      	cbnz	r1, 8001c26 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001c22:	490a      	ldr	r1, [pc, #40]	@ (8001c4c <_sbrk+0x34>)
 8001c24:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	6810      	ldr	r0, [r2, #0]
 8001c28:	4909      	ldr	r1, [pc, #36]	@ (8001c50 <_sbrk+0x38>)
 8001c2a:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <_sbrk+0x3c>)
 8001c2c:	4403      	add	r3, r0
 8001c2e:	1b09      	subs	r1, r1, r4
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d906      	bls.n	8001c42 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c34:	f021 fcbc 	bl	80235b0 <__errno>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c40:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c42:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001c44:	e7fc      	b.n	8001c40 <_sbrk+0x28>
 8001c46:	bf00      	nop
 8001c48:	24009e10 	.word	0x24009e10
 8001c4c:	24026098 	.word	0x24026098
 8001c50:	24080000 	.word	0x24080000
 8001c54:	00001000 	.word	0x00001000

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c5c:	f005 f834 	bl	8006cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	@ (8001c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f021 fc99 	bl	80235bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7fe ff33 	bl	8000af4 <main>
  bx  lr
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c98:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001c9c:	08027c00 	.word	0x08027c00
  ldr r2, =_sbss
 8001ca0:	24009940 	.word	0x24009940
  ldr r4, =_ebss
 8001ca4:	24026098 	.word	0x24026098

08001ca8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC3_IRQHandler>

08001caa <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001caa:	4770      	bx	lr

08001cac <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001cac:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001cae:	f001 fd25 	bl	80036fc <touchgfx_components_init>
    touchgfx_init();
}
 8001cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001cb6:	f001 bca9 	b.w	800360c <touchgfx_init>

08001cba <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001cba:	f001 bd21 	b.w	8003700 <touchgfx_taskEntry>

08001cbe <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001cbe:	6840      	ldr	r0, [r0, #4]
    }
 8001cc0:	4770      	bx	lr

08001cc2 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001cc2:	6041      	str	r1, [r0, #4]
    }
 8001cc4:	4770      	bx	lr

08001cc6 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001cc6:	1a52      	subs	r2, r2, r1
 8001cc8:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001ccc:	fbb2 f0f3 	udiv	r0, r2, r3
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001cd4:	4b02      	ldr	r3, [pc, #8]	@ (8001ce0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001cd6:	68c0      	ldr	r0, [r0, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001cdc:	4358      	muls	r0, r3
 8001cde:	4770      	bx	lr
 8001ce0:	24009e14 	.word	0x24009e14

08001ce4 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001ce4:	4770      	bx	lr
	...

08001ce8 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cea:	4a1e      	ldr	r2, [pc, #120]	@ (8001d64 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001cec:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001cf0:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001cf2:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d02:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001d0e:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001d10:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d12:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001d14:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001d1a:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001d20:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	2210      	movs	r2, #16
 8001d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d28:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001d32:	4a0e      	ldr	r2, [pc, #56]	@ (8001d6c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001d34:	5cd3      	ldrb	r3, [r2, r3]
 8001d36:	b983      	cbnz	r3, 8001d5a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001d38:	f008 fea2 	bl	800aa80 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001d3e:	f008 fcd7 	bl	800a6f0 <HAL_RCC_GetSysClockFreq>
 8001d42:	fbb0 f0f4 	udiv	r0, r0, r4
 8001d46:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001d48:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001d4a:	f00a f843 	bl	800bdd4 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001d4e:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001d50:	b003      	add	sp, #12
 8001d52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001d56:	f009 becd 	b.w	800baf4 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001d5a:	f008 feb3 	bl	800aac4 <HAL_RCC_GetPCLK1Freq>
 8001d5e:	0044      	lsls	r4, r0, #1
 8001d60:	e7ed      	b.n	8001d3e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001d62:	bf00      	nop
 8001d64:	58024400 	.word	0x58024400
 8001d68:	24009e14 	.word	0x24009e14
 8001d6c:	08026820 	.word	0x08026820

08001d70 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001d70:	b510      	push	{r4, lr}
 8001d72:	4604      	mov	r4, r0
 8001d74:	2110      	movs	r1, #16
 8001d76:	f020 fd55 	bl	8022824 <_ZdlPvj>
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	bd10      	pop	{r4, pc}

08001d7e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001d7e:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001d80:	6803      	ldr	r3, [r0, #0]
{
 8001d82:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001d84:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001d86:	b131      	cbz	r1, 8001d96 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001d88:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001d8a:	4798      	blx	r3
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	1b5b      	subs	r3, r3, r5
 8001d90:	4403      	add	r3, r0
 8001d92:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001d94:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001d96:	4798      	blx	r3
 8001d98:	60a0      	str	r0, [r4, #8]
}
 8001d9a:	e7fb      	b.n	8001d94 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001d9c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d9c:	4770      	bx	lr
	...

08001da0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001da4:	460f      	mov	r7, r1
 8001da6:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001da8:	781d      	ldrb	r5, [r3, #0]
 8001daa:	b915      	cbnz	r5, 8001db2 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001dac:	2500      	movs	r5, #0
}
 8001dae:	4628      	mov	r0, r5
 8001db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001db2:	4c07      	ldr	r4, [pc, #28]	@ (8001dd0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001db4:	2000      	movs	r0, #0
 8001db6:	4621      	mov	r1, r4
 8001db8:	f004 ff2a 	bl	8006c10 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f4      	beq.n	8001dac <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001dc2:	6863      	ldr	r3, [r4, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001dc6:	68a3      	ldr	r3, [r4, #8]
 8001dc8:	6033      	str	r3, [r6, #0]
            return true;
 8001dca:	e7f0      	b.n	8001dae <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001dcc:	24009e70 	.word	0x24009e70
 8001dd0:	24009e60 	.word	0x24009e60

08001dd4 <_ZN20STM32TouchControllerD0Ev>:
 8001dd4:	b510      	push	{r4, lr}
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	2104      	movs	r1, #4
 8001dda:	f020 fd23 	bl	8022824 <_ZdlPvj>
 8001dde:	4620      	mov	r0, r4
 8001de0:	bd10      	pop	{r4, pc}
	...

08001de4 <_ZN20STM32TouchController4initEv>:
{
 8001de4:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001de8:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001dec:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001dee:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001df0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001df4:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001dfe:	f004 fe77 	bl	8006af0 <BSP_TS_Init>
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <_ZN20STM32TouchController4initEv+0x40>)
 8001e04:	b910      	cbnz	r0, 8001e0c <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
}
 8001e0a:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1fb      	bne.n	8001e0a <_ZN20STM32TouchController4initEv+0x26>
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <_ZN20STM32TouchController4initEv+0x44>)
 8001e14:	212e      	movs	r1, #46	@ 0x2e
 8001e16:	4a05      	ldr	r2, [pc, #20]	@ (8001e2c <_ZN20STM32TouchController4initEv+0x48>)
 8001e18:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <_ZN20STM32TouchController4initEv+0x4c>)
 8001e1a:	f021 f879 	bl	8022f10 <__assert_func>
 8001e1e:	bf00      	nop
 8001e20:	24009e6c 	.word	0x24009e6c
 8001e24:	24009e70 	.word	0x24009e70
 8001e28:	08023fe2 	.word	0x08023fe2
 8001e2c:	08023ff5 	.word	0x08023ff5
 8001e30:	0802401f 	.word	0x0802401f

08001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e34:	2803      	cmp	r0, #3
 8001e36:	d825      	bhi.n	8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001e38:	e8df f000 	tbb	[pc, r0]
 8001e3c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e42:	2108      	movs	r1, #8
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e4c:	480f      	ldr	r0, [pc, #60]	@ (8001e8c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e4e:	f005 bff5 	b.w	8007e3c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	0952      	lsrs	r2, r2, #5
 8001e60:	e7f4      	b.n	8001e4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	fab2 f282 	clz	r2, r2
 8001e6e:	0952      	lsrs	r2, r2, #5
 8001e70:	e7ec      	b.n	8001e4c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e78:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	fab2 f282 	clz	r2, r2
 8001e80:	0952      	lsrs	r2, r2, #5
 8001e82:	e7e4      	b.n	8001e4e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	24009e74 	.word	0x24009e74
 8001e8c:	58022400 	.word	0x58022400
 8001e90:	58021400 	.word	0x58021400

08001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e94:	2803      	cmp	r0, #3
 8001e96:	d825      	bhi.n	8001ee4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001e98:	e8df f000 	tbb	[pc, r0]
 8001e9c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ea2:	2108      	movs	r1, #8
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	3a00      	subs	r2, #0
 8001ea8:	bf18      	it	ne
 8001eaa:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001eac:	480f      	ldr	r0, [pc, #60]	@ (8001eec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001eae:	f005 bfc5 	b.w	8007e3c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001eb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	3a00      	subs	r2, #0
 8001ebc:	bf18      	it	ne
 8001ebe:	2201      	movne	r2, #1
 8001ec0:	e7f4      	b.n	8001eac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	3a00      	subs	r2, #0
 8001ecc:	bf18      	it	ne
 8001ece:	2201      	movne	r2, #1
 8001ed0:	e7ec      	b.n	8001eac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed8:	4805      	ldr	r0, [pc, #20]	@ (8001ef0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	3a00      	subs	r2, #0
 8001ede:	bf18      	it	ne
 8001ee0:	2201      	movne	r2, #1
 8001ee2:	e7e4      	b.n	8001eae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	24009e74 	.word	0x24009e74
 8001eec:	58022400 	.word	0x58022400
 8001ef0:	58021400 	.word	0x58021400

08001ef4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001ef4:	2803      	cmp	r0, #3
 8001ef6:	d811      	bhi.n	8001f1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001ef8:	e8df f000 	tbb	[pc, r0]
 8001efc:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f00:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f02:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f04:	f005 bf9f 	b.w	8007e46 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f0c:	e7f9      	b.n	8001f02 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f12:	e7f6      	b.n	8001f02 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001f1a:	e7f3      	b.n	8001f04 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	58022400 	.word	0x58022400
 8001f24:	58021400 	.word	0x58021400

08001f28 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001f28:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001f2a:	2803      	cmp	r0, #3
 8001f2c:	d815      	bhi.n	8001f5a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001f2e:	e8df f000 	tbb	[pc, r0]
 8001f32:	0a02      	.short	0x0a02
 8001f34:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f36:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f38:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f3a:	f005 ff79 	bl	8007e30 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001f3e:	1e43      	subs	r3, r0, #1
 8001f40:	4258      	negs	r0, r3
 8001f42:	4158      	adcs	r0, r3
 8001f44:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f4a:	e7f5      	b.n	8001f38 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f50:	e7f2      	b.n	8001f38 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f56:	4803      	ldr	r0, [pc, #12]	@ (8001f64 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001f58:	e7ef      	b.n	8001f3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	e7ef      	b.n	8001f3e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001f5e:	bf00      	nop
 8001f60:	58022400 	.word	0x58022400
 8001f64:	58021400 	.word	0x58021400

08001f68 <_ZN8touchgfx4GPIO4initEv>:
{
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	4d08      	ldr	r5, [pc, #32]	@ (8001f8c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001f6c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001f6e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001f70:	b2e0      	uxtb	r0, r4
 8001f72:	f7ff ffd9 	bl	8001f28 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001f76:	b118      	cbz	r0, 8001f80 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001f7c:	bf18      	it	ne
 8001f7e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001f80:	3401      	adds	r4, #1
 8001f82:	3504      	adds	r5, #4
 8001f84:	2c05      	cmp	r4, #5
 8001f86:	d1f3      	bne.n	8001f70 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001f88:	bd70      	pop	{r4, r5, r6, pc}
 8001f8a:	bf00      	nop
 8001f8c:	24009e74 	.word	0x24009e74

08001f90 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001f90:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001f92:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001f96:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001f9a:	4770      	bx	lr

08001f9c <_ZN8touchgfx3HAL11submitGPU2DEv>:
     *
     * Only implemented on systems with the GPU2D IP.
     */
    virtual void submitGPU2D()
    {
    }
 8001f9c:	4770      	bx	lr

08001f9e <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	4770      	bx	lr
	...

08001fa4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001fa4:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001fa6:	3900      	subs	r1, #0
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001faa:	bf18      	it	ne
 8001fac:	2101      	movne	r1, #1
 8001fae:	7019      	strb	r1, [r3, #0]
    }
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	24025377 	.word	0x24025377

08001fb8 <_ZN8touchgfx3HAL16waitForLTDCLinesEt>:
     *
     * @param numberOfLines Number of lines to wait.
     */
    virtual void waitForLTDCLines(uint16_t numberOfLines)
    {
    }
 8001fb8:	4770      	bx	lr

08001fba <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001fba:	2000      	movs	r0, #0
 8001fbc:	4770      	bx	lr

08001fbe <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001fbe:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001fc0:	b10b      	cbz	r3, 8001fc6 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001fc2:	4608      	mov	r0, r1
 8001fc4:	4718      	bx	r3
        }
    }
 8001fc6:	4770      	bx	lr

08001fc8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001fc8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fcc:	4770      	bx	lr

08001fce <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001fce:	6840      	ldr	r0, [r0, #4]
 8001fd0:	6803      	ldr	r3, [r0, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4718      	bx	r3

08001fd6 <_ZN8touchgfx3HAL25partialLTDCDeadlineMissedEv>:
     * This empty function can be overridden to e.g. output this error condition
     * on a pin.
     */
    virtual void partialLTDCDeadlineMissed()
    {
    }
 8001fd6:	4770      	bx	lr

08001fd8 <_ZN8touchgfx3HAL22InvalidateTextureCacheEv>:
     * Called on every tick before drawing into the framebuffer to enable
     * invalidation of any caches that may be incoherent with main memory.
     */
    virtual void InvalidateTextureCache()
    {
    }
 8001fd8:	4770      	bx	lr
	...

08001fdc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001fdc:	4b01      	ldr	r3, [pc, #4]	@ (8001fe4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	24009e98 	.word	0x24009e98

08001fe8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001fe8:	4770      	bx	lr

08001fea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001fea:	f001 bc86 	b.w	80038fa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001fee <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001fee:	f001 bc17 	b.w	8003820 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001ff2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001ff2:	f001 bde7 	b.w	8003bc4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ff6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001ff6:	f001 bdd9 	b.w	8003bac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001ffc <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8002000:	f001 fd9c 	bl	8003b3c <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8002004:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8002008:	b113      	cbz	r3, 8002010 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 800200a:	4b02      	ldr	r3, [pc, #8]	@ (8002014 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
    }
}
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	2400000c 	.word	0x2400000c

08002018 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002018:	f001 bc0a 	b.w	8003830 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800201c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800201c:	b510      	push	{r4, lr}
 800201e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002020:	f00d fd94 	bl	800fb4c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	4620      	mov	r0, r4
 8002028:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
    }
 800202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002030:	4718      	bx	r3

08002032 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8002032:	b510      	push	{r4, lr}
 8002034:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8002036:	f00d f8ef 	bl	800f218 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 800203a:	6860      	ldr	r0, [r4, #4]
 800203c:	6803      	ldr	r3, [r0, #0]
    }
 800203e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4718      	bx	r3

08002046 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8002046:	f00c bfaf 	b.w	800efa8 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800204a <_ZN11TouchGFXHALD0Ev>:
 800204a:	b510      	push	{r4, lr}
 800204c:	4604      	mov	r4, r0
 800204e:	2184      	movs	r1, #132	@ 0x84
 8002050:	f020 fbe8 	bl	8022824 <_ZdlPvj>
 8002054:	4620      	mov	r0, r4
 8002056:	bd10      	pop	{r4, pc}

08002058 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8002058:	4b02      	ldr	r3, [pc, #8]	@ (8002064 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800205e:	f00c bfdf 	b.w	800f020 <_ZN8touchgfx3HAL10beginFrameEv>
 8002062:	bf00      	nop
 8002064:	2400000c 	.word	0x2400000c

08002068 <_ZN11TouchGFXHAL10initializeEv>:
{
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4604      	mov	r4, r0
    mcuInstr.init();
 800206c:	4d06      	ldr	r5, [pc, #24]	@ (8002088 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 800206e:	f001 fc05 	bl	800387c <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8002072:	2300      	movs	r3, #0
    mcuInstr.init();
 8002074:	4628      	mov	r0, r5
 8002076:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 800207a:	f7ff fe35 	bl	8001ce8 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800207e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8002080:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8002082:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8002086:	bd38      	pop	{r3, r4, r5, pc}
 8002088:	24009e88 	.word	0x24009e88

0800208c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800208c:	6803      	ldr	r3, [r0, #0]
{
 800208e:	4604      	mov	r4, r0
 8002090:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002096:	4798      	blx	r3
    enableInterrupts();
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	4620      	mov	r0, r4
 800209c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800209e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80020a0:	f000 ff66 	bl	8002f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	4620      	mov	r0, r4
 80020a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020aa:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80020ac:	2100      	movs	r1, #0
 80020ae:	2329      	movs	r3, #41	@ 0x29
 80020b0:	2215      	movs	r2, #21
 80020b2:	4805      	ldr	r0, [pc, #20]	@ (80020c8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80020b4:	9100      	str	r1, [sp, #0]
 80020b6:	f005 fc30 	bl	800791a <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80020ba:	f000 ff59 	bl	8002f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	4620      	mov	r0, r4
 80020c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c4:	4798      	blx	r3
    for (;;)
 80020c6:	e7f8      	b.n	80020ba <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80020c8:	24009d14 	.word	0x24009d14

080020cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
        if (requestedOrientation != nativeDisplayOrientation)
 80020cc:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
            if (DISPLAY_ROTATION == rotate0)
 80020d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80020d2:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80020d4:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80020d8:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80020da:	428c      	cmp	r4, r1
 80020dc:	d009      	beq.n	80020f2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80020de:	b93a      	cbnz	r2, 80020f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                const uint16_t tmp = DISPLAY_HEIGHT;
 80020e0:	490a      	ldr	r1, [pc, #40]	@ (800210c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80020e4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020e6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80020e8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80020ea:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020ec:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 80020ee:	701a      	strb	r2, [r3, #0]
    }
 80020f0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d0fc      	beq.n	80020f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020f6:	4a06      	ldr	r2, [pc, #24]	@ (8002110 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80020f8:	4904      	ldr	r1, [pc, #16]	@ (800210c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020fa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80020fc:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020fe:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002100:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002102:	2200      	movs	r2, #0
 8002104:	e7f3      	b.n	80020ee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002106:	bf00      	nop
 8002108:	24025370 	.word	0x24025370
 800210c:	2402536e 	.word	0x2402536e
 8002110:	2402536c 	.word	0x2402536c

08002114 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002114:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	428b      	cmp	r3, r1
 800211c:	d803      	bhi.n	8002126 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800211e:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	4293      	cmp	r3, r2
 8002124:	d905      	bls.n	8002132 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002128:	21a3      	movs	r1, #163	@ 0xa3
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800212c:	4807      	ldr	r0, [pc, #28]	@ (800214c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800212e:	f020 feef 	bl	8022f10 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002134:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002138:	801a      	strh	r2, [r3, #0]
    }
 800213a:	bd08      	pop	{r3, pc}
 800213c:	2402536c 	.word	0x2402536c
 8002140:	2402536e 	.word	0x2402536e
 8002144:	08024072 	.word	0x08024072
 8002148:	080240d5 	.word	0x080240d5
 800214c:	08024118 	.word	0x08024118
 8002150:	24025372 	.word	0x24025372
 8002154:	24025374 	.word	0x24025374

08002158 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002158:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800215a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800215e:	b118      	cbz	r0, 8002168 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002160:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002162:	6803      	ldr	r3, [r0, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4718      	bx	r3
    }
 8002168:	4770      	bx	lr
	...

0800216c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	460d      	mov	r5, r1
 8002170:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002174:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002176:	b935      	cbnz	r5, 8002186 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800217a:	f240 21ff 	movw	r1, #767	@ 0x2ff
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002180:	480a      	ldr	r0, [pc, #40]	@ (80021ac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8002182:	f020 fec5 	bl	8022f10 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002186:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800218a:	3a00      	subs	r2, #0
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800218e:	bf18      	it	ne
 8002190:	2201      	movne	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002194:	6803      	ldr	r3, [r0, #0]
}
 8002196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800219e:	4718      	bx	r3
 80021a0:	24009e98 	.word	0x24009e98
 80021a4:	0802416b 	.word	0x0802416b
 80021a8:	080241a3 	.word	0x080241a3
 80021ac:	08024118 	.word	0x08024118
 80021b0:	24025376 	.word	0x24025376

080021b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80021b4:	b570      	push	{r4, r5, r6, lr}
          lcdRef(display),
 80021b6:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 80021ba:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80021bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80021c6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 80021ca:	2103      	movs	r1, #3
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80021cc:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80021ce:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80021d2:	3520      	adds	r5, #32
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80021d4:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80021d6:	8603      	strh	r3, [r0, #48]	@ 0x30
 80021d8:	b2ad      	uxth	r5, r5
          useAuxiliaryLCD(false),
 80021da:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80021de:	6643      	str	r3, [r0, #100]	@ 0x64
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80021e0:	42b5      	cmp	r5, r6
          updateMCULoad(0),
 80021e2:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          auxiliaryLCD(0),
 80021e6:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80021ea:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
          vSyncCompensationEnabled(false),
 80021ec:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80021f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002260 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xac>)
          buttonController(0),
 80021f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80021f6:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80021fa:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80021fe:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8002202:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002206:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 800220a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          cc_begin(0),
 800220e:	6743      	str	r3, [r0, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002210:	6782      	str	r2, [r0, #120]	@ 0x78
          isFrontPorchEntered(false),
 8002212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002216:	f8a0 207c 	strh.w	r2, [r0, #124]	@ 0x7c
          maxDrawingHeight(height / numberOfBlocks), // Best guess based on testing (but not ideal in all cases)
 800221a:	ea4f 0296 	mov.w	r2, r6, lsr #2
 800221e:	f8a0 207e 	strh.w	r2, [r0, #126]	@ 0x7e
          minDrawingHeight(maxDrawingHeight / 3),    // Best guess based on testing (but not ideal in all cases)
 8002222:	fbb2 f2f1 	udiv	r2, r2, r1
 8002226:	f8a0 2080 	strh.w	r2, [r0, #128]	@ 0x80
          maxBlockLines(20)
 800222a:	f04f 0214 	mov.w	r2, #20
 800222e:	f8a0 2082 	strh.w	r2, [r0, #130]	@ 0x82
        instance = this;
 8002232:	4a0c      	ldr	r2, [pc, #48]	@ (8002264 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb0>)
 8002234:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002236:	4a0c      	ldr	r2, [pc, #48]	@ (8002268 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb4>)
 8002238:	8015      	strh	r5, [r2, #0]
 800223a:	4a0c      	ldr	r2, [pc, #48]	@ (800226c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xb8>)
 800223c:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800223e:	bf28      	it	cs
 8002240:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002242:	4a0b      	ldr	r2, [pc, #44]	@ (8002270 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xbc>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002244:	bf38      	it	cc
 8002246:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002248:	8016      	strh	r6, [r2, #0]
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800224c:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002250:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc4>)
 8002254:	7013      	strb	r3, [r2, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xc8>)
 8002258:	6003      	str	r3, [r0, #0]
}
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	01000001 	.word	0x01000001
 8002260:	01010000 	.word	0x01010000
 8002264:	24025378 	.word	0x24025378
 8002268:	2402536c 	.word	0x2402536c
 800226c:	24025372 	.word	0x24025372
 8002270:	2402536e 	.word	0x2402536e
 8002274:	24025374 	.word	0x24025374
 8002278:	24025370 	.word	0x24025370
 800227c:	08025f78 	.word	0x08025f78

08002280 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002280:	2b01      	cmp	r3, #1
    {
 8002282:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002284:	d80e      	bhi.n	80022a4 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	2215      	movs	r2, #21
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	460b      	mov	r3, r1
 800228e:	4601      	mov	r1, r0
 8002290:	4808      	ldr	r0, [pc, #32]	@ (80022b4 <DSI_IO_Write+0x34>)
 8002292:	f005 fb42 	bl	800791a <HAL_DSI_ShortWrite>
 8002296:	b118      	cbz	r0, 80022a0 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002298:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800229c:	b002      	add	sp, #8
 800229e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 80022a0:	2000      	movs	r0, #0
 80022a2:	e7fb      	b.n	800229c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80022a4:	e9cd 1200 	strd	r1, r2, [sp]
 80022a8:	4601      	mov	r1, r0
 80022aa:	2239      	movs	r2, #57	@ 0x39
 80022ac:	4801      	ldr	r0, [pc, #4]	@ (80022b4 <DSI_IO_Write+0x34>)
 80022ae:	f005 fb45 	bl	800793c <HAL_DSI_LongWrite>
 80022b2:	e7f0      	b.n	8002296 <DSI_IO_Write+0x16>
 80022b4:	24009d14 	.word	0x24009d14

080022b8 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 80022b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80022ba:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80022be:	2106      	movs	r1, #6
 80022c0:	9100      	str	r1, [sp, #0]
 80022c2:	4601      	mov	r1, r0
 80022c4:	4805      	ldr	r0, [pc, #20]	@ (80022dc <DSI_IO_Read+0x24>)
 80022c6:	f005 fb99 	bl	80079fc <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80022ca:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80022cc:	bf14      	ite	ne
 80022ce:	f06f 0007 	mvnne.w	r0, #7
 80022d2:	2000      	moveq	r0, #0
 80022d4:	b005      	add	sp, #20
 80022d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80022da:	bf00      	nop
 80022dc:	24009d14 	.word	0x24009d14

080022e0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80022e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80022e2:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80022e6:	4c0b      	ldr	r4, [pc, #44]	@ (8002314 <LCD_ReqTear+0x34>)
 80022e8:	2239      	movs	r2, #57	@ 0x39
 80022ea:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80022ec:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80022f0:	ab03      	add	r3, sp, #12
 80022f2:	4620      	mov	r0, r4
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2344      	movs	r3, #68	@ 0x44
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2302      	movs	r3, #2
 80022fc:	f005 fb1e 	bl	800793c <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8002300:	2100      	movs	r1, #0
 8002302:	2335      	movs	r3, #53	@ 0x35
 8002304:	2215      	movs	r2, #21
 8002306:	4620      	mov	r0, r4
 8002308:	9100      	str	r1, [sp, #0]
 800230a:	f005 fb06 	bl	800791a <HAL_DSI_ShortWrite>
    }
 800230e:	b004      	add	sp, #16
 8002310:	bd10      	pop	{r4, pc}
 8002312:	bf00      	nop
 8002314:	24009d14 	.word	0x24009d14

08002318 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8002318:	b508      	push	{r3, lr}
    LCD_ReqTear();
 800231a:	f7ff ffe1 	bl	80022e0 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800231e:	4b0c      	ldr	r3, [pc, #48]	@ (8002350 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8002320:	2202      	movs	r2, #2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8002328:	2201      	movs	r2, #1
 800232a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800232e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800233a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800233e:	f042 0202 	orr.w	r2, r2, #2
 8002342:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002346:	2203      	movs	r2, #3
 8002348:	4b02      	ldr	r3, [pc, #8]	@ (8002354 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800234a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800234c:	bd08      	pop	{r3, pc}
 800234e:	bf00      	nop
 8002350:	24009d14 	.word	0x24009d14
 8002354:	50001000 	.word	0x50001000

08002358 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002358:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <LCD_ReqEnable+0x20>)
    {
 800235a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 800235c:	7819      	ldrb	r1, [r3, #0]
 800235e:	b939      	cbnz	r1, 8002370 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002360:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002362:	4806      	ldr	r0, [pc, #24]	@ (800237c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002364:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002366:	2329      	movs	r3, #41	@ 0x29
 8002368:	2215      	movs	r2, #21
 800236a:	9100      	str	r1, [sp, #0]
 800236c:	f005 fad5 	bl	800791a <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002370:	b003      	add	sp, #12
 8002372:	f85d fb04 	ldr.w	pc, [sp], #4
 8002376:	bf00      	nop
 8002378:	24009e84 	.word	0x24009e84
 800237c:	24009d14 	.word	0x24009d14

08002380 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002382:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	232a      	movs	r3, #42	@ 0x2a
 8002388:	2239      	movs	r2, #57	@ 0x39
 800238a:	2100      	movs	r1, #0
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2304      	movs	r3, #4
 8002390:	4803      	ldr	r0, [pc, #12]	@ (80023a0 <LCD_SetUpdateRegionLeft+0x20>)
 8002392:	f005 fad3 	bl	800793c <HAL_DSI_LongWrite>
    }
 8002396:	b003      	add	sp, #12
 8002398:	f85d fb04 	ldr.w	pc, [sp], #4
 800239c:	24000008 	.word	0x24000008
 80023a0:	24009d14 	.word	0x24009d14

080023a4 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 80023a6:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	232a      	movs	r3, #42	@ 0x2a
 80023ac:	2239      	movs	r2, #57	@ 0x39
 80023ae:	2100      	movs	r1, #0
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2304      	movs	r3, #4
 80023b4:	4803      	ldr	r0, [pc, #12]	@ (80023c4 <LCD_SetUpdateRegionRight+0x20>)
 80023b6:	f005 fac1 	bl	800793c <HAL_DSI_LongWrite>
    }
 80023ba:	b003      	add	sp, #12
 80023bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80023c0:	24000004 	.word	0x24000004
 80023c4:	24009d14 	.word	0x24009d14

080023c8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80023c8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80023ca:	4d15      	ldr	r5, [pc, #84]	@ (8002420 <HAL_DSI_TearingEffectCallback+0x58>)
 80023cc:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff fd30 	bl	8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80023d4:	682b      	ldr	r3, [r5, #0]
        vSyncCnt++;
 80023d6:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 80023da:	3201      	adds	r2, #1
 80023dc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        isFrontPorchEntered = false;
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80023e6:	f000 fdb7 	bl	8002f58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_DSI_TearingEffectCallback+0x5c>)
        lockDMAToPorch = enableLock;
 80023ec:	682a      	ldr	r2, [r5, #0]
 80023ee:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80023f6:	b173      	cbz	r3, 8002416 <HAL_DSI_TearingEffectCallback+0x4e>
 80023f8:	4d0b      	ldr	r5, [pc, #44]	@ (8002428 <HAL_DSI_TearingEffectCallback+0x60>)
 80023fa:	782b      	ldrb	r3, [r5, #0]
 80023fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002400:	b94b      	cbnz	r3, 8002416 <HAL_DSI_TearingEffectCallback+0x4e>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_DSI_TearingEffectCallback+0x64>)
 8002404:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8002406:	f7ff ffbb 	bl	8002380 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 800240a:	4620      	mov	r0, r4
 800240c:	f005 fa75 	bl	80078fa <HAL_DSI_Refresh>
            displayRefreshing = true;
 8002410:	2301      	movs	r3, #1
 8002412:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8002414:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002416:	2000      	movs	r0, #0
    }
 8002418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800241c:	f7ff bd3a 	b.w	8001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8002420:	24025378 	.word	0x24025378
 8002424:	2400000c 	.word	0x2400000c
 8002428:	24009ea0 	.word	0x24009ea0
 800242c:	24009e9c 	.word	0x24009e9c

08002430 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8002430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002434:	4e49      	ldr	r6, [pc, #292]	@ (800255c <HAL_DSI_EndOfRefreshCallback+0x12c>)
    {
 8002436:	b085      	sub	sp, #20
 8002438:	4604      	mov	r4, r0
        if (displayRefreshing)
 800243a:	7833      	ldrb	r3, [r6, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8089 	beq.w	8002554 <HAL_DSI_EndOfRefreshCallback+0x124>
        {
            if (updateRegion == 0)
 8002442:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8002580 <HAL_DSI_EndOfRefreshCallback+0x150>
 8002446:	f8df 813c 	ldr.w	r8, [pc, #316]	@ 8002584 <HAL_DSI_EndOfRefreshCallback+0x154>
 800244a:	f8d9 5000 	ldr.w	r5, [r9]
 800244e:	4f44      	ldr	r7, [pc, #272]	@ (8002560 <HAL_DSI_EndOfRefreshCallback+0x130>)
 8002450:	2d00      	cmp	r5, #0
 8002452:	d13e      	bne.n	80024d2 <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002454:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002456:	4e43      	ldr	r6, [pc, #268]	@ (8002564 <HAL_DSI_EndOfRefreshCallback+0x134>)
                HAL_Delay(1);
 8002458:	f004 fce6 	bl	8006e28 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	9500      	str	r5, [sp, #0]
 8002460:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002464:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002466:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800246a:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800246e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002472:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002476:	f002 0208 	and.w	r2, r2, #8
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800247e:	f8d8 2000 	ldr.w	r2, [r8]
 8002482:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002486:	4838      	ldr	r0, [pc, #224]	@ (8002568 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002488:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 800248a:	4e38      	ldr	r6, [pc, #224]	@ (800256c <HAL_DSI_EndOfRefreshCallback+0x13c>)
 800248c:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800248e:	4838      	ldr	r0, [pc, #224]	@ (8002570 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002490:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002494:	4837      	ldr	r0, [pc, #220]	@ (8002574 <HAL_DSI_EndOfRefreshCallback+0x144>)
 8002496:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 800249a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800249c:	f041 0101 	orr.w	r1, r1, #1
 80024a0:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80024a2:	9501      	str	r5, [sp, #4]
 80024a4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80024a8:	f042 0208 	orr.w	r2, r2, #8
 80024ac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80024bc:	f7ff ff72 	bl	80023a4 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80024c0:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80024c2:	4620      	mov	r0, r4
                updateRegion = 1;
 80024c4:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80024c8:	b005      	add	sp, #20
 80024ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80024ce:	f005 ba14 	b.w	80078fa <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80024d6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024d8:	9502      	str	r5, [sp, #8]
 80024da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80024de:	4c26      	ldr	r4, [pc, #152]	@ (8002578 <HAL_DSI_EndOfRefreshCallback+0x148>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024e8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80024ec:	f002 0208 	and.w	r2, r2, #8
 80024f0:	9202      	str	r2, [sp, #8]
 80024f2:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80024f4:	f8d8 2000 	ldr.w	r2, [r8]
 80024f8:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80024fc:	481a      	ldr	r0, [pc, #104]	@ (8002568 <HAL_DSI_EndOfRefreshCallback+0x138>)
 80024fe:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8002500:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8002504:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8002506:	481a      	ldr	r0, [pc, #104]	@ (8002570 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002508:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 800250c:	4819      	ldr	r0, [pc, #100]	@ (8002574 <HAL_DSI_EndOfRefreshCallback+0x144>)
 800250e:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002512:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002514:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002516:	f041 0101 	orr.w	r1, r1, #1
 800251a:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800251c:	9503      	str	r5, [sp, #12]
 800251e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002522:	f042 0208 	orr.w	r2, r2, #8
 8002526:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800252a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	9303      	str	r3, [sp, #12]
 8002534:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002536:	f7ff fcad 	bl	8001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 800253a:	f7ff ff0d 	bl	8002358 <LCD_ReqEnable>
        return instance;
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <HAL_DSI_EndOfRefreshCallback+0x14c>)
                displayRefreshing = false;
 8002540:	7035      	strb	r5, [r6, #0]
 8002542:	681c      	ldr	r4, [r3, #0]
                if (HAL::getInstance())
 8002544:	b134      	cbz	r4, 8002554 <HAL_DSI_EndOfRefreshCallback+0x124>
        allowDMATransfers();
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	4620      	mov	r0, r4
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4798      	blx	r3
        isFrontPorchEntered = true;
 800254e:	2301      	movs	r3, #1
 8002550:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    }
 8002554:	b005      	add	sp, #20
 8002556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800255a:	bf00      	nop
 800255c:	24009ea0 	.word	0x24009ea0
 8002560:	24009e98 	.word	0x24009e98
 8002564:	01b201e2 	.word	0x01b201e2
 8002568:	50001000 	.word	0x50001000
 800256c:	019201e3 	.word	0x019201e3
 8002570:	01920003 	.word	0x01920003
 8002574:	09c004b3 	.word	0x09c004b3
 8002578:	019201e2 	.word	0x019201e2
 800257c:	24025378 	.word	0x24025378
 8002580:	24009e9c 	.word	0x24009e9c
 8002584:	24009b3c 	.word	0x24009b3c

08002588 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002588:	4601      	mov	r1, r0
 800258a:	b508      	push	{r3, lr}
        return instance;
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <IdleTaskHook+0x14>)
 800258e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002590:	b101      	cbz	r1, 8002594 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8002592:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8002594:	f00d faf4 	bl	800fb80 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002598:	2001      	movs	r0, #1
 800259a:	bd08      	pop	{r3, pc}
 800259c:	24025378 	.word	0x24025378

080025a0 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	605a      	str	r2, [r3, #4]
          cc_in(0)
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	4a02      	ldr	r2, [pc, #8]	@ (80025b4 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 80025aa:	601a      	str	r2, [r3, #0]

}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	24009e88 	.word	0x24009e88
 80025b4:	08025f38 	.word	0x08025f38

080025b8 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80025b8:	6940      	ldr	r0, [r0, #20]
 80025ba:	4770      	bx	lr

080025bc <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80025bc:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80025c0:	4770      	bx	lr

080025c2 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80025c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80025c4:	b923      	cbnz	r3, 80025d0 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80025c6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80025c8:	3800      	subs	r0, #0
 80025ca:	bf18      	it	ne
 80025cc:	2001      	movne	r0, #1
 80025ce:	4770      	bx	lr
 80025d0:	2001      	movs	r0, #1
}
 80025d2:	4770      	bx	lr

080025d4 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80025d4:	6880      	ldr	r0, [r0, #8]
 80025d6:	4770      	bx	lr

080025d8 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80025d8:	4770      	bx	lr

080025da <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80025da:	3004      	adds	r0, #4
{
 80025dc:	b510      	push	{r4, lr}
 80025de:	460c      	mov	r4, r1
    *data = videoInfo;
 80025e0:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80025e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025e6:	bd10      	pop	{r4, pc}

080025e8 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80025e8:	4770      	bx	lr
	...

080025ec <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80025ec:	b508      	push	{r3, lr}
    assert(0);
 80025ee:	4a03      	ldr	r2, [pc, #12]	@ (80025fc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80025f0:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 80025f4:	4b02      	ldr	r3, [pc, #8]	@ (8002600 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80025f6:	4803      	ldr	r0, [pc, #12]	@ (8002604 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80025f8:	f020 fc8a 	bl	8022f10 <__assert_func>
 80025fc:	080241f1 	.word	0x080241f1
 8002600:	08025c77 	.word	0x08025c77
 8002604:	0802424c 	.word	0x0802424c

08002608 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002608:	b510      	push	{r4, lr}
 800260a:	4604      	mov	r4, r0
 800260c:	2148      	movs	r1, #72	@ 0x48
 800260e:	f020 f909 	bl	8022824 <_ZdlPvj>
 8002612:	4620      	mov	r0, r4
 8002614:	bd10      	pop	{r4, pc}
	...

08002618 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002618:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 800261c:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 800261e:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002620:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002622:	6003      	str	r3, [r0, #0]
 8002624:	63c2      	str	r2, [r0, #60]	@ 0x3c
 8002626:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800262a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800262e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002632:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002636:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800263a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 800263e:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002642:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 8002646:	2001      	movs	r0, #1
 8002648:	f00a f92a 	bl	800c8a0 <osSemaphoreNew>
 800264c:	4b02      	ldr	r3, [pc, #8]	@ (8002658 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 800264e:	6018      	str	r0, [r3, #0]
}
 8002650:	4620      	mov	r0, r4
 8002652:	bd10      	pop	{r4, pc}
 8002654:	08026064 	.word	0x08026064
 8002658:	24009ec0 	.word	0x24009ec0

0800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 800265c:	b410      	push	{r4}
 800265e:	460c      	mov	r4, r1
 8002660:	4611      	mov	r1, r2
 8002662:	461a      	mov	r2, r3
    if (reader != 0)
 8002664:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002666:	b13b      	cbz	r3, 8002678 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002668:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800266a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800266c:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800266e:	4420      	add	r0, r4
}
 8002670:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002674:	f020 bef0 	b.w	8023458 <strncmp>
        src = (const char*)movieData + offset;
 8002678:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800267a:	e7f8      	b.n	800266e <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

0800267c <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800267c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800267e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002680:	b173      	cbz	r3, 80026a0 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002682:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002684:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002686:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002688:	1853      	adds	r3, r2, r1
 800268a:	5c52      	ldrb	r2, [r2, r1]
 800268c:	7898      	ldrb	r0, [r3, #2]
 800268e:	785c      	ldrb	r4, [r3, #1]
 8002690:	0400      	lsls	r0, r0, #16
 8002692:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002696:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800269e:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 80026a0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80026a2:	1853      	adds	r3, r2, r1
        val |= d[0];
 80026a4:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 80026a6:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 80026a8:	7898      	ldrb	r0, [r3, #2]
 80026aa:	0400      	lsls	r0, r0, #16
 80026ac:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80026b0:	e7f1      	b.n	8002696 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

080026b2 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80026b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80026b4:	b143      	cbz	r3, 80026c8 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80026b6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80026b8:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80026ba:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80026bc:	185a      	adds	r2, r3, r1
 80026be:	5c58      	ldrb	r0, [r3, r1]
 80026c0:	7852      	ldrb	r2, [r2, #1]
 80026c2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80026c6:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80026c8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80026ca:	185a      	adds	r2, r3, r1
        val |= d[0];
 80026cc:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80026ce:	7853      	ldrb	r3, [r2, #1]
 80026d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80026d4:	4770      	bx	lr
	...

080026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	4604      	mov	r4, r0
    if (reader != 0)
 80026dc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80026de:	460d      	mov	r5, r1
 80026e0:	4616      	mov	r6, r2
    if (reader != 0)
 80026e2:	b1d8      	cbz	r0, 800271c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80026e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d208      	bcs.n	80026fc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026ea:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80026ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002724 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80026ee:	21a0      	movs	r1, #160	@ 0xa0
 80026f0:	480d      	ldr	r0, [pc, #52]	@ (8002728 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80026f8:	f020 fc0a 	bl	8022f10 <__assert_func>
        reader->seek(offset);
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002702:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002704:	4632      	mov	r2, r6
 8002706:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002708:	6803      	ldr	r3, [r0, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4798      	blx	r3
 800270e:	b910      	cbnz	r0, 8002716 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002710:	230d      	movs	r3, #13
 8002712:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 8002716:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002718:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 800271a:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 800271c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800271e:	4408      	add	r0, r1
 8002720:	e7fb      	b.n	800271a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8002722:	bf00      	nop
 8002724:	080242bc 	.word	0x080242bc
 8002728:	0802424c 	.word	0x0802424c
 800272c:	080242a9 	.word	0x080242a9

08002730 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002734:	6943      	ldr	r3, [r0, #20]
{
 8002736:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002738:	b92b      	cbnz	r3, 8002746 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800273a:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 800273c:	21e6      	movs	r1, #230	@ 0xe6
 800273e:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002740:	4822      	ldr	r0, [pc, #136]	@ (80027cc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002742:	f020 fbe5 	bl	8022f10 <__assert_func>
    readData(currentMovieOffset, 8);
 8002746:	2208      	movs	r2, #8
 8002748:	6981      	ldr	r1, [r0, #24]
 800274a:	f7ff ffc5 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800274e:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002750:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002754:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002758:	3104      	adds	r1, #4
 800275a:	4620      	mov	r0, r4
 800275c:	f7ff ff8e 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002760:	69a3      	ldr	r3, [r4, #24]
 8002762:	4418      	add	r0, r3
 8002764:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002766:	f100 0208 	add.w	r2, r0, #8
 800276a:	429a      	cmp	r2, r3
 800276c:	d306      	bcc.n	800277c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800276e:	2301      	movs	r3, #1
    return false;
 8002770:	2000      	movs	r0, #0
    frameNumber = 1;
 8002772:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002774:	6a23      	ldr	r3, [r4, #32]
 8002776:	61a3      	str	r3, [r4, #24]
}
 8002778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 800277c:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800277e:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8002782:	2208      	movs	r2, #8
 8002784:	4620      	mov	r0, r4
        frameNumber++;
 8002786:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002788:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 800278c:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800278e:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002790:	f7ff ffa2 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002794:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002798:	4620      	mov	r0, r4
 800279a:	4649      	mov	r1, r9
 800279c:	f7ff ff89 	bl	80026b2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027a0:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80027a4:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7ff ff83 	bl	80026b2 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80027ac:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027b0:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff62 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80027b8:	45b0      	cmp	r8, r6
 80027ba:	d1d1      	bne.n	8002760 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80027bc:	42bd      	cmp	r5, r7
 80027be:	d1cf      	bne.n	8002760 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80027c0:	2001      	movs	r0, #1
 80027c2:	e7d9      	b.n	8002778 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80027c4:	080242fe 	.word	0x080242fe
 80027c8:	08024347 	.word	0x08024347
 80027cc:	0802424c 	.word	0x0802424c

080027d0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80027d0:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80027d2:	6803      	ldr	r3, [r0, #0]
 80027d4:	bf38      	it	cc
 80027d6:	2101      	movcc	r1, #1
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80027da:	b570      	push	{r4, r5, r6, lr}
 80027dc:	460d      	mov	r5, r1
 80027de:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80027e0:	4798      	blx	r3
 80027e2:	42a8      	cmp	r0, r5
 80027e4:	d204      	bcs.n	80027f0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	4620      	mov	r0, r4
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	4798      	blx	r3
 80027ee:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80027f0:	1e6b      	subs	r3, r5, #1
 80027f2:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80027f4:	2210      	movs	r2, #16
 80027f6:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80027f8:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80027fc:	f106 0108 	add.w	r1, r6, #8
 8002800:	f7ff ff6a 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002804:	f106 0110 	add.w	r1, r6, #16
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff ff37 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
 800280e:	6a23      	ldr	r3, [r4, #32]
 8002810:	3b04      	subs	r3, #4
 8002812:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002814:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002818:	bd70      	pop	{r4, r5, r6, pc}
	...

0800281c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 800281c:	2100      	movs	r1, #0
    readData(0, 72);
 800281e:	2248      	movs	r2, #72	@ 0x48
{
 8002820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002824:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 8002826:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002828:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 800282c:	f7ff ff54 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002830:	69a6      	ldr	r6, [r4, #24]
 8002832:	2304      	movs	r3, #4
 8002834:	4a63      	ldr	r2, [pc, #396]	@ (80029c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002836:	4631      	mov	r1, r6
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff ff0f 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800283e:	b148      	cbz	r0, 8002854 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002840:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002842:	4a61      	ldr	r2, [pc, #388]	@ (80029c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002844:	f44f 7197 	mov.w	r1, #302	@ 0x12e
        lastError = AVI_ERROR_NOT_RIFF;
 8002848:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 800284c:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 800284e:	4860      	ldr	r0, [pc, #384]	@ (80029d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002850:	f020 fb5e 	bl	8022f10 <__assert_func>
    currentMovieOffset += 8;
 8002854:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002858:	2304      	movs	r3, #4
 800285a:	4a5e      	ldr	r2, [pc, #376]	@ (80029d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 800285c:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800285e:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002860:	f7ff fefc 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002864:	b138      	cbz	r0, 8002876 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002866:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002868:	4a57      	ldr	r2, [pc, #348]	@ (80029c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800286a:	f44f 719b 	mov.w	r1, #310	@ 0x136
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800286e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002872:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002874:	e7eb      	b.n	800284e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002876:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800287a:	2304      	movs	r3, #4
 800287c:	4a57      	ldr	r2, [pc, #348]	@ (80029dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800287e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002880:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002882:	f7ff feeb 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002886:	4607      	mov	r7, r0
 8002888:	b138      	cbz	r0, 800289a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800288a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 800288c:	4a4e      	ldr	r2, [pc, #312]	@ (80029c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800288e:	f240 113d 	movw	r1, #317	@ 0x13d
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002892:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002896:	4b52      	ldr	r3, [pc, #328]	@ (80029e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002898:	e7d9      	b.n	800284e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800289a:	f106 0110 	add.w	r1, r6, #16
 800289e:	4620      	mov	r0, r4
 80028a0:	f7ff feec 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80028a4:	4605      	mov	r5, r0
 80028a6:	b920      	cbnz	r0, 80028b2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80028a8:	4b4e      	ldr	r3, [pc, #312]	@ (80029e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80028aa:	f240 1143 	movw	r1, #323	@ 0x143
 80028ae:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80028b0:	e7cd      	b.n	800284e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80028b2:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80028b6:	2304      	movs	r3, #4
 80028b8:	4a4b      	ldr	r2, [pc, #300]	@ (80029e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80028ba:	4620      	mov	r0, r4
 80028bc:	4641      	mov	r1, r8
 80028be:	f7ff fecd 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d049      	beq.n	800295a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80028c6:	2306      	movs	r3, #6
 80028c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80028cc:	2304      	movs	r3, #4
 80028ce:	4a47      	ldr	r2, [pc, #284]	@ (80029ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80028d0:	f106 0118 	add.w	r1, r6, #24
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7ff fec1 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d03f      	beq.n	800295e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80028de:	2307      	movs	r3, #7
 80028e0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80028e4:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028e6:	4f42      	ldr	r7, [pc, #264]	@ (80029f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80028e8:	220c      	movs	r2, #12
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7ff fef3 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028f2:	f105 0608 	add.w	r6, r5, #8
 80028f6:	2304      	movs	r3, #4
 80028f8:	463a      	mov	r2, r7
 80028fa:	4620      	mov	r0, r4
 80028fc:	4631      	mov	r1, r6
 80028fe:	f7ff fead 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002902:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002906:	2800      	cmp	r0, #0
 8002908:	d048      	beq.n	800299c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d148      	bne.n	80029a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 800290e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002910:	42ab      	cmp	r3, r5
 8002912:	d849      	bhi.n	80029a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002914:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002918:	3504      	adds	r5, #4
 800291a:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800291c:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800291e:	4629      	mov	r1, r5
 8002920:	f7ff feac 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002924:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002926:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002928:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fea6 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002930:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002932:	2204      	movs	r2, #4
 8002934:	4620      	mov	r0, r4
 8002936:	4631      	mov	r1, r6
 8002938:	f7ff fece 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800293c:	2304      	movs	r3, #4
 800293e:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002940:	4631      	mov	r1, r6
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fe8a 	bl	800265c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002948:	2800      	cmp	r0, #0
 800294a:	d138      	bne.n	80029be <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 800294c:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800294e:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002950:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002952:	69a3      	ldr	r3, [r4, #24]
 8002954:	6223      	str	r3, [r4, #32]
}
 8002956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800295a:	2701      	movs	r7, #1
 800295c:	e7b6      	b.n	80028cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800295e:	2f00      	cmp	r7, #0
 8002960:	d0c0      	beq.n	80028e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002962:	f106 0120 	add.w	r1, r6, #32
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff fe88 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
 800296c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002970:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002974:	fbb0 f0f3 	udiv	r0, r0, r3
 8002978:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800297a:	4620      	mov	r0, r4
 800297c:	f7ff fe7e 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002980:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002984:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002986:	4620      	mov	r0, r4
 8002988:	f7ff fe78 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800298c:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002990:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff fe72 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002998:	6120      	str	r0, [r4, #16]
 800299a:	e7a3      	b.n	80028e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0b9      	beq.n	8002914 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80029a0:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80029a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80029a6:	e7d6      	b.n	8002956 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80029a8:	1d29      	adds	r1, r5, #4
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff fe66 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80029b0:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80029b2:	220c      	movs	r2, #12
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f7ff fe8e 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80029bc:	e799      	b.n	80028f2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80029be:	230b      	movs	r3, #11
 80029c0:	e7ef      	b.n	80029a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80029c2:	bf00      	nop
 80029c4:	0802437a 	.word	0x0802437a
 80029c8:	08024398 	.word	0x08024398
 80029cc:	0802437f 	.word	0x0802437f
 80029d0:	0802424c 	.word	0x0802424c
 80029d4:	080243c5 	.word	0x080243c5
 80029d8:	080243ca 	.word	0x080243ca
 80029dc:	080243e2 	.word	0x080243e2
 80029e0:	080243e7 	.word	0x080243e7
 80029e4:	080243fd 	.word	0x080243fd
 80029e8:	08024409 	.word	0x08024409
 80029ec:	0802440e 	.word	0x0802440e
 80029f0:	08024413 	.word	0x08024413
 80029f4:	08024418 	.word	0x08024418

080029f8 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80029f8:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80029fc:	2200      	movs	r2, #0
 80029fe:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002a00:	f7ff bf0c 	b.w	800281c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08002a04 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002a04:	b510      	push	{r4, lr}
    movieData = 0;
 8002a06:	2300      	movs	r3, #0
{
 8002a08:	4604      	mov	r4, r0
 8002a0a:	4608      	mov	r0, r1
    movieData = 0;
 8002a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002a0e:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002a10:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4798      	blx	r3
 8002a16:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002a18:	4620      	mov	r0, r4
}
 8002a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002a1e:	f7ff befd 	b.w	800281c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002a24 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JPEG_output_is_paused = 0;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <JPEG_Decode_DMA+0x50>)
 8002a28:	2400      	movs	r4, #0
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002a2a:	4d13      	ldr	r5, [pc, #76]	@ (8002a78 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
 8002a2c:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <JPEG_Decode_DMA+0x58>)
 8002a30:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 8002a32:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <JPEG_Decode_DMA+0x5c>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002a34:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002a36:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002a38:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <JPEG_Decode_DMA+0x60>)
 8002a3a:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	@ (8002a88 <JPEG_Decode_DMA+0x64>)
 8002a3e:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <JPEG_Decode_DMA+0x68>)
 8002a42:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <JPEG_Decode_DMA+0x6c>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a46:	682a      	ldr	r2, [r5, #0]
 8002a48:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a4c:	701c      	strb	r4, [r3, #0]
 8002a4e:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002a50:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002a54:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a94 <JPEG_Decode_DMA+0x70>)
 8002a5e:	68d2      	ldr	r2, [r2, #12]
 8002a60:	436a      	muls	r2, r5
 8002a62:	9200      	str	r2, [sp, #0]
 8002a64:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f006 f8ef 	bl	8008c4c <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002a6e:	4620      	mov	r0, r4
 8002a70:	b003      	add	sp, #12
 8002a72:	bd30      	pop	{r4, r5, pc}
 8002a74:	24009ed8 	.word	0x24009ed8
 8002a78:	24009ec8 	.word	0x24009ec8
 8002a7c:	24009ebc 	.word	0x24009ebc
 8002a80:	24009ee8 	.word	0x24009ee8
 8002a84:	24009ee0 	.word	0x24009ee0
 8002a88:	24009ee4 	.word	0x24009ee4
 8002a8c:	24009ec4 	.word	0x24009ec4
 8002a90:	24000010 	.word	0x24000010
 8002a94:	24009ea4 	.word	0x24009ea4

08002a98 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002a98:	684b      	ldr	r3, [r1, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d115      	bne.n	8002aca <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002a9e:	68cb      	ldr	r3, [r1, #12]
 8002aa0:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002aa2:	bf1e      	ittt	ne
 8002aa4:	f023 030f 	bicne.w	r3, r3, #15
 8002aa8:	3310      	addne	r3, #16
 8002aaa:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002aac:	688b      	ldr	r3, [r1, #8]
 8002aae:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002ab0:	bf1e      	ittt	ne
 8002ab2:	f023 030f 	bicne.w	r3, r3, #15
 8002ab6:	3310      	addne	r3, #16
 8002ab8:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002aba:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002abc:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002abe:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002ac0:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002ac2:	4353      	muls	r3, r2
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8002b00 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d10e      	bne.n	8002aec <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002ace:	68cb      	ldr	r3, [r1, #12]
 8002ad0:	071a      	lsls	r2, r3, #28
 8002ad2:	d003      	beq.n	8002adc <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002ad4:	f023 030f 	bic.w	r3, r3, #15
 8002ad8:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002ada:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002adc:	688b      	ldr	r3, [r1, #8]
 8002ade:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002ae0:	bf1e      	ittt	ne
 8002ae2:	f023 0307 	bicne.w	r3, r3, #7
 8002ae6:	3308      	addne	r3, #8
 8002ae8:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002aea:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1fc      	bne.n	8002aea <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002af0:	68cb      	ldr	r3, [r1, #12]
 8002af2:	0758      	lsls	r0, r3, #29
 8002af4:	d0f2      	beq.n	8002adc <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002af6:	f023 0307 	bic.w	r3, r3, #7
 8002afa:	3308      	adds	r3, #8
 8002afc:	e7ed      	b.n	8002ada <HAL_JPEG_InfoReadyCallback+0x42>
 8002afe:	bf00      	nop
 8002b00:	24009ed0 	.word	0x24009ed0

08002b04 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002b04:	4a0b      	ldr	r2, [pc, #44]	@ (8002b34 <HAL_JPEG_GetDataCallback+0x30>)
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	440b      	add	r3, r1
    {
 8002b0a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002b0c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_JPEG_GetDataCallback+0x34>)
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d20c      	bcs.n	8002b30 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b16:	4c09      	ldr	r4, [pc, #36]	@ (8002b3c <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002b18:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b1a:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b1c:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b20:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b22:	bf28      	it	cs
 8002b24:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002b28:	6021      	str	r1, [r4, #0]
        }
    }
 8002b2a:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002b2c:	f006 b8f0 	b.w	8008d10 <HAL_JPEG_ConfigInputBuffer>
    }
 8002b30:	bc30      	pop	{r4, r5}
 8002b32:	4770      	bx	lr
 8002b34:	24009ee8 	.word	0x24009ee8
 8002b38:	24009ee4 	.word	0x24009ee4
 8002b3c:	24009ee0 	.word	0x24009ee0

08002b40 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b42:	4c20      	ldr	r4, [pc, #128]	@ (8002bc4 <HAL_JPEG_DataReadyCallback+0x84>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	4d20      	ldr	r5, [pc, #128]	@ (8002bc8 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002b48:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b4a:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002b4c:	4f1f      	ldr	r7, [pc, #124]	@ (8002bcc <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002b58:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <HAL_JPEG_DataReadyCallback+0x90>)
 8002b5c:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002b64:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	440a      	add	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d901      	bls.n	8002b7e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	5ceb      	ldrb	r3, [r5, r3]
 8002b84:	b133      	cbz	r3, 8002b94 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b86:	2102      	movs	r1, #2
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f006 f893 	bl	8008cb4 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_JPEG_DataReadyCallback+0x94>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	4630      	mov	r0, r6
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002b9e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002ba2:	6869      	ldr	r1, [r5, #4]
 8002ba4:	435a      	muls	r2, r3
 8002ba6:	f006 f8b6 	bl	8008d16 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_JPEG_DataReadyCallback+0x98>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	7a1a      	ldrb	r2, [r3, #8]
 8002bb0:	b93a      	cbnz	r2, 8002bc2 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002bb2:	7a9b      	ldrb	r3, [r3, #10]
 8002bb4:	b92b      	cbnz	r3, 8002bc2 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_JPEG_DataReadyCallback+0x9c>)
 8002bb8:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002bbe:	f009 bee5 	b.w	800c98c <osSemaphoreRelease>
    }
 8002bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bc4:	24009ec8 	.word	0x24009ec8
 8002bc8:	24000010 	.word	0x24000010
 8002bcc:	24009ea4 	.word	0x24009ea4
 8002bd0:	24009ec4 	.word	0x24009ec4
 8002bd4:	24009ed8 	.word	0x24009ed8
 8002bd8:	24009ecc 	.word	0x24009ecc
 8002bdc:	24009ec0 	.word	0x24009ec0

08002be0 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002be2:	e7fe      	b.n	8002be2 <HAL_JPEG_ErrorCallback+0x2>

08002be4 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002be4:	4b01      	ldr	r3, [pc, #4]	@ (8002bec <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]
    }
 8002bea:	4770      	bx	lr
 8002bec:	24009edc 	.word	0x24009edc

08002bf0 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002bf0:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002bf2:	4d16      	ldr	r5, [pc, #88]	@ (8002c4c <JPEG_OutputHandler+0x5c>)
{
 8002bf4:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002bf6:	682b      	ldr	r3, [r5, #0]
 8002bf8:	b113      	cbz	r3, 8002c00 <JPEG_OutputHandler+0x10>
 8002bfa:	4b15      	ldr	r3, [pc, #84]	@ (8002c50 <JPEG_OutputHandler+0x60>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	bb1b      	cbnz	r3, 8002c48 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <JPEG_OutputHandler+0x64>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	7a03      	ldrb	r3, [r0, #8]
 8002c06:	b963      	cbnz	r3, 8002c22 <JPEG_OutputHandler+0x32>
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <JPEG_OutputHandler+0x68>)
 8002c0a:	4a14      	ldr	r2, [pc, #80]	@ (8002c5c <JPEG_OutputHandler+0x6c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	5cd3      	ldrb	r3, [r2, r3]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <JPEG_OutputHandler+0x32>
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <JPEG_OutputHandler+0x60>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b913      	cbnz	r3, 8002c22 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002c1c:	6803      	ldr	r3, [r0, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002c22:	4a0f      	ldr	r2, [pc, #60]	@ (8002c60 <JPEG_OutputHandler+0x70>)
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d10c      	bne.n	8002c44 <JPEG_OutputHandler+0x54>
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c64 <JPEG_OutputHandler+0x74>)
 8002c2c:	490b      	ldr	r1, [pc, #44]	@ (8002c5c <JPEG_OutputHandler+0x6c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	b933      	cbnz	r3, 8002c44 <JPEG_OutputHandler+0x54>
 8002c36:	682b      	ldr	r3, [r5, #0]
 8002c38:	b923      	cbnz	r3, 8002c44 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002c3e:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002c40:	f006 fa95 	bl	800916e <HAL_JPEG_Resume>
        return 1;
 8002c44:	2002      	movs	r0, #2
    }

    return 2;
}
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002c48:	2001      	movs	r0, #1
 8002c4a:	e7fc      	b.n	8002c46 <JPEG_OutputHandler+0x56>
 8002c4c:	24009edc 	.word	0x24009edc
 8002c50:	24009eb8 	.word	0x24009eb8
 8002c54:	24009ecc 	.word	0x24009ecc
 8002c58:	24009ebc 	.word	0x24009ebc
 8002c5c:	24000010 	.word	0x24000010
 8002c60:	24009ed8 	.word	0x24009ed8
 8002c64:	24009ec8 	.word	0x24009ec8

08002c68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	4605      	mov	r5, r0
    if (length == 0)
 8002c6c:	2a00      	cmp	r2, #0
 8002c6e:	d037      	beq.n	8002ce0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d035      	beq.n	8002ce0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002c74:	481b      	ldr	r0, [pc, #108]	@ (8002ce4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002c76:	2403      	movs	r4, #3
 8002c78:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c7a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002c7c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c7e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c82:	bf18      	it	ne
 8002c84:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c88:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c8a:	bf18      	it	ne
 8002c8c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c8e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002c90:	0924      	lsrs	r4, r4, #4
 8002c92:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002c94:	692c      	ldr	r4, [r5, #16]
 8002c96:	f014 040f 	ands.w	r4, r4, #15
 8002c9a:	bf18      	it	ne
 8002c9c:	f1c4 0410 	rsbne	r4, r4, #16
 8002ca0:	6084      	str	r4, [r0, #8]
        FrameBufferAddress = outputBuffer;
 8002ca2:	4811      	ldr	r0, [pc, #68]	@ (8002ce8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ca4:	4c11      	ldr	r4, [pc, #68]	@ (8002cec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
        FrameBufferAddress = outputBuffer;
 8002ca6:	6003      	str	r3, [r0, #0]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002ca8:	4811      	ldr	r0, [pc, #68]	@ (8002cf0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002caa:	f7ff febb 	bl	8002a24 <JPEG_Decode_DMA>
        DMA2D_reference = dma;
 8002cae:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002cb0:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002cb2:	4d0f      	ldr	r5, [pc, #60]	@ (8002cf0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
        DMA2D_reference = dma;
 8002cb4:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f7ff ff9a 	bl	8002bf0 <JPEG_OutputHandler>
 8002cbc:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d105      	bne.n	8002cd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x68>
                SEM_WAIT(semDecodingDone);
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	f009 fe32 	bl	800c934 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d1ef      	bne.n	8002cb6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4e>
        Jpeg_HWDecodingEnd = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x94>)
 8002cda:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002cdc:	4a08      	ldr	r2, [pc, #32]	@ (8002d00 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x98>)
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
 8002ce2:	bf00      	nop
 8002ce4:	24009ea4 	.word	0x24009ea4
 8002ce8:	24009eec 	.word	0x24009eec
 8002cec:	24009ed4 	.word	0x24009ed4
 8002cf0:	24009cbc 	.word	0x24009cbc
 8002cf4:	24009ecc 	.word	0x24009ecc
 8002cf8:	24009ec0 	.word	0x24009ec0
 8002cfc:	24009edc 	.word	0x24009edc
 8002d00:	24009eb8 	.word	0x24009eb8

08002d04 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d08:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002d0a:	6943      	ldr	r3, [r0, #20]
{
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	4604      	mov	r4, r0
 8002d10:	460f      	mov	r7, r1
 8002d12:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002d14:	b92b      	cbnz	r3, 8002d22 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002d16:	4b29      	ldr	r3, [pc, #164]	@ (8002dbc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002d18:	21b2      	movs	r1, #178	@ 0xb2
 8002d1a:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002d1c:	4829      	ldr	r0, [pc, #164]	@ (8002dc4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002d1e:	f020 f8f7 	bl	8022f10 <__assert_func>
    readData(currentMovieOffset, 8);
 8002d22:	2208      	movs	r2, #8
 8002d24:	6981      	ldr	r1, [r0, #24]
 8002d26:	f7ff fcd7 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002d2a:	69a6      	ldr	r6, [r4, #24]
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	4631      	mov	r1, r6
 8002d30:	f7ff fcbf 	bl	80026b2 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d34:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002d36:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7ff fcba 	bl	80026b2 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d3e:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002d40:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d42:	4620      	mov	r0, r4
 8002d44:	f7ff fc9a 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002d48:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002d4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002d4e:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002d50:	180a      	adds	r2, r1, r0
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d226      	bcs.n	8002da4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002d56:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002d5a:	459b      	cmp	fp, r3
 8002d5c:	d117      	bne.n	8002d8e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002d5e:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002d62:	459a      	cmp	sl, r3
 8002d64:	d113      	bne.n	8002d8e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002d66:	b190      	cbz	r0, 8002d8e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d68:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002d6a:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff fcb3 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d74:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002d76:	462a      	mov	r2, r5
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f8cd 8000 	str.w	r8, [sp]
 8002d7e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002d82:	463b      	mov	r3, r7
 8002d84:	f7ff ff70 	bl	8002c68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002d88:	6963      	ldr	r3, [r4, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002d8e:	69a3      	ldr	r3, [r4, #24]
 8002d90:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002d92:	b905      	cbnz	r5, 8002d96 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002d94:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d96:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d98:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d9e:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002da0:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002da2:	d109      	bne.n	8002db8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002da4:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002da6:	2001      	movs	r0, #1
        frameNumber = 1;
 8002da8:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002daa:	6a23      	ldr	r3, [r4, #32]
 8002dac:	61a3      	str	r3, [r4, #24]
}
 8002dae:	f080 0001 	eor.w	r0, r0, #1
 8002db2:	b005      	add	sp, #20
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002db8:	2000      	movs	r0, #0
 8002dba:	e7f8      	b.n	8002dae <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002dbc:	080242fe 	.word	0x080242fe
 8002dc0:	0802441d 	.word	0x0802441d
 8002dc4:	0802424c 	.word	0x0802424c

08002dc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002dcc:	6981      	ldr	r1, [r0, #24]
{
 8002dce:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	f7ff fc81 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002dd6:	69a7      	ldr	r7, [r4, #24]
 8002dd8:	4620      	mov	r0, r4
 8002dda:	1d39      	adds	r1, r7, #4
 8002ddc:	f7ff fc4e 	bl	800267c <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002de0:	f107 0108 	add.w	r1, r7, #8
 8002de4:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002de6:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff fc75 	bl	80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002dee:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002df0:	b16e      	cbz	r6, 8002e0e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002df2:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002df4:	4c07      	ldr	r4, [pc, #28]	@ (8002e14 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002df6:	4d08      	ldr	r5, [pc, #32]	@ (8002e18 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002df8:	4633      	mov	r3, r6
 8002dfa:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002dfc:	f7ff fe12 	bl	8002a24 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002e00:	4628      	mov	r0, r5
 8002e02:	f7ff fef5 	bl	8002bf0 <JPEG_OutputHandler>
 8002e06:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f8      	beq.n	8002e00 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002e0e:	2001      	movs	r0, #1
 8002e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	24009ed4 	.word	0x24009ed4
 8002e18:	24009cbc 	.word	0x24009cbc

08002e1c <DMA2D_CopyBuffer>:
 * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
 * @param job: External job reference
 * @retval None
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
 8002e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t yRef, refline;
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002e1e:	68c7      	ldr	r7, [r0, #12]
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e20:	2201      	movs	r2, #1
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002e22:	4c15      	ldr	r4, [pc, #84]	@ (8002e78 <DMA2D_CopyBuffer+0x5c>)
 8002e24:	0139      	lsls	r1, r7, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002e26:	4e15      	ldr	r6, [pc, #84]	@ (8002e7c <DMA2D_CopyBuffer+0x60>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	fbb1 f1f3 	udiv	r1, r1, r3
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002e2e:	6863      	ldr	r3, [r4, #4]
 8002e30:	4359      	muls	r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <DMA2D_CopyBuffer+0x64>)
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
    refline = JPEG_ConvertorParams.ScaledWidth * yRef;
 8002e36:	0109      	lsls	r1, r1, #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002e38:	68e2      	ldr	r2, [r4, #12]
 8002e3a:	6836      	ldr	r6, [r6, #0]
    {
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e3c:	0515      	lsls	r5, r2, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002e3e:	1ab6      	subs	r6, r6, r2
 8002e40:	42b7      	cmp	r7, r6
 8002e42:	d315      	bcc.n	8002e70 <DMA2D_CopyBuffer+0x54>
        WRITE_REG(DMA2D->NLR, ((MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight) | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e44:	68a4      	ldr	r4, [r4, #8]
 8002e46:	f1c4 0410 	rsb	r4, r4, #16
 8002e4a:	432c      	orrs	r4, r5
 8002e4c:	645c      	str	r4, [r3, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002e4e:	4c0d      	ldr	r4, [pc, #52]	@ (8002e84 <DMA2D_CopyBuffer+0x68>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e50:	f1c2 0232 	rsb	r2, r2, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002e54:	6824      	ldr	r4, [r4, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e56:	0112      	lsls	r2, r2, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress + refline)));
 8002e58:	4421      	add	r1, r4
 8002e5a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002e62:	4a09      	ldr	r2, [pc, #36]	@ (8002e88 <DMA2D_CopyBuffer+0x6c>)
 8002e64:	61da      	str	r2, [r3, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002e66:	6842      	ldr	r2, [r0, #4]
 8002e68:	60da      	str	r2, [r3, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e6a:	4a08      	ldr	r2, [pc, #32]	@ (8002e8c <DMA2D_CopyBuffer+0x70>)
 8002e6c:	601a      	str	r2, [r3, #0]
}
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e70:	f045 0510 	orr.w	r5, r5, #16
 8002e74:	645d      	str	r5, [r3, #68]	@ 0x44
 8002e76:	e7ea      	b.n	8002e4e <DMA2D_CopyBuffer+0x32>
 8002e78:	24009ea4 	.word	0x24009ea4
 8002e7c:	24009ed0 	.word	0x24009ed0
 8002e80:	52001000 	.word	0x52001000
 8002e84:	24009eec 	.word	0x24009eec
 8002e88:	ff09000b 	.word	0xff09000b
 8002e8c:	00012301 	.word	0x00012301

08002e90 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002e92:	2200      	movs	r2, #0
 8002e94:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002e96:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002e98:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002e9a:	3101      	adds	r1, #1
 8002e9c:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	2901      	cmp	r1, #1
 8002ea2:	d900      	bls.n	8002ea6 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002ea6:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <DMA2D_ExternalJobCompleted+0x38>)
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <DMA2D_ExternalJobCompleted+0x3c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68d2      	ldr	r2, [r2, #12]
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	68c2      	ldr	r2, [r0, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <DMA2D_ExternalJobCompleted+0x40>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <DMA2D_ExternalJobCompleted+0x44>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	f009 bd64 	b.w	800c98c <osSemaphoreRelease>
 8002ec4:	24009ebc 	.word	0x24009ebc
 8002ec8:	24009ed0 	.word	0x24009ed0
 8002ecc:	24009ea4 	.word	0x24009ea4
 8002ed0:	24009eb8 	.word	0x24009eb8
 8002ed4:	24009ec0 	.word	0x24009ec0

08002ed8 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2200      	movs	r2, #0
{
 8002edc:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ede:	4608      	mov	r0, r1
 8002ee0:	f009 fcde 	bl	800c8a0 <osSemaphoreNew>
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002ee6:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002ee8:	b928      	cbnz	r0, 8002ef6 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002eea:	4b0a      	ldr	r3, [pc, #40]	@ (8002f14 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002eec:	2128      	movs	r1, #40	@ 0x28
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ef0:	480a      	ldr	r0, [pc, #40]	@ (8002f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002ef2:	f020 f80d 	bl	8022f10 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2104      	movs	r1, #4
 8002efa:	2001      	movs	r0, #1
 8002efc:	f009 fd6f 	bl	800c9de <osMessageQueueNew>
 8002f00:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002f02:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002f04:	b918      	cbnz	r0, 8002f0e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002f08:	212c      	movs	r1, #44	@ 0x2c
 8002f0a:	4a03      	ldr	r2, [pc, #12]	@ (8002f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002f0c:	e7f0      	b.n	8002ef0 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002f0e:	bd08      	pop	{r3, pc}
 8002f10:	24009ef4 	.word	0x24009ef4
 8002f14:	08024478 	.word	0x08024478
 8002f18:	080244c1 	.word	0x080244c1
 8002f1c:	080244f0 	.word	0x080244f0
 8002f20:	24009ef0 	.word	0x24009ef0
 8002f24:	08024543 	.word	0x08024543

08002f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002f28:	4b02      	ldr	r3, [pc, #8]	@ (8002f34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002f2a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	f009 bd00 	b.w	800c934 <osSemaphoreAcquire>
 8002f34:	24009ef4 	.word	0x24009ef4

08002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002f38:	4b01      	ldr	r3, [pc, #4]	@ (8002f40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	f009 bd26 	b.w	800c98c <osSemaphoreRelease>
 8002f40:	24009ef4 	.word	0x24009ef4

08002f44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002f44:	4b02      	ldr	r3, [pc, #8]	@ (8002f50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002f46:	2100      	movs	r1, #0
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	f009 bcf3 	b.w	800c934 <osSemaphoreAcquire>
 8002f4e:	bf00      	nop
 8002f50:	24009ef4 	.word	0x24009ef4

08002f54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002f54:	f7ff bff0 	b.w	8002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002f58 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4803      	ldr	r0, [pc, #12]	@ (8002f68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002f5c:	4903      	ldr	r1, [pc, #12]	@ (8002f6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6800      	ldr	r0, [r0, #0]
 8002f62:	f009 bd77 	b.w	800ca54 <osMessageQueuePut>
 8002f66:	bf00      	nop
 8002f68:	24009ef0 	.word	0x24009ef0
 8002f6c:	24000030 	.word	0x24000030

08002f70 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002f70:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002f72:	2300      	movs	r3, #0
 8002f74:	4c07      	ldr	r4, [pc, #28]	@ (8002f94 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002f76:	a901      	add	r1, sp, #4
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6820      	ldr	r0, [r4, #0]
 8002f7c:	f009 fd9b 	bl	800cab6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002f80:	f04f 33ff 	mov.w	r3, #4294967295
 8002f84:	2200      	movs	r2, #0
 8002f86:	a901      	add	r1, sp, #4
 8002f88:	6820      	ldr	r0, [r4, #0]
 8002f8a:	f009 fd94 	bl	800cab6 <osMessageQueueGet>
}
 8002f8e:	b002      	add	sp, #8
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	24009ef0 	.word	0x24009ef0

08002f98 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002f98:	6803      	ldr	r3, [r0, #0]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9c:	4718      	bx	r3

08002f9e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	4770      	bx	lr

08002fa2 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <DMA2D_XferErrorCallback>

08002fa4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002fa4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002fa8:	4770      	bx	lr
	...

08002fac <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002fb8:	f009 fc30 	bl	800c81c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002fbc:	6860      	ldr	r0, [r4, #4]
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4798      	blx	r3
 8002fc4:	b978      	cbnz	r0, 8002fe6 <_ZN8STM32DMA5startEv+0x3a>
 8002fc6:	7a63      	ldrb	r3, [r4, #9]
 8002fc8:	b16b      	cbz	r3, 8002fe6 <_ZN8STM32DMA5startEv+0x3a>
 8002fca:	7a23      	ldrb	r3, [r4, #8]
 8002fcc:	b95b      	cbnz	r3, 8002fe6 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002fce:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002fda:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002fe2:	f009 bc3e 	b.w	800c862 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002fe6:	490b      	ldr	r1, [pc, #44]	@ (8003014 <_ZN8STM32DMA5startEv+0x68>)
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8003018 <_ZN8STM32DMA5startEv+0x6c>)
 8002fea:	680b      	ldr	r3, [r1, #0]
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d1f2      	bne.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
 8002ff4:	7a20      	ldrb	r0, [r4, #8]
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d1ef      	bne.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
 8002ffa:	7aa0      	ldrb	r0, [r4, #10]
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1ec      	bne.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003000:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8003002:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003006:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 800300a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800300c:	f7ff ff06 	bl	8002e1c <DMA2D_CopyBuffer>
    }
 8003010:	e7e3      	b.n	8002fda <_ZN8STM32DMA5startEv+0x2e>
 8003012:	bf00      	nop
 8003014:	24009ebc 	.word	0x24009ebc
 8003018:	24000010 	.word	0x24000010

0800301c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800301e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003022:	6003      	str	r3, [r0, #0]
 8003024:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <_ZN8STM32DMAD1Ev+0x1c>)
 8003026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800302a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800302e:	f3bf 8f6f 	isb	sy
}
 8003032:	4770      	bx	lr
 8003034:	080260a8 	.word	0x080260a8
 8003038:	e000e100 	.word	0xe000e100

0800303c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800303c:	b510      	push	{r4, lr}
 800303e:	4604      	mov	r4, r0
}
 8003040:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8003044:	f7ff ffea 	bl	800301c <_ZN8STM32DMAD1Ev>
 8003048:	4620      	mov	r0, r4
 800304a:	f01f fbeb 	bl	8022824 <_ZdlPvj>
 800304e:	4620      	mov	r0, r4
 8003050:	bd10      	pop	{r4, pc}
	...

08003054 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8003056:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003058:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800305c:	f042 0210 	orr.w	r2, r2, #16
 8003060:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003064:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003068:	f002 0210 	and.w	r2, r2, #16
 800306c:	9201      	str	r2, [sp, #4]
 800306e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003070:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003072:	f042 0210 	orr.w	r2, r2, #16
 8003076:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003078:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <_ZN8STM32DMA10initializeEv+0x48>)
 8003082:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <_ZN8STM32DMA10initializeEv+0x4c>)
 8003084:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8003086:	4a07      	ldr	r2, [pc, #28]	@ (80030a4 <_ZN8STM32DMA10initializeEv+0x50>)
 8003088:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <_ZN8STM32DMA10initializeEv+0x54>)
 800308c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003090:	609a      	str	r2, [r3, #8]
}
 8003092:	b002      	add	sp, #8
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	58024400 	.word	0x58024400
 800309c:	24009d30 	.word	0x24009d30
 80030a0:	080032f1 	.word	0x080032f1
 80030a4:	08002fa3 	.word	0x08002fa3
 80030a8:	e000e100 	.word	0xe000e100

080030ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 80030ac:	b508      	push	{r3, lr}
    switch (format)
 80030ae:	280a      	cmp	r0, #10
 80030b0:	d809      	bhi.n	80030c6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 80030b2:	e8df f000 	tbb	[pc, r0]
 80030b6:	1006      	.short	0x1006
 80030b8:	0808080e 	.word	0x0808080e
 80030bc:	10101008 	.word	0x10101008
 80030c0:	10          	.byte	0x10
 80030c1:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80030c2:	2002      	movs	r0, #2
}
 80030c4:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 80030c8:	2191      	movs	r1, #145	@ 0x91
 80030ca:	4a05      	ldr	r2, [pc, #20]	@ (80030e0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80030cc:	4805      	ldr	r0, [pc, #20]	@ (80030e4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80030ce:	f01f ff1f 	bl	8022f10 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80030d2:	2000      	movs	r0, #0
 80030d4:	e7f6      	b.n	80030c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80030d6:	2001      	movs	r0, #1
    return dma2dColorMode;
 80030d8:	e7f4      	b.n	80030c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80030da:	bf00      	nop
 80030dc:	08024585 	.word	0x08024585
 80030e0:	080245a0 	.word	0x080245a0
 80030e4:	080245eb 	.word	0x080245eb

080030e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80030ec:	7f88      	ldrb	r0, [r1, #30]
 80030ee:	f7ff ffdd 	bl	80030ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030f4:	8aa5      	ldrh	r5, [r4, #20]
 80030f6:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030f8:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030fe:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003102:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003104:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003106:	1b52      	subs	r2, r2, r5
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800310a:	6825      	ldr	r5, [r4, #0]
 800310c:	2d08      	cmp	r5, #8
 800310e:	d10e      	bne.n	800312e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003110:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003112:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003114:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003116:	4a0a      	ldr	r2, [pc, #40]	@ (8003140 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8003118:	7f20      	ldrb	r0, [r4, #28]
 800311a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800311e:	61da      	str	r2, [r3, #28]
        return color;
 8003120:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003122:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8003124:	4a07      	ldr	r2, [pc, #28]	@ (8003144 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003126:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003128:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 800312a:	601a      	str	r2, [r3, #0]
    }
}
 800312c:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800312e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003130:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8003132:	611a      	str	r2, [r3, #16]
 8003134:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003138:	4a03      	ldr	r2, [pc, #12]	@ (8003148 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 800313a:	e7f6      	b.n	800312a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800313c:	52001000 	.word	0x52001000
 8003140:	00010009 	.word	0x00010009
 8003144:	00022301 	.word	0x00022301
 8003148:	00032301 	.word	0x00032301

0800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 800314c:	b508      	push	{r3, lr}
    switch (format)
 800314e:	280b      	cmp	r0, #11
 8003150:	d80b      	bhi.n	800316a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8003152:	e8df f000 	tbb	[pc, r0]
 8003156:	1206      	.short	0x1206
 8003158:	0a0a0a10 	.word	0x0a0a0a10
 800315c:	0808080a 	.word	0x0808080a
 8003160:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003162:	2002      	movs	r0, #2
}
 8003164:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003166:	2005      	movs	r0, #5
        break;
 8003168:	e7fc      	b.n	8003164 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 800316c:	2170      	movs	r1, #112	@ 0x70
 800316e:	4a05      	ldr	r2, [pc, #20]	@ (8003184 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003170:	4805      	ldr	r0, [pc, #20]	@ (8003188 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8003172:	f01f fecd 	bl	8022f10 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003176:	2000      	movs	r0, #0
 8003178:	e7f4      	b.n	8003164 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800317a:	2001      	movs	r0, #1
    return dma2dColorMode;
 800317c:	e7f2      	b.n	8003164 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800317e:	bf00      	nop
 8003180:	08024585 	.word	0x08024585
 8003184:	0802463c 	.word	0x0802463c
 8003188:	080245eb 	.word	0x080245eb

0800318c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 800318c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003190:	7f4f      	ldrb	r7, [r1, #29]
{
 8003192:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003194:	4638      	mov	r0, r7
 8003196:	f7ff ffd9 	bl	800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800319a:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800319e:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7ff ffd3 	bl	800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80031a6:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80031a8:	4628      	mov	r0, r5
 80031aa:	f7ff ff7f 	bl	80030ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031ae:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 80031b2:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031b6:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031ba:	4b45      	ldr	r3, [pc, #276]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80031bc:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031be:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031c0:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80031c2:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80031c4:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031c6:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80031ca:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031d0:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80031d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031da:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80031dc:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80031de:	f8d9 4000 	ldr.w	r4, [r9]
 80031e2:	f899 201c 	ldrb.w	r2, [r9, #28]
 80031e6:	2c80      	cmp	r4, #128	@ 0x80
 80031e8:	d022      	beq.n	8003230 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80031ea:	d80f      	bhi.n	800320c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80031ec:	2c20      	cmp	r4, #32
 80031ee:	d066      	beq.n	80032be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80031f0:	2c40      	cmp	r4, #64	@ 0x40
 80031f2:	d064      	beq.n	80032be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80031f4:	2c04      	cmp	r4, #4
 80031f6:	d05c      	beq.n	80032b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031f8:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80031fc:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80031fe:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003200:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003204:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003206:	d060      	beq.n	80032ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003208:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800320a:	e03f      	b.n	800328c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 800320c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8003210:	d004      	beq.n	800321c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8003212:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003216:	d1ef      	bne.n	80031f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003218:	482f      	ldr	r0, [pc, #188]	@ (80032d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 800321a:	e000      	b.n	800321e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800321c:	482f      	ldr	r0, [pc, #188]	@ (80032dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800321e:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8003222:	61da      	str	r2, [r3, #28]
 8003224:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003228:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800322a:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800322c:	6159      	str	r1, [r3, #20]
 800322e:	e02c      	b.n	800328a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003230:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003234:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003238:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 800323c:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800323e:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003240:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003242:	1d21      	adds	r1, r4, #4
 8003244:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003246:	7821      	ldrb	r1, [r4, #0]
 8003248:	b141      	cbz	r1, 800325c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800324a:	2901      	cmp	r1, #1
 800324c:	d021      	beq.n	8003292 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003250:	f240 110b 	movw	r1, #267	@ 0x10b
 8003254:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003256:	4824      	ldr	r0, [pc, #144]	@ (80032e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003258:	f01f fe5a 	bl	8022f10 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	8861      	ldrh	r1, [r4, #2]
 8003260:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003264:	3901      	subs	r1, #1
 8003266:	f022 0210 	bic.w	r2, r2, #16
 800326a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800326e:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003270:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003272:	4b17      	ldr	r3, [pc, #92]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003274:	69d9      	ldr	r1, [r3, #28]
 8003276:	f041 0120 	orr.w	r1, r1, #32
 800327a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800327c:	69d9      	ldr	r1, [r3, #28]
 800327e:	0689      	lsls	r1, r1, #26
 8003280:	d4fc      	bmi.n	800327c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003282:	2110      	movs	r1, #16
 8003284:	6099      	str	r1, [r3, #8]
            if (blend)
 8003286:	2a00      	cmp	r2, #0
 8003288:	d0be      	beq.n	8003208 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800328a:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800328c:	601a      	str	r2, [r3, #0]
}
 800328e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003292:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003294:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003296:	8860      	ldrh	r0, [r4, #2]
 8003298:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 800329c:	bf18      	it	ne
 800329e:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80032a0:	3801      	subs	r0, #1
 80032a2:	f021 0110 	bic.w	r1, r1, #16
 80032a6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80032aa:	f041 0110 	orr.w	r1, r1, #16
 80032ae:	61d9      	str	r1, [r3, #28]
                break;
 80032b0:	e7df      	b.n	8003272 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80032b2:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80032b6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80032ba:	61da      	str	r2, [r3, #28]
 80032bc:	e7b5      	b.n	800322a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80032be:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80032c2:	4b03      	ldr	r3, [pc, #12]	@ (80032d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80032c4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80032c8:	e7f7      	b.n	80032ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80032ca:	f242 3201 	movw	r2, #8961	@ 0x2301
 80032ce:	e7dd      	b.n	800328c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80032d0:	52001000 	.word	0x52001000
 80032d4:	00012301 	.word	0x00012301
 80032d8:	00020009 	.word	0x00020009
 80032dc:	0002000a 	.word	0x0002000a
 80032e0:	08024686 	.word	0x08024686
 80032e4:	080246a0 	.word	0x080246a0
 80032e8:	080245eb 	.word	0x080245eb
 80032ec:	00022301 	.word	0x00022301

080032f0 <DMA2D_XferCpltCallback>:
 80032f0:	4b02      	ldr	r3, [pc, #8]	@ (80032fc <DMA2D_XferCpltCallback+0xc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80032f6:	6803      	ldr	r3, [r0, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4718      	bx	r3
 80032fc:	24025378 	.word	0x24025378

08003300 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8003300:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003308:	b9d3      	cbnz	r3, 8003340 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8003310:	4919      	ldr	r1, [pc, #100]	@ (8003378 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003312:	4a1a      	ldr	r2, [pc, #104]	@ (800337c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003314:	680b      	ldr	r3, [r1, #0]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d12a      	bne.n	8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800331e:	4818      	ldr	r0, [pc, #96]	@ (8003380 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8003320:	6800      	ldr	r0, [r0, #0]
 8003322:	bb38      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003324:	7a20      	ldrb	r0, [r4, #8]
 8003326:	bb28      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003328:	7aa0      	ldrb	r0, [r4, #10]
 800332a:	bb18      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800332c:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 800332e:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8003332:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003334:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800333c:	f7ff bd6e 	b.w	8002e1c <DMA2D_CopyBuffer>
        if (isRunning)
 8003340:	7a03      	ldrb	r3, [r0, #8]
 8003342:	b143      	cbz	r3, 8003356 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003344:	2300      	movs	r3, #0
 8003346:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800334e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8003352:	f7ff fd9d 	bl	8002e90 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003356:	6860      	ldr	r0, [r4, #4]
 8003358:	6803      	ldr	r3, [r0, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4798      	blx	r3
 800335e:	b948      	cbnz	r0, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003360:	7a63      	ldrb	r3, [r4, #9]
 8003362:	b13b      	cbz	r3, 8003374 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003364:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003366:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 800336a:	4620      	mov	r0, r4
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800336e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8003372:	4718      	bx	r3
    }
 8003374:	bd10      	pop	{r4, pc}
 8003376:	bf00      	nop
 8003378:	24009ebc 	.word	0x24009ebc
 800337c:	24000010 	.word	0x24000010
 8003380:	24009eb8 	.word	0x24009eb8

08003384 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <_ZN8STM32DMAC1Ev+0x40>)
 800338a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800338c:	2600      	movs	r6, #0
 800338e:	4625      	mov	r5, r4
 8003390:	2260      	movs	r2, #96	@ 0x60
 8003392:	6060      	str	r0, [r4, #4]
 8003394:	7226      	strb	r6, [r4, #8]
 8003396:	7266      	strb	r6, [r4, #9]
 8003398:	f845 3b20 	str.w	r3, [r5], #32
 800339c:	4629      	mov	r1, r5
 800339e:	f00c fd31 	bl	800fe04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80033a2:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80033a6:	60ee      	str	r6, [r5, #12]
 80033a8:	3524      	adds	r5, #36	@ 0x24
 80033aa:	429d      	cmp	r5, r3
 80033ac:	d1fb      	bne.n	80033a6 <_ZN8STM32DMAC1Ev+0x22>
 80033ae:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 80033b2:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80033b4:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80033b8:	f009 f9f8 	bl	800c7ac <osMutexNew>
 80033bc:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80033c0:	4620      	mov	r0, r4
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	080260a8 	.word	0x080260a8

080033c8 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80033c8:	4b03      	ldr	r3, [pc, #12]	@ (80033d8 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	07d2      	lsls	r2, r2, #31
 80033ce:	d4fc      	bmi.n	80033ca <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033d0:	2223      	movs	r2, #35	@ 0x23
 80033d2:	609a      	str	r2, [r3, #8]
}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	52001000 	.word	0x52001000

080033dc <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This function is used when decompressing data to flush
    // the currently decoded data in the cache to allow the DMA2D
    // to blend the pixels correctly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033dc:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80033de:	6953      	ldr	r3, [r2, #20]
 80033e0:	03db      	lsls	r3, r3, #15
 80033e2:	d511      	bpl.n	8003408 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80033e4:	2900      	cmp	r1, #0
 80033e6:	dd0f      	ble.n	8003408 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80033e8:	f000 031f 	and.w	r3, r0, #31
 80033ec:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80033ee:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80033f2:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80033f4:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80033f8:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80033fa:	1a0b      	subs	r3, r1, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	dcf9      	bgt.n	80033f4 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8003400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003404:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8003410:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003412:	4c10      	ldr	r4, [pc, #64]	@ (8003454 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003414:	6825      	ldr	r5, [r4, #0]
 8003416:	07ed      	lsls	r5, r5, #31
 8003418:	d4fc      	bmi.n	8003414 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800341a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800341c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800341e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003420:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003422:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003426:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800342a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800342c:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800342e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8003430:	d00c      	beq.n	800344c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003432:	4909      	ldr	r1, [pc, #36]	@ (8003458 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003434:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003438:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800343a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800343e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003442:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003444:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003446:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003448:	6023      	str	r3, [r4, #0]
    }
}
 800344a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800344c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800344e:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003450:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003452:	e7f9      	b.n	8003448 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003454:	52001000 	.word	0x52001000
 8003458:	00010009 	.word	0x00010009
 800345c:	00020001 	.word	0x00020001
 8003460:	00030001 	.word	0x00030001

08003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003464:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003466:	4c0e      	ldr	r4, [pc, #56]	@ (80034a0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003468:	6825      	ldr	r5, [r4, #0]
 800346a:	07ed      	lsls	r5, r5, #31
 800346c:	d4fc      	bmi.n	8003468 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800346e:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003470:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8003472:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003474:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003476:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800347a:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800347e:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003480:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003482:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003484:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003486:	d007      	beq.n	8003498 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003488:	4a06      	ldr	r2, [pc, #24]	@ (80034a4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 800348a:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800348e:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003490:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003492:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003494:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003496:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 800349a:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 800349c:	6025      	str	r5, [r4, #0]
}
 800349e:	e7fa      	b.n	8003496 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 80034a0:	52001000 	.word	0x52001000
 80034a4:	00020001 	.word	0x00020001
 80034a8:	ff020001 	.word	0xff020001

080034ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80034ac:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80034ae:	4c0b      	ldr	r4, [pc, #44]	@ (80034dc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 80034b0:	6825      	ldr	r5, [r4, #0]
 80034b2:	07ed      	lsls	r5, r5, #31
 80034b4:	d4fc      	bmi.n	80034b0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034b6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80034b8:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80034ba:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034bc:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80034be:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80034c4:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80034c6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80034c8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80034ca:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80034cc:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80034ce:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80034d0:	4b03      	ldr	r3, [pc, #12]	@ (80034e0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80034d2:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80034d4:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80034d6:	6023      	str	r3, [r4, #0]
}
 80034d8:	bd30      	pop	{r4, r5, pc}
 80034da:	bf00      	nop
 80034dc:	52001000 	.word	0x52001000
 80034e0:	00020001 	.word	0x00020001

080034e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80034e4:	2001      	movs	r0, #1
 80034e6:	4770      	bx	lr

080034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80034e8:	200c      	movs	r0, #12
 80034ea:	4770      	bx	lr

080034ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80034ec:	230c      	movs	r3, #12
 80034ee:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034f2:	3008      	adds	r0, #8
 80034f4:	4770      	bx	lr

080034f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80034f6:	230c      	movs	r3, #12
 80034f8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034fc:	3008      	adds	r0, #8
 80034fe:	4770      	bx	lr

08003500 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003500:	2001      	movs	r0, #1
 8003502:	4770      	bx	lr

08003504 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003504:	f44f 7004 	mov.w	r0, #528	@ 0x210
 8003508:	4770      	bx	lr

0800350a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800350a:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800350e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003512:	3008      	adds	r0, #8
 8003514:	4770      	bx	lr

08003516 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003516:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800351a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800351e:	3008      	adds	r0, #8
 8003520:	4770      	bx	lr

08003522 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003522:	2001      	movs	r0, #1
 8003524:	4770      	bx	lr

08003526 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003526:	2010      	movs	r0, #16
 8003528:	4770      	bx	lr

0800352a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800352a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800352e:	3008      	adds	r0, #8
 8003530:	4770      	bx	lr

08003532 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003532:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003536:	3008      	adds	r0, #8
 8003538:	4770      	bx	lr

0800353a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800353a:	4608      	mov	r0, r1
 800353c:	f000 beec 	b.w	8004318 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08003540 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003540:	4b03      	ldr	r3, [pc, #12]	@ (8003550 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	6003      	str	r3, [r0, #0]
 8003548:	f00b fa87 	bl	800ea5a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800354c:	4620      	mov	r0, r4
 800354e:	bd10      	pop	{r4, pc}
 8003550:	08026160 	.word	0x08026160

08003554 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003554:	b510      	push	{r4, lr}
 8003556:	4604      	mov	r4, r0
 8003558:	f7ff fff2 	bl	8003540 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800355c:	2114      	movs	r1, #20
 800355e:	4620      	mov	r0, r4
 8003560:	f01f f960 	bl	8022824 <_ZdlPvj>
 8003564:	4620      	mov	r0, r4
 8003566:	bd10      	pop	{r4, pc}

08003568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800356a:	b510      	push	{r4, lr}
 800356c:	4604      	mov	r4, r0
 800356e:	6003      	str	r3, [r0, #0]
 8003570:	f00b fa73 	bl	800ea5a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003574:	4620      	mov	r0, r4
 8003576:	bd10      	pop	{r4, pc}
 8003578:	0802612c 	.word	0x0802612c

0800357c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800357c:	b510      	push	{r4, lr}
 800357e:	4604      	mov	r4, r0
 8003580:	f7ff fff2 	bl	8003568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003584:	f44f 7106 	mov.w	r1, #536	@ 0x218
 8003588:	4620      	mov	r0, r4
 800358a:	f01f f94b 	bl	8022824 <_ZdlPvj>
 800358e:	4620      	mov	r0, r4
 8003590:	bd10      	pop	{r4, pc}
	...

08003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003596:	b510      	push	{r4, lr}
 8003598:	4604      	mov	r4, r0
 800359a:	6003      	str	r3, [r0, #0]
 800359c:	f00b fa5d 	bl	800ea5a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80035a0:	4620      	mov	r0, r4
 80035a2:	bd10      	pop	{r4, pc}
 80035a4:	080260f8 	.word	0x080260f8

080035a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	f7ff fff2 	bl	8003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035b0:	2118      	movs	r1, #24
 80035b2:	4620      	mov	r0, r4
 80035b4:	f01f f936 	bl	8022824 <_ZdlPvj>
 80035b8:	4620      	mov	r0, r4
 80035ba:	bd10      	pop	{r4, pc}

080035bc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80035bc:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <_ZN12FrontendHeapD1Ev+0x24>)
 80035be:	b510      	push	{r4, lr}
 80035c0:	4604      	mov	r4, r0
 80035c2:	6003      	str	r3, [r0, #0]
 80035c4:	f500 7011 	add.w	r0, r0, #580	@ 0x244
 80035c8:	f7ff ffba 	bl	8003540 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035cc:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80035d0:	f7ff ffca 	bl	8003568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035d4:	f104 0014 	add.w	r0, r4, #20
 80035d8:	f7ff ffdc 	bl	8003594 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80035dc:	4620      	mov	r0, r4
 80035de:	bd10      	pop	{r4, pc}
 80035e0:	08026194 	.word	0x08026194

080035e4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80035e4:	b508      	push	{r3, lr}
 80035e6:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <__tcf_0+0xc>)
 80035e8:	f7ff ffe8 	bl	80035bc <_ZN12FrontendHeapD1Ev>
 80035ec:	bd08      	pop	{r3, pc}
 80035ee:	bf00      	nop
 80035f0:	2400adb8 	.word	0x2400adb8

080035f4 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	f7ff ffe0 	bl	80035bc <_ZN12FrontendHeapD1Ev>
 80035fc:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003600:	4620      	mov	r0, r4
 8003602:	f01f f90f 	bl	8022824 <_ZdlPvj>
 8003606:	4620      	mov	r0, r4
 8003608:	bd10      	pop	{r4, pc}
	...

0800360c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 800360c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003610:	f000 fc52 	bl	8003eb8 <_ZN14BitmapDatabase11getInstanceEv>
 8003614:	2400      	movs	r4, #0
 8003616:	4605      	mov	r5, r0
 8003618:	f000 fc52 	bl	8003ec0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800361c:	4623      	mov	r3, r4
 800361e:	4601      	mov	r1, r0
 8003620:	4622      	mov	r2, r4
 8003622:	4628      	mov	r0, r5
 8003624:	9400      	str	r4, [sp, #0]
 8003626:	f014 facf 	bl	8017bc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800362a:	4b27      	ldr	r3, [pc, #156]	@ (80036c8 <touchgfx_init+0xbc>)
 800362c:	4a27      	ldr	r2, [pc, #156]	@ (80036cc <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800362e:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003630:	4d27      	ldr	r5, [pc, #156]	@ (80036d0 <touchgfx_init+0xc4>)
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f001 fba8 	bl	8004d88 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003638:	4b26      	ldr	r3, [pc, #152]	@ (80036d4 <touchgfx_init+0xc8>)
 800363a:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 800363c:	4827      	ldr	r0, [pc, #156]	@ (80036dc <touchgfx_init+0xd0>)
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	f014 f96e 	bl	8017920 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	f3bf 8f5b 	dmb	ish
 800364a:	07db      	lsls	r3, r3, #31
 800364c:	d435      	bmi.n	80036ba <touchgfx_init+0xae>
 800364e:	4628      	mov	r0, r5
 8003650:	f01f f8ea 	bl	8022828 <__cxa_guard_acquire>
 8003654:	b388      	cbz	r0, 80036ba <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003656:	4c22      	ldr	r4, [pc, #136]	@ (80036e0 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003658:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800365a:	f504 7617 	add.w	r6, r4, #604	@ 0x25c
        : presenterStorage(pres),
 800365e:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8003662:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003666:	f504 7711 	add.w	r7, r4, #580	@ 0x244
 800366a:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 800366c:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800366e:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003672:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003674:	6126      	str	r6, [r4, #16]
 8003676:	f00b f9f1 	bl	800ea5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800367a:	4b1b      	ldr	r3, [pc, #108]	@ (80036e8 <touchgfx_init+0xdc>)
 800367c:	4640      	mov	r0, r8
 800367e:	6163      	str	r3, [r4, #20]
 8003680:	f00b f9ec 	bl	800ea5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <touchgfx_init+0xe0>)
 8003686:	4638      	mov	r0, r7
 8003688:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800368a:	f00b f9e7 	bl	800ea5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800368e:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <touchgfx_init+0xe4>)
 8003690:	f504 7016 	add.w	r0, r4, #600	@ 0x258
 8003694:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
 8003698:	f001 fbfa 	bl	8004e90 <_ZN5ModelC1Ev>
 800369c:	4622      	mov	r2, r4
 800369e:	f504 7116 	add.w	r1, r4, #600	@ 0x258
 80036a2:	4630      	mov	r0, r6
 80036a4:	f001 fbea 	bl	8004e7c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 fe35 	bl	8004318 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80036ae:	4811      	ldr	r0, [pc, #68]	@ (80036f4 <touchgfx_init+0xe8>)
 80036b0:	f01f fc4c 	bl	8022f4c <atexit>
 80036b4:	4628      	mov	r0, r5
 80036b6:	f01f f8c3 	bl	8022840 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80036ba:	480f      	ldr	r0, [pc, #60]	@ (80036f8 <touchgfx_init+0xec>)
}
 80036bc:	b002      	add	sp, #8
 80036be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80036c2:	f7fe bcd1 	b.w	8002068 <_ZN11TouchGFXHAL10initializeEv>
 80036c6:	bf00      	nop
 80036c8:	240253dc 	.word	0x240253dc
 80036cc:	24009f7c 	.word	0x24009f7c
 80036d0:	2400adb4 	.word	0x2400adb4
 80036d4:	24009f9c 	.word	0x24009f9c
 80036d8:	24009f80 	.word	0x24009f80
 80036dc:	24000034 	.word	0x24000034
 80036e0:	2400adb8 	.word	0x2400adb8
 80036e4:	08026194 	.word	0x08026194
 80036e8:	080260f8 	.word	0x080260f8
 80036ec:	0802612c 	.word	0x0802612c
 80036f0:	08026160 	.word	0x08026160
 80036f4:	080035e5 	.word	0x080035e5
 80036f8:	24009ef8 	.word	0x24009ef8

080036fc <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80036fc:	4770      	bx	lr
	...

08003700 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003700:	4801      	ldr	r0, [pc, #4]	@ (8003708 <touchgfx_taskEntry+0x8>)
 8003702:	f7fe bcc3 	b.w	800208c <_ZN11TouchGFXHAL9taskEntryEv>
 8003706:	bf00      	nop
 8003708:	24009ef8 	.word	0x24009ef8

0800370c <_GLOBAL__sub_I_touchgfx_init>:
}
 800370c:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 800370e:	4c0e      	ldr	r4, [pc, #56]	@ (8003748 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003710:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8003712:	4e0f      	ldr	r6, [pc, #60]	@ (8003750 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003714:	4620      	mov	r0, r4
static LCD24bpp display;
 8003716:	4d0f      	ldr	r5, [pc, #60]	@ (8003754 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003718:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 800371a:	f7ff fe33 	bl	8003384 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800371e:	4628      	mov	r0, r5
 8003720:	f018 f8f4 	bl	801b90c <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003724:	480c      	ldr	r0, [pc, #48]	@ (8003758 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003726:	f012 fa0f 	bl	8015b48 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800372a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800372e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003732:	4621      	mov	r1, r4
 8003734:	4809      	ldr	r0, [pc, #36]	@ (800375c <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003736:	e9cd 3200 	strd	r3, r2, [sp]
 800373a:	4633      	mov	r3, r6
 800373c:	462a      	mov	r2, r5
 800373e:	f7fe fd39 	bl	80021b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8003742:	b002      	add	sp, #8
 8003744:	bd70      	pop	{r4, r5, r6, pc}
 8003746:	bf00      	nop
 8003748:	2400a008 	.word	0x2400a008
 800374c:	08025f60 	.word	0x08025f60
 8003750:	2400adb0 	.word	0x2400adb0
 8003754:	24009f9c 	.word	0x24009f9c
 8003758:	24009f80 	.word	0x24009f80
 800375c:	24009ef8 	.word	0x24009ef8

08003760 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003760:	4801      	ldr	r0, [pc, #4]	@ (8003768 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003762:	f7ff bc5b 	b.w	800301c <_ZN8STM32DMAD1Ev>
 8003766:	bf00      	nop
 8003768:	2400a008 	.word	0x2400a008

0800376c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800376c:	2000      	movs	r0, #0
 800376e:	4770      	bx	lr

08003770 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003770:	8081      	strh	r1, [r0, #4]
    }
 8003772:	4770      	bx	lr

08003774 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003774:	80c1      	strh	r1, [r0, #6]
    }
 8003776:	4770      	bx	lr

08003778 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003778:	8101      	strh	r1, [r0, #8]
    }
 800377a:	4770      	bx	lr

0800377c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800377c:	8141      	strh	r1, [r0, #10]
    }
 800377e:	4770      	bx	lr

08003780 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003780:	4770      	bx	lr

08003782 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003782:	4770      	bx	lr

08003784 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003784:	4770      	bx	lr

08003786 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003786:	4770      	bx	lr

08003788 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003788:	4770      	bx	lr

0800378a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800378a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800378c:	88c4      	ldrh	r4, [r0, #6]
 800378e:	6803      	ldr	r3, [r0, #0]
 8003790:	1b12      	subs	r2, r2, r4
 8003792:	8884      	ldrh	r4, [r0, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	1b09      	subs	r1, r1, r4
 8003798:	b212      	sxth	r2, r2
    }
 800379a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800379e:	b209      	sxth	r1, r1
 80037a0:	4718      	bx	r3

080037a2 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80037a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037a6:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ac:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80037b2:	6010      	str	r0, [r2, #0]
    }
 80037b4:	4770      	bx	lr

080037b6 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80037b6:	2000      	movs	r0, #0
 80037b8:	4770      	bx	lr

080037ba <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80037ba:	888b      	ldrh	r3, [r1, #4]
 80037bc:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80037be:	2001      	movs	r0, #1
 80037c0:	4770      	bx	lr

080037c2 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80037c2:	4770      	bx	lr

080037c4 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80037c4:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80037c8:	4770      	bx	lr

080037ca <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80037ca:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80037ce:	4770      	bx	lr

080037d0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80037d0:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80037d2:	2200      	movs	r2, #0
        return rect.width;
 80037d4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80037d8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80037dc:	8002      	strh	r2, [r0, #0]
 80037de:	8042      	strh	r2, [r0, #2]
 80037e0:	8084      	strh	r4, [r0, #4]
 80037e2:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80037e4:	bd10      	pop	{r4, pc}

080037e6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80037e6:	2200      	movs	r2, #0
 80037e8:	8002      	strh	r2, [r0, #0]
 80037ea:	8042      	strh	r2, [r0, #2]
 80037ec:	8082      	strh	r2, [r0, #4]
 80037ee:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80037f0:	4770      	bx	lr

080037f2 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80037f2:	7701      	strb	r1, [r0, #28]
    }
 80037f4:	4770      	bx	lr

080037f6 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80037f6:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80037fa:	4770      	bx	lr

080037fc <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80037fc:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003800:	4770      	bx	lr

08003802 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 8003802:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003806:	4770      	bx	lr

08003808 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003808:	2001      	movs	r0, #1
 800380a:	4770      	bx	lr

0800380c <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 800380c:	3098      	adds	r0, #152	@ 0x98
 800380e:	4770      	bx	lr

08003810 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003810:	308c      	adds	r0, #140	@ 0x8c
 8003812:	4770      	bx	lr

08003814 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003814:	3084      	adds	r0, #132	@ 0x84
 8003816:	4770      	bx	lr

08003818 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003818:	4770      	bx	lr

0800381a <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800381a:	4770      	bx	lr

0800381c <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 800381c:	4770      	bx	lr
	...

08003820 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003820:	4b02      	ldr	r3, [pc, #8]	@ (800382c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003822:	2290      	movs	r2, #144	@ 0x90
 8003824:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003830:	4770      	bx	lr

08003832 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003832:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003834:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003838:	4770      	bx	lr

0800383a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800383a:	4770      	bx	lr

0800383c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 800383c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003840:	4611      	mov	r1, r2
 8003842:	6840      	ldr	r0, [r0, #4]
 8003844:	6803      	ldr	r3, [r0, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4718      	bx	r3

0800384a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 800384a:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800384e:	4770      	bx	lr

08003850 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003850:	b510      	push	{r4, lr}
 8003852:	4604      	mov	r4, r0
 8003854:	2148      	movs	r1, #72	@ 0x48
 8003856:	f01e ffe5 	bl	8022824 <_ZdlPvj>
 800385a:	4620      	mov	r0, r4
 800385c:	bd10      	pop	{r4, pc}

0800385e <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 800385e:	b510      	push	{r4, lr}
 8003860:	4604      	mov	r4, r0
 8003862:	212c      	movs	r1, #44	@ 0x2c
 8003864:	f01e ffde 	bl	8022824 <_ZdlPvj>
 8003868:	4620      	mov	r0, r4
 800386a:	bd10      	pop	{r4, pc}

0800386c <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800386c:	b510      	push	{r4, lr}
 800386e:	4604      	mov	r4, r0
 8003870:	21bc      	movs	r1, #188	@ 0xbc
 8003872:	f01e ffd7 	bl	8022824 <_ZdlPvj>
 8003876:	4620      	mov	r0, r4
 8003878:	bd10      	pop	{r4, pc}
	...

0800387c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4604      	mov	r4, r0
    HAL::initialize();
 8003880:	f00b fbe7 	bl	800f052 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8003888:	f010 fef0 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 800388c:	4601      	mov	r1, r0
 800388e:	4620      	mov	r0, r4
 8003890:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	4908      	ldr	r1, [pc, #32]	@ (80038b8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003896:	4620      	mov	r0, r4
 8003898:	f8d3 508c 	ldr.w	r5, [r3, #140]	@ 0x8c
 800389c:	2300      	movs	r3, #0
 800389e:	461a      	mov	r2, r3
 80038a0:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80038a2:	6863      	ldr	r3, [r4, #4]
 80038a4:	4a05      	ldr	r2, [pc, #20]	@ (80038bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80038a6:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80038aa:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80038ac:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80038b0:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80038b2:	4a05      	ldr	r2, [pc, #20]	@ (80038c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80038b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	d0119400 	.word	0xd0119400
 80038bc:	2400b278 	.word	0x2400b278
 80038c0:	2400b230 	.word	0x2400b230
 80038c4:	d0000000 	.word	0xd0000000
 80038c8:	00119400 	.word	0x00119400

080038cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4604      	mov	r4, r0
 80038d0:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80038d2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	f008 ffa0 	bl	800c81c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80038dc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80038de:	f008 ffc0 	bl	800c862 <osMutexRelease>
        streams[handle].isActive = false;
 80038e2:	2324      	movs	r3, #36	@ 0x24
 80038e4:	fb03 4505 	mla	r5, r3, r5, r4
 80038e8:	2300      	movs	r3, #0
 80038ea:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80038ee:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80038f2:	b90b      	cbnz	r3, 80038f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80038f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80038f6:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80038f8:	bd38      	pop	{r3, r4, r5, pc}

080038fa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80038fa:	f00b bb5b 	b.w	800efb4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080038fe <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80038fe:	f00b bcca 	b.w	800f296 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08003902 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8003902:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003906:	b112      	cbz	r2, 800390e <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003908:	6803      	ldr	r3, [r0, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	4718      	bx	r3
    }
 800390e:	4770      	bx	lr

08003910 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003910:	4a12      	ldr	r2, [pc, #72]	@ (800395c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8003912:	6953      	ldr	r3, [r2, #20]
 8003914:	03db      	lsls	r3, r3, #15
{
 8003916:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003918:	d51e      	bpl.n	8003958 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800391a:	2300      	movs	r3, #0
 800391c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003920:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003924:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003928:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800392c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003930:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003934:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003936:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800393a:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800393c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003940:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003942:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003946:	d2f9      	bcs.n	800393c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003948:	3b20      	subs	r3, #32
 800394a:	f113 0f20 	cmn.w	r3, #32
 800394e:	d1f2      	bne.n	8003936 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003954:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003958:	bd70      	pop	{r4, r5, r6, pc}
 800395a:	bf00      	nop
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003960:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003962:	b131      	cbz	r1, 8003972 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003964:	4b04      	ldr	r3, [pc, #16]	@ (8003978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003966:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800396a:	4a04      	ldr	r2, [pc, #16]	@ (800397c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 800396c:	4804      	ldr	r0, [pc, #16]	@ (8003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800396e:	f01f facf 	bl	8022f10 <__assert_func>
    }
 8003972:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003976:	bd08      	pop	{r3, pc}
 8003978:	080246de 	.word	0x080246de
 800397c:	080246f2 	.word	0x080246f2
 8003980:	0802487c 	.word	0x0802487c

08003984 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003984:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003986:	b131      	cbz	r1, 8003996 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003988:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800398a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800398e:	4a06      	ldr	r2, [pc, #24]	@ (80039a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003990:	4806      	ldr	r0, [pc, #24]	@ (80039ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003992:	f01f fabd 	bl	8022f10 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003996:	6840      	ldr	r0, [r0, #4]
 8003998:	4611      	mov	r1, r2
 800399a:	6803      	ldr	r3, [r0, #0]
    }
 800399c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	4718      	bx	r3
 80039a4:	080246de 	.word	0x080246de
 80039a8:	080248c6 	.word	0x080248c6
 80039ac:	0802487c 	.word	0x0802487c

080039b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80039b0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80039b2:	b129      	cbz	r1, 80039c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80039b4:	4b03      	ldr	r3, [pc, #12]	@ (80039c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80039b6:	2179      	movs	r1, #121	@ 0x79
 80039b8:	4a03      	ldr	r2, [pc, #12]	@ (80039c8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80039ba:	4804      	ldr	r0, [pc, #16]	@ (80039cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80039bc:	f01f faa8 	bl	8022f10 <__assert_func>
    }
 80039c0:	68c0      	ldr	r0, [r0, #12]
 80039c2:	bd08      	pop	{r3, pc}
 80039c4:	080246de 	.word	0x080246de
 80039c8:	08024a74 	.word	0x08024a74
 80039cc:	0802487c 	.word	0x0802487c

080039d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80039d0:	b510      	push	{r4, lr}
 80039d2:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80039d4:	b129      	cbz	r1, 80039e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80039d6:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80039d8:	21a2      	movs	r1, #162	@ 0xa2
 80039da:	4a19      	ldr	r2, [pc, #100]	@ (8003a40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80039dc:	4819      	ldr	r0, [pc, #100]	@ (8003a44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80039de:	f01f fa97 	bl	8022f10 <__assert_func>
        switch (cmd)
 80039e2:	2a05      	cmp	r2, #5
 80039e4:	d815      	bhi.n	8003a12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80039e6:	e8df f002 	tbb	[pc, r2]
 80039ea:	1103      	.short	0x1103
 80039ec:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80039f0:	6840      	ldr	r0, [r0, #4]
 80039f2:	6803      	ldr	r3, [r0, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	4798      	blx	r3
 80039f8:	b158      	cbz	r0, 8003a12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003a00:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003a04:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003a06:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003a0a:	e002      	b.n	8003a12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 8003a12:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003a14:	6203      	str	r3, [r0, #32]
 8003a16:	e7f5      	b.n	8003a04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003a18:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003a20:	e7f0      	b.n	8003a04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	6203      	str	r3, [r0, #32]
            break;
 8003a2c:	e7f1      	b.n	8003a12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003a2e:	3b00      	subs	r3, #0
 8003a30:	bf18      	it	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003a38:	e7eb      	b.n	8003a12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003a3a:	bf00      	nop
 8003a3c:	080246de 	.word	0x080246de
 8003a40:	08024c29 	.word	0x08024c29
 8003a44:	0802487c 	.word	0x0802487c

08003a48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003a48:	b510      	push	{r4, lr}
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003a50:	b12c      	cbz	r4, 8003a5e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003a54:	2190      	movs	r1, #144	@ 0x90
 8003a56:	4a06      	ldr	r2, [pc, #24]	@ (8003a70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003a58:	4806      	ldr	r0, [pc, #24]	@ (8003a74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003a5a:	f01f fa59 	bl	8022f10 <__assert_func>
        stream.frameNumber = 0;
 8003a5e:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003a60:	6840      	ldr	r0, [r0, #4]
 8003a62:	6803      	ldr	r3, [r0, #0]
    }
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4718      	bx	r3
 8003a6c:	080246de 	.word	0x080246de
 8003a70:	08024dfd 	.word	0x08024dfd
 8003a74:	0802487c 	.word	0x0802487c

08003a78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003a78:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003a7a:	b129      	cbz	r1, 8003a88 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003a7e:	2182      	movs	r1, #130	@ 0x82
 8003a80:	4a05      	ldr	r2, [pc, #20]	@ (8003a98 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003a82:	4806      	ldr	r0, [pc, #24]	@ (8003a9c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003a84:	f01f fa44 	bl	8022f10 <__assert_func>
        stream.tickCount = 0;
 8003a88:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003a8c:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003a90:	bd08      	pop	{r3, pc}
 8003a92:	bf00      	nop
 8003a94:	080246de 	.word	0x080246de
 8003a98:	08024fd8 	.word	0x08024fd8
 8003a9c:	0802487c 	.word	0x0802487c

08003aa0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003aa0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003aa8:	b153      	cbz	r3, 8003ac0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8003aae:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003ab0:	f008 feb4 	bl	800c81c <osMutexAcquire>
            firstDrawThisFrame = false;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003ac0:	bd10      	pop	{r4, pc}

08003ac2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003ac2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003ac6:	b11a      	cbz	r2, 8003ad0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003ac8:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003acc:	b102      	cbz	r2, 8003ad0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003ace:	6018      	str	r0, [r3, #0]
        }
    }
 8003ad0:	4770      	bx	lr
	...

08003ad4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003ada:	b129      	cbz	r1, 8003ae8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003adc:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003ade:	21d0      	movs	r1, #208	@ 0xd0
 8003ae0:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003ae2:	4814      	ldr	r0, [pc, #80]	@ (8003b34 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003ae4:	f01f fa14 	bl	8022f10 <__assert_func>
        if (stream.isPlaying)
 8003ae8:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003aec:	b133      	cbz	r3, 8003afc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003aee:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003af6:	6963      	ldr	r3, [r4, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003afc:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003b00:	b90b      	cbnz	r3, 8003b06 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003b02:	2001      	movs	r0, #1
    }
 8003b04:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003b06:	68a3      	ldr	r3, [r4, #8]
 8003b08:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003b0a:	6803      	ldr	r3, [r0, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003b10:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003b12:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003b16:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d1f1      	bne.n	8003b02 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003b1e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ee      	bne.n	8003b04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003b26:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003b2a:	e7eb      	b.n	8003b04 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003b2c:	080246de 	.word	0x080246de
 8003b30:	08025194 	.word	0x08025194
 8003b34:	0802487c 	.word	0x0802487c
 8003b38:	24025378 	.word	0x24025378

08003b3c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003b3c:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003b3e:	4c1a      	ldr	r4, [pc, #104]	@ (8003ba8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003b40:	4605      	mov	r5, r0
    HAL::endFrame();
 8003b42:	f00b fa79 	bl	800f038 <_ZN8touchgfx3HAL8endFrameEv>
 8003b46:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003b4a:	b913      	cbnz	r3, 8003b52 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003b4c:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003b50:	b1ab      	cbz	r3, 8003b7e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003b52:	69e1      	ldr	r1, [r4, #28]
 8003b54:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003b58:	4353      	muls	r3, r2
 8003b5a:	6922      	ldr	r2, [r4, #16]
 8003b5c:	434a      	muls	r2, r1
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d30d      	bcc.n	8003b7e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003b62:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003b66:	b138      	cbz	r0, 8003b78 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003b6e:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003b70:	bf98      	it	ls
 8003b72:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003b76:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003b7e:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003b80:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003b82:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003b86:	f008 ff01 	bl	800c98c <osSemaphoreRelease>
        if (uiHasMutex)
 8003b8a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003b8e:	b12b      	cbz	r3, 8003b9c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003b90:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b92:	f008 fe66 	bl	800c862 <osMutexRelease>
            uiHasMutex = false;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003b9c:	6868      	ldr	r0, [r5, #4]
 8003b9e:	6803      	ldr	r3, [r0, #0]
}
 8003ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	4718      	bx	r3
 8003ba8:	2400b230 	.word	0x2400b230

08003bac <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bac:	4b04      	ldr	r3, [pc, #16]	@ (8003bc0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003bae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003bba:	f3bf 8f6f 	isb	sy
}
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bc4:	4b02      	ldr	r3, [pc, #8]	@ (8003bd0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003bc6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bca:	609a      	str	r2, [r3, #8]
}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003bd8:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003bdc:	b9d8      	cbnz	r0, 8003c16 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003be2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003be4:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003be6:	60d8      	str	r0, [r3, #12]
 8003be8:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003bea:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003bee:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003bf0:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003bf4:	6158      	str	r0, [r3, #20]
 8003bf6:	6198      	str	r0, [r3, #24]
 8003bf8:	61d8      	str	r0, [r3, #28]
 8003bfa:	6218      	str	r0, [r3, #32]
 8003bfc:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003bfe:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003c00:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003c04:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003c08:	443c      	add	r4, r7
 8003c0a:	42a2      	cmp	r2, r4
 8003c0c:	d90a      	bls.n	8003c24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003c10:	2152      	movs	r1, #82	@ 0x52
 8003c12:	4a0b      	ldr	r2, [pc, #44]	@ (8003c40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003c14:	e003      	b.n	8003c1e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003c18:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003c1e:	480b      	ldr	r0, [pc, #44]	@ (8003c4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003c20:	f01f f976 	bl	8022f10 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003c24:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003c28:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003c2c:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003c30:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003c32:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003c36:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003c38:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c3c:	080254ec 	.word	0x080254ec
 8003c40:	08025527 	.word	0x08025527
 8003c44:	08025335 	.word	0x08025335
 8003c48:	08025365 	.word	0x08025365
 8003c4c:	0802487c 	.word	0x0802487c

08003c50 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003c50:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003c52:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c54:	4e12      	ldr	r6, [pc, #72]	@ (8003ca0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003c56:	4604      	mov	r4, r0
 8003c58:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003c5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003c5c:	6003      	str	r3, [r0, #0]
 8003c5e:	6833      	ldr	r3, [r6, #0]
 8003c60:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c64:	b10a      	cbz	r2, 8003c6a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003c66:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c68:	b900      	cbnz	r0, 8003c6c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003c6a:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003c6c:	6803      	ldr	r3, [r0, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c70:	4798      	blx	r3
 8003c72:	1e43      	subs	r3, r0, #1
 8003c74:	425d      	negs	r5, r3
 8003c76:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003c7c:	b130      	cbz	r0, 8003c8c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003c7e:	6803      	ldr	r3, [r0, #0]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	4798      	blx	r3
 8003c84:	2801      	cmp	r0, #1
 8003c86:	bf08      	it	eq
 8003c88:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003c8c:	b92d      	cbnz	r5, 8003c9a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003c8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003c90:	2127      	movs	r1, #39	@ 0x27
 8003c92:	4a06      	ldr	r2, [pc, #24]	@ (8003cac <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003c94:	4806      	ldr	r0, [pc, #24]	@ (8003cb0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003c96:	f01f f93b 	bl	8022f10 <__assert_func>
    }
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	bf00      	nop
 8003ca0:	24025378 	.word	0x24025378
 8003ca4:	080261a8 	.word	0x080261a8
 8003ca8:	080256ca 	.word	0x080256ca
 8003cac:	08025728 	.word	0x08025728
 8003cb0:	08025761 	.word	0x08025761

08003cb4 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003cb4:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003cb6:	4e25      	ldr	r6, [pc, #148]	@ (8003d4c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003cb8:	6835      	ldr	r5, [r6, #0]
 8003cba:	f3bf 8f5b 	dmb	ish
 8003cbe:	f015 0501 	ands.w	r5, r5, #1
 8003cc2:	d140      	bne.n	8003d46 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f01e fdaf 	bl	8022828 <__cxa_guard_acquire>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d03b      	beq.n	8003d46 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x92>
class CWRVectorRenderer : public VectorRenderer
 8003cce:	4c20      	ldr	r4, [pc, #128]	@ (8003d50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
 8003cd2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003cd6:	6125      	str	r5, [r4, #16]
 8003cd8:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003cda:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003cdc:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003cde:	e9c4 3500 	strd	r3, r5, [r4]
 8003ce2:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003ce6:	f012 fa14 	bl	8016112 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003cea:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cee:	f00d fcc9 	bl	8011684 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003cf2:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003cf4:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003cf6:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003cf8:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003cfa:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003cfe:	f7ff ffa7 	bl	8003c50 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003d04:	4817      	ldr	r0, [pc, #92]	@ (8003d64 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003d06:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003d0a:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003d0c:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003d10:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003d14:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8003d18:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003d1c:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003d20:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003d2a:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003d2e:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003d32:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003d36:	4b0c      	ldr	r3, [pc, #48]	@ (8003d68 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb4>)
 8003d38:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003d3c:	f01f f906 	bl	8022f4c <atexit>
 8003d40:	4630      	mov	r0, r6
 8003d42:	f01e fd7d 	bl	8022840 <__cxa_guard_release>
}
 8003d46:	4802      	ldr	r0, [pc, #8]	@ (8003d50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003d48:	bd70      	pop	{r4, r5, r6, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2400b170 	.word	0x2400b170
 8003d50:	2400b174 	.word	0x2400b174
 8003d54:	08026bcc 	.word	0x08026bcc
 8003d58:	080261c8 	.word	0x080261c8
 8003d5c:	08026240 	.word	0x08026240
 8003d60:	08026c18 	.word	0x08026c18
 8003d64:	0800381d 	.word	0x0800381d
 8003d68:	08026c50 	.word	0x08026c50

08003d6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d70:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003d72:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003d74:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003d78:	f04f 31ff 	mov.w	r1, #4294967295
 8003d7c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003d7e:	f008 fdd9 	bl	800c934 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003d82:	f04f 31ff 	mov.w	r1, #4294967295
 8003d86:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003d88:	f008 fd48 	bl	800c81c <osMutexAcquire>
                if (stream.doDecode)
 8003d8c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003d90:	b343      	cbz	r3, 8003de4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003d92:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003d94:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003d98:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003d9a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003d9e:	f1b8 0f00 	cmp.w	r8, #0
 8003da2:	d023      	beq.n	8003dec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	4641      	mov	r1, r8
 8003da8:	4628      	mov	r0, r5
 8003daa:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003db6:	9700      	str	r7, [sp, #0]
 8003db8:	4628      	mov	r0, r5
 8003dba:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003dbe:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003dc2:	68a1      	ldr	r1, [r4, #8]
 8003dc4:	47c0      	blx	r8
                    stream.frameCount++;
 8003dc6:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003dc8:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003dcc:	3301      	adds	r3, #1
 8003dce:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003dd0:	b1f0      	cbz	r0, 8003e10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003dd2:	682b      	ldr	r3, [r5, #0]
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	4798      	blx	r3
 8003dda:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003ddc:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003dde:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003de0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003de4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003de6:	f008 fd3c 	bl	800c862 <osMutexRelease>
        while (1)
 8003dea:	e7c5      	b.n	8003d78 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003dec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d0de      	beq.n	8003db0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003df2:	4628      	mov	r0, r5
 8003df4:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003df8:	4798      	blx	r3
 8003dfa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003dfc:	4401      	add	r1, r0
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003e06:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003e0a:	4413      	add	r3, r2
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	e7cf      	b.n	8003db0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003e10:	2001      	movs	r0, #1
 8003e12:	e7e3      	b.n	8003ddc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003e14 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003e14:	4801      	ldr	r0, [pc, #4]	@ (8003e1c <videoTaskFunc+0x8>)
{
 8003e16:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003e18:	f7ff ffa8 	bl	8003d6c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003e1c:	2400b230 	.word	0x2400b230

08003e20 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003e20:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003e22:	4814      	ldr	r0, [pc, #80]	@ (8003e74 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003e24:	2500      	movs	r5, #0
 8003e26:	f7fe fbf7 	bl	8002618 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e2a:	4c13      	ldr	r4, [pc, #76]	@ (8003e78 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003e2c:	4b13      	ldr	r3, [pc, #76]	@ (8003e7c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003e2e:	462a      	mov	r2, r5
 8003e30:	4629      	mov	r1, r5
 8003e32:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003e3a:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e3c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003e3e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e40:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003e44:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003e48:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003e4c:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003e54:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003e58:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003e5c:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003e60:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003e64:	f008 fd1c 	bl	800c8a0 <osSemaphoreNew>
 8003e68:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f008 fc9e 	bl	800c7ac <osMutexNew>
 8003e70:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003e72:	bd38      	pop	{r3, r4, r5, pc}
 8003e74:	2400b278 	.word	0x2400b278
 8003e78:	2400b230 	.word	0x2400b230
 8003e7c:	0802628c 	.word	0x0802628c

08003e80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003e80:	4770      	bx	lr

08003e82 <_ZN23ApplicationFontProviderD0Ev>:
 8003e82:	b510      	push	{r4, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	2104      	movs	r1, #4
 8003e88:	f01e fccc 	bl	8022824 <_ZdlPvj>
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	bd10      	pop	{r4, pc}

08003e90 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003e90:	2901      	cmp	r1, #1
{
 8003e92:	b508      	push	{r3, lr}
    switch (typography)
 8003e94:	d006      	beq.n	8003ea4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003e96:	2902      	cmp	r1, #2
 8003e98:	d008      	beq.n	8003eac <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003e9a:	b959      	cbnz	r1, 8003eb4 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003e9c:	f000 ffc0 	bl	8004e20 <_ZN17TypedTextDatabase8getFontsEv>
 8003ea0:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003ea2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003ea4:	f000 ffbc 	bl	8004e20 <_ZN17TypedTextDatabase8getFontsEv>
 8003ea8:	6840      	ldr	r0, [r0, #4]
 8003eaa:	e7fa      	b.n	8003ea2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003eac:	f000 ffb8 	bl	8004e20 <_ZN17TypedTextDatabase8getFontsEv>
 8003eb0:	6880      	ldr	r0, [r0, #8]
 8003eb2:	e7f6      	b.n	8003ea2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e7f4      	b.n	8003ea2 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003eb8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003eb8:	4800      	ldr	r0, [pc, #0]	@ (8003ebc <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003eba:	4770      	bx	lr
 8003ebc:	080262dc 	.word	0x080262dc

08003ec0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003ec0:	2006      	movs	r0, #6
 8003ec2:	4770      	bx	lr

08003ec4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003ec4:	b513      	push	{r0, r1, r4, lr}
 8003ec6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003ec8:	b151      	cbz	r1, 8003ee0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003eca:	6803      	ldr	r3, [r0, #0]
 8003ecc:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003ece:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003ed0:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003ed4:	689c      	ldr	r4, [r3, #8]
 8003ed6:	f10d 0303 	add.w	r3, sp, #3
 8003eda:	47a0      	blx	r4
        return glyph;
    }
 8003edc:	b002      	add	sp, #8
 8003ede:	bd10      	pop	{r4, pc}
            return 0;
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	e7fb      	b.n	8003edc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003ee4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003ee4:	89c0      	ldrh	r0, [r0, #14]
 8003ee6:	4770      	bx	lr

08003ee8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003ee8:	8a00      	ldrh	r0, [r0, #16]
 8003eea:	4770      	bx	lr

08003eec <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003eec:	88c0      	ldrh	r0, [r0, #6]
 8003eee:	4770      	bx	lr

08003ef0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003ef0:	8880      	ldrh	r0, [r0, #4]
 8003ef2:	4770      	bx	lr

08003ef4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003ef4:	7a80      	ldrb	r0, [r0, #10]
    }
 8003ef6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003efa:	4770      	bx	lr

08003efc <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003efc:	7a80      	ldrb	r0, [r0, #10]
    }
 8003efe:	09c0      	lsrs	r0, r0, #7
 8003f00:	4770      	bx	lr

08003f02 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003f02:	2000      	movs	r0, #0
 8003f04:	4770      	bx	lr
	...

08003f08 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003f08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003f10 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	00000000 	.word	0x00000000

08003f14 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003f14:	4770      	bx	lr

08003f16 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003f16:	b510      	push	{r4, lr}
 8003f18:	4604      	mov	r4, r0
    }
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	f01e fc82 	bl	8022824 <_ZdlPvj>
 8003f20:	4620      	mov	r0, r4
 8003f22:	bd10      	pop	{r4, pc}

08003f24 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003f24:	4770      	bx	lr

08003f26 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003f26:	4770      	bx	lr

08003f28 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003f28:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003f2c:	6808      	ldr	r0, [r1, #0]
 8003f2e:	6849      	ldr	r1, [r1, #4]
 8003f30:	c303      	stmia	r3!, {r0, r1}
    }
 8003f32:	4770      	bx	lr

08003f34 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003f34:	4770      	bx	lr

08003f36 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003f36:	4770      	bx	lr

08003f38 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003f38:	6041      	str	r1, [r0, #4]
    }
 8003f3a:	4770      	bx	lr

08003f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003f3c:	4770      	bx	lr

08003f3e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003f3e:	4770      	bx	lr

08003f40 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003f42:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003f46:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003f50:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003f54:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	0800414d 	.word	0x0800414d

08003f60 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003f60:	2301      	movs	r3, #1
 8003f62:	7203      	strb	r3, [r0, #8]
    }
 8003f64:	4770      	bx	lr

08003f66 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003f66:	4770      	bx	lr

08003f68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003f68:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003f6a:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003f6c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003f6e:	68c2      	ldr	r2, [r0, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	1054      	asrs	r4, r2, #1
 8003f74:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003f78:	07d2      	lsls	r2, r2, #31
 8003f7a:	bf48      	it	mi
 8003f7c:	590a      	ldrmi	r2, [r1, r4]
    }
 8003f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003f82:	bf48      	it	mi
 8003f84:	58d3      	ldrmi	r3, [r2, r3]
 8003f86:	4718      	bx	r3

08003f88 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003f88:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003f8a:	6840      	ldr	r0, [r0, #4]
 8003f8c:	b130      	cbz	r0, 8003f9c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	b91a      	cbnz	r2, 8003f9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003f92:	68d8      	ldr	r0, [r3, #12]
 8003f94:	f000 0001 	and.w	r0, r0, #1
 8003f98:	4770      	bx	lr
 8003f9a:	2001      	movs	r0, #1
    }
 8003f9c:	4770      	bx	lr

08003f9e <_ZN8touchgfx12NoTransitionD0Ev>:
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	210c      	movs	r1, #12
 8003fa4:	f01e fc3e 	bl	8022824 <_ZdlPvj>
 8003fa8:	4620      	mov	r0, r4
 8003faa:	bd10      	pop	{r4, pc}

08003fac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003fac:	b510      	push	{r4, lr}
 8003fae:	4604      	mov	r4, r0
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	f01e fc37 	bl	8022824 <_ZdlPvj>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	bd10      	pop	{r4, pc}

08003fba <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003fc2:	f01e fc2f 	bl	8022824 <_ZdlPvj>
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	bd10      	pop	{r4, pc}

08003fca <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003fca:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003fcc:	f010 fb4e 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 8003fd0:	6803      	ldr	r3, [r0, #0]
    }
 8003fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd8:	4718      	bx	r3

08003fda <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003fde:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003fe2:	b158      	cbz	r0, 8003ffc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003fe4:	6803      	ldr	r3, [r0, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4798      	blx	r3
 8003fea:	b138      	cbz	r0, 8003ffc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003fec:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003ff0:	6803      	ldr	r3, [r0, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003ffc:	bd10      	pop	{r4, pc}
	...

08004000 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8004000:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004004:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004008:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800400a:	68b0      	ldr	r0, [r6, #8]
 800400c:	6803      	ldr	r3, [r0, #0]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	4798      	blx	r3
 8004012:	f5b0 7f9c 	cmp.w	r0, #312	@ 0x138
 8004016:	d205      	bcs.n	8004024 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8004018:	4b44      	ldr	r3, [pc, #272]	@ (800412c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 800401a:	21a3      	movs	r1, #163	@ 0xa3
 800401c:	4a44      	ldr	r2, [pc, #272]	@ (8004130 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800401e:	4845      	ldr	r0, [pc, #276]	@ (8004134 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8004020:	f01e ff76 	bl	8022f10 <__assert_func>
 8004024:	6870      	ldr	r0, [r6, #4]
 8004026:	6803      	ldr	r3, [r0, #0]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4798      	blx	r3
 800402c:	280f      	cmp	r0, #15
 800402e:	d803      	bhi.n	8004038 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 8004030:	4b41      	ldr	r3, [pc, #260]	@ (8004138 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 8004032:	21a4      	movs	r1, #164	@ 0xa4
 8004034:	4a3e      	ldr	r2, [pc, #248]	@ (8004130 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8004036:	e7f2      	b.n	800401e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004038:	68f0      	ldr	r0, [r6, #12]
 800403a:	6803      	ldr	r3, [r0, #0]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4798      	blx	r3
 8004040:	280b      	cmp	r0, #11
 8004042:	d803      	bhi.n	800404c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 8004044:	4b3d      	ldr	r3, [pc, #244]	@ (800413c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 8004046:	21a5      	movs	r1, #165	@ 0xa5
 8004048:	4a39      	ldr	r2, [pc, #228]	@ (8004130 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800404a:	e7e8      	b.n	800401e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 800404c:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004144 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8004050:	f010 fb0c 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8004054:	3004      	adds	r0, #4
 8004056:	f010 fb2e 	bl	80146b6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 800405a:	f8d9 0000 	ldr.w	r0, [r9]
 800405e:	b110      	cbz	r0, 8004066 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4798      	blx	r3
    if (*currentTrans)
 8004066:	f8d9 0000 	ldr.w	r0, [r9]
 800406a:	b110      	cbz	r0, 8004072 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 800406c:	6803      	ldr	r3, [r0, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4798      	blx	r3
    if (*currentScreen)
 8004072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004148 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 8004076:	f8d8 0000 	ldr.w	r0, [r8]
 800407a:	b110      	cbz	r0, 8004082 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 800407c:	6803      	ldr	r3, [r0, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	4798      	blx	r3
    if (*currentPresenter)
 8004082:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8004086:	b110      	cbz	r0, 800408e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8004088:	6803      	ldr	r3, [r0, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4798      	blx	r3
    if (*currentScreen)
 800408e:	f8d8 0000 	ldr.w	r0, [r8]
 8004092:	b110      	cbz	r0, 800409a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8004094:	6803      	ldr	r3, [r0, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4798      	blx	r3
    if (*currentPresenter)
 800409a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 800409e:	b110      	cbz	r0, 80040a6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80040a0:	6803      	ldr	r3, [r0, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80040a6:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80040a8:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80040aa:	f04f 0b00 	mov.w	fp, #0
 80040ae:	6803      	ldr	r3, [r0, #0]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	4798      	blx	r3
 80040b4:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80040b6:	4604      	mov	r4, r0
 80040b8:	f8c0 b004 	str.w	fp, [r0, #4]
 80040bc:	f880 b008 	strb.w	fp, [r0, #8]
 80040c0:	4659      	mov	r1, fp
 80040c2:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80040c4:	68b0      	ldr	r0, [r6, #8]
 80040c6:	6803      	ldr	r3, [r0, #0]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	4798      	blx	r3
 80040cc:	4605      	mov	r5, r0
 80040ce:	f001 f813 	bl	80050f8 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80040d2:	6870      	ldr	r0, [r6, #4]
 80040d4:	4659      	mov	r1, fp
 80040d6:	6803      	ldr	r3, [r0, #0]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	4798      	blx	r3
 80040dc:	4606      	mov	r6, r0
 80040de:	4629      	mov	r1, r5
 80040e0:	f000 ffe8 	bl	80050b4 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 80040e4:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80040e6:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 80040ea:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 80040ec:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80040f0:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 80040f4:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80040f8:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 80040fa:	f8c6 a008 	str.w	sl, [r6, #8]
 80040fe:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8004100:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004102:	4798      	blx	r3
    newPresenter->activate();
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	4630      	mov	r0, r6
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800410c:	4621      	mov	r1, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f012 fc84 	bl	8016a1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	4620      	mov	r0, r4
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4798      	blx	r3
    newTransition->invalidate();
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	4620      	mov	r0, r4
 8004120:	695b      	ldr	r3, [r3, #20]
}
 8004122:	b001      	add	sp, #4
 8004124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	4718      	bx	r3
 800412a:	bf00      	nop
 800412c:	080257d1 	.word	0x080257d1
 8004130:	0802585f 	.word	0x0802585f
 8004134:	08025931 	.word	0x08025931
 8004138:	08025986 	.word	0x08025986
 800413c:	08025a29 	.word	0x08025a29
 8004140:	080263d8 	.word	0x080263d8
 8004144:	240253c0 	.word	0x240253c0
 8004148:	240253bc 	.word	0x240253bc

0800414c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 800414c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004150:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8004154:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004156:	68b0      	ldr	r0, [r6, #8]
 8004158:	6803      	ldr	r3, [r0, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	4798      	blx	r3
 800415e:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8004162:	d205      	bcs.n	8004170 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8004164:	4b44      	ldr	r3, [pc, #272]	@ (8004278 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8004166:	21a3      	movs	r1, #163	@ 0xa3
 8004168:	4a44      	ldr	r2, [pc, #272]	@ (800427c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800416a:	4845      	ldr	r0, [pc, #276]	@ (8004280 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800416c:	f01e fed0 	bl	8022f10 <__assert_func>
 8004170:	6870      	ldr	r0, [r6, #4]
 8004172:	6803      	ldr	r3, [r0, #0]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4798      	blx	r3
 8004178:	280f      	cmp	r0, #15
 800417a:	d803      	bhi.n	8004184 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 800417c:	4b41      	ldr	r3, [pc, #260]	@ (8004284 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800417e:	21a4      	movs	r1, #164	@ 0xa4
 8004180:	4a3e      	ldr	r2, [pc, #248]	@ (800427c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004182:	e7f2      	b.n	800416a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004184:	68f0      	ldr	r0, [r6, #12]
 8004186:	6803      	ldr	r3, [r0, #0]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4798      	blx	r3
 800418c:	280b      	cmp	r0, #11
 800418e:	d803      	bhi.n	8004198 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8004190:	4b3d      	ldr	r3, [pc, #244]	@ (8004288 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8004192:	21a5      	movs	r1, #165	@ 0xa5
 8004194:	4a39      	ldr	r2, [pc, #228]	@ (800427c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8004196:	e7e8      	b.n	800416a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8004198:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004290 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 800419c:	f010 fa66 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 80041a0:	3004      	adds	r0, #4
 80041a2:	f010 fa88 	bl	80146b6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80041a6:	f8d9 0000 	ldr.w	r0, [r9]
 80041aa:	b110      	cbz	r0, 80041b2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80041ac:	6803      	ldr	r3, [r0, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4798      	blx	r3
    if (*currentTrans)
 80041b2:	f8d9 0000 	ldr.w	r0, [r9]
 80041b6:	b110      	cbz	r0, 80041be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80041b8:	6803      	ldr	r3, [r0, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4798      	blx	r3
    if (*currentScreen)
 80041be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004294 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 80041c2:	f8d8 0000 	ldr.w	r0, [r8]
 80041c6:	b110      	cbz	r0, 80041ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80041c8:	6803      	ldr	r3, [r0, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4798      	blx	r3
    if (*currentPresenter)
 80041ce:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80041d2:	b110      	cbz	r0, 80041da <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80041d4:	6803      	ldr	r3, [r0, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4798      	blx	r3
    if (*currentScreen)
 80041da:	f8d8 0000 	ldr.w	r0, [r8]
 80041de:	b110      	cbz	r0, 80041e6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80041e0:	6803      	ldr	r3, [r0, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4798      	blx	r3
    if (*currentPresenter)
 80041e6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80041ea:	b110      	cbz	r0, 80041f2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80041ec:	6803      	ldr	r3, [r0, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80041f2:	68f0      	ldr	r0, [r6, #12]
 80041f4:	2100      	movs	r1, #0
 80041f6:	f04f 0b00 	mov.w	fp, #0
 80041fa:	6803      	ldr	r3, [r0, #0]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	4798      	blx	r3
 8004200:	4b22      	ldr	r3, [pc, #136]	@ (800428c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8004202:	4604      	mov	r4, r0
 8004204:	f8c0 b004 	str.w	fp, [r0, #4]
 8004208:	f880 b008 	strb.w	fp, [r0, #8]
 800420c:	4659      	mov	r1, fp
 800420e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004210:	68b0      	ldr	r0, [r6, #8]
 8004212:	6803      	ldr	r3, [r0, #0]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	4798      	blx	r3
 8004218:	4605      	mov	r5, r0
 800421a:	f000 ff31 	bl	8005080 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800421e:	6870      	ldr	r0, [r6, #4]
 8004220:	4659      	mov	r1, fp
 8004222:	6803      	ldr	r3, [r0, #0]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	4798      	blx	r3
 8004228:	4606      	mov	r6, r0
 800422a:	4629      	mov	r1, r5
 800422c:	f000 fef6 	bl	800501c <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 8004230:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8004232:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8004236:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8004238:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800423c:	f8c8 5000 	str.w	r5, [r8]
 8004240:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	f8c6 a008 	str.w	sl, [r6, #8]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 800424e:	4798      	blx	r3
    newPresenter->activate();
 8004250:	6833      	ldr	r3, [r6, #0]
 8004252:	4630      	mov	r0, r6
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004258:	4621      	mov	r1, r4
 800425a:	4628      	mov	r0, r5
 800425c:	f012 fbde 	bl	8016a1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	4620      	mov	r0, r4
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	4798      	blx	r3
    newTransition->invalidate();
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	4620      	mov	r0, r4
 800426c:	695b      	ldr	r3, [r3, #20]
}
 800426e:	b001      	add	sp, #4
 8004270:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	4718      	bx	r3
 8004276:	bf00      	nop
 8004278:	080257d1 	.word	0x080257d1
 800427c:	08025acc 	.word	0x08025acc
 8004280:	08025931 	.word	0x08025931
 8004284:	08025986 	.word	0x08025986
 8004288:	08025a29 	.word	0x08025a29
 800428c:	080263d8 	.word	0x080263d8
 8004290:	240253c0 	.word	0x240253c0
 8004294:	240253bc 	.word	0x240253bc

08004298 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004298:	4b04      	ldr	r3, [pc, #16]	@ (80042ac <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80042a0:	b10a      	cbz	r2, 80042a6 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80042a2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80042a4:	b900      	cbnz	r0, 80042a8 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 80042a6:	6898      	ldr	r0, [r3, #8]
    }
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	24025378 	.word	0x24025378

080042b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	4617      	mov	r7, r2
 80042b4:	4604      	mov	r4, r0
 80042b6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80042b8:	f010 fa9e 	bl	80147f8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80042bc:	4b12      	ldr	r3, [pc, #72]	@ (8004308 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 80042be:	2500      	movs	r5, #0
        instance = this;
 80042c0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80042c2:	4629      	mov	r1, r5
      model(m)
 80042c4:	4b11      	ldr	r3, [pc, #68]	@ (800430c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80042c6:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 80042ca:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80042d6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80042d8:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 80042dc:	689b      	ldr	r3, [r3, #8]
      model(m)
 80042de:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80042e2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 fd4f 	bl	8004d88 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80042ea:	f7ff ffd5 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 80042ee:	f018 fc0e 	bl	801cb0e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80042f2:	f7ff ffd1 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 80042f6:	f018 fc81 	bl	801cbfc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80042fa:	f7ff ffcd 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 80042fe:	f018 fc89 	bl	801cc14 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8004302:	4620      	mov	r0, r4
 8004304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004306:	bf00      	nop
 8004308:	240253cc 	.word	0x240253cc
 800430c:	08026384 	.word	0x08026384
 8004310:	0802636c 	.word	0x0802636c
 8004314:	24025378 	.word	0x24025378

08004318 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800431a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800431e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004322:	2300      	movs	r3, #0
 8004324:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004328:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800432c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	0800414d 	.word	0x0800414d

08004338 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 800433a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800433e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8004342:	2300      	movs	r3, #0
 8004344:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8004348:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800434c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	08004001 	.word	0x08004001

08004358 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8004358:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800435a:	4770      	bx	lr

0800435c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 800435c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800435e:	4770      	bx	lr

08004360 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8004360:	4770      	bx	lr

08004362 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    // Read dataOffset as 16bit, as it may be unaligned
    volatile const uint16_t* dataOffset = (const uint16_t*)((const uint8_t*)glyph + offsetof(GlyphNode, dataOffset));
    uint32_t offset = dataOffset[0];
 8004362:	880b      	ldrh	r3, [r1, #0]
    offset |= dataOffset[1] << 16;

    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8004364:	888a      	ldrh	r2, [r1, #4]
    uint32_t offset = dataOffset[0];
 8004366:	b29b      	uxth	r3, r3
    const uint8_t* pixels = table[glyph->unicode / 2048];
 8004368:	0ad2      	lsrs	r2, r2, #11
{
 800436a:	b510      	push	{r4, lr}
    offset |= dataOffset[1] << 16;
 800436c:	884c      	ldrh	r4, [r1, #2]
    const uint8_t* pixels = table[glyph->unicode / 2048];
 800436e:	69c1      	ldr	r1, [r0, #28]
    offset |= dataOffset[1] << 16;
 8004370:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    return pixels + offset;
 8004374:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
}
 8004378:	4418      	add	r0, r3
 800437a:	bd10      	pop	{r4, pc}

0800437c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800437c:	b510      	push	{r4, lr}
 800437e:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8004380:	b1ba      	cbz	r2, 80043b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004382:	7b10      	ldrb	r0, [r2, #12]
 8004384:	b168      	cbz	r0, 80043a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004386:	7b53      	ldrb	r3, [r2, #13]
 8004388:	7ad2      	ldrb	r2, [r2, #11]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004390:	431a      	orrs	r2, r3
 8004392:	6a23      	ldr	r3, [r4, #32]
 8004394:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004398:	881a      	ldrh	r2, [r3, #0]
 800439a:	428a      	cmp	r2, r1
 800439c:	d102      	bne.n	80043a4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800439e:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 80043a2:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80043a4:	d805      	bhi.n	80043b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80043a6:	3801      	subs	r0, #1
 80043a8:	3304      	adds	r3, #4
 80043aa:	b280      	uxth	r0, r0
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d1f3      	bne.n	8004398 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80043b0:	e7f7      	b.n	80043a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80043b2:	2000      	movs	r0, #0
 80043b4:	e7f5      	b.n	80043a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080043b6 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	212c      	movs	r1, #44	@ 0x2c
 80043bc:	f01e fa32 	bl	8022824 <_ZdlPvj>
 80043c0:	4620      	mov	r0, r4
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80043c4:	b530      	push	{r4, r5, lr}
 80043c6:	b08b      	sub	sp, #44	@ 0x2c
 80043c8:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80043ca:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 80043ce:	9508      	str	r5, [sp, #32]
 80043d0:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80043d4:	9507      	str	r5, [sp, #28]
 80043d6:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80043da:	9506      	str	r5, [sp, #24]
 80043dc:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80043e0:	9505      	str	r5, [sp, #20]
 80043e2:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80043e6:	9504      	str	r5, [sp, #16]
 80043e8:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80043ec:	9503      	str	r5, [sp, #12]
 80043ee:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80043f2:	9502      	str	r5, [sp, #8]
 80043f4:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80043f8:	9501      	str	r5, [sp, #4]
 80043fa:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80043fe:	9500      	str	r5, [sp, #0]
 8004400:	f011 ff44 	bl	801628c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8004406:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004408:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 800440a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800440c:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800440e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004410:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8004412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004414:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8004416:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004418:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800441a:	b00b      	add	sp, #44	@ 0x2c
 800441c:	bd30      	pop	{r4, r5, pc}
 800441e:	bf00      	nop
 8004420:	080263fc 	.word	0x080263fc

08004424 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004424:	4770      	bx	lr

08004426 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004426:	4770      	bx	lr

08004428 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004428:	4770      	bx	lr

0800442a <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800442a:	4770      	bx	lr

0800442c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 800442c:	4770      	bx	lr

0800442e <_ZN15Screen1ViewBase13SquareClickedEv>:
     * Virtual Action Handlers
     */
    virtual void SquareClicked()
    {
        // Override and implement this function in Screen1
    }
 800442e:	4770      	bx	lr

08004430 <_ZN15Screen1ViewBase11SineClickedEv>:
    virtual void SineClicked()
    {
        // Override and implement this function in Screen1
    }
 8004430:	4770      	bx	lr

08004432 <_ZN15Screen1ViewBase15TriAngleClickedEv>:
    virtual void TriAngleClicked()
    {
        // Override and implement this function in Screen1
    }
 8004432:	4770      	bx	lr

08004434 <_ZN15Screen1ViewBase10TriClickedEv>:
    virtual void TriClicked()
    {
        // Override and implement this function in Screen1
    }
 8004434:	4770      	bx	lr

08004436 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004436:	4770      	bx	lr

08004438 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8004438:	4770      	bx	lr

0800443a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 800443a:	4770      	bx	lr

0800443c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800443c:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800443e:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004440:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004442:	68c2      	ldr	r2, [r0, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	1055      	asrs	r5, r2, #1
 8004448:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800444c:	07d2      	lsls	r2, r2, #31
 800444e:	bf48      	it	mi
 8004450:	5962      	ldrmi	r2, [r4, r5]
    }
 8004452:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004454:	bf48      	it	mi
 8004456:	58d3      	ldrmi	r3, [r2, r3]
 8004458:	4718      	bx	r3

0800445a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800445a:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800445c:	6840      	ldr	r0, [r0, #4]
 800445e:	b130      	cbz	r0, 800446e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	b91a      	cbnz	r2, 800446c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8004464:	68d8      	ldr	r0, [r3, #12]
 8004466:	f000 0001 	and.w	r0, r0, #1
 800446a:	4770      	bx	lr
 800446c:	2001      	movs	r0, #1
    }
 800446e:	4770      	bx	lr

08004470 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004470:	b510      	push	{r4, lr}
 8004472:	4604      	mov	r4, r0
 8004474:	2110      	movs	r1, #16
 8004476:	f01e f9d5 	bl	8022824 <_ZdlPvj>
 800447a:	4620      	mov	r0, r4
 800447c:	bd10      	pop	{r4, pc}

0800447e <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800447e:	b510      	push	{r4, lr}
 8004480:	4604      	mov	r4, r0
}
 8004482:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004486:	f01e f9cd 	bl	8022824 <_ZdlPvj>
 800448a:	4620      	mov	r0, r4
 800448c:	bd10      	pop	{r4, pc}

0800448e <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonPanick)
 800448e:	f500 73b8 	add.w	r3, r0, #368	@ 0x170
 8004492:	4299      	cmp	r1, r3
{
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	4604      	mov	r4, r0
 8004498:	460d      	mov	r5, r1
    if (&src == &buttonPanick)
 800449a:	d103      	bne.n	80044a4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 800449c:	f010 f8e6 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When buttonPanick clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
 80044a0:	f7ff ff4a 	bl	8004338 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
    }
    if (&src == &buttonSquare)
 80044a4:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 80044a8:	429d      	cmp	r5, r3
 80044aa:	d103      	bne.n	80044b4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x26>
    {
        //Interaction2
        //When buttonSquare clicked call virtual function
        //Call SquareClicked
        SquareClicked();
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	4620      	mov	r0, r4
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	4798      	blx	r3
    }
    if (&src == &buttonSine)
 80044b4:	f104 03e0 	add.w	r3, r4, #224	@ 0xe0
 80044b8:	429d      	cmp	r5, r3
 80044ba:	d103      	bne.n	80044c4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x36>
    {
        //Interaction3
        //When buttonSine clicked call virtual function
        //Call SineClicked
        SineClicked();
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	4620      	mov	r0, r4
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4798      	blx	r3
    }
    if (&src == &buttonTriangle)
 80044c4:	f504 7394 	add.w	r3, r4, #296	@ 0x128
 80044c8:	429d      	cmp	r5, r3
 80044ca:	d103      	bne.n	80044d4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x46>
    {
        //Interaction4
        //When buttonTriangle clicked call virtual function
        //Call TriAngleClicked
        TriAngleClicked();
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	4620      	mov	r0, r4
 80044d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d2:	4798      	blx	r3
    }
    if (&src == &buttonTri)
 80044d4:	f504 73dc 	add.w	r3, r4, #440	@ 0x1b8
 80044d8:	429d      	cmp	r5, r3
 80044da:	d105      	bne.n	80044e8 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x5a>
    {
        //Interaction5
        //When buttonTri clicked call virtual function
        //Call TriClicked
        TriClicked();
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	4620      	mov	r0, r4
 80044e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    }
}
 80044e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        TriClicked();
 80044e6:	4718      	bx	r3
}
 80044e8:	bd70      	pop	{r4, r5, r6, pc}

080044ea <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80044ea:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4604      	mov	r4, r0
        setX(x);
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80044f2:	4615      	mov	r5, r2
        setX(x);
 80044f4:	4798      	blx	r3
        setY(y);
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	4620      	mov	r0, r4
 80044fa:	4629      	mov	r1, r5
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80044fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8004502:	4718      	bx	r3

08004504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8004506:	4b19      	ldr	r3, [pc, #100]	@ (800456c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8004508:	4606      	mov	r6, r0
 800450a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	428b      	cmp	r3, r1
 8004510:	d92a      	bls.n	8004568 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004512:	4b17      	ldr	r3, [pc, #92]	@ (8004570 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b92b      	cbnz	r3, 8004524 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8004518:	4b16      	ldr	r3, [pc, #88]	@ (8004574 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 800451a:	216c      	movs	r1, #108	@ 0x6c
 800451c:	4a16      	ldr	r2, [pc, #88]	@ (8004578 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 800451e:	4817      	ldr	r0, [pc, #92]	@ (800457c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8004520:	f01e fcf6 	bl	8022f10 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004524:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8004528:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004530:	4b14      	ldr	r3, [pc, #80]	@ (8004584 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	f000 fc64 	bl	8004e00 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	4607      	mov	r7, r0
 800453c:	4628      	mov	r0, r5
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	4798      	blx	r3
 8004542:	682b      	ldr	r3, [r5, #0]
 8004544:	4604      	mov	r4, r0
 8004546:	4639      	mov	r1, r7
 8004548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454a:	4628      	mov	r0, r5
 800454c:	4798      	blx	r3
 800454e:	fb14 f400 	smulbb	r4, r4, r0
 8004552:	682b      	ldr	r3, [r5, #0]
 8004554:	4639      	mov	r1, r7
 8004556:	b2a4      	uxth	r4, r4
 8004558:	4628      	mov	r0, r5
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	4798      	blx	r3
 800455e:	1823      	adds	r3, r4, r0
 8004560:	b21b      	sxth	r3, r3
 8004562:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	2300      	movs	r3, #0
 800456a:	e7fa      	b.n	8004562 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 800456c:	240253d4 	.word	0x240253d4
 8004570:	240253d0 	.word	0x240253d0
 8004574:	08025b9e 	.word	0x08025b9e
 8004578:	08025be0 	.word	0x08025be0
 800457c:	08025c1b 	.word	0x08025c1b
 8004580:	240253d8 	.word	0x240253d8
 8004584:	240253dc 	.word	0x240253dc

08004588 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	b087      	sub	sp, #28
 800458e:	4604      	mov	r4, r0
        : presenter(0)
 8004590:	f012 f898 	bl	80166c4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004594:	4b87      	ldr	r3, [pc, #540]	@ (80047b4 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8004596:	2500      	movs	r5, #0
          touchable(false),
 8004598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	f104 076c 	add.w	r7, r4, #108	@ 0x6c
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80045a2:	4b85      	ldr	r3, [pc, #532]	@ (80047b8 <_ZN15Screen1ViewBaseC1Ev+0x230>)
 80045a4:	f104 0b98 	add.w	fp, r4, #152	@ 0x98
 80045a8:	f8a4 2064 	strh.w	r2, [r4, #100]	@ 0x64
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 80045ac:	a905      	add	r1, sp, #20
 80045ae:	f8a4 2090 	strh.w	r2, [r4, #144]	@ 0x90
 80045b2:	f104 0ae0 	add.w	sl, r4, #224	@ 0xe0
        : Widget(), bitmap(bmp), alpha(255)
 80045b6:	4a81      	ldr	r2, [pc, #516]	@ (80047bc <_ZN15Screen1ViewBaseC1Ev+0x234>)
        Image::setBitmap(bmp);
 80045b8:	4638      	mov	r0, r7
 80045ba:	63e5      	str	r5, [r4, #60]	@ 0x3c
    __background.setPosition(0, 0, 800, 480);
 80045bc:	f104 0840 	add.w	r8, r4, #64	@ 0x40
        : Widget(), bitmap(bmp), alpha(255)
 80045c0:	66e2      	str	r2, [r4, #108]	@ 0x6c
        color = col;
 80045c2:	f04f 36ff 	mov.w	r6, #4294967295
          cachedAbsX(0),
 80045c6:	6625      	str	r5, [r4, #96]	@ 0x60
    buttonSquare.setAction(buttonCallback);
 80045c8:	f504 7900 	add.w	r9, r4, #512	@ 0x200
        : color(col)
 80045cc:	66a5      	str	r5, [r4, #104]	@ 0x68
        : x(0), y(0), width(0), height(0)
 80045ce:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
 80045d2:	23ff      	movs	r3, #255	@ 0xff
 80045d4:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80045d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 80045e0:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 80045e4:	f884 3094 	strb.w	r3, [r4, #148]	@ 0x94
 80045e8:	f8ad 3014 	strh.w	r3, [sp, #20]
          parent(0),
 80045ec:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 80045f0:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 80045f4:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
 80045f8:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
          nextSibling(0),
 80045fc:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
          cachedAbsX(0),
 8004600:	e9c4 5522 	strd	r5, r5, [r4, #136]	@ 0x88
        Image::setBitmap(bmp);
 8004604:	f00d fb75 	bl	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8004608:	4658      	mov	r0, fp
 800460a:	f00d fca9 	bl	8011f60 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800460e:	4650      	mov	r0, sl
 8004610:	f00d fca6 	bl	8011f60 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004614:	f504 7394 	add.w	r3, r4, #296	@ 0x128
 8004618:	4618      	mov	r0, r3
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	f00d fca0 	bl	8011f60 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004620:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 8004624:	4618      	mov	r0, r3
 8004626:	9302      	str	r3, [sp, #8]
 8004628:	f00d fc9a 	bl	8011f60 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 800462c:	f504 73dc 	add.w	r3, r4, #440	@ 0x1b8
 8004630:	4618      	mov	r0, r3
 8004632:	9303      	str	r3, [sp, #12]
 8004634:	f00d fc94 	bl	8011f60 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004638:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <_ZN15Screen1ViewBaseC1Ev+0x238>)
        setXY(x, y);
 800463a:	462a      	mov	r2, r5
 800463c:	4629      	mov	r1, r5
 800463e:	4640      	mov	r0, r8
 8004640:	e9c4 3480 	strd	r3, r4, [r4, #512]	@ 0x200
 8004644:	4b5f      	ldr	r3, [pc, #380]	@ (80047c4 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8004646:	e9c4 3582 	strd	r3, r5, [r4, #520]	@ 0x208
 800464a:	f7ff ff4e 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 800464e:	4640      	mov	r0, r8
 8004650:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004654:	f7ff f890 	bl	8003778 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8004658:	4640      	mov	r0, r8
 800465a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800465e:	f7ff f88d 	bl	800377c <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8004662:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004666:	4641      	mov	r1, r8
 8004668:	1d20      	adds	r0, r4, #4
 800466a:	66a3      	str	r3, [r4, #104]	@ 0x68
 800466c:	f04f 0801 	mov.w	r8, #1
 8004670:	f00a fa06 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8004674:	462a      	mov	r2, r5
 8004676:	4629      	mov	r1, r5
 8004678:	4638      	mov	r0, r7
 800467a:	f7ff ff36 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 800467e:	a905      	add	r1, sp, #20
 8004680:	4638      	mov	r0, r7
 8004682:	f8ad 5014 	strh.w	r5, [sp, #20]
 8004686:	f00d fb34 	bl	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800468a:	4639      	mov	r1, r7
 800468c:	1d20      	adds	r0, r4, #4
 800468e:	2702      	movs	r7, #2
 8004690:	f00a f9f6 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonSquare.setXY(40, 57);
 8004694:	4658      	mov	r0, fp
 8004696:	2239      	movs	r2, #57	@ 0x39
 8004698:	2128      	movs	r1, #40	@ 0x28
 800469a:	f7ff ff26 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
    buttonSquare.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800469e:	aa05      	add	r2, sp, #20
 80046a0:	a904      	add	r1, sp, #16
 80046a2:	4658      	mov	r0, fp
 80046a4:	f8ad 8010 	strh.w	r8, [sp, #16]
 80046a8:	f8ad 7014 	strh.w	r7, [sp, #20]
 80046ac:	f00d fa5b 	bl	8011b66 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 80046b0:	2304      	movs	r3, #4
        updateTextPosition();
 80046b2:	4658      	mov	r0, fp
 80046b4:	f8a4 30d0 	strh.w	r3, [r4, #208]	@ 0xd0
 80046b8:	f7ff ff24 	bl	8004504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80046bc:	4659      	mov	r1, fp
 80046be:	1d20      	adds	r0, r4, #4
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80046c0:	f8c4 90c0 	str.w	r9, [r4, #192]	@ 0xc0
        colorPressed = col;
 80046c4:	e9c4 6635 	strd	r6, r6, [r4, #212]	@ 0xd4
 80046c8:	f00a f9da 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonSine.setXY(40, 148);
 80046cc:	4650      	mov	r0, sl
 80046ce:	2294      	movs	r2, #148	@ 0x94
 80046d0:	2128      	movs	r1, #40	@ 0x28
 80046d2:	f7ff ff0a 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
    buttonSine.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 80046d6:	a904      	add	r1, sp, #16
 80046d8:	aa05      	add	r2, sp, #20
 80046da:	4650      	mov	r0, sl
 80046dc:	f8ad 8010 	strh.w	r8, [sp, #16]
 80046e0:	f8ad 7014 	strh.w	r7, [sp, #20]
 80046e4:	f00d fa3f 	bl	8011b66 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80046e8:	2203      	movs	r2, #3
        updateTextPosition();
 80046ea:	4650      	mov	r0, sl
 80046ec:	f8a4 2118 	strh.w	r2, [r4, #280]	@ 0x118
 80046f0:	f7ff ff08 	bl	8004504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80046f4:	4651      	mov	r1, sl
 80046f6:	1d20      	adds	r0, r4, #4
 80046f8:	f8c4 9108 	str.w	r9, [r4, #264]	@ 0x108
        colorPressed = col;
 80046fc:	e9c4 6647 	strd	r6, r6, [r4, #284]	@ 0x11c
 8004700:	f00a f9be 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonTriangle.setXY(40, 240);
 8004704:	9801      	ldr	r0, [sp, #4]
 8004706:	22f0      	movs	r2, #240	@ 0xf0
 8004708:	2128      	movs	r1, #40	@ 0x28
 800470a:	f7ff feee 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
    buttonTriangle.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800470e:	aa05      	add	r2, sp, #20
 8004710:	a904      	add	r1, sp, #16
 8004712:	9801      	ldr	r0, [sp, #4]
 8004714:	f8ad 8010 	strh.w	r8, [sp, #16]
 8004718:	f8ad 7014 	strh.w	r7, [sp, #20]
 800471c:	f00d fa23 	bl	8011b66 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004720:	9801      	ldr	r0, [sp, #4]
 8004722:	f8a4 7160 	strh.w	r7, [r4, #352]	@ 0x160
 8004726:	f7ff feed 	bl	8004504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800472a:	9901      	ldr	r1, [sp, #4]
 800472c:	1d20      	adds	r0, r4, #4
 800472e:	f8c4 9150 	str.w	r9, [r4, #336]	@ 0x150
        colorPressed = col;
 8004732:	e9c4 6659 	strd	r6, r6, [r4, #356]	@ 0x164
 8004736:	f00a f9a3 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonPanick.setXY(506, 157);
 800473a:	9802      	ldr	r0, [sp, #8]
 800473c:	229d      	movs	r2, #157	@ 0x9d
 800473e:	f44f 71fd 	mov.w	r1, #506	@ 0x1fa
 8004742:	f7ff fed2 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
    buttonPanick.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8004746:	aa05      	add	r2, sp, #20
 8004748:	a904      	add	r1, sp, #16
 800474a:	9802      	ldr	r0, [sp, #8]
 800474c:	f8ad 8010 	strh.w	r8, [sp, #16]
 8004750:	f8ad 7014 	strh.w	r7, [sp, #20]
 8004754:	f00d fa07 	bl	8011b66 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004758:	9802      	ldr	r0, [sp, #8]
 800475a:	f8a4 81a8 	strh.w	r8, [r4, #424]	@ 0x1a8
 800475e:	f7ff fed1 	bl	8004504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004762:	9902      	ldr	r1, [sp, #8]
 8004764:	1d20      	adds	r0, r4, #4
 8004766:	f8c4 9198 	str.w	r9, [r4, #408]	@ 0x198
        colorPressed = col;
 800476a:	e9c4 666b 	strd	r6, r6, [r4, #428]	@ 0x1ac
 800476e:	f00a f987 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    buttonTri.setXY(40, 335);
 8004772:	9803      	ldr	r0, [sp, #12]
 8004774:	f240 124f 	movw	r2, #335	@ 0x14f
 8004778:	2128      	movs	r1, #40	@ 0x28
 800477a:	f7ff feb6 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
    buttonTri.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 800477e:	aa05      	add	r2, sp, #20
 8004780:	a904      	add	r1, sp, #16
 8004782:	9803      	ldr	r0, [sp, #12]
 8004784:	f8ad 8010 	strh.w	r8, [sp, #16]
 8004788:	f8ad 7014 	strh.w	r7, [sp, #20]
 800478c:	f00d f9eb 	bl	8011b66 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004790:	9803      	ldr	r0, [sp, #12]
 8004792:	f8a4 51f0 	strh.w	r5, [r4, #496]	@ 0x1f0
 8004796:	f7ff feb5 	bl	8004504 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800479a:	1d20      	adds	r0, r4, #4
 800479c:	9903      	ldr	r1, [sp, #12]
 800479e:	f8c4 91e0 	str.w	r9, [r4, #480]	@ 0x1e0
        colorPressed = col;
 80047a2:	e9c4 667d 	strd	r6, r6, [r4, #500]	@ 0x1f4
 80047a6:	f00a f96b 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80047aa:	4620      	mov	r0, r4
 80047ac:	b007      	add	sp, #28
 80047ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	0802647c 	.word	0x0802647c
 80047b8:	08026d5c 	.word	0x08026d5c
 80047bc:	08026dc4 	.word	0x08026dc4
 80047c0:	08026464 	.word	0x08026464
 80047c4:	0800448f 	.word	0x0800448f

080047c8 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80047c8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80047ca:	4770      	bx	lr

080047cc <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 80047cc:	4770      	bx	lr

080047ce <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80047ce:	4770      	bx	lr

080047d0 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 80047d0:	4770      	bx	lr

080047d2 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 80047d2:	4770      	bx	lr

080047d4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80047d4:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80047d6:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80047d8:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80047da:	68c2      	ldr	r2, [r0, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	1055      	asrs	r5, r2, #1
 80047e0:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80047e4:	07d2      	lsls	r2, r2, #31
 80047e6:	bf48      	it	mi
 80047e8:	5962      	ldrmi	r2, [r4, r5]
    }
 80047ea:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80047ec:	bf48      	it	mi
 80047ee:	58d3      	ldrmi	r3, [r2, r3]
 80047f0:	4718      	bx	r3

080047f2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 80047f2:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80047f4:	6840      	ldr	r0, [r0, #4]
 80047f6:	b130      	cbz	r0, 8004806 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	b91a      	cbnz	r2, 8004804 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 80047fc:	68d8      	ldr	r0, [r3, #12]
 80047fe:	f000 0001 	and.w	r0, r0, #1
 8004802:	4770      	bx	lr
 8004804:	2001      	movs	r0, #1
    }
 8004806:	4770      	bx	lr

08004808 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004808:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800480c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004810:	4770      	bx	lr

08004812 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8004812:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8004814:	3038      	adds	r0, #56	@ 0x38
 8004816:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800481a:	b113      	cbz	r3, 8004822 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 800481c:	3136      	adds	r1, #54	@ 0x36
 800481e:	f00d ba68 	b.w	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004822:	3134      	adds	r1, #52	@ 0x34
 8004824:	e7fb      	b.n	800481e <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08004826 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8004826:	b510      	push	{r4, lr}
 8004828:	4604      	mov	r4, r0
 800482a:	2164      	movs	r1, #100	@ 0x64
 800482c:	f01d fffa 	bl	8022824 <_ZdlPvj>
 8004830:	4620      	mov	r0, r4
 8004832:	bd10      	pop	{r4, pc}

08004834 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004834:	b510      	push	{r4, lr}
 8004836:	4604      	mov	r4, r0
 8004838:	2110      	movs	r1, #16
 800483a:	f01d fff3 	bl	8022824 <_ZdlPvj>
 800483e:	4620      	mov	r0, r4
 8004840:	bd10      	pop	{r4, pc}

08004842 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8004842:	b510      	push	{r4, lr}
 8004844:	4604      	mov	r4, r0
}
 8004846:	f44f 719c 	mov.w	r1, #312	@ 0x138
 800484a:	f01d ffeb 	bl	8022824 <_ZdlPvj>
 800484e:	4620      	mov	r0, r4
 8004850:	bd10      	pop	{r4, pc}

08004852 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8004852:	b510      	push	{r4, lr}
 8004854:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8004856:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8004858:	b150      	cbz	r0, 8004870 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 800485a:	6803      	ldr	r3, [r0, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4798      	blx	r3
 8004860:	b130      	cbz	r0, 8004870 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8004862:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004864:	4621      	mov	r1, r4
 8004866:	6803      	ldr	r3, [r0, #0]
        }
    }
 8004868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4718      	bx	r3
    }
 8004870:	bd10      	pop	{r4, pc}

08004872 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8004872:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4604      	mov	r4, r0
 8004878:	460d      	mov	r5, r1
        return pressed;
 800487a:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800487e:	b90b      	cbnz	r3, 8004884 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8004880:	b116      	cbz	r6, 8004888 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8004882:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004884:	2e00      	cmp	r6, #0
 8004886:	d0fc      	beq.n	8004882 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8004888:	fab3 f383 	clz	r3, r3
        handlePressedUpdated();
 800488c:	4620      	mov	r0, r4
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489a:	4798      	blx	r3
            invalidate();
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	4620      	mov	r0, r4
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	d0ec      	beq.n	8004882 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 80048a8:	792b      	ldrb	r3, [r5, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d1e9      	bne.n	8004882 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	4620      	mov	r0, r4
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 80048b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 80048ba:	4718      	bx	r3

080048bc <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &NoPanickBtn)
 80048bc:	30c4      	adds	r0, #196	@ 0xc4
 80048be:	4288      	cmp	r0, r1
{
 80048c0:	b508      	push	{r3, lr}
    if (&src == &NoPanickBtn)
 80048c2:	d105      	bne.n	80048d0 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    virtual ~Screen2ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80048c4:	f00f fed2 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When NoPanickBtn clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
    }
}
 80048c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen1ScreenNoTransition();
 80048cc:	f7ff bd24 	b.w	8004318 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
}
 80048d0:	bd08      	pop	{r3, pc}
	...

080048d4 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 80048d4:	4a07      	ldr	r2, [pc, #28]	@ (80048f4 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 80048d6:	6002      	str	r2, [r0, #0]
 80048d8:	2200      	movs	r2, #0
 80048da:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80048de:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 80048e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 80048e6:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 80048ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048ee:	8482      	strh	r2, [r0, #36]	@ 0x24
    }
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	08026f08 	.word	0x08026f08

080048f8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 80048f8:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 80048fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 80048fe:	8683      	strh	r3, [r0, #52]	@ 0x34
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8004900:	4604      	mov	r4, r0
        iconPressed = newIconPressed;
 8004902:	8813      	ldrh	r3, [r2, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8004904:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8004906:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 800490a:	86c3      	strh	r3, [r0, #54]	@ 0x36
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 800490c:	4610      	mov	r0, r2
 800490e:	f013 f96f 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8004912:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8004916:	4607      	mov	r7, r0
 8004918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800491c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004920:	4640      	mov	r0, r8
 8004922:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8004926:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800492a:	f3c3 064f 	ubfx	r6, r3, #1, #16
 800492e:	f013 f993 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8004932:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004936:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 800493a:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 800493e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8004942:	b209      	sxth	r1, r1
 8004944:	b212      	sxth	r2, r2
 8004946:	f7ff fdd0 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	4620      	mov	r0, r4
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8004952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8004956:	4718      	bx	r3

08004958 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	461d      	mov	r5, r3
 800495e:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8004962:	f7ff fdc2 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	4629      	mov	r1, r5
 800496a:	4620      	mov	r0, r4
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	4798      	blx	r3
        setHeight(height);
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	4631      	mov	r1, r6
 8004974:	4620      	mov	r0, r4
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8004978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800497c:	4718      	bx	r3
	...

08004980 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	4604      	mov	r4, r0
 8004986:	b085      	sub	sp, #20
 8004988:	2500      	movs	r5, #0
 800498a:	f011 fe9b 	bl	80166c4 <_ZN8touchgfx6ScreenC1Ev>
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 800498e:	4626      	mov	r6, r4
 8004990:	4b61      	ldr	r3, [pc, #388]	@ (8004b18 <_ZN15Screen2ViewBaseC1Ev+0x198>)
        : Widget(), alpha(255), color(0)
 8004992:	2226      	movs	r2, #38	@ 0x26
 8004994:	4629      	mov	r1, r5
 8004996:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004998:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 800499c:	f846 3b40 	str.w	r3, [r6], #64
 80049a0:	4630      	mov	r0, r6
 80049a2:	f01e fd51 	bl	8023448 <memset>
class Widget : public Drawable
 80049a6:	4630      	mov	r0, r6
 80049a8:	f7ff ff94 	bl	80048d4 <_ZN8touchgfx8DrawableC1Ev>
 80049ac:	4b5b      	ldr	r3, [pc, #364]	@ (8004b1c <_ZN15Screen2ViewBaseC1Ev+0x19c>)
 80049ae:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 80049b2:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 80049b6:	6423      	str	r3, [r4, #64]	@ 0x40
 80049b8:	23ff      	movs	r3, #255	@ 0xff
 80049ba:	f104 07c4 	add.w	r7, r4, #196	@ 0xc4
 80049be:	a903      	add	r1, sp, #12
 80049c0:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 80049c4:	4648      	mov	r0, r9
        : color(col)
 80049c6:	66a5      	str	r5, [r4, #104]	@ 0x68
        : T()
 80049c8:	f104 0afc 	add.w	sl, r4, #252	@ 0xfc
 80049cc:	f8ad b00c 	strh.w	fp, [sp, #12]
 80049d0:	f00c fec0 	bl	8011754 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 80049d4:	a903      	add	r1, sp, #12
 80049d6:	4640      	mov	r0, r8
 80049d8:	f8ad b00c 	strh.w	fp, [sp, #12]
 80049dc:	f00c feba 	bl	8011754 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
          firstChild(0)
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff77 	bl	80048d4 <_ZN8touchgfx8DrawableC1Ev>
        : pressed(false), alpha(255), action(0)
 80049e6:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
        : Widget(), bitmap(bmp), alpha(255)
 80049ea:	2226      	movs	r2, #38	@ 0x26
 80049ec:	4629      	mov	r1, r5
 80049ee:	f8a4 30f0 	strh.w	r3, [r4, #240]	@ 0xf0
        touchable = touch;
 80049f2:	2301      	movs	r3, #1
 80049f4:	4650      	mov	r0, sl
 80049f6:	f8c4 50ec 	str.w	r5, [r4, #236]	@ 0xec
 80049fa:	f884 30e8 	strb.w	r3, [r4, #232]	@ 0xe8
 80049fe:	4b48      	ldr	r3, [pc, #288]	@ (8004b20 <_ZN15Screen2ViewBaseC1Ev+0x1a0>)
 8004a00:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 8004a04:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	f8ad b00c 	strh.w	fp, [sp, #12]
 8004a10:	f8c4 30f8 	str.w	r3, [r4, #248]	@ 0xf8
 8004a14:	f01e fd18 	bl	8023448 <memset>
 8004a18:	4650      	mov	r0, sl
 8004a1a:	f7ff ff5b 	bl	80048d4 <_ZN8touchgfx8DrawableC1Ev>
 8004a1e:	4b41      	ldr	r3, [pc, #260]	@ (8004b24 <_ZN15Screen2ViewBaseC1Ev+0x1a4>)
        Image::setBitmap(bmp);
 8004a20:	a903      	add	r1, sp, #12
 8004a22:	4650      	mov	r0, sl
        : Widget(), bitmap(bmp), alpha(255)
 8004a24:	f8c4 30fc 	str.w	r3, [r4, #252]	@ 0xfc
 8004a28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004a2c:	f884 b124 	strb.w	fp, [r4, #292]	@ 0x124
    __background.setPosition(0, 0, 800, 480);
 8004a30:	f44f 7bf0 	mov.w	fp, #480	@ 0x1e0
 8004a34:	f8a4 3122 	strh.w	r3, [r4, #290]	@ 0x122
        Image::setBitmap(bmp);
 8004a38:	f00d f95b 	bl	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::add(iconImage);
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f104 0a04 	add.w	sl, r4, #4
 8004a44:	f00a f81c 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004a48:	4b37      	ldr	r3, [pc, #220]	@ (8004b28 <_ZN15Screen2ViewBaseC1Ev+0x1a8>)
 8004a4a:	462a      	mov	r2, r5
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4630      	mov	r0, r6
 8004a50:	e9c4 344a 	strd	r3, r4, [r4, #296]	@ 0x128
 8004a54:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <_ZN15Screen2ViewBaseC1Ev+0x1ac>)
 8004a56:	e9c4 354c 	strd	r3, r5, [r4, #304]	@ 0x130
 8004a5a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004a5e:	f8cd b000 	str.w	fp, [sp]
 8004a62:	f7ff ff79 	bl	8004958 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004a66:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	66a3      	str	r3, [r4, #104]	@ 0x68
 8004a70:	f00a f806 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8004a74:	a903      	add	r1, sp, #12
 8004a76:	4648      	mov	r0, r9
 8004a78:	f8ad 500c 	strh.w	r5, [sp, #12]
 8004a7c:	f00d f939 	bl	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 800, 480);
 8004a80:	462a      	mov	r2, r5
 8004a82:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004a86:	4629      	mov	r1, r5
 8004a88:	4648      	mov	r0, r9
 8004a8a:	f8cd b000 	str.w	fp, [sp]
 8004a8e:	f7ff ff63 	bl	8004958 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004a92:	4629      	mov	r1, r5
 8004a94:	4648      	mov	r0, r9
 8004a96:	f00c fe18 	bl	80116ca <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	4650      	mov	r0, sl
 8004a9e:	f009 ffef 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004aa2:	2303      	movs	r3, #3
    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_BANKRUPT_ID));
 8004aa4:	a903      	add	r1, sp, #12
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004aac:	f00d f921 	bl	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage2.setPosition(0, 0, 800, 480);
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4640      	mov	r0, r8
 8004aba:	f8cd b000 	str.w	fp, [sp]
 8004abe:	f7ff ff4b 	bl	8004958 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	f00c fe00 	bl	80116ca <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8004aca:	4641      	mov	r1, r8
 8004acc:	4650      	mov	r0, sl
 8004ace:	f009 ffd7 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004ad2:	2305      	movs	r3, #5
    NoPanickBtn.setIconBitmaps(Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_BACK_IOS_50_50_E8F6FB_SVG_ID), Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_DONE_50_50_E8F6FB_SVG_ID));
 8004ad4:	aa03      	add	r2, sp, #12
 8004ad6:	a902      	add	r1, sp, #8
 8004ad8:	f8ad 3008 	strh.w	r3, [sp, #8]
 8004adc:	2304      	movs	r3, #4
 8004ade:	4638      	mov	r0, r7
 8004ae0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004ae4:	f7ff ff08 	bl	80048f8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
        rect.x = x;
 8004ae8:	231d      	movs	r3, #29
    NoPanickBtn.setPosition(0, 430, 105, 50);
 8004aea:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8004aee:	4629      	mov	r1, r5
 8004af0:	4638      	mov	r0, r7
 8004af2:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
    NoPanickBtn.setAction(flexButtonCallback);
 8004af6:	f504 7394 	add.w	r3, r4, #296	@ 0x128
        action = &callback;
 8004afa:	f8c4 30f4 	str.w	r3, [r4, #244]	@ 0xf4
    NoPanickBtn.setPosition(0, 430, 105, 50);
 8004afe:	2332      	movs	r3, #50	@ 0x32
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	2369      	movs	r3, #105	@ 0x69
 8004b04:	f7ff ff28 	bl	8004958 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004b08:	4650      	mov	r0, sl
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	f009 ffb8 	bl	800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004b10:	4620      	mov	r0, r4
 8004b12:	b005      	add	sp, #20
 8004b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b18:	08026578 	.word	0x08026578
 8004b1c:	08026d5c 	.word	0x08026d5c
 8004b20:	080264c0 	.word	0x080264c0
 8004b24:	08026dc4 	.word	0x08026dc4
 8004b28:	08026560 	.word	0x08026560
 8004b2c:	080048bd 	.word	0x080048bd

08004b30 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004b30:	4770      	bx	lr
	...

08004b34 <_Z23getFont_verdana_10_4bppv>:
{
 8004b34:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004b36:	4d16      	ldr	r5, [pc, #88]	@ (8004b90 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8004b38:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004b3a:	682c      	ldr	r4, [r5, #0]
 8004b3c:	f3bf 8f5b 	dmb	ish
 8004b40:	f014 0401 	ands.w	r4, r4, #1
 8004b44:	d120      	bne.n	8004b88 <_Z23getFont_verdana_10_4bppv+0x54>
 8004b46:	4628      	mov	r0, r5
 8004b48:	f01d fe6e 	bl	8022828 <__cxa_guard_acquire>
 8004b4c:	b1e0      	cbz	r0, 8004b88 <_Z23getFont_verdana_10_4bppv+0x54>
 8004b4e:	233f      	movs	r3, #63	@ 0x3f
 8004b50:	2201      	movs	r2, #1
 8004b52:	4910      	ldr	r1, [pc, #64]	@ (8004b94 <_Z23getFont_verdana_10_4bppv+0x60>)
 8004b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b56:	4b10      	ldr	r3, [pc, #64]	@ (8004b98 <_Z23getFont_verdana_10_4bppv+0x64>)
 8004b58:	4810      	ldr	r0, [pc, #64]	@ (8004b9c <_Z23getFont_verdana_10_4bppv+0x68>)
 8004b5a:	9308      	str	r3, [sp, #32]
 8004b5c:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8004b5e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004b60:	9405      	str	r4, [sp, #20]
 8004b62:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004b66:	2304      	movs	r3, #4
 8004b68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004b6c:	230a      	movs	r3, #10
 8004b6e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004b78:	f7ff fc24 	bl	80043c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004b7c:	4809      	ldr	r0, [pc, #36]	@ (8004ba4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004b7e:	f01e f9e5 	bl	8022f4c <atexit>
 8004b82:	4628      	mov	r0, r5
 8004b84:	f01d fe5c 	bl	8022840 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8004b88:	4804      	ldr	r0, [pc, #16]	@ (8004b9c <_Z23getFont_verdana_10_4bppv+0x68>)
 8004b8a:	b00f      	add	sp, #60	@ 0x3c
 8004b8c:	bd30      	pop	{r4, r5, pc}
 8004b8e:	bf00      	nop
 8004b90:	2400b2c0 	.word	0x2400b2c0
 8004b94:	08027a50 	.word	0x08027a50
 8004b98:	08027b98 	.word	0x08027b98
 8004b9c:	2400b2c4 	.word	0x2400b2c4
 8004ba0:	08027bc8 	.word	0x08027bc8
 8004ba4:	08004b31 	.word	0x08004b31

08004ba8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004ba8:	4770      	bx	lr
	...

08004bac <_Z23getFont_verdana_20_4bppv>:
{
 8004bac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004bae:	4d17      	ldr	r5, [pc, #92]	@ (8004c0c <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8004bb0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004bb2:	682c      	ldr	r4, [r5, #0]
 8004bb4:	f3bf 8f5b 	dmb	ish
 8004bb8:	f014 0401 	ands.w	r4, r4, #1
 8004bbc:	d122      	bne.n	8004c04 <_Z23getFont_verdana_20_4bppv+0x58>
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f01d fe32 	bl	8022828 <__cxa_guard_acquire>
 8004bc4:	b1f0      	cbz	r0, 8004c04 <_Z23getFont_verdana_20_4bppv+0x58>
 8004bc6:	233f      	movs	r3, #63	@ 0x3f
 8004bc8:	2215      	movs	r2, #21
 8004bca:	4911      	ldr	r1, [pc, #68]	@ (8004c10 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bce:	4b11      	ldr	r3, [pc, #68]	@ (8004c14 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004bd0:	4811      	ldr	r0, [pc, #68]	@ (8004c18 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004bd2:	9308      	str	r3, [sp, #32]
 8004bd4:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <_Z23getFont_verdana_20_4bppv+0x70>)
 8004bd6:	940a      	str	r4, [sp, #40]	@ 0x28
 8004bd8:	9307      	str	r3, [sp, #28]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	9401      	str	r4, [sp, #4]
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8004be4:	2304      	movs	r3, #4
 8004be6:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004bea:	2314      	movs	r3, #20
 8004bec:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	2318      	movs	r3, #24
 8004bf4:	f7ff fbe6 	bl	80043c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004bf8:	4809      	ldr	r0, [pc, #36]	@ (8004c20 <_Z23getFont_verdana_20_4bppv+0x74>)
 8004bfa:	f01e f9a7 	bl	8022f4c <atexit>
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f01d fe1e 	bl	8022840 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004c04:	4804      	ldr	r0, [pc, #16]	@ (8004c18 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004c06:	b00f      	add	sp, #60	@ 0x3c
 8004c08:	bd30      	pop	{r4, r5, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2400b2f0 	.word	0x2400b2f0
 8004c10:	08027a60 	.word	0x08027a60
 8004c14:	08027b9c 	.word	0x08027b9c
 8004c18:	2400b2f4 	.word	0x2400b2f4
 8004c1c:	08027bcc 	.word	0x08027bcc
 8004c20:	08004ba9 	.word	0x08004ba9

08004c24 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004c24:	4770      	bx	lr
	...

08004c28 <_Z23getFont_verdana_40_4bppv>:
{
 8004c28:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004c2a:	4d16      	ldr	r5, [pc, #88]	@ (8004c84 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8004c2c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004c2e:	682c      	ldr	r4, [r5, #0]
 8004c30:	f3bf 8f5b 	dmb	ish
 8004c34:	f014 0401 	ands.w	r4, r4, #1
 8004c38:	d120      	bne.n	8004c7c <_Z23getFont_verdana_40_4bppv+0x54>
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f01d fdf4 	bl	8022828 <__cxa_guard_acquire>
 8004c40:	b1e0      	cbz	r0, 8004c7c <_Z23getFont_verdana_40_4bppv+0x54>
 8004c42:	233f      	movs	r3, #63	@ 0x3f
 8004c44:	2201      	movs	r2, #1
 8004c46:	4910      	ldr	r1, [pc, #64]	@ (8004c88 <_Z23getFont_verdana_40_4bppv+0x60>)
 8004c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c4a:	4b10      	ldr	r3, [pc, #64]	@ (8004c8c <_Z23getFont_verdana_40_4bppv+0x64>)
 8004c4c:	4810      	ldr	r0, [pc, #64]	@ (8004c90 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004c4e:	9308      	str	r3, [sp, #32]
 8004c50:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004c52:	940a      	str	r4, [sp, #40]	@ 0x28
 8004c54:	9405      	str	r4, [sp, #20]
 8004c56:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004c60:	2328      	movs	r3, #40	@ 0x28
 8004c62:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004c6c:	f7ff fbaa 	bl	80043c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004c70:	4809      	ldr	r0, [pc, #36]	@ (8004c98 <_Z23getFont_verdana_40_4bppv+0x70>)
 8004c72:	f01e f96b 	bl	8022f4c <atexit>
 8004c76:	4628      	mov	r0, r5
 8004c78:	f01d fde2 	bl	8022840 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004c7c:	4804      	ldr	r0, [pc, #16]	@ (8004c90 <_Z23getFont_verdana_40_4bppv+0x68>)
 8004c7e:	b00f      	add	sp, #60	@ 0x3c
 8004c80:	bd30      	pop	{r4, r5, pc}
 8004c82:	bf00      	nop
 8004c84:	2400b320 	.word	0x2400b320
 8004c88:	08027b88 	.word	0x08027b88
 8004c8c:	08027bc4 	.word	0x08027bc4
 8004c90:	2400b324 	.word	0x2400b324
 8004c94:	08027bd0 	.word	0x08027bd0
 8004c98:	08004c25 	.word	0x08004c25

08004c9c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	4770      	bx	lr

08004ca0 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	4770      	bx	lr

08004ca4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004ca4:	b40e      	push	{r1, r2, r3}
 8004ca6:	b503      	push	{r0, r1, lr}
 8004ca8:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004caa:	2100      	movs	r1, #0
{
 8004cac:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004cb0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004cb2:	f010 fd69 	bl	8015788 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004cb6:	b002      	add	sp, #8
 8004cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cbc:	b003      	add	sp, #12
 8004cbe:	4770      	bx	lr

08004cc0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004cc0:	b40c      	push	{r2, r3}
 8004cc2:	b507      	push	{r0, r1, r2, lr}
 8004cc4:	ab04      	add	r3, sp, #16
 8004cc6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004cca:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004ccc:	f010 fd5c 	bl	8015788 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004cd0:	b003      	add	sp, #12
 8004cd2:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd6:	b002      	add	sp, #8
 8004cd8:	4770      	bx	lr
	...

08004cdc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004cdc:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004cde:	b510      	push	{r4, lr}
 8004ce0:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004ce2:	b373      	cbz	r3, 8004d42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004ce4:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8004ce6:	b92b      	cbnz	r3, 8004cf4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004ce8:	4b18      	ldr	r3, [pc, #96]	@ (8004d4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004cea:	21c5      	movs	r1, #197	@ 0xc5
 8004cec:	4a18      	ldr	r2, [pc, #96]	@ (8004d50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004cee:	4819      	ldr	r0, [pc, #100]	@ (8004d54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004cf0:	f01e f90e 	bl	8022f10 <__assert_func>
            return buffer[pos];
 8004cf4:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004cf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004cfa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004cfc:	b30b      	cbz	r3, 8004d42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004cfe:	f012 fbd3 	bl	80174a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004d02:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d803      	bhi.n	8004d10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004d08:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004d0a:	21cb      	movs	r1, #203	@ 0xcb
 8004d0c:	4a13      	ldr	r2, [pc, #76]	@ (8004d5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004d0e:	e7ee      	b.n	8004cee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004d10:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004d12:	f640 103f 	movw	r0, #2367	@ 0x93f
 8004d16:	1c53      	adds	r3, r2, #1
 8004d18:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004d1a:	2b09      	cmp	r3, #9
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	bf88      	it	hi
 8004d20:	f1a3 010a 	subhi.w	r1, r3, #10
 8004d24:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004d28:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004d2a:	4281      	cmp	r1, r0
 8004d2c:	d109      	bne.n	8004d42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004d34:	bf28      	it	cs
 8004d36:	2300      	movcs	r3, #0
            return buffer[pos];
 8004d38:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8004d3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004d3e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004d40:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004d42:	4620      	mov	r0, r4
}
 8004d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8004d48:	f012 bab0 	b.w	80172ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004d4c:	08025c70 	.word	0x08025c70
 8004d50:	08025c79 	.word	0x08025c79
 8004d54:	08025d24 	.word	0x08025d24
 8004d58:	08025d7c 	.word	0x08025d7c
 8004d5c:	08025d8a 	.word	0x08025d8a

08004d60 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004d60:	f012 ba6d 	b.w	801723e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004d64 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	ac02      	add	r4, sp, #8
 8004d6a:	e884 0006 	stmia.w	r4, {r1, r2}
 8004d6e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8004d70:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004d72:	4621      	mov	r1, r4
    va_start(pArg, format);
 8004d74:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	9b08      	ldr	r3, [sp, #32]
 8004d7e:	f00e fff7 	bl	8013d70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8004d82:	b006      	add	sp, #24
 8004d84:	bd10      	pop	{r4, pc}
	...

08004d88 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004d88:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004d8a:	bb18      	cbnz	r0, 8004dd4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004d8e:	4813      	ldr	r0, [pc, #76]	@ (8004ddc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004d90:	681c      	ldr	r4, [r3, #0]
 8004d92:	4913      	ldr	r1, [pc, #76]	@ (8004de0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004d94:	b1b4      	cbz	r4, 8004dc4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004d96:	6822      	ldr	r2, [r4, #0]
 8004d98:	4422      	add	r2, r4
 8004d9a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004d9c:	6862      	ldr	r2, [r4, #4]
 8004d9e:	4422      	add	r2, r4
 8004da0:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004da2:	68a2      	ldr	r2, [r4, #8]
 8004da4:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004dac:	f000 f838 	bl	8004e20 <_ZN17TypedTextDatabase8getFontsEv>
 8004db0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8004db2:	f000 f833 	bl	8004e1c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8004db6:	4b0c      	ldr	r3, [pc, #48]	@ (8004de8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004db8:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004dba:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004dbc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004df0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004dc0:	8018      	strh	r0, [r3, #0]
    }
}
 8004dc2:	e007      	b.n	8004dd4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004df4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004dc6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004dca:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004dce:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004dd0:	2c00      	cmp	r4, #0
 8004dd2:	d1e8      	bne.n	8004da6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004dd4:	bd38      	pop	{r3, r4, r5, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2400b35c 	.word	0x2400b35c
 8004ddc:	2400b354 	.word	0x2400b354
 8004de0:	2400b350 	.word	0x2400b350
 8004de4:	2400b358 	.word	0x2400b358
 8004de8:	240253d0 	.word	0x240253d0
 8004dec:	240253d8 	.word	0x240253d8
 8004df0:	240253d4 	.word	0x240253d4
 8004df4:	903d5c34 	.word	0x903d5c34
 8004df8:	903d5c20 	.word	0x903d5c20
 8004dfc:	903d5c84 	.word	0x903d5c84

08004e00 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004e00:	4b04      	ldr	r3, [pc, #16]	@ (8004e14 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004e08:	4b03      	ldr	r3, [pc, #12]	@ (8004e18 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
}
 8004e0c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2400b350 	.word	0x2400b350
 8004e18:	2400b354 	.word	0x2400b354

08004e1c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004e1c:	2005      	movs	r0, #5
 8004e1e:	4770      	bx	lr

08004e20 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004e20:	4800      	ldr	r0, [pc, #0]	@ (8004e24 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004e22:	4770      	bx	lr
 8004e24:	2400b360 	.word	0x2400b360

08004e28 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004e28:	b510      	push	{r4, lr}
};
 8004e2a:	4c05      	ldr	r4, [pc, #20]	@ (8004e40 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004e2c:	f7ff febe 	bl	8004bac <_Z23getFont_verdana_20_4bppv>
};
 8004e30:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004e32:	f7ff fef9 	bl	8004c28 <_Z23getFont_verdana_40_4bppv>
};
 8004e36:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004e38:	f7ff fe7c 	bl	8004b34 <_Z23getFont_verdana_10_4bppv>
};
 8004e3c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004e3e:	bd10      	pop	{r4, pc}
 8004e40:	2400b360 	.word	0x2400b360

08004e44 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004e44:	b510      	push	{r4, lr}
    pointArray = 0;
 8004e46:	2400      	movs	r4, #0
 8004e48:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004e4a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004e4c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004e4e:	601c      	str	r4, [r3, #0]
}
 8004e50:	bd10      	pop	{r4, pc}

08004e52 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004e52:	4770      	bx	lr

08004e54 <_ZN19FrontendApplicationD0Ev>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004e5c:	f01d fce2 	bl	8022824 <_ZdlPvj>
 8004e60:	4620      	mov	r0, r4
 8004e62:	bd10      	pop	{r4, pc}

08004e64 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4604      	mov	r4, r0
    {
        model.tick();
 8004e68:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004e6c:	f000 f813 	bl	8004e96 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004e70:	4620      	mov	r0, r4
    }
 8004e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004e76:	f00f bc7b 	b.w	8014770 <_ZN8touchgfx11Application15handleTickEventEv>
	...

08004e7c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004e80:	f7ff fa16 	bl	80042b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004e84:	4b01      	ldr	r3, [pc, #4]	@ (8004e8c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004e86:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004e88:	6023      	str	r3, [r4, #0]
}
 8004e8a:	bd10      	pop	{r4, pc}
 8004e8c:	080265ac 	.word	0x080265ac

08004e90 <_ZN5ModelC1Ev>:

}

#endif

Model::Model() : modelListener(0)
 8004e90:	2200      	movs	r2, #0
 8004e92:	6002      	str	r2, [r0, #0]
{

}
 8004e94:	4770      	bx	lr

08004e96 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8004e96:	4770      	bx	lr

08004e98 <_ZN5Model13SquareClickedEv>:

void Model::SquareClicked(){
 8004e98:	b510      	push	{r4, lr}


	HAL_UART_Transmit(&huart1, (uint8_t *)"SQ", 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8004e9a:	4c11      	ldr	r4, [pc, #68]	@ (8004ee0 <_ZN5Model13SquareClickedEv+0x48>)
	HAL_UART_Transmit(&huart1, (uint8_t *)"SQ", 2, HAL_MAX_DELAY);
 8004e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	4910      	ldr	r1, [pc, #64]	@ (8004ee4 <_ZN5Model13SquareClickedEv+0x4c>)
 8004ea4:	4810      	ldr	r0, [pc, #64]	@ (8004ee8 <_ZN5Model13SquareClickedEv+0x50>)
 8004ea6:	f007 fa10 	bl	800c2ca <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_RESET);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	2200      	movs	r2, #0
 8004eae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004eb2:	f002 ffc3 	bl	8007e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ebe:	f002 ffbd 	bl	8007e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET);
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004eca:	f002 ffb7 	bl	8007e3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8004ece:	4620      	mov	r0, r4
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000

}
 8004ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8004eda:	f002 bfaf 	b.w	8007e3c <HAL_GPIO_WritePin>
 8004ede:	bf00      	nop
 8004ee0:	58022000 	.word	0x58022000
 8004ee4:	08023fc8 	.word	0x08023fc8
 8004ee8:	24009a5c 	.word	0x24009a5c

08004eec <_ZN5Model11SineClickedEv>:

void Model::SineClicked(){
 8004eec:	b510      	push	{r4, lr}

	HAL_UART_Transmit(&huart1,(uint8_t *) "SI", 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8004eee:	4c11      	ldr	r4, [pc, #68]	@ (8004f34 <_ZN5Model11SineClickedEv+0x48>)
	HAL_UART_Transmit(&huart1,(uint8_t *) "SI", 2, HAL_MAX_DELAY);
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	4910      	ldr	r1, [pc, #64]	@ (8004f38 <_ZN5Model11SineClickedEv+0x4c>)
 8004ef8:	4810      	ldr	r0, [pc, #64]	@ (8004f3c <_ZN5Model11SineClickedEv+0x50>)
 8004efa:	f007 f9e6 	bl	800c2ca <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8004efe:	4620      	mov	r0, r4
 8004f00:	2201      	movs	r2, #1
 8004f02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f06:	f002 ff99 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f12:	f002 ff93 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET);
 8004f16:	4620      	mov	r0, r4
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f1e:	f002 ff8d 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8004f22:	4620      	mov	r0, r4
 8004f24:	2201      	movs	r2, #1
 8004f26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
}
 8004f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8004f2e:	f002 bf85 	b.w	8007e3c <HAL_GPIO_WritePin>
 8004f32:	bf00      	nop
 8004f34:	58022000 	.word	0x58022000
 8004f38:	08025e5c 	.word	0x08025e5c
 8004f3c:	24009a5c 	.word	0x24009a5c

08004f40 <_ZN5Model15TriAngleClickedEv>:

void Model::TriAngleClicked(){
 8004f40:	b510      	push	{r4, lr}

	HAL_UART_Transmit(&huart1,(uint8_t *) "TR", 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8004f42:	4c11      	ldr	r4, [pc, #68]	@ (8004f88 <_ZN5Model15TriAngleClickedEv+0x48>)
	HAL_UART_Transmit(&huart1,(uint8_t *) "TR", 2, HAL_MAX_DELAY);
 8004f44:	f04f 33ff 	mov.w	r3, #4294967295
 8004f48:	2202      	movs	r2, #2
 8004f4a:	4910      	ldr	r1, [pc, #64]	@ (8004f8c <_ZN5Model15TriAngleClickedEv+0x4c>)
 8004f4c:	4810      	ldr	r0, [pc, #64]	@ (8004f90 <_ZN5Model15TriAngleClickedEv+0x50>)
 8004f4e:	f007 f9bc 	bl	800c2ca <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8004f52:	4620      	mov	r0, r4
 8004f54:	2201      	movs	r2, #1
 8004f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004f5a:	f002 ff6f 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8004f5e:	4620      	mov	r0, r4
 8004f60:	2201      	movs	r2, #1
 8004f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f66:	f002 ff69 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_RESET);
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f72:	f002 ff63 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8004f76:	4620      	mov	r0, r4
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
}
 8004f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_SET);
 8004f82:	f002 bf5b 	b.w	8007e3c <HAL_GPIO_WritePin>
 8004f86:	bf00      	nop
 8004f88:	58022000 	.word	0x58022000
 8004f8c:	08025e5f 	.word	0x08025e5f
 8004f90:	24009a5c 	.word	0x24009a5c

08004f94 <_ZN5Model10TriClickedEv>:

void Model::TriClicked(){
 8004f94:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart1,(uint8_t *) "TN", 2, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8004f96:	4c11      	ldr	r4, [pc, #68]	@ (8004fdc <_ZN5Model10TriClickedEv+0x48>)
	HAL_UART_Transmit(&huart1,(uint8_t *) "TN", 2, HAL_MAX_DELAY);
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	4910      	ldr	r1, [pc, #64]	@ (8004fe0 <_ZN5Model10TriClickedEv+0x4c>)
 8004fa0:	4810      	ldr	r0, [pc, #64]	@ (8004fe4 <_ZN5Model10TriClickedEv+0x50>)
 8004fa2:	f007 f992 	bl	800c2ca <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fae:	f002 ff45 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_SET);
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fba:	f002 ff3f 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14, GPIO_PIN_SET);
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fc6:	f002 ff39 	bl	8007e3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
 8004fca:	4620      	mov	r0, r4
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
}
 8004fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_15, GPIO_PIN_RESET);
 8004fd6:	f002 bf31 	b.w	8007e3c <HAL_GPIO_WritePin>
 8004fda:	bf00      	nop
 8004fdc:	58022000 	.word	0x58022000
 8004fe0:	08025e62 	.word	0x08025e62
 8004fe4:	24009a5c 	.word	0x24009a5c

08004fe8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 8004fe8:	4770      	bx	lr

08004fea <_ZThn4_N16Screen1PresenterD1Ev>:
 8004fea:	3804      	subs	r0, #4
 8004fec:	4770      	bx	lr

08004fee <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004fee:	4770      	bx	lr

08004ff0 <_ZN16Screen1PresenterD0Ev>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	2110      	movs	r1, #16
 8004ff6:	f01d fc15 	bl	8022824 <_ZdlPvj>
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	bd10      	pop	{r4, pc}

08004ffe <_ZThn4_N16Screen1PresenterD0Ev>:
 8004ffe:	f1a0 0004 	sub.w	r0, r0, #4
 8005002:	e7f5      	b.n	8004ff0 <_ZN16Screen1PresenterD0Ev>

08005004 <_ZN16Screen1Presenter13SquareClickedEv>:

}

void Screen1Presenter::SquareClicked(){

	model->SquareClicked();
 8005004:	6880      	ldr	r0, [r0, #8]
 8005006:	f7ff bf47 	b.w	8004e98 <_ZN5Model13SquareClickedEv>

0800500a <_ZN16Screen1Presenter11SineClickedEv>:

}

void Screen1Presenter::SineClicked(){

	model->SineClicked();
 800500a:	6880      	ldr	r0, [r0, #8]
 800500c:	f7ff bf6e 	b.w	8004eec <_ZN5Model11SineClickedEv>

08005010 <_ZN16Screen1Presenter15TriAngleClickedEv>:

}

void Screen1Presenter::TriAngleClicked(){

	model->TriAngleClicked();
 8005010:	6880      	ldr	r0, [r0, #8]
 8005012:	f7ff bf95 	b.w	8004f40 <_ZN5Model15TriAngleClickedEv>

08005016 <_ZN16Screen1Presenter10TriClickedEv>:

}

void Screen1Presenter::TriClicked(){

	model->TriClicked();
 8005016:	6880      	ldr	r0, [r0, #8]
 8005018:	f7ff bfbc 	b.w	8004f94 <_ZN5Model10TriClickedEv>

0800501c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800501c:	2200      	movs	r2, #0
    : view(v)
 800501e:	60c1      	str	r1, [r0, #12]
 8005020:	6082      	str	r2, [r0, #8]
 8005022:	4a02      	ldr	r2, [pc, #8]	@ (800502c <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8005024:	6002      	str	r2, [r0, #0]
 8005026:	3228      	adds	r2, #40	@ 0x28
 8005028:	6042      	str	r2, [r0, #4]
}
 800502a:	4770      	bx	lr
 800502c:	08026600 	.word	0x08026600

08005030 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8005030:	4770      	bx	lr

08005032 <_ZN11Screen1View13SquareClickedEv>:

void Screen1View::SquareClicked(){

	presenter->SquareClicked();
 8005032:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8005034:	6803      	ldr	r3, [r0, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	4718      	bx	r3

0800503a <_ZN11Screen1View11SineClickedEv>:

}

void Screen1View::SineClicked(){

	presenter->SineClicked();
 800503a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800503c:	6803      	ldr	r3, [r0, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	4718      	bx	r3

08005042 <_ZN11Screen1View15TriAngleClickedEv>:

}

void Screen1View::TriAngleClicked(){

	presenter->TriAngleClicked();
 8005042:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8005044:	6803      	ldr	r3, [r0, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	4718      	bx	r3

0800504a <_ZN11Screen1View10TriClickedEv>:

}

void Screen1View::TriClicked(){

	presenter->TriClicked();
 800504a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800504c:	6803      	ldr	r3, [r0, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	4718      	bx	r3
	...

08005054 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8005054:	4b03      	ldr	r3, [pc, #12]	@ (8005064 <_ZN11Screen1ViewD1Ev+0x10>)
 8005056:	b510      	push	{r4, lr}
 8005058:	4604      	mov	r4, r0
 800505a:	6003      	str	r3, [r0, #0]
 800505c:	f7ff f9ec 	bl	8004438 <_ZN15Screen1ViewBaseD1Ev>
 8005060:	4620      	mov	r0, r4
 8005062:	bd10      	pop	{r4, pc}
 8005064:	08026638 	.word	0x08026638

08005068 <_ZN11Screen1ViewD0Ev>:
 8005068:	b510      	push	{r4, lr}
 800506a:	4604      	mov	r4, r0
 800506c:	f7ff fff2 	bl	8005054 <_ZN11Screen1ViewD1Ev>
 8005070:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005074:	4620      	mov	r0, r4
 8005076:	f01d fbd5 	bl	8022824 <_ZdlPvj>
 800507a:	4620      	mov	r0, r4
 800507c:	bd10      	pop	{r4, pc}
	...

08005080 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8005080:	b510      	push	{r4, lr}
 8005082:	4604      	mov	r4, r0
 8005084:	f7ff fa80 	bl	8004588 <_ZN15Screen1ViewBaseC1Ev>
 8005088:	4b01      	ldr	r3, [pc, #4]	@ (8005090 <_ZN11Screen1ViewC1Ev+0x10>)
}
 800508a:	4620      	mov	r0, r4
Screen1View::Screen1View()
 800508c:	6023      	str	r3, [r4, #0]
}
 800508e:	bd10      	pop	{r4, pc}
 8005090:	08026638 	.word	0x08026638

08005094 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8005094:	f7ff b9d1 	b.w	800443a <_ZN15Screen1ViewBase11setupScreenEv>

08005098 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {}
 8005098:	4770      	bx	lr

0800509a <_ZThn4_N16Screen2PresenterD1Ev>:
 800509a:	3804      	subs	r0, #4
 800509c:	4770      	bx	lr

0800509e <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800509e:	4770      	bx	lr

080050a0 <_ZN16Screen2PresenterD0Ev>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	2110      	movs	r1, #16
 80050a6:	f01d fbbd 	bl	8022824 <_ZdlPvj>
 80050aa:	4620      	mov	r0, r4
 80050ac:	bd10      	pop	{r4, pc}

080050ae <_ZThn4_N16Screen2PresenterD0Ev>:
 80050ae:	f1a0 0004 	sub.w	r0, r0, #4
 80050b2:	e7f5      	b.n	80050a0 <_ZN16Screen2PresenterD0Ev>

080050b4 <_ZN16Screen2PresenterC1ER11Screen2View>:
 80050b4:	2200      	movs	r2, #0
    : view(v)
 80050b6:	60c1      	str	r1, [r0, #12]
 80050b8:	6082      	str	r2, [r0, #8]
 80050ba:	4a02      	ldr	r2, [pc, #8]	@ (80050c4 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 80050bc:	6002      	str	r2, [r0, #0]
 80050be:	3218      	adds	r2, #24
 80050c0:	6042      	str	r2, [r0, #4]
}
 80050c2:	4770      	bx	lr
 80050c4:	0802667c 	.word	0x0802667c

080050c8 <_ZN11Screen2View14tearDownScreenEv>:
}

void Screen2View::tearDownScreen()
{
    Screen2ViewBase::tearDownScreen();
}
 80050c8:	4770      	bx	lr
	...

080050cc <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80050cc:	4b03      	ldr	r3, [pc, #12]	@ (80050dc <_ZN11Screen2ViewD1Ev+0x10>)
 80050ce:	b510      	push	{r4, lr}
 80050d0:	4604      	mov	r4, r0
 80050d2:	6003      	str	r3, [r0, #0]
 80050d4:	f7ff fb7c 	bl	80047d0 <_ZN15Screen2ViewBaseD1Ev>
 80050d8:	4620      	mov	r0, r4
 80050da:	bd10      	pop	{r4, pc}
 80050dc:	080266a4 	.word	0x080266a4

080050e0 <_ZN11Screen2ViewD0Ev>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	f7ff fff2 	bl	80050cc <_ZN11Screen2ViewD1Ev>
 80050e8:	f44f 719c 	mov.w	r1, #312	@ 0x138
 80050ec:	4620      	mov	r0, r4
 80050ee:	f01d fb99 	bl	8022824 <_ZdlPvj>
 80050f2:	4620      	mov	r0, r4
 80050f4:	bd10      	pop	{r4, pc}
	...

080050f8 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View()
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4604      	mov	r4, r0
 80050fc:	f7ff fc40 	bl	8004980 <_ZN15Screen2ViewBaseC1Ev>
 8005100:	4b01      	ldr	r3, [pc, #4]	@ (8005108 <_ZN11Screen2ViewC1Ev+0x10>)
}
 8005102:	4620      	mov	r0, r4
Screen2View::Screen2View()
 8005104:	6023      	str	r3, [r4, #0]
}
 8005106:	bd10      	pop	{r4, pc}
 8005108:	080266a4 	.word	0x080266a4

0800510c <_ZN11Screen2View11setupScreenEv>:
    Screen2ViewBase::setupScreen();
 800510c:	f7ff bb61 	b.w	80047d2 <_ZN15Screen2ViewBase11setupScreenEv>

08005110 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8005110:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8005112:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8005116:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8005118:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800511a:	2302      	movs	r3, #2
 800511c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800511e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005122:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8005126:	4770      	bx	lr

08005128 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8005128:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800512c:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800512e:	bf04      	itt	eq
 8005130:	2300      	moveq	r3, #0
 8005132:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8005136:	2000      	movs	r0, #0
 8005138:	4770      	bx	lr

0800513a <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800513a:	2000      	movs	r0, #0
 800513c:	4770      	bx	lr

0800513e <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800513e:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005140:	6904      	ldr	r4, [r0, #16]
 8005142:	8900      	ldrh	r0, [r0, #8]
 8005144:	46a4      	mov	ip, r4
}
 8005146:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800514a:	4760      	bx	ip

0800514c <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800514c:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800514e:	68c4      	ldr	r4, [r0, #12]
 8005150:	8900      	ldrh	r0, [r0, #8]
 8005152:	46a4      	mov	ip, r4
}
 8005154:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005158:	4760      	bx	ip

0800515a <FT6X06_GestureConfig>:
{
 800515a:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800515c:	f100 0518 	add.w	r5, r0, #24
{
 8005160:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005162:	7809      	ldrb	r1, [r1, #0]
 8005164:	4628      	mov	r0, r5
 8005166:	f000 f911 	bl	800538c <ft6x06_radian_value>
 800516a:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800516c:	7931      	ldrb	r1, [r6, #4]
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f918 	bl	80053a4 <ft6x06_offset_left_right>
 8005174:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005176:	7a31      	ldrb	r1, [r6, #8]
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f91f 	bl	80053bc <ft6x06_offset_up_down>
 800517e:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8005180:	7b31      	ldrb	r1, [r6, #12]
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f926 	bl	80053d4 <ft6x06_disatnce_left_right>
 8005188:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800518a:	7c31      	ldrb	r1, [r6, #16]
 800518c:	4628      	mov	r0, r5
 800518e:	f000 f92d 	bl	80053ec <ft6x06_distance_up_down>
 8005192:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005194:	7d31      	ldrb	r1, [r6, #20]
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f934 	bl	8005404 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 800519c:	42c4      	cmn	r4, r0
}
 800519e:	bf14      	ite	ne
 80051a0:	f04f 30ff 	movne.w	r0, #4294967295
 80051a4:	2000      	moveq	r0, #0
 80051a6:	bd70      	pop	{r4, r5, r6, pc}

080051a8 <FT6X06_ReadID>:
{
 80051a8:	b513      	push	{r0, r1, r4, lr}
 80051aa:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80051ac:	3018      	adds	r0, #24
 80051ae:	f10d 0107 	add.w	r1, sp, #7
 80051b2:	f000 f93f 	bl	8005434 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80051b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051ba:	6023      	str	r3, [r4, #0]
}
 80051bc:	b002      	add	sp, #8
 80051be:	bd10      	pop	{r4, pc}

080051c0 <FT6X06_GetState>:
{
 80051c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80051c2:	f100 0518 	add.w	r5, r0, #24
{
 80051c6:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80051c8:	a901      	add	r1, sp, #4
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f8d1 	bl	8005372 <ft6x06_td_status>
 80051d0:	bb08      	cbnz	r0, 8005216 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80051d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	bf98      	it	ls
 80051da:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80051dc:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80051de:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80051e0:	2103      	movs	r1, #3
 80051e2:	4628      	mov	r0, r5
 80051e4:	eb0d 0203 	add.w	r2, sp, r3
 80051e8:	f000 f8b0 	bl	800534c <ft6x06_read_reg>
 80051ec:	b9b0      	cbnz	r0, 800521c <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80051ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80051fc:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80051fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005202:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005204:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800520e:	4313      	orrs	r3, r2
 8005210:	60a3      	str	r3, [r4, #8]
}
 8005212:	b003      	add	sp, #12
 8005214:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005216:	f04f 30ff 	mov.w	r0, #4294967295
 800521a:	e7df      	b.n	80051dc <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005220:	e7f7      	b.n	8005212 <FT6X06_GetState+0x52>

08005222 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8005222:	3018      	adds	r0, #24
 8005224:	f000 b8a0 	b.w	8005368 <ft6x06_gest_id>

08005228 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005228:	2101      	movs	r1, #1
 800522a:	3018      	adds	r0, #24
 800522c:	f000 b8f6 	b.w	800541c <ft6x06_g_mode>

08005230 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8005230:	2100      	movs	r1, #0
 8005232:	3018      	adds	r0, #24
 8005234:	f000 b8f2 	b.w	800541c <ft6x06_g_mode>

08005238 <FT6X06_Init>:
{
 8005238:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800523a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800523e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8005240:	b96b      	cbnz	r3, 800525e <FT6X06_Init+0x26>
    pObj->IO.Init();
 8005242:	6803      	ldr	r3, [r0, #0]
 8005244:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005246:	4620      	mov	r0, r4
 8005248:	f7ff fff2 	bl	8005230 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 800524c:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800524e:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8005252:	bf18      	it	ne
 8005254:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8005256:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 800525a:	4240      	negs	r0, r0
}
 800525c:	bd10      	pop	{r4, pc}
 800525e:	2000      	movs	r0, #0
  return ret;
 8005260:	e7fc      	b.n	800525c <FT6X06_Init+0x24>

08005262 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8005262:	2000      	movs	r0, #0
 8005264:	4770      	bx	lr

08005266 <FT6X06_GetMultiTouchState>:
{
 8005266:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005268:	f100 0518 	add.w	r5, r0, #24
{
 800526c:	b085      	sub	sp, #20
 800526e:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005270:	4628      	mov	r0, r5
 8005272:	a901      	add	r1, sp, #4
 8005274:	f000 f87d 	bl	8005372 <ft6x06_td_status>
 8005278:	2800      	cmp	r0, #0
 800527a:	d145      	bne.n	8005308 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800527c:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005280:	2b02      	cmp	r3, #2
 8005282:	bf98      	it	ls
 8005284:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005286:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005288:	230c      	movs	r3, #12
 800528a:	aa01      	add	r2, sp, #4
 800528c:	2103      	movs	r1, #3
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f85c 	bl	800534c <ft6x06_read_reg>
 8005294:	2800      	cmp	r0, #0
 8005296:	d13a      	bne.n	800530e <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005298:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800529c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80052a0:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80052a2:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80052a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80052a8:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80052aa:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80052ac:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80052b0:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80052b4:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80052b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052c0:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80052c2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80052c6:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80052c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80052cc:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80052ce:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80052d6:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80052d8:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80052da:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80052de:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80052e0:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80052e2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80052e6:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80052e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80052f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80052fa:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80052fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005304:	b005      	add	sp, #20
 8005306:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e7bb      	b.n	8005286 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005312:	e7f7      	b.n	8005304 <FT6X06_GetMultiTouchState+0x9e>

08005314 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005314:	b190      	cbz	r0, 800533c <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005316:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005318:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800531a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 800531c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800531e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8005320:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005322:	68ca      	ldr	r2, [r1, #12]
 8005324:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005326:	690a      	ldr	r2, [r1, #16]
 8005328:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800532a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800532c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800532e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005330:	4a04      	ldr	r2, [pc, #16]	@ (8005344 <FT6X06_RegisterBusIO+0x30>)
 8005332:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005334:	4a04      	ldr	r2, [pc, #16]	@ (8005348 <FT6X06_RegisterBusIO+0x34>)
 8005336:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005338:	b103      	cbz	r3, 800533c <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800533a:	4718      	bx	r3
}
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	0800513f 	.word	0x0800513f
 8005348:	0800514d 	.word	0x0800514d

0800534c <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800534c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800534e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005352:	46a4      	mov	ip, r4
}
 8005354:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005358:	4760      	bx	ip

0800535a <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800535a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800535c:	6804      	ldr	r4, [r0, #0]
 800535e:	6880      	ldr	r0, [r0, #8]
 8005360:	46a4      	mov	ip, r4
}
 8005362:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005366:	4760      	bx	ip

08005368 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005368:	2301      	movs	r3, #1
{
 800536a:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800536c:	4619      	mov	r1, r3
 800536e:	f7ff bfed 	b.w	800534c <ft6x06_read_reg>

08005372 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005372:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005374:	460a      	mov	r2, r1
{
 8005376:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005378:	2301      	movs	r3, #1
 800537a:	2102      	movs	r1, #2
 800537c:	f7ff ffe6 	bl	800534c <ft6x06_read_reg>
  
  if(ret == 0)
 8005380:	b918      	cbnz	r0, 800538a <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8005382:	7823      	ldrb	r3, [r4, #0]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800538a:	bd10      	pop	{r4, pc}

0800538c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800538c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800538e:	2301      	movs	r3, #1
{
 8005390:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005394:	f10d 0207 	add.w	r2, sp, #7
 8005398:	2191      	movs	r1, #145	@ 0x91
 800539a:	f7ff ffde 	bl	800535a <ft6x06_write_reg>
}
 800539e:	b003      	add	sp, #12
 80053a0:	f85d fb04 	ldr.w	pc, [sp], #4

080053a4 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80053a4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80053a6:	2301      	movs	r3, #1
{
 80053a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80053ac:	f10d 0207 	add.w	r2, sp, #7
 80053b0:	2192      	movs	r1, #146	@ 0x92
 80053b2:	f7ff ffd2 	bl	800535a <ft6x06_write_reg>
}
 80053b6:	b003      	add	sp, #12
 80053b8:	f85d fb04 	ldr.w	pc, [sp], #4

080053bc <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80053bc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80053be:	2301      	movs	r3, #1
{
 80053c0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80053c4:	f10d 0207 	add.w	r2, sp, #7
 80053c8:	2193      	movs	r1, #147	@ 0x93
 80053ca:	f7ff ffc6 	bl	800535a <ft6x06_write_reg>
}
 80053ce:	b003      	add	sp, #12
 80053d0:	f85d fb04 	ldr.w	pc, [sp], #4

080053d4 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80053d4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80053d6:	2301      	movs	r3, #1
{
 80053d8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80053dc:	f10d 0207 	add.w	r2, sp, #7
 80053e0:	2194      	movs	r1, #148	@ 0x94
 80053e2:	f7ff ffba 	bl	800535a <ft6x06_write_reg>
}
 80053e6:	b003      	add	sp, #12
 80053e8:	f85d fb04 	ldr.w	pc, [sp], #4

080053ec <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80053ec:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80053ee:	2301      	movs	r3, #1
{
 80053f0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80053f4:	f10d 0207 	add.w	r2, sp, #7
 80053f8:	2195      	movs	r1, #149	@ 0x95
 80053fa:	f7ff ffae 	bl	800535a <ft6x06_write_reg>
}
 80053fe:	b003      	add	sp, #12
 8005400:	f85d fb04 	ldr.w	pc, [sp], #4

08005404 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005404:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005406:	2301      	movs	r3, #1
{
 8005408:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800540c:	f10d 0207 	add.w	r2, sp, #7
 8005410:	2196      	movs	r1, #150	@ 0x96
 8005412:	f7ff ffa2 	bl	800535a <ft6x06_write_reg>
}
 8005416:	b003      	add	sp, #12
 8005418:	f85d fb04 	ldr.w	pc, [sp], #4

0800541c <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 800541c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800541e:	2301      	movs	r3, #1
{
 8005420:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005424:	f10d 0207 	add.w	r2, sp, #7
 8005428:	21a4      	movs	r1, #164	@ 0xa4
 800542a:	f7ff ff96 	bl	800535a <ft6x06_write_reg>
}
 800542e:	b003      	add	sp, #12
 8005430:	f85d fb04 	ldr.w	pc, [sp], #4

08005434 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005434:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005436:	2301      	movs	r3, #1
 8005438:	21a8      	movs	r1, #168	@ 0xa8
 800543a:	f7ff bf87 	b.w	800534c <ft6x06_read_reg>
	...

08005440 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005440:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8005442:	2201      	movs	r2, #1
 8005444:	4b07      	ldr	r3, [pc, #28]	@ (8005464 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005446:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800544a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800544c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800544e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8005450:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005452:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005456:	f006 fb15 	bl	800ba84 <HAL_SDRAM_SendCommand>
 800545a:	3800      	subs	r0, #0
 800545c:	bf18      	it	ne
 800545e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005460:	4240      	negs	r0, r0
 8005462:	bd08      	pop	{r3, pc}
 8005464:	2400b36c 	.word	0x2400b36c

08005468 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005468:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800546a:	2202      	movs	r2, #2
 800546c:	4b08      	ldr	r3, [pc, #32]	@ (8005490 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800546e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8005472:	2101      	movs	r1, #1
 8005474:	2200      	movs	r2, #0
 8005476:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800547a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800547e:	4619      	mov	r1, r3
 8005480:	f006 fb00 	bl	800ba84 <HAL_SDRAM_SendCommand>
 8005484:	3800      	subs	r0, #0
 8005486:	bf18      	it	ne
 8005488:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800548a:	4240      	negs	r0, r0
 800548c:	bd08      	pop	{r3, pc}
 800548e:	bf00      	nop
 8005490:	2400b36c 	.word	0x2400b36c

08005494 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8005494:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005496:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 800549a:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800549c:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 800549e:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80054a0:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80054a2:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80054a4:	6991      	ldr	r1, [r2, #24]
 80054a6:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80054a8:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80054aa:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80054ac:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80054ae:	4907      	ldr	r1, [pc, #28]	@ (80054cc <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80054b0:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80054b2:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80054b4:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80054b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80054ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054be:	f006 fae1 	bl	800ba84 <HAL_SDRAM_SendCommand>
 80054c2:	3800      	subs	r0, #0
 80054c4:	bf18      	it	ne
 80054c6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80054c8:	4240      	negs	r0, r0
 80054ca:	bd10      	pop	{r4, pc}
 80054cc:	2400b36c 	.word	0x2400b36c

080054d0 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80054d0:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80054d2:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80054d4:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80054d8:	2108      	movs	r1, #8
 80054da:	2200      	movs	r2, #0
 80054dc:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80054e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054e4:	4619      	mov	r1, r3
 80054e6:	f006 facd 	bl	800ba84 <HAL_SDRAM_SendCommand>
 80054ea:	3800      	subs	r0, #0
 80054ec:	bf18      	it	ne
 80054ee:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80054f0:	4240      	negs	r0, r0
 80054f2:	bd08      	pop	{r3, pc}
 80054f4:	2400b36c 	.word	0x2400b36c

080054f8 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80054f8:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80054fa:	f006 fae2 	bl	800bac2 <HAL_SDRAM_ProgramRefreshRate>
 80054fe:	3800      	subs	r0, #0
 8005500:	bf18      	it	ne
 8005502:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005504:	4240      	negs	r0, r0
 8005506:	bd08      	pop	{r3, pc}

08005508 <IS42S32800J_Init>:
{
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800550c:	6809      	ldr	r1, [r1, #0]
{
 800550e:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005510:	f7ff ff96 	bl	8005440 <IS42S32800J_ClockEnable>
 8005514:	b110      	cbz	r0, 800551c <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8005516:	f04f 30ff 	mov.w	r0, #4294967295
}
 800551a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800551c:	f001 fc7e 	bl	8006e1c <HAL_GetTick>
 8005520:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8005522:	f001 fc7b 	bl	8006e1c <HAL_GetTick>
 8005526:	4286      	cmp	r6, r0
 8005528:	d0fb      	beq.n	8005522 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	4628      	mov	r0, r5
 800552e:	f7ff ff9b 	bl	8005468 <IS42S32800J_Precharge>
 8005532:	2800      	cmp	r0, #0
 8005534:	d1ef      	bne.n	8005516 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8005536:	4628      	mov	r0, r5
 8005538:	e9d4 1200 	ldrd	r1, r2, [r4]
 800553c:	f7ff ffc8 	bl	80054d0 <IS42S32800J_RefreshMode>
 8005540:	2800      	cmp	r0, #0
 8005542:	d1e8      	bne.n	8005516 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f7ff ffa4 	bl	8005494 <IS42S32800J_ModeRegConfig>
 800554c:	2800      	cmp	r0, #0
 800554e:	d1e2      	bne.n	8005516 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8005550:	68a1      	ldr	r1, [r4, #8]
 8005552:	4628      	mov	r0, r5
 8005554:	f7ff ffd0 	bl	80054f8 <IS42S32800J_RefreshRate>
 8005558:	3800      	subs	r0, #0
 800555a:	bf18      	it	ne
 800555c:	2001      	movne	r0, #1
 800555e:	4240      	negs	r0, r0
  return ret;
 8005560:	e7db      	b.n	800551a <IS42S32800J_Init+0x12>

08005562 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005562:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800556a:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800556e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005572:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005576:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800557a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800557e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8005580:	2000      	movs	r0, #0
 8005582:	4770      	bx	lr

08005584 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005584:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005586:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 800558a:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800558c:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005590:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005592:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005594:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8005596:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005598:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800559a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800559c:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800559e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80055a0:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80055a2:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80055a4:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80055a6:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055a8:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80055aa:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80055ae:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 80055b2:	2310      	movs	r3, #16
 80055b4:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80055b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80055ba:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80055bc:	f240 1301 	movw	r3, #257	@ 0x101
 80055c0:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055c6:	f004 fd0b 	bl	8009fe0 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80055ca:	2800      	cmp	r0, #0

}
 80055cc:	bf14      	ite	ne
 80055ce:	f06f 0004 	mvnne.w	r0, #4
 80055d2:	2000      	moveq	r0, #0
 80055d4:	b015      	add	sp, #84	@ 0x54
 80055d6:	f85d fb04 	ldr.w	pc, [sp], #4

080055da <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80055da:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055dc:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80055e0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80055e2:	bf18      	it	ne
 80055e4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80055e8:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80055ea:	bf08      	it	eq
 80055ec:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80055f0:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80055f2:	a906      	add	r1, sp, #24
{
 80055f4:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80055f6:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80055f8:	2306      	movs	r3, #6
 80055fa:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80055fc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80055fe:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8005602:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8005604:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005606:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005608:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800560c:	f004 fbe8 	bl	8009de0 <HAL_QSPI_Command>
 8005610:	bb20      	cbnz	r0, 800565c <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005612:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8005616:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005618:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800561a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800561e:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005620:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005622:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005626:	f04f 0310 	mov.w	r3, #16
 800562a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800562e:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005632:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005634:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005638:	bf14      	ite	ne
 800563a:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800563e:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005642:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005644:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005646:	f241 3388 	movw	r3, #5000	@ 0x1388
 800564a:	f004 fcc9 	bl	8009fe0 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800564e:	2800      	cmp	r0, #0
 8005650:	bf14      	ite	ne
 8005652:	f06f 0004 	mvnne.w	r0, #4
 8005656:	2000      	moveq	r0, #0
}
 8005658:	b015      	add	sp, #84	@ 0x54
 800565a:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 800565c:	f06f 0001 	mvn.w	r0, #1
 8005660:	e7fa      	b.n	8005658 <MT25TL01G_WriteEnable+0x7e>

08005662 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005662:	2903      	cmp	r1, #3
{
 8005664:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005666:	bf18      	it	ne
 8005668:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800566c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800566e:	bf08      	it	eq
 8005670:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8005674:	4604      	mov	r4, r0
 8005676:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005678:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800567a:	23b7      	movs	r3, #183	@ 0xb7
 800567c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800567e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005680:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005684:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005686:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005688:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800568a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800568e:	f7ff ffa4 	bl	80055da <MT25TL01G_WriteEnable>
 8005692:	b118      	cbz	r0, 800569c <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8005694:	f06f 0001 	mvn.w	r0, #1
}
 8005698:	b00f      	add	sp, #60	@ 0x3c
 800569a:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800569c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a0:	4669      	mov	r1, sp
 80056a2:	4620      	mov	r0, r4
 80056a4:	f004 fb9c 	bl	8009de0 <HAL_QSPI_Command>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d1f3      	bne.n	8005694 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80056ac:	4629      	mov	r1, r5
 80056ae:	4620      	mov	r0, r4
 80056b0:	f7ff ff68 	bl	8005584 <MT25TL01G_AutoPollingMemReady>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d0ef      	beq.n	8005698 <MT25TL01G_Enter4BytesAddressMode+0x36>
 80056b8:	e7ec      	b.n	8005694 <MT25TL01G_Enter4BytesAddressMode+0x32>

080056ba <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80056ba:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80056bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80056c0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056c2:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80056c6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80056c8:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056ca:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80056cc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80056ce:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80056d0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80056d4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80056d6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80056d8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80056da:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056de:	f004 fb7f 	bl	8009de0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80056e2:	2800      	cmp	r0, #0
}
 80056e4:	bf14      	ite	ne
 80056e6:	f06f 0001 	mvnne.w	r0, #1
 80056ea:	2000      	moveq	r0, #0
 80056ec:	b00f      	add	sp, #60	@ 0x3c
 80056ee:	f85d fb04 	ldr.w	pc, [sp], #4

080056f2 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80056f2:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80056f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80056f8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056fa:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80056fe:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005700:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005702:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005704:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005706:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005708:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800570e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005710:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005712:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005716:	f004 fb63 	bl	8009de0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800571a:	2800      	cmp	r0, #0
}
 800571c:	bf14      	ite	ne
 800571e:	f06f 0001 	mvnne.w	r0, #1
 8005722:	2000      	moveq	r0, #0
 8005724:	b00f      	add	sp, #60	@ 0x3c
 8005726:	f85d fb04 	ldr.w	pc, [sp], #4

0800572a <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800572a:	b500      	push	{lr}
 800572c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800572e:	2903      	cmp	r1, #3
 8005730:	d80e      	bhi.n	8005750 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005732:	e8df f001 	tbb	[pc, r1]
 8005736:	2902      	.short	0x2902
 8005738:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800573a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800573e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005740:	230e      	movs	r3, #14
 8005742:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005744:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005748:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800574a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800574e:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005750:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005752:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005756:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800575a:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800575c:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800575e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005762:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005764:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005766:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800576a:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800576c:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800576e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005770:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005774:	f004 fc85 	bl	800a082 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005778:	2800      	cmp	r0, #0
}
 800577a:	bf14      	ite	ne
 800577c:	f06f 0005 	mvnne.w	r0, #5
 8005780:	2000      	moveq	r0, #0
 8005782:	b011      	add	sp, #68	@ 0x44
 8005784:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800578c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800578e:	233d      	movs	r3, #61	@ 0x3d
 8005790:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005796:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005798:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800579c:	e7d7      	b.n	800574e <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800579e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057a2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80057a4:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80057a6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80057a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80057ac:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80057ae:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80057b2:	e7cc      	b.n	800574e <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80057b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80057b8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80057ba:	23ed      	movs	r3, #237	@ 0xed
 80057bc:	e7f3      	b.n	80057a6 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080057be <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80057be:	b500      	push	{lr}
 80057c0:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80057c2:	2903      	cmp	r1, #3
 80057c4:	d80e      	bhi.n	80057e4 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80057c6:	e8df f001 	tbb	[pc, r1]
 80057ca:	2502      	.short	0x2502
 80057cc:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80057ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057d2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80057d4:	230c      	movs	r3, #12
 80057d6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80057d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057dc:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80057de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80057e2:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80057e4:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80057e6:	466a      	mov	r2, sp
 80057e8:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80057ea:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80057ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80057f0:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80057f6:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80057f8:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80057fc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005800:	f004 fc3f 	bl	800a082 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005804:	2800      	cmp	r0, #0
}
 8005806:	bf14      	ite	ne
 8005808:	f06f 0005 	mvnne.w	r0, #5
 800580c:	2000      	moveq	r0, #0
 800580e:	b011      	add	sp, #68	@ 0x44
 8005810:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005818:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800581a:	23bc      	movs	r3, #188	@ 0xbc
 800581c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800581e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005822:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005824:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005828:	e7db      	b.n	80057e2 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800582a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800582e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005830:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005832:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005834:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005838:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800583a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800583e:	e7d0      	b.n	80057e2 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005840:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005844:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005846:	23eb      	movs	r3, #235	@ 0xeb
 8005848:	e7f3      	b.n	8005832 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

0800584a <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800584a:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800584c:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005850:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005852:	bf18      	it	ne
 8005854:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005858:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800585a:	bf08      	it	eq
 800585c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005860:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005862:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005864:	2366      	movs	r3, #102	@ 0x66
 8005866:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005868:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800586a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800586e:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005870:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005872:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005874:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005878:	f004 fab2 	bl	8009de0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800587c:	2800      	cmp	r0, #0
}
 800587e:	bf14      	ite	ne
 8005880:	f06f 0001 	mvnne.w	r0, #1
 8005884:	2000      	moveq	r0, #0
 8005886:	b00f      	add	sp, #60	@ 0x3c
 8005888:	f85d fb04 	ldr.w	pc, [sp], #4

0800588c <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800588c:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800588e:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005892:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005894:	bf18      	it	ne
 8005896:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800589a:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800589c:	bf08      	it	eq
 800589e:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058a2:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80058a4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80058a6:	2399      	movs	r3, #153	@ 0x99
 80058a8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80058aa:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80058ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80058b0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80058b2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80058b4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80058b6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ba:	f004 fa91 	bl	8009de0 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80058be:	2800      	cmp	r0, #0
}
 80058c0:	bf14      	ite	ne
 80058c2:	f06f 0001 	mvnne.w	r0, #1
 80058c6:	2000      	moveq	r0, #0
 80058c8:	b00f      	add	sp, #60	@ 0x3c
 80058ca:	f85d fb04 	ldr.w	pc, [sp], #4

080058ce <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80058ce:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80058d0:	6884      	ldr	r4, [r0, #8]
 80058d2:	8800      	ldrh	r0, [r0, #0]
 80058d4:	46a4      	mov	ip, r4
}
 80058d6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80058da:	4760      	bx	ip

080058dc <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80058dc:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80058de:	6844      	ldr	r4, [r0, #4]
 80058e0:	8800      	ldrh	r0, [r0, #0]
 80058e2:	46a4      	mov	ip, r4
}
 80058e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80058e8:	4760      	bx	ip

080058ea <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80058ea:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80058ec:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80058ee:	4604      	mov	r4, r0
 80058f0:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80058f2:	4798      	blx	r3
 80058f4:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80058f6:	68e3      	ldr	r3, [r4, #12]
 80058f8:	4798      	blx	r3
 80058fa:	1b83      	subs	r3, r0, r6
 80058fc:	42ab      	cmp	r3, r5
 80058fe:	d3fa      	bcc.n	80058f6 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005900:	bd70      	pop	{r4, r5, r6, pc}
	...

08005904 <OTM8009A_Init>:
{
 8005904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005908:	2300      	movs	r3, #0
 800590a:	f100 0510 	add.w	r5, r0, #16
{
 800590e:	4607      	mov	r7, r0
 8005910:	460e      	mov	r6, r1
 8005912:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005914:	4619      	mov	r1, r3
 8005916:	4ade      	ldr	r2, [pc, #888]	@ (8005c90 <OTM8009A_Init+0x38c>)
 8005918:	4628      	mov	r0, r5
 800591a:	f000 fb99 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800591e:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005920:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005922:	4adc      	ldr	r2, [pc, #880]	@ (8005c94 <OTM8009A_Init+0x390>)
 8005924:	21ff      	movs	r1, #255	@ 0xff
 8005926:	4628      	mov	r0, r5
 8005928:	f000 fb92 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800592c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800592e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005930:	4ad9      	ldr	r2, [pc, #868]	@ (8005c98 <OTM8009A_Init+0x394>)
 8005932:	4619      	mov	r1, r3
 8005934:	4628      	mov	r0, r5
 8005936:	f000 fb8b 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800593a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800593c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800593e:	4ad7      	ldr	r2, [pc, #860]	@ (8005c9c <OTM8009A_Init+0x398>)
 8005940:	21ff      	movs	r1, #255	@ 0xff
 8005942:	4628      	mov	r0, r5
 8005944:	f000 fb84 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005948:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800594a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800594c:	4ad2      	ldr	r2, [pc, #840]	@ (8005c98 <OTM8009A_Init+0x394>)
 800594e:	4619      	mov	r1, r3
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fb7d 	bl	8006050 <otm8009a_write_reg>
 8005956:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005958:	2300      	movs	r3, #0
 800595a:	4ad1      	ldr	r2, [pc, #836]	@ (8005ca0 <OTM8009A_Init+0x39c>)
 800595c:	21c4      	movs	r1, #196	@ 0xc4
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fb76 	bl	8006050 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005964:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005966:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff ffbe 	bl	80058ea <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800596e:	2300      	movs	r3, #0
 8005970:	4acc      	ldr	r2, [pc, #816]	@ (8005ca4 <OTM8009A_Init+0x3a0>)
 8005972:	4628      	mov	r0, r5
 8005974:	4619      	mov	r1, r3
 8005976:	f000 fb6b 	bl	8006050 <otm8009a_write_reg>
 800597a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800597c:	2300      	movs	r3, #0
 800597e:	4aca      	ldr	r2, [pc, #808]	@ (8005ca8 <OTM8009A_Init+0x3a4>)
 8005980:	21c4      	movs	r1, #196	@ 0xc4
 8005982:	4628      	mov	r0, r5
 8005984:	f000 fb64 	bl	8006050 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005988:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800598a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800598c:	4638      	mov	r0, r7
 800598e:	f7ff ffac 	bl	80058ea <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005992:	2300      	movs	r3, #0
 8005994:	4ac5      	ldr	r2, [pc, #788]	@ (8005cac <OTM8009A_Init+0x3a8>)
 8005996:	4628      	mov	r0, r5
 8005998:	4619      	mov	r1, r3
 800599a:	f000 fb59 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800599e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80059a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80059a2:	4ac3      	ldr	r2, [pc, #780]	@ (8005cb0 <OTM8009A_Init+0x3ac>)
 80059a4:	21c5      	movs	r1, #197	@ 0xc5
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fb52 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80059ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80059ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80059b0:	4ac0      	ldr	r2, [pc, #768]	@ (8005cb4 <OTM8009A_Init+0x3b0>)
 80059b2:	4619      	mov	r1, r3
 80059b4:	4628      	mov	r0, r5
 80059b6:	f000 fb4b 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80059ba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80059bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80059be:	4abe      	ldr	r2, [pc, #760]	@ (8005cb8 <OTM8009A_Init+0x3b4>)
 80059c0:	21c5      	movs	r1, #197	@ 0xc5
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 fb44 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80059c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80059ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80059cc:	4abb      	ldr	r2, [pc, #748]	@ (8005cbc <OTM8009A_Init+0x3b8>)
 80059ce:	4619      	mov	r1, r3
 80059d0:	4628      	mov	r0, r5
 80059d2:	f000 fb3d 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80059d6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80059d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80059da:	4ab9      	ldr	r2, [pc, #740]	@ (8005cc0 <OTM8009A_Init+0x3bc>)
 80059dc:	21c0      	movs	r1, #192	@ 0xc0
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fb36 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80059e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80059e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80059e8:	4aa9      	ldr	r2, [pc, #676]	@ (8005c90 <OTM8009A_Init+0x38c>)
 80059ea:	4619      	mov	r1, r3
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 fb2f 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80059f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80059f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80059f6:	4ab3      	ldr	r2, [pc, #716]	@ (8005cc4 <OTM8009A_Init+0x3c0>)
 80059f8:	21d9      	movs	r1, #217	@ 0xd9
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 fb28 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005a00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005a02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005a04:	4ab0      	ldr	r2, [pc, #704]	@ (8005cc8 <OTM8009A_Init+0x3c4>)
 8005a06:	4619      	mov	r1, r3
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 fb21 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005a0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005a10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005a12:	4aae      	ldr	r2, [pc, #696]	@ (8005ccc <OTM8009A_Init+0x3c8>)
 8005a14:	21c1      	movs	r1, #193	@ 0xc1
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 fb1a 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005a1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005a1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005a20:	4aab      	ldr	r2, [pc, #684]	@ (8005cd0 <OTM8009A_Init+0x3cc>)
 8005a22:	4619      	mov	r1, r3
 8005a24:	4628      	mov	r0, r5
 8005a26:	f000 fb13 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005a2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005a2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005a2e:	4aa9      	ldr	r2, [pc, #676]	@ (8005cd4 <OTM8009A_Init+0x3d0>)
 8005a30:	21c5      	movs	r1, #197	@ 0xc5
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 fb0c 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005a38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005a3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005a3c:	4aa6      	ldr	r2, [pc, #664]	@ (8005cd8 <OTM8009A_Init+0x3d4>)
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4628      	mov	r0, r5
 8005a42:	f000 fb05 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005a46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005a48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005a4a:	4a9b      	ldr	r2, [pc, #620]	@ (8005cb8 <OTM8009A_Init+0x3b4>)
 8005a4c:	21c5      	movs	r1, #197	@ 0xc5
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fafe 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005a56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a58:	4a8d      	ldr	r2, [pc, #564]	@ (8005c90 <OTM8009A_Init+0x38c>)
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 faf7 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005a62:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005a66:	4a9d      	ldr	r2, [pc, #628]	@ (8005cdc <OTM8009A_Init+0x3d8>)
 8005a68:	21d8      	movs	r1, #216	@ 0xd8
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 faf0 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005a70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005a72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005a74:	4a9a      	ldr	r2, [pc, #616]	@ (8005ce0 <OTM8009A_Init+0x3dc>)
 8005a76:	4619      	mov	r1, r3
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 fae9 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005a7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005a80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005a82:	4a98      	ldr	r2, [pc, #608]	@ (8005ce4 <OTM8009A_Init+0x3e0>)
 8005a84:	21c5      	movs	r1, #197	@ 0xc5
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fae2 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005a8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005a8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005a90:	4a95      	ldr	r2, [pc, #596]	@ (8005ce8 <OTM8009A_Init+0x3e4>)
 8005a92:	4619      	mov	r1, r3
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 fadb 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005a9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005a9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005a9e:	4a93      	ldr	r2, [pc, #588]	@ (8005cec <OTM8009A_Init+0x3e8>)
 8005aa0:	21c0      	movs	r1, #192	@ 0xc0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fad4 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005aa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005aaa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005aac:	4a90      	ldr	r2, [pc, #576]	@ (8005cf0 <OTM8009A_Init+0x3ec>)
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	f000 facd 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005ab6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005ab8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005aba:	4a8e      	ldr	r2, [pc, #568]	@ (8005cf4 <OTM8009A_Init+0x3f0>)
 8005abc:	21c5      	movs	r1, #197	@ 0xc5
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 fac6 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ac4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005ac6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ac8:	4a8b      	ldr	r2, [pc, #556]	@ (8005cf8 <OTM8009A_Init+0x3f4>)
 8005aca:	4619      	mov	r1, r3
 8005acc:	4628      	mov	r0, r5
 8005ace:	f000 fabf 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005ad2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ad4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005ad6:	4a89      	ldr	r2, [pc, #548]	@ (8005cfc <OTM8009A_Init+0x3f8>)
 8005ad8:	21c4      	movs	r1, #196	@ 0xc4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fab8 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005ae0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005ae2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005ae4:	4a78      	ldr	r2, [pc, #480]	@ (8005cc8 <OTM8009A_Init+0x3c4>)
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 fab1 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005aee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005af0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005af2:	4a83      	ldr	r2, [pc, #524]	@ (8005d00 <OTM8009A_Init+0x3fc>)
 8005af4:	21c1      	movs	r1, #193	@ 0xc1
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 faaa 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005afc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005afe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005b00:	4a80      	ldr	r2, [pc, #512]	@ (8005d04 <OTM8009A_Init+0x400>)
 8005b02:	4619      	mov	r1, r3
 8005b04:	4628      	mov	r0, r5
 8005b06:	f000 faa3 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005b0a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005b0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d08 <OTM8009A_Init+0x404>)
 8005b10:	21b3      	movs	r1, #179	@ 0xb3
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fa9c 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005b18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005b1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005b1c:	4a5e      	ldr	r2, [pc, #376]	@ (8005c98 <OTM8009A_Init+0x394>)
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 fa95 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005b26:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005b28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005b2a:	4a78      	ldr	r2, [pc, #480]	@ (8005d0c <OTM8009A_Init+0x408>)
 8005b2c:	21ce      	movs	r1, #206	@ 0xce
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 fa8e 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005b34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005b36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005b38:	4a75      	ldr	r2, [pc, #468]	@ (8005d10 <OTM8009A_Init+0x40c>)
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 fa87 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005b42:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005b44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005b46:	4a73      	ldr	r2, [pc, #460]	@ (8005d14 <OTM8009A_Init+0x410>)
 8005b48:	21ce      	movs	r1, #206	@ 0xce
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 fa80 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005b50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005b52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005b54:	4a70      	ldr	r2, [pc, #448]	@ (8005d18 <OTM8009A_Init+0x414>)
 8005b56:	4619      	mov	r1, r3
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fa79 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005b5e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005b60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005b62:	4a6e      	ldr	r2, [pc, #440]	@ (8005d1c <OTM8009A_Init+0x418>)
 8005b64:	21ce      	movs	r1, #206	@ 0xce
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 fa72 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005b6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005b6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005b70:	4a6b      	ldr	r2, [pc, #428]	@ (8005d20 <OTM8009A_Init+0x41c>)
 8005b72:	4619      	mov	r1, r3
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 fa6b 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005b7a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005b7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005b7e:	4a69      	ldr	r2, [pc, #420]	@ (8005d24 <OTM8009A_Init+0x420>)
 8005b80:	21cf      	movs	r1, #207	@ 0xcf
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 fa64 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005b88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005b8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005b8c:	4a66      	ldr	r2, [pc, #408]	@ (8005d28 <OTM8009A_Init+0x424>)
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4628      	mov	r0, r5
 8005b92:	f000 fa5d 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005b96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005b98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005b9a:	4a64      	ldr	r2, [pc, #400]	@ (8005d2c <OTM8009A_Init+0x428>)
 8005b9c:	21cf      	movs	r1, #207	@ 0xcf
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fa56 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ba4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005ba6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ba8:	4a3b      	ldr	r2, [pc, #236]	@ (8005c98 <OTM8009A_Init+0x394>)
 8005baa:	4619      	mov	r1, r3
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 fa4f 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005bb2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005bb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8005d30 <OTM8009A_Init+0x42c>)
 8005bb8:	21cb      	movs	r1, #203	@ 0xcb
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 fa48 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005bc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005bc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005bc4:	4a5b      	ldr	r2, [pc, #364]	@ (8005d34 <OTM8009A_Init+0x430>)
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fa41 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005bce:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005bd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005bd2:	4a59      	ldr	r2, [pc, #356]	@ (8005d38 <OTM8009A_Init+0x434>)
 8005bd4:	21cb      	movs	r1, #203	@ 0xcb
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fa3a 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005bdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005bde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005be0:	4a4b      	ldr	r2, [pc, #300]	@ (8005d10 <OTM8009A_Init+0x40c>)
 8005be2:	4619      	mov	r1, r3
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fa33 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005bea:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005bec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005bee:	4a53      	ldr	r2, [pc, #332]	@ (8005d3c <OTM8009A_Init+0x438>)
 8005bf0:	21cb      	movs	r1, #203	@ 0xcb
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 fa2c 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005bf8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005bfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005bfc:	4a46      	ldr	r2, [pc, #280]	@ (8005d18 <OTM8009A_Init+0x414>)
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fa25 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005c06:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8005d40 <OTM8009A_Init+0x43c>)
 8005c0c:	21cb      	movs	r1, #203	@ 0xcb
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 fa1e 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005c16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c18:	4a41      	ldr	r2, [pc, #260]	@ (8005d20 <OTM8009A_Init+0x41c>)
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 fa17 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005c22:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005c26:	4a47      	ldr	r2, [pc, #284]	@ (8005d44 <OTM8009A_Init+0x440>)
 8005c28:	21cb      	movs	r1, #203	@ 0xcb
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 fa10 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005c32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c34:	4a3c      	ldr	r2, [pc, #240]	@ (8005d28 <OTM8009A_Init+0x424>)
 8005c36:	4619      	mov	r1, r3
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 fa09 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005c3e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c40:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005c42:	4a41      	ldr	r2, [pc, #260]	@ (8005d48 <OTM8009A_Init+0x444>)
 8005c44:	21cb      	movs	r1, #203	@ 0xcb
 8005c46:	4628      	mov	r0, r5
 8005c48:	f000 fa02 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005c4c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005c4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005c50:	4a3e      	ldr	r2, [pc, #248]	@ (8005d4c <OTM8009A_Init+0x448>)
 8005c52:	4619      	mov	r1, r3
 8005c54:	4628      	mov	r0, r5
 8005c56:	f000 f9fb 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005c5a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005c5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005c5e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d50 <OTM8009A_Init+0x44c>)
 8005c60:	21cb      	movs	r1, #203	@ 0xcb
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f9f4 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005c68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005c6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005c6c:	4a39      	ldr	r2, [pc, #228]	@ (8005d54 <OTM8009A_Init+0x450>)
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f9ed 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005c76:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005c78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005c7a:	4a37      	ldr	r2, [pc, #220]	@ (8005d58 <OTM8009A_Init+0x454>)
 8005c7c:	21cb      	movs	r1, #203	@ 0xcb
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f000 f9e6 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005c84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005c86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005c88:	4a03      	ldr	r2, [pc, #12]	@ (8005c98 <OTM8009A_Init+0x394>)
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	e065      	b.n	8005d5c <OTM8009A_Init+0x458>
 8005c90:	080267dd 	.word	0x080267dd
 8005c94:	080267d9 	.word	0x080267d9
 8005c98:	080267de 	.word	0x080267de
 8005c9c:	080267d7 	.word	0x080267d7
 8005ca0:	080267df 	.word	0x080267df
 8005ca4:	080267e0 	.word	0x080267e0
 8005ca8:	080267e1 	.word	0x080267e1
 8005cac:	080267e2 	.word	0x080267e2
 8005cb0:	080267e3 	.word	0x080267e3
 8005cb4:	080267e4 	.word	0x080267e4
 8005cb8:	080267e5 	.word	0x080267e5
 8005cbc:	080267e6 	.word	0x080267e6
 8005cc0:	080267e7 	.word	0x080267e7
 8005cc4:	080267e8 	.word	0x080267e8
 8005cc8:	080267eb 	.word	0x080267eb
 8005ccc:	080267ec 	.word	0x080267ec
 8005cd0:	080267ed 	.word	0x080267ed
 8005cd4:	080267ee 	.word	0x080267ee
 8005cd8:	080267ef 	.word	0x080267ef
 8005cdc:	080267d5 	.word	0x080267d5
 8005ce0:	080267f0 	.word	0x080267f0
 8005ce4:	080267f1 	.word	0x080267f1
 8005ce8:	080267f2 	.word	0x080267f2
 8005cec:	080267f3 	.word	0x080267f3
 8005cf0:	080267f4 	.word	0x080267f4
 8005cf4:	080267f5 	.word	0x080267f5
 8005cf8:	080267e9 	.word	0x080267e9
 8005cfc:	080267f6 	.word	0x080267f6
 8005d00:	080267f7 	.word	0x080267f7
 8005d04:	080267f8 	.word	0x080267f8
 8005d08:	080267d3 	.word	0x080267d3
 8005d0c:	080267cd 	.word	0x080267cd
 8005d10:	080267f9 	.word	0x080267f9
 8005d14:	080267bf 	.word	0x080267bf
 8005d18:	080267fa 	.word	0x080267fa
 8005d1c:	080267b1 	.word	0x080267b1
 8005d20:	080267fb 	.word	0x080267fb
 8005d24:	080267a7 	.word	0x080267a7
 8005d28:	080267fc 	.word	0x080267fc
 8005d2c:	08026809 	.word	0x08026809
 8005d30:	0802679d 	.word	0x0802679d
 8005d34:	080267fd 	.word	0x080267fd
 8005d38:	0802678e 	.word	0x0802678e
 8005d3c:	0802677f 	.word	0x0802677f
 8005d40:	08026775 	.word	0x08026775
 8005d44:	08026766 	.word	0x08026766
 8005d48:	08026757 	.word	0x08026757
 8005d4c:	080267fe 	.word	0x080267fe
 8005d50:	0802674d 	.word	0x0802674d
 8005d54:	080267ff 	.word	0x080267ff
 8005d58:	08026743 	.word	0x08026743
 8005d5c:	f000 f978 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005d60:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005d64:	4a8e      	ldr	r2, [pc, #568]	@ (8005fa0 <OTM8009A_Init+0x69c>)
 8005d66:	21cc      	movs	r1, #204	@ 0xcc
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f000 f971 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005d6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005d70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005d72:	4a8c      	ldr	r2, [pc, #560]	@ (8005fa4 <OTM8009A_Init+0x6a0>)
 8005d74:	4619      	mov	r1, r3
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f96a 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005d7c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005d7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005d80:	4a89      	ldr	r2, [pc, #548]	@ (8005fa8 <OTM8009A_Init+0x6a4>)
 8005d82:	21cc      	movs	r1, #204	@ 0xcc
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 f963 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005d8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005d8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005d8e:	4a87      	ldr	r2, [pc, #540]	@ (8005fac <OTM8009A_Init+0x6a8>)
 8005d90:	4619      	mov	r1, r3
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 f95c 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005d98:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005d9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005d9c:	4a84      	ldr	r2, [pc, #528]	@ (8005fb0 <OTM8009A_Init+0x6ac>)
 8005d9e:	21cc      	movs	r1, #204	@ 0xcc
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 f955 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005da6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005da8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005daa:	4a82      	ldr	r2, [pc, #520]	@ (8005fb4 <OTM8009A_Init+0x6b0>)
 8005dac:	4619      	mov	r1, r3
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f94e 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005db4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005db6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005db8:	4a7f      	ldr	r2, [pc, #508]	@ (8005fb8 <OTM8009A_Init+0x6b4>)
 8005dba:	21cc      	movs	r1, #204	@ 0xcc
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f000 f947 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005dc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005dc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005dc6:	4a7d      	ldr	r2, [pc, #500]	@ (8005fbc <OTM8009A_Init+0x6b8>)
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f940 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005dd0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005dd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fc0 <OTM8009A_Init+0x6bc>)
 8005dd6:	21cc      	movs	r1, #204	@ 0xcc
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 f939 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005dde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005de0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005de2:	4a78      	ldr	r2, [pc, #480]	@ (8005fc4 <OTM8009A_Init+0x6c0>)
 8005de4:	4619      	mov	r1, r3
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f932 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005dec:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005dee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005df0:	4a75      	ldr	r2, [pc, #468]	@ (8005fc8 <OTM8009A_Init+0x6c4>)
 8005df2:	21cc      	movs	r1, #204	@ 0xcc
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 f92b 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005dfa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005dfc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005dfe:	4a73      	ldr	r2, [pc, #460]	@ (8005fcc <OTM8009A_Init+0x6c8>)
 8005e00:	4619      	mov	r1, r3
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 f924 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005e08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005e0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005e0c:	4a70      	ldr	r2, [pc, #448]	@ (8005fd0 <OTM8009A_Init+0x6cc>)
 8005e0e:	21c5      	movs	r1, #197	@ 0xc5
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 f91d 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005e16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005e18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8005fd4 <OTM8009A_Init+0x6d0>)
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f000 f916 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005e24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005e26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005e28:	4a6b      	ldr	r2, [pc, #428]	@ (8005fd8 <OTM8009A_Init+0x6d4>)
 8005e2a:	21f5      	movs	r1, #245	@ 0xf5
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f90f 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005e32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005e34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005e36:	4a69      	ldr	r2, [pc, #420]	@ (8005fdc <OTM8009A_Init+0x6d8>)
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f908 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005e40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005e42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005e44:	4a66      	ldr	r2, [pc, #408]	@ (8005fe0 <OTM8009A_Init+0x6dc>)
 8005e46:	21c6      	movs	r1, #198	@ 0xc6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f000 f901 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005e50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e52:	4a64      	ldr	r2, [pc, #400]	@ (8005fe4 <OTM8009A_Init+0x6e0>)
 8005e54:	4619      	mov	r1, r3
 8005e56:	4628      	mov	r0, r5
 8005e58:	f000 f8fa 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005e5c:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005e60:	4a61      	ldr	r2, [pc, #388]	@ (8005fe8 <OTM8009A_Init+0x6e4>)
 8005e62:	21ff      	movs	r1, #255	@ 0xff
 8005e64:	4628      	mov	r0, r5
 8005e66:	f000 f8f3 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005e6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8005fe4 <OTM8009A_Init+0x6e0>)
 8005e70:	4619      	mov	r1, r3
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f8ec 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e7c:	4a59      	ldr	r2, [pc, #356]	@ (8005fe4 <OTM8009A_Init+0x6e0>)
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f8e5 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005e86:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005e8a:	4a58      	ldr	r2, [pc, #352]	@ (8005fec <OTM8009A_Init+0x6e8>)
 8005e8c:	21e1      	movs	r1, #225	@ 0xe1
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 f8de 	bl	8006050 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005e96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e98:	4a52      	ldr	r2, [pc, #328]	@ (8005fe4 <OTM8009A_Init+0x6e0>)
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f000 f8d7 	bl	8006050 <otm8009a_write_reg>
 8005ea2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	4a52      	ldr	r2, [pc, #328]	@ (8005ff0 <OTM8009A_Init+0x6ec>)
 8005ea8:	21e2      	movs	r1, #226	@ 0xe2
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f8d0 	bl	8006050 <otm8009a_write_reg>
 8005eb0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8005ff4 <OTM8009A_Init+0x6f0>)
 8005eb6:	2111      	movs	r1, #17
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 f8c9 	bl	8006050 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005ebe:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005ec0:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff fd11 	bl	80058ea <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005ec8:	4f4b      	ldr	r7, [pc, #300]	@ (8005ff8 <OTM8009A_Init+0x6f4>)
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	d061      	beq.n	8005f92 <OTM8009A_Init+0x68e>
 8005ece:	2e02      	cmp	r6, #2
 8005ed0:	d107      	bne.n	8005ee2 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4a49      	ldr	r2, [pc, #292]	@ (8005ffc <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005ed6:	213a      	movs	r1, #58	@ 0x3a
 8005ed8:	4628      	mov	r0, r5
 8005eda:	f000 f8b9 	bl	8006050 <otm8009a_write_reg>
 8005ede:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005ee0:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005ee2:	f1b8 0f01 	cmp.w	r8, #1
 8005ee6:	d157      	bne.n	8005f98 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005ee8:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005eea:	f10d 0207 	add.w	r2, sp, #7
 8005eee:	2136      	movs	r1, #54	@ 0x36
 8005ef0:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005ef2:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f000 f8aa 	bl	8006050 <otm8009a_write_reg>
 8005efc:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005efe:	2304      	movs	r3, #4
 8005f00:	4a3f      	ldr	r2, [pc, #252]	@ (8006000 <OTM8009A_Init+0x6fc>)
 8005f02:	212a      	movs	r1, #42	@ 0x2a
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f8a3 	bl	8006050 <otm8009a_write_reg>
 8005f0a:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8006004 <OTM8009A_Init+0x700>)
 8005f10:	212b      	movs	r1, #43	@ 0x2b
 8005f12:	4628      	mov	r0, r5
 8005f14:	f000 f89c 	bl	8006050 <otm8009a_write_reg>
 8005f18:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005f1a:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005f1e:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005f20:	2300      	movs	r3, #0
 8005f22:	4a39      	ldr	r2, [pc, #228]	@ (8006008 <OTM8009A_Init+0x704>)
 8005f24:	2151      	movs	r1, #81	@ 0x51
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f892 	bl	8006050 <otm8009a_write_reg>
 8005f2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005f2e:	4633      	mov	r3, r6
 8005f30:	4a36      	ldr	r2, [pc, #216]	@ (800600c <OTM8009A_Init+0x708>)
 8005f32:	2153      	movs	r1, #83	@ 0x53
 8005f34:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005f36:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005f38:	f000 f88a 	bl	8006050 <otm8009a_write_reg>
 8005f3c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005f3e:	4633      	mov	r3, r6
 8005f40:	4a33      	ldr	r2, [pc, #204]	@ (8006010 <OTM8009A_Init+0x70c>)
 8005f42:	2155      	movs	r1, #85	@ 0x55
 8005f44:	4628      	mov	r0, r5
 8005f46:	f000 f883 	bl	8006050 <otm8009a_write_reg>
 8005f4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005f4c:	4633      	mov	r3, r6
 8005f4e:	4a31      	ldr	r2, [pc, #196]	@ (8006014 <OTM8009A_Init+0x710>)
 8005f50:	215e      	movs	r1, #94	@ 0x5e
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f87c 	bl	8006050 <otm8009a_write_reg>
 8005f58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005f5a:	4633      	mov	r3, r6
 8005f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8006018 <OTM8009A_Init+0x714>)
 8005f5e:	2129      	movs	r1, #41	@ 0x29
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 f875 	bl	8006050 <otm8009a_write_reg>
 8005f66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005f68:	4633      	mov	r3, r6
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe4 <OTM8009A_Init+0x6e0>)
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 f86e 	bl	8006050 <otm8009a_write_reg>
 8005f74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005f76:	4633      	mov	r3, r6
 8005f78:	4a28      	ldr	r2, [pc, #160]	@ (800601c <OTM8009A_Init+0x718>)
 8005f7a:	212c      	movs	r1, #44	@ 0x2c
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	f000 f867 	bl	8006050 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005f82:	42c4      	cmn	r4, r0
}
 8005f84:	bf14      	ite	ne
 8005f86:	f04f 30ff 	movne.w	r0, #4294967295
 8005f8a:	4630      	moveq	r0, r6
 8005f8c:	b002      	add	sp, #8
 8005f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005f92:	4633      	mov	r3, r6
 8005f94:	4a22      	ldr	r2, [pc, #136]	@ (8006020 <OTM8009A_Init+0x71c>)
 8005f96:	e79e      	b.n	8005ed6 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	e7bf      	b.n	8005f1e <OTM8009A_Init+0x61a>
 8005f9e:	bf00      	nop
 8005fa0:	08026739 	.word	0x08026739
 8005fa4:	080267fd 	.word	0x080267fd
 8005fa8:	0802672a 	.word	0x0802672a
 8005fac:	080267f9 	.word	0x080267f9
 8005fb0:	0802671b 	.word	0x0802671b
 8005fb4:	080267fa 	.word	0x080267fa
 8005fb8:	08026711 	.word	0x08026711
 8005fbc:	080267fb 	.word	0x080267fb
 8005fc0:	08026702 	.word	0x08026702
 8005fc4:	080267fc 	.word	0x080267fc
 8005fc8:	080266f3 	.word	0x080266f3
 8005fcc:	080267e9 	.word	0x080267e9
 8005fd0:	0802680a 	.word	0x0802680a
 8005fd4:	0802680b 	.word	0x0802680b
 8005fd8:	0802680c 	.word	0x0802680c
 8005fdc:	0802680d 	.word	0x0802680d
 8005fe0:	0802680e 	.word	0x0802680e
 8005fe4:	080267dd 	.word	0x080267dd
 8005fe8:	080266f0 	.word	0x080266f0
 8005fec:	080266e0 	.word	0x080266e0
 8005ff0:	080266d0 	.word	0x080266d0
 8005ff4:	08026800 	.word	0x08026800
 8005ff8:	2400b37c 	.word	0x2400b37c
 8005ffc:	08026801 	.word	0x08026801
 8006000:	08026813 	.word	0x08026813
 8006004:	0802680f 	.word	0x0802680f
 8006008:	08026803 	.word	0x08026803
 800600c:	08026804 	.word	0x08026804
 8006010:	08026805 	.word	0x08026805
 8006014:	08026806 	.word	0x08026806
 8006018:	08026807 	.word	0x08026807
 800601c:	08026808 	.word	0x08026808
 8006020:	08026802 	.word	0x08026802

08006024 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8006024:	b160      	cbz	r0, 8006040 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006026:	684b      	ldr	r3, [r1, #4]
 8006028:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800602a:	688b      	ldr	r3, [r1, #8]
 800602c:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800602e:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8006030:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8006032:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <OTM8009A_RegisterBusIO+0x24>)
 8006036:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <OTM8009A_RegisterBusIO+0x28>)
 800603a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800603c:	2000      	movs	r0, #0
 800603e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	080058cf 	.word	0x080058cf
 800604c:	080058dd 	.word	0x080058dd

08006050 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8006050:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006052:	6804      	ldr	r4, [r0, #0]
 8006054:	6880      	ldr	r0, [r0, #8]
 8006056:	46a4      	mov	ip, r4
}
 8006058:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800605c:	4760      	bx	ip
	...

08006060 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8006060:	4a10      	ldr	r2, [pc, #64]	@ (80060a4 <BSP_I2C4_DeInit+0x44>)
{
 8006062:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006064:	6813      	ldr	r3, [r2, #0]
 8006066:	3b01      	subs	r3, #1
 8006068:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800606a:	b10b      	cbz	r3, 8006070 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800606c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800606e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006070:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006074:	480c      	ldr	r0, [pc, #48]	@ (80060a8 <BSP_I2C4_DeInit+0x48>)
 8006076:	f001 fe3f 	bl	8007cf8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800607a:	480b      	ldr	r0, [pc, #44]	@ (80060a8 <BSP_I2C4_DeInit+0x48>)
 800607c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006080:	f001 fe3a 	bl	8007cf8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006084:	4a09      	ldr	r2, [pc, #36]	@ (80060ac <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006086:	480a      	ldr	r0, [pc, #40]	@ (80060b0 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006088:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 800608c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006090:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006094:	f002 f880 	bl	8008198 <HAL_I2C_DeInit>
 8006098:	2800      	cmp	r0, #0
 800609a:	d0e7      	beq.n	800606c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800609c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80060a0:	e7e5      	b.n	800606e <BSP_I2C4_DeInit+0xe>
 80060a2:	bf00      	nop
 80060a4:	2400bde0 	.word	0x2400bde0
 80060a8:	58020c00 	.word	0x58020c00
 80060ac:	58024400 	.word	0x58024400
 80060b0:	2400b388 	.word	0x2400b388

080060b4 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80060b4:	2300      	movs	r3, #0
 80060b6:	2201      	movs	r2, #1
{
 80060b8:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80060ba:	6041      	str	r1, [r0, #4]
{
 80060bc:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80060be:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80060c0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80060c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80060c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80060cc:	f002 f80e 	bl	80080ec <HAL_I2C_Init>
 80060d0:	4601      	mov	r1, r0
 80060d2:	b108      	cbz	r0, 80060d8 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80060d4:	2001      	movs	r0, #1
}
 80060d6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80060d8:	4620      	mov	r0, r4
 80060da:	f002 fa34 	bl	8008546 <HAL_I2CEx_ConfigAnalogFilter>
 80060de:	4601      	mov	r1, r0
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d1f7      	bne.n	80060d4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80060e4:	4620      	mov	r0, r4
 80060e6:	f002 fa54 	bl	8008592 <HAL_I2CEx_ConfigDigitalFilter>
 80060ea:	3800      	subs	r0, #0
 80060ec:	bf18      	it	ne
 80060ee:	2001      	movne	r0, #1
 80060f0:	e7f1      	b.n	80060d6 <MX_I2C4_Init+0x22>
	...

080060f4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80060f4:	4ba2      	ldr	r3, [pc, #648]	@ (8006380 <BSP_I2C4_Init+0x28c>)
 80060f6:	48a3      	ldr	r0, [pc, #652]	@ (8006384 <BSP_I2C4_Init+0x290>)
{
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b093      	sub	sp, #76	@ 0x4c
  hbus_i2c4.Instance = BUS_I2C4;
 80060fe:	6003      	str	r3, [r0, #0]
  if (I2c4InitCounter == 0U)
 8006100:	4ba1      	ldr	r3, [pc, #644]	@ (8006388 <BSP_I2C4_Init+0x294>)
 8006102:	681c      	ldr	r4, [r3, #0]
 8006104:	b11c      	cbz	r4, 800610e <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8006106:	2000      	movs	r0, #0
}
 8006108:	b013      	add	sp, #76	@ 0x4c
 800610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006112:	f002 fa13 	bl	800853c <HAL_I2C_GetState>
 8006116:	2800      	cmp	r0, #0
 8006118:	d1f5      	bne.n	8006106 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800611a:	4d9c      	ldr	r5, [pc, #624]	@ (800638c <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800611c:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006120:	2702      	movs	r7, #2
 8006122:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006124:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006128:	a90d      	add	r1, sp, #52	@ 0x34
 800612a:	4899      	ldr	r0, [pc, #612]	@ (8006390 <BSP_I2C4_Init+0x29c>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800612c:	f043 0308 	orr.w	r3, r3, #8
 8006130:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006134:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	930a      	str	r3, [sp, #40]	@ 0x28
 800613e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006140:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006144:	f043 0308 	orr.w	r3, r3, #8
 8006148:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800614c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006150:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006158:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800615a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800615e:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006162:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006166:	f001 fcdf 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800616a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800616e:	a90d      	add	r1, sp, #52	@ 0x34
 8006170:	4887      	ldr	r0, [pc, #540]	@ (8006390 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006172:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006174:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006178:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800617c:	f001 fcd4 	bl	8007b28 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8006180:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006188:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 800618c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006194:	930c      	str	r3, [sp, #48]	@ 0x30
 8006196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8006198:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800619c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a0:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80061a4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80061a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ac:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80061b0:	f004 fc9a 	bl	800aae8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d06d      	beq.n	8006294 <BSP_I2C4_Init+0x1a0>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80061b8:	4b76      	ldr	r3, [pc, #472]	@ (8006394 <BSP_I2C4_Init+0x2a0>)
  if (tsdadel_max <= 0)
 80061ba:	4622      	mov	r2, r4
 80061bc:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80061be:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80061c2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80061c6:	f8df b1d4 	ldr.w	fp, [pc, #468]	@ 800639c <BSP_I2C4_Init+0x2a8>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80061ca:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80061ce:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80061d2:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80061d6:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80061d8:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80061dc:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80061e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 80061e4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 80061e8:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80061ea:	4b6b      	ldr	r3, [pc, #428]	@ (8006398 <BSP_I2C4_Init+0x2a4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
{
 80061ee:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80061f0:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80061f4:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 80061f8:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80061fc:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8006200:	d35b      	bcc.n	80062ba <BSP_I2C4_Init+0x1c6>
 8006202:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006204:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006206:	9d00      	ldr	r5, [sp, #0]
 8006208:	42bd      	cmp	r5, r7
 800620a:	d850      	bhi.n	80062ae <BSP_I2C4_Init+0x1ba>
 800620c:	42be      	cmp	r6, r7
 800620e:	d34e      	bcc.n	80062ae <BSP_I2C4_Init+0x1ba>
            if(presc != prev_presc)
 8006210:	4591      	cmp	r9, r2
 8006212:	d04c      	beq.n	80062ae <BSP_I2C4_Init+0x1ba>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006214:	2514      	movs	r5, #20
 8006216:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 800621a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800621c:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800621e:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006222:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006224:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006228:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800622c:	d93c      	bls.n	80062a8 <BSP_I2C4_Init+0x1b4>
 800622e:	4a5a      	ldr	r2, [pc, #360]	@ (8006398 <BSP_I2C4_Init+0x2a4>)
 8006230:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006232:	4b59      	ldr	r3, [pc, #356]	@ (8006398 <BSP_I2C4_Init+0x2a4>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006234:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8006238:	4958      	ldr	r1, [pc, #352]	@ (800639c <BSP_I2C4_Init+0x2a8>)
 800623a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	9306      	str	r3, [sp, #24]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006240:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8006244:	9304      	str	r3, [sp, #16]
 8006246:	f04f 33ff 	mov.w	r3, #4294967295
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	f10b 0332 	add.w	r3, fp, #50	@ 0x32
 8006250:	9309      	str	r3, [sp, #36]	@ 0x24
 8006252:	f5cb 6380 	rsb	r3, fp, #1024	@ 0x400
 8006256:	3301      	adds	r3, #1
 8006258:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800625a:	9b06      	ldr	r3, [sp, #24]
 800625c:	429f      	cmp	r7, r3
 800625e:	d138      	bne.n	80062d2 <BSP_I2C4_Init+0x1de>
        if (idx < I2C_VALID_TIMING_NBR)
 8006260:	9b00      	ldr	r3, [sp, #0]
 8006262:	2b7f      	cmp	r3, #127	@ 0x7f
 8006264:	d816      	bhi.n	8006294 <BSP_I2C4_Init+0x1a0>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006266:	2114      	movs	r1, #20
 8006268:	9a00      	ldr	r2, [sp, #0]
 800626a:	4b4c      	ldr	r3, [pc, #304]	@ (800639c <BSP_I2C4_Init+0x2a8>)
 800626c:	434a      	muls	r2, r1
 800626e:	1899      	adds	r1, r3, r2
 8006270:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006272:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006274:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006278:	684b      	ldr	r3, [r1, #4]
 800627a:	051b      	lsls	r3, r3, #20
 800627c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006280:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006282:	688b      	ldr	r3, [r1, #8]
 8006284:	041b      	lsls	r3, r3, #16
 8006286:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800628a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800628c:	68cb      	ldr	r3, [r1, #12]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006292:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006294:	4621      	mov	r1, r4
 8006296:	483b      	ldr	r0, [pc, #236]	@ (8006384 <BSP_I2C4_Init+0x290>)
 8006298:	f7ff ff0c 	bl	80060b4 <MX_I2C4_Init>
 800629c:	2800      	cmp	r0, #0
 800629e:	f43f af32 	beq.w	8006106 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80062a2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80062a6:	e72f      	b.n	8006108 <BSP_I2C4_Init+0x14>
              prev_presc = presc;
 80062a8:	4691      	mov	r9, r2
 80062aa:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80062ae:	f10e 0e01 	add.w	lr, lr, #1
 80062b2:	440f      	add	r7, r1
 80062b4:	f1be 0f10 	cmp.w	lr, #16
 80062b8:	d1a5      	bne.n	8006206 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80062ba:	f1bc 0f10 	cmp.w	ip, #16
 80062be:	4488      	add	r8, r1
 80062c0:	d198      	bne.n	80061f4 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80062c2:	3201      	adds	r2, #1
 80062c4:	4401      	add	r1, r0
 80062c6:	2a10      	cmp	r2, #16
 80062c8:	d191      	bne.n	80061ee <BSP_I2C4_Init+0xfa>
 80062ca:	f1ba 0f00 	cmp.w	sl, #0
 80062ce:	d1ae      	bne.n	800622e <BSP_I2C4_Init+0x13a>
 80062d0:	e7af      	b.n	8006232 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80062d2:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80062d4:	f04f 0c00 	mov.w	ip, #0
 80062d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80062da:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80062de:	441d      	add	r5, r3
 80062e0:	eb03 060b 	add.w	r6, r3, fp
 80062e4:	9503      	str	r5, [sp, #12]
 80062e6:	f6a6 0634 	subw	r6, r6, #2100	@ 0x834
 80062ea:	9d02      	ldr	r5, [sp, #8]
 80062ec:	9608      	str	r6, [sp, #32]
 80062ee:	1aed      	subs	r5, r5, r3
 80062f0:	006d      	lsls	r5, r5, #1
 80062f2:	9501      	str	r5, [sp, #4]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80062f4:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80062f6:	f240 5214 	movw	r2, #1300	@ 0x514
 80062fa:	f8cd c014 	str.w	ip, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80062fe:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006302:	4295      	cmp	r5, r2
 8006304:	d930      	bls.n	8006368 <BSP_I2C4_Init+0x274>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006306:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800630a:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800630e:	d22b      	bcs.n	8006368 <BSP_I2C4_Init+0x274>
 8006310:	9e08      	ldr	r6, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006312:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006316:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800631a:	442e      	add	r6, r5
 800631c:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006320:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8006324:	f240 4212 	movw	r2, #1042	@ 0x412
 8006328:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800632c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006330:	4592      	cmp	sl, r2
 8006332:	d812      	bhi.n	800635a <BSP_I2C4_Init+0x266>
 8006334:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8006338:	d30f      	bcc.n	800635a <BSP_I2C4_Init+0x266>
 800633a:	4540      	cmp	r0, r8
 800633c:	d20d      	bcs.n	800635a <BSP_I2C4_Init+0x266>
              error = -error;
 800633e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8006342:	bf28      	it	cs
 8006344:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8006346:	9a04      	ldr	r2, [sp, #16]
 8006348:	4592      	cmp	sl, r2
 800634a:	d206      	bcs.n	800635a <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 800634c:	9a05      	ldr	r2, [sp, #20]
              prev_error = (uint32_t)error;
 800634e:	f8cd a010 	str.w	sl, [sp, #16]
              I2c_valid_timing[count].scll = scll;
 8006352:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006354:	9a07      	ldr	r2, [sp, #28]
              ret = count;
 8006356:	9700      	str	r7, [sp, #0]
              I2c_valid_timing[count].sclh = sclh;
 8006358:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800635a:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 800635e:	4498      	add	r8, r3
 8006360:	441e      	add	r6, r3
 8006362:	eba9 0903 	sub.w	r9, r9, r3
 8006366:	d1db      	bne.n	8006320 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006368:	9a01      	ldr	r2, [sp, #4]
 800636a:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 800636e:	441d      	add	r5, r3
 8006370:	eba2 0203 	sub.w	r2, r2, r3
 8006374:	9201      	str	r2, [sp, #4]
 8006376:	d1be      	bne.n	80062f6 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006378:	3701      	adds	r7, #1
 800637a:	3114      	adds	r1, #20
 800637c:	e76d      	b.n	800625a <BSP_I2C4_Init+0x166>
 800637e:	bf00      	nop
 8006380:	58001c00 	.word	0x58001c00
 8006384:	2400b388 	.word	0x2400b388
 8006388:	2400bde0 	.word	0x2400bde0
 800638c:	58024400 	.word	0x58024400
 8006390:	58020c00 	.word	0x58020c00
 8006394:	3b9aca00 	.word	0x3b9aca00
 8006398:	2400b3dc 	.word	0x2400b3dc
 800639c:	2400b3e0 	.word	0x2400b3e0

080063a0 <BSP_I2C4_WriteReg>:
{
 80063a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80063a2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80063a6:	9200      	str	r2, [sp, #0]
 80063a8:	460a      	mov	r2, r1
 80063aa:	4601      	mov	r1, r0
 80063ac:	4808      	ldr	r0, [pc, #32]	@ (80063d0 <BSP_I2C4_WriteReg+0x30>)
 80063ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063b2:	2301      	movs	r3, #1
 80063b4:	f001 ff0a 	bl	80081cc <HAL_I2C_Mem_Write>
 80063b8:	b140      	cbz	r0, 80063cc <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80063ba:	4805      	ldr	r0, [pc, #20]	@ (80063d0 <BSP_I2C4_WriteReg+0x30>)
 80063bc:	f002 f8c1 	bl	8008542 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80063c0:	2804      	cmp	r0, #4
 80063c2:	bf14      	ite	ne
 80063c4:	f06f 0003 	mvnne.w	r0, #3
 80063c8:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80063cc:	b004      	add	sp, #16
 80063ce:	bd10      	pop	{r4, pc}
 80063d0:	2400b388 	.word	0x2400b388

080063d4 <BSP_I2C4_ReadReg>:
{
 80063d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80063d6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80063da:	9200      	str	r2, [sp, #0]
 80063dc:	460a      	mov	r2, r1
 80063de:	4601      	mov	r1, r0
 80063e0:	4808      	ldr	r0, [pc, #32]	@ (8006404 <BSP_I2C4_ReadReg+0x30>)
 80063e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063e6:	2301      	movs	r3, #1
 80063e8:	f001 ffca 	bl	8008380 <HAL_I2C_Mem_Read>
 80063ec:	b140      	cbz	r0, 8006400 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80063ee:	4805      	ldr	r0, [pc, #20]	@ (8006404 <BSP_I2C4_ReadReg+0x30>)
 80063f0:	f002 f8a7 	bl	8008542 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80063f4:	2804      	cmp	r0, #4
 80063f6:	bf14      	ite	ne
 80063f8:	f06f 0003 	mvnne.w	r0, #3
 80063fc:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006400:	b004      	add	sp, #16
 8006402:	bd10      	pop	{r4, pc}
 8006404:	2400b388 	.word	0x2400b388

08006408 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006408:	f000 bd08 	b.w	8006e1c <HAL_GetTick>

0800640c <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800640c:	4a09      	ldr	r2, [pc, #36]	@ (8006434 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800640e:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8006412:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006414:	684a      	ldr	r2, [r1, #4]
 8006416:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006418:	2201      	movs	r2, #1
 800641a:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800641c:	688a      	ldr	r2, [r1, #8]
 800641e:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8006420:	680a      	ldr	r2, [r1, #0]
 8006422:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006424:	2200      	movs	r2, #0
 8006426:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800642a:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800642c:	68ca      	ldr	r2, [r1, #12]
 800642e:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8006430:	f003 bc8a 	b.w	8009d48 <HAL_QSPI_Init>
 8006434:	52005000 	.word	0x52005000

08006438 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006438:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800643a:	b988      	cbnz	r0, 8006460 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800643c:	4c0a      	ldr	r4, [pc, #40]	@ (8006468 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800643e:	480b      	ldr	r0, [pc, #44]	@ (800646c <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006440:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006442:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006444:	b94b      	cbnz	r3, 800645a <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006446:	f7ff f9ba 	bl	80057be <MT25TL01G_EnableMemoryMappedModeSTR>
 800644a:	b110      	cbz	r0, 8006452 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800644c:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8006450:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006452:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8006454:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006456:	7023      	strb	r3, [r4, #0]
 8006458:	e7fa      	b.n	8006450 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800645a:	f7ff f966 	bl	800572a <MT25TL01G_EnableMemoryMappedModeDTR>
 800645e:	e7f4      	b.n	800644a <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8006460:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006464:	e7f4      	b.n	8006450 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8006466:	bf00      	nop
 8006468:	2400bde4 	.word	0x2400bde4
 800646c:	24009af0 	.word	0x24009af0

08006470 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006476:	bb30      	cbnz	r0, 80064c6 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006478:	4d17      	ldr	r5, [pc, #92]	@ (80064d8 <BSP_QSPI_ConfigFlash+0x68>)
 800647a:	782b      	ldrb	r3, [r5, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d025      	beq.n	80064cc <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006480:	fab2 f382 	clz	r3, r2
 8006484:	4e15      	ldr	r6, [pc, #84]	@ (80064dc <BSP_QSPI_ConfigFlash+0x6c>)
 8006486:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006488:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800648a:	011b      	lsls	r3, r3, #4
 800648c:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800648e:	f003 fc5b 	bl	8009d48 <HAL_QSPI_Init>
 8006492:	b9f0      	cbnz	r0, 80064d2 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006494:	786b      	ldrb	r3, [r5, #1]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d10f      	bne.n	80064ba <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800649a:	2c03      	cmp	r4, #3
 800649c:	d105      	bne.n	80064aa <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800649e:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80064a0:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80064a2:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80064a4:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80064a6:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80064a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7ff f921 	bl	80056f2 <MT25TL01G_ExitQPIMode>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d0f4      	beq.n	800649e <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80064b4:	f06f 0004 	mvn.w	r0, #4
 80064b8:	e7f6      	b.n	80064a8 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 80064ba:	2c03      	cmp	r4, #3
 80064bc:	d1ef      	bne.n	800649e <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff f8fb 	bl	80056ba <MT25TL01G_EnterQPIMode>
 80064c4:	e7f4      	b.n	80064b0 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 80064c6:	f06f 0001 	mvn.w	r0, #1
 80064ca:	e7ed      	b.n	80064a8 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80064cc:	f06f 0019 	mvn.w	r0, #25
 80064d0:	e7ea      	b.n	80064a8 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80064d2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80064d6:	e7e7      	b.n	80064a8 <BSP_QSPI_ConfigFlash+0x38>
 80064d8:	2400bde4 	.word	0x2400bde4
 80064dc:	24009af0 	.word	0x24009af0

080064e0 <BSP_QSPI_Init>:
{
 80064e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e4:	460c      	mov	r4, r1
 80064e6:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80064e8:	2800      	cmp	r0, #0
 80064ea:	f040 81ac 	bne.w	8006846 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80064ee:	4d03      	ldr	r5, [pc, #12]	@ (80064fc <BSP_QSPI_Init+0x1c>)
 80064f0:	782f      	ldrb	r7, [r5, #0]
 80064f2:	b12f      	cbz	r7, 8006500 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 80064f4:	2000      	movs	r0, #0
}
 80064f6:	b024      	add	sp, #144	@ 0x90
 80064f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fc:	2400bde4 	.word	0x2400bde4
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006500:	4bc3      	ldr	r3, [pc, #780]	@ (8006810 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006502:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006506:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006508:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 800650a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800650e:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006512:	48c0      	ldr	r0, [pc, #768]	@ (8006814 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006514:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8006518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800651c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006520:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006524:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006528:	9201      	str	r2, [sp, #4]
 800652a:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800652c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800652e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006532:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8006534:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006536:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800653a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800653c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006540:	f042 0202 	orr.w	r2, r2, #2
 8006544:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006548:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800654c:	f002 0202 	and.w	r2, r2, #2
 8006550:	9202      	str	r2, [sp, #8]
 8006552:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006554:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800655c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006560:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006564:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006568:	9203      	str	r2, [sp, #12]
 800656a:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800656c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006570:	f042 0208 	orr.w	r2, r2, #8
 8006574:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006578:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800657c:	f002 0208 	and.w	r2, r2, #8
 8006580:	9204      	str	r2, [sp, #16]
 8006582:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8006584:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006588:	f042 0220 	orr.w	r2, r2, #32
 800658c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006590:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006594:	f002 0220 	and.w	r2, r2, #32
 8006598:	9205      	str	r2, [sp, #20]
 800659a:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800659c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065a0:	f042 0220 	orr.w	r2, r2, #32
 80065a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80065a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065ac:	f002 0220 	and.w	r2, r2, #32
 80065b0:	9206      	str	r2, [sp, #24]
 80065b2:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80065b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065b8:	f042 0220 	orr.w	r2, r2, #32
 80065bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80065c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065c4:	f002 0220 	and.w	r2, r2, #32
 80065c8:	9207      	str	r2, [sp, #28]
 80065ca:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80065cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80065d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065dc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80065e0:	9208      	str	r2, [sp, #32]
 80065e2:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80065e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80065f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80065f4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80065f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80065fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80065fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006600:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006604:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006608:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800660c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006610:	920a      	str	r2, [sp, #40]	@ 0x28
 8006612:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006618:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800661c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006624:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006628:	920b      	str	r2, [sp, #44]	@ 0x2c
 800662a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800662c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006630:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006634:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800663c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006640:	930c      	str	r3, [sp, #48]	@ 0x30
 8006642:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006644:	2302      	movs	r3, #2
 8006646:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800664a:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800664c:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800664e:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006652:	f001 fa69 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006656:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006658:	a916      	add	r1, sp, #88	@ 0x58
 800665a:	486f      	ldr	r0, [pc, #444]	@ (8006818 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800665c:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800665e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006662:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006666:	f001 fa5f 	bl	8007b28 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800666a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800666e:	a916      	add	r1, sp, #88	@ 0x58
 8006670:	486a      	ldr	r0, [pc, #424]	@ (800681c <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006672:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006674:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006676:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006678:	f001 fa56 	bl	8007b28 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800667c:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800667e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006682:	4867      	ldr	r0, [pc, #412]	@ (8006820 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006684:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006688:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800668a:	f001 fa4d 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800668e:	a916      	add	r1, sp, #88	@ 0x58
 8006690:	4864      	ldr	r0, [pc, #400]	@ (8006824 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006692:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006696:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800669a:	f001 fa45 	bl	8007b28 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800669e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80066a0:	a916      	add	r1, sp, #88	@ 0x58
 80066a2:	485f      	ldr	r0, [pc, #380]	@ (8006820 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80066a4:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80066a6:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80066a8:	f001 fa3e 	bl	8007b28 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80066ac:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80066ae:	a916      	add	r1, sp, #88	@ 0x58
 80066b0:	485c      	ldr	r0, [pc, #368]	@ (8006824 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80066b2:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80066b4:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80066b6:	f001 fa37 	bl	8007b28 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80066ba:	a916      	add	r1, sp, #88	@ 0x58
 80066bc:	4856      	ldr	r0, [pc, #344]	@ (8006818 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80066be:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80066c2:	f001 fa31 	bl	8007b28 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80066c6:	a916      	add	r1, sp, #88	@ 0x58
 80066c8:	4856      	ldr	r0, [pc, #344]	@ (8006824 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80066ca:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80066ce:	f001 fa2b 	bl	8007b28 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80066d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80066d6:	a916      	add	r1, sp, #88	@ 0x58
 80066d8:	484f      	ldr	r0, [pc, #316]	@ (8006818 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80066da:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80066dc:	f001 fa24 	bl	8007b28 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80066e0:	463a      	mov	r2, r7
 80066e2:	210f      	movs	r1, #15
 80066e4:	205c      	movs	r0, #92	@ 0x5c
 80066e6:	f000 fbc9 	bl	8006e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80066ea:	205c      	movs	r0, #92	@ 0x5c
 80066ec:	f000 fbf8 	bl	8006ee0 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80066f0:	a811      	add	r0, sp, #68	@ 0x44
 80066f2:	f7fe ff36 	bl	8005562 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80066f6:	7863      	ldrb	r3, [r4, #1]
 80066f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006828 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80066fa:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80066fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006702:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006704:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006706:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800670a:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 800670e:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006712:	a90d      	add	r1, sp, #52	@ 0x34
 8006714:	4845      	ldr	r0, [pc, #276]	@ (800682c <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006716:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006718:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800671a:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800671c:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800671e:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006720:	f7ff fe74 	bl	800640c <MX_QSPI_Init>
 8006724:	2800      	cmp	r0, #0
 8006726:	f040 8091 	bne.w	800684c <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800672a:	2103      	movs	r1, #3
 800672c:	483f      	ldr	r0, [pc, #252]	@ (800682c <BSP_QSPI_Init+0x34c>)
 800672e:	f7ff f88c 	bl	800584a <MT25TL01G_ResetEnable>
 8006732:	2800      	cmp	r0, #0
 8006734:	f040 8084 	bne.w	8006840 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006738:	2103      	movs	r1, #3
 800673a:	483c      	ldr	r0, [pc, #240]	@ (800682c <BSP_QSPI_Init+0x34c>)
 800673c:	f7ff f8a6 	bl	800588c <MT25TL01G_ResetMemory>
 8006740:	2800      	cmp	r0, #0
 8006742:	d17d      	bne.n	8006840 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006744:	7869      	ldrb	r1, [r5, #1]
 8006746:	4839      	ldr	r0, [pc, #228]	@ (800682c <BSP_QSPI_Init+0x34c>)
 8006748:	f7fe ff1c 	bl	8005584 <MT25TL01G_AutoPollingMemReady>
 800674c:	4601      	mov	r1, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	d176      	bne.n	8006840 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8006752:	4836      	ldr	r0, [pc, #216]	@ (800682c <BSP_QSPI_Init+0x34c>)
 8006754:	f7ff f879 	bl	800584a <MT25TL01G_ResetEnable>
 8006758:	4601      	mov	r1, r0
 800675a:	2800      	cmp	r0, #0
 800675c:	d170      	bne.n	8006840 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800675e:	4833      	ldr	r0, [pc, #204]	@ (800682c <BSP_QSPI_Init+0x34c>)
 8006760:	f7ff f894 	bl	800588c <MT25TL01G_ResetMemory>
 8006764:	4601      	mov	r1, r0
 8006766:	2800      	cmp	r0, #0
 8006768:	d16a      	bne.n	8006840 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800676a:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800676c:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800676e:	482f      	ldr	r0, [pc, #188]	@ (800682c <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006770:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006772:	f7fe ff07 	bl	8005584 <MT25TL01G_AutoPollingMemReady>
 8006776:	2800      	cmp	r0, #0
 8006778:	d162      	bne.n	8006840 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800677a:	7869      	ldrb	r1, [r5, #1]
 800677c:	482b      	ldr	r0, [pc, #172]	@ (800682c <BSP_QSPI_Init+0x34c>)
 800677e:	f7fe ff70 	bl	8005662 <MT25TL01G_Enter4BytesAddressMode>
 8006782:	2800      	cmp	r0, #0
 8006784:	d15c      	bne.n	8006840 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006786:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 800678a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800678e:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006790:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006794:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006796:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006798:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800679a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800679c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80067a0:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 80067a2:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80067a4:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80067a8:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80067ac:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067b0:	481e      	ldr	r0, [pc, #120]	@ (800682c <BSP_QSPI_Init+0x34c>)
 80067b2:	f003 fb15 	bl	8009de0 <HAL_QSPI_Command>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d142      	bne.n	8006840 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067be:	f10d 0102 	add.w	r1, sp, #2
 80067c2:	481a      	ldr	r0, [pc, #104]	@ (800682c <BSP_QSPI_Init+0x34c>)
 80067c4:	f003 fbac 	bl	8009f20 <HAL_QSPI_Receive>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d139      	bne.n	8006840 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80067cc:	7869      	ldrb	r1, [r5, #1]
 80067ce:	4817      	ldr	r0, [pc, #92]	@ (800682c <BSP_QSPI_Init+0x34c>)
 80067d0:	f7fe ff03 	bl	80055da <MT25TL01G_WriteEnable>
 80067d4:	bba0      	cbnz	r0, 8006840 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80067d6:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067dc:	a916      	add	r1, sp, #88	@ 0x58
 80067de:	4813      	ldr	r0, [pc, #76]	@ (800682c <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80067e0:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80067e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80067e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ea:	051b      	lsls	r3, r3, #20
 80067ec:	0d1b      	lsrs	r3, r3, #20
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f6:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80067fa:	f003 faf1 	bl	8009de0 <HAL_QSPI_Command>
 80067fe:	b9f8      	cbnz	r0, 8006840 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006804:	f10d 0102 	add.w	r1, sp, #2
 8006808:	4808      	ldr	r0, [pc, #32]	@ (800682c <BSP_QSPI_Init+0x34c>)
 800680a:	f003 fb2d 	bl	8009e68 <HAL_QSPI_Transmit>
 800680e:	e00f      	b.n	8006830 <BSP_QSPI_Init+0x350>
 8006810:	58024400 	.word	0x58024400
 8006814:	58020400 	.word	0x58020400
 8006818:	58021800 	.word	0x58021800
 800681c:	58020c00 	.word	0x58020c00
 8006820:	58021c00 	.word	0x58021c00
 8006824:	58021400 	.word	0x58021400
 8006828:	08026818 	.word	0x08026818
 800682c:	24009af0 	.word	0x24009af0
 8006830:	b930      	cbnz	r0, 8006840 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006832:	7862      	ldrb	r2, [r4, #1]
 8006834:	7821      	ldrb	r1, [r4, #0]
 8006836:	f7ff fe1b 	bl	8006470 <BSP_QSPI_ConfigFlash>
 800683a:	2800      	cmp	r0, #0
 800683c:	f43f ae5a 	beq.w	80064f4 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8006840:	f06f 0004 	mvn.w	r0, #4
 8006844:	e657      	b.n	80064f6 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8006846:	f06f 0001 	mvn.w	r0, #1
 800684a:	e654      	b.n	80064f6 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800684c:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006850:	e651      	b.n	80064f6 <BSP_QSPI_Init+0x16>
 8006852:	bf00      	nop

08006854 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8006854:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006856:	4604      	mov	r4, r0
 8006858:	b970      	cbnz	r0, 8006878 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800685a:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <BSP_SDRAM_DeInit+0x2c>)
 800685c:	4809      	ldr	r0, [pc, #36]	@ (8006884 <BSP_SDRAM_DeInit+0x30>)
 800685e:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8006860:	f005 f902 	bl	800ba68 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8006864:	207a      	movs	r0, #122	@ 0x7a
 8006866:	f000 fb49 	bl	8006efc <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800686a:	4807      	ldr	r0, [pc, #28]	@ (8006888 <BSP_SDRAM_DeInit+0x34>)
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <BSP_SDRAM_DeInit+0x38>)
 800686e:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006870:	f002 fff2 	bl	8009858 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8006874:	4620      	mov	r0, r4
}
 8006876:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006878:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800687c:	e7fb      	b.n	8006876 <BSP_SDRAM_DeInit+0x22>
 800687e:	bf00      	nop
 8006880:	52004140 	.word	0x52004140
 8006884:	2400bee8 	.word	0x2400bee8
 8006888:	2400bdf0 	.word	0x2400bdf0
 800688c:	52000040 	.word	0x52000040

08006890 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006890:	2201      	movs	r2, #1
 8006892:	4915      	ldr	r1, [pc, #84]	@ (80068e8 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006894:	4b15      	ldr	r3, [pc, #84]	@ (80068ec <MX_SDRAM_Init+0x5c>)
{
 8006896:	b510      	push	{r4, lr}
 8006898:	b088      	sub	sp, #32
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800689a:	6082      	str	r2, [r0, #8]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800689c:	2440      	movs	r4, #64	@ 0x40
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800689e:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80068a2:	2104      	movs	r1, #4
 80068a4:	2220      	movs	r2, #32
 80068a6:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80068aa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80068ae:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80068b2:	2200      	movs	r2, #0
 80068b4:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80068b8:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80068bc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80068c0:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80068c2:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 80068c4:	2207      	movs	r2, #7
 80068c6:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 80068c8:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80068cc:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 80068ce:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80068d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80068d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80068d8:	f005 f89e 	bl	800ba18 <HAL_SDRAM_Init>
}
 80068dc:	3800      	subs	r0, #0
 80068de:	bf18      	it	ne
 80068e0:	2001      	movne	r0, #1
 80068e2:	b008      	add	sp, #32
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	52004140 	.word	0x52004140
 80068ec:	2400bee8 	.word	0x2400bee8

080068f0 <BSP_SDRAM_Init>:
{
 80068f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 80068f2:	4605      	mov	r5, r0
{
 80068f4:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f040 80dd 	bne.w	8006ab6 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 80068fc:	4b71      	ldr	r3, [pc, #452]	@ (8006ac4 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80068fe:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006900:	a909      	add	r1, sp, #36	@ 0x24
 8006902:	4871      	ldr	r0, [pc, #452]	@ (8006ac8 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006904:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006908:	4c70      	ldr	r4, [pc, #448]	@ (8006acc <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800690a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800690e:	4e70      	ldr	r6, [pc, #448]	@ (8006ad0 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006910:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006914:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006918:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800691c:	9201      	str	r2, [sp, #4]
 800691e:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8006920:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800692c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006930:	f002 0201 	and.w	r2, r2, #1
 8006934:	9202      	str	r2, [sp, #8]
 8006936:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800693c:	f042 0208 	orr.w	r2, r2, #8
 8006940:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006948:	f002 0208 	and.w	r2, r2, #8
 800694c:	9203      	str	r2, [sp, #12]
 800694e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006954:	f042 0210 	orr.w	r2, r2, #16
 8006958:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800695c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006960:	f002 0210 	and.w	r2, r2, #16
 8006964:	9204      	str	r2, [sp, #16]
 8006966:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006968:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800696c:	f042 0220 	orr.w	r2, r2, #32
 8006970:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006974:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006978:	f002 0220 	and.w	r2, r2, #32
 800697c:	9205      	str	r2, [sp, #20]
 800697e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006980:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006988:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800698c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006990:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006994:	9206      	str	r2, [sp, #24]
 8006996:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006998:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800699c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80069a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80069a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80069a8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80069ac:	9207      	str	r2, [sp, #28]
 80069ae:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80069b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80069b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80069bc:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80069be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c6:	9308      	str	r3, [sp, #32]
 80069c8:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80069d0:	230c      	movs	r3, #12
 80069d2:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80069d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80069da:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80069dc:	f001 f8a4 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80069e0:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80069e4:	a909      	add	r1, sp, #36	@ 0x24
 80069e6:	483b      	ldr	r0, [pc, #236]	@ (8006ad4 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80069e8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80069ea:	f001 f89d 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80069ee:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80069f2:	a909      	add	r1, sp, #36	@ 0x24
 80069f4:	4838      	ldr	r0, [pc, #224]	@ (8006ad8 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80069f6:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80069f8:	f001 f896 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80069fc:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006a00:	a909      	add	r1, sp, #36	@ 0x24
 8006a02:	4836      	ldr	r0, [pc, #216]	@ (8006adc <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006a04:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006a06:	f001 f88f 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006a0a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006a0e:	a909      	add	r1, sp, #36	@ 0x24
 8006a10:	4833      	ldr	r0, [pc, #204]	@ (8006ae0 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006a12:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006a14:	f001 f888 	bl	8007b28 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006a18:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006a1c:	a909      	add	r1, sp, #36	@ 0x24
 8006a1e:	4831      	ldr	r0, [pc, #196]	@ (8006ae4 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006a20:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006a22:	f001 f881 	bl	8007b28 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006a26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006a2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006a2e:	f240 2002 	movw	r0, #514	@ 0x202
 8006a32:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006a36:	6334      	str	r4, [r6, #48]	@ 0x30
 8006a38:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006a3a:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006a3e:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006a42:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006a44:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006a46:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8006a48:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8006a4a:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006a4e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006a56:	4b24      	ldr	r3, [pc, #144]	@ (8006ae8 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006a58:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006a5a:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006a5c:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006a60:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006a64:	f002 fef8 	bl	8009858 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f002 fe86 	bl	800977a <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006a6e:	462a      	mov	r2, r5
 8006a70:	210f      	movs	r1, #15
 8006a72:	207a      	movs	r0, #122	@ 0x7a
 8006a74:	f000 fa02 	bl	8006e7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006a78:	207a      	movs	r0, #122	@ 0x7a
 8006a7a:	f000 fa31 	bl	8006ee0 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7ff ff06 	bl	8006890 <MX_SDRAM_Init>
 8006a84:	b9d0      	cbnz	r0, 8006abc <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006a86:	4919      	ldr	r1, [pc, #100]	@ (8006aec <BSP_SDRAM_Init+0x1fc>)
 8006a88:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006a8a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006a8e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006a92:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006a94:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006a98:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006a9a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006a9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006aa2:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006aa4:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006aa6:	f7fe fd2f 	bl	8005508 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	bf18      	it	ne
 8006aae:	f06f 0004 	mvnne.w	r0, #4
}
 8006ab2:	b00f      	add	sp, #60	@ 0x3c
 8006ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006ab6:	f06f 0001 	mvn.w	r0, #1
 8006aba:	e7fa      	b.n	8006ab2 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8006ac0:	e7f7      	b.n	8006ab2 <BSP_SDRAM_Init+0x1c2>
 8006ac2:	bf00      	nop
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	58020c00 	.word	0x58020c00
 8006acc:	2400be5c 	.word	0x2400be5c
 8006ad0:	2400bee8 	.word	0x2400bee8
 8006ad4:	58021000 	.word	0x58021000
 8006ad8:	58021400 	.word	0x58021400
 8006adc:	58021800 	.word	0x58021800
 8006ae0:	58021c00 	.word	0x58021c00
 8006ae4:	58022000 	.word	0x58022000
 8006ae8:	52000040 	.word	0x52000040
 8006aec:	2400bec8 	.word	0x2400bec8

08006af0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	460c      	mov	r4, r1
 8006af6:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006af8:	4606      	mov	r6, r0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d15c      	bne.n	8006bb8 <BSP_TS_Init+0xc8>
 8006afe:	680b      	ldr	r3, [r1, #0]
 8006b00:	1e5a      	subs	r2, r3, #1
 8006b02:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8006b06:	d257      	bcs.n	8006bb8 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006b08:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006b0a:	1e51      	subs	r1, r2, #1
 8006b0c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8006b10:	d252      	bcs.n	8006bb8 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006b12:	4293      	cmp	r3, r2
 8006b14:	bf28      	it	cs
 8006b16:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006b18:	68e2      	ldr	r2, [r4, #12]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d84c      	bhi.n	8006bb8 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006b1e:	2370      	movs	r3, #112	@ 0x70
 8006b20:	2254      	movs	r2, #84	@ 0x54
 8006b22:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006b26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bfc <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006b2a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8006b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8006be8 <BSP_TS_Init+0xf8>)
 8006b30:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006b32:	4b2e      	ldr	r3, [pc, #184]	@ (8006bec <BSP_TS_Init+0xfc>)
 8006b34:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006b36:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf0 <BSP_TS_Init+0x100>)
 8006b38:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf4 <BSP_TS_Init+0x104>)
 8006b3c:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8006b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8006bf8 <BSP_TS_Init+0x108>)
 8006b40:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006b42:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006b46:	a906      	add	r1, sp, #24
 8006b48:	482c      	ldr	r0, [pc, #176]	@ (8006bfc <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006b4a:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006b4e:	f7fe fbe1 	bl	8005314 <FT6X06_RegisterBusIO>
 8006b52:	b9c0      	cbnz	r0, 8006b86 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8006b54:	4669      	mov	r1, sp
 8006b56:	4829      	ldr	r0, [pc, #164]	@ (8006bfc <BSP_TS_Init+0x10c>)
 8006b58:	f7fe fb26 	bl	80051a8 <FT6X06_ReadID>
 8006b5c:	b998      	cbnz	r0, 8006b86 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	2b11      	cmp	r3, #17
 8006b62:	d110      	bne.n	8006b86 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8006b64:	a903      	add	r1, sp, #12
 8006b66:	4825      	ldr	r0, [pc, #148]	@ (8006bfc <BSP_TS_Init+0x10c>)
 8006b68:	f7fe fad2 	bl	8005110 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006b6c:	4f24      	ldr	r7, [pc, #144]	@ (8006c00 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006b6e:	4b25      	ldr	r3, [pc, #148]	@ (8006c04 <BSP_TS_Init+0x114>)
 8006b70:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006c0c <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006b74:	4821      	ldr	r0, [pc, #132]	@ (8006bfc <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006b76:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006b7a:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4798      	blx	r3
 8006b82:	4605      	mov	r5, r0
 8006b84:	b1d8      	cbz	r0, 8006bbe <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8006b86:	b116      	cbz	r6, 8006b8e <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8006b88:	f04f 35ff 	mov.w	r5, #4294967295
 8006b8c:	e010      	b.n	8006bb0 <BSP_TS_Init+0xc0>
 8006b8e:	2601      	movs	r6, #1
 8006b90:	e7d7      	b.n	8006b42 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006b92:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006b94:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006b96:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006b98:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006b9a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006b9c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006b9e:	68e3      	ldr	r3, [r4, #12]
 8006ba0:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006ba2:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006ba4:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006ba6:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006ba8:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006baa:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006bac:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	b00c      	add	sp, #48	@ 0x30
 8006bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006bb8:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006bbc:	e7f8      	b.n	8006bb0 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006bbe:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006bc0:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006bc2:	4e11      	ldr	r6, [pc, #68]	@ (8006c08 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006bc4:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006bc6:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006bc8:	6863      	ldr	r3, [r4, #4]
 8006bca:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006bd0:	68e3      	ldr	r3, [r4, #12]
 8006bd2:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	4798      	blx	r3
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	dad8      	bge.n	8006b92 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006be0:	f06f 0504 	mvn.w	r5, #4
 8006be4:	e7e4      	b.n	8006bb0 <BSP_TS_Init+0xc0>
 8006be6:	bf00      	nop
 8006be8:	080060f5 	.word	0x080060f5
 8006bec:	08006061 	.word	0x08006061
 8006bf0:	080063d5 	.word	0x080063d5
 8006bf4:	080063a1 	.word	0x080063a1
 8006bf8:	08006409 	.word	0x08006409
 8006bfc:	2400bf1c 	.word	0x2400bf1c
 8006c00:	2400bf44 	.word	0x2400bf44
 8006c04:	24000038 	.word	0x24000038
 8006c08:	2400bf48 	.word	0x2400bf48
 8006c0c:	2400bf70 	.word	0x2400bf70

08006c10 <BSP_TS_GetState>:
{
 8006c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c12:	460c      	mov	r4, r1
 8006c14:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d14d      	bne.n	8006cb6 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006c1a:	4b28      	ldr	r3, [pc, #160]	@ (8006cbc <BSP_TS_GetState+0xac>)
 8006c1c:	a901      	add	r1, sp, #4
 8006c1e:	4a28      	ldr	r2, [pc, #160]	@ (8006cc0 <BSP_TS_GetState+0xb0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6810      	ldr	r0, [r2, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	4798      	blx	r3
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	db41      	blt.n	8006cb0 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006c2c:	4925      	ldr	r1, [pc, #148]	@ (8006cc4 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8006c2e:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006c30:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006c32:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006c34:	2e00      	cmp	r6, #0
 8006c36:	d037      	beq.n	8006ca8 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006c38:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006c3a:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006c3e:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8006c42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006c46:	bf02      	ittt	eq
 8006c48:	4694      	moveq	ip, r2
      x_oriented = state.TouchX;
 8006c4a:	461a      	moveq	r2, r3
      y_oriented = state.TouchY;
 8006c4c:	4663      	moveq	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006c4e:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006c52:	bf1c      	itt	ne
 8006c54:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8006c58:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006c5c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006c60:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006c62:	bf44      	itt	mi
 8006c64:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8006c68:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006c6a:	680f      	ldr	r7, [r1, #0]
 8006c6c:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006c6e:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006c70:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006c72:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006c74:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006c76:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006c7a:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006c7e:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006c80:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006c82:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006c84:	bf8c      	ite	hi
 8006c86:	eba2 0c05 	subhi.w	ip, r2, r5
 8006c8a:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006c8e:	4283      	cmp	r3, r0
 8006c90:	bf8c      	ite	hi
 8006c92:	1a1e      	subhi	r6, r3, r0
 8006c94:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006c96:	4567      	cmp	r7, ip
 8006c98:	d301      	bcc.n	8006c9e <BSP_TS_GetState+0x8e>
 8006c9a:	42b7      	cmp	r7, r6
 8006c9c:	d205      	bcs.n	8006caa <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006c9e:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006ca0:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006ca2:	2000      	movs	r0, #0
}
 8006ca4:	b005      	add	sp, #20
 8006ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006ca8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006caa:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8006cae:	e7f8      	b.n	8006ca2 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006cb0:	f06f 0004 	mvn.w	r0, #4
 8006cb4:	e7f6      	b.n	8006ca4 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006cb6:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006cba:	e7f3      	b.n	8006ca4 <BSP_TS_GetState+0x94>
 8006cbc:	2400bf70 	.word	0x2400bf70
 8006cc0:	2400bf44 	.word	0x2400bf44
 8006cc4:	2400bf48 	.word	0x2400bf48

08006cc8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006d80 <SystemInit+0xb8>)
 8006cca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006cce:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8006cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	f042 0210 	orr.w	r2, r2, #16
 8006cdc:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006cde:	4a29      	ldr	r2, [pc, #164]	@ (8006d84 <SystemInit+0xbc>)
 8006ce0:	6813      	ldr	r3, [r2, #0]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d805      	bhi.n	8006cf6 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	f023 030f 	bic.w	r3, r3, #15
 8006cf0:	f043 0307 	orr.w	r3, r3, #7
 8006cf4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006cf6:	4b24      	ldr	r3, [pc, #144]	@ (8006d88 <SystemInit+0xc0>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006d00:	2200      	movs	r2, #0
 8006d02:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006d04:	4a21      	ldr	r2, [pc, #132]	@ (8006d8c <SystemInit+0xc4>)
 8006d06:	6819      	ldr	r1, [r3, #0]
 8006d08:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006d0a:	491e      	ldr	r1, [pc, #120]	@ (8006d84 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006d0c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006d0e:	680a      	ldr	r2, [r1, #0]
 8006d10:	0712      	lsls	r2, r2, #28
 8006d12:	d505      	bpl.n	8006d20 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006d14:	680a      	ldr	r2, [r1, #0]
 8006d16:	f022 020f 	bic.w	r2, r2, #15
 8006d1a:	f042 0207 	orr.w	r2, r2, #7
 8006d1e:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006d20:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006d22:	491b      	ldr	r1, [pc, #108]	@ (8006d90 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006d24:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006d26:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006d28:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006d2a:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006d2c:	4919      	ldr	r1, [pc, #100]	@ (8006d94 <SystemInit+0xcc>)
 8006d2e:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006d30:	4919      	ldr	r1, [pc, #100]	@ (8006d98 <SystemInit+0xd0>)
 8006d32:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006d36:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006d38:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006d3a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006d44:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006d46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006d48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d4c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006d58:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <SystemInit+0xd4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f36f 030f 	bfc	r3, #0, #16
 8006d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d64:	d203      	bcs.n	8006d6e <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006d66:	4b0e      	ldr	r3, [pc, #56]	@ (8006da0 <SystemInit+0xd8>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <SystemInit+0xdc>)
 8006d70:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006d74:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006d76:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d7a:	4b01      	ldr	r3, [pc, #4]	@ (8006d80 <SystemInit+0xb8>)
 8006d7c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8006d7e:	4770      	bx	lr
 8006d80:	e000ed00 	.word	0xe000ed00
 8006d84:	52002000 	.word	0x52002000
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006d90:	02020200 	.word	0x02020200
 8006d94:	01ff0000 	.word	0x01ff0000
 8006d98:	01010280 	.word	0x01010280
 8006d9c:	5c001000 	.word	0x5c001000
 8006da0:	51008000 	.word	0x51008000
 8006da4:	52004000 	.word	0x52004000

08006da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006da8:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006daa:	2003      	movs	r0, #3
 8006dac:	f000 f854 	bl	8006e58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006db0:	f003 fc9e 	bl	800a6f0 <HAL_RCC_GetSysClockFreq>
 8006db4:	490f      	ldr	r1, [pc, #60]	@ (8006df4 <HAL_Init+0x4c>)
 8006db6:	4a10      	ldr	r2, [pc, #64]	@ (8006df8 <HAL_Init+0x50>)
 8006db8:	698b      	ldr	r3, [r1, #24]
 8006dba:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006dbe:	5cd3      	ldrb	r3, [r2, r3]
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dc6:	698b      	ldr	r3, [r1, #24]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	5cd3      	ldrb	r3, [r2, r3]
 8006dce:	4a0b      	ldr	r2, [pc, #44]	@ (8006dfc <HAL_Init+0x54>)
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	fa20 f303 	lsr.w	r3, r0, r3
 8006dd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dda:	4b09      	ldr	r3, [pc, #36]	@ (8006e00 <HAL_Init+0x58>)
 8006ddc:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006dde:	2000      	movs	r0, #0
 8006de0:	f7fa fe64 	bl	8001aac <HAL_InitTick>
 8006de4:	4604      	mov	r4, r0
 8006de6:	b918      	cbnz	r0, 8006df0 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006de8:	f7fa face 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006dec:	4620      	mov	r0, r4
 8006dee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006df0:	2401      	movs	r4, #1
 8006df2:	e7fb      	b.n	8006dec <HAL_Init+0x44>
 8006df4:	58024400 	.word	0x58024400
 8006df8:	08026820 	.word	0x08026820
 8006dfc:	24000068 	.word	0x24000068
 8006e00:	2400006c 	.word	0x2400006c

08006e04 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006e04:	4a03      	ldr	r2, [pc, #12]	@ (8006e14 <HAL_IncTick+0x10>)
 8006e06:	4b04      	ldr	r3, [pc, #16]	@ (8006e18 <HAL_IncTick+0x14>)
 8006e08:	6811      	ldr	r1, [r2, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	440b      	add	r3, r1
 8006e0e:	6013      	str	r3, [r2, #0]
}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	2400bf74 	.word	0x2400bf74
 8006e18:	24000070 	.word	0x24000070

08006e1c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006e1c:	4b01      	ldr	r3, [pc, #4]	@ (8006e24 <HAL_GetTick+0x8>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2400bf74 	.word	0x2400bf74

08006e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006e2c:	f7ff fff6 	bl	8006e1c <HAL_GetTick>
 8006e30:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e32:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006e34:	bf1e      	ittt	ne
 8006e36:	4b04      	ldrne	r3, [pc, #16]	@ (8006e48 <HAL_Delay+0x20>)
 8006e38:	781b      	ldrbne	r3, [r3, #0]
 8006e3a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e3c:	f7ff ffee 	bl	8006e1c <HAL_GetTick>
 8006e40:	1b43      	subs	r3, r0, r5
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	d3fa      	bcc.n	8006e3c <HAL_Delay+0x14>
  {
  }
}
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	24000070 	.word	0x24000070

08006e4c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006e4c:	4b01      	ldr	r3, [pc, #4]	@ (8006e54 <HAL_GetREVID+0x8>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
}
 8006e50:	0c00      	lsrs	r0, r0, #16
 8006e52:	4770      	bx	lr
 8006e54:	5c001000 	.word	0x5c001000

08006e58 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e58:	4907      	ldr	r1, [pc, #28]	@ (8006e78 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e5a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e5c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e66:	0412      	lsls	r2, r2, #16
 8006e68:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006e74:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006e76:	4770      	bx	lr
 8006e78:	e000ed00 	.word	0xe000ed00

08006e7c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e7c:	4b16      	ldr	r3, [pc, #88]	@ (8006ed8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e7e:	b530      	push	{r4, r5, lr}
 8006e80:	68dc      	ldr	r4, [r3, #12]
 8006e82:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e86:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e8a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	bf28      	it	cs
 8006e90:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e92:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e94:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e98:	bf8c      	ite	hi
 8006e9a:	3c03      	subhi	r4, #3
 8006e9c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e9e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006ea2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ea4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eac:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006eb0:	fa03 f304 	lsl.w	r3, r3, r4
 8006eb4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eb8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006ebc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006ebe:	db06      	blt.n	8006ece <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ec0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006ec4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006ec8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ecc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ece:	f000 000f 	and.w	r0, r0, #15
 8006ed2:	4a02      	ldr	r2, [pc, #8]	@ (8006edc <HAL_NVIC_SetPriority+0x60>)
 8006ed4:	5413      	strb	r3, [r2, r0]
 8006ed6:	e7f9      	b.n	8006ecc <HAL_NVIC_SetPriority+0x50>
 8006ed8:	e000ed00 	.word	0xe000ed00
 8006edc:	e000ed14 	.word	0xe000ed14

08006ee0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	db07      	blt.n	8006ef4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	0941      	lsrs	r1, r0, #5
 8006ee8:	f000 001f 	and.w	r0, r0, #31
 8006eec:	4a02      	ldr	r2, [pc, #8]	@ (8006ef8 <HAL_NVIC_EnableIRQ+0x18>)
 8006eee:	4083      	lsls	r3, r0
 8006ef0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	e000e100 	.word	0xe000e100

08006efc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006efc:	2800      	cmp	r0, #0
 8006efe:	db0c      	blt.n	8006f1a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f00:	0943      	lsrs	r3, r0, #5
 8006f02:	2201      	movs	r2, #1
 8006f04:	f000 001f 	and.w	r0, r0, #31
 8006f08:	4904      	ldr	r1, [pc, #16]	@ (8006f1c <HAL_NVIC_DisableIRQ+0x20>)
 8006f0a:	3320      	adds	r3, #32
 8006f0c:	4082      	lsls	r2, r0
 8006f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f16:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006f1a:	4770      	bx	lr
 8006f1c:	e000e100 	.word	0xe000e100

08006f20 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006f20:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f24:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <HAL_MPU_Disable+0x18>)
 8006f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f28:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f2c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	e000ed00 	.word	0xe000ed00

08006f3c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f3c:	4b06      	ldr	r3, [pc, #24]	@ (8006f58 <HAL_MPU_Enable+0x1c>)
 8006f3e:	f040 0001 	orr.w	r0, r0, #1
 8006f42:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f48:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006f52:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f56:	4770      	bx	lr
 8006f58:	e000ed00 	.word	0xe000ed00

08006f5c <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006f5c:	7843      	ldrb	r3, [r0, #1]
 8006f5e:	4a14      	ldr	r2, [pc, #80]	@ (8006fb0 <HAL_MPU_ConfigRegion+0x54>)
 8006f60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006f64:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006f70:	6843      	ldr	r3, [r0, #4]
 8006f72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f76:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f78:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006f7a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006f7c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006f80:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f82:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006f84:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f86:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006f8a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f8c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006f90:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f92:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006f96:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006f9c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006f9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006fa2:	7a01      	ldrb	r1, [r0, #8]
 8006fa4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fa8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	e000ed00 	.word	0xe000ed00

08006fb4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006fb4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	b908      	cbnz	r0, 8006fbe <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006fba:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006fbc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006fbe:	7f43      	ldrb	r3, [r0, #29]
 8006fc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006fc4:	b913      	cbnz	r3, 8006fcc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006fc6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006fc8:	f7fa f9f6 	bl	80013b8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006fd0:	7923      	ldrb	r3, [r4, #4]
 8006fd2:	b9e3      	cbnz	r3, 800700e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	4a13      	ldr	r2, [pc, #76]	@ (8007024 <HAL_CRC_Init+0x70>)
 8006fd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	f022 0218 	bic.w	r2, r2, #24
 8006fe0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006fe2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006fe4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006fe6:	b9d2      	cbnz	r2, 800701e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006fe8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006fec:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006fee:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	6961      	ldr	r1, [r4, #20]
 8006ff4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ff8:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006ffa:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006ffc:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007004:	430a      	orrs	r2, r1
 8007006:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8007008:	2301      	movs	r3, #1
 800700a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800700c:	e7d6      	b.n	8006fbc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800700e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007012:	4620      	mov	r0, r4
 8007014:	f000 f808 	bl	8007028 <HAL_CRCEx_Polynomial_Set>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0e2      	beq.n	8006fe2 <HAL_CRC_Init+0x2e>
 800701c:	e7cd      	b.n	8006fba <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800701e:	6922      	ldr	r2, [r4, #16]
 8007020:	e7e4      	b.n	8006fec <HAL_CRC_Init+0x38>
 8007022:	bf00      	nop
 8007024:	04c11db7 	.word	0x04c11db7

08007028 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007028:	07cb      	lsls	r3, r1, #31
{
 800702a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800702c:	d50d      	bpl.n	800704a <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800702e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007030:	3b01      	subs	r3, #1
 8007032:	d31d      	bcc.n	8007070 <HAL_CRCEx_Polynomial_Set+0x48>
 8007034:	fa21 f403 	lsr.w	r4, r1, r3
 8007038:	07e4      	lsls	r4, r4, #31
 800703a:	d5f9      	bpl.n	8007030 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800703c:	2a10      	cmp	r2, #16
 800703e:	d013      	beq.n	8007068 <HAL_CRCEx_Polynomial_Set+0x40>
 8007040:	2a10      	cmp	r2, #16
 8007042:	d804      	bhi.n	800704e <HAL_CRCEx_Polynomial_Set+0x26>
 8007044:	b13a      	cbz	r2, 8007056 <HAL_CRCEx_Polynomial_Set+0x2e>
 8007046:	2a08      	cmp	r2, #8
 8007048:	d010      	beq.n	800706c <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 800704a:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800704c:	e00b      	b.n	8007066 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 800704e:	2a18      	cmp	r2, #24
 8007050:	d1fb      	bne.n	800704a <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 8007052:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8007054:	d8f9      	bhi.n	800704a <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007056:	6800      	ldr	r0, [r0, #0]
 8007058:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800705a:	6883      	ldr	r3, [r0, #8]
 800705c:	f023 0318 	bic.w	r3, r3, #24
 8007060:	4313      	orrs	r3, r2
 8007062:	6083      	str	r3, [r0, #8]
 8007064:	2000      	movs	r0, #0
}
 8007066:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8007068:	2b07      	cmp	r3, #7
 800706a:	e7f3      	b.n	8007054 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 800706c:	2b0f      	cmp	r3, #15
 800706e:	e7f1      	b.n	8007054 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8007070:	2a10      	cmp	r2, #16
 8007072:	d1e5      	bne.n	8007040 <HAL_CRCEx_Polynomial_Set+0x18>
 8007074:	e7e9      	b.n	800704a <HAL_CRCEx_Polynomial_Set+0x22>

08007076 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007076:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007078:	4604      	mov	r4, r0
 800707a:	2800      	cmp	r0, #0
 800707c:	d036      	beq.n	80070ec <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800707e:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8007082:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007086:	b91b      	cbnz	r3, 8007090 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007088:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800708c:	f7fa f9ac 	bl	80013e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007090:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007092:	69e0      	ldr	r0, [r4, #28]
 8007094:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007096:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800709e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80070a0:	6819      	ldr	r1, [r3, #0]
 80070a2:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80070a6:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80070aa:	430a      	orrs	r2, r1
 80070ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80070ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80070b0:	68a2      	ldr	r2, [r4, #8]
 80070b2:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80070b6:	4302      	orrs	r2, r0
 80070b8:	f021 0101 	bic.w	r1, r1, #1
 80070bc:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80070be:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80070c0:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80070c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070c4:	f36f 020f 	bfc	r2, #0, #16
 80070c8:	430a      	orrs	r2, r1
 80070ca:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80070cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80070ce:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80070d2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80070d6:	0552      	lsls	r2, r2, #21
 80070d8:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80070dc:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80070de:	430a      	orrs	r2, r1
 80070e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80070e2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80070e4:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80070e6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80070ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80070ec:	2001      	movs	r0, #1
 80070ee:	e7fc      	b.n	80070ea <HAL_DMA2D_Init+0x74>

080070f0 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80070f0:	4770      	bx	lr

080070f2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80070f2:	4770      	bx	lr

080070f4 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80070f4:	6803      	ldr	r3, [r0, #0]
{
 80070f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80070f8:	685e      	ldr	r6, [r3, #4]
{
 80070fa:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80070fc:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80070fe:	07f2      	lsls	r2, r6, #31
 8007100:	d514      	bpl.n	800712c <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007102:	05e9      	lsls	r1, r5, #23
 8007104:	d512      	bpl.n	800712c <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800710c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800710e:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007116:	2201      	movs	r2, #1
 8007118:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800711a:	2304      	movs	r3, #4
 800711c:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007120:	2300      	movs	r3, #0
 8007122:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007126:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007128:	b103      	cbz	r3, 800712c <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800712a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800712c:	06b2      	lsls	r2, r6, #26
 800712e:	d516      	bpl.n	800715e <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007130:	04ab      	lsls	r3, r5, #18
 8007132:	d514      	bpl.n	800715e <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800713c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800713e:	2220      	movs	r2, #32
 8007140:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007144:	f043 0302 	orr.w	r3, r3, #2
 8007148:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800714a:	2304      	movs	r3, #4
 800714c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007150:	2300      	movs	r3, #0
 8007152:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007156:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007158:	b10b      	cbz	r3, 800715e <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 800715a:	4620      	mov	r0, r4
 800715c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800715e:	0730      	lsls	r0, r6, #28
 8007160:	d516      	bpl.n	8007190 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007162:	0529      	lsls	r1, r5, #20
 8007164:	d514      	bpl.n	8007190 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800716e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007170:	2208      	movs	r2, #8
 8007172:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007174:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007176:	f043 0304 	orr.w	r3, r3, #4
 800717a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800717c:	2304      	movs	r3, #4
 800717e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007182:	2300      	movs	r3, #0
 8007184:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007188:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800718a:	b10b      	cbz	r3, 8007190 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800718c:	4620      	mov	r0, r4
 800718e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007190:	0772      	lsls	r2, r6, #29
 8007192:	d50b      	bpl.n	80071ac <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007194:	056b      	lsls	r3, r5, #21
 8007196:	d509      	bpl.n	80071ac <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007198:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800719a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80071a4:	2204      	movs	r2, #4
 80071a6:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80071a8:	f7ff ffa2 	bl	80070f0 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80071ac:	07b0      	lsls	r0, r6, #30
 80071ae:	d514      	bpl.n	80071da <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80071b0:	05a9      	lsls	r1, r5, #22
 80071b2:	d512      	bpl.n	80071da <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80071bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80071be:	2202      	movs	r2, #2
 80071c0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80071c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071c4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80071c6:	2301      	movs	r3, #1
 80071c8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80071cc:	2300      	movs	r3, #0
 80071ce:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80071d2:	6a23      	ldr	r3, [r4, #32]
 80071d4:	b10b      	cbz	r3, 80071da <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80071d6:	4620      	mov	r0, r4
 80071d8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80071da:	06f2      	lsls	r2, r6, #27
 80071dc:	d513      	bpl.n	8007206 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80071de:	04eb      	lsls	r3, r5, #19
 80071e0:	d511      	bpl.n	8007206 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80071e2:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80071e4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80071ec:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80071ee:	2210      	movs	r2, #16
 80071f0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80071f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071f4:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80071fc:	2300      	movs	r3, #0
 80071fe:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007202:	f7ff ff76 	bl	80070f2 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007206:	bd70      	pop	{r4, r5, r6, pc}

08007208 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720c:	4607      	mov	r7, r0
 800720e:	460d      	mov	r5, r1
 8007210:	4614      	mov	r4, r2
 8007212:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007214:	f7ff fe02 	bl	8006e1c <HAL_GetTick>
 8007218:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800721e:	07d2      	lsls	r2, r2, #31
 8007220:	d50a      	bpl.n	8007238 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007222:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007226:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007228:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800722a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800722e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007232:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007238:	f7ff fdf0 	bl	8006e1c <HAL_GetTick>
 800723c:	eba0 0008 	sub.w	r0, r0, r8
 8007240:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007244:	d9e9      	bls.n	800721a <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007246:	2003      	movs	r0, #3
 8007248:	e7f4      	b.n	8007234 <DSI_ShortWrite.constprop.0+0x2c>

0800724a <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800724a:	7c03      	ldrb	r3, [r0, #16]
{
 800724c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800724e:	2b01      	cmp	r3, #1
 8007250:	d05b      	beq.n	800730a <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8007252:	6803      	ldr	r3, [r0, #0]
 8007254:	2000      	movs	r0, #0
 8007256:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800725a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800725e:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8007260:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007262:	d507      	bpl.n	8007274 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007264:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007268:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 800726c:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8007270:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007274:	0788      	lsls	r0, r1, #30
 8007276:	d505      	bpl.n	8007284 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007278:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800727c:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8007280:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007284:	0748      	lsls	r0, r1, #29
 8007286:	d505      	bpl.n	8007294 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007288:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800728c:	f040 0001 	orr.w	r0, r0, #1
 8007290:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8007294:	0708      	lsls	r0, r1, #28
 8007296:	d505      	bpl.n	80072a4 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007298:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 800729c:	f040 0002 	orr.w	r0, r0, #2
 80072a0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80072a4:	06c8      	lsls	r0, r1, #27
 80072a6:	d505      	bpl.n	80072b4 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80072a8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80072ac:	f040 000c 	orr.w	r0, r0, #12
 80072b0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80072b4:	0688      	lsls	r0, r1, #26
 80072b6:	d505      	bpl.n	80072c4 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80072b8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80072bc:	f040 0010 	orr.w	r0, r0, #16
 80072c0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80072c4:	0648      	lsls	r0, r1, #25
 80072c6:	d505      	bpl.n	80072d4 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80072c8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80072cc:	f040 0020 	orr.w	r0, r0, #32
 80072d0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80072d4:	0608      	lsls	r0, r1, #24
 80072d6:	d505      	bpl.n	80072e4 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80072d8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80072dc:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80072e0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80072e4:	05c8      	lsls	r0, r1, #23
 80072e6:	d505      	bpl.n	80072f4 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80072e8:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80072ec:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80072f0:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80072f4:	0589      	lsls	r1, r1, #22
 80072f6:	d505      	bpl.n	8007304 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80072f8:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80072fc:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8007300:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007304:	2000      	movs	r0, #0
 8007306:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8007308:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800730a:	2002      	movs	r0, #2
}
 800730c:	4770      	bx	lr
	...

08007310 <HAL_DSI_Init>:
{
 8007310:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007312:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007314:	4604      	mov	r4, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	f000 80ea 	beq.w	80074f0 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800731c:	7c43      	ldrb	r3, [r0, #17]
 800731e:	b90b      	cbnz	r3, 8007324 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8007320:	f7fa f886 	bl	8001430 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007324:	2303      	movs	r3, #3
 8007326:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007328:	2300      	movs	r3, #0
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8007332:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007336:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800733a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800733e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8007346:	f7ff fd69 	bl	8006e1c <HAL_GetTick>
 800734a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800734c:	6822      	ldr	r2, [r4, #0]
 800734e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8007352:	04d9      	lsls	r1, r3, #19
 8007354:	d56e      	bpl.n	8007434 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8007356:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800735a:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 800735e:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8007362:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007366:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800736a:	e9d5 0300 	ldrd	r0, r3, [r5]
 800736e:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007370:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8007374:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007376:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800737a:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800737c:	430b      	orrs	r3, r1
 800737e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8007382:	2300      	movs	r3, #0
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8007392:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800739e:	f7ff fd43 	bl	8006e28 <HAL_Delay>
  tickstart = HAL_GetTick();
 80073a2:	f7ff fd3b 	bl	8006e1c <HAL_GetTick>
 80073a6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80073ae:	05d2      	lsls	r2, r2, #23
 80073b0:	d548      	bpl.n	8007444 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 80073b2:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80073b4:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 80073b6:	9202      	str	r2, [sp, #8]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	605a      	str	r2, [r3, #4]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	f002 0201 	and.w	r2, r2, #1
 80073c6:	9202      	str	r2, [sp, #8]
 80073c8:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80073d0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80073d6:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80073d8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80073da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80073de:	f042 0202 	orr.w	r2, r2, #2
 80073e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80073e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80073ea:	f042 0204 	orr.w	r2, r2, #4
 80073ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80073f2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80073f6:	f022 0203 	bic.w	r2, r2, #3
 80073fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80073fe:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007402:	430a      	orrs	r2, r1
 8007404:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8007408:	f7ff fd08 	bl	8006e1c <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800740c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800740e:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007414:	079b      	lsls	r3, r3, #30
 8007416:	d025      	beq.n	8007464 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800741e:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8007422:	2b94      	cmp	r3, #148	@ 0x94
 8007424:	d025      	beq.n	8007472 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007426:	f7ff fcf9 	bl	8006e1c <HAL_GetTick>
 800742a:	1b80      	subs	r0, r0, r6
 800742c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007430:	d9f2      	bls.n	8007418 <HAL_DSI_Init+0x108>
 8007432:	e014      	b.n	800745e <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007434:	f7ff fcf2 	bl	8006e1c <HAL_GetTick>
 8007438:	1b80      	subs	r0, r0, r6
 800743a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800743e:	d985      	bls.n	800734c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007440:	2003      	movs	r0, #3
 8007442:	e053      	b.n	80074ec <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007444:	f7ff fcea 	bl	8006e1c <HAL_GetTick>
 8007448:	1b80      	subs	r0, r0, r6
 800744a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800744e:	d9ab      	bls.n	80073a8 <HAL_DSI_Init+0x98>
 8007450:	e7f6      	b.n	8007440 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007452:	f7ff fce3 	bl	8006e1c <HAL_GetTick>
 8007456:	1b80      	subs	r0, r0, r6
 8007458:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800745c:	d902      	bls.n	8007464 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 800745e:	2300      	movs	r3, #0
 8007460:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8007462:	e7ed      	b.n	8007440 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800746a:	f003 0314 	and.w	r3, r3, #20
 800746e:	2b14      	cmp	r3, #20
 8007470:	d1ef      	bne.n	8007452 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007472:	686b      	ldr	r3, [r5, #4]
 8007474:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007478:	4a1e      	ldr	r2, [pc, #120]	@ (80074f4 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800747a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800747c:	2b01      	cmp	r3, #1
 800747e:	bf38      	it	cc
 8007480:	2301      	movcc	r3, #1
 8007482:	435a      	muls	r2, r3
 8007484:	68ab      	ldr	r3, [r5, #8]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	409a      	lsls	r2, r3
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	434b      	muls	r3, r1
 8007490:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800749a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800749e:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80074a2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80074a6:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80074a8:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80074aa:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80074ae:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80074b2:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 80074b6:	9003      	str	r0, [sp, #12]
 80074b8:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 80074ba:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80074bc:	f022 0201 	bic.w	r2, r2, #1
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	f002 0201 	and.w	r2, r2, #1
 80074c8:	9203      	str	r2, [sp, #12]
 80074ca:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80074cc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80074d0:	f022 0203 	bic.w	r2, r2, #3
 80074d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80074d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80074dc:	430a      	orrs	r2, r1
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80074e6:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80074e8:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80074ea:	7463      	strb	r3, [r4, #17]
}
 80074ec:	b004      	add	sp, #16
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80074f0:	2001      	movs	r0, #1
 80074f2:	e7fb      	b.n	80074ec <HAL_DSI_Init+0x1dc>
 80074f4:	003d0900 	.word	0x003d0900

080074f8 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80074f8:	4770      	bx	lr

080074fa <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80074fa:	6803      	ldr	r3, [r0, #0]
 80074fc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007500:	07d1      	lsls	r1, r2, #31
{
 8007502:	b510      	push	{r4, lr}
 8007504:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007506:	d508      	bpl.n	800751a <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007508:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800750c:	07d2      	lsls	r2, r2, #31
 800750e:	d504      	bpl.n	800751a <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007510:	2201      	movs	r2, #1
 8007512:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8007516:	f7fa ff57 	bl	80023c8 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007520:	0791      	lsls	r1, r2, #30
 8007522:	d509      	bpl.n	8007538 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007524:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007528:	0792      	lsls	r2, r2, #30
 800752a:	d505      	bpl.n	8007538 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800752c:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800752e:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007530:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007534:	f7fa ff7c 	bl	8002430 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007538:	69a3      	ldr	r3, [r4, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d04e      	beq.n	80075dc <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007544:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007548:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800754a:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800754e:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8007552:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007554:	b291      	uxth	r1, r2
 8007556:	b119      	cbz	r1, 8007560 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007558:	6961      	ldr	r1, [r4, #20]
 800755a:	f041 0101 	orr.w	r1, r1, #1
 800755e:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007560:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8007564:	d003      	beq.n	800756e <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007566:	6962      	ldr	r2, [r4, #20]
 8007568:	f042 0202 	orr.w	r2, r2, #2
 800756c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800756e:	07d8      	lsls	r0, r3, #31
 8007570:	d503      	bpl.n	800757a <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8007572:	6962      	ldr	r2, [r4, #20]
 8007574:	f042 0204 	orr.w	r2, r2, #4
 8007578:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800757a:	0799      	lsls	r1, r3, #30
 800757c:	d503      	bpl.n	8007586 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800757e:	6962      	ldr	r2, [r4, #20]
 8007580:	f042 0208 	orr.w	r2, r2, #8
 8007584:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007586:	f013 0f0c 	tst.w	r3, #12
 800758a:	d003      	beq.n	8007594 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800758c:	6962      	ldr	r2, [r4, #20]
 800758e:	f042 0210 	orr.w	r2, r2, #16
 8007592:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007594:	06da      	lsls	r2, r3, #27
 8007596:	d503      	bpl.n	80075a0 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007598:	6962      	ldr	r2, [r4, #20]
 800759a:	f042 0220 	orr.w	r2, r2, #32
 800759e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80075a0:	0698      	lsls	r0, r3, #26
 80075a2:	d503      	bpl.n	80075ac <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80075a4:	6962      	ldr	r2, [r4, #20]
 80075a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075aa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80075ac:	0659      	lsls	r1, r3, #25
 80075ae:	d503      	bpl.n	80075b8 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80075b0:	6962      	ldr	r2, [r4, #20]
 80075b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80075b6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80075b8:	061a      	lsls	r2, r3, #24
 80075ba:	d503      	bpl.n	80075c4 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80075bc:	6962      	ldr	r2, [r4, #20]
 80075be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075c2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80075c4:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 80075c8:	d003      	beq.n	80075d2 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80075ca:	6963      	ldr	r3, [r4, #20]
 80075cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075d0:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80075d2:	6963      	ldr	r3, [r4, #20]
 80075d4:	b113      	cbz	r3, 80075dc <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff ff8e 	bl	80074f8 <HAL_DSI_ErrorCallback>
}
 80075dc:	bd10      	pop	{r4, pc}

080075de <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80075de:	7c02      	ldrb	r2, [r0, #16]
{
 80075e0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80075e2:	2a01      	cmp	r2, #1
 80075e4:	d00a      	beq.n	80075fc <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80075e6:	6802      	ldr	r2, [r0, #0]
 80075e8:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80075ea:	f020 0003 	bic.w	r0, r0, #3
 80075ee:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80075f0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80075f2:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075f4:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80075f6:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80075f8:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80075fa:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80075fc:	2002      	movs	r0, #2
}
 80075fe:	4770      	bx	lr

08007600 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007600:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007602:	7c03      	ldrb	r3, [r0, #16]
{
 8007604:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007606:	2b01      	cmp	r3, #1
 8007608:	d069      	beq.n	80076de <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800760a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800760c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800760e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007610:	f042 0201 	orr.w	r2, r2, #1
 8007614:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007616:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800761a:	f022 0201 	bic.w	r2, r2, #1
 800761e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007622:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007626:	f042 0201 	orr.w	r2, r2, #1
 800762a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	f022 0203 	bic.w	r2, r2, #3
 8007634:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	4302      	orrs	r2, r0
 800763a:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	f022 0207 	bic.w	r2, r2, #7
 8007642:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007644:	6958      	ldr	r0, [r3, #20]
 8007646:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800764a:	432a      	orrs	r2, r5
 800764c:	694d      	ldr	r5, [r1, #20]
 800764e:	432a      	orrs	r2, r5
 8007650:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007652:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007654:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	f022 020f 	bic.w	r2, r2, #15
 800765c:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	4302      	orrs	r2, r0
 8007662:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007664:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007668:	f022 020e 	bic.w	r2, r2, #14
 800766c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007670:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007674:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007678:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800767a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800767e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007680:	f36f 020f 	bfc	r2, #0, #16
 8007684:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007686:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007688:	4302      	orrs	r2, r0
 800768a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800768c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007690:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007694:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007698:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800769c:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80076a0:	432a      	orrs	r2, r5
 80076a2:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80076a4:	432a      	orrs	r2, r5
 80076a6:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80076a8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80076aa:	432a      	orrs	r2, r5
 80076ac:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80076ae:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80076b0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80076b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80076b6:	f022 0201 	bic.w	r2, r2, #1
 80076ba:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80076bc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80076be:	430a      	orrs	r2, r1
 80076c0:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80076c2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80076ce:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80076d2:	f042 0202 	orr.w	r2, r2, #2
 80076d6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80076da:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80076dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80076de:	2002      	movs	r0, #2
 80076e0:	e7fc      	b.n	80076dc <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080076e4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80076e4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80076e6:	7c03      	ldrb	r3, [r0, #16]
{
 80076e8:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d029      	beq.n	8007742 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80076ee:	6800      	ldr	r0, [r0, #0]
 80076f0:	4b15      	ldr	r3, [pc, #84]	@ (8007748 <HAL_DSI_ConfigCommand+0x64>)
 80076f2:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80076f4:	4023      	ands	r3, r4
 80076f6:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80076f8:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80076fa:	e9d1 3500 	ldrd	r3, r5, [r1]
 80076fe:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8007700:	688d      	ldr	r5, [r1, #8]
 8007702:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8007704:	68cd      	ldr	r5, [r1, #12]
 8007706:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007708:	690d      	ldr	r5, [r1, #16]
 800770a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800770c:	694d      	ldr	r5, [r1, #20]
 800770e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8007710:	698d      	ldr	r5, [r1, #24]
 8007712:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8007714:	69cd      	ldr	r5, [r1, #28]
 8007716:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007718:	6a0d      	ldr	r5, [r1, #32]
 800771a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800771c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800771e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8007720:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8007722:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8007724:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007726:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007728:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800772a:	4323      	orrs	r3, r4
 800772c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800772e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007730:	f023 0302 	bic.w	r3, r3, #2
 8007734:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007736:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007738:	430b      	orrs	r3, r1
 800773a:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800773c:	2000      	movs	r0, #0
 800773e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8007740:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007742:	2002      	movs	r0, #2
 8007744:	e7fc      	b.n	8007740 <HAL_DSI_ConfigCommand+0x5c>
 8007746:	bf00      	nop
 8007748:	fef080ff 	.word	0xfef080ff

0800774c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800774c:	7c02      	ldrb	r2, [r0, #16]
{
 800774e:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007750:	2a01      	cmp	r2, #1
 8007752:	d00a      	beq.n	800776a <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007754:	6802      	ldr	r2, [r0, #0]
 8007756:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007758:	f020 001f 	bic.w	r0, r0, #31
 800775c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800775e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007760:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007762:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8007764:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8007766:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007768:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800776a:	2002      	movs	r0, #2
}
 800776c:	4770      	bx	lr

0800776e <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800776e:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007770:	7c03      	ldrb	r3, [r0, #16]
{
 8007772:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007774:	2b01      	cmp	r3, #1
 8007776:	d034      	beq.n	80077e2 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007778:	e9d1 0300 	ldrd	r0, r3, [r1]
 800777c:	4298      	cmp	r0, r3
 800777e:	bf38      	it	cc
 8007780:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007788:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800778c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007790:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007794:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007798:	4302      	orrs	r2, r0
 800779a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800779e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80077a2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80077a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80077aa:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80077ae:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80077b2:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80077b4:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80077b8:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80077ba:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80077bc:	432a      	orrs	r2, r5
 80077be:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80077c0:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80077c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80077c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80077ca:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80077ce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80077d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80077d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80077da:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80077de:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80077e0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80077e2:	2002      	movs	r0, #2
 80077e4:	e7fc      	b.n	80077e0 <HAL_DSI_ConfigPhyTimer+0x72>
	...

080077e8 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80077e8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80077ea:	7c03      	ldrb	r3, [r0, #16]
{
 80077ec:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d05b      	beq.n	80078aa <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80077f2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80077f4:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80077f6:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80077f8:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80077fa:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80077fe:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007806:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007808:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800780a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800780c:	b292      	uxth	r2, r2
 800780e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007810:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007812:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007816:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007818:	4a25      	ldr	r2, [pc, #148]	@ (80078b0 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800781a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800781c:	4010      	ands	r0, r2
 800781e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007820:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007822:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007824:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007826:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007828:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800782a:	4010      	ands	r0, r2
 800782c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800782e:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007830:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007832:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007834:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007836:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800783a:	4010      	ands	r0, r2
 800783c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007840:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007844:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007846:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007848:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800784c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007850:	4010      	ands	r0, r2
 8007852:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007856:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800785a:	4328      	orrs	r0, r5
 800785c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007860:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007864:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8007868:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800786c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007870:	698d      	ldr	r5, [r1, #24]
 8007872:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007874:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007876:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007878:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800787c:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007880:	4010      	ands	r0, r2
 8007882:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007886:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800788a:	4328      	orrs	r0, r5
 800788c:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007890:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8007894:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007896:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800789c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80078a0:	430a      	orrs	r2, r1
 80078a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80078a6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80078a8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80078aa:	2002      	movs	r0, #2
 80078ac:	e7fc      	b.n	80078a8 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80078ae:	bf00      	nop
 80078b0:	ffff0000 	.word	0xffff0000

080078b4 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078b4:	7c03      	ldrb	r3, [r0, #16]
{
 80078b6:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d01c      	beq.n	80078f6 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80078bc:	6802      	ldr	r2, [r0, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	6851      	ldr	r1, [r2, #4]
 80078c4:	f041 0101 	orr.w	r1, r1, #1
 80078c8:	6051      	str	r1, [r2, #4]
 80078ca:	6851      	ldr	r1, [r2, #4]
 80078cc:	f001 0101 	and.w	r1, r1, #1
 80078d0:	9100      	str	r1, [sp, #0]
 80078d2:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80078da:	f041 0108 	orr.w	r1, r1, #8
 80078de:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 80078e2:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078e6:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80078e8:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80078ea:	f002 0208 	and.w	r2, r2, #8
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	9a01      	ldr	r2, [sp, #4]
}
 80078f2:	b002      	add	sp, #8
 80078f4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80078f6:	2002      	movs	r0, #2
 80078f8:	e7fb      	b.n	80078f2 <HAL_DSI_Start+0x3e>

080078fa <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078fa:	7c02      	ldrb	r2, [r0, #16]
{
 80078fc:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80078fe:	2a01      	cmp	r2, #1
 8007900:	d009      	beq.n	8007916 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007902:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007904:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007906:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800790a:	f042 0204 	orr.w	r2, r2, #4
 800790e:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8007912:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007914:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007916:	2002      	movs	r0, #2
}
 8007918:	4770      	bx	lr

0800791a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800791a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800791c:	7c05      	ldrb	r5, [r0, #16]
{
 800791e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007920:	2d01      	cmp	r5, #1
 8007922:	d009      	beq.n	8007938 <HAL_DSI_ShortWrite+0x1e>
 8007924:	2501      	movs	r5, #1
 8007926:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007928:	9d06      	ldr	r5, [sp, #24]
 800792a:	9500      	str	r5, [sp, #0]
 800792c:	f7ff fc6c 	bl	8007208 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007930:	2300      	movs	r3, #0
 8007932:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007934:	b003      	add	sp, #12
 8007936:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007938:	2002      	movs	r0, #2
 800793a:	e7fb      	b.n	8007934 <HAL_DSI_ShortWrite+0x1a>

0800793c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800793c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007940:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007942:	7c03      	ldrb	r3, [r0, #16]
{
 8007944:	4606      	mov	r6, r0
 8007946:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007948:	2b01      	cmp	r3, #1
{
 800794a:	4615      	mov	r5, r2
 800794c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8007950:	d052      	beq.n	80079f8 <HAL_DSI_LongWrite+0xbc>
 8007952:	2301      	movs	r3, #1
 8007954:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007956:	f7ff fa61 	bl	8006e1c <HAL_GetTick>
 800795a:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800795c:	6832      	ldr	r2, [r6, #0]
 800795e:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007960:	f013 0a01 	ands.w	sl, r3, #1
 8007964:	d019      	beq.n	800799a <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007966:	2c03      	cmp	r4, #3
 8007968:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800796a:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800796e:	bf28      	it	cs
 8007970:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8007972:	4283      	cmp	r3, r0
 8007974:	d11d      	bne.n	80079b2 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007976:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8007978:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800797a:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800797e:	bb10      	cbnz	r0, 80079c6 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007980:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007982:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8007986:	0223      	lsls	r3, r4, #8
 8007988:	0224      	lsls	r4, r4, #8
 800798a:	b29b      	uxth	r3, r3
 800798c:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8007990:	431d      	orrs	r5, r3
 8007992:	4325      	orrs	r5, r4
 8007994:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007996:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8007998:	e009      	b.n	80079ae <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800799a:	f7ff fa3f 	bl	8006e1c <HAL_GetTick>
 800799e:	eba0 000b 	sub.w	r0, r0, fp
 80079a2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80079a6:	d9d9      	bls.n	800795c <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80079a8:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80079aa:	f886 a010 	strb.w	sl, [r6, #16]
}
 80079ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80079b2:	f818 1003 	ldrb.w	r1, [r8, r3]
 80079b6:	3301      	adds	r3, #1
 80079b8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80079bc:	fa01 f10c 	lsl.w	r1, r1, ip
 80079c0:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80079c4:	e7d5      	b.n	8007972 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80079c6:	2804      	cmp	r0, #4
    fifoword = 0U;
 80079c8:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80079cc:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 80079ce:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80079d0:	bf28      	it	cs
 80079d2:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80079d6:	f813 8001 	ldrb.w	r8, [r3, r1]
 80079da:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80079de:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80079e0:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80079e4:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80079e6:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80079ea:	d1f4      	bne.n	80079d6 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 80079ec:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 80079f0:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 80079f2:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 80079f6:	e7c2      	b.n	800797e <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80079f8:	2002      	movs	r0, #2
 80079fa:	e7d8      	b.n	80079ae <HAL_DSI_LongWrite+0x72>

080079fc <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80079fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a00:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a02:	7c03      	ldrb	r3, [r0, #16]
{
 8007a04:	4605      	mov	r5, r0
 8007a06:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007a08:	2b01      	cmp	r3, #1
{
 8007a0a:	4617      	mov	r7, r2
 8007a0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007a10:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8007a14:	d06f      	beq.n	8007af6 <HAL_DSI_Read+0xfa>
 8007a16:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007a18:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007a1a:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007a1c:	d90d      	bls.n	8007a3a <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8007a1e:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007a22:	2237      	movs	r2, #55	@ 0x37
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	b2f3      	uxtb	r3, r6
 8007a28:	f7ff fbee 	bl	8007208 <DSI_ShortWrite.constprop.0>
 8007a2c:	b128      	cbz	r0, 8007a3a <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007a2e:	2300      	movs	r3, #0

      return HAL_ERROR;
 8007a30:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007a32:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007a34:	b003      	add	sp, #12
 8007a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007a3a:	f1b9 0f06 	cmp.w	r9, #6
 8007a3e:	d10f      	bne.n	8007a60 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007a42:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8007a4a:	f043 0306 	orr.w	r3, r3, #6
 8007a4e:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8007a50:	f7ff f9e4 	bl	8006e1c <HAL_GetTick>
 8007a54:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007a56:	2e00      	cmp	r6, #0
 8007a58:	dc27      	bgt.n	8007aaa <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007a5e:	e7e9      	b.n	8007a34 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007a60:	f1b9 0f04 	cmp.w	r9, #4
 8007a64:	d105      	bne.n	8007a72 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a66:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007a68:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a6a:	f044 0404 	orr.w	r4, r4, #4
 8007a6e:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007a70:	e7ee      	b.n	8007a50 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007a72:	f1b9 0f14 	cmp.w	r9, #20
 8007a76:	d108      	bne.n	8007a8a <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007a78:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a7c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007a7e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a80:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007a84:	f044 0414 	orr.w	r4, r4, #20
 8007a88:	e7f1      	b.n	8007a6e <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007a8a:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8007a8e:	d1ce      	bne.n	8007a2e <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007a90:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a94:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007a96:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007a98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007a9c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007aa0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007aa4:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8007aa8:	e7e1      	b.n	8007a6e <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007aaa:	682a      	ldr	r2, [r5, #0]
 8007aac:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007aae:	f013 0310 	ands.w	r3, r3, #16
 8007ab2:	d10d      	bne.n	8007ad0 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007ab4:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8007ab6:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007ab8:	4632      	mov	r2, r6
 8007aba:	bf28      	it	cs
 8007abc:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8007abe:	00d9      	lsls	r1, r3, #3
 8007ac0:	fa20 f101 	lsr.w	r1, r0, r1
 8007ac4:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d1f8      	bne.n	8007abe <HAL_DSI_Read+0xc2>
 8007acc:	4417      	add	r7, r2
 8007ace:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007ad0:	f7ff f9a4 	bl	8006e1c <HAL_GetTick>
 8007ad4:	1b00      	subs	r0, r0, r4
 8007ad6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007ada:	d903      	bls.n	8007ae4 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8007adc:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007ade:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007ae0:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8007ae2:	e7a7      	b.n	8007a34 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007ae8:	0652      	lsls	r2, r2, #25
 8007aea:	d4b4      	bmi.n	8007a56 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8007aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007af0:	069b      	lsls	r3, r3, #26
 8007af2:	d49c      	bmi.n	8007a2e <HAL_DSI_Read+0x32>
 8007af4:	e7af      	b.n	8007a56 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8007af6:	2002      	movs	r0, #2
 8007af8:	e79c      	b.n	8007a34 <HAL_DSI_Read+0x38>

08007afa <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007afa:	7c02      	ldrb	r2, [r0, #16]
{
 8007afc:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007afe:	2a01      	cmp	r2, #1
 8007b00:	d00f      	beq.n	8007b22 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007b02:	6802      	ldr	r2, [r0, #0]
 8007b04:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007b08:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8007b0c:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007b10:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007b14:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007b18:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007b1a:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8007b1e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007b20:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007b22:	2002      	movs	r0, #2
}
 8007b24:	4770      	bx	lr
	...

08007b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007b2c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b2e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8007cf4 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b32:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007b36:	680a      	ldr	r2, [r1, #0]
 8007b38:	fa32 f503 	lsrs.w	r5, r2, r3
 8007b3c:	d102      	bne.n	8007b44 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007b3e:	b003      	add	sp, #12
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b44:	2501      	movs	r5, #1
 8007b46:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8007b4a:	ea18 0202 	ands.w	r2, r8, r2
 8007b4e:	f000 80bb 	beq.w	8007cc8 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b52:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b54:	2703      	movs	r7, #3
 8007b56:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b5a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b5e:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b62:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b64:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b68:	2f01      	cmp	r7, #1
 8007b6a:	d834      	bhi.n	8007bd6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8007b6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b6e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b72:	68cf      	ldr	r7, [r1, #12]
 8007b74:	fa07 f70e 	lsl.w	r7, r7, lr
 8007b78:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007b7c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007b7e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b80:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b84:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007b88:	409f      	lsls	r7, r3
 8007b8a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8007b8e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007b90:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b92:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b94:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b98:	688f      	ldr	r7, [r1, #8]
 8007b9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8007b9e:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8007ba2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ba4:	d119      	bne.n	8007bda <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8007ba6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007baa:	f003 0a07 	and.w	sl, r3, #7
 8007bae:	f04f 0b0f 	mov.w	fp, #15
 8007bb2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8007bb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007bba:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bbe:	fa0b fb0a 	lsl.w	fp, fp, sl
 8007bc2:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bc6:	690f      	ldr	r7, [r1, #16]
 8007bc8:	fa07 f70a 	lsl.w	r7, r7, sl
 8007bcc:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8007bd0:	f8c8 7020 	str.w	r7, [r8, #32]
 8007bd4:	e001      	b.n	8007bda <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bd6:	2d03      	cmp	r5, #3
 8007bd8:	d1da      	bne.n	8007b90 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8007bda:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007bdc:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007be0:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007be4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007be8:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8007bec:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007bee:	d06b      	beq.n	8007cc8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bf0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8007bf4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bf8:	f003 0c03 	and.w	ip, r3, #3
 8007bfc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c00:	f045 0502 	orr.w	r5, r5, #2
 8007c04:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c0c:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8007c10:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8007c14:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c18:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c1c:	f005 0502 	and.w	r5, r5, #2
 8007c20:	9501      	str	r5, [sp, #4]
 8007c22:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007c24:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c26:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c2a:	4d31      	ldr	r5, [pc, #196]	@ (8007cf0 <HAL_GPIO_Init+0x1c8>)
 8007c2c:	42a8      	cmp	r0, r5
 8007c2e:	d04d      	beq.n	8007ccc <HAL_GPIO_Init+0x1a4>
 8007c30:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c34:	42a8      	cmp	r0, r5
 8007c36:	d04b      	beq.n	8007cd0 <HAL_GPIO_Init+0x1a8>
 8007c38:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c3c:	42a8      	cmp	r0, r5
 8007c3e:	d049      	beq.n	8007cd4 <HAL_GPIO_Init+0x1ac>
 8007c40:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c44:	42a8      	cmp	r0, r5
 8007c46:	d047      	beq.n	8007cd8 <HAL_GPIO_Init+0x1b0>
 8007c48:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c4c:	42a8      	cmp	r0, r5
 8007c4e:	d045      	beq.n	8007cdc <HAL_GPIO_Init+0x1b4>
 8007c50:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c54:	42a8      	cmp	r0, r5
 8007c56:	d043      	beq.n	8007ce0 <HAL_GPIO_Init+0x1b8>
 8007c58:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c5c:	42a8      	cmp	r0, r5
 8007c5e:	d041      	beq.n	8007ce4 <HAL_GPIO_Init+0x1bc>
 8007c60:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c64:	42a8      	cmp	r0, r5
 8007c66:	d03f      	beq.n	8007ce8 <HAL_GPIO_Init+0x1c0>
 8007c68:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c6c:	42a8      	cmp	r0, r5
 8007c6e:	d03d      	beq.n	8007cec <HAL_GPIO_Init+0x1c4>
 8007c70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c74:	42a8      	cmp	r0, r5
 8007c76:	bf14      	ite	ne
 8007c78:	250a      	movne	r5, #10
 8007c7a:	2509      	moveq	r5, #9
 8007c7c:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c80:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c84:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c88:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007c8a:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007c8e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007c90:	bf0c      	ite	eq
 8007c92:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007c94:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c96:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8007c9a:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007c9c:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007c9e:	bf0c      	ite	eq
 8007ca0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007ca2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ca4:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8007ca8:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007caa:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8007cae:	bf0c      	ite	eq
 8007cb0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007cb2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cb4:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007cb6:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007cba:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8007cbe:	bf54      	ite	pl
 8007cc0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007cc2:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007cc4:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8007cc8:	3301      	adds	r3, #1
 8007cca:	e734      	b.n	8007b36 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ccc:	2500      	movs	r5, #0
 8007cce:	e7d5      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007cd0:	2501      	movs	r5, #1
 8007cd2:	e7d3      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007cd4:	2502      	movs	r5, #2
 8007cd6:	e7d1      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007cd8:	2503      	movs	r5, #3
 8007cda:	e7cf      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007cdc:	2504      	movs	r5, #4
 8007cde:	e7cd      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007ce0:	2505      	movs	r5, #5
 8007ce2:	e7cb      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007ce4:	2506      	movs	r5, #6
 8007ce6:	e7c9      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007ce8:	2507      	movs	r5, #7
 8007cea:	e7c7      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007cec:	2508      	movs	r5, #8
 8007cee:	e7c5      	b.n	8007c7c <HAL_GPIO_Init+0x154>
 8007cf0:	58020000 	.word	0x58020000
 8007cf4:	58024400 	.word	0x58024400

08007cf8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007cfc:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007cfe:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007d02:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007d06:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007d0a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8007d0e:	fa31 f302 	lsrs.w	r3, r1, r2
 8007d12:	d101      	bne.n	8007d18 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007d18:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007d1c:	ea1c 0601 	ands.w	r6, ip, r1
 8007d20:	d070      	beq.n	8007e04 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007d22:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007d26:	f002 0703 	and.w	r7, r2, #3
 8007d2a:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007d2e:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007d30:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007d34:	fa08 f907 	lsl.w	r9, r8, r7
 8007d38:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007d3c:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007d40:	4b3a      	ldr	r3, [pc, #232]	@ (8007e2c <HAL_GPIO_DeInit+0x134>)
 8007d42:	4298      	cmp	r0, r3
 8007d44:	d060      	beq.n	8007e08 <HAL_GPIO_DeInit+0x110>
 8007d46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	d05e      	beq.n	8007e0c <HAL_GPIO_DeInit+0x114>
 8007d4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d52:	4298      	cmp	r0, r3
 8007d54:	d05c      	beq.n	8007e10 <HAL_GPIO_DeInit+0x118>
 8007d56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d5a:	4298      	cmp	r0, r3
 8007d5c:	d05a      	beq.n	8007e14 <HAL_GPIO_DeInit+0x11c>
 8007d5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d62:	4298      	cmp	r0, r3
 8007d64:	d058      	beq.n	8007e18 <HAL_GPIO_DeInit+0x120>
 8007d66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d6a:	4298      	cmp	r0, r3
 8007d6c:	d056      	beq.n	8007e1c <HAL_GPIO_DeInit+0x124>
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d72:	4298      	cmp	r0, r3
 8007d74:	d054      	beq.n	8007e20 <HAL_GPIO_DeInit+0x128>
 8007d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d7a:	4298      	cmp	r0, r3
 8007d7c:	d052      	beq.n	8007e24 <HAL_GPIO_DeInit+0x12c>
 8007d7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d82:	4298      	cmp	r0, r3
 8007d84:	d050      	beq.n	8007e28 <HAL_GPIO_DeInit+0x130>
 8007d86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	bf14      	ite	ne
 8007d8e:	230a      	movne	r3, #10
 8007d90:	2309      	moveq	r3, #9
 8007d92:	40bb      	lsls	r3, r7
 8007d94:	4573      	cmp	r3, lr
 8007d96:	d117      	bne.n	8007dc8 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007d98:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007d9c:	ea23 0306 	bic.w	r3, r3, r6
 8007da0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007da4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007da8:	ea23 0306 	bic.w	r3, r3, r6
 8007dac:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007db0:	6863      	ldr	r3, [r4, #4]
 8007db2:	ea23 0306 	bic.w	r3, r3, r6
 8007db6:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	ea23 0306 	bic.w	r3, r3, r6
 8007dbe:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007dc0:	68ab      	ldr	r3, [r5, #8]
 8007dc2:	ea23 0309 	bic.w	r3, r3, r9
 8007dc6:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007dc8:	0053      	lsls	r3, r2, #1
 8007dca:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007dcc:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007dce:	fa0b f303 	lsl.w	r3, fp, r3
 8007dd2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007dd6:	431d      	orrs	r5, r3
 8007dd8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007dda:	f002 0507 	and.w	r5, r2, #7
 8007dde:	6a37      	ldr	r7, [r6, #32]
 8007de0:	00ad      	lsls	r5, r5, #2
 8007de2:	fa08 f505 	lsl.w	r5, r8, r5
 8007de6:	ea27 0705 	bic.w	r7, r7, r5
 8007dea:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dec:	68c5      	ldr	r5, [r0, #12]
 8007dee:	ea25 0503 	bic.w	r5, r5, r3
 8007df2:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007df4:	6845      	ldr	r5, [r0, #4]
 8007df6:	ea25 050c 	bic.w	r5, r5, ip
 8007dfa:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dfc:	6885      	ldr	r5, [r0, #8]
 8007dfe:	ea25 0303 	bic.w	r3, r5, r3
 8007e02:	6083      	str	r3, [r0, #8]
    position++;
 8007e04:	3201      	adds	r2, #1
 8007e06:	e782      	b.n	8007d0e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e7c2      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e7c0      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e7be      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e14:	2303      	movs	r3, #3
 8007e16:	e7bc      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e18:	2304      	movs	r3, #4
 8007e1a:	e7ba      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e1c:	2305      	movs	r3, #5
 8007e1e:	e7b8      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e20:	2306      	movs	r3, #6
 8007e22:	e7b6      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e24:	2307      	movs	r3, #7
 8007e26:	e7b4      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	e7b2      	b.n	8007d92 <HAL_GPIO_DeInit+0x9a>
 8007e2c:	58020000 	.word	0x58020000

08007e30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e30:	6903      	ldr	r3, [r0, #16]
 8007e32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007e34:	bf14      	ite	ne
 8007e36:	2001      	movne	r0, #1
 8007e38:	2000      	moveq	r0, #0
 8007e3a:	4770      	bx	lr

08007e3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e3c:	b10a      	cbz	r2, 8007e42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e3e:	6181      	str	r1, [r0, #24]
  }
}
 8007e40:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e42:	0409      	lsls	r1, r1, #16
 8007e44:	e7fb      	b.n	8007e3e <HAL_GPIO_WritePin+0x2>

08007e46 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e46:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e48:	ea01 0203 	and.w	r2, r1, r3
 8007e4c:	ea21 0103 	bic.w	r1, r1, r3
 8007e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e54:	6181      	str	r1, [r0, #24]
}
 8007e56:	4770      	bx	lr

08007e58 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007e58:	4b04      	ldr	r3, [pc, #16]	@ (8007e6c <HAL_HSEM_FastTake+0x14>)
 8007e5a:	3020      	adds	r0, #32
 8007e5c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007e60:	4b03      	ldr	r3, [pc, #12]	@ (8007e70 <HAL_HSEM_FastTake+0x18>)
 8007e62:	1ac0      	subs	r0, r0, r3
 8007e64:	bf18      	it	ne
 8007e66:	2001      	movne	r0, #1
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	58026400 	.word	0x58026400
 8007e70:	80000300 	.word	0x80000300

08007e74 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007e74:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007e78:	4b01      	ldr	r3, [pc, #4]	@ (8007e80 <HAL_HSEM_Release+0xc>)
 8007e7a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007e7e:	4770      	bx	lr
 8007e80:	58026400 	.word	0x58026400

08007e84 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e84:	6803      	ldr	r3, [r0, #0]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	0791      	lsls	r1, r2, #30
 8007e8a:	d501      	bpl.n	8007e90 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	07d2      	lsls	r2, r2, #31
 8007e94:	d403      	bmi.n	8007e9e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e96:	699a      	ldr	r2, [r3, #24]
 8007e98:	f042 0201 	orr.w	r2, r2, #1
 8007e9c:	619a      	str	r2, [r3, #24]
  }
}
 8007e9e:	4770      	bx	lr

08007ea0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ea0:	b530      	push	{r4, r5, lr}
 8007ea2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ea4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ea8:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eaa:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007eac:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007eb2:	4a05      	ldr	r2, [pc, #20]	@ (8007ec8 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eb4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007eb6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ebe:	ea20 0002 	bic.w	r0, r0, r2
 8007ec2:	4303      	orrs	r3, r0
 8007ec4:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ec6:	bd30      	pop	{r4, r5, pc}
 8007ec8:	03ff63ff 	.word	0x03ff63ff

08007ecc <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ecc:	6803      	ldr	r3, [r0, #0]
{
 8007ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ed2:	699c      	ldr	r4, [r3, #24]
{
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007eda:	f014 0410 	ands.w	r4, r4, #16
 8007ede:	d06f      	beq.n	8007fc0 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8007ee0:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee2:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007ee4:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	699a      	ldr	r2, [r3, #24]
 8007eec:	0690      	lsls	r0, r2, #26
 8007eee:	d461      	bmi.n	8007fb4 <I2C_IsErrorOccurred+0xe8>
 8007ef0:	f1b8 0f00 	cmp.w	r8, #0
 8007ef4:	d035      	beq.n	8007f62 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8007ef6:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8007efa:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007efc:	682e      	ldr	r6, [r5, #0]
 8007efe:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f00:	05d9      	lsls	r1, r3, #23
 8007f02:	d505      	bpl.n	8007f10 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007f08:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007f0c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f0e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f10:	055a      	lsls	r2, r3, #21
 8007f12:	d505      	bpl.n	8007f20 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007f18:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007f1c:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f1e:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f20:	059b      	lsls	r3, r3, #22
 8007f22:	d54f      	bpl.n	8007fc4 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f28:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f2c:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f7ff ffa8 	bl	8007e84 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007f34:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8007f36:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007f38:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007f3c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007f40:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007f44:	f023 0301 	bic.w	r3, r3, #1
 8007f48:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8007f4a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007f4c:	4323      	orrs	r3, r4
 8007f4e:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f50:	2320      	movs	r3, #32
 8007f52:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007f5c:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007f60:	e032      	b.n	8007fc8 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007f62:	1c7a      	adds	r2, r7, #1
 8007f64:	d0c1      	beq.n	8007eea <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f66:	f7fe ff59 	bl	8006e1c <HAL_GetTick>
 8007f6a:	1b80      	subs	r0, r0, r6
 8007f6c:	42b8      	cmp	r0, r7
 8007f6e:	d801      	bhi.n	8007f74 <I2C_IsErrorOccurred+0xa8>
 8007f70:	2f00      	cmp	r7, #0
 8007f72:	d1b9      	bne.n	8007ee8 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007f78:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f7c:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007f7e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f80:	0400      	lsls	r0, r0, #16
 8007f82:	d50a      	bpl.n	8007f9a <I2C_IsErrorOccurred+0xce>
 8007f84:	0449      	lsls	r1, r1, #17
 8007f86:	d408      	bmi.n	8007f9a <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8007f88:	2a20      	cmp	r2, #32
 8007f8a:	d006      	beq.n	8007f9a <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f92:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007f94:	f7fe ff42 	bl	8006e1c <HAL_GetTick>
 8007f98:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	069b      	lsls	r3, r3, #26
 8007fa0:	d4a2      	bmi.n	8007ee8 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fa2:	f7fe ff3b 	bl	8006e1c <HAL_GetTick>
 8007fa6:	1b80      	subs	r0, r0, r6
 8007fa8:	2819      	cmp	r0, #25
 8007faa:	d9f6      	bls.n	8007f9a <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007fac:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007fae:	f04f 0801 	mov.w	r8, #1
 8007fb2:	e799      	b.n	8007ee8 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007fb4:	f1b8 0f00 	cmp.w	r8, #0
 8007fb8:	d19d      	bne.n	8007ef6 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fba:	2220      	movs	r2, #32
 8007fbc:	61da      	str	r2, [r3, #28]
 8007fbe:	e79a      	b.n	8007ef6 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	e79b      	b.n	8007efc <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d1b2      	bne.n	8007f2e <I2C_IsErrorOccurred+0x62>
}
 8007fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007fcc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4604      	mov	r4, r0
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	079b      	lsls	r3, r3, #30
 8007fda:	d501      	bpl.n	8007fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007fdc:	2000      	movs	r0, #0
 8007fde:	e01f      	b.n	8008020 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f7ff ff71 	bl	8007ecc <I2C_IsErrorOccurred>
 8007fea:	b9c0      	cbnz	r0, 800801e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007fec:	1c6a      	adds	r2, r5, #1
 8007fee:	d0f1      	beq.n	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff0:	f7fe ff14 	bl	8006e1c <HAL_GetTick>
 8007ff4:	1b80      	subs	r0, r0, r6
 8007ff6:	42a8      	cmp	r0, r5
 8007ff8:	d801      	bhi.n	8007ffe <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	d1ea      	bne.n	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f013 0302 	ands.w	r3, r3, #2
 8008006:	d1e5      	bne.n	8007fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 800800a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800800e:	f042 0220 	orr.w	r2, r2, #32
 8008012:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008014:	2220      	movs	r2, #32
 8008016:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800801a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800801e:	2001      	movs	r0, #1
}
 8008020:	bd70      	pop	{r4, r5, r6, pc}

08008022 <I2C_WaitOnFlagUntilTimeout>:
{
 8008022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800802a:	4604      	mov	r4, r0
 800802c:	460f      	mov	r7, r1
 800802e:	4616      	mov	r6, r2
 8008030:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	ea37 0303 	bics.w	r3, r7, r3
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	42b3      	cmp	r3, r6
 8008042:	d001      	beq.n	8008048 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008044:	2000      	movs	r0, #0
 8008046:	e025      	b.n	8008094 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008048:	4642      	mov	r2, r8
 800804a:	4629      	mov	r1, r5
 800804c:	4620      	mov	r0, r4
 800804e:	f7ff ff3d 	bl	8007ecc <I2C_IsErrorOccurred>
 8008052:	b9f0      	cbnz	r0, 8008092 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8008054:	1c6b      	adds	r3, r5, #1
 8008056:	d0ec      	beq.n	8008032 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008058:	f7fe fee0 	bl	8006e1c <HAL_GetTick>
 800805c:	eba0 0008 	sub.w	r0, r0, r8
 8008060:	42a8      	cmp	r0, r5
 8008062:	d801      	bhi.n	8008068 <I2C_WaitOnFlagUntilTimeout+0x46>
 8008064:	2d00      	cmp	r5, #0
 8008066:	d1e4      	bne.n	8008032 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	ea37 0303 	bics.w	r3, r7, r3
 8008070:	bf0c      	ite	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	2300      	movne	r3, #0
 8008076:	42b3      	cmp	r3, r6
 8008078:	d1db      	bne.n	8008032 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800807a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008082:	2320      	movs	r3, #32
 8008084:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008088:	2300      	movs	r3, #0
 800808a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800808e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008092:	2001      	movs	r0, #1
}
 8008094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008098 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4604      	mov	r4, r0
 800809c:	460d      	mov	r5, r1
 800809e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	069b      	lsls	r3, r3, #26
 80080a6:	d501      	bpl.n	80080ac <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80080a8:	2000      	movs	r0, #0
 80080aa:	e01d      	b.n	80080e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ac:	4632      	mov	r2, r6
 80080ae:	4629      	mov	r1, r5
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7ff ff0b 	bl	8007ecc <I2C_IsErrorOccurred>
 80080b6:	b9b0      	cbnz	r0, 80080e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b8:	f7fe feb0 	bl	8006e1c <HAL_GetTick>
 80080bc:	1b80      	subs	r0, r0, r6
 80080be:	42a8      	cmp	r0, r5
 80080c0:	d801      	bhi.n	80080c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	d1ec      	bne.n	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	f013 0320 	ands.w	r3, r3, #32
 80080ce:	d1e7      	bne.n	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080d0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80080d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080d6:	f042 0220 	orr.w	r2, r2, #32
 80080da:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080dc:	2220      	movs	r2, #32
 80080de:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80080e6:	2001      	movs	r0, #1
}
 80080e8:	bd70      	pop	{r4, r5, r6, pc}

080080ea <HAL_I2C_MspInit>:
}
 80080ea:	4770      	bx	lr

080080ec <HAL_I2C_Init>:
{
 80080ec:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80080ee:	4604      	mov	r4, r0
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d04e      	beq.n	8008192 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080f4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80080f8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80080fc:	b91b      	cbnz	r3, 8008106 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80080fe:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008102:	f7ff fff2 	bl	80080ea <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008106:	2324      	movs	r3, #36	@ 0x24
 8008108:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	f022 0201 	bic.w	r2, r2, #1
 8008114:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008116:	6862      	ldr	r2, [r4, #4]
 8008118:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800811c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008124:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008126:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800812a:	2901      	cmp	r1, #1
 800812c:	d106      	bne.n	800813c <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800812e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008132:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800813a:	e007      	b.n	800814c <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800813c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008140:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008142:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008144:	d1f6      	bne.n	8008134 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800814c:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800814e:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800815a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008162:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008164:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8008168:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800816a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800816c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008170:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008172:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008176:	430a      	orrs	r2, r1
 8008178:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	f042 0201 	orr.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008182:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008184:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008186:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800818a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008190:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008192:	2001      	movs	r0, #1
 8008194:	e7fc      	b.n	8008190 <HAL_I2C_Init+0xa4>

08008196 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8008196:	4770      	bx	lr

08008198 <HAL_I2C_DeInit>:
{
 8008198:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800819a:	4604      	mov	r4, r0
 800819c:	b198      	cbz	r0, 80081c6 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800819e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80081a0:	2324      	movs	r3, #36	@ 0x24
 80081a2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	f023 0301 	bic.w	r3, r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80081ae:	f7ff fff2 	bl	8008196 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081b2:	2000      	movs	r0, #0
 80081b4:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 80081b6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80081ba:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081be:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80081c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80081c6:	2001      	movs	r0, #1
 80081c8:	e7fc      	b.n	80081c4 <HAL_I2C_DeInit+0x2c>
	...

080081cc <HAL_I2C_Mem_Write>:
{
 80081cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80081d6:	4604      	mov	r4, r0
 80081d8:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081da:	2b20      	cmp	r3, #32
{
 80081dc:	4616      	mov	r6, r2
 80081de:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80081e2:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80081e6:	f040 80c6 	bne.w	8008376 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80081ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081ec:	b113      	cbz	r3, 80081f4 <HAL_I2C_Mem_Write+0x28>
 80081ee:	f1ba 0f00 	cmp.w	sl, #0
 80081f2:	d106      	bne.n	8008202 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081f8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80081fa:	2001      	movs	r0, #1
}
 80081fc:	b003      	add	sp, #12
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008202:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008206:	2b01      	cmp	r3, #1
 8008208:	f000 80b5 	beq.w	8008376 <HAL_I2C_Mem_Write+0x1aa>
 800820c:	f04f 0b01 	mov.w	fp, #1
 8008210:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008214:	f7fe fe02 	bl	8006e1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008218:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800821a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800821c:	9000      	str	r0, [sp, #0]
 800821e:	465a      	mov	r2, fp
 8008220:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff fefc 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 800822a:	2800      	cmp	r0, #0
 800822c:	d1e5      	bne.n	80081fa <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800822e:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8008230:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008232:	fa5f f289 	uxtb.w	r2, r9
 8008236:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008238:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800823c:	2340      	movs	r3, #64	@ 0x40
 800823e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008244:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008246:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008248:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800824a:	4b4c      	ldr	r3, [pc, #304]	@ (800837c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800824c:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008256:	f7ff fe23 	bl	8007ea0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800825a:	462a      	mov	r2, r5
 800825c:	4641      	mov	r1, r8
 800825e:	4620      	mov	r0, r4
 8008260:	f7ff feb4 	bl	8007fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008264:	bb18      	cbnz	r0, 80082ae <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008266:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800826a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800826c:	d115      	bne.n	800829a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800826e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008270:	2200      	movs	r2, #0
 8008272:	2180      	movs	r1, #128	@ 0x80
 8008274:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008276:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008278:	4643      	mov	r3, r8
 800827a:	9500      	str	r5, [sp, #0]
 800827c:	f7ff fed1 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 8008280:	b9a8      	cbnz	r0, 80082ae <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008282:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008284:	b29b      	uxth	r3, r3
 8008286:	2bff      	cmp	r3, #255	@ 0xff
 8008288:	d815      	bhi.n	80082b6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800828a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800828c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008290:	b292      	uxth	r2, r2
 8008292:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	9000      	str	r0, [sp, #0]
 8008298:	e012      	b.n	80082c0 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800829a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800829c:	4641      	mov	r1, r8
 800829e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	462a      	mov	r2, r5
 80082a4:	f7ff fe92 	bl	8007fcc <I2C_WaitOnTXISFlagUntilTimeout>
 80082a8:	b908      	cbnz	r0, 80082ae <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	e7df      	b.n	800826e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80082ae:	2300      	movs	r3, #0
 80082b0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80082b4:	e7a1      	b.n	80081fa <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082b6:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80082b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082bc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80082be:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80082c0:	4639      	mov	r1, r7
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7ff fdec 	bl	8007ea0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082c8:	462a      	mov	r2, r5
 80082ca:	4641      	mov	r1, r8
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7ff fe7d 	bl	8007fcc <I2C_WaitOnTXISFlagUntilTimeout>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d191      	bne.n	80081fa <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	f813 1b01 	ldrb.w	r1, [r3], #1
 80082de:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80082e0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80082e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80082e4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80082e6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80082e8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80082ea:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80082ec:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80082ee:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80082f2:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	b1b3      	cbz	r3, 8008326 <HAL_I2C_Mem_Write+0x15a>
 80082f8:	b9aa      	cbnz	r2, 8008326 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082fa:	4643      	mov	r3, r8
 80082fc:	2180      	movs	r1, #128	@ 0x80
 80082fe:	4620      	mov	r0, r4
 8008300:	9500      	str	r5, [sp, #0]
 8008302:	f7ff fe8e 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 8008306:	2800      	cmp	r0, #0
 8008308:	f47f af77 	bne.w	80081fa <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800830c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800830e:	b29b      	uxth	r3, r3
 8008310:	2bff      	cmp	r3, #255	@ 0xff
 8008312:	d928      	bls.n	8008366 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008314:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800831a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800831c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800831e:	4639      	mov	r1, r7
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff fdbd 	bl	8007ea0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008326:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1cc      	bne.n	80082c8 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800832e:	462a      	mov	r2, r5
 8008330:	4641      	mov	r1, r8
 8008332:	4620      	mov	r0, r4
 8008334:	f7ff feb0 	bl	8008098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008338:	2800      	cmp	r0, #0
 800833a:	f47f af5e 	bne.w	80081fa <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	2120      	movs	r1, #32
 8008342:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800834a:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800834e:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8008352:	f022 0201 	bic.w	r2, r2, #1
 8008356:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008358:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800835c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008360:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8008364:	e74a      	b.n	80081fc <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008366:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008368:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800836c:	b292      	uxth	r2, r2
 800836e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	9000      	str	r0, [sp, #0]
 8008374:	e7d3      	b.n	800831e <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8008376:	2002      	movs	r0, #2
 8008378:	e740      	b.n	80081fc <HAL_I2C_Mem_Write+0x30>
 800837a:	bf00      	nop
 800837c:	80002000 	.word	0x80002000

08008380 <HAL_I2C_Mem_Read>:
{
 8008380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008386:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800838a:	4604      	mov	r4, r0
 800838c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800838e:	2b20      	cmp	r3, #32
{
 8008390:	4616      	mov	r6, r2
 8008392:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008396:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800839a:	f040 80c9 	bne.w	8008530 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800839e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083a0:	b113      	cbz	r3, 80083a8 <HAL_I2C_Mem_Read+0x28>
 80083a2:	f1ba 0f00 	cmp.w	sl, #0
 80083a6:	d106      	bne.n	80083b6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80083a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ac:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80083ae:	2001      	movs	r0, #1
}
 80083b0:	b003      	add	sp, #12
 80083b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80083b6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	f000 80b8 	beq.w	8008530 <HAL_I2C_Mem_Read+0x1b0>
 80083c0:	f04f 0b01 	mov.w	fp, #1
 80083c4:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80083c8:	f7fe fd28 	bl	8006e1c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083cc:	2319      	movs	r3, #25
 80083ce:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80083d0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083d2:	465a      	mov	r2, fp
 80083d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083d8:	4620      	mov	r0, r4
 80083da:	f7ff fe22 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1e4      	bne.n	80083ae <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083e4:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80083e6:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80083e8:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80083ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083ee:	2240      	movs	r2, #64	@ 0x40
 80083f0:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80083f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083f6:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80083f8:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80083fa:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80083fc:	4a4d      	ldr	r2, [pc, #308]	@ (8008534 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80083fe:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008402:	9200      	str	r2, [sp, #0]
 8008404:	fa5f f289 	uxtb.w	r2, r9
 8008408:	f7ff fd4a 	bl	8007ea0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800840c:	462a      	mov	r2, r5
 800840e:	4641      	mov	r1, r8
 8008410:	4620      	mov	r0, r4
 8008412:	f7ff fddb 	bl	8007fcc <I2C_WaitOnTXISFlagUntilTimeout>
 8008416:	bb20      	cbnz	r0, 8008462 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008418:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800841c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800841e:	d116      	bne.n	800844e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008420:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008422:	2200      	movs	r2, #0
 8008424:	2140      	movs	r1, #64	@ 0x40
 8008426:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008428:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800842a:	4643      	mov	r3, r8
 800842c:	9500      	str	r5, [sp, #0]
 800842e:	f7ff fdf8 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 8008432:	b9b0      	cbnz	r0, 8008462 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008434:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	2bff      	cmp	r3, #255	@ 0xff
 800843a:	4b3f      	ldr	r3, [pc, #252]	@ (8008538 <HAL_I2C_Mem_Read+0x1b8>)
 800843c:	d815      	bhi.n	800846a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800843e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008440:	b292      	uxth	r2, r2
 8008442:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800844c:	e012      	b.n	8008474 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800844e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008450:	4641      	mov	r1, r8
 8008452:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008454:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008456:	462a      	mov	r2, r5
 8008458:	f7ff fdb8 	bl	8007fcc <I2C_WaitOnTXISFlagUntilTimeout>
 800845c:	b908      	cbnz	r0, 8008462 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	e7de      	b.n	8008420 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8008462:	2300      	movs	r3, #0
 8008464:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008468:	e7a1      	b.n	80083ae <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800846a:	22ff      	movs	r2, #255	@ 0xff
 800846c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008474:	4639      	mov	r1, r7
 8008476:	4620      	mov	r0, r4
 8008478:	f7ff fd12 	bl	8007ea0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800847c:	4643      	mov	r3, r8
 800847e:	2200      	movs	r2, #0
 8008480:	2104      	movs	r1, #4
 8008482:	4620      	mov	r0, r4
 8008484:	9500      	str	r5, [sp, #0]
 8008486:	f7ff fdcc 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 800848a:	2800      	cmp	r0, #0
 800848c:	d18f      	bne.n	80083ae <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008492:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008494:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008496:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008498:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800849a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800849c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800849e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80084a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80084a2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80084a4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80084a6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	b1b3      	cbz	r3, 80084e0 <HAL_I2C_Mem_Read+0x160>
 80084b2:	b9aa      	cbnz	r2, 80084e0 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084b4:	4643      	mov	r3, r8
 80084b6:	2180      	movs	r1, #128	@ 0x80
 80084b8:	4620      	mov	r0, r4
 80084ba:	9500      	str	r5, [sp, #0]
 80084bc:	f7ff fdb1 	bl	8008022 <I2C_WaitOnFlagUntilTimeout>
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f47f af74 	bne.w	80083ae <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2bff      	cmp	r3, #255	@ 0xff
 80084cc:	d928      	bls.n	8008520 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ce:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80084d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80084d4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80084d6:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084d8:	4639      	mov	r1, r7
 80084da:	4620      	mov	r0, r4
 80084dc:	f7ff fce0 	bl	8007ea0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80084e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1c9      	bne.n	800847c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084e8:	462a      	mov	r2, r5
 80084ea:	4641      	mov	r1, r8
 80084ec:	4620      	mov	r0, r4
 80084ee:	f7ff fdd3 	bl	8008098 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f47f af5b 	bne.w	80083ae <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	2120      	movs	r1, #32
 80084fc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008504:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008508:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800850c:	f022 0201 	bic.w	r2, r2, #1
 8008510:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008512:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008516:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800851a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800851e:	e747      	b.n	80083b0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008520:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008522:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008526:	b292      	uxth	r2, r2
 8008528:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	9000      	str	r0, [sp, #0]
 800852e:	e7d3      	b.n	80084d8 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8008530:	2002      	movs	r0, #2
 8008532:	e73d      	b.n	80083b0 <HAL_I2C_Mem_Read+0x30>
 8008534:	80002000 	.word	0x80002000
 8008538:	80002400 	.word	0x80002400

0800853c <HAL_I2C_GetState>:
  return hi2c->State;
 800853c:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008540:	4770      	bx	lr

08008542 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008542:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8008544:	4770      	bx	lr

08008546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008546:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008548:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 800854c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800854e:	2a20      	cmp	r2, #32
 8008550:	b2d4      	uxtb	r4, r2
 8008552:	d11c      	bne.n	800858e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008554:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008558:	2a01      	cmp	r2, #1
 800855a:	d018      	beq.n	800858e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800855c:	2224      	movs	r2, #36	@ 0x24
 800855e:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008562:	6802      	ldr	r2, [r0, #0]
 8008564:	6810      	ldr	r0, [r2, #0]
 8008566:	f020 0001 	bic.w	r0, r0, #1
 800856a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800856c:	6810      	ldr	r0, [r2, #0]
 800856e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8008572:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008574:	6810      	ldr	r0, [r2, #0]
 8008576:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008578:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800857a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800857c:	6811      	ldr	r1, [r2, #0]
 800857e:	f041 0101 	orr.w	r1, r1, #1
 8008582:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008584:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008588:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800858c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800858e:	2002      	movs	r0, #2
 8008590:	e7fc      	b.n	800858c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08008592 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008592:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008594:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008598:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800859a:	2a20      	cmp	r2, #32
 800859c:	b2d4      	uxtb	r4, r2
 800859e:	d11b      	bne.n	80085d8 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085a0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80085a4:	2a01      	cmp	r2, #1
 80085a6:	d017      	beq.n	80085d8 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085a8:	2224      	movs	r2, #36	@ 0x24
 80085aa:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085ae:	6802      	ldr	r2, [r0, #0]
 80085b0:	6810      	ldr	r0, [r2, #0]
 80085b2:	f020 0001 	bic.w	r0, r0, #1
 80085b6:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085b8:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085ba:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085be:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c2:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80085c4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80085c6:	6811      	ldr	r1, [r2, #0]
 80085c8:	f041 0101 	orr.w	r1, r1, #1
 80085cc:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80085ce:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80085d2:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80085d6:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80085d8:	2002      	movs	r0, #2
 80085da:	e7fc      	b.n	80085d6 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080085dc <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80085dc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80085de:	2401      	movs	r4, #1
 80085e0:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 80085e2:	2500      	movs	r5, #0
 80085e4:	194e      	adds	r6, r1, r5
 80085e6:	443d      	add	r5, r7
 80085e8:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 80085ea:	42be      	cmp	r6, r7
 80085ec:	d112      	bne.n	8008614 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 80085ee:	2c10      	cmp	r4, #16
 80085f0:	d108      	bne.n	8008604 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80085f2:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80085f4:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 80085f6:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 80085f8:	601d      	str	r5, [r3, #0]
  p = 0;
 80085fa:	4623      	mov	r3, r4
  si = Huffsize[0];
 80085fc:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 80085fe:	5cc8      	ldrb	r0, [r1, r3]
 8008600:	b9d8      	cbnz	r0, 800863a <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8008602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8008604:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8008606:	3401      	adds	r4, #1
 8008608:	197e      	adds	r6, r7, r5
 800860a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800860e:	d9e9      	bls.n	80085e4 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8008610:	2001      	movs	r0, #1
 8008612:	e7f6      	b.n	8008602 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8008614:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8008618:	e7e7      	b.n	80085ea <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800861a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 800861e:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8008620:	5cc8      	ldrb	r0, [r1, r3]
 8008622:	19dc      	adds	r4, r3, r7
 8008624:	42a8      	cmp	r0, r5
 8008626:	d0f8      	beq.n	800861a <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8008628:	2d1f      	cmp	r5, #31
 800862a:	d8f1      	bhi.n	8008610 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800862c:	fa06 f005 	lsl.w	r0, r6, r5
 8008630:	42a0      	cmp	r0, r4
 8008632:	d9ed      	bls.n	8008610 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8008634:	0064      	lsls	r4, r4, #1
    si++;
 8008636:	3501      	adds	r5, #1
 8008638:	e7e1      	b.n	80085fe <JPEG_Bits_To_SizeCodes+0x22>
 800863a:	1ae7      	subs	r7, r4, r3
 800863c:	e7f0      	b.n	8008620 <JPEG_Bits_To_SizeCodes+0x44>

0800863e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800863e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008640:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8008644:	460d      	mov	r5, r1
 8008646:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008648:	ab01      	add	r3, sp, #4
 800864a:	aa43      	add	r2, sp, #268	@ 0x10c
 800864c:	a902      	add	r1, sp, #8
 800864e:	f7ff ffc5 	bl	80085dc <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008652:	b940      	cbnz	r0, 8008666 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>
 8008654:	9e01      	ldr	r6, [sp, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	460a      	mov	r2, r1
 800865a:	f104 010f 	add.w	r1, r4, #15
 800865e:	360f      	adds	r6, #15
 8008660:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8008662:	42a1      	cmp	r1, r4
 8008664:	d102      	bne.n	800866c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008666:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800866a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800866c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008670:	2e0b      	cmp	r6, #11
 8008672:	d80a      	bhi.n	800868a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008674:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8008678:	f853 cb04 	ldr.w	ip, [r3], #4
 800867c:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008680:	f812 7b01 	ldrb.w	r7, [r2], #1
 8008684:	3f01      	subs	r7, #1
 8008686:	55af      	strb	r7, [r5, r6]
      k++;
 8008688:	e7eb      	b.n	8008662 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x24>
      return HAL_ERROR; /* Huffman Table overflow error*/
 800868a:	2001      	movs	r0, #1
 800868c:	e7eb      	b.n	8008666 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x28>

0800868e <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800868e:	4603      	mov	r3, r0
 8008690:	4608      	mov	r0, r1
 8008692:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008694:	681c      	ldr	r4, [r3, #0]
{
 8008696:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8008698:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 800869c:	429a      	cmp	r2, r3
 800869e:	d125      	bne.n	80086ec <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80086a0:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80086a4:	a901      	add	r1, sp, #4
 80086a6:	f7ff ffca 	bl	800863e <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80086aa:	b9e8      	cbnz	r0, 80086e8 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80086ac:	aa01      	add	r2, sp, #4
 80086ae:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80086b2:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80086b6:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80086b8:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80086ba:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80086bc:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80086be:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80086c0:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80086c4:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80086c6:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80086c8:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80086cc:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80086d0:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80086d2:	7b13      	ldrb	r3, [r2, #12]
 80086d4:	021b      	lsls	r3, r3, #8
 80086d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80086da:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80086dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80086e0:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80086e4:	42b4      	cmp	r4, r6
 80086e6:	d1e9      	bne.n	80086bc <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80086e8:	b011      	add	sp, #68	@ 0x44
 80086ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80086ec:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d102      	bne.n	80086fa <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80086f4:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 80086f8:	e7d4      	b.n	80086a4 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 80086fa:	2001      	movs	r0, #1
 80086fc:	e7f4      	b.n	80086e8 <JPEG_Set_HuffDC_Mem+0x5a>

080086fe <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80086fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008702:	6804      	ldr	r4, [r0, #0]
{
 8008704:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8008708:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800870a:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 800870e:	429a      	cmp	r2, r3
 8008710:	d149      	bne.n	80087a6 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008712:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008716:	466b      	mov	r3, sp
 8008718:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800871c:	a901      	add	r1, sp, #4
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff ff5c 	bl	80085dc <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8008724:	2800      	cmp	r0, #0
 8008726:	d13a      	bne.n	800879e <JPEG_Set_HuffAC_Mem+0xa0>
 8008728:	9b00      	ldr	r3, [sp, #0]
 800872a:	460d      	mov	r5, r1
 800872c:	f106 0c0f 	add.w	ip, r6, #15
 8008730:	4617      	mov	r7, r2
 8008732:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8008734:	f04f 0e0a 	mov.w	lr, #10
 8008738:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800873a:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800873c:	4561      	cmp	r1, ip
 800873e:	d139      	bne.n	80087b4 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008740:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008744:	a942      	add	r1, sp, #264	@ 0x108
 8008746:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800874a:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800874c:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 800874e:	6063      	str	r3, [r4, #4]
 8008750:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8008752:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8008756:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800875a:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800875c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008760:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8008762:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008766:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008768:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800876c:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800876e:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8008772:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008774:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8008778:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800877a:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800877c:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008780:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8008784:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008786:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008790:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008792:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008796:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800879a:	42b4      	cmp	r4, r6
 800879c:	d1e7      	bne.n	800876e <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800879e:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80087a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80087a6:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d10f      	bne.n	80087ce <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80087ae:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80087b2:	e7b0      	b.n	8008716 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80087b4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80087b8:	b15b      	cbz	r3, 80087d2 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80087ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80087bc:	d015      	beq.n	80087ea <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80087be:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80087c0:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80087c4:	3b01      	subs	r3, #1
 80087c6:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80087ca:	2ba1      	cmp	r3, #161	@ 0xa1
 80087cc:	d902      	bls.n	80087d4 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7e5      	b.n	800879e <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80087d2:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80087d4:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80087d8:	f857 8b04 	ldr.w	r8, [r7], #4
 80087dc:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80087e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80087e4:	3a01      	subs	r2, #1
 80087e6:	54f2      	strb	r2, [r6, r3]
      k++;
 80087e8:	e7a8      	b.n	800873c <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 80087ea:	23a1      	movs	r3, #161	@ 0xa1
 80087ec:	e7f2      	b.n	80087d4 <JPEG_Set_HuffAC_Mem+0xd6>

080087ee <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80087ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80087f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80087f4:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087f6:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80087f8:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80087fa:	f002 0203 	and.w	r2, r2, #3
 80087fe:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	bf0c      	ite	eq
 8008804:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8008808:	f022 0208 	bicne.w	r2, r2, #8
 800880c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008818:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800881c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800881e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008820:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008824:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008828:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800882c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800882e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008830:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008834:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	f042 0201 	orr.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800883e:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008840:	f002 020c 	and.w	r2, r2, #12
 8008844:	2a08      	cmp	r2, #8
 8008846:	d104      	bne.n	8008852 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8008848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800884a:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800884e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8008850:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008852:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008854:	f002 020c 	and.w	r2, r2, #12
 8008858:	2a0c      	cmp	r2, #12
 800885a:	d1f9      	bne.n	8008850 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800885c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800885e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008862:	e7f4      	b.n	800884e <JPEG_Init_Process+0x60>

08008864 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8008864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008866:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8008868:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800886a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800886c:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800886e:	42aa      	cmp	r2, r5
 8008870:	d313      	bcc.n	800889a <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008872:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008874:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008876:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008878:	428b      	cmp	r3, r1
 800887a:	d30e      	bcc.n	800889a <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800887c:	4f18      	ldr	r7, [pc, #96]	@ (80088e0 <JPEG_DMA_StartProcess+0x7c>)
 800887e:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008880:	4f18      	ldr	r7, [pc, #96]	@ (80088e4 <JPEG_DMA_StartProcess+0x80>)
 8008882:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008884:	4e18      	ldr	r6, [pc, #96]	@ (80088e8 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008886:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008888:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800888a:	4e18      	ldr	r6, [pc, #96]	@ (80088ec <JPEG_DMA_StartProcess+0x88>)
 800888c:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800888e:	b105      	cbz	r5, 8008892 <JPEG_DMA_StartProcess+0x2e>
 8008890:	b931      	cbnz	r1, 80088a0 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008892:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008894:	f043 0304 	orr.w	r3, r3, #4
 8008898:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 800889a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800889c:	b003      	add	sp, #12
 800889e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80088a0:	fbb2 f6f5 	udiv	r6, r2, r5
 80088a4:	fb05 2516 	mls	r5, r5, r6, r2
 80088a8:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80088aa:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80088ac:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80088ae:	fbb3 f2f1 	udiv	r2, r3, r1
 80088b2:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80088b6:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80088b8:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80088ba:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80088bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80088be:	9500      	str	r5, [sp, #0]
 80088c0:	69e2      	ldr	r2, [r4, #28]
 80088c2:	f001 f810 	bl	80098e6 <HAL_MDMA_Start_IT>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d1e3      	bne.n	8008892 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	9500      	str	r5, [sp, #0]
 80088ce:	3240      	adds	r2, #64	@ 0x40
 80088d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088d2:	69a1      	ldr	r1, [r4, #24]
 80088d4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80088d6:	f001 f806 	bl	80098e6 <HAL_MDMA_Start_IT>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0de      	beq.n	800889c <JPEG_DMA_StartProcess+0x38>
 80088de:	e7d8      	b.n	8008892 <JPEG_DMA_StartProcess+0x2e>
 80088e0:	08008e23 	.word	0x08008e23
 80088e4:	08008d1f 	.word	0x08008d1f
 80088e8:	080092e1 	.word	0x080092e1
 80088ec:	080092d3 	.word	0x080092d3

080088f0 <HAL_JPEG_Init>:
{
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 80088f2:	4605      	mov	r5, r0
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f000 80f2 	beq.w	8008ade <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80088fa:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80088fe:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008902:	b91b      	cbnz	r3, 800890c <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8008904:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8008908:	f7f8 fde2 	bl	80014d0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 800890c:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800890e:	2302      	movs	r3, #2
 8008910:	4a86      	ldr	r2, [pc, #536]	@ (8008b2c <HAL_JPEG_Init+0x23c>)
 8008912:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8008916:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800891a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800891c:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800892e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008930:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008934:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008936:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008938:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800893c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800893e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008944:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008946:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008948:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800894c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800894e:	4b78      	ldr	r3, [pc, #480]	@ (8008b30 <HAL_JPEG_Init+0x240>)
 8008950:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8008952:	4b78      	ldr	r3, [pc, #480]	@ (8008b34 <HAL_JPEG_Init+0x244>)
 8008954:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8008956:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008958:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800895c:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800895e:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008960:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008962:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008964:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008968:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800896a:	4333      	orrs	r3, r6
 800896c:	7c56      	ldrb	r6, [r2, #17]
 800896e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008972:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008976:	4281      	cmp	r1, r0
 8008978:	d1f0      	bne.n	800895c <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800897a:	4b6f      	ldr	r3, [pc, #444]	@ (8008b38 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800897c:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8008980:	4a6e      	ldr	r2, [pc, #440]	@ (8008b3c <HAL_JPEG_Init+0x24c>)
 8008982:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008986:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 800898a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800898e:	4610      	mov	r0, r2
 8008990:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008992:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8008996:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800899a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800899e:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80089a0:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80089a2:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80089a6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80089a8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80089ac:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80089b0:	ea43 030c 	orr.w	r3, r3, ip
 80089b4:	f890 c011 	ldrb.w	ip, [r0, #17]
 80089b8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80089bc:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80089c0:	42be      	cmp	r6, r7
 80089c2:	d1ec      	bne.n	800899e <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80089c4:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80089c8:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 80089cc:	f36f 030f 	bfc	r3, #0, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80089d0:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 80089d4:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 80089d8:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80089dc:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 80089e0:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80089e2:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80089e6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80089e8:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80089ec:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80089f0:	4333      	orrs	r3, r6
 80089f2:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 80089f6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80089fa:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 80089fe:	4281      	cmp	r1, r0
 8008a00:	d1ec      	bne.n	80089dc <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8008a02:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8008a06:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8008a0a:	4a4d      	ldr	r2, [pc, #308]	@ (8008b40 <HAL_JPEG_Init+0x250>)
 8008a0c:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8008a10:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8008a12:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8008a16:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8008a1a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008a1e:	4013      	ands	r3, r2
  *address = value;
 8008a20:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008a24:	2301      	movs	r3, #1
 8008a26:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8008a2a:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8008a2e:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8008a32:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8008a36:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008a3a:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008a3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008a40:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8008a44:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008a48:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008a4a:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8008a4e:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8008a52:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008a56:	4b3b      	ldr	r3, [pc, #236]	@ (8008b44 <HAL_JPEG_Init+0x254>)
 8008a58:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008a5c:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008a60:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8008a64:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008a68:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8008a6e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8008a72:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008a76:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008a78:	4a33      	ldr	r2, [pc, #204]	@ (8008b48 <HAL_JPEG_Init+0x258>)
 8008a7a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008a7e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8008a82:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008a86:	4b31      	ldr	r3, [pc, #196]	@ (8008b4c <HAL_JPEG_Init+0x25c>)
 8008a88:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8008a8c:	4b30      	ldr	r3, [pc, #192]	@ (8008b50 <HAL_JPEG_Init+0x260>)
 8008a8e:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8008a92:	4b30      	ldr	r3, [pc, #192]	@ (8008b54 <HAL_JPEG_Init+0x264>)
 8008a94:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8008a98:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008a9c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8008a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008aa2:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008aa6:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8008aaa:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008aac:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008ab0:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008ab2:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8008ab6:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008aba:	4333      	orrs	r3, r6
 8008abc:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8008ac0:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008ac4:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008ac8:	4281      	cmp	r1, r0
 8008aca:	d1ec      	bne.n	8008aa6 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008acc:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8008ad0:	491a      	ldr	r1, [pc, #104]	@ (8008b3c <HAL_JPEG_Init+0x24c>)
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f7ff fe13 	bl	80086fe <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008ad8:	b118      	cbz	r0, 8008ae2 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8008ada:	2301      	movs	r3, #1
 8008adc:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8008ade:	2001      	movs	r0, #1
}
 8008ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8008ae2:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8008ae6:	4918      	ldr	r1, [pc, #96]	@ (8008b48 <HAL_JPEG_Init+0x258>)
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f7ff fe08 	bl	80086fe <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d1f3      	bne.n	8008ada <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8008af2:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8008af6:	490d      	ldr	r1, [pc, #52]	@ (8008b2c <HAL_JPEG_Init+0x23c>)
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7ff fdc8 	bl	800868e <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1eb      	bne.n	8008ada <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8008b02:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8008b06:	4914      	ldr	r1, [pc, #80]	@ (8008b58 <HAL_JPEG_Init+0x268>)
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7ff fdc0 	bl	800868e <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d1e3      	bne.n	8008ada <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8008b12:	6863      	ldr	r3, [r4, #4]
 8008b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b18:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008b1a:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008b1c:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8008b1e:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008b20:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008b24:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8008b26:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8008b28:	e7da      	b.n	8008ae0 <HAL_JPEG_Init+0x1f0>
 8008b2a:	bf00      	nop
 8008b2c:	08026a70 	.word	0x08026a70
 8008b30:	08026870 	.word	0x08026870
 8008b34:	08026830 	.word	0x08026830
 8008b38:	0b0a0908 	.word	0x0b0a0908
 8008b3c:	080269a2 	.word	0x080269a2
 8008b40:	ffff0000 	.word	0xffff0000
 8008b44:	09080706 	.word	0x09080706
 8008b48:	080268f0 	.word	0x080268f0
 8008b4c:	01000404 	.word	0x01000404
 8008b50:	05070403 	.word	0x05070403
 8008b54:	04040201 	.word	0x04040201
 8008b58:	08026a54 	.word	0x08026a54

08008b5c <HAL_JPEG_GetInfo>:
{
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d06f      	beq.n	8008c44 <HAL_JPEG_GetInfo+0xe8>
 8008b64:	2900      	cmp	r1, #0
 8008b66:	d06d      	beq.n	8008c44 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008b68:	6804      	ldr	r4, [r0, #0]
 8008b6a:	6863      	ldr	r3, [r4, #4]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d047      	beq.n	8008c04 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008b74:	6863      	ldr	r3, [r4, #4]
 8008b76:	f013 0303 	ands.w	r3, r3, #3
 8008b7a:	d005      	beq.n	8008b88 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008b7c:	6863      	ldr	r3, [r4, #4]
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d15e      	bne.n	8008c44 <HAL_JPEG_GetInfo+0xe8>
 8008b86:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008b88:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008b8a:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008b8c:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008b90:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008b92:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008b94:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008b96:	68e2      	ldr	r2, [r4, #12]
 8008b98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008b9c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008b9e:	d13c      	bne.n	8008c1a <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008ba0:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008ba2:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008ba4:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008ba8:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008baa:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008bac:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008bae:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008bb2:	d129      	bne.n	8008c08 <HAL_JPEG_GetInfo+0xac>
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	f013 0f0f 	tst.w	r3, #15
 8008bba:	bf0c      	ite	eq
 8008bbc:	2301      	moveq	r3, #1
 8008bbe:	2300      	movne	r3, #0
 8008bc0:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8008bc2:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	3450      	adds	r4, #80	@ 0x50
 8008bc8:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8008c48 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8008bcc:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008bce:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8008bd2:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8008bd6:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8008bda:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8008bde:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8008be0:	fa29 f206 	lsr.w	r2, r9, r6
 8008be4:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8008be6:	2a01      	cmp	r2, #1
 8008be8:	d119      	bne.n	8008c1e <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8008bea:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8008bec:	3608      	adds	r6, #8
 8008bee:	3701      	adds	r7, #1
 8008bf0:	2e20      	cmp	r6, #32
 8008bf2:	d1f5      	bne.n	8008be0 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8008bf4:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8008bf6:	2d40      	cmp	r5, #64	@ 0x40
 8008bf8:	d1ed      	bne.n	8008bd6 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8008bfa:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8008bfc:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8008bfe:	610b      	str	r3, [r1, #16]
}
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	2310      	movs	r3, #16
 8008c06:	e7bf      	b.n	8008b88 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c08:	2d03      	cmp	r5, #3
 8008c0a:	d106      	bne.n	8008c1a <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	f013 0f0f 	tst.w	r3, #15
 8008c12:	bf0c      	ite	eq
 8008c14:	2301      	moveq	r3, #1
 8008c16:	2300      	movne	r3, #0
 8008c18:	e7d3      	b.n	8008bc2 <HAL_JPEG_GetInfo+0x66>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e7d1      	b.n	8008bc2 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008c1e:	fb0e fb02 	mul.w	fp, lr, r2
 8008c22:	f897 a000 	ldrb.w	sl, [r7]
 8008c26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c28:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008c2c:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8008c30:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8008c32:	bf8b      	itete	hi
 8008c34:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008c38:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008c3c:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008c3e:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8008c42:	e7d3      	b.n	8008bec <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8008c44:	2001      	movs	r0, #1
 8008c46:	e7db      	b.n	8008c00 <HAL_JPEG_GetInfo+0xa4>
 8008c48:	080268b0 	.word	0x080268b0

08008c4c <HAL_JPEG_Decode_DMA>:
{
 8008c4c:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008c4e:	4604      	mov	r4, r0
 8008c50:	b348      	cbz	r0, 8008ca6 <HAL_JPEG_Decode_DMA+0x5a>
 8008c52:	b341      	cbz	r1, 8008ca6 <HAL_JPEG_Decode_DMA+0x5a>
 8008c54:	b33b      	cbz	r3, 8008ca6 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8008c56:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8008c5a:	2d01      	cmp	r5, #1
 8008c5c:	d028      	beq.n	8008cb0 <HAL_JPEG_Decode_DMA+0x64>
 8008c5e:	2501      	movs	r5, #1
 8008c60:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008c64:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008c68:	2d01      	cmp	r5, #1
 8008c6a:	d11e      	bne.n	8008caa <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008c6c:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008c6e:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008c70:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008c74:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008c76:	f025 050f 	bic.w	r5, r5, #15
 8008c7a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008c7c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008c7e:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8008c82:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008c86:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8008c88:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8008c8a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8008c8c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8008c8e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8008c90:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8008c92:	f7ff fdac 	bl	80087ee <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008c96:	f7ff fde5 	bl	8008864 <JPEG_DMA_StartProcess>
 8008c9a:	b128      	cbz	r0, 8008ca8 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008c9c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8008c9e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008ca2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008ca6:	2001      	movs	r0, #1
}
 8008ca8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8008caa:	2300      	movs	r3, #0
 8008cac:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8008cb0:	2002      	movs	r0, #2
 8008cb2:	e7f9      	b.n	8008ca8 <HAL_JPEG_Decode_DMA+0x5c>

08008cb4 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008cb4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008cb6:	f003 030c 	and.w	r3, r3, #12
 8008cba:	2b0c      	cmp	r3, #12
 8008cbc:	d10d      	bne.n	8008cda <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008cbe:	07cb      	lsls	r3, r1, #31
 8008cc0:	d503      	bpl.n	8008cca <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008cc2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008cc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008cc8:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008cca:	0789      	lsls	r1, r1, #30
 8008ccc:	d503      	bpl.n	8008cd6 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008cce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008cd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008cd4:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008cda:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008cdc:	f003 030c 	and.w	r3, r3, #12
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d1f8      	bne.n	8008cd6 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008ce4:	f011 0301 	ands.w	r3, r1, #1
 8008ce8:	d004      	beq.n	8008cf4 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008cea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008cec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008cf0:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008cf2:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008cf4:	078a      	lsls	r2, r1, #30
 8008cf6:	d505      	bpl.n	8008d04 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008cf8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008cfa:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008cfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d02:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008d04:	6801      	ldr	r1, [r0, #0]
 8008d06:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008d08:	ea22 0303 	bic.w	r3, r2, r3
 8008d0c:	630b      	str	r3, [r1, #48]	@ 0x30
 8008d0e:	e7e2      	b.n	8008cd6 <HAL_JPEG_Pause+0x22>

08008d10 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8008d10:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8008d12:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8008d14:	4770      	bx	lr

08008d16 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008d16:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008d18:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8008d1a:	4770      	bx	lr

08008d1c <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008d1c:	4770      	bx	lr

08008d1e <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008d1e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8008d20:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008d22:	6803      	ldr	r3, [r0, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	f022 0201 	bic.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d2e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008d3a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008d3c:	f043 0304 	orr.w	r3, r3, #4
 8008d40:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8008d42:	f7f9 ff4d 	bl	8002be0 <HAL_JPEG_ErrorCallback>
}
 8008d46:	bd08      	pop	{r3, pc}

08008d48 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008d48:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008d50:	b922      	cbnz	r2, 8008d5c <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008d52:	2101      	movs	r1, #1
 8008d54:	f7ff ffae 	bl	8008cb4 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008d58:	2200      	movs	r2, #0
 8008d5a:	e004      	b.n	8008d66 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008d5c:	6a03      	ldr	r3, [r0, #32]
 8008d5e:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008d60:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008d62:	d924      	bls.n	8008dae <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008d64:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008d66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008d68:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008d6c:	d11e      	bne.n	8008dac <JPEG_ReadInputData+0x64>
 8008d6e:	b1ea      	cbz	r2, 8008dac <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008d70:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008d74:	69a0      	ldr	r0, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008d76:	ea4f 0692 	mov.w	r6, r2, lsr #2
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008d7a:	6821      	ldr	r1, [r4, #0]
    if (nb_words >= nbRequestWords)
 8008d7c:	d826      	bhi.n	8008dcc <JPEG_ReadInputData+0x84>
        input_count = hjpeg->JpegInCount;
 8008d7e:	6a27      	ldr	r7, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008d80:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008d82:	19c6      	adds	r6, r0, r7
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008d84:	5dc7      	ldrb	r7, [r0, r7]
      for (index = 0; index < nbRequestWords; index++)
 8008d86:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008d88:	78b2      	ldrb	r2, [r6, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008d8a:	f896 c001 	ldrb.w	ip, [r6, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008d8e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008d92:	78f6      	ldrb	r6, [r6, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008d94:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008d98:	ea42 0207 	orr.w	r2, r2, r7
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008d9c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008da0:	640a      	str	r2, [r1, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008da2:	6a22      	ldr	r2, [r4, #32]
 8008da4:	f102 0204 	add.w	r2, r2, #4
 8008da8:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008daa:	d1e8      	bne.n	8008d7e <JPEG_ReadInputData+0x36>
}
 8008dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d1d2      	bne.n	8008d58 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008db2:	6a01      	ldr	r1, [r0, #32]
 8008db4:	f7f9 fea6 	bl	8002b04 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008db8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008dba:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008dbc:	bf84      	itt	hi
 8008dbe:	f023 0303 	bichi.w	r3, r3, #3
 8008dc2:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008dc4:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008dc6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008dc8:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008dca:	e7cc      	b.n	8008d66 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008dcc:	2a03      	cmp	r2, #3
 8008dce:	d917      	bls.n	8008e00 <JPEG_ReadInputData+0xb8>
          input_count = hjpeg->JpegInCount;
 8008dd0:	6a27      	ldr	r7, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008dd2:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008dd4:	19c5      	adds	r5, r0, r7
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008dd6:	5dc7      	ldrb	r7, [r0, r7]
        for (index = 0; index < nb_words; index++)
 8008dd8:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008dda:	78aa      	ldrb	r2, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ddc:	f895 c001 	ldrb.w	ip, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008de0:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008de4:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008de6:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008dea:	ea42 0207 	orr.w	r2, r2, r7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008dee:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008df2:	640a      	str	r2, [r1, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008df4:	6a22      	ldr	r2, [r4, #32]
 8008df6:	f102 0204 	add.w	r2, r2, #4
 8008dfa:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008dfc:	d8e8      	bhi.n	8008dd0 <JPEG_ReadInputData+0x88>
 8008dfe:	e7d5      	b.n	8008dac <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8008e00:	461d      	mov	r5, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008e02:	6a26      	ldr	r6, [r4, #32]
 8008e04:	00ef      	lsls	r7, r5, #3
        for (index = 0; index < nb_bytes; index++)
 8008e06:	3501      	adds	r5, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008e08:	5d86      	ldrb	r6, [r0, r6]
        for (index = 0; index < nb_bytes; index++)
 8008e0a:	42aa      	cmp	r2, r5
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008e0c:	fa06 f607 	lsl.w	r6, r6, r7
 8008e10:	ea43 0306 	orr.w	r3, r3, r6
          hjpeg->JpegInCount++;
 8008e14:	6a26      	ldr	r6, [r4, #32]
 8008e16:	f106 0601 	add.w	r6, r6, #1
 8008e1a:	6226      	str	r6, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008e1c:	d1f1      	bne.n	8008e02 <JPEG_ReadInputData+0xba>
        hjpeg->Instance->DIR = dataword;
 8008e1e:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8008e20:	e7c4      	b.n	8008dac <JPEG_ReadInputData+0x64>

08008e22 <JPEG_MDMAInCpltCallback>:
{
 8008e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008e24:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008e2a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008e2e:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008e30:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008e36:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	0c1b      	lsrs	r3, r3, #16
 8008e3e:	2b0c      	cmp	r3, #12
 8008e40:	d11a      	bne.n	8008e78 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008e42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008e44:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008e46:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008e48:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008e4a:	695a      	ldr	r2, [r3, #20]
 8008e4c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e4e:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008e52:	1a9b      	subs	r3, r3, r2
 8008e54:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008e56:	6a21      	ldr	r1, [r4, #32]
 8008e58:	f7f9 fe54 	bl	8002b04 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008e5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e5e:	42ab      	cmp	r3, r5
 8008e60:	d327      	bcc.n	8008eb2 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008e62:	b95d      	cbnz	r5, 8008e7c <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008e64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008e66:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008e68:	f043 0304 	orr.w	r3, r3, #4
 8008e6c:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008e6e:	2306      	movs	r3, #6
 8008e70:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008e74:	f7f9 feb4 	bl	8002be0 <HAL_JPEG_ErrorCallback>
}
 8008e78:	b003      	add	sp, #12
 8008e7a:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008e7c:	fbb3 f2f5 	udiv	r2, r3, r5
 8008e80:	fb05 3212 	mls	r2, r5, r2, r3
 8008e84:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008e86:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008e88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008e8a:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008e8c:	04db      	lsls	r3, r3, #19
 8008e8e:	d40a      	bmi.n	8008ea6 <JPEG_MDMAInCpltCallback+0x84>
 8008e90:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e92:	b143      	cbz	r3, 8008ea6 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008e94:	2101      	movs	r1, #1
 8008e96:	3240      	adds	r2, #64	@ 0x40
 8008e98:	9100      	str	r1, [sp, #0]
 8008e9a:	69a1      	ldr	r1, [r4, #24]
 8008e9c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008e9e:	f000 fd22 	bl	80098e6 <HAL_MDMA_Start_IT>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d1de      	bne.n	8008e64 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008eaa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8008eb0:	e7e2      	b.n	8008e78 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0e8      	beq.n	8008e88 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8008eb6:	079a      	lsls	r2, r3, #30
 8008eb8:	d0e6      	beq.n	8008e88 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	e7e1      	b.n	8008e86 <JPEG_MDMAInCpltCallback+0x64>

08008ec2 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008ec2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008ec6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008eca:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8008ecc:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d32a      	bcc.n	8008f28 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008ed2:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008ed4:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008ed6:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008ed8:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8008eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008edc:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008ede:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008ee0:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008ee2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008ee4:	69e0      	ldr	r0, [r4, #28]
 8008ee6:	4428      	add	r0, r5
 8008ee8:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008eec:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008eee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008ef0:	69e0      	ldr	r0, [r4, #28]
 8008ef2:	4428      	add	r0, r5
 8008ef4:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008ef8:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008efc:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008efe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008f00:	69e0      	ldr	r0, [r4, #28]
 8008f02:	4428      	add	r0, r5
 8008f04:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008f06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f08:	f103 0304 	add.w	r3, r3, #4
 8008f0c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8008f0e:	d1e1      	bne.n	8008ed4 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008f10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f12:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d106      	bne.n	8008f26 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008f1a:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f7f9 fe0f 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008f28:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d9fb      	bls.n	8008f26 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008f2e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008f30:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008f32:	1a9b      	subs	r3, r3, r2
 8008f34:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008f36:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008f38:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008f3a:	d105      	bne.n	8008f48 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008f3c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008f3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f40:	429f      	cmp	r7, r3
 8008f42:	d119      	bne.n	8008f78 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f44:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008f46:	e7e9      	b.n	8008f1c <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008f48:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8008f4a:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008f4e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008f50:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008f52:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008f54:	69e1      	ldr	r1, [r4, #28]
 8008f56:	4429      	add	r1, r5
 8008f58:	0a1d      	lsrs	r5, r3, #8
 8008f5a:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008f5c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008f5e:	69e1      	ldr	r1, [r4, #28]
 8008f60:	4429      	add	r1, r5
 8008f62:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008f64:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008f66:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008f68:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008f6a:	69e1      	ldr	r1, [r4, #28]
 8008f6c:	4429      	add	r1, r5
 8008f6e:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008f70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f72:	3304      	adds	r3, #4
 8008f74:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008f76:	e7de      	b.n	8008f36 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008f78:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008f7a:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008f7c:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008f7e:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008f80:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008f82:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008f84:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8008f86:	d114      	bne.n	8008fb2 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f88:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f7f9 fdd8 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008f94:	1d2b      	adds	r3, r5, #4
 8008f96:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d8c4      	bhi.n	8008f26 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008f9c:	00da      	lsls	r2, r3, #3
 8008f9e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008fa0:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008fa2:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008fa4:	fa26 f202 	lsr.w	r2, r6, r2
 8008fa8:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8008faa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008fac:	3201      	adds	r2, #1
 8008fae:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008fb0:	e7f2      	b.n	8008f98 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008fb2:	f002 0303 	and.w	r3, r2, #3
 8008fb6:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008fba:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	fa26 f303 	lsr.w	r3, r6, r3
 8008fc2:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8008fc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008fc8:	3301      	adds	r3, #1
 8008fca:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008fcc:	e7d9      	b.n	8008f82 <JPEG_StoreOutputData+0xc0>

08008fce <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008fce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	2b02      	cmp	r3, #2
{
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008fda:	d114      	bne.n	8009006 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008fdc:	6803      	ldr	r3, [r0, #0]
 8008fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe0:	065b      	lsls	r3, r3, #25
 8008fe2:	d510      	bpl.n	8009006 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008fe4:	1d01      	adds	r1, r0, #4
 8008fe6:	f7ff fdb9 	bl	8008b5c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008fea:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008fec:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008fee:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008ff0:	f7f9 fd52 	bl	8002a98 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ffc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009000:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009004:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009006:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009008:	04d9      	lsls	r1, r3, #19
 800900a:	d407      	bmi.n	800901c <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009010:	0792      	lsls	r2, r2, #30
 8009012:	d544      	bpl.n	800909e <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009014:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff fe96 	bl	8008d48 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800901c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800901e:	0499      	lsls	r1, r3, #18
 8009020:	d407      	bmi.n	8009032 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009026:	0712      	lsls	r2, r2, #28
 8009028:	d53e      	bpl.n	80090a8 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800902a:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800902c:	4620      	mov	r0, r4
 800902e:	f7ff ff48 	bl	8008ec2 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009036:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800903a:	2a20      	cmp	r2, #32
 800903c:	d13c      	bne.n	80090b8 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	f022 0201 	bic.w	r2, r2, #1
 8009044:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009046:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009048:	f002 020c 	and.w	r2, r2, #12
 800904c:	2a08      	cmp	r2, #8
 800904e:	d103      	bne.n	8009058 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009052:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009056:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800905a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800905e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009060:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009062:	b133      	cbz	r3, 8009072 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009064:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009066:	4620      	mov	r0, r4
 8009068:	69e1      	ldr	r1, [r4, #28]
 800906a:	f7f9 fd69 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009072:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009074:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009076:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009078:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800907c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009080:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009082:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009084:	f04f 0200 	mov.w	r2, #0
 8009088:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800908c:	f04f 0201 	mov.w	r2, #1
 8009090:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009094:	d10d      	bne.n	80090b2 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009096:	f7f9 fda5 	bl	8002be4 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800909a:	2001      	movs	r0, #1
}
 800909c:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800909e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a0:	0758      	lsls	r0, r3, #29
 80090a2:	d5bb      	bpl.n	800901c <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80090a4:	2101      	movs	r1, #1
 80090a6:	e7b6      	b.n	8009016 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80090a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090aa:	06db      	lsls	r3, r3, #27
 80090ac:	d5c1      	bpl.n	8009032 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80090ae:	2101      	movs	r1, #1
 80090b0:	e7bc      	b.n	800902c <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80090b2:	f7ff fe33 	bl	8008d1c <HAL_JPEG_EncodeCpltCallback>
 80090b6:	e7f0      	b.n	800909a <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 80090b8:	2000      	movs	r0, #0
 80090ba:	e7ef      	b.n	800909c <JPEG_Process+0xce>

080090bc <JPEG_DMA_PollResidualData>:
{
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	4604      	mov	r4, r0
 80090c0:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80090c2:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80090c4:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80090c6:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80090ca:	d122      	bne.n	8009112 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80090cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ce:	06d0      	lsls	r0, r2, #27
 80090d0:	d51f      	bpl.n	8009112 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80090d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80090d4:	69e1      	ldr	r1, [r4, #28]
 80090d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80090d8:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80090da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090dc:	69e2      	ldr	r2, [r4, #28]
 80090de:	440a      	add	r2, r1
 80090e0:	0a19      	lsrs	r1, r3, #8
 80090e2:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80090e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090e6:	69e2      	ldr	r2, [r4, #28]
 80090e8:	440a      	add	r2, r1
 80090ea:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80090ec:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80090ee:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80090f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090f2:	69e2      	ldr	r2, [r4, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80090f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80090fa:	3304      	adds	r3, #4
 80090fc:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80090fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009100:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009102:	429a      	cmp	r2, r3
 8009104:	d105      	bne.n	8009112 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009106:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009108:	4620      	mov	r0, r4
 800910a:	69e1      	ldr	r1, [r4, #28]
 800910c:	f7f9 fd18 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8009110:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009112:	3e01      	subs	r6, #1
 8009114:	d1d5      	bne.n	80090c2 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009116:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009118:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800911a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800911c:	06c9      	lsls	r1, r1, #27
 800911e:	d501      	bpl.n	8009124 <JPEG_DMA_PollResidualData+0x68>
 8009120:	0492      	lsls	r2, r2, #18
 8009122:	d420      	bmi.n	8009166 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	f022 0201 	bic.w	r2, r2, #1
 800912a:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 800912c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800912e:	b133      	cbz	r3, 800913e <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009130:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009132:	4620      	mov	r0, r4
 8009134:	69e1      	ldr	r1, [r4, #28]
 8009136:	f7f9 fd03 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800913e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009140:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009142:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009144:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009148:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800914c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800914e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009158:	f04f 0201 	mov.w	r2, #1
 800915c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009160:	d102      	bne.n	8009168 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009162:	f7f9 fd3f 	bl	8002be4 <HAL_JPEG_DecodeCpltCallback>
}
 8009166:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009168:	f7ff fdd8 	bl	8008d1c <HAL_JPEG_EncodeCpltCallback>
}
 800916c:	e7fb      	b.n	8009166 <JPEG_DMA_PollResidualData+0xaa>

0800916e <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800916e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009170:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8009174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009176:	4604      	mov	r4, r0
 8009178:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800917a:	d014      	beq.n	80091a6 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800917c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800917e:	f003 030c 	and.w	r3, r3, #12
 8009182:	2b0c      	cmp	r3, #12
 8009184:	d146      	bne.n	8009214 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009186:	07cb      	lsls	r3, r1, #31
 8009188:	d520      	bpl.n	80091cc <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800918a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800918c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009190:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009192:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009194:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8009196:	b941      	cbnz	r1, 80091aa <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009198:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800919a:	f043 0304 	orr.w	r3, r3, #4
 800919e:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80091a0:	2306      	movs	r3, #6
 80091a2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80091a6:	2001      	movs	r0, #1
 80091a8:	e01d      	b.n	80091e6 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80091aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80091ac:	fbb3 f2f1 	udiv	r2, r3, r1
 80091b0:	fb01 3212 	mls	r2, r1, r2, r3
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 80091b8:	b143      	cbz	r3, 80091cc <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80091ba:	6822      	ldr	r2, [r4, #0]
 80091bc:	2101      	movs	r1, #1
 80091be:	3240      	adds	r2, #64	@ 0x40
 80091c0:	9100      	str	r1, [sp, #0]
 80091c2:	69a1      	ldr	r1, [r4, #24]
 80091c4:	f000 fb8f 	bl	80098e6 <HAL_MDMA_Start_IT>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d1e5      	bne.n	8009198 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80091cc:	07a8      	lsls	r0, r5, #30
 80091ce:	d509      	bpl.n	80091e4 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80091d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80091d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091d6:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80091d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80091da:	0419      	lsls	r1, r3, #16
 80091dc:	d505      	bpl.n	80091ea <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff ff6c 	bl	80090bc <JPEG_DMA_PollResidualData>
  return HAL_OK;
 80091e4:	2000      	movs	r0, #0
}
 80091e6:	b003      	add	sp, #12
 80091e8:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80091ea:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80091ec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 80091ee:	2900      	cmp	r1, #0
 80091f0:	d0d2      	beq.n	8009198 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80091f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80091f4:	fbb3 f2f1 	udiv	r2, r3, r1
 80091f8:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80091fc:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80091fe:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009200:	2201      	movs	r2, #1
 8009202:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009204:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009206:	9200      	str	r2, [sp, #0]
 8009208:	69e2      	ldr	r2, [r4, #28]
 800920a:	f000 fb6c 	bl	80098e6 <HAL_MDMA_Start_IT>
 800920e:	2800      	cmp	r0, #0
 8009210:	d0e8      	beq.n	80091e4 <HAL_JPEG_Resume+0x76>
 8009212:	e7c1      	b.n	8009198 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009214:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009216:	f003 030c 	and.w	r3, r3, #12
 800921a:	2b08      	cmp	r3, #8
 800921c:	d1e2      	bne.n	80091e4 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800921e:	f011 0301 	ands.w	r3, r1, #1
 8009222:	d004      	beq.n	800922e <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009224:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800922a:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800922c:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800922e:	07aa      	lsls	r2, r5, #30
 8009230:	d505      	bpl.n	800923e <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009232:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009234:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009238:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800923c:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800923e:	6821      	ldr	r1, [r4, #0]
 8009240:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009242:	4313      	orrs	r3, r2
 8009244:	630b      	str	r3, [r1, #48]	@ 0x30
 8009246:	e7cd      	b.n	80091e4 <HAL_JPEG_Resume+0x76>

08009248 <JPEG_DMA_EndProcess>:
{
 8009248:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800924a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800924c:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800924e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800925c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800925e:	429a      	cmp	r2, r3
 8009260:	d105      	bne.n	800926e <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009262:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009264:	69c1      	ldr	r1, [r0, #28]
 8009266:	f7f9 fc6b 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800926a:	2300      	movs	r3, #0
 800926c:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8009272:	f015 0510 	ands.w	r5, r5, #16
 8009276:	d124      	bne.n	80092c2 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8009278:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800927a:	b12b      	cbz	r3, 8009288 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800927c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800927e:	4620      	mov	r0, r4
 8009280:	69e1      	ldr	r1, [r4, #28]
 8009282:	f7f9 fc5d 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009286:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009288:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800928a:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800928c:	6813      	ldr	r3, [r2, #0]
 800928e:	f023 0301 	bic.w	r3, r3, #1
 8009292:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8009294:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009296:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009298:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800929c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80092a0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80092a2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80092a4:	f04f 0200 	mov.w	r2, #0
 80092a8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80092ac:	f04f 0201 	mov.w	r2, #1
 80092b0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80092b4:	d102      	bne.n	80092bc <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80092b6:	f7f9 fc95 	bl	8002be4 <HAL_JPEG_DecodeCpltCallback>
}
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80092bc:	f7ff fd2e 	bl	8008d1c <HAL_JPEG_EncodeCpltCallback>
 80092c0:	e7fb      	b.n	80092ba <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80092c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80092c4:	049b      	lsls	r3, r3, #18
 80092c6:	d4f8      	bmi.n	80092ba <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 80092c8:	4620      	mov	r0, r4
}
 80092ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80092ce:	f7ff bef5 	b.w	80090bc <JPEG_DMA_PollResidualData>

080092d2 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80092d2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80092d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80092d6:	041b      	lsls	r3, r3, #16
 80092d8:	d501      	bpl.n	80092de <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 80092da:	f7ff bfb5 	b.w	8009248 <JPEG_DMA_EndProcess>
}
 80092de:	4770      	bx	lr

080092e0 <JPEG_MDMAOutCpltCallback>:
{
 80092e0:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80092e2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092e8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80092ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80092ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092f0:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80092f4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80092f8:	0412      	lsls	r2, r2, #16
 80092fa:	0c12      	lsrs	r2, r2, #16
 80092fc:	2a0c      	cmp	r2, #12
 80092fe:	d125      	bne.n	800934c <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8009300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009302:	069a      	lsls	r2, r3, #26
 8009304:	d424      	bmi.n	8009350 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009306:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009308:	4620      	mov	r0, r4
 800930a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800930c:	695a      	ldr	r2, [r3, #20]
 800930e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009310:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009318:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800931a:	f7f9 fc11 	bl	8002b40 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800931e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009320:	049b      	lsls	r3, r3, #18
 8009322:	d415      	bmi.n	8009350 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	2301      	movs	r3, #1
 8009328:	3144      	adds	r1, #68	@ 0x44
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800932e:	69e2      	ldr	r2, [r4, #28]
 8009330:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009332:	f000 fad8 	bl	80098e6 <HAL_MDMA_Start_IT>
 8009336:	b158      	cbz	r0, 8009350 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009338:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800933a:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800933c:	f043 0304 	orr.w	r3, r3, #4
 8009340:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009342:	2306      	movs	r3, #6
 8009344:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009348:	f7f9 fc4a 	bl	8002be0 <HAL_JPEG_ErrorCallback>
}
 800934c:	b002      	add	sp, #8
 800934e:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009354:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009358:	6313      	str	r3, [r2, #48]	@ 0x30
 800935a:	e7f7      	b.n	800934c <JPEG_MDMAOutCpltCallback+0x6c>

0800935c <HAL_JPEG_IRQHandler>:
{
 800935c:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800935e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8009362:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009364:	3b03      	subs	r3, #3
 8009366:	2b01      	cmp	r3, #1
 8009368:	d850      	bhi.n	800940c <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800936a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800936c:	f003 030c 	and.w	r3, r3, #12
 8009370:	2b08      	cmp	r3, #8
 8009372:	d103      	bne.n	800937c <HAL_JPEG_IRQHandler+0x20>
}
 8009374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009378:	f7ff be29 	b.w	8008fce <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800937c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800937e:	f003 030c 	and.w	r3, r3, #12
 8009382:	2b0c      	cmp	r3, #12
 8009384:	d142      	bne.n	800940c <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009386:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d114      	bne.n	80093ba <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009390:	6803      	ldr	r3, [r0, #0]
 8009392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009394:	0659      	lsls	r1, r3, #25
 8009396:	d510      	bpl.n	80093ba <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009398:	1d01      	adds	r1, r0, #4
 800939a:	f7ff fbdf 	bl	8008b5c <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800939e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80093a0:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80093a2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80093a4:	f7f9 fb78 	bl	8002a98 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093b0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80093b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093b8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093be:	0692      	lsls	r2, r2, #26
 80093c0:	d524      	bpl.n	800940c <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80093c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80093c4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80093c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093ca:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	f022 0201 	bic.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80093d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093d6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80093da:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80093dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80093e2:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80093e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d101      	bne.n	80093f0 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80093ec:	f000 fac4 	bl	8009978 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80093f0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80093f2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d103      	bne.n	8009402 <HAL_JPEG_IRQHandler+0xa6>
}
 80093fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80093fe:	f000 babb 	b.w	8009978 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8009402:	4620      	mov	r0, r4
}
 8009404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8009408:	f7ff bf1e 	b.w	8009248 <JPEG_DMA_EndProcess>
}
 800940c:	bd10      	pop	{r4, pc}
	...

08009410 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009410:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009412:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009414:	3284      	adds	r2, #132	@ 0x84
 8009416:	1883      	adds	r3, r0, r2
{
 8009418:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800941a:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800941c:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800941e:	684c      	ldr	r4, [r1, #4]
 8009420:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009424:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009428:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800942a:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800942c:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800942e:	f106 0c01 	add.w	ip, r6, #1
 8009432:	68c5      	ldr	r5, [r0, #12]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009434:	1ba4      	subs	r4, r4, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009436:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800943a:	4465      	add	r5, ip
 800943c:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009440:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009442:	68c7      	ldr	r7, [r0, #12]
 8009444:	68cd      	ldr	r5, [r1, #12]
 8009446:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800944a:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800944c:	689d      	ldr	r5, [r3, #8]
 800944e:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8009452:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009454:	688d      	ldr	r5, [r1, #8]
 8009456:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800945a:	3501      	adds	r5, #1
 800945c:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8009460:	4465      	add	r5, ip
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009462:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009466:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800946a:	698f      	ldr	r7, [r1, #24]
 800946c:	f1bc 0f07 	cmp.w	ip, #7
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009470:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009472:	691d      	ldr	r5, [r3, #16]
 8009474:	f025 0507 	bic.w	r5, r5, #7
 8009478:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800947a:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800947e:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8009482:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009486:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800948a:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800948e:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009492:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8009496:	619d      	str	r5, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009498:	695d      	ldr	r5, [r3, #20]
 800949a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800949e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80094a0:	694d      	ldr	r5, [r1, #20]
 80094a2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80094a4:	69dd      	ldr	r5, [r3, #28]
 80094a6:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80094aa:	f025 0507 	bic.w	r5, r5, #7
 80094ae:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80094b0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80094b4:	ea45 0507 	orr.w	r5, r5, r7
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80094b8:	bf88      	it	hi
 80094ba:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80094bc:	61dd      	str	r5, [r3, #28]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80094be:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80094c0:	629d      	str	r5, [r3, #40]	@ 0x28
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80094c2:	bf9c      	itt	ls
 80094c4:	4d0c      	ldrls	r5, [pc, #48]	@ (80094f8 <LTDC_SetConfig+0xe8>)
 80094c6:	f815 700c 	ldrbls.w	r7, [r5, ip]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80094ca:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80094cc:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80094ce:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80094d2:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80094d4:	62dd      	str	r5, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80094d6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80094d8:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80094da:	437d      	muls	r5, r7
 80094dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80094e0:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80094e2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80094e4:	f36f 040a 	bfc	r4, #0, #11
 80094e8:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80094ea:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80094ec:	5883      	ldr	r3, [r0, r2]
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	5083      	str	r3, [r0, r2]
}
 80094f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f6:	bf00      	nop
 80094f8:	08026a8c 	.word	0x08026a8c

080094fc <HAL_LTDC_Init>:
{
 80094fc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80094fe:	4604      	mov	r4, r0
 8009500:	2800      	cmp	r0, #0
 8009502:	d04e      	beq.n	80095a2 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009504:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8009508:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800950c:	b91b      	cbnz	r3, 8009516 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800950e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8009512:	f7f8 f863 	bl	80015dc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009516:	2302      	movs	r3, #2
 8009518:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	699a      	ldr	r2, [r3, #24]
 8009520:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009524:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009526:	6999      	ldr	r1, [r3, #24]
 8009528:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800952c:	4302      	orrs	r2, r0
 800952e:	68e0      	ldr	r0, [r4, #12]
 8009530:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009532:	6920      	ldr	r0, [r4, #16]
 8009534:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009536:	430a      	orrs	r2, r1
 8009538:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800953a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800953e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009542:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009544:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800954c:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800954e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8009552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009556:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009558:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800955c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009560:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009564:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009568:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800956c:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009570:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009572:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8009574:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8009578:	432a      	orrs	r2, r5
 800957a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800957e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009584:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009588:	f042 0206 	orr.w	r2, r2, #6
 800958c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	f042 0201 	orr.w	r2, r2, #1
 8009594:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8009596:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009598:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800959c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80095a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80095a2:	2001      	movs	r0, #1
 80095a4:	e7fc      	b.n	80095a0 <HAL_LTDC_Init+0xa4>

080095a6 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80095a6:	4770      	bx	lr

080095a8 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 80095a8:	4770      	bx	lr

080095aa <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80095aa:	4770      	bx	lr

080095ac <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80095ac:	6803      	ldr	r3, [r0, #0]
{
 80095ae:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80095b0:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 80095b2:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80095b4:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80095b6:	0772      	lsls	r2, r6, #29
 80095b8:	d514      	bpl.n	80095e4 <HAL_LTDC_IRQHandler+0x38>
 80095ba:	0769      	lsls	r1, r5, #29
 80095bc:	d512      	bpl.n	80095e4 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80095be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095c0:	f022 0204 	bic.w	r2, r2, #4
 80095c4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80095c6:	2204      	movs	r2, #4
 80095c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80095ca:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80095ce:	f043 0301 	orr.w	r3, r3, #1
 80095d2:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80095d6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80095d8:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80095dc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80095e0:	f7ff ffe1 	bl	80095a6 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80095e4:	07b2      	lsls	r2, r6, #30
 80095e6:	d516      	bpl.n	8009616 <HAL_LTDC_IRQHandler+0x6a>
 80095e8:	07ab      	lsls	r3, r5, #30
 80095ea:	d514      	bpl.n	8009616 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80095ec:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80095ee:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80095f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095f2:	f022 0202 	bic.w	r2, r2, #2
 80095f6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80095f8:	2202      	movs	r2, #2
 80095fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80095fc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8009600:	4313      	orrs	r3, r2
 8009602:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009606:	2304      	movs	r3, #4
 8009608:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800960c:	2300      	movs	r3, #0
 800960e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8009612:	f7ff ffc8 	bl	80095a6 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009616:	07f0      	lsls	r0, r6, #31
 8009618:	d510      	bpl.n	800963c <HAL_LTDC_IRQHandler+0x90>
 800961a:	07e9      	lsls	r1, r5, #31
 800961c:	d50e      	bpl.n	800963c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800961e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009620:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009622:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009624:	f022 0201 	bic.w	r2, r2, #1
 8009628:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800962a:	2201      	movs	r2, #1
 800962c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800962e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009630:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009634:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009638:	f7ff ffb6 	bl	80095a8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800963c:	0732      	lsls	r2, r6, #28
 800963e:	d511      	bpl.n	8009664 <HAL_LTDC_IRQHandler+0xb8>
 8009640:	072b      	lsls	r3, r5, #28
 8009642:	d50f      	bpl.n	8009664 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009644:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009646:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800964a:	f022 0208 	bic.w	r2, r2, #8
 800964e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009650:	2208      	movs	r2, #8
 8009652:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009654:	2301      	movs	r3, #1
 8009656:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800965a:	2300      	movs	r3, #0
 800965c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009660:	f7ff ffa3 	bl	80095aa <HAL_LTDC_ReloadEventCallback>
}
 8009664:	bd70      	pop	{r4, r5, r6, pc}

08009666 <HAL_LTDC_ConfigLayer>:
{
 8009666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800966a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800966e:	4606      	mov	r6, r0
 8009670:	460f      	mov	r7, r1
 8009672:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8009674:	2b01      	cmp	r3, #1
 8009676:	f04f 0002 	mov.w	r0, #2
 800967a:	d01f      	beq.n	80096bc <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800967c:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800967e:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009682:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009684:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009688:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800968c:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009690:	3438      	adds	r4, #56	@ 0x38
 8009692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800969a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800969c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800969e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80096a0:	4630      	mov	r0, r6
 80096a2:	4662      	mov	r2, ip
 80096a4:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80096a6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80096a8:	f7ff feb2 	bl	8009410 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80096ac:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80096ae:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80096b0:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80096b4:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80096b8:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80096bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096c0 <HAL_LTDC_SetPitch>:
{
 80096c0:	4603      	mov	r3, r0
 80096c2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80096c4:	f890 00a0 	ldrb.w	r0, [r0, #160]	@ 0xa0
 80096c8:	2801      	cmp	r0, #1
 80096ca:	f04f 0002 	mov.w	r0, #2
 80096ce:	d026      	beq.n	800971e <HAL_LTDC_SetPitch+0x5e>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80096d0:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80096d4:	2034      	movs	r0, #52	@ 0x34
 80096d6:	fb00 3002 	mla	r0, r0, r2, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80096da:	01d2      	lsls	r2, r2, #7
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80096dc:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80096de:	3284      	adds	r2, #132	@ 0x84
 80096e0:	2807      	cmp	r0, #7
 80096e2:	bf96      	itet	ls
 80096e4:	4c0e      	ldrls	r4, [pc, #56]	@ (8009720 <HAL_LTDC_SetPitch+0x60>)
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80096e6:	2401      	movhi	r4, #1
 80096e8:	5c24      	ldrbls	r4, [r4, r0]
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80096ea:	6818      	ldr	r0, [r3, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80096ec:	434c      	muls	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80096ee:	4402      	add	r2, r0
 80096f0:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80096f2:	f36f 401c 	bfc	r0, #16, #13
 80096f6:	62d0      	str	r0, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80096f8:	480a      	ldr	r0, [pc, #40]	@ (8009724 <HAL_LTDC_SetPitch+0x64>)
 80096fa:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80096fc:	f045 0501 	orr.w	r5, r5, #1
 8009700:	6245      	str	r5, [r0, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8009702:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8009704:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8009708:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800970a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800970c:	f042 0201 	orr.w	r2, r2, #1
 8009710:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009712:	2201      	movs	r2, #1
  __HAL_UNLOCK(hltdc);
 8009714:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8009716:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800971a:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 800971e:	bd30      	pop	{r4, r5, pc}
 8009720:	08026a8c 	.word	0x08026a8c
 8009724:	50001000 	.word	0x50001000

08009728 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8009728:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800972a:	6804      	ldr	r4, [r0, #0]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800972c:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009730:	6965      	ldr	r5, [r4, #20]
 8009732:	f363 0510 	bfi	r5, r3, #0, #17
 8009736:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009738:	9d03      	ldr	r5, [sp, #12]
 800973a:	6963      	ldr	r3, [r4, #20]
 800973c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009744:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009748:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800974a:	f04f 031f 	mov.w	r3, #31
 800974e:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8009750:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8009752:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8009754:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009756:	bf0c      	ite	eq
 8009758:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800975c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009760:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009764:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8009766:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009768:	bf0c      	ite	eq
 800976a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800976e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8009772:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8009774:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8009776:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009778:	bd30      	pop	{r4, r5, pc}

0800977a <HAL_MDMA_Init>:
{
 800977a:	b538      	push	{r3, r4, r5, lr}
 800977c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800977e:	f7fd fb4d 	bl	8006e1c <HAL_GetTick>
 8009782:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8009784:	2c00      	cmp	r4, #0
 8009786:	d061      	beq.n	800984c <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8009788:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800978a:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800978c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8009790:	2302      	movs	r3, #2
 8009792:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8009796:	68d3      	ldr	r3, [r2, #12]
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	07d2      	lsls	r2, r2, #31
 80097a4:	d448      	bmi.n	8009838 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80097a6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80097ae:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80097b2:	430a      	orrs	r2, r1
 80097b4:	69e1      	ldr	r1, [r4, #28]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	6a21      	ldr	r1, [r4, #32]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80097be:	430a      	orrs	r2, r1
 80097c0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80097c2:	430a      	orrs	r2, r1
 80097c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80097c6:	430a      	orrs	r2, r1
 80097c8:	68a1      	ldr	r1, [r4, #8]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80097ce:	3901      	subs	r1, #1
 80097d0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80097d4:	6861      	ldr	r1, [r4, #4]
 80097d6:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80097da:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80097dc:	d103      	bne.n	80097e6 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80097de:	691a      	ldr	r2, [r3, #16]
 80097e0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80097e4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80097e6:	2200      	movs	r2, #0
 80097e8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80097ea:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	da04      	bge.n	80097fa <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80097f0:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80097f2:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80097f4:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80097f8:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80097fa:	b292      	uxth	r2, r2
 80097fc:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80097fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009800:	2a00      	cmp	r2, #0
 8009802:	da25      	bge.n	8009850 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009804:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009806:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009808:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800980c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800980e:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009810:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009814:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009818:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	d019      	beq.n	8009854 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009820:	b2c9      	uxtb	r1, r1
 8009822:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009824:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8009826:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009828:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800982a:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800982c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800982e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8009832:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8009836:	e00a      	b.n	800984e <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009838:	f7fd faf0 	bl	8006e1c <HAL_GetTick>
 800983c:	1b40      	subs	r0, r0, r5
 800983e:	2805      	cmp	r0, #5
 8009840:	d9ad      	bls.n	800979e <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8009842:	2340      	movs	r3, #64	@ 0x40
 8009844:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009846:	2303      	movs	r3, #3
 8009848:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800984c:	2001      	movs	r0, #1
}
 800984e:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009850:	6a18      	ldr	r0, [r3, #32]
 8009852:	e7dd      	b.n	8009810 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8009854:	629a      	str	r2, [r3, #40]	@ 0x28
 8009856:	e7e5      	b.n	8009824 <HAL_MDMA_Init+0xaa>

08009858 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8009858:	b1d8      	cbz	r0, 8009892 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800985a:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800985c:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800985e:	68d3      	ldr	r3, [r2, #12]
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800986a:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800986c:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800986e:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8009870:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8009872:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8009874:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8009876:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8009878:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800987a:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800987c:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800987e:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8009880:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8009882:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8009886:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800988a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800988e:	4618      	mov	r0, r3
 8009890:	4770      	bx	lr
    return HAL_ERROR;
 8009892:	2001      	movs	r0, #1
}
 8009894:	4770      	bx	lr

08009896 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8009896:	4603      	mov	r3, r0
{
 8009898:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800989a:	b300      	cbz	r0, 80098de <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800989c:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80098a0:	2801      	cmp	r0, #1
 80098a2:	d01e      	beq.n	80098e2 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80098a4:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80098a6:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80098aa:	42a5      	cmp	r5, r4
 80098ac:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80098ae:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80098b2:	d112      	bne.n	80098da <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80098b4:	681c      	ldr	r4, [r3, #0]
 80098b6:	6925      	ldr	r5, [r4, #16]
 80098b8:	006d      	lsls	r5, r5, #1
 80098ba:	d407      	bmi.n	80098cc <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 80098bc:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80098be:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80098c0:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 80098c2:	b939      	cbnz	r1, 80098d4 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80098c4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 80098c8:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80098ca:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80098d2:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80098d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80098d8:	e7f6      	b.n	80098c8 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 80098da:	4620      	mov	r0, r4
 80098dc:	e7f6      	b.n	80098cc <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 80098de:	2001      	movs	r0, #1
 80098e0:	e7f7      	b.n	80098d2 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 80098e2:	2002      	movs	r0, #2
 80098e4:	e7f5      	b.n	80098d2 <HAL_MDMA_ConfigPostRequestMask+0x3c>

080098e6 <HAL_MDMA_Start_IT>:
{
 80098e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 80098e8:	4604      	mov	r4, r0
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d042      	beq.n	8009974 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 80098ee:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 80098f2:	2d01      	cmp	r5, #1
 80098f4:	d03c      	beq.n	8009970 <HAL_MDMA_Start_IT+0x8a>
 80098f6:	2501      	movs	r5, #1
 80098f8:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80098fc:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8009900:	2d01      	cmp	r5, #1
 8009902:	f04f 0500 	mov.w	r5, #0
 8009906:	d131      	bne.n	800996c <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8009908:	2602      	movs	r6, #2
 800990a:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800990e:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8009910:	6805      	ldr	r5, [r0, #0]
 8009912:	68ee      	ldr	r6, [r5, #12]
 8009914:	f026 0601 	bic.w	r6, r6, #1
 8009918:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800991a:	9e06      	ldr	r6, [sp, #24]
 800991c:	9600      	str	r6, [sp, #0]
 800991e:	f7ff ff03 	bl	8009728 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8009922:	68eb      	ldr	r3, [r5, #12]
 8009924:	f043 0306 	orr.w	r3, r3, #6
 8009928:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800992a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800992c:	b11b      	cbz	r3, 8009936 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800992e:	68eb      	ldr	r3, [r5, #12]
 8009930:	f043 0310 	orr.w	r3, r3, #16
 8009934:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009936:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009938:	b11b      	cbz	r3, 8009942 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800993a:	68eb      	ldr	r3, [r5, #12]
 800993c:	f043 0308 	orr.w	r3, r3, #8
 8009940:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8009942:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009944:	b11b      	cbz	r3, 800994e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8009946:	68eb      	ldr	r3, [r5, #12]
 8009948:	f043 0320 	orr.w	r3, r3, #32
 800994c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800994e:	68eb      	ldr	r3, [r5, #12]
 8009950:	f043 0301 	orr.w	r3, r3, #1
 8009954:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009956:	6863      	ldr	r3, [r4, #4]
 8009958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800995c:	d103      	bne.n	8009966 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800995e:	68eb      	ldr	r3, [r5, #12]
 8009960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009964:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8009966:	2000      	movs	r0, #0
}
 8009968:	b002      	add	sp, #8
 800996a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800996c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8009970:	2002      	movs	r0, #2
 8009972:	e7f9      	b.n	8009968 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8009974:	2001      	movs	r0, #1
 8009976:	e7f7      	b.n	8009968 <HAL_MDMA_Start_IT+0x82>

08009978 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8009978:	b128      	cbz	r0, 8009986 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800997a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800997e:	2b02      	cmp	r3, #2
 8009980:	d003      	beq.n	800998a <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8009982:	2380      	movs	r3, #128	@ 0x80
 8009984:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8009986:	2001      	movs	r0, #1
 8009988:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800998a:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800998c:	2304      	movs	r3, #4
 800998e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8009992:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8009994:	68d3      	ldr	r3, [r2, #12]
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	60d3      	str	r3, [r2, #12]
}
 800999c:	4770      	bx	lr
	...

080099a0 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 80099a0:	2300      	movs	r3, #0
{
 80099a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 80099a4:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80099a6:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 80099aa:	4b58      	ldr	r3, [pc, #352]	@ (8009b0c <HAL_MDMA_IRQHandler+0x16c>)
{
 80099ac:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80099ae:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80099b0:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80099b2:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80099b4:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80099b6:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 80099ba:	3a40      	subs	r2, #64	@ 0x40
 80099bc:	f3c2 1284 	ubfx	r2, r2, #6, #5
 80099c0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80099c4:	4202      	tst	r2, r0
 80099c6:	f000 809e 	beq.w	8009b06 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	07d1      	lsls	r1, r2, #31
 80099ce:	d529      	bpl.n	8009a24 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	0792      	lsls	r2, r2, #30
 80099d4:	d526      	bpl.n	8009a24 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	f022 0202 	bic.w	r2, r2, #2
 80099dc:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 80099de:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80099e0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 80099e2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80099e4:	bf54      	ite	pl
 80099e6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80099ea:	f041 0102 	orrmi.w	r1, r1, #2
 80099ee:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80099f0:	0591      	lsls	r1, r2, #22
 80099f2:	d503      	bpl.n	80099fc <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80099f4:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80099f6:	f041 0104 	orr.w	r1, r1, #4
 80099fa:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80099fc:	05d0      	lsls	r0, r2, #23
 80099fe:	d503      	bpl.n	8009a08 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009a00:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009a02:	f041 0108 	orr.w	r1, r1, #8
 8009a06:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009a08:	0551      	lsls	r1, r2, #21
 8009a0a:	d503      	bpl.n	8009a14 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009a0c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009a0e:	f041 0110 	orr.w	r1, r1, #16
 8009a12:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009a14:	0512      	lsls	r2, r2, #20
 8009a16:	d503      	bpl.n	8009a20 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009a18:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8009a1a:	f042 0220 	orr.w	r2, r2, #32
 8009a1e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009a20:	2201      	movs	r2, #1
 8009a22:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	06d0      	lsls	r0, r2, #27
 8009a28:	d508      	bpl.n	8009a3c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	0691      	lsls	r1, r2, #26
 8009a2e:	d505      	bpl.n	8009a3c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009a30:	2210      	movs	r2, #16
 8009a32:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8009a34:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009a36:	b10b      	cbz	r3, 8009a3c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8009a38:	4620      	mov	r0, r4
 8009a3a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	0712      	lsls	r2, r2, #28
 8009a42:	d508      	bpl.n	8009a56 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	06d0      	lsls	r0, r2, #27
 8009a48:	d505      	bpl.n	8009a56 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009a4a:	2208      	movs	r2, #8
 8009a4c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8009a4e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009a50:	b10b      	cbz	r3, 8009a56 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8009a52:	4620      	mov	r0, r4
 8009a54:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	0751      	lsls	r1, r2, #29
 8009a5c:	d508      	bpl.n	8009a70 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	0712      	lsls	r2, r2, #28
 8009a62:	d505      	bpl.n	8009a70 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009a64:	2204      	movs	r2, #4
 8009a66:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009a68:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009a6a:	b10b      	cbz	r3, 8009a70 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	0790      	lsls	r0, r2, #30
 8009a76:	d524      	bpl.n	8009ac2 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	0751      	lsls	r1, r2, #29
 8009a7c:	d521      	bpl.n	8009ac2 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8009a84:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009a86:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8009a8a:	2a04      	cmp	r2, #4
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	d10c      	bne.n	8009aac <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8009a92:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8009a94:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8009a98:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8009a9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d031      	beq.n	8009b06 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8009aa2:	4620      	mov	r0, r4
}
 8009aa4:	b003      	add	sp, #12
 8009aa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8009aaa:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8009aac:	2102      	movs	r1, #2
 8009aae:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8009ab0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8009ab2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8009ab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8009aba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009abc:	b10b      	cbz	r3, 8009ac2 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8009ac2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009ac4:	b1fb      	cbz	r3, 8009b06 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8009ac6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8009aca:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009ace:	2304      	movs	r3, #4
 8009ad0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	f022 0201 	bic.w	r2, r2, #1
 8009adc:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8009ade:	9a01      	ldr	r2, [sp, #4]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	42aa      	cmp	r2, r5
 8009ae4:	9201      	str	r2, [sp, #4]
 8009ae6:	d802      	bhi.n	8009aee <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009ae8:	68da      	ldr	r2, [r3, #12]
 8009aea:	07d2      	lsls	r2, r2, #31
 8009aec:	d4f7      	bmi.n	8009ade <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8009aee:	2200      	movs	r2, #0
 8009af0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009af8:	bf4c      	ite	mi
 8009afa:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8009afc:	2301      	movpl	r3, #1
 8009afe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8009b02:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009b04:	e7cb      	b.n	8009a9e <HAL_MDMA_IRQHandler+0xfe>
}
 8009b06:	b003      	add	sp, #12
 8009b08:	bd30      	pop	{r4, r5, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2400006c 	.word	0x2400006c

08009b10 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009b10:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009b12:	4d1c      	ldr	r5, [pc, #112]	@ (8009b84 <HAL_PWREx_ConfigSupply+0x74>)
{
 8009b14:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009b16:	68eb      	ldr	r3, [r5, #12]
 8009b18:	f003 0307 	and.w	r3, r3, #7
 8009b1c:	2b06      	cmp	r3, #6
 8009b1e:	d006      	beq.n	8009b2e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009b20:	68e8      	ldr	r0, [r5, #12]
 8009b22:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8009b26:	1b00      	subs	r0, r0, r4
 8009b28:	bf18      	it	ne
 8009b2a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009b2c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009b2e:	68eb      	ldr	r3, [r5, #12]
 8009b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009b34:	4303      	orrs	r3, r0
 8009b36:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8009b38:	f7fd f970 	bl	8006e1c <HAL_GetTick>
 8009b3c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b3e:	686b      	ldr	r3, [r5, #4]
 8009b40:	049a      	lsls	r2, r3, #18
 8009b42:	d508      	bpl.n	8009b56 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009b44:	f1a4 031d 	sub.w	r3, r4, #29
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d90c      	bls.n	8009b66 <HAL_PWREx_ConfigSupply+0x56>
 8009b4c:	3c2d      	subs	r4, #45	@ 0x2d
 8009b4e:	2c01      	cmp	r4, #1
 8009b50:	d909      	bls.n	8009b66 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8009b52:	2000      	movs	r0, #0
 8009b54:	e7ea      	b.n	8009b2c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b56:	f7fd f961 	bl	8006e1c <HAL_GetTick>
 8009b5a:	1b80      	subs	r0, r0, r6
 8009b5c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009b60:	d9ed      	bls.n	8009b3e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8009b62:	2001      	movs	r0, #1
 8009b64:	e7e2      	b.n	8009b2c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8009b66:	f7fd f959 	bl	8006e1c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009b6a:	4d06      	ldr	r5, [pc, #24]	@ (8009b84 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8009b6c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009b6e:	68eb      	ldr	r3, [r5, #12]
 8009b70:	03db      	lsls	r3, r3, #15
 8009b72:	d4ee      	bmi.n	8009b52 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b74:	f7fd f952 	bl	8006e1c <HAL_GetTick>
 8009b78:	1b00      	subs	r0, r0, r4
 8009b7a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009b7e:	d9f6      	bls.n	8009b6e <HAL_PWREx_ConfigSupply+0x5e>
 8009b80:	e7ef      	b.n	8009b62 <HAL_PWREx_ConfigSupply+0x52>
 8009b82:	bf00      	nop
 8009b84:	58024800 	.word	0x58024800

08009b88 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009b8c:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8009b8e:	b134      	cbz	r4, 8009b9e <QSPI_Config+0x16>
 8009b90:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8009b94:	d003      	beq.n	8009b9e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009b96:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009b98:	6805      	ldr	r5, [r0, #0]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	612b      	str	r3, [r5, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009b9e:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009ba2:	e9d1 c607 	ldrd	ip, r6, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8009ba6:	f1ba 0f00 	cmp.w	sl, #0
 8009baa:	d052      	beq.n	8009c52 <QSPI_Config+0xca>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bac:	694f      	ldr	r7, [r1, #20]
 8009bae:	ea44 0a0a 	orr.w	sl, r4, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009bb2:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bb4:	04bf      	lsls	r7, r7, #18
 8009bb6:	680b      	ldr	r3, [r1, #0]
 8009bb8:	f8d1 e034 	ldr.w	lr, [r1, #52]	@ 0x34
 8009bbc:	ea4a 0a02 	orr.w	sl, sl, r2
 8009bc0:	e9d1 980b 	ldrd	r9, r8, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009bc4:	b34e      	cbz	r6, 8009c1a <QSPI_Config+0x92>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009bc6:	688c      	ldr	r4, [r1, #8]
 8009bc8:	ea4a 0006 	orr.w	r0, sl, r6
 8009bcc:	61ec      	str	r4, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bce:	690c      	ldr	r4, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009bd0:	f1bc 0f00 	cmp.w	ip, #0
 8009bd4:	d013      	beq.n	8009bfe <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bd6:	ea43 030c 	orr.w	r3, r3, ip
 8009bda:	ea43 0309 	orr.w	r3, r3, r9
 8009bde:	ea43 0308 	orr.w	r3, r3, r8
 8009be2:	ea43 030e 	orr.w	r3, r3, lr
 8009be6:	4323      	orrs	r3, r4
 8009be8:	68cc      	ldr	r4, [r1, #12]
 8009bea:	4323      	orrs	r3, r4
 8009bec:	433b      	orrs	r3, r7
 8009bee:	4303      	orrs	r3, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009bf0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bf4:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009bf6:	d00e      	beq.n	8009c16 <QSPI_Config+0x8e>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009bf8:	684b      	ldr	r3, [r1, #4]
 8009bfa:	61ab      	str	r3, [r5, #24]
 8009bfc:	e00b      	b.n	8009c16 <QSPI_Config+0x8e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009bfe:	ea43 0309 	orr.w	r3, r3, r9
 8009c02:	ea43 0308 	orr.w	r3, r3, r8
 8009c06:	ea43 030e 	orr.w	r3, r3, lr
 8009c0a:	4323      	orrs	r3, r4
 8009c0c:	433b      	orrs	r3, r7
 8009c0e:	4303      	orrs	r3, r0
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c10:	616b      	str	r3, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009c12:	f8c5 c018 	str.w	ip, [r5, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8009c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009c1a:	f1bc 0f00 	cmp.w	ip, #0
 8009c1e:	d00d      	beq.n	8009c3c <QSPI_Config+0xb4>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c20:	ea43 030c 	orr.w	r3, r3, ip
 8009c24:	68c8      	ldr	r0, [r1, #12]
 8009c26:	ea43 0309 	orr.w	r3, r3, r9
 8009c2a:	ea43 0308 	orr.w	r3, r3, r8
 8009c2e:	ea43 030e 	orr.w	r3, r3, lr
 8009c32:	4303      	orrs	r3, r0
 8009c34:	433b      	orrs	r3, r7
 8009c36:	ea43 030a 	orr.w	r3, r3, sl
 8009c3a:	e7d9      	b.n	8009bf0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c3c:	ea43 0309 	orr.w	r3, r3, r9
 8009c40:	ea43 0308 	orr.w	r3, r3, r8
 8009c44:	ea43 000e 	orr.w	r0, r3, lr
 8009c48:	ea40 0307 	orr.w	r3, r0, r7
 8009c4c:	ea43 030a 	orr.w	r3, r3, sl
 8009c50:	e7de      	b.n	8009c10 <QSPI_Config+0x88>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009c52:	b316      	cbz	r6, 8009c9a <QSPI_Config+0x112>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009c54:	688b      	ldr	r3, [r1, #8]
 8009c56:	4326      	orrs	r6, r4
 8009c58:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c5a:	694f      	ldr	r7, [r1, #20]
 8009c5c:	4316      	orrs	r6, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009c5e:	61eb      	str	r3, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c60:	04bf      	lsls	r7, r7, #18
 8009c62:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c64:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009c66:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009c6a:	f1bc 0f00 	cmp.w	ip, #0
 8009c6e:	d00b      	beq.n	8009c88 <QSPI_Config+0x100>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c70:	ea43 030c 	orr.w	r3, r3, ip
 8009c74:	68c8      	ldr	r0, [r1, #12]
 8009c76:	ea43 0308 	orr.w	r3, r3, r8
 8009c7a:	ea43 030e 	orr.w	r3, r3, lr
 8009c7e:	4323      	orrs	r3, r4
 8009c80:	4303      	orrs	r3, r0
 8009c82:	433b      	orrs	r3, r7
 8009c84:	4333      	orrs	r3, r6
 8009c86:	e7b3      	b.n	8009bf0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009c88:	ea43 0208 	orr.w	r2, r3, r8
 8009c8c:	ea42 020e 	orr.w	r2, r2, lr
 8009c90:	4322      	orrs	r2, r4
 8009c92:	433a      	orrs	r2, r7
 8009c94:	4332      	orrs	r2, r6
 8009c96:	616a      	str	r2, [r5, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009c98:	e7bb      	b.n	8009c12 <QSPI_Config+0x8a>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009c9a:	f1bc 0f00 	cmp.w	ip, #0
 8009c9e:	d01a      	beq.n	8009cd6 <QSPI_Config+0x14e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009ca0:	ea44 030c 	orr.w	r3, r4, ip
 8009ca4:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8009ca6:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009ca8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009cac:	ea43 0302 	orr.w	r3, r3, r2
 8009cb0:	ea43 0304 	orr.w	r3, r3, r4
 8009cb4:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8009cb6:	ea43 0304 	orr.w	r3, r3, r4
 8009cba:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8009cbc:	ea43 0304 	orr.w	r3, r3, r4
 8009cc0:	68cc      	ldr	r4, [r1, #12]
 8009cc2:	ea43 0304 	orr.w	r3, r3, r4
 8009cc6:	694c      	ldr	r4, [r1, #20]
 8009cc8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009ccc:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009cce:	d0a2      	beq.n	8009c16 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009cd0:	684b      	ldr	r3, [r1, #4]
 8009cd2:	6183      	str	r3, [r0, #24]
 8009cd4:	e79f      	b.n	8009c16 <QSPI_Config+0x8e>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009cd6:	2c00      	cmp	r4, #0
 8009cd8:	d09d      	beq.n	8009c16 <QSPI_Config+0x8e>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009cda:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009cdc:	6800      	ldr	r0, [r0, #0]
 8009cde:	4323      	orrs	r3, r4
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	694a      	ldr	r2, [r1, #20]
 8009cec:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009cf0:	6143      	str	r3, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 8009cf2:	f8c0 c018 	str.w	ip, [r0, #24]
}
 8009cf6:	e78e      	b.n	8009c16 <QSPI_Config+0x8e>

08009cf8 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009d00:	4604      	mov	r4, r0
 8009d02:	460e      	mov	r6, r1
 8009d04:	4615      	mov	r5, r2
 8009d06:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009d08:	6822      	ldr	r2, [r4, #0]
 8009d0a:	6893      	ldr	r3, [r2, #8]
 8009d0c:	4233      	tst	r3, r6
 8009d0e:	bf14      	ite	ne
 8009d10:	2301      	movne	r3, #1
 8009d12:	2300      	moveq	r3, #0
 8009d14:	42ab      	cmp	r3, r5
 8009d16:	d101      	bne.n	8009d1c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e00f      	b.n	8009d3c <QSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 8009d1c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009d20:	d0f3      	beq.n	8009d0a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d22:	f7fd f87b 	bl	8006e1c <HAL_GetTick>
 8009d26:	1bc0      	subs	r0, r0, r7
 8009d28:	4540      	cmp	r0, r8
 8009d2a:	d909      	bls.n	8009d40 <QSPI_WaitFlagStateUntilTimeout+0x48>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009d2c:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009d2e:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009d30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009d34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009d36:	f043 0301 	orr.w	r3, r3, #1
 8009d3a:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	d1e0      	bne.n	8009d08 <QSPI_WaitFlagStateUntilTimeout+0x10>
 8009d46:	e7f1      	b.n	8009d2c <QSPI_WaitFlagStateUntilTimeout+0x34>

08009d48 <HAL_QSPI_Init>:
{
 8009d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009d4c:	f7fd f866 	bl	8006e1c <HAL_GetTick>
 8009d50:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009d52:	2c00      	cmp	r4, #0
 8009d54:	d03f      	beq.n	8009dd6 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009d56:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009d5a:	b92b      	cbnz	r3, 8009d68 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7f7 fc7b 	bl	8001658 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009d62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009d66:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009d68:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009d6a:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009d6c:	68a3      	ldr	r3, [r4, #8]
 8009d6e:	680a      	ldr	r2, [r1, #0]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009d76:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009d7a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009d7c:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009d7e:	2200      	movs	r2, #0
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	2120      	movs	r1, #32
 8009d84:	462b      	mov	r3, r5
 8009d86:	f7ff ffb7 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8009d8a:	bb10      	cbnz	r0, 8009dd2 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009d8c:	6822      	ldr	r2, [r4, #0]
 8009d8e:	69e5      	ldr	r5, [r4, #28]
 8009d90:	68e3      	ldr	r3, [r4, #12]
 8009d92:	6811      	ldr	r1, [r2, #0]
 8009d94:	432b      	orrs	r3, r5
 8009d96:	6a25      	ldr	r5, [r4, #32]
 8009d98:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8009d9c:	432b      	orrs	r3, r5
 8009d9e:	6865      	ldr	r5, [r4, #4]
 8009da0:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8009da4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009da8:	430b      	orrs	r3, r1
 8009daa:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009dac:	6855      	ldr	r5, [r2, #4]
 8009dae:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6921      	ldr	r1, [r4, #16]
 8009db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009dba:	4908      	ldr	r1, [pc, #32]	@ (8009ddc <HAL_QSPI_Init+0x94>)
 8009dbc:	4029      	ands	r1, r5
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009dc2:	6813      	ldr	r3, [r2, #0]
 8009dc4:	f043 0301 	orr.w	r3, r3, #1
 8009dc8:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009dca:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009dcc:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009dce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009dd2:	b003      	add	sp, #12
 8009dd4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	e7fb      	b.n	8009dd2 <HAL_QSPI_Init+0x8a>
 8009dda:	bf00      	nop
 8009ddc:	ffe0f8fe 	.word	0xffe0f8fe

08009de0 <HAL_QSPI_Command>:
{
 8009de0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	4604      	mov	r4, r0
 8009de6:	468a      	mov	sl, r1
 8009de8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8009dea:	f7fd f817 	bl	8006e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009dee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009df2:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d035      	beq.n	8009e64 <HAL_QSPI_Command+0x84>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	2602      	movs	r6, #2
 8009dfc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009e00:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	fa5f f983 	uxtb.w	r9, r3
 8009e0a:	d129      	bne.n	8009e60 <HAL_QSPI_Command+0x80>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e0c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2120      	movs	r1, #32
 8009e12:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e14:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009e16:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009e1a:	f8cd 8000 	str.w	r8, [sp]
 8009e1e:	f7ff ff6b 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009e22:	4605      	mov	r5, r0
 8009e24:	b9a8      	cbnz	r0, 8009e52 <HAL_QSPI_Command+0x72>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009e26:	4602      	mov	r2, r0
 8009e28:	4651      	mov	r1, sl
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f7ff feac 	bl	8009b88 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009e30:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009e34:	b95b      	cbnz	r3, 8009e4e <HAL_QSPI_Command+0x6e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009e36:	463b      	mov	r3, r7
 8009e38:	464a      	mov	r2, r9
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f8cd 8000 	str.w	r8, [sp]
 8009e42:	f7ff ff59 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009e46:	4605      	mov	r5, r0
 8009e48:	b918      	cbnz	r0, 8009e52 <HAL_QSPI_Command+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009e4e:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009e52:	2300      	movs	r3, #0
 8009e54:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009e58:	4628      	mov	r0, r5
 8009e5a:	b002      	add	sp, #8
 8009e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009e60:	4635      	mov	r5, r6
 8009e62:	e7f6      	b.n	8009e52 <HAL_QSPI_Command+0x72>
  __HAL_LOCK(hqspi);
 8009e64:	2502      	movs	r5, #2
 8009e66:	e7f7      	b.n	8009e58 <HAL_QSPI_Command+0x78>

08009e68 <HAL_QSPI_Transmit>:
{
 8009e68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	4688      	mov	r8, r1
 8009e70:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009e72:	f7fc ffd3 	bl	8006e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009e76:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009e7a:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009e7c:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d04c      	beq.n	8009f1c <HAL_QSPI_Transmit+0xb4>
 8009e82:	2301      	movs	r3, #1
 8009e84:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009e88:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	b2d8      	uxtb	r0, r3
 8009e90:	d142      	bne.n	8009f18 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009e92:	2300      	movs	r3, #0
 8009e94:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	d038      	beq.n	8009f0e <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009e9c:	2312      	movs	r3, #18
 8009e9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ea2:	692b      	ldr	r3, [r5, #16]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ea8:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009eaa:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009eae:	3301      	adds	r3, #1
 8009eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009eb2:	696b      	ldr	r3, [r5, #20]
 8009eb4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8009eb8:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009eba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ebc:	b99b      	cbnz	r3, 8009ee6 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009ebe:	4633      	mov	r3, r6
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	2102      	movs	r1, #2
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	9700      	str	r7, [sp, #0]
 8009ec8:	f7ff ff16 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009ecc:	b910      	cbnz	r0, 8009ed4 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009eda:	2300      	movs	r3, #0
 8009edc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009ee0:	b002      	add	sp, #8
 8009ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009ee6:	4633      	mov	r3, r6
 8009ee8:	2201      	movs	r2, #1
 8009eea:	2104      	movs	r1, #4
 8009eec:	4620      	mov	r0, r4
 8009eee:	9700      	str	r7, [sp, #0]
 8009ef0:	f7ff ff02 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1ed      	bne.n	8009ed4 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009ef8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009f00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009f02:	3301      	adds	r3, #1
 8009f04:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009f06:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f0c:	e7d5      	b.n	8009eba <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009f0e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009f10:	f043 0308 	orr.w	r3, r3, #8
 8009f14:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009f16:	e7e0      	b.n	8009eda <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8009f18:	2002      	movs	r0, #2
 8009f1a:	e7de      	b.n	8009eda <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009f1c:	2002      	movs	r0, #2
 8009f1e:	e7df      	b.n	8009ee0 <HAL_QSPI_Transmit+0x78>

08009f20 <HAL_QSPI_Receive>:
{
 8009f20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f24:	4604      	mov	r4, r0
 8009f26:	4617      	mov	r7, r2
 8009f28:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009f2a:	f7fc ff77 	bl	8006e1c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009f2e:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009f30:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009f32:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009f34:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d04f      	beq.n	8009fdc <HAL_QSPI_Receive+0xbc>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009f42:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	b2d8      	uxtb	r0, r3
 8009f4a:	d145      	bne.n	8009fd8 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009f50:	f1b8 0f00 	cmp.w	r8, #0
 8009f54:	d03b      	beq.n	8009fce <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009f56:	2322      	movs	r3, #34	@ 0x22
 8009f58:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009f5c:	692b      	ldr	r3, [r5, #16]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009f62:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009f64:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009f68:	3301      	adds	r3, #1
 8009f6a:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009f6c:	6969      	ldr	r1, [r5, #20]
 8009f6e:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009f72:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8009f76:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009f78:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009f7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009f7c:	b99b      	cbnz	r3, 8009fa6 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009f7e:	4633      	mov	r3, r6
 8009f80:	2201      	movs	r2, #1
 8009f82:	2102      	movs	r1, #2
 8009f84:	4620      	mov	r0, r4
 8009f86:	9700      	str	r7, [sp, #0]
 8009f88:	f7ff feb6 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009f8c:	b910      	cbnz	r0, 8009f94 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	2202      	movs	r2, #2
 8009f92:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009f94:	2301      	movs	r3, #1
 8009f96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009fa0:	b002      	add	sp, #8
 8009fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009fa6:	4633      	mov	r3, r6
 8009fa8:	2201      	movs	r2, #1
 8009faa:	2106      	movs	r1, #6
 8009fac:	4620      	mov	r0, r4
 8009fae:	9700      	str	r7, [sp, #0]
 8009fb0:	f7ff fea2 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d1ed      	bne.n	8009f94 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009fb8:	f895 2020 	ldrb.w	r2, [r5, #32]
 8009fbc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009fbe:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009fc6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009fcc:	e7d5      	b.n	8009f7a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009fce:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009fd0:	f043 0308 	orr.w	r3, r3, #8
 8009fd4:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009fd6:	e7e0      	b.n	8009f9a <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 8009fd8:	2002      	movs	r0, #2
 8009fda:	e7de      	b.n	8009f9a <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8009fdc:	2002      	movs	r0, #2
 8009fde:	e7df      	b.n	8009fa0 <HAL_QSPI_Receive+0x80>

08009fe0 <HAL_QSPI_AutoPolling>:
{
 8009fe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	4689      	mov	r9, r1
 8009fea:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009fec:	f7fc ff16 	bl	8006e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009ff0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009ff4:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d041      	beq.n	800a07e <HAL_QSPI_AutoPolling+0x9e>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a000:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800a004:	2b01      	cmp	r3, #1
 800a006:	fa5f f883 	uxtb.w	r8, r3
 800a00a:	d136      	bne.n	800a07a <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a00c:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a00e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a010:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a012:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800a014:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a018:	4603      	mov	r3, r0
 800a01a:	9700      	str	r7, [sp, #0]
 800a01c:	4620      	mov	r0, r4
 800a01e:	f7ff fe6b 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a022:	bb20      	cbnz	r0, 800a06e <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a024:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a026:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a028:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a02a:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800a02c:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800a02e:	686b      	ldr	r3, [r5, #4]
 800a030:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800a032:	68ab      	ldr	r3, [r5, #8]
 800a034:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a036:	6813      	ldr	r3, [r2, #0]
 800a038:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a03c:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a03e:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800a040:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a044:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a046:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800a04a:	68eb      	ldr	r3, [r5, #12]
 800a04c:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800a050:	f7ff fd9a 	bl	8009b88 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800a054:	4633      	mov	r3, r6
 800a056:	4642      	mov	r2, r8
 800a058:	2108      	movs	r1, #8
 800a05a:	4620      	mov	r0, r4
 800a05c:	9700      	str	r7, [sp, #0]
 800a05e:	f7ff fe4b 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800a062:	b920      	cbnz	r0, 800a06e <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	2208      	movs	r2, #8
 800a068:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800a06a:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800a06e:	2300      	movs	r3, #0
 800a070:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a074:	b003      	add	sp, #12
 800a076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800a07a:	2002      	movs	r0, #2
 800a07c:	e7f7      	b.n	800a06e <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800a07e:	2002      	movs	r0, #2
 800a080:	e7f8      	b.n	800a074 <HAL_QSPI_AutoPolling+0x94>

0800a082 <HAL_QSPI_MemoryMapped>:
{
 800a082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a084:	4604      	mov	r4, r0
 800a086:	4616      	mov	r6, r2
 800a088:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800a08a:	f7fc fec7 	bl	8006e1c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800a08e:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800a092:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800a094:	2a01      	cmp	r2, #1
 800a096:	d033      	beq.n	800a100 <HAL_QSPI_MemoryMapped+0x7e>
 800a098:	2201      	movs	r2, #1
 800a09a:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800a09e:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800a0a2:	2a01      	cmp	r2, #1
 800a0a4:	d12a      	bne.n	800a0fc <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a0a6:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a0a8:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a0aa:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a0ac:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800a0ae:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a0b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a0b4:	9100      	str	r1, [sp, #0]
 800a0b6:	2120      	movs	r1, #32
 800a0b8:	f7ff fe1e 	bl	8009cf8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800a0bc:	4605      	mov	r5, r0
 800a0be:	b9b8      	cbnz	r0, 800a0f0 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	6872      	ldr	r2, [r6, #4]
 800a0c4:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a0c6:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800a0c8:	f020 0008 	bic.w	r0, r0, #8
 800a0cc:	ea40 0002 	orr.w	r0, r0, r2
 800a0d0:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800a0d2:	d107      	bne.n	800a0e4 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800a0d4:	6832      	ldr	r2, [r6, #0]
 800a0d6:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800a0d8:	2210      	movs	r2, #16
 800a0da:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800a0e2:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800a0e4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7ff fd4c 	bl	8009b88 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	b003      	add	sp, #12
 800a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800a0fc:	2502      	movs	r5, #2
 800a0fe:	e7f7      	b.n	800a0f0 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800a100:	2502      	movs	r5, #2
 800a102:	e7f8      	b.n	800a0f6 <HAL_QSPI_MemoryMapped+0x74>

0800a104 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a106:	4604      	mov	r4, r0
 800a108:	2800      	cmp	r0, #0
 800a10a:	d074      	beq.n	800a1f6 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a10c:	6803      	ldr	r3, [r0, #0]
 800a10e:	07d8      	lsls	r0, r3, #31
 800a110:	d45e      	bmi.n	800a1d0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	0799      	lsls	r1, r3, #30
 800a116:	f100 80ad 	bmi.w	800a274 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	06da      	lsls	r2, r3, #27
 800a11e:	d527      	bpl.n	800a170 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a120:	4a9c      	ldr	r2, [pc, #624]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a122:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a124:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a126:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d007      	beq.n	800a13e <HAL_RCC_OscConfig+0x3a>
 800a12e:	2b18      	cmp	r3, #24
 800a130:	f040 8103 	bne.w	800a33a <HAL_RCC_OscConfig+0x236>
 800a134:	f001 0303 	and.w	r3, r1, #3
 800a138:	2b01      	cmp	r3, #1
 800a13a:	f040 80fe 	bne.w	800a33a <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a13e:	6813      	ldr	r3, [r2, #0]
 800a140:	05db      	lsls	r3, r3, #23
 800a142:	d502      	bpl.n	800a14a <HAL_RCC_OscConfig+0x46>
 800a144:	69e3      	ldr	r3, [r4, #28]
 800a146:	2b80      	cmp	r3, #128	@ 0x80
 800a148:	d155      	bne.n	800a1f6 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a14a:	f7fc fe7f 	bl	8006e4c <HAL_GetREVID>
 800a14e:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a152:	6a21      	ldr	r1, [r4, #32]
 800a154:	4298      	cmp	r0, r3
 800a156:	4b8f      	ldr	r3, [pc, #572]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a158:	f200 80e8 	bhi.w	800a32c <HAL_RCC_OscConfig+0x228>
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	2920      	cmp	r1, #32
 800a160:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800a164:	bf0c      	ite	eq
 800a166:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800a16a:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800a16e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	0719      	lsls	r1, r3, #28
 800a174:	f100 8123 	bmi.w	800a3be <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	069a      	lsls	r2, r3, #26
 800a17c:	f100 8144 	bmi.w	800a408 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	075d      	lsls	r5, r3, #29
 800a184:	d51e      	bpl.n	800a1c4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a186:	4d84      	ldr	r5, [pc, #528]	@ (800a398 <HAL_RCC_OscConfig+0x294>)
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a18e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a190:	f7fc fe44 	bl	8006e1c <HAL_GetTick>
 800a194:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	05da      	lsls	r2, r3, #23
 800a19a:	f140 815a 	bpl.w	800a452 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a19e:	68a3      	ldr	r3, [r4, #8]
 800a1a0:	4d7c      	ldr	r5, [pc, #496]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	f040 815c 	bne.w	800a460 <HAL_RCC_OscConfig+0x35c>
 800a1a8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b0:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800a1b4:	f7fc fe32 	bl	8006e1c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1b8:	4e76      	ldr	r6, [pc, #472]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800a1ba:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1bc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800a1be:	079b      	lsls	r3, r3, #30
 800a1c0:	f140 8174 	bpl.w	800a4ac <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a1c6:	2900      	cmp	r1, #0
 800a1c8:	f040 8177 	bne.w	800a4ba <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	e02b      	b.n	800a228 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1d0:	4a70      	ldr	r2, [pc, #448]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a1d2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a1d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a1da:	2b10      	cmp	r3, #16
 800a1dc:	d005      	beq.n	800a1ea <HAL_RCC_OscConfig+0xe6>
 800a1de:	2b18      	cmp	r3, #24
 800a1e0:	d10b      	bne.n	800a1fa <HAL_RCC_OscConfig+0xf6>
 800a1e2:	f001 0303 	and.w	r3, r1, #3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d107      	bne.n	800a1fa <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	039a      	lsls	r2, r3, #14
 800a1ee:	d590      	bpl.n	800a112 <HAL_RCC_OscConfig+0xe>
 800a1f0:	6863      	ldr	r3, [r4, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d18d      	bne.n	800a112 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	e016      	b.n	800a228 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1fa:	6863      	ldr	r3, [r4, #4]
 800a1fc:	4d65      	ldr	r5, [pc, #404]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a1fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a202:	d112      	bne.n	800a22a <HAL_RCC_OscConfig+0x126>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a20a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a20c:	f7fc fe06 	bl	8006e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a210:	4e60      	ldr	r6, [pc, #384]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800a212:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a214:	6833      	ldr	r3, [r6, #0]
 800a216:	039b      	lsls	r3, r3, #14
 800a218:	f53f af7b 	bmi.w	800a112 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a21c:	f7fc fdfe 	bl	8006e1c <HAL_GetTick>
 800a220:	1b40      	subs	r0, r0, r5
 800a222:	2864      	cmp	r0, #100	@ 0x64
 800a224:	d9f6      	bls.n	800a214 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800a226:	2003      	movs	r0, #3
}
 800a228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a22a:	b9a3      	cbnz	r3, 800a256 <HAL_RCC_OscConfig+0x152>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a232:	602b      	str	r3, [r5, #0]
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a23a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a23c:	f7fc fdee 	bl	8006e1c <HAL_GetTick>
 800a240:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a242:	682b      	ldr	r3, [r5, #0]
 800a244:	039f      	lsls	r7, r3, #14
 800a246:	f57f af64 	bpl.w	800a112 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a24a:	f7fc fde7 	bl	8006e1c <HAL_GetTick>
 800a24e:	1b80      	subs	r0, r0, r6
 800a250:	2864      	cmp	r0, #100	@ 0x64
 800a252:	d9f6      	bls.n	800a242 <HAL_RCC_OscConfig+0x13e>
 800a254:	e7e7      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	d103      	bne.n	800a266 <HAL_RCC_OscConfig+0x162>
 800a25e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	e7ce      	b.n	800a204 <HAL_RCC_OscConfig+0x100>
 800a266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a26a:	602b      	str	r3, [r5, #0]
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a272:	e7ca      	b.n	800a20a <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a274:	4947      	ldr	r1, [pc, #284]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a276:	68e2      	ldr	r2, [r4, #12]
 800a278:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a27a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a27c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800a280:	d003      	beq.n	800a28a <HAL_RCC_OscConfig+0x186>
 800a282:	2b18      	cmp	r3, #24
 800a284:	d12a      	bne.n	800a2dc <HAL_RCC_OscConfig+0x1d8>
 800a286:	0780      	lsls	r0, r0, #30
 800a288:	d128      	bne.n	800a2dc <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a28a:	680b      	ldr	r3, [r1, #0]
 800a28c:	075b      	lsls	r3, r3, #29
 800a28e:	d501      	bpl.n	800a294 <HAL_RCC_OscConfig+0x190>
 800a290:	2a00      	cmp	r2, #0
 800a292:	d0b0      	beq.n	800a1f6 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a294:	4d3f      	ldr	r5, [pc, #252]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	f023 0319 	bic.w	r3, r3, #25
 800a29c:	4313      	orrs	r3, r2
 800a29e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a2a0:	f7fc fdbc 	bl	8006e1c <HAL_GetTick>
 800a2a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	075f      	lsls	r7, r3, #29
 800a2aa:	d511      	bpl.n	800a2d0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ac:	f7fc fdce 	bl	8006e4c <HAL_GetREVID>
 800a2b0:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	4298      	cmp	r0, r3
 800a2b8:	686b      	ldr	r3, [r5, #4]
 800a2ba:	d822      	bhi.n	800a302 <HAL_RCC_OscConfig+0x1fe>
 800a2bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a2c0:	2a40      	cmp	r2, #64	@ 0x40
 800a2c2:	bf0c      	ite	eq
 800a2c4:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800a2c8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a2cc:	606b      	str	r3, [r5, #4]
 800a2ce:	e724      	b.n	800a11a <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2d0:	f7fc fda4 	bl	8006e1c <HAL_GetTick>
 800a2d4:	1b80      	subs	r0, r0, r6
 800a2d6:	2802      	cmp	r0, #2
 800a2d8:	d9e5      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x1a2>
 800a2da:	e7a4      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2dc:	4d2d      	ldr	r5, [pc, #180]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2de:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2e0:	b1a2      	cbz	r2, 800a30c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2e2:	f023 0319 	bic.w	r3, r3, #25
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a2ea:	f7fc fd97 	bl	8006e1c <HAL_GetTick>
 800a2ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	0758      	lsls	r0, r3, #29
 800a2f4:	d4da      	bmi.n	800a2ac <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2f6:	f7fc fd91 	bl	8006e1c <HAL_GetTick>
 800a2fa:	1b80      	subs	r0, r0, r6
 800a2fc:	2802      	cmp	r0, #2
 800a2fe:	d9f7      	bls.n	800a2f0 <HAL_RCC_OscConfig+0x1ec>
 800a300:	e791      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a302:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a306:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a30a:	e7df      	b.n	800a2cc <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800a30c:	f023 0301 	bic.w	r3, r3, #1
 800a310:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a312:	f7fc fd83 	bl	8006e1c <HAL_GetTick>
 800a316:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	0759      	lsls	r1, r3, #29
 800a31c:	f57f aefd 	bpl.w	800a11a <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a320:	f7fc fd7c 	bl	8006e1c <HAL_GetTick>
 800a324:	1b80      	subs	r0, r0, r6
 800a326:	2802      	cmp	r0, #2
 800a328:	d9f6      	bls.n	800a318 <HAL_RCC_OscConfig+0x214>
 800a32a:	e77c      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800a332:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a336:	60da      	str	r2, [r3, #12]
 800a338:	e71a      	b.n	800a170 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a33a:	69e3      	ldr	r3, [r4, #28]
 800a33c:	4d15      	ldr	r5, [pc, #84]	@ (800a394 <HAL_RCC_OscConfig+0x290>)
 800a33e:	b36b      	cbz	r3, 800a39c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a346:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a348:	f7fc fd68 	bl	8006e1c <HAL_GetTick>
 800a34c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a34e:	682b      	ldr	r3, [r5, #0]
 800a350:	05df      	lsls	r7, r3, #23
 800a352:	d511      	bpl.n	800a378 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a354:	f7fc fd7a 	bl	8006e4c <HAL_GetREVID>
 800a358:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a35c:	6a22      	ldr	r2, [r4, #32]
 800a35e:	4298      	cmp	r0, r3
 800a360:	d810      	bhi.n	800a384 <HAL_RCC_OscConfig+0x280>
 800a362:	686b      	ldr	r3, [r5, #4]
 800a364:	2a20      	cmp	r2, #32
 800a366:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a36a:	bf0c      	ite	eq
 800a36c:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800a370:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a374:	606b      	str	r3, [r5, #4]
 800a376:	e6fb      	b.n	800a170 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a378:	f7fc fd50 	bl	8006e1c <HAL_GetTick>
 800a37c:	1b80      	subs	r0, r0, r6
 800a37e:	2802      	cmp	r0, #2
 800a380:	d9e5      	bls.n	800a34e <HAL_RCC_OscConfig+0x24a>
 800a382:	e750      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a384:	68eb      	ldr	r3, [r5, #12]
 800a386:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800a38a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a38e:	60eb      	str	r3, [r5, #12]
 800a390:	e6ee      	b.n	800a170 <HAL_RCC_OscConfig+0x6c>
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
 800a398:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3a2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a3a4:	f7fc fd3a 	bl	8006e1c <HAL_GetTick>
 800a3a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	05d8      	lsls	r0, r3, #23
 800a3ae:	f57f aedf 	bpl.w	800a170 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3b2:	f7fc fd33 	bl	8006e1c <HAL_GetTick>
 800a3b6:	1b80      	subs	r0, r0, r6
 800a3b8:	2802      	cmp	r0, #2
 800a3ba:	d9f6      	bls.n	800a3aa <HAL_RCC_OscConfig+0x2a6>
 800a3bc:	e733      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3be:	6963      	ldr	r3, [r4, #20]
 800a3c0:	4da3      	ldr	r5, [pc, #652]	@ (800a650 <HAL_RCC_OscConfig+0x54c>)
 800a3c2:	b183      	cbz	r3, 800a3e6 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800a3c4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3c6:	f043 0301 	orr.w	r3, r3, #1
 800a3ca:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a3cc:	f7fc fd26 	bl	8006e1c <HAL_GetTick>
 800a3d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3d2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3d4:	079b      	lsls	r3, r3, #30
 800a3d6:	f53f aecf 	bmi.w	800a178 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3da:	f7fc fd1f 	bl	8006e1c <HAL_GetTick>
 800a3de:	1b80      	subs	r0, r0, r6
 800a3e0:	2802      	cmp	r0, #2
 800a3e2:	d9f6      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x2ce>
 800a3e4:	e71f      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800a3e6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a3ee:	f7fc fd15 	bl	8006e1c <HAL_GetTick>
 800a3f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3f4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a3f6:	079f      	lsls	r7, r3, #30
 800a3f8:	f57f aebe 	bpl.w	800a178 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3fc:	f7fc fd0e 	bl	8006e1c <HAL_GetTick>
 800a400:	1b80      	subs	r0, r0, r6
 800a402:	2802      	cmp	r0, #2
 800a404:	d9f6      	bls.n	800a3f4 <HAL_RCC_OscConfig+0x2f0>
 800a406:	e70e      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a408:	69a3      	ldr	r3, [r4, #24]
 800a40a:	4d91      	ldr	r5, [pc, #580]	@ (800a650 <HAL_RCC_OscConfig+0x54c>)
 800a40c:	b183      	cbz	r3, 800a430 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a414:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a416:	f7fc fd01 	bl	8006e1c <HAL_GetTick>
 800a41a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	0498      	lsls	r0, r3, #18
 800a420:	f53f aeae 	bmi.w	800a180 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a424:	f7fc fcfa 	bl	8006e1c <HAL_GetTick>
 800a428:	1b80      	subs	r0, r0, r6
 800a42a:	2802      	cmp	r0, #2
 800a42c:	d9f6      	bls.n	800a41c <HAL_RCC_OscConfig+0x318>
 800a42e:	e6fa      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a436:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a438:	f7fc fcf0 	bl	8006e1c <HAL_GetTick>
 800a43c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	0499      	lsls	r1, r3, #18
 800a442:	f57f ae9d 	bpl.w	800a180 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a446:	f7fc fce9 	bl	8006e1c <HAL_GetTick>
 800a44a:	1b80      	subs	r0, r0, r6
 800a44c:	2802      	cmp	r0, #2
 800a44e:	d9f6      	bls.n	800a43e <HAL_RCC_OscConfig+0x33a>
 800a450:	e6e9      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a452:	f7fc fce3 	bl	8006e1c <HAL_GetTick>
 800a456:	1b80      	subs	r0, r0, r6
 800a458:	2864      	cmp	r0, #100	@ 0x64
 800a45a:	f67f ae9c 	bls.w	800a196 <HAL_RCC_OscConfig+0x92>
 800a45e:	e6e2      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a460:	b9b3      	cbnz	r3, 800a490 <HAL_RCC_OscConfig+0x38c>
 800a462:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a464:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	672b      	str	r3, [r5, #112]	@ 0x70
 800a46e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a470:	f023 0304 	bic.w	r3, r3, #4
 800a474:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800a476:	f7fc fcd1 	bl	8006e1c <HAL_GetTick>
 800a47a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a47c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a47e:	0798      	lsls	r0, r3, #30
 800a480:	f57f aea0 	bpl.w	800a1c4 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a484:	f7fc fcca 	bl	8006e1c <HAL_GetTick>
 800a488:	1b80      	subs	r0, r0, r6
 800a48a:	42b8      	cmp	r0, r7
 800a48c:	d9f6      	bls.n	800a47c <HAL_RCC_OscConfig+0x378>
 800a48e:	e6ca      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a490:	2b05      	cmp	r3, #5
 800a492:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a494:	d103      	bne.n	800a49e <HAL_RCC_OscConfig+0x39a>
 800a496:	f043 0304 	orr.w	r3, r3, #4
 800a49a:	672b      	str	r3, [r5, #112]	@ 0x70
 800a49c:	e684      	b.n	800a1a8 <HAL_RCC_OscConfig+0xa4>
 800a49e:	f023 0301 	bic.w	r3, r3, #1
 800a4a2:	672b      	str	r3, [r5, #112]	@ 0x70
 800a4a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a4a6:	f023 0304 	bic.w	r3, r3, #4
 800a4aa:	e680      	b.n	800a1ae <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ac:	f7fc fcb6 	bl	8006e1c <HAL_GetTick>
 800a4b0:	1b40      	subs	r0, r0, r5
 800a4b2:	42b8      	cmp	r0, r7
 800a4b4:	f67f ae82 	bls.w	800a1bc <HAL_RCC_OscConfig+0xb8>
 800a4b8:	e6b5      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a4ba:	4d65      	ldr	r5, [pc, #404]	@ (800a650 <HAL_RCC_OscConfig+0x54c>)
 800a4bc:	692b      	ldr	r3, [r5, #16]
 800a4be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4c2:	2b18      	cmp	r3, #24
 800a4c4:	d078      	beq.n	800a5b8 <HAL_RCC_OscConfig+0x4b4>
        __HAL_RCC_PLL_DISABLE();
 800a4c6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4c8:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800a4ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a4ce:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4d0:	d165      	bne.n	800a59e <HAL_RCC_OscConfig+0x49a>
        tickstart = HAL_GetTick();
 800a4d2:	f7fc fca3 	bl	8006e1c <HAL_GetTick>
 800a4d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	0199      	lsls	r1, r3, #6
 800a4dc:	d459      	bmi.n	800a592 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4de:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a4e0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a4e2:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800a4e6:	f023 0303 	bic.w	r3, r3, #3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a4ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a4f2:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a4f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	3a01      	subs	r2, #1
 800a4fc:	025b      	lsls	r3, r3, #9
 800a4fe:	0412      	lsls	r2, r2, #16
 800a500:	b29b      	uxth	r3, r3
 800a502:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a506:	4313      	orrs	r3, r2
 800a508:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a50a:	3a01      	subs	r2, #1
 800a50c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a510:	4313      	orrs	r3, r2
 800a512:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a514:	3a01      	subs	r2, #1
 800a516:	0612      	lsls	r2, r2, #24
 800a518:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a51c:	4313      	orrs	r3, r2
 800a51e:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a520:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a522:	f023 0301 	bic.w	r3, r3, #1
 800a526:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a528:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a52a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a52c:	f36f 03cf 	bfc	r3, #3, #13
 800a530:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a534:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a536:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a538:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a53a:	f023 030c 	bic.w	r3, r3, #12
 800a53e:	4313      	orrs	r3, r2
 800a540:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a542:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a544:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a546:	f023 0302 	bic.w	r3, r3, #2
 800a54a:	4313      	orrs	r3, r2
 800a54c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a54e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a554:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a556:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a55c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a55e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a564:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a566:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a568:	f043 0301 	orr.w	r3, r3, #1
 800a56c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a56e:	682b      	ldr	r3, [r5, #0]
 800a570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a574:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a576:	f7fc fc51 	bl	8006e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a57a:	4d35      	ldr	r5, [pc, #212]	@ (800a650 <HAL_RCC_OscConfig+0x54c>)
        tickstart = HAL_GetTick();
 800a57c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a57e:	682b      	ldr	r3, [r5, #0]
 800a580:	019a      	lsls	r2, r3, #6
 800a582:	f53f ae23 	bmi.w	800a1cc <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a586:	f7fc fc49 	bl	8006e1c <HAL_GetTick>
 800a58a:	1b00      	subs	r0, r0, r4
 800a58c:	2802      	cmp	r0, #2
 800a58e:	d9f6      	bls.n	800a57e <HAL_RCC_OscConfig+0x47a>
 800a590:	e649      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a592:	f7fc fc43 	bl	8006e1c <HAL_GetTick>
 800a596:	1b80      	subs	r0, r0, r6
 800a598:	2802      	cmp	r0, #2
 800a59a:	d99d      	bls.n	800a4d8 <HAL_RCC_OscConfig+0x3d4>
 800a59c:	e643      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800a59e:	f7fc fc3d 	bl	8006e1c <HAL_GetTick>
 800a5a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	019b      	lsls	r3, r3, #6
 800a5a8:	f57f ae10 	bpl.w	800a1cc <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5ac:	f7fc fc36 	bl	8006e1c <HAL_GetTick>
 800a5b0:	1b00      	subs	r0, r0, r4
 800a5b2:	2802      	cmp	r0, #2
 800a5b4:	d9f6      	bls.n	800a5a4 <HAL_RCC_OscConfig+0x4a0>
 800a5b6:	e636      	b.n	800a226 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5b8:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a5ba:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a5bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5be:	f43f ae1a 	beq.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5c2:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a5c8:	4281      	cmp	r1, r0
 800a5ca:	f47f ae14 	bne.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5ce:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5d4:	428a      	cmp	r2, r1
 800a5d6:	f47f ae0e 	bne.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a5dc:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800a5e0:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5e2:	4291      	cmp	r1, r2
 800a5e4:	f47f ae07 	bne.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5e8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a5ea:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800a5ee:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a5f0:	4291      	cmp	r1, r2
 800a5f2:	f47f ae00 	bne.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a5f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a5f8:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800a5fc:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a5fe:	4291      	cmp	r1, r2
 800a600:	f47f adf9 	bne.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a604:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a606:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a60a:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a60c:	4293      	cmp	r3, r2
 800a60e:	f47f adf2 	bne.w	800a1f6 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a612:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a614:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a616:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a61a:	429a      	cmp	r2, r3
 800a61c:	f43f add6 	beq.w	800a1cc <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a620:	4d0b      	ldr	r5, [pc, #44]	@ (800a650 <HAL_RCC_OscConfig+0x54c>)
 800a622:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a624:	f023 0301 	bic.w	r3, r3, #1
 800a628:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800a62a:	f7fc fbf7 	bl	8006e1c <HAL_GetTick>
 800a62e:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a630:	f7fc fbf4 	bl	8006e1c <HAL_GetTick>
 800a634:	42b0      	cmp	r0, r6
 800a636:	d0fb      	beq.n	800a630 <HAL_RCC_OscConfig+0x52c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a638:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a63a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a63c:	f36f 03cf 	bfc	r3, #3, #13
 800a640:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a644:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a646:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a648:	f043 0301 	orr.w	r3, r3, #1
 800a64c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a64e:	e5bd      	b.n	800a1cc <HAL_RCC_OscConfig+0xc8>
 800a650:	58024400 	.word	0x58024400

0800a654 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4c23      	ldr	r4, [pc, #140]	@ (800a6e4 <HAL_RCC_MCOConfig+0x90>)
 800a658:	b088      	sub	sp, #32
 800a65a:	460e      	mov	r6, r1
 800a65c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a65e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800a662:	b9f8      	cbnz	r0, 800a6a4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a664:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a668:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a66c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800a66e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a672:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a676:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a680:	2302      	movs	r3, #2
 800a682:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a686:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a688:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a68c:	4816      	ldr	r0, [pc, #88]	@ (800a6e8 <HAL_RCC_MCOConfig+0x94>)
 800a68e:	f7fd fa4b 	bl	8007b28 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a692:	6923      	ldr	r3, [r4, #16]
 800a694:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800a698:	ea43 0106 	orr.w	r1, r3, r6
 800a69c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a69e:	6121      	str	r1, [r4, #16]
  }
}
 800a6a0:	b008      	add	sp, #32
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a6a4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ac:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a6ae:	480f      	ldr	r0, [pc, #60]	@ (800a6ec <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800a6b0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a6b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800a6b8:	f003 0304 	and.w	r3, r3, #4
 800a6bc:	9302      	str	r3, [sp, #8]
 800a6be:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a6cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a6ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a6d0:	f7fd fa2a 	bl	8007b28 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a6d4:	6923      	ldr	r3, [r4, #16]
 800a6d6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800a6da:	ea43 0106 	orr.w	r1, r3, r6
 800a6de:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800a6e2:	e7dc      	b.n	800a69e <HAL_RCC_MCOConfig+0x4a>
 800a6e4:	58024400 	.word	0x58024400
 800a6e8:	58020000 	.word	0x58020000
 800a6ec:	58020800 	.word	0x58020800

0800a6f0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6f0:	4b49      	ldr	r3, [pc, #292]	@ (800a818 <HAL_RCC_GetSysClockFreq+0x128>)
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a6f8:	2a10      	cmp	r2, #16
{
 800a6fa:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6fc:	f000 8088 	beq.w	800a810 <HAL_RCC_GetSysClockFreq+0x120>
 800a700:	2a18      	cmp	r2, #24
 800a702:	d00c      	beq.n	800a71e <HAL_RCC_GetSysClockFreq+0x2e>
 800a704:	2a00      	cmp	r2, #0
 800a706:	f040 8085 	bne.w	800a814 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4843      	ldr	r0, [pc, #268]	@ (800a81c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a70e:	f012 0f20 	tst.w	r2, #32
 800a712:	d003      	beq.n	800a71c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a71a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a71c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a71e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a720:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a722:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a724:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a728:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a72c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a72e:	d0f5      	beq.n	800a71c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a730:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a734:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a738:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a73c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a740:	4362      	muls	r2, r4
 800a742:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
        switch (pllsource)
 800a746:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a74c:	ee06 2a90 	vmov	s13, r2
 800a750:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
        switch (pllsource)
 800a754:	d04e      	beq.n	800a7f4 <HAL_RCC_GetSysClockFreq+0x104>
 800a756:	2902      	cmp	r1, #2
 800a758:	d03e      	beq.n	800a7d8 <HAL_RCC_GetSysClockFreq+0xe8>
 800a75a:	2900      	cmp	r1, #0
 800a75c:	d14a      	bne.n	800a7f4 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	0692      	lsls	r2, r2, #26
 800a762:	d527      	bpl.n	800a7b4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a764:	6819      	ldr	r1, [r3, #0]
 800a766:	4a2d      	ldr	r2, [pc, #180]	@ (800a81c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a768:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a76c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a76e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	ee07 2a90 	vmov	s15, r2
 800a778:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a77c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a780:	ee07 3a10 	vmov	s14, r3
 800a784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a788:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a78c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a790:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a794:	4b20      	ldr	r3, [pc, #128]	@ (800a818 <HAL_RCC_GetSysClockFreq+0x128>)
 800a796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a798:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a79c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a79e:	ee07 3a10 	vmov	s14, r3
 800a7a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a7a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7aa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a7ae:	ee17 0a90 	vmov	r0, s15
 800a7b2:	e7b3      	b.n	800a71c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a7ca:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a820 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ce:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a7d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a7d6:	e7dd      	b.n	800a794 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a7ee:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a824 <HAL_RCC_GetSysClockFreq+0x134>
 800a7f2:	e7ec      	b.n	800a7ce <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a806:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a80a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a828 <HAL_RCC_GetSysClockFreq+0x138>
 800a80e:	e7de      	b.n	800a7ce <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a810:	4806      	ldr	r0, [pc, #24]	@ (800a82c <HAL_RCC_GetSysClockFreq+0x13c>)
 800a812:	e783      	b.n	800a71c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a814:	4806      	ldr	r0, [pc, #24]	@ (800a830 <HAL_RCC_GetSysClockFreq+0x140>)
 800a816:	e781      	b.n	800a71c <HAL_RCC_GetSysClockFreq+0x2c>
 800a818:	58024400 	.word	0x58024400
 800a81c:	03d09000 	.word	0x03d09000
 800a820:	4c742400 	.word	0x4c742400
 800a824:	4bbebc20 	.word	0x4bbebc20
 800a828:	4a742400 	.word	0x4a742400
 800a82c:	017d7840 	.word	0x017d7840
 800a830:	003d0900 	.word	0x003d0900

0800a834 <HAL_RCC_ClockConfig>:
{
 800a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a838:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a83a:	4604      	mov	r4, r0
 800a83c:	b910      	cbnz	r0, 800a844 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a83e:	2001      	movs	r0, #1
}
 800a840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a844:	4a88      	ldr	r2, [pc, #544]	@ (800aa68 <HAL_RCC_ClockConfig+0x234>)
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	428b      	cmp	r3, r1
 800a84e:	f0c0 8093 	bcc.w	800a978 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	075f      	lsls	r7, r3, #29
 800a856:	f100 809b 	bmi.w	800a990 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a85a:	071e      	lsls	r6, r3, #28
 800a85c:	d50b      	bpl.n	800a876 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a85e:	4983      	ldr	r1, [pc, #524]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a860:	6960      	ldr	r0, [r4, #20]
 800a862:	69ca      	ldr	r2, [r1, #28]
 800a864:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a868:	4290      	cmp	r0, r2
 800a86a:	d904      	bls.n	800a876 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a86c:	69ca      	ldr	r2, [r1, #28]
 800a86e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a872:	4302      	orrs	r2, r0
 800a874:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a876:	06d8      	lsls	r0, r3, #27
 800a878:	d50b      	bpl.n	800a892 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a87a:	497c      	ldr	r1, [pc, #496]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a87c:	69a0      	ldr	r0, [r4, #24]
 800a87e:	69ca      	ldr	r2, [r1, #28]
 800a880:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a884:	4290      	cmp	r0, r2
 800a886:	d904      	bls.n	800a892 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a888:	69ca      	ldr	r2, [r1, #28]
 800a88a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a88e:	4302      	orrs	r2, r0
 800a890:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a892:	0699      	lsls	r1, r3, #26
 800a894:	d50b      	bpl.n	800a8ae <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a896:	4975      	ldr	r1, [pc, #468]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a898:	69e0      	ldr	r0, [r4, #28]
 800a89a:	6a0a      	ldr	r2, [r1, #32]
 800a89c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a8a0:	4290      	cmp	r0, r2
 800a8a2:	d904      	bls.n	800a8ae <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a8a4:	6a0a      	ldr	r2, [r1, #32]
 800a8a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a8aa:	4302      	orrs	r2, r0
 800a8ac:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8ae:	079a      	lsls	r2, r3, #30
 800a8b0:	d50b      	bpl.n	800a8ca <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8b2:	496e      	ldr	r1, [pc, #440]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a8b4:	68e0      	ldr	r0, [r4, #12]
 800a8b6:	698a      	ldr	r2, [r1, #24]
 800a8b8:	f002 020f 	and.w	r2, r2, #15
 800a8bc:	4290      	cmp	r0, r2
 800a8be:	d904      	bls.n	800a8ca <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8c0:	698a      	ldr	r2, [r1, #24]
 800a8c2:	f022 020f 	bic.w	r2, r2, #15
 800a8c6:	4302      	orrs	r2, r0
 800a8c8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ca:	07df      	lsls	r7, r3, #31
 800a8cc:	d46e      	bmi.n	800a9ac <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	079e      	lsls	r6, r3, #30
 800a8d2:	f100 80a1 	bmi.w	800aa18 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a8d6:	4964      	ldr	r1, [pc, #400]	@ (800aa68 <HAL_RCC_ClockConfig+0x234>)
 800a8d8:	680a      	ldr	r2, [r1, #0]
 800a8da:	f002 020f 	and.w	r2, r2, #15
 800a8de:	42aa      	cmp	r2, r5
 800a8e0:	f200 80a8 	bhi.w	800aa34 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8e4:	0758      	lsls	r0, r3, #29
 800a8e6:	f100 80b1 	bmi.w	800aa4c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8ea:	0719      	lsls	r1, r3, #28
 800a8ec:	d50b      	bpl.n	800a906 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8ee:	495f      	ldr	r1, [pc, #380]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a8f0:	6960      	ldr	r0, [r4, #20]
 800a8f2:	69ca      	ldr	r2, [r1, #28]
 800a8f4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a8f8:	4290      	cmp	r0, r2
 800a8fa:	d204      	bcs.n	800a906 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8fc:	69ca      	ldr	r2, [r1, #28]
 800a8fe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a902:	4302      	orrs	r2, r0
 800a904:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a906:	06da      	lsls	r2, r3, #27
 800a908:	d50b      	bpl.n	800a922 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a90a:	4958      	ldr	r1, [pc, #352]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a90c:	69a0      	ldr	r0, [r4, #24]
 800a90e:	69ca      	ldr	r2, [r1, #28]
 800a910:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a914:	4290      	cmp	r0, r2
 800a916:	d204      	bcs.n	800a922 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a918:	69ca      	ldr	r2, [r1, #28]
 800a91a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a91e:	4302      	orrs	r2, r0
 800a920:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a922:	069b      	lsls	r3, r3, #26
 800a924:	d50b      	bpl.n	800a93e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a926:	4a51      	ldr	r2, [pc, #324]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a928:	69e1      	ldr	r1, [r4, #28]
 800a92a:	6a13      	ldr	r3, [r2, #32]
 800a92c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a930:	4299      	cmp	r1, r3
 800a932:	d204      	bcs.n	800a93e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a934:	6a13      	ldr	r3, [r2, #32]
 800a936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a93a:	430b      	orrs	r3, r1
 800a93c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a93e:	f7ff fed7 	bl	800a6f0 <HAL_RCC_GetSysClockFreq>
 800a942:	494a      	ldr	r1, [pc, #296]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a944:	4a4a      	ldr	r2, [pc, #296]	@ (800aa70 <HAL_RCC_ClockConfig+0x23c>)
 800a946:	698b      	ldr	r3, [r1, #24]
 800a948:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a94c:	5cd3      	ldrb	r3, [r2, r3]
 800a94e:	f003 031f 	and.w	r3, r3, #31
 800a952:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a954:	698b      	ldr	r3, [r1, #24]
 800a956:	f003 030f 	and.w	r3, r3, #15
 800a95a:	5cd3      	ldrb	r3, [r2, r3]
 800a95c:	4a45      	ldr	r2, [pc, #276]	@ (800aa74 <HAL_RCC_ClockConfig+0x240>)
 800a95e:	f003 031f 	and.w	r3, r3, #31
 800a962:	fa20 f303 	lsr.w	r3, r0, r3
 800a966:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800a968:	4b43      	ldr	r3, [pc, #268]	@ (800aa78 <HAL_RCC_ClockConfig+0x244>)
 800a96a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800a96c:	4b43      	ldr	r3, [pc, #268]	@ (800aa7c <HAL_RCC_ClockConfig+0x248>)
}
 800a96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	f7f7 b89a 	b.w	8001aac <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a978:	6813      	ldr	r3, [r2, #0]
 800a97a:	f023 030f 	bic.w	r3, r3, #15
 800a97e:	430b      	orrs	r3, r1
 800a980:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a982:	6813      	ldr	r3, [r2, #0]
 800a984:	f003 030f 	and.w	r3, r3, #15
 800a988:	428b      	cmp	r3, r1
 800a98a:	f47f af58 	bne.w	800a83e <HAL_RCC_ClockConfig+0xa>
 800a98e:	e760      	b.n	800a852 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a990:	4936      	ldr	r1, [pc, #216]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a992:	6920      	ldr	r0, [r4, #16]
 800a994:	698a      	ldr	r2, [r1, #24]
 800a996:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a99a:	4290      	cmp	r0, r2
 800a99c:	f67f af5d 	bls.w	800a85a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9a0:	698a      	ldr	r2, [r1, #24]
 800a9a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a9a6:	4302      	orrs	r2, r0
 800a9a8:	618a      	str	r2, [r1, #24]
 800a9aa:	e756      	b.n	800a85a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a9ac:	4b2f      	ldr	r3, [pc, #188]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800a9ae:	68a1      	ldr	r1, [r4, #8]
 800a9b0:	699a      	ldr	r2, [r3, #24]
 800a9b2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9ba:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9bc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9be:	2902      	cmp	r1, #2
 800a9c0:	d11d      	bne.n	800a9fe <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9c2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9c6:	f43f af3a 	beq.w	800a83e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9ca:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9cc:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9d0:	4f26      	ldr	r7, [pc, #152]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9d2:	f022 0207 	bic.w	r2, r2, #7
 800a9d6:	430a      	orrs	r2, r1
 800a9d8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800a9da:	f7fc fa1f 	bl	8006e1c <HAL_GetTick>
 800a9de:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9e8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a9ec:	f43f af6f 	beq.w	800a8ce <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9f0:	f7fc fa14 	bl	8006e1c <HAL_GetTick>
 800a9f4:	1b80      	subs	r0, r0, r6
 800a9f6:	4540      	cmp	r0, r8
 800a9f8:	d9f2      	bls.n	800a9e0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a9fa:	2003      	movs	r0, #3
 800a9fc:	e720      	b.n	800a840 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9fe:	2903      	cmp	r1, #3
 800aa00:	d102      	bne.n	800aa08 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa02:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800aa06:	e7de      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa08:	2901      	cmp	r1, #1
 800aa0a:	d102      	bne.n	800aa12 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa0c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800aa10:	e7d9      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa12:	f012 0f04 	tst.w	r2, #4
 800aa16:	e7d6      	b.n	800a9c6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa18:	4914      	ldr	r1, [pc, #80]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800aa1a:	68e0      	ldr	r0, [r4, #12]
 800aa1c:	698a      	ldr	r2, [r1, #24]
 800aa1e:	f002 020f 	and.w	r2, r2, #15
 800aa22:	4290      	cmp	r0, r2
 800aa24:	f4bf af57 	bcs.w	800a8d6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa28:	698a      	ldr	r2, [r1, #24]
 800aa2a:	f022 020f 	bic.w	r2, r2, #15
 800aa2e:	4302      	orrs	r2, r0
 800aa30:	618a      	str	r2, [r1, #24]
 800aa32:	e750      	b.n	800a8d6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa34:	680a      	ldr	r2, [r1, #0]
 800aa36:	f022 020f 	bic.w	r2, r2, #15
 800aa3a:	432a      	orrs	r2, r5
 800aa3c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa3e:	680a      	ldr	r2, [r1, #0]
 800aa40:	f002 020f 	and.w	r2, r2, #15
 800aa44:	42aa      	cmp	r2, r5
 800aa46:	f47f aefa 	bne.w	800a83e <HAL_RCC_ClockConfig+0xa>
 800aa4a:	e74b      	b.n	800a8e4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa4c:	4907      	ldr	r1, [pc, #28]	@ (800aa6c <HAL_RCC_ClockConfig+0x238>)
 800aa4e:	6920      	ldr	r0, [r4, #16]
 800aa50:	698a      	ldr	r2, [r1, #24]
 800aa52:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800aa56:	4290      	cmp	r0, r2
 800aa58:	f4bf af47 	bcs.w	800a8ea <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa5c:	698a      	ldr	r2, [r1, #24]
 800aa5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800aa62:	4302      	orrs	r2, r0
 800aa64:	618a      	str	r2, [r1, #24]
 800aa66:	e740      	b.n	800a8ea <HAL_RCC_ClockConfig+0xb6>
 800aa68:	52002000 	.word	0x52002000
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	08026820 	.word	0x08026820
 800aa74:	24000068 	.word	0x24000068
 800aa78:	2400006c 	.word	0x2400006c
 800aa7c:	24000074 	.word	0x24000074

0800aa80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa80:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa82:	f7ff fe35 	bl	800a6f0 <HAL_RCC_GetSysClockFreq>
 800aa86:	4a0b      	ldr	r2, [pc, #44]	@ (800aab4 <HAL_RCC_GetHCLKFreq+0x34>)
 800aa88:	490b      	ldr	r1, [pc, #44]	@ (800aab8 <HAL_RCC_GetHCLKFreq+0x38>)
 800aa8a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa8c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa8e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa92:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa96:	5ccb      	ldrb	r3, [r1, r3]
 800aa98:	f003 031f 	and.w	r3, r3, #31
 800aa9c:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aaa0:	5c88      	ldrb	r0, [r1, r2]
 800aaa2:	4a06      	ldr	r2, [pc, #24]	@ (800aabc <HAL_RCC_GetHCLKFreq+0x3c>)
 800aaa4:	f000 001f 	and.w	r0, r0, #31
 800aaa8:	fa23 f000 	lsr.w	r0, r3, r0
 800aaac:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aaae:	4a04      	ldr	r2, [pc, #16]	@ (800aac0 <HAL_RCC_GetHCLKFreq+0x40>)
 800aab0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800aab2:	bd08      	pop	{r3, pc}
 800aab4:	58024400 	.word	0x58024400
 800aab8:	08026820 	.word	0x08026820
 800aabc:	24000068 	.word	0x24000068
 800aac0:	2400006c 	.word	0x2400006c

0800aac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aac4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aac6:	f7ff ffdb 	bl	800aa80 <HAL_RCC_GetHCLKFreq>
 800aaca:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800aacc:	4a05      	ldr	r2, [pc, #20]	@ (800aae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aace:	69db      	ldr	r3, [r3, #28]
 800aad0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800aad4:	5cd3      	ldrb	r3, [r2, r3]
 800aad6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aada:	40d8      	lsrs	r0, r3
 800aadc:	bd08      	pop	{r3, pc}
 800aade:	bf00      	nop
 800aae0:	58024400 	.word	0x58024400
 800aae4:	08026820 	.word	0x08026820

0800aae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aae8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aaea:	f7ff ffc9 	bl	800aa80 <HAL_RCC_GetHCLKFreq>
 800aaee:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800aaf0:	4a05      	ldr	r2, [pc, #20]	@ (800ab08 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800aaf8:	5cd3      	ldrb	r3, [r2, r3]
 800aafa:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aafe:	40d8      	lsrs	r0, r3
 800ab00:	bd08      	pop	{r3, pc}
 800ab02:	bf00      	nop
 800ab04:	58024400 	.word	0x58024400
 800ab08:	08026820 	.word	0x08026820

0800ab0c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ab0c:	233f      	movs	r3, #63	@ 0x3f
 800ab0e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ab10:	4b11      	ldr	r3, [pc, #68]	@ (800ab58 <HAL_RCC_GetClockConfig+0x4c>)
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	f002 0207 	and.w	r2, r2, #7
 800ab18:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ab1a:	699a      	ldr	r2, [r3, #24]
 800ab1c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800ab20:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ab22:	699a      	ldr	r2, [r3, #24]
 800ab24:	f002 020f 	and.w	r2, r2, #15
 800ab28:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ab2a:	699a      	ldr	r2, [r3, #24]
 800ab2c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ab30:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ab32:	69da      	ldr	r2, [r3, #28]
 800ab34:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800ab38:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ab3a:	69da      	ldr	r2, [r3, #28]
 800ab3c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800ab40:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ab48:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ab4a:	4b04      	ldr	r3, [pc, #16]	@ (800ab5c <HAL_RCC_GetClockConfig+0x50>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	600b      	str	r3, [r1, #0]
}
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	58024400 	.word	0x58024400
 800ab5c:	52002000 	.word	0x52002000

0800ab60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab62:	4c39      	ldr	r4, [pc, #228]	@ (800ac48 <RCCEx_PLL2_Config+0xe8>)
{
 800ab64:	4606      	mov	r6, r0
 800ab66:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ab68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ab6a:	f003 0303 	and.w	r3, r3, #3
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d067      	beq.n	800ac42 <RCCEx_PLL2_Config+0xe2>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab78:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab7a:	f7fc f94f 	bl	8006e1c <HAL_GetTick>
 800ab7e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	011a      	lsls	r2, r3, #4
 800ab84:	d449      	bmi.n	800ac1a <RCCEx_PLL2_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ab86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ab88:	6832      	ldr	r2, [r6, #0]
 800ab8a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ab8e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ab92:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab94:	68b3      	ldr	r3, [r6, #8]
 800ab96:	68f2      	ldr	r2, [r6, #12]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	3a01      	subs	r2, #1
 800ab9c:	025b      	lsls	r3, r3, #9
 800ab9e:	0412      	lsls	r2, r2, #16
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800aba6:	4313      	orrs	r3, r2
 800aba8:	6872      	ldr	r2, [r6, #4]
 800abaa:	3a01      	subs	r2, #1
 800abac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800abb0:	4313      	orrs	r3, r2
 800abb2:	6932      	ldr	r2, [r6, #16]
 800abb4:	3a01      	subs	r2, #1
 800abb6:	0612      	lsls	r2, r2, #24
 800abb8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800abbc:	4313      	orrs	r3, r2
 800abbe:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800abc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800abc2:	6972      	ldr	r2, [r6, #20]
 800abc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800abc8:	4313      	orrs	r3, r2
 800abca:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800abcc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800abce:	69b2      	ldr	r2, [r6, #24]
 800abd0:	f023 0320 	bic.w	r3, r3, #32
 800abd4:	4313      	orrs	r3, r2
 800abd6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800abd8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800abda:	f023 0310 	bic.w	r3, r3, #16
 800abde:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800abe0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800abe2:	69f2      	ldr	r2, [r6, #28]
 800abe4:	f36f 03cf 	bfc	r3, #3, #13
 800abe8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800abec:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800abee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800abf0:	f043 0310 	orr.w	r3, r3, #16
 800abf4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800abf6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800abf8:	b9b5      	cbnz	r5, 800ac28 <RCCEx_PLL2_Config+0xc8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800abfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800abfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ac00:	4c11      	ldr	r4, [pc, #68]	@ (800ac48 <RCCEx_PLL2_Config+0xe8>)
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ac08:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac0a:	f7fc f907 	bl	8006e1c <HAL_GetTick>
 800ac0e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	d50f      	bpl.n	800ac36 <RCCEx_PLL2_Config+0xd6>
    }

  }


  return status;
 800ac16:	2000      	movs	r0, #0
 800ac18:	e005      	b.n	800ac26 <RCCEx_PLL2_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac1a:	f7fc f8ff 	bl	8006e1c <HAL_GetTick>
 800ac1e:	1bc0      	subs	r0, r0, r7
 800ac20:	2802      	cmp	r0, #2
 800ac22:	d9ad      	bls.n	800ab80 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800ac24:	2003      	movs	r0, #3
}
 800ac26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ac28:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ac2a:	bf0c      	ite	eq
 800ac2c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ac30:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800ac34:	e7e3      	b.n	800abfe <RCCEx_PLL2_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac36:	f7fc f8f1 	bl	8006e1c <HAL_GetTick>
 800ac3a:	1b40      	subs	r0, r0, r5
 800ac3c:	2802      	cmp	r0, #2
 800ac3e:	d9e7      	bls.n	800ac10 <RCCEx_PLL2_Config+0xb0>
 800ac40:	e7f0      	b.n	800ac24 <RCCEx_PLL2_Config+0xc4>
    return HAL_ERROR;
 800ac42:	2001      	movs	r0, #1
 800ac44:	e7ef      	b.n	800ac26 <RCCEx_PLL2_Config+0xc6>
 800ac46:	bf00      	nop
 800ac48:	58024400 	.word	0x58024400

0800ac4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac4e:	4c39      	ldr	r4, [pc, #228]	@ (800ad34 <RCCEx_PLL3_Config+0xe8>)
{
 800ac50:	4606      	mov	r6, r0
 800ac52:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	2b03      	cmp	r3, #3
 800ac5c:	d067      	beq.n	800ad2e <RCCEx_PLL3_Config+0xe2>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac64:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac66:	f7fc f8d9 	bl	8006e1c <HAL_GetTick>
 800ac6a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	009a      	lsls	r2, r3, #2
 800ac70:	d449      	bmi.n	800ad06 <RCCEx_PLL3_Config+0xba>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac72:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ac74:	6832      	ldr	r2, [r6, #0]
 800ac76:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800ac7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ac7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac80:	68b3      	ldr	r3, [r6, #8]
 800ac82:	68f2      	ldr	r2, [r6, #12]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	3a01      	subs	r2, #1
 800ac88:	025b      	lsls	r3, r3, #9
 800ac8a:	0412      	lsls	r2, r2, #16
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ac92:	4313      	orrs	r3, r2
 800ac94:	6872      	ldr	r2, [r6, #4]
 800ac96:	3a01      	subs	r2, #1
 800ac98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	6932      	ldr	r2, [r6, #16]
 800aca0:	3a01      	subs	r2, #1
 800aca2:	0612      	lsls	r2, r2, #24
 800aca4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800aca8:	4313      	orrs	r3, r2
 800acaa:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800acac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acae:	6972      	ldr	r2, [r6, #20]
 800acb0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800acb4:	4313      	orrs	r3, r2
 800acb6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800acb8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acba:	69b2      	ldr	r2, [r6, #24]
 800acbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acc0:	4313      	orrs	r3, r2
 800acc2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800acc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acca:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800accc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800acce:	69f2      	ldr	r2, [r6, #28]
 800acd0:	f36f 03cf 	bfc	r3, #3, #13
 800acd4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800acd8:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800acda:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800acdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ace0:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ace2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ace4:	b9b5      	cbnz	r5, 800ad14 <RCCEx_PLL3_Config+0xc8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ace6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800acea:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800acec:	4c11      	ldr	r4, [pc, #68]	@ (800ad34 <RCCEx_PLL3_Config+0xe8>)
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acf4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acf6:	f7fc f891 	bl	8006e1c <HAL_GetTick>
 800acfa:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	d50f      	bpl.n	800ad22 <RCCEx_PLL3_Config+0xd6>
    }

  }


  return status;
 800ad02:	2000      	movs	r0, #0
 800ad04:	e005      	b.n	800ad12 <RCCEx_PLL3_Config+0xc6>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad06:	f7fc f889 	bl	8006e1c <HAL_GetTick>
 800ad0a:	1bc0      	subs	r0, r0, r7
 800ad0c:	2802      	cmp	r0, #2
 800ad0e:	d9ad      	bls.n	800ac6c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ad10:	2003      	movs	r0, #3
}
 800ad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad14:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ad16:	bf0c      	ite	eq
 800ad18:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ad1c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800ad20:	e7e3      	b.n	800acea <RCCEx_PLL3_Config+0x9e>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad22:	f7fc f87b 	bl	8006e1c <HAL_GetTick>
 800ad26:	1b40      	subs	r0, r0, r5
 800ad28:	2802      	cmp	r0, #2
 800ad2a:	d9e7      	bls.n	800acfc <RCCEx_PLL3_Config+0xb0>
 800ad2c:	e7f0      	b.n	800ad10 <RCCEx_PLL3_Config+0xc4>
    return HAL_ERROR;
 800ad2e:	2001      	movs	r0, #1
 800ad30:	e7ef      	b.n	800ad12 <RCCEx_PLL3_Config+0xc6>
 800ad32:	bf00      	nop
 800ad34:	58024400 	.word	0x58024400

0800ad38 <HAL_RCCEx_PeriphCLKConfig>:
{
 800ad38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad3c:	6803      	ldr	r3, [r0, #0]
{
 800ad3e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad40:	011c      	lsls	r4, r3, #4
 800ad42:	d51e      	bpl.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad44:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800ad46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad4a:	d02a      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ad4c:	d80f      	bhi.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x36>
 800ad4e:	b1d3      	cbz	r3, 800ad86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800ad50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad54:	d01d      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800ad56:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	05d8      	lsls	r0, r3, #23
 800ad5c:	d54f      	bpl.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad5e:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800ad60:	2b04      	cmp	r3, #4
 800ad62:	d84b      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800ad64:	e8df f003 	tbb	[pc, r3]
 800ad68:	27443d22 	.word	0x27443d22
 800ad6c:	27          	.byte	0x27
 800ad6d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad72:	d1f0      	bne.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad74:	4a86      	ldr	r2, [pc, #536]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ad76:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800ad78:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ad7a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad82:	2600      	movs	r6, #0
 800ad84:	e7e8      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad86:	4a82      	ldr	r2, [pc, #520]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ad88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ad90:	e7f0      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad92:	2102      	movs	r1, #2
 800ad94:	3008      	adds	r0, #8
 800ad96:	f7ff fee3 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad9a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d1db      	bne.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800ada0:	e7e8      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ada2:	2102      	movs	r1, #2
 800ada4:	3028      	adds	r0, #40	@ 0x28
 800ada6:	f7ff ff51 	bl	800ac4c <RCCEx_PLL3_Config>
 800adaa:	e7f6      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adac:	4a78      	ldr	r2, [pc, #480]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800adae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800adb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800adb6:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800adb8:	bb1c      	cbnz	r4, 800ae02 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800adba:	4a75      	ldr	r2, [pc, #468]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800adbc:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800adbe:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800adc0:	f023 0307 	bic.w	r3, r3, #7
 800adc4:	430b      	orrs	r3, r1
 800adc6:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	0599      	lsls	r1, r3, #22
 800adcc:	d528      	bpl.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800adce:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800add0:	2b80      	cmp	r3, #128	@ 0x80
 800add2:	d043      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x124>
 800add4:	d817      	bhi.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800add6:	b3a3      	cbz	r3, 800ae42 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800add8:	2b40      	cmp	r3, #64	@ 0x40
 800adda:	d038      	beq.n	800ae4e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800addc:	2601      	movs	r6, #1
 800adde:	4634      	mov	r4, r6
 800ade0:	e01e      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ade2:	2100      	movs	r1, #0
 800ade4:	f105 0008 	add.w	r0, r5, #8
 800ade8:	f7ff feba 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adec:	4604      	mov	r4, r0
        break;
 800adee:	e7e3      	b.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adf0:	2100      	movs	r1, #0
 800adf2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800adf6:	f7ff ff29 	bl	800ac4c <RCCEx_PLL3_Config>
 800adfa:	e7f7      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800adfc:	2601      	movs	r6, #1
 800adfe:	4634      	mov	r4, r6
 800ae00:	e7e2      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
      status = ret;
 800ae02:	4626      	mov	r6, r4
 800ae04:	e7e0      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800ae06:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae08:	d002      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800ae0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae0e:	d1e5      	bne.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800ae10:	bb54      	cbnz	r4, 800ae68 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ae12:	4a5f      	ldr	r2, [pc, #380]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ae14:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ae16:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ae18:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae20:	682b      	ldr	r3, [r5, #0]
 800ae22:	055a      	lsls	r2, r3, #21
 800ae24:	d531      	bpl.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae26:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800ae2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae2e:	d049      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ae30:	d81c      	bhi.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x134>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d039      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x172>
 800ae36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae3a:	d03c      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ae3c:	2601      	movs	r6, #1
 800ae3e:	4634      	mov	r4, r6
 800ae40:	e023      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae42:	4a53      	ldr	r2, [pc, #332]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ae44:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ae4c:	e7e0      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f105 0008 	add.w	r0, r5, #8
 800ae54:	f7ff fe84 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae58:	4604      	mov	r4, r0
        break;
 800ae5a:	e7d9      	b.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ae62:	f7ff fef3 	bl	800ac4c <RCCEx_PLL3_Config>
 800ae66:	e7f7      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x120>
      status = ret;
 800ae68:	4626      	mov	r6, r4
 800ae6a:	e7d9      	b.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae70:	d002      	beq.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800ae72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae76:	d1e1      	bne.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800ae78:	bb54      	cbnz	r4, 800aed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ae7a:	4a45      	ldr	r2, [pc, #276]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ae7c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800ae80:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ae82:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800ae86:	430b      	orrs	r3, r1
 800ae88:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ae8a:	682b      	ldr	r3, [r5, #0]
 800ae8c:	051b      	lsls	r3, r3, #20
 800ae8e:	d530      	bpl.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800ae90:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800ae94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae98:	d045      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ae9a:	d81b      	bhi.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800ae9c:	b3b3      	cbz	r3, 800af0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ae9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aea2:	d039      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800aea4:	2601      	movs	r6, #1
 800aea6:	4634      	mov	r4, r6
 800aea8:	e023      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeaa:	4a39      	ldr	r2, [pc, #228]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aeac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aeae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aeb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800aeb4:	e7e0      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	f105 0008 	add.w	r0, r5, #8
 800aebc:	f7ff fe50 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aec0:	4604      	mov	r4, r0
        break;
 800aec2:	e7d9      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aec4:	2100      	movs	r1, #0
 800aec6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aeca:	f7ff febf 	bl	800ac4c <RCCEx_PLL3_Config>
 800aece:	e7f7      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      status = ret;
 800aed0:	4626      	mov	r6, r4
 800aed2:	e7da      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800aed4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aed8:	d002      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aeda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aede:	d1e1      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800aee0:	bb3c      	cbnz	r4, 800af32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aee2:	4a2b      	ldr	r2, [pc, #172]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aee4:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800aee8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aeea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800aeee:	430b      	orrs	r3, r1
 800aef0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	019f      	lsls	r7, r3, #6
 800aef6:	d528      	bpl.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800aef8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800aefa:	2b20      	cmp	r3, #32
 800aefc:	d03e      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800aefe:	d81a      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800af00:	b1db      	cbz	r3, 800af3a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800af02:	2b10      	cmp	r3, #16
 800af04:	d034      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800af06:	2601      	movs	r6, #1
 800af08:	4634      	mov	r4, r6
 800af0a:	e01e      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af0c:	4a20      	ldr	r2, [pc, #128]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af0e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800af10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800af16:	e7e3      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af18:	2100      	movs	r1, #0
 800af1a:	f105 0008 	add.w	r0, r5, #8
 800af1e:	f7ff fe1f 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af22:	4604      	mov	r4, r0
        break;
 800af24:	e7dc      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af26:	2100      	movs	r1, #0
 800af28:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af2c:	f7ff fe8e 	bl	800ac4c <RCCEx_PLL3_Config>
 800af30:	e7f7      	b.n	800af22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      status = ret;
 800af32:	4626      	mov	r6, r4
 800af34:	e7dd      	b.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800af36:	2b30      	cmp	r3, #48	@ 0x30
 800af38:	d1e5      	bne.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800af3a:	bb34      	cbnz	r4, 800af8a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af3c:	4a14      	ldr	r2, [pc, #80]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af3e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800af40:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800af42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800af46:	430b      	orrs	r3, r1
 800af48:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800af4a:	682b      	ldr	r3, [r5, #0]
 800af4c:	04d8      	lsls	r0, r3, #19
 800af4e:	d530      	bpl.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800af50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af56:	f000 8095 	beq.w	800b084 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800af5a:	d81b      	bhi.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 8084 	beq.w	800b06a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800af62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af66:	f000 8086 	beq.w	800b076 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800af6a:	2601      	movs	r6, #1
 800af6c:	4634      	mov	r4, r6
 800af6e:	e020      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af70:	4a07      	ldr	r2, [pc, #28]	@ (800af90 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800af72:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800af74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800af7a:	e7de      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af7c:	2102      	movs	r1, #2
 800af7e:	f105 0008 	add.w	r0, r5, #8
 800af82:	f7ff fded 	bl	800ab60 <RCCEx_PLL2_Config>
 800af86:	4604      	mov	r4, r0
        break;
 800af88:	e7d7      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x202>
      status = ret;
 800af8a:	4626      	mov	r6, r4
 800af8c:	e7dd      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800af8e:	bf00      	nop
 800af90:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800af94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800af98:	d002      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800af9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af9e:	d1e4      	bne.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800afa0:	2c00      	cmp	r4, #0
 800afa2:	d175      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800afa4:	4a93      	ldr	r2, [pc, #588]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800afa6:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800afa8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800afaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afae:	430b      	orrs	r3, r1
 800afb0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800afb2:	682b      	ldr	r3, [r5, #0]
 800afb4:	0499      	lsls	r1, r3, #18
 800afb6:	d50c      	bpl.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800afb8:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800afba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afbe:	f000 8081 	beq.w	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800afc2:	d867      	bhi.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d06d      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800afc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afcc:	d073      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afce:	2601      	movs	r6, #1
 800afd0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800afd2:	682b      	ldr	r3, [r5, #0]
 800afd4:	045a      	lsls	r2, r3, #17
 800afd6:	d50e      	bpl.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800afd8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe0:	f000 8091 	beq.w	800b106 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800afe4:	d876      	bhi.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d07c      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800afea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afee:	f000 8083 	beq.w	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800aff2:	2601      	movs	r6, #1
 800aff4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	015b      	lsls	r3, r3, #5
 800affa:	d515      	bpl.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800affc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800affe:	b14b      	cbz	r3, 800b014 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800b000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b004:	f040 8087 	bne.w	800b116 <HAL_RCCEx_PeriphCLKConfig+0x3de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b008:	2101      	movs	r1, #1
 800b00a:	f105 0008 	add.w	r0, r5, #8
 800b00e:	f7ff fda7 	bl	800ab60 <RCCEx_PLL2_Config>
 800b012:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b014:	2c00      	cmp	r4, #0
 800b016:	f040 8081 	bne.w	800b11c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800b01a:	4a76      	ldr	r2, [pc, #472]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b01c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800b01e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b024:	430b      	orrs	r3, r1
 800b026:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	041f      	lsls	r7, r3, #16
 800b02c:	d511      	bpl.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800b02e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b030:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b034:	d074      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b03a:	d077      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d17c      	bne.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x402>
    if (ret == HAL_OK)
 800b040:	2c00      	cmp	r4, #0
 800b042:	d17d      	bne.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b044:	4a6b      	ldr	r2, [pc, #428]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b046:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800b048:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b04a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800b04e:	430b      	orrs	r3, r1
 800b050:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b052:	682b      	ldr	r3, [r5, #0]
 800b054:	01d8      	lsls	r0, r3, #7
 800b056:	f140 8083 	bpl.w	800b160 <HAL_RCCEx_PeriphCLKConfig+0x428>
    switch (PeriphClkInit->FmcClockSelection)
 800b05a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	f200 80c4 	bhi.w	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b062:	e8df f003 	tbb	[pc, r3]
 800b066:	6f74      	.short	0x6f74
 800b068:	74bb      	.short	0x74bb
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b06a:	4a62      	ldr	r2, [pc, #392]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b06c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b06e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b072:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b074:	e794      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b076:	2100      	movs	r1, #0
 800b078:	f105 0008 	add.w	r0, r5, #8
 800b07c:	f7ff fd70 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b080:	4604      	mov	r4, r0
        break;
 800b082:	e78d      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b084:	2100      	movs	r1, #0
 800b086:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b08a:	f7ff fddf 	bl	800ac4c <RCCEx_PLL3_Config>
 800b08e:	e7f7      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x348>
      status = ret;
 800b090:	4626      	mov	r6, r4
 800b092:	e78e      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b094:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b098:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800b09c:	d002      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800b09e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0a2:	d194      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800b0a4:	b9a4      	cbnz	r4, 800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b0a6:	4a53      	ldr	r2, [pc, #332]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b0a8:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800b0aa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800b0ac:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800b0b0:	430b      	orrs	r3, r1
 800b0b2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b0b4:	e78d      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	f105 0008 	add.w	r0, r5, #8
 800b0bc:	f7ff fd50 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0c0:	4604      	mov	r4, r0
        break;
 800b0c2:	e7ef      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b0ca:	f7ff fdbf 	bl	800ac4c <RCCEx_PLL3_Config>
 800b0ce:	e7f7      	b.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
      status = ret;
 800b0d0:	4626      	mov	r6, r4
 800b0d2:	e77e      	b.n	800afd2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0d8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b0dc:	d002      	beq.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b0de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0e2:	d186      	bne.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800b0e4:	b9ac      	cbnz	r4, 800b112 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0e6:	4a43      	ldr	r2, [pc, #268]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b0e8:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800b0ec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b0ee:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b0f2:	430b      	orrs	r3, r1
 800b0f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0f6:	e77e      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	f105 0008 	add.w	r0, r5, #8
 800b0fe:	f7ff fd2f 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b102:	4604      	mov	r4, r0
        break;
 800b104:	e7ee      	b.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b106:	2101      	movs	r1, #1
 800b108:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b10c:	f7ff fd9e 	bl	800ac4c <RCCEx_PLL3_Config>
 800b110:	e7f7      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      status = ret;
 800b112:	4626      	mov	r6, r4
 800b114:	e76f      	b.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800b116:	2601      	movs	r6, #1
 800b118:	4634      	mov	r4, r6
 800b11a:	e785      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      status = ret;
 800b11c:	4626      	mov	r6, r4
 800b11e:	e783      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b120:	4a34      	ldr	r2, [pc, #208]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b122:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b128:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800b12a:	e789      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b12c:	2101      	movs	r1, #1
 800b12e:	f105 0008 	add.w	r0, r5, #8
 800b132:	f7ff fd15 	bl	800ab60 <RCCEx_PLL2_Config>
 800b136:	4604      	mov	r4, r0
        break;
 800b138:	e782      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800b13a:	2601      	movs	r6, #1
 800b13c:	4634      	mov	r4, r6
 800b13e:	e788      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      status = ret;
 800b140:	4626      	mov	r6, r4
 800b142:	e786      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b144:	4a2b      	ldr	r2, [pc, #172]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b146:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b14c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b14e:	2c00      	cmp	r4, #0
 800b150:	d14e      	bne.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b152:	4a28      	ldr	r2, [pc, #160]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b154:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800b156:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	430b      	orrs	r3, r1
 800b15e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b160:	682b      	ldr	r3, [r5, #0]
 800b162:	0259      	lsls	r1, r3, #9
 800b164:	d554      	bpl.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b166:	4f24      	ldr	r7, [pc, #144]	@ (800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b16e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b170:	f7fb fe54 	bl	8006e1c <HAL_GetTick>
 800b174:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	05da      	lsls	r2, r3, #23
 800b17a:	d541      	bpl.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
    if (ret == HAL_OK)
 800b17c:	2c00      	cmp	r4, #0
 800b17e:	d174      	bne.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x532>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b180:	4b1c      	ldr	r3, [pc, #112]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b182:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800b186:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b188:	4042      	eors	r2, r0
 800b18a:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800b18e:	d00b      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x470>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b190:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b192:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b194:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b198:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800b19c:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b19e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b1a0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800b1a4:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800b1a6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b1a8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b1ac:	d048      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x508>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1ae:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800b1b2:	4910      	ldr	r1, [pc, #64]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b1b4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800b1b8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800b1bc:	d151      	bne.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b1be:	6908      	ldr	r0, [r1, #16]
 800b1c0:	4a0e      	ldr	r2, [pc, #56]	@ (800b1fc <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
 800b1c2:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800b1c6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800b1ca:	4302      	orrs	r2, r0
 800b1cc:	610a      	str	r2, [r1, #16]
 800b1ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1d2:	4a08      	ldr	r2, [pc, #32]	@ (800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 800b1d4:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6713      	str	r3, [r2, #112]	@ 0x70
 800b1da:	e019      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1dc:	2102      	movs	r1, #2
 800b1de:	f105 0008 	add.w	r0, r5, #8
 800b1e2:	f7ff fcbd 	bl	800ab60 <RCCEx_PLL2_Config>
 800b1e6:	4604      	mov	r4, r0
        break;
 800b1e8:	e7b1      	b.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch (PeriphClkInit->FmcClockSelection)
 800b1ea:	2601      	movs	r6, #1
 800b1ec:	4634      	mov	r4, r6
 800b1ee:	e7b7      	b.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x428>
      status = ret;
 800b1f0:	4626      	mov	r6, r4
 800b1f2:	e7b5      	b.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b1f4:	58024400 	.word	0x58024400
 800b1f8:	58024800 	.word	0x58024800
 800b1fc:	00ffffcf 	.word	0x00ffffcf
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b200:	f7fb fe0c 	bl	8006e1c <HAL_GetTick>
 800b204:	eba0 0008 	sub.w	r0, r0, r8
 800b208:	2864      	cmp	r0, #100	@ 0x64
 800b20a:	d9b4      	bls.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x43e>
        ret = HAL_TIMEOUT;
 800b20c:	2603      	movs	r6, #3
 800b20e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	07d8      	lsls	r0, r3, #31
 800b214:	d509      	bpl.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b216:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800b21a:	2b10      	cmp	r3, #16
 800b21c:	d03e      	beq.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x564>
 800b21e:	d826      	bhi.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x536>
 800b220:	b35b      	cbz	r3, 800b27a <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b222:	2b08      	cmp	r3, #8
 800b224:	d033      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x556>
 800b226:	2601      	movs	r6, #1
 800b228:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	0799      	lsls	r1, r3, #30
 800b22e:	d54b      	bpl.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b230:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800b232:	2b05      	cmp	r3, #5
 800b234:	d85e      	bhi.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b236:	e8df f003 	tbb	[pc, r3]
 800b23a:	393f      	.short	0x393f
 800b23c:	3f3f3f57 	.word	0x3f3f3f57
        tickstart = HAL_GetTick();
 800b240:	f7fb fdec 	bl	8006e1c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b244:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800b300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        tickstart = HAL_GetTick();
 800b248:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b24a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b24e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b252:	079b      	lsls	r3, r3, #30
 800b254:	d4ab      	bmi.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x476>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b256:	f7fb fde1 	bl	8006e1c <HAL_GetTick>
 800b25a:	1bc0      	subs	r0, r0, r7
 800b25c:	4548      	cmp	r0, r9
 800b25e:	d9f6      	bls.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b260:	e7d4      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b262:	690a      	ldr	r2, [r1, #16]
 800b264:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800b268:	e7b0      	b.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x494>
      status = ret;
 800b26a:	4626      	mov	r6, r4
 800b26c:	e7d0      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b26e:	f023 0208 	bic.w	r2, r3, #8
 800b272:	2a20      	cmp	r2, #32
 800b274:	d001      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x542>
 800b276:	2b18      	cmp	r3, #24
 800b278:	d1d5      	bne.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    if (ret == HAL_OK)
 800b27a:	b9ac      	cbnz	r4, 800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b27c:	4a20      	ldr	r2, [pc, #128]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b27e:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800b282:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b284:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800b288:	430b      	orrs	r3, r1
 800b28a:	6553      	str	r3, [r2, #84]	@ 0x54
 800b28c:	e7cd      	b.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b28e:	2101      	movs	r1, #1
 800b290:	f105 0008 	add.w	r0, r5, #8
 800b294:	f7ff fc64 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b298:	4604      	mov	r4, r0
        break;
 800b29a:	e7ee      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b29c:	2101      	movs	r1, #1
 800b29e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2a2:	f7ff fcd3 	bl	800ac4c <RCCEx_PLL3_Config>
 800b2a6:	e7f7      	b.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = ret;
 800b2a8:	4626      	mov	r6, r4
 800b2aa:	e7be      	b.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	f105 0008 	add.w	r0, r5, #8
 800b2b2:	f7ff fc55 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2b6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b2b8:	b9fc      	cbnz	r4, 800b2fa <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2ba:	4a11      	ldr	r2, [pc, #68]	@ (800b300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2bc:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800b2be:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b2c0:	f023 0307 	bic.w	r3, r3, #7
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	075a      	lsls	r2, r3, #29
 800b2cc:	d52b      	bpl.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2ce:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800b2d2:	2b05      	cmp	r3, #5
 800b2d4:	f200 816e 	bhi.w	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 800b2d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b2dc:	0014001a 	.word	0x0014001a
 800b2e0:	001a0166 	.word	0x001a0166
 800b2e4:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2ee:	f7ff fcad 	bl	800ac4c <RCCEx_PLL3_Config>
 800b2f2:	e7e0      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b2f4:	2601      	movs	r6, #1
 800b2f6:	4634      	mov	r4, r6
 800b2f8:	e7e6      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
      status = ret;
 800b2fa:	4626      	mov	r6, r4
 800b2fc:	e7e4      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 800b2fe:	bf00      	nop
 800b300:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b304:	2101      	movs	r1, #1
 800b306:	f105 0008 	add.w	r0, r5, #8
 800b30a:	f7ff fc29 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b30e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b310:	2c00      	cmp	r4, #0
 800b312:	f040 8152 	bne.w	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b316:	4aaa      	ldr	r2, [pc, #680]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b318:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800b31c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b31e:	f023 0307 	bic.w	r3, r3, #7
 800b322:	430b      	orrs	r3, r1
 800b324:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b326:	682b      	ldr	r3, [r5, #0]
 800b328:	069b      	lsls	r3, r3, #26
 800b32a:	d510      	bpl.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b32c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800b330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b334:	f000 8160 	beq.w	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800b338:	f200 8144 	bhi.w	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 814a 	beq.w	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b346:	f000 8150 	beq.w	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 800b34a:	2601      	movs	r6, #1
 800b34c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b34e:	682b      	ldr	r3, [r5, #0]
 800b350:	065f      	lsls	r7, r3, #25
 800b352:	d510      	bpl.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b354:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800b358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b35c:	f000 816e 	beq.w	800b63c <HAL_RCCEx_PeriphCLKConfig+0x904>
 800b360:	f200 8152 	bhi.w	800b608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8158 	beq.w	800b61a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b36a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b36e:	f000 815e 	beq.w	800b62e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800b372:	2601      	movs	r6, #1
 800b374:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	0618      	lsls	r0, r3, #24
 800b37a:	d510      	bpl.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x666>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b37c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800b380:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b384:	f000 817c 	beq.w	800b680 <HAL_RCCEx_PeriphCLKConfig+0x948>
 800b388:	f200 8160 	bhi.w	800b64c <HAL_RCCEx_PeriphCLKConfig+0x914>
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8166 	beq.w	800b65e <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b396:	f000 816c 	beq.w	800b672 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800b39a:	2601      	movs	r6, #1
 800b39c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b39e:	682b      	ldr	r3, [r5, #0]
 800b3a0:	0719      	lsls	r1, r3, #28
 800b3a2:	d514      	bpl.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x696>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b3a4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800b3a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3ac:	d107      	bne.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x686>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b3ae:	2102      	movs	r1, #2
 800b3b0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3b4:	f7ff fc4a 	bl	800ac4c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	bf18      	it	ne
 800b3bc:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b3be:	4a80      	ldr	r2, [pc, #512]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b3c0:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800b3c4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b3c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	06da      	lsls	r2, r3, #27
 800b3d2:	d514      	bpl.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b3d4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800b3d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3dc:	d107      	bne.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b3de:	2102      	movs	r1, #2
 800b3e0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3e4:	f7ff fc32 	bl	800ac4c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	bf18      	it	ne
 800b3ec:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3ee:	4a74      	ldr	r2, [pc, #464]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b3f0:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800b3f4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b3f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3fa:	430b      	orrs	r3, r1
 800b3fc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	031b      	lsls	r3, r3, #12
 800b402:	d51b      	bpl.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x704>
    switch (PeriphClkInit->AdcClockSelection)
 800b404:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b408:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b40c:	f000 8140 	beq.w	800b690 <HAL_RCCEx_PeriphCLKConfig+0x958>
 800b410:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b414:	d007      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b416:	2900      	cmp	r1, #0
 800b418:	f040 8140 	bne.w	800b69c <HAL_RCCEx_PeriphCLKConfig+0x964>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b41c:	f105 0008 	add.w	r0, r5, #8
 800b420:	f7ff fb9e 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b424:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b426:	2c00      	cmp	r4, #0
 800b428:	f040 813b 	bne.w	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b42c:	4a64      	ldr	r2, [pc, #400]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b42e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b432:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b434:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b438:	430b      	orrs	r3, r1
 800b43a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	035f      	lsls	r7, r3, #13
 800b440:	d50f      	bpl.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x72a>
    switch (PeriphClkInit->UsbClockSelection)
 800b442:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800b446:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b44a:	f000 813b 	beq.w	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b44e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b452:	f000 812d 	beq.w	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x978>
 800b456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b45a:	f000 8124 	beq.w	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b45e:	2601      	movs	r6, #1
 800b460:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b462:	682b      	ldr	r3, [r5, #0]
 800b464:	03d8      	lsls	r0, r3, #15
 800b466:	d509      	bpl.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b468:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 8133 	beq.w	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800b470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b474:	f000 813d 	beq.w	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b478:	2601      	movs	r6, #1
 800b47a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	0099      	lsls	r1, r3, #2
 800b480:	d507      	bpl.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b482:	2102      	movs	r1, #2
 800b484:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b488:	f7ff fbe0 	bl	800ac4c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800b48c:	2800      	cmp	r0, #0
 800b48e:	bf18      	it	ne
 800b490:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b492:	e9d5 3100 	ldrd	r3, r1, [r5]
 800b496:	039a      	lsls	r2, r3, #14
 800b498:	f140 8143 	bpl.w	800b722 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
    switch (PeriphClkInit->RngClockSelection)
 800b49c:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800b4a0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b4a4:	f000 813f 	beq.w	800b726 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800b4a8:	f200 812c 	bhi.w	800b704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f000 812f 	beq.w	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800b4b2:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b4b4:	02df      	lsls	r7, r3, #11
 800b4b6:	d506      	bpl.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b4b8:	4841      	ldr	r0, [pc, #260]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b4ba:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800b4bc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b4be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b4c2:	4332      	orrs	r2, r6
 800b4c4:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b4c6:	00de      	lsls	r6, r3, #3
 800b4c8:	d507      	bpl.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b4ca:	483d      	ldr	r0, [pc, #244]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b4cc:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800b4d0:	6902      	ldr	r2, [r0, #16]
 800b4d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b4d6:	4332      	orrs	r2, r6
 800b4d8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b4da:	0298      	lsls	r0, r3, #10
 800b4dc:	d506      	bpl.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b4de:	4838      	ldr	r0, [pc, #224]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b4e0:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800b4e2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b4e4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b4e8:	4332      	orrs	r2, r6
 800b4ea:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b4ec:	005a      	lsls	r2, r3, #1
 800b4ee:	d509      	bpl.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b4f0:	4a33      	ldr	r2, [pc, #204]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b4f2:	6910      	ldr	r0, [r2, #16]
 800b4f4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b4f8:	6110      	str	r0, [r2, #16]
 800b4fa:	6910      	ldr	r0, [r2, #16]
 800b4fc:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800b500:	4330      	orrs	r0, r6
 800b502:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b504:	2b00      	cmp	r3, #0
 800b506:	da06      	bge.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b508:	482d      	ldr	r0, [pc, #180]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b50a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b50c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800b50e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b512:	4332      	orrs	r2, r6
 800b514:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b516:	021f      	lsls	r7, r3, #8
 800b518:	d507      	bpl.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b51a:	4a29      	ldr	r2, [pc, #164]	@ (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800b51c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800b520:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b522:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b526:	4303      	orrs	r3, r0
 800b528:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b52a:	07ce      	lsls	r6, r1, #31
 800b52c:	d506      	bpl.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x804>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b52e:	2100      	movs	r1, #0
 800b530:	f105 0008 	add.w	r0, r5, #8
 800b534:	f7ff fb14 	bl	800ab60 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b538:	4607      	mov	r7, r0
 800b53a:	b900      	cbnz	r0, 800b53e <HAL_RCCEx_PeriphCLKConfig+0x806>
    switch (PeriphClkInit->RngClockSelection)
 800b53c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b53e:	686b      	ldr	r3, [r5, #4]
 800b540:	079c      	lsls	r4, r3, #30
 800b542:	d506      	bpl.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x81a>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b544:	2101      	movs	r1, #1
 800b546:	f105 0008 	add.w	r0, r5, #8
 800b54a:	f7ff fb09 	bl	800ab60 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b54e:	4606      	mov	r6, r0
 800b550:	b900      	cbnz	r0, 800b554 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    switch (PeriphClkInit->RngClockSelection)
 800b552:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b554:	686b      	ldr	r3, [r5, #4]
 800b556:	0758      	lsls	r0, r3, #29
 800b558:	d506      	bpl.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x830>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b55a:	2102      	movs	r1, #2
 800b55c:	f105 0008 	add.w	r0, r5, #8
 800b560:	f7ff fafe 	bl	800ab60 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b564:	4604      	mov	r4, r0
 800b566:	b900      	cbnz	r0, 800b56a <HAL_RCCEx_PeriphCLKConfig+0x832>
    switch (PeriphClkInit->RngClockSelection)
 800b568:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b56a:	686b      	ldr	r3, [r5, #4]
 800b56c:	0719      	lsls	r1, r3, #28
 800b56e:	d506      	bpl.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x846>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b570:	2100      	movs	r1, #0
 800b572:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b576:	f7ff fb69 	bl	800ac4c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b57a:	4606      	mov	r6, r0
 800b57c:	b900      	cbnz	r0, 800b580 <HAL_RCCEx_PeriphCLKConfig+0x848>
    switch (PeriphClkInit->RngClockSelection)
 800b57e:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b580:	686b      	ldr	r3, [r5, #4]
 800b582:	06da      	lsls	r2, r3, #27
 800b584:	d506      	bpl.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b586:	2101      	movs	r1, #1
 800b588:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b58c:	f7ff fb5e 	bl	800ac4c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b590:	4604      	mov	r4, r0
 800b592:	b900      	cbnz	r0, 800b596 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    switch (PeriphClkInit->RngClockSelection)
 800b594:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b596:	686b      	ldr	r3, [r5, #4]
 800b598:	069b      	lsls	r3, r3, #26
 800b59a:	f100 80ca 	bmi.w	800b732 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
  if (status == HAL_OK)
 800b59e:	1e20      	subs	r0, r4, #0
 800b5a0:	bf18      	it	ne
 800b5a2:	2001      	movne	r0, #1
}
 800b5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b5ae:	f7ff fb4d 	bl	800ac4c <RCCEx_PLL3_Config>
 800b5b2:	e6ac      	b.n	800b30e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b5b4:	2601      	movs	r6, #1
 800b5b6:	4634      	mov	r4, r6
 800b5b8:	e6b5      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      status = ret;
 800b5ba:	4626      	mov	r6, r4
 800b5bc:	e6b3      	b.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 800b5be:	bf00      	nop
 800b5c0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b5c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b5c8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b5cc:	d003      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 800b5ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b5d2:	f47f aeba 	bne.w	800b34a <HAL_RCCEx_PeriphCLKConfig+0x612>
    if (ret == HAL_OK)
 800b5d6:	b9ac      	cbnz	r4, 800b604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5d8:	4a5b      	ldr	r2, [pc, #364]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b5da:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800b5de:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b5e0:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6553      	str	r3, [r2, #84]	@ 0x54
 800b5e8:	e6b1      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x616>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	f105 0008 	add.w	r0, r5, #8
 800b5f0:	f7ff fab6 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5f4:	4604      	mov	r4, r0
        break;
 800b5f6:	e7ee      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5f8:	2102      	movs	r1, #2
 800b5fa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b5fe:	f7ff fb25 	bl	800ac4c <RCCEx_PLL3_Config>
 800b602:	e7f7      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      status = ret;
 800b604:	4626      	mov	r6, r4
 800b606:	e6a2      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x616>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b608:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b60c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b610:	d003      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b612:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b616:	f47f aeac 	bne.w	800b372 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    if (ret == HAL_OK)
 800b61a:	b9ac      	cbnz	r4, 800b648 <HAL_RCCEx_PeriphCLKConfig+0x910>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b61c:	4a4a      	ldr	r2, [pc, #296]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b61e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b622:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b624:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b628:	430b      	orrs	r3, r1
 800b62a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b62c:	e6a3      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b62e:	2100      	movs	r1, #0
 800b630:	f105 0008 	add.w	r0, r5, #8
 800b634:	f7ff fa94 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b638:	4604      	mov	r4, r0
        break;
 800b63a:	e7ee      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b63c:	2102      	movs	r1, #2
 800b63e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b642:	f7ff fb03 	bl	800ac4c <RCCEx_PLL3_Config>
 800b646:	e7f7      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x900>
      status = ret;
 800b648:	4626      	mov	r6, r4
 800b64a:	e694      	b.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b64c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b650:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b654:	d003      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x926>
 800b656:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b65a:	f47f ae9e 	bne.w	800b39a <HAL_RCCEx_PeriphCLKConfig+0x662>
    if (ret == HAL_OK)
 800b65e:	b9ac      	cbnz	r4, 800b68c <HAL_RCCEx_PeriphCLKConfig+0x954>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b660:	4a39      	ldr	r2, [pc, #228]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b662:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800b666:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b668:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b66c:	430b      	orrs	r3, r1
 800b66e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b670:	e695      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b672:	2100      	movs	r1, #0
 800b674:	f105 0008 	add.w	r0, r5, #8
 800b678:	f7ff fa72 	bl	800ab60 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b67c:	4604      	mov	r4, r0
        break;
 800b67e:	e7ee      	b.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x926>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b680:	2102      	movs	r1, #2
 800b682:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b686:	f7ff fae1 	bl	800ac4c <RCCEx_PLL3_Config>
 800b68a:	e7f7      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x944>
      status = ret;
 800b68c:	4626      	mov	r6, r4
 800b68e:	e686      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x666>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b690:	2102      	movs	r1, #2
 800b692:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b696:	f7ff fad9 	bl	800ac4c <RCCEx_PLL3_Config>
 800b69a:	e6c3      	b.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    switch (PeriphClkInit->AdcClockSelection)
 800b69c:	2601      	movs	r6, #1
 800b69e:	4634      	mov	r4, r6
 800b6a0:	e6cc      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x704>
      status = ret;
 800b6a2:	4626      	mov	r6, r4
 800b6a4:	e6ca      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x704>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6a6:	4a28      	ldr	r2, [pc, #160]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b6a8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b6aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b6b0:	b97c      	cbnz	r4, 800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6b2:	4a25      	ldr	r2, [pc, #148]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b6b4:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b6b8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b6ba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b6be:	430b      	orrs	r3, r1
 800b6c0:	6553      	str	r3, [r2, #84]	@ 0x54
 800b6c2:	e6ce      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b6ca:	f7ff fabf 	bl	800ac4c <RCCEx_PLL3_Config>
 800b6ce:	4604      	mov	r4, r0
        break;
 800b6d0:	e7ee      	b.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x978>
      status = ret;
 800b6d2:	4626      	mov	r6, r4
 800b6d4:	e6c5      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x72a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b6d8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b6da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6de:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b6e0:	b974      	cbnz	r4, 800b700 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b6e2:	4a19      	ldr	r2, [pc, #100]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b6e4:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b6e6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b6e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b6f0:	e6c4      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x744>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6f2:	2102      	movs	r1, #2
 800b6f4:	f105 0008 	add.w	r0, r5, #8
 800b6f8:	f7ff fa32 	bl	800ab60 <RCCEx_PLL2_Config>
 800b6fc:	4604      	mov	r4, r0
        break;
 800b6fe:	e7ef      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      status = ret;
 800b700:	4626      	mov	r6, r4
 800b702:	e6bb      	b.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x744>
    switch (PeriphClkInit->RngClockSelection)
 800b704:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b708:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b70c:	f47f aed1 	bne.w	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    if (ret == HAL_OK)
 800b710:	2c00      	cmp	r4, #0
 800b712:	f47f aecf 	bne.w	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b716:	4c0c      	ldr	r4, [pc, #48]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b718:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b71a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b71e:	4302      	orrs	r2, r0
 800b720:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b722:	4634      	mov	r4, r6
 800b724:	e6c6      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b726:	4f08      	ldr	r7, [pc, #32]	@ (800b748 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 800b728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b72a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b72e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b730:	e7ee      	b.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b732:	2102      	movs	r1, #2
 800b734:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b738:	f7ff fa88 	bl	800ac4c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f43f af2e 	beq.w	800b59e <HAL_RCCEx_PeriphCLKConfig+0x866>
  return HAL_ERROR;
 800b742:	2001      	movs	r0, #1
 800b744:	e72e      	b.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800b746:	bf00      	nop
 800b748:	58024400 	.word	0x58024400

0800b74c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800b74c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b74e:	f7ff f997 	bl	800aa80 <HAL_RCC_GetHCLKFreq>
 800b752:	4b05      	ldr	r3, [pc, #20]	@ (800b768 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800b754:	4a05      	ldr	r2, [pc, #20]	@ (800b76c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b75c:	5cd3      	ldrb	r3, [r2, r3]
 800b75e:	f003 031f 	and.w	r3, r3, #31
}
 800b762:	40d8      	lsrs	r0, r3
 800b764:	bd08      	pop	{r3, pc}
 800b766:	bf00      	nop
 800b768:	58024400 	.word	0x58024400
 800b76c:	08026820 	.word	0x08026820

0800b770 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b770:	494f      	ldr	r1, [pc, #316]	@ (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800b772:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b774:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b776:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b778:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800b77a:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b77e:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b782:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800b784:	f000 8090 	beq.w	800b8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b788:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b78c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b790:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b794:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b79c:	4353      	muls	r3, r2
    switch (pllsource)
 800b79e:	2c01      	cmp	r4, #1
 800b7a0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7a4:	ee06 3a90 	vmov	s13, r3
 800b7a8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b7ac:	d06e      	beq.n	800b88c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800b7ae:	2c02      	cmp	r4, #2
 800b7b0:	d05e      	beq.n	800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800b7b2:	2c00      	cmp	r4, #0
 800b7b4:	d16a      	bne.n	800b88c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7b6:	680b      	ldr	r3, [r1, #0]
 800b7b8:	069b      	lsls	r3, r3, #26
 800b7ba:	d547      	bpl.n	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7bc:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7be:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7c0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b7c4:	4a3b      	ldr	r2, [pc, #236]	@ (800b8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ca:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7cc:	ee07 2a90 	vmov	s15, r2
 800b7d0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b7d4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b7d8:	ee07 3a10 	vmov	s14, r3
 800b7dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b7e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b7e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b7e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b7ec:	4a30      	ldr	r2, [pc, #192]	@ (800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800b7ee:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b7f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b7f4:	ee07 3a10 	vmov	s14, r3
 800b7f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b7fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b800:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b804:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b808:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b80c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b80e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b812:	ee07 3a10 	vmov	s14, r3
 800b816:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b81a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b81e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b822:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b826:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b82a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b82c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b830:	ee06 3a90 	vmov	s13, r3
 800b834:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b838:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b83c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b840:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b844:	ee17 3a90 	vmov	r3, s15
 800b848:	6083      	str	r3, [r0, #8]
}
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b84c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b84e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b862:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b866:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b86a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b86e:	e7bd      	b.n	800b7ec <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b870:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b872:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b8bc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800b876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b87a:	ee07 3a90 	vmov	s15, r3
 800b87e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b886:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b88a:	e7ec      	b.n	800b866 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b88c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b88e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b8a6:	e7de      	b.n	800b866 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b8a8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b8ac:	e7cc      	b.n	800b848 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800b8ae:	bf00      	nop
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	03d09000 	.word	0x03d09000
 800b8b8:	4c742400 	.word	0x4c742400
 800b8bc:	4bbebc20 	.word	0x4bbebc20
 800b8c0:	4a742400 	.word	0x4a742400

0800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8c4:	494f      	ldr	r1, [pc, #316]	@ (800ba04 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800b8c6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8c8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b8ca:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8cc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800b8ce:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b8d2:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8d6:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800b8d8:	f000 8090 	beq.w	800b9fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8dc:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8e0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8e4:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8e8:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8f0:	4353      	muls	r3, r2
    switch (pllsource)
 800b8f2:	2c01      	cmp	r4, #1
 800b8f4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8f8:	ee06 3a90 	vmov	s13, r3
 800b8fc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b900:	d06e      	beq.n	800b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800b902:	2c02      	cmp	r4, #2
 800b904:	d05e      	beq.n	800b9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800b906:	2c00      	cmp	r4, #0
 800b908:	d16a      	bne.n	800b9e0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b90a:	680b      	ldr	r3, [r1, #0]
 800b90c:	069b      	lsls	r3, r3, #26
 800b90e:	d547      	bpl.n	800b9a0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b910:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b912:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b914:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b918:	4a3b      	ldr	r2, [pc, #236]	@ (800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b91e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b920:	ee07 2a90 	vmov	s15, r2
 800b924:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b928:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b92c:	ee07 3a10 	vmov	s14, r3
 800b930:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b934:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b938:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b93c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b940:	4a30      	ldr	r2, [pc, #192]	@ (800ba04 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800b942:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b944:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b948:	ee07 3a10 	vmov	s14, r3
 800b94c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b950:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b954:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b958:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b95c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b960:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b962:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b966:	ee07 3a10 	vmov	s14, r3
 800b96a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b96e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b972:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b976:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b97a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b97e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b980:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b984:	ee06 3a90 	vmov	s13, r3
 800b988:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b98c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b990:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b994:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b998:	ee17 3a90 	vmov	r3, s15
 800b99c:	6083      	str	r3, [r0, #8]
}
 800b99e:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9a2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9aa:	ee07 3a90 	vmov	s15, r3
 800b9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9b6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9ba:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b9be:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b9c2:	e7bd      	b.n	800b940 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9c6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800ba10 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800b9ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ce:	ee07 3a90 	vmov	s15, r3
 800b9d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9da:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b9de:	e7ec      	b.n	800b9ba <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9e2:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800ba14 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b9fa:	e7de      	b.n	800b9ba <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b9fc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ba00:	e7cc      	b.n	800b99c <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800ba02:	bf00      	nop
 800ba04:	58024400 	.word	0x58024400
 800ba08:	03d09000 	.word	0x03d09000
 800ba0c:	4c742400 	.word	0x4c742400
 800ba10:	4bbebc20 	.word	0x4bbebc20
 800ba14:	4a742400 	.word	0x4a742400

0800ba18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	b1f0      	cbz	r0, 800ba5e <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ba20:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ba24:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ba28:	b91b      	cbnz	r3, 800ba32 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ba2a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ba2e:	f7f5 ff59 	bl	80018e4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ba32:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ba34:	1d21      	adds	r1, r4, #4
 800ba36:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ba38:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ba3c:	f000 fda3 	bl	800c586 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ba40:	6862      	ldr	r2, [r4, #4]
 800ba42:	4629      	mov	r1, r5
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	f000 fdd4 	bl	800c5f2 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800ba4a:	4a06      	ldr	r2, [pc, #24]	@ (800ba64 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800ba4c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800ba4e:	6813      	ldr	r3, [r2, #0]
 800ba50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba54:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800ba5c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ba5e:	2001      	movs	r0, #1
 800ba60:	e7fc      	b.n	800ba5c <HAL_SDRAM_Init+0x44>
 800ba62:	bf00      	nop
 800ba64:	52004000 	.word	0x52004000

0800ba68 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800ba6c:	f7f5 ffd4 	bl	8001a18 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800ba70:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ba74:	f000 fdf3 	bl	800c65e <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800ba78:	2000      	movs	r0, #0
 800ba7a:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800ba7e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800ba82:	bd10      	pop	{r4, pc}

0800ba84 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ba84:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ba86:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ba8e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ba90:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800ba92:	d010      	beq.n	800bab6 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ba94:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800ba98:	2c01      	cmp	r4, #1
 800ba9a:	d110      	bne.n	800babe <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ba9c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ba9e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800baa0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800baa4:	f000 fdea 	bl	800c67c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800baa8:	6833      	ldr	r3, [r6, #0]
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d104      	bne.n	800bab8 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800baae:	2305      	movs	r3, #5
 800bab0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bab4:	2000      	movs	r0, #0
}
 800bab6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800bab8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800babc:	e7fa      	b.n	800bab4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800babe:	2001      	movs	r0, #1
 800bac0:	e7f9      	b.n	800bab6 <HAL_SDRAM_SendCommand+0x32>

0800bac2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800bac2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800bac4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800bac8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800baca:	2b02      	cmp	r3, #2
 800bacc:	b2d8      	uxtb	r0, r3
 800bace:	d00d      	beq.n	800baec <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800bad0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	b2dd      	uxtb	r5, r3
 800bad8:	d109      	bne.n	800baee <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bada:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800badc:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bade:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800bae2:	f000 fddd 	bl	800c6a0 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bae6:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800bae8:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800baec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800baee:	2001      	movs	r0, #1
 800baf0:	e7fc      	b.n	800baec <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800baf2 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800baf2:	4770      	bx	lr

0800baf4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800baf4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d12f      	bne.n	800bb5c <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bafc:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bafe:	4a18      	ldr	r2, [pc, #96]	@ (800bb60 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800bb00:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb04:	6803      	ldr	r3, [r0, #0]
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d01a      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb0e:	d017      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb10:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d013      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00f      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00b      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb28:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d007      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb30:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d003      	beq.n	800bb40 <HAL_TIM_Base_Start+0x4c>
 800bb38:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d107      	bne.n	800bb50 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb40:	6899      	ldr	r1, [r3, #8]
 800bb42:	4a08      	ldr	r2, [pc, #32]	@ (800bb64 <HAL_TIM_Base_Start+0x70>)
 800bb44:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb46:	2a06      	cmp	r2, #6
 800bb48:	d006      	beq.n	800bb58 <HAL_TIM_Base_Start+0x64>
 800bb4a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800bb4e:	d003      	beq.n	800bb58 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	f042 0201 	orr.w	r2, r2, #1
 800bb56:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800bb58:	2000      	movs	r0, #0
 800bb5a:	4770      	bx	lr
    return HAL_ERROR;
 800bb5c:	2001      	movs	r0, #1
}
 800bb5e:	4770      	bx	lr
 800bb60:	40010000 	.word	0x40010000
 800bb64:	00010007 	.word	0x00010007

0800bb68 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb68:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d133      	bne.n	800bbd8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb70:	2302      	movs	r3, #2
 800bb72:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb76:	6803      	ldr	r3, [r0, #0]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	f042 0201 	orr.w	r2, r2, #1
 800bb7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb80:	4a16      	ldr	r2, [pc, #88]	@ (800bbdc <HAL_TIM_Base_Start_IT+0x74>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d01a      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bb86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb8a:	d017      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bb8c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d013      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bb94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d00f      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bb9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d00b      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bba4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d007      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bbac:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d003      	beq.n	800bbbc <HAL_TIM_Base_Start_IT+0x54>
 800bbb4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d107      	bne.n	800bbcc <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbbc:	6899      	ldr	r1, [r3, #8]
 800bbbe:	4a08      	ldr	r2, [pc, #32]	@ (800bbe0 <HAL_TIM_Base_Start_IT+0x78>)
 800bbc0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbc2:	2a06      	cmp	r2, #6
 800bbc4:	d006      	beq.n	800bbd4 <HAL_TIM_Base_Start_IT+0x6c>
 800bbc6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800bbca:	d003      	beq.n	800bbd4 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	f042 0201 	orr.w	r2, r2, #1
 800bbd2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4770      	bx	lr
    return HAL_ERROR;
 800bbd8:	2001      	movs	r0, #1
}
 800bbda:	4770      	bx	lr
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	00010007 	.word	0x00010007

0800bbe4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800bbe4:	4770      	bx	lr

0800bbe6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800bbe8:	4770      	bx	lr

0800bbea <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800bbea:	4770      	bx	lr

0800bbec <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800bbec:	6803      	ldr	r3, [r0, #0]
{
 800bbee:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800bbf0:	68dd      	ldr	r5, [r3, #12]
{
 800bbf2:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800bbf4:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bbf6:	07b2      	lsls	r2, r6, #30
 800bbf8:	d50d      	bpl.n	800bc16 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bbfa:	07a9      	lsls	r1, r5, #30
 800bbfc:	d50b      	bpl.n	800bc16 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bbfe:	f06f 0202 	mvn.w	r2, #2
 800bc02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc04:	2201      	movs	r2, #1
 800bc06:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	079a      	lsls	r2, r3, #30
 800bc0c:	d075      	beq.n	800bcfa <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800bc0e:	f7ff ffea 	bl	800bbe6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc12:	2300      	movs	r3, #0
 800bc14:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bc16:	0773      	lsls	r3, r6, #29
 800bc18:	d510      	bpl.n	800bc3c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bc1a:	0768      	lsls	r0, r5, #29
 800bc1c:	d50e      	bpl.n	800bc3c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800bc24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bc26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc28:	2202      	movs	r2, #2
 800bc2a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800bc32:	d068      	beq.n	800bd06 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800bc34:	f7ff ffd7 	bl	800bbe6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bc3c:	0731      	lsls	r1, r6, #28
 800bc3e:	d50f      	bpl.n	800bc60 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bc40:	072a      	lsls	r2, r5, #28
 800bc42:	d50d      	bpl.n	800bc60 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800bc4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc4e:	2204      	movs	r2, #4
 800bc50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	079b      	lsls	r3, r3, #30
 800bc56:	d05c      	beq.n	800bd12 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800bc58:	f7ff ffc5 	bl	800bbe6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc60:	06f1      	lsls	r1, r6, #27
 800bc62:	d510      	bpl.n	800bc86 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc64:	06ea      	lsls	r2, r5, #27
 800bc66:	d50e      	bpl.n	800bc86 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800bc6e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc72:	2208      	movs	r2, #8
 800bc74:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800bc7c:	d04f      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800bc7e:	f7ff ffb2 	bl	800bbe6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc82:	2300      	movs	r3, #0
 800bc84:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc86:	07f3      	lsls	r3, r6, #31
 800bc88:	d508      	bpl.n	800bc9c <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc8a:	07e8      	lsls	r0, r5, #31
 800bc8c:	d506      	bpl.n	800bc9c <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc94:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc98:	f7f5 fb6a 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bc9c:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800bca0:	d008      	beq.n	800bcb4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bca2:	0629      	lsls	r1, r5, #24
 800bca4:	d506      	bpl.n	800bcb4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800bcac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bcae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bcb0:	f000 f8c1 	bl	800be36 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bcb4:	05f2      	lsls	r2, r6, #23
 800bcb6:	d508      	bpl.n	800bcca <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcb8:	062b      	lsls	r3, r5, #24
 800bcba:	d506      	bpl.n	800bcca <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcbc:	6823      	ldr	r3, [r4, #0]
 800bcbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800bcc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcc4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800bcc6:	f000 f8b7 	bl	800be38 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bcca:	0670      	lsls	r0, r6, #25
 800bccc:	d508      	bpl.n	800bce0 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bcce:	0669      	lsls	r1, r5, #25
 800bcd0:	d506      	bpl.n	800bce0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800bcd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bcda:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bcdc:	f7ff ff85 	bl	800bbea <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bce0:	06b2      	lsls	r2, r6, #26
 800bce2:	d522      	bpl.n	800bd2a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bce4:	06ab      	lsls	r3, r5, #26
 800bce6:	d520      	bpl.n	800bd2a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800bcee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bcf0:	611a      	str	r2, [r3, #16]
}
 800bcf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800bcf6:	f000 b89d 	b.w	800be34 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcfa:	f7ff ff73 	bl	800bbe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7ff ff72 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
 800bd04:	e785      	b.n	800bc12 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd06:	f7ff ff6d 	bl	800bbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f7ff ff6c 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
 800bd10:	e792      	b.n	800bc38 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd12:	f7ff ff67 	bl	800bbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd16:	4620      	mov	r0, r4
 800bd18:	f7ff ff66 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
 800bd1c:	e79e      	b.n	800bc5c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd1e:	f7ff ff61 	bl	800bbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd22:	4620      	mov	r0, r4
 800bd24:	f7ff ff60 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
 800bd28:	e7ab      	b.n	800bc82 <HAL_TIM_IRQHandler+0x96>
}
 800bd2a:	bd70      	pop	{r4, r5, r6, pc}

0800bd2c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd2c:	4a27      	ldr	r2, [pc, #156]	@ (800bdcc <TIM_Base_SetConfig+0xa0>)
  tmpcr1 = TIMx->CR1;
 800bd2e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd30:	4290      	cmp	r0, r2
 800bd32:	d012      	beq.n	800bd5a <TIM_Base_SetConfig+0x2e>
 800bd34:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800bd38:	d00f      	beq.n	800bd5a <TIM_Base_SetConfig+0x2e>
 800bd3a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800bd3e:	4290      	cmp	r0, r2
 800bd40:	d00b      	beq.n	800bd5a <TIM_Base_SetConfig+0x2e>
 800bd42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bd46:	4290      	cmp	r0, r2
 800bd48:	d007      	beq.n	800bd5a <TIM_Base_SetConfig+0x2e>
 800bd4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bd4e:	4290      	cmp	r0, r2
 800bd50:	d003      	beq.n	800bd5a <TIM_Base_SetConfig+0x2e>
 800bd52:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800bd56:	4290      	cmp	r0, r2
 800bd58:	d108      	bne.n	800bd6c <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800bd5e:	684a      	ldr	r2, [r1, #4]
 800bd60:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd66:	68ca      	ldr	r2, [r1, #12]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	e00a      	b.n	800bd82 <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd6c:	4a18      	ldr	r2, [pc, #96]	@ (800bdd0 <TIM_Base_SetConfig+0xa4>)
 800bd6e:	4290      	cmp	r0, r2
 800bd70:	d0f7      	beq.n	800bd62 <TIM_Base_SetConfig+0x36>
 800bd72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bd76:	4290      	cmp	r0, r2
 800bd78:	d0f3      	beq.n	800bd62 <TIM_Base_SetConfig+0x36>
 800bd7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bd7e:	4290      	cmp	r0, r2
 800bd80:	d0ef      	beq.n	800bd62 <TIM_Base_SetConfig+0x36>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd82:	694a      	ldr	r2, [r1, #20]
 800bd84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd88:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd8a:	688a      	ldr	r2, [r1, #8]
 800bd8c:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd8e:	680a      	ldr	r2, [r1, #0]
 800bd90:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd92:	4a0e      	ldr	r2, [pc, #56]	@ (800bdcc <TIM_Base_SetConfig+0xa0>)
 800bd94:	4290      	cmp	r0, r2
 800bd96:	d00f      	beq.n	800bdb8 <TIM_Base_SetConfig+0x8c>
 800bd98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bd9c:	4290      	cmp	r0, r2
 800bd9e:	d00b      	beq.n	800bdb8 <TIM_Base_SetConfig+0x8c>
 800bda0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800bda4:	4290      	cmp	r0, r2
 800bda6:	d007      	beq.n	800bdb8 <TIM_Base_SetConfig+0x8c>
 800bda8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bdac:	4290      	cmp	r0, r2
 800bdae:	d003      	beq.n	800bdb8 <TIM_Base_SetConfig+0x8c>
 800bdb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bdb4:	4290      	cmp	r0, r2
 800bdb6:	d101      	bne.n	800bdbc <TIM_Base_SetConfig+0x90>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb8:	690a      	ldr	r2, [r1, #16]
 800bdba:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bdbc:	6802      	ldr	r2, [r0, #0]
 800bdbe:	f042 0204 	orr.w	r2, r2, #4
 800bdc2:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800bdc8:	6003      	str	r3, [r0, #0]
}
 800bdca:	4770      	bx	lr
 800bdcc:	40010000 	.word	0x40010000
 800bdd0:	40014000 	.word	0x40014000

0800bdd4 <HAL_TIM_Base_Init>:
{
 800bdd4:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	b350      	cbz	r0, 800be30 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bdda:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800bdde:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bde2:	b91b      	cbnz	r3, 800bdec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800bde4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bde8:	f7ff fe83 	bl	800baf2 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bdec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bdf2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdf6:	f7ff ff99 	bl	800bd2c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdfa:	2301      	movs	r3, #1
  return HAL_OK;
 800bdfc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdfe:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be02:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800be06:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800be0a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800be0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800be12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be1a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800be1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800be22:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800be26:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800be2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800be2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800be30:	2001      	movs	r0, #1
 800be32:	e7fc      	b.n	800be2e <HAL_TIM_Base_Init+0x5a>

0800be34 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800be34:	4770      	bx	lr

0800be36 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800be36:	4770      	bx	lr

0800be38 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800be38:	4770      	bx	lr
	...

0800be3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be3c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be3e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be40:	e852 3f00 	ldrex	r3, [r2]
 800be44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800be4c:	6802      	ldr	r2, [r0, #0]
 800be4e:	2900      	cmp	r1, #0
 800be50:	d1f5      	bne.n	800be3e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be52:	4c0f      	ldr	r4, [pc, #60]	@ (800be90 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be54:	f102 0308 	add.w	r3, r2, #8
 800be58:	e853 3f00 	ldrex	r3, [r3]
 800be5c:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5e:	f102 0c08 	add.w	ip, r2, #8
 800be62:	e84c 3100 	strex	r1, r3, [ip]
 800be66:	2900      	cmp	r1, #0
 800be68:	d1f4      	bne.n	800be54 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be6a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d107      	bne.n	800be80 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be74:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	e842 3100 	strex	r1, r3, [r2]
 800be7c:	2900      	cmp	r1, #0
 800be7e:	d1f7      	bne.n	800be70 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be80:	2320      	movs	r3, #32
 800be82:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be86:	2300      	movs	r3, #0
 800be88:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be8a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800be8c:	bd10      	pop	{r4, pc}
 800be8e:	bf00      	nop
 800be90:	effffffe 	.word	0xeffffffe

0800be94 <UART_SetConfig>:
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be94:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be96:	69c3      	ldr	r3, [r0, #28]
 800be98:	6881      	ldr	r1, [r0, #8]
{
 800be9a:	b530      	push	{r4, r5, lr}
 800be9c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be9e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bea0:	6815      	ldr	r5, [r2, #0]
{
 800bea2:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bea4:	4301      	orrs	r1, r0
 800bea6:	6960      	ldr	r0, [r4, #20]
 800bea8:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beaa:	48a5      	ldr	r0, [pc, #660]	@ (800c140 <UART_SetConfig+0x2ac>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800beac:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beae:	4028      	ands	r0, r5
 800beb0:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beb2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800beb4:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beb6:	6851      	ldr	r1, [r2, #4]
 800beb8:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800bebc:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bebe:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bec0:	6051      	str	r1, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bec2:	49a0      	ldr	r1, [pc, #640]	@ (800c144 <UART_SetConfig+0x2b0>)
 800bec4:	428a      	cmp	r2, r1
    tmpreg |= huart->Init.OneBitSampling;
 800bec6:	bf1c      	itt	ne
 800bec8:	6a21      	ldrne	r1, [r4, #32]
 800beca:	4308      	orrne	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800becc:	6891      	ldr	r1, [r2, #8]
 800bece:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 800bed2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bed6:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bed8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800beda:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bedc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800bede:	f021 010f 	bic.w	r1, r1, #15
 800bee2:	4301      	orrs	r1, r0
 800bee4:	62d1      	str	r1, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bee6:	4998      	ldr	r1, [pc, #608]	@ (800c148 <UART_SetConfig+0x2b4>)
 800bee8:	428a      	cmp	r2, r1
 800beea:	d112      	bne.n	800bf12 <UART_SetConfig+0x7e>
 800beec:	4a97      	ldr	r2, [pc, #604]	@ (800c14c <UART_SetConfig+0x2b8>)
 800beee:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800bef0:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800bef4:	2a18      	cmp	r2, #24
 800bef6:	f000 8101 	beq.w	800c0fc <UART_SetConfig+0x268>
 800befa:	d83b      	bhi.n	800bf74 <UART_SetConfig+0xe0>
 800befc:	2a08      	cmp	r2, #8
 800befe:	f000 80f5 	beq.w	800c0ec <UART_SetConfig+0x258>
 800bf02:	2a10      	cmp	r2, #16
 800bf04:	f000 813a 	beq.w	800c17c <UART_SetConfig+0x2e8>
 800bf08:	2a00      	cmp	r2, #0
 800bf0a:	f000 80e9 	beq.w	800c0e0 <UART_SetConfig+0x24c>
        ret = HAL_ERROR;
 800bf0e:	2001      	movs	r0, #1
 800bf10:	e06a      	b.n	800bfe8 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf12:	498f      	ldr	r1, [pc, #572]	@ (800c150 <UART_SetConfig+0x2bc>)
 800bf14:	428a      	cmp	r2, r1
 800bf16:	d10d      	bne.n	800bf34 <UART_SetConfig+0xa0>
 800bf18:	4a8c      	ldr	r2, [pc, #560]	@ (800c14c <UART_SetConfig+0x2b8>)
 800bf1a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800bf1c:	f002 0207 	and.w	r2, r2, #7
 800bf20:	2a05      	cmp	r2, #5
 800bf22:	d8f4      	bhi.n	800bf0e <UART_SetConfig+0x7a>
 800bf24:	e8df f012 	tbh	[pc, r2, lsl #1]
 800bf28:	00e2007e 	.word	0x00e2007e
 800bf2c:	00ea012a 	.word	0x00ea012a
 800bf30:	002b0107 	.word	0x002b0107
 800bf34:	4987      	ldr	r1, [pc, #540]	@ (800c154 <UART_SetConfig+0x2c0>)
 800bf36:	428a      	cmp	r2, r1
 800bf38:	d0ee      	beq.n	800bf18 <UART_SetConfig+0x84>
 800bf3a:	4987      	ldr	r1, [pc, #540]	@ (800c158 <UART_SetConfig+0x2c4>)
 800bf3c:	428a      	cmp	r2, r1
 800bf3e:	d0eb      	beq.n	800bf18 <UART_SetConfig+0x84>
 800bf40:	4986      	ldr	r1, [pc, #536]	@ (800c15c <UART_SetConfig+0x2c8>)
 800bf42:	428a      	cmp	r2, r1
 800bf44:	d0e8      	beq.n	800bf18 <UART_SetConfig+0x84>
 800bf46:	4986      	ldr	r1, [pc, #536]	@ (800c160 <UART_SetConfig+0x2cc>)
 800bf48:	428a      	cmp	r2, r1
 800bf4a:	d0cf      	beq.n	800beec <UART_SetConfig+0x58>
 800bf4c:	4985      	ldr	r1, [pc, #532]	@ (800c164 <UART_SetConfig+0x2d0>)
 800bf4e:	428a      	cmp	r2, r1
 800bf50:	d0e2      	beq.n	800bf18 <UART_SetConfig+0x84>
 800bf52:	4985      	ldr	r1, [pc, #532]	@ (800c168 <UART_SetConfig+0x2d4>)
 800bf54:	428a      	cmp	r2, r1
 800bf56:	d0df      	beq.n	800bf18 <UART_SetConfig+0x84>
 800bf58:	4b7a      	ldr	r3, [pc, #488]	@ (800c144 <UART_SetConfig+0x2b0>)
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d1d7      	bne.n	800bf0e <UART_SetConfig+0x7a>
 800bf5e:	4a7b      	ldr	r2, [pc, #492]	@ (800c14c <UART_SetConfig+0x2b8>)
 800bf60:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bf62:	f003 0307 	and.w	r3, r3, #7
 800bf66:	2b05      	cmp	r3, #5
 800bf68:	d8d1      	bhi.n	800bf0e <UART_SetConfig+0x7a>
 800bf6a:	e8df f003 	tbb	[pc, r3]
 800bf6e:	4538      	.short	0x4538
 800bf70:	0f594f4a 	.word	0x0f594f4a
 800bf74:	2a20      	cmp	r2, #32
 800bf76:	f000 80de 	beq.w	800c136 <UART_SetConfig+0x2a2>
 800bf7a:	2a28      	cmp	r2, #40	@ 0x28
 800bf7c:	d1c7      	bne.n	800bf0e <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf82:	f000 808a 	beq.w	800c09a <UART_SetConfig+0x206>
 800bf86:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bf8a:	e0c4      	b.n	800c116 <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 800bf8c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf90:	4b76      	ldr	r3, [pc, #472]	@ (800c16c <UART_SetConfig+0x2d8>)
 800bf92:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf94:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf96:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf9a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf9e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfa2:	4299      	cmp	r1, r3
 800bfa4:	d8b3      	bhi.n	800bf0e <UART_SetConfig+0x7a>
 800bfa6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800bfaa:	d8b0      	bhi.n	800bf0e <UART_SetConfig+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfac:	2300      	movs	r3, #0
 800bfae:	4619      	mov	r1, r3
 800bfb0:	f7f4 fba2 	bl	80006f8 <__aeabi_uldivmod>
 800bfb4:	462a      	mov	r2, r5
 800bfb6:	0209      	lsls	r1, r1, #8
 800bfb8:	086b      	lsrs	r3, r5, #1
 800bfba:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800bfbe:	0200      	lsls	r0, r0, #8
 800bfc0:	18c0      	adds	r0, r0, r3
 800bfc2:	f04f 0300 	mov.w	r3, #0
 800bfc6:	f141 0100 	adc.w	r1, r1, #0
 800bfca:	f7f4 fb95 	bl	80006f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfce:	4b68      	ldr	r3, [pc, #416]	@ (800c170 <UART_SetConfig+0x2dc>)
 800bfd0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d89a      	bhi.n	800bf0e <UART_SetConfig+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	60d8      	str	r0, [r3, #12]
 800bfdc:	e003      	b.n	800bfe6 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bfde:	f7ff fbb5 	bl	800b74c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d1d4      	bne.n	800bf90 <UART_SetConfig+0xfc>
          pclk = (uint32_t) HSI_VALUE;
 800bfe6:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800bfe8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800bfec:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800bfee:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800bff0:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800bff4:	b007      	add	sp, #28
 800bff6:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bff8:	4668      	mov	r0, sp
 800bffa:	f7ff fbb9 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bffe:	9801      	ldr	r0, [sp, #4]
        break;
 800c000:	e7ef      	b.n	800bfe2 <UART_SetConfig+0x14e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c002:	a803      	add	r0, sp, #12
 800c004:	f7ff fc5e 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c008:	9804      	ldr	r0, [sp, #16]
        break;
 800c00a:	e7ea      	b.n	800bfe2 <UART_SetConfig+0x14e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c00c:	6813      	ldr	r3, [r2, #0]
 800c00e:	4859      	ldr	r0, [pc, #356]	@ (800c174 <UART_SetConfig+0x2e0>)
 800c010:	f013 0f20 	tst.w	r3, #32
 800c014:	d0bc      	beq.n	800bf90 <UART_SetConfig+0xfc>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c016:	6813      	ldr	r3, [r2, #0]
 800c018:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c01c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c01e:	e7b7      	b.n	800bf90 <UART_SetConfig+0xfc>
        pclk = (uint32_t) CSI_VALUE;
 800c020:	4855      	ldr	r0, [pc, #340]	@ (800c178 <UART_SetConfig+0x2e4>)
 800c022:	e7b5      	b.n	800bf90 <UART_SetConfig+0xfc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c028:	d155      	bne.n	800c0d6 <UART_SetConfig+0x242>
 800c02a:	2300      	movs	r3, #0
    switch (clocksource)
 800c02c:	2b08      	cmp	r3, #8
 800c02e:	f63f af6e 	bhi.w	800bf0e <UART_SetConfig+0x7a>
 800c032:	a201      	add	r2, pc, #4	@ (adr r2, 800c038 <UART_SetConfig+0x1a4>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c065 	.word	0x0800c065
 800c03c:	0800c071 	.word	0x0800c071
 800c040:	0800bf0f 	.word	0x0800bf0f
 800c044:	0800bf0f 	.word	0x0800bf0f
 800c048:	0800c077 	.word	0x0800c077
 800c04c:	0800bf0f 	.word	0x0800bf0f
 800c050:	0800bf0f 	.word	0x0800bf0f
 800c054:	0800bf0f 	.word	0x0800bf0f
 800c058:	0800c081 	.word	0x0800c081
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c05c:	2304      	movs	r3, #4
 800c05e:	e7e5      	b.n	800c02c <UART_SetConfig+0x198>
 800c060:	2308      	movs	r3, #8
 800c062:	e7e3      	b.n	800c02c <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c064:	f7fe fd2e 	bl	800aac4 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c068:	4603      	mov	r3, r0
    if (pclk != 0U)
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d0bb      	beq.n	800bfe6 <UART_SetConfig+0x152>
 800c06e:	e014      	b.n	800c09a <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c070:	f7fe fd3a 	bl	800aae8 <HAL_RCC_GetPCLK2Freq>
 800c074:	e7f8      	b.n	800c068 <UART_SetConfig+0x1d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c076:	4668      	mov	r0, sp
 800c078:	f7ff fb7a 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c07c:	9b01      	ldr	r3, [sp, #4]
        break;
 800c07e:	e7f4      	b.n	800c06a <UART_SetConfig+0x1d6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c080:	a803      	add	r0, sp, #12
 800c082:	f7ff fc1f 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c086:	9b04      	ldr	r3, [sp, #16]
        break;
 800c088:	e7ef      	b.n	800c06a <UART_SetConfig+0x1d6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c08a:	f013 0f20 	tst.w	r3, #32
 800c08e:	4b39      	ldr	r3, [pc, #228]	@ (800c174 <UART_SetConfig+0x2e0>)
 800c090:	d003      	beq.n	800c09a <UART_SetConfig+0x206>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c092:	6812      	ldr	r2, [r2, #0]
 800c094:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800c098:	40d3      	lsrs	r3, r2
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c09a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c09c:	4a33      	ldr	r2, [pc, #204]	@ (800c16c <UART_SetConfig+0x2d8>)
 800c09e:	6861      	ldr	r1, [r4, #4]
 800c0a0:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800c0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0a8:	084a      	lsrs	r2, r1, #1
 800c0aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0ae:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0b2:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0b6:	f1a3 0110 	sub.w	r1, r3, #16
 800c0ba:	4291      	cmp	r1, r2
 800c0bc:	f63f af27 	bhi.w	800bf0e <UART_SetConfig+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0c0:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0c4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c0c8:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0ca:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	60cb      	str	r3, [r1, #12]
 800c0d0:	e789      	b.n	800bfe6 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800c0d2:	4b29      	ldr	r3, [pc, #164]	@ (800c178 <UART_SetConfig+0x2e4>)
 800c0d4:	e7e1      	b.n	800c09a <UART_SetConfig+0x206>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0d6:	f7fe fcf5 	bl	800aac4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d083      	beq.n	800bfe6 <UART_SetConfig+0x152>
 800c0de:	e01a      	b.n	800c116 <UART_SetConfig+0x282>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0e4:	d0c4      	beq.n	800c070 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0e6:	f7fe fcff 	bl	800aae8 <HAL_RCC_GetPCLK2Freq>
        break;
 800c0ea:	e7f6      	b.n	800c0da <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0f0:	d0b4      	beq.n	800c05c <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0f2:	4668      	mov	r0, sp
 800c0f4:	f7ff fb3c 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0f8:	9801      	ldr	r0, [sp, #4]
        break;
 800c0fa:	e7ee      	b.n	800c0da <UART_SetConfig+0x246>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c100:	4a12      	ldr	r2, [pc, #72]	@ (800c14c <UART_SetConfig+0x2b8>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c102:	6813      	ldr	r3, [r2, #0]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c104:	d0c1      	beq.n	800c08a <UART_SetConfig+0x1f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c106:	f013 0f20 	tst.w	r3, #32
 800c10a:	481a      	ldr	r0, [pc, #104]	@ (800c174 <UART_SetConfig+0x2e0>)
 800c10c:	d003      	beq.n	800c116 <UART_SetConfig+0x282>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c10e:	6813      	ldr	r3, [r2, #0]
 800c110:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c114:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c116:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c118:	4a14      	ldr	r2, [pc, #80]	@ (800c16c <UART_SetConfig+0x2d8>)
 800c11a:	6863      	ldr	r3, [r4, #4]
 800c11c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800c120:	fbb0 f0f2 	udiv	r0, r0, r2
 800c124:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c128:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c12c:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800c130:	f1a0 0210 	sub.w	r2, r0, #16
 800c134:	e74e      	b.n	800bfd4 <UART_SetConfig+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c13a:	d0ca      	beq.n	800c0d2 <UART_SetConfig+0x23e>
        pclk = (uint32_t) CSI_VALUE;
 800c13c:	480e      	ldr	r0, [pc, #56]	@ (800c178 <UART_SetConfig+0x2e4>)
 800c13e:	e7ea      	b.n	800c116 <UART_SetConfig+0x282>
 800c140:	cfff69f3 	.word	0xcfff69f3
 800c144:	58000c00 	.word	0x58000c00
 800c148:	40011000 	.word	0x40011000
 800c14c:	58024400 	.word	0x58024400
 800c150:	40004400 	.word	0x40004400
 800c154:	40004800 	.word	0x40004800
 800c158:	40004c00 	.word	0x40004c00
 800c15c:	40005000 	.word	0x40005000
 800c160:	40011400 	.word	0x40011400
 800c164:	40007800 	.word	0x40007800
 800c168:	40007c00 	.word	0x40007c00
 800c16c:	08026a94 	.word	0x08026a94
 800c170:	000ffcff 	.word	0x000ffcff
 800c174:	03d09000 	.word	0x03d09000
 800c178:	003d0900 	.word	0x003d0900
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c17c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c180:	f43f af6e 	beq.w	800c060 <UART_SetConfig+0x1cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c184:	a803      	add	r0, sp, #12
 800c186:	f7ff fb9d 	bl	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c18a:	9804      	ldr	r0, [sp, #16]
        break;
 800c18c:	e7a5      	b.n	800c0da <UART_SetConfig+0x246>
 800c18e:	bf00      	nop

0800c190 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c190:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c192:	071a      	lsls	r2, r3, #28
{
 800c194:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c196:	d506      	bpl.n	800c1a6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c198:	6801      	ldr	r1, [r0, #0]
 800c19a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800c19c:	684a      	ldr	r2, [r1, #4]
 800c19e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c1a2:	4322      	orrs	r2, r4
 800c1a4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1a6:	07dc      	lsls	r4, r3, #31
 800c1a8:	d506      	bpl.n	800c1b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1aa:	6801      	ldr	r1, [r0, #0]
 800c1ac:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800c1ae:	684a      	ldr	r2, [r1, #4]
 800c1b0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c1b4:	4322      	orrs	r2, r4
 800c1b6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1b8:	0799      	lsls	r1, r3, #30
 800c1ba:	d506      	bpl.n	800c1ca <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1bc:	6801      	ldr	r1, [r0, #0]
 800c1be:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800c1c0:	684a      	ldr	r2, [r1, #4]
 800c1c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c1c6:	4322      	orrs	r2, r4
 800c1c8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1ca:	075a      	lsls	r2, r3, #29
 800c1cc:	d506      	bpl.n	800c1dc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1ce:	6801      	ldr	r1, [r0, #0]
 800c1d0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800c1d2:	684a      	ldr	r2, [r1, #4]
 800c1d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c1d8:	4322      	orrs	r2, r4
 800c1da:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1dc:	06dc      	lsls	r4, r3, #27
 800c1de:	d506      	bpl.n	800c1ee <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1e0:	6801      	ldr	r1, [r0, #0]
 800c1e2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800c1e4:	688a      	ldr	r2, [r1, #8]
 800c1e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c1ea:	4322      	orrs	r2, r4
 800c1ec:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1ee:	0699      	lsls	r1, r3, #26
 800c1f0:	d506      	bpl.n	800c200 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1f2:	6801      	ldr	r1, [r0, #0]
 800c1f4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800c1f6:	688a      	ldr	r2, [r1, #8]
 800c1f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c1fc:	4322      	orrs	r2, r4
 800c1fe:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c200:	065a      	lsls	r2, r3, #25
 800c202:	d510      	bpl.n	800c226 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c204:	6801      	ldr	r1, [r0, #0]
 800c206:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800c208:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c20a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c20e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800c212:	ea42 0204 	orr.w	r2, r2, r4
 800c216:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c218:	d105      	bne.n	800c226 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c21a:	684a      	ldr	r2, [r1, #4]
 800c21c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800c21e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800c222:	4322      	orrs	r2, r4
 800c224:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c226:	061b      	lsls	r3, r3, #24
 800c228:	d506      	bpl.n	800c238 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c22a:	6802      	ldr	r2, [r0, #0]
 800c22c:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c22e:	6853      	ldr	r3, [r2, #4]
 800c230:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800c234:	430b      	orrs	r3, r1
 800c236:	6053      	str	r3, [r2, #4]
}
 800c238:	bd10      	pop	{r4, pc}

0800c23a <UART_WaitOnFlagUntilTimeout>:
{
 800c23a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c23e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c242:	4604      	mov	r4, r0
 800c244:	460d      	mov	r5, r1
 800c246:	4617      	mov	r7, r2
 800c248:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c24a:	6822      	ldr	r2, [r4, #0]
 800c24c:	69d3      	ldr	r3, [r2, #28]
 800c24e:	ea35 0303 	bics.w	r3, r5, r3
 800c252:	bf0c      	ite	eq
 800c254:	2301      	moveq	r3, #1
 800c256:	2300      	movne	r3, #0
 800c258:	42bb      	cmp	r3, r7
 800c25a:	d001      	beq.n	800c260 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800c25c:	2000      	movs	r0, #0
 800c25e:	e022      	b.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800c260:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c264:	d0f2      	beq.n	800c24c <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c266:	f7fa fdd9 	bl	8006e1c <HAL_GetTick>
 800c26a:	eba0 0008 	sub.w	r0, r0, r8
 800c26e:	4548      	cmp	r0, r9
 800c270:	d829      	bhi.n	800c2c6 <UART_WaitOnFlagUntilTimeout+0x8c>
 800c272:	f1b9 0f00 	cmp.w	r9, #0
 800c276:	d026      	beq.n	800c2c6 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c278:	6821      	ldr	r1, [r4, #0]
 800c27a:	680b      	ldr	r3, [r1, #0]
 800c27c:	075a      	lsls	r2, r3, #29
 800c27e:	d5e4      	bpl.n	800c24a <UART_WaitOnFlagUntilTimeout+0x10>
 800c280:	2d80      	cmp	r5, #128	@ 0x80
 800c282:	d0e2      	beq.n	800c24a <UART_WaitOnFlagUntilTimeout+0x10>
 800c284:	2d40      	cmp	r5, #64	@ 0x40
 800c286:	d0e0      	beq.n	800c24a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c288:	69ce      	ldr	r6, [r1, #28]
 800c28a:	f016 0608 	ands.w	r6, r6, #8
 800c28e:	d00c      	beq.n	800c2aa <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c290:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800c292:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c294:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800c296:	f7ff fdd1 	bl	800be3c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800c29a:	2300      	movs	r3, #0
          return HAL_ERROR;
 800c29c:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c29e:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800c2a2:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2aa:	69cb      	ldr	r3, [r1, #28]
 800c2ac:	051b      	lsls	r3, r3, #20
 800c2ae:	d5cc      	bpl.n	800c24a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800c2b4:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2b6:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800c2b8:	f7ff fdc0 	bl	800be3c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2bc:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800c2be:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2c2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800c2c6:	2003      	movs	r0, #3
 800c2c8:	e7ed      	b.n	800c2a6 <UART_WaitOnFlagUntilTimeout+0x6c>

0800c2ca <HAL_UART_Transmit>:
{
 800c2ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2ce:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800c2d0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800c2d8:	2b20      	cmp	r3, #32
{
 800c2da:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800c2dc:	d146      	bne.n	800c36c <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	d046      	beq.n	800c370 <HAL_UART_Transmit+0xa6>
 800c2e2:	2a00      	cmp	r2, #0
 800c2e4:	d044      	beq.n	800c370 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2e6:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2e8:	2500      	movs	r5, #0
 800c2ea:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2ee:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800c2f2:	f7fa fd93 	bl	8006e1c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2f6:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c2f8:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800c2fa:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800c302:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c306:	d103      	bne.n	800c310 <HAL_UART_Transmit+0x46>
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	b90b      	cbnz	r3, 800c310 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 800c30c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800c30e:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800c310:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c314:	464b      	mov	r3, r9
 800c316:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800c31a:	b292      	uxth	r2, r2
 800c31c:	b942      	cbnz	r2, 800c330 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c31e:	2140      	movs	r1, #64	@ 0x40
 800c320:	4620      	mov	r0, r4
 800c322:	f7ff ff8a 	bl	800c23a <UART_WaitOnFlagUntilTimeout>
 800c326:	2320      	movs	r3, #32
 800c328:	b948      	cbnz	r0, 800c33e <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800c32a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800c32e:	e009      	b.n	800c344 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c330:	2200      	movs	r2, #0
 800c332:	2180      	movs	r1, #128	@ 0x80
 800c334:	4620      	mov	r0, r4
 800c336:	f7ff ff80 	bl	800c23a <UART_WaitOnFlagUntilTimeout>
 800c33a:	b130      	cbz	r0, 800c34a <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 800c33c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800c33e:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800c340:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800c344:	b003      	add	sp, #12
 800c346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c34a:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800c34c:	b95e      	cbnz	r6, 800c366 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c34e:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c352:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c356:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800c358:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800c35c:	3a01      	subs	r2, #1
 800c35e:	b292      	uxth	r2, r2
 800c360:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 800c364:	e7d4      	b.n	800c310 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c366:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c36a:	e7f4      	b.n	800c356 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800c36c:	2002      	movs	r0, #2
 800c36e:	e7e9      	b.n	800c344 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 800c370:	2001      	movs	r0, #1
 800c372:	e7e7      	b.n	800c344 <HAL_UART_Transmit+0x7a>

0800c374 <UART_CheckIdleState>:
{
 800c374:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c376:	2600      	movs	r6, #0
{
 800c378:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c37a:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800c37e:	f7fa fd4d 	bl	8006e1c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c382:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c384:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	071a      	lsls	r2, r3, #28
 800c38a:	d51c      	bpl.n	800c3c6 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c38c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c390:	4632      	mov	r2, r6
 800c392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	4603      	mov	r3, r0
 800c39a:	4620      	mov	r0, r4
 800c39c:	f7ff ff4d 	bl	800c23a <UART_WaitOnFlagUntilTimeout>
 800c3a0:	b188      	cbz	r0, 800c3c6 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c3a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a4:	e852 3f00 	ldrex	r3, [r2]
 800c3a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ac:	e842 3100 	strex	r1, r3, [r2]
 800c3b0:	2900      	cmp	r1, #0
 800c3b2:	d1f6      	bne.n	800c3a2 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800c3b4:	2320      	movs	r3, #32
 800c3b6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800c3ba:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c3c2:	b002      	add	sp, #8
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	075b      	lsls	r3, r3, #29
 800c3cc:	d524      	bpl.n	800c418 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c3d8:	4620      	mov	r0, r4
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	462b      	mov	r3, r5
 800c3de:	f7ff ff2c 	bl	800c23a <UART_WaitOnFlagUntilTimeout>
 800c3e2:	b1c8      	cbz	r0, 800c418 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e6:	e852 3f00 	ldrex	r3, [r2]
 800c3ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	d1f5      	bne.n	800c3e4 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f8:	f102 0308 	add.w	r3, r2, #8
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c400:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	f102 0008 	add.w	r0, r2, #8
 800c408:	e840 3100 	strex	r1, r3, [r0]
 800c40c:	2900      	cmp	r1, #0
 800c40e:	d1f3      	bne.n	800c3f8 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 800c410:	2320      	movs	r3, #32
 800c412:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800c416:	e7d0      	b.n	800c3ba <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800c418:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c41a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c41c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c420:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c424:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c426:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800c428:	e7c8      	b.n	800c3bc <UART_CheckIdleState+0x48>

0800c42a <HAL_UART_Init>:
{
 800c42a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c42c:	4604      	mov	r4, r0
 800c42e:	b350      	cbz	r0, 800c486 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c430:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800c434:	b91b      	cbnz	r3, 800c43e <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c436:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800c43a:	f7f5 f9d1 	bl	80017e0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800c43e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800c440:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c442:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800c446:	6813      	ldr	r3, [r2, #0]
 800c448:	f023 0301 	bic.w	r3, r3, #1
 800c44c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c44e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c450:	b113      	cbz	r3, 800c458 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800c452:	4620      	mov	r0, r4
 800c454:	f7ff fe9c 	bl	800c190 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c458:	4620      	mov	r0, r4
 800c45a:	f7ff fd1b 	bl	800be94 <UART_SetConfig>
 800c45e:	2801      	cmp	r0, #1
 800c460:	d011      	beq.n	800c486 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c462:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c464:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c466:	685a      	ldr	r2, [r3, #4]
 800c468:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c46c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c474:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	f042 0201 	orr.w	r2, r2, #1
}
 800c47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c480:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c482:	f7ff bf77 	b.w	800c374 <UART_CheckIdleState>
}
 800c486:	2001      	movs	r0, #1
 800c488:	bd10      	pop	{r4, pc}
	...

0800c48c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c48c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800c48e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c490:	b92b      	cbnz	r3, 800c49e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800c492:	2301      	movs	r3, #1
 800c494:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c498:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c49c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c49e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4a0:	4d09      	ldr	r5, [pc, #36]	@ (800c4c8 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c4a2:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4a4:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4a6:	4c09      	ldr	r4, [pc, #36]	@ (800c4cc <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4a8:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4ac:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4ae:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4b0:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4b2:	011b      	lsls	r3, r3, #4
 800c4b4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4b8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4bc:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4be:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4c0:	011b      	lsls	r3, r3, #4
 800c4c2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800c4c6:	e7e7      	b.n	800c498 <UARTEx_SetNbDataToProcess+0xc>
 800c4c8:	08026ab4 	.word	0x08026ab4
 800c4cc:	08026aac 	.word	0x08026aac

0800c4d0 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c4d0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d014      	beq.n	800c502 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4d8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c4da:	2324      	movs	r3, #36	@ 0x24
 800c4dc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4e0:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c4e2:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c4e4:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800c4e8:	f023 0301 	bic.w	r3, r3, #1
 800c4ec:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4f2:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c4f4:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c4f6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800c4fa:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800c4fe:	4618      	mov	r0, r3
 800c500:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c502:	2002      	movs	r0, #2
}
 800c504:	4770      	bx	lr

0800c506 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c506:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c508:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c50c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d017      	beq.n	800c542 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c512:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c514:	2324      	movs	r3, #36	@ 0x24
 800c516:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c51a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	f023 0301 	bic.w	r3, r3, #1
 800c522:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c524:	68ab      	ldr	r3, [r5, #8]
 800c526:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800c52a:	4319      	orrs	r1, r3
 800c52c:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c52e:	f7ff ffad 	bl	800c48c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c532:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c534:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c536:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800c53a:	2000      	movs	r0, #0
 800c53c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800c540:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800c542:	2002      	movs	r0, #2
 800c544:	e7fc      	b.n	800c540 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800c546 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c546:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c548:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c54c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d017      	beq.n	800c582 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c552:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c554:	2324      	movs	r3, #36	@ 0x24
 800c556:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c55a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	f023 0301 	bic.w	r3, r3, #1
 800c562:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c564:	68ab      	ldr	r3, [r5, #8]
 800c566:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800c56a:	4319      	orrs	r1, r3
 800c56c:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c56e:	f7ff ff8d 	bl	800c48c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c572:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c574:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c576:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800c57a:	2000      	movs	r0, #0
 800c57c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800c580:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800c582:	2002      	movs	r0, #2
 800c584:	e7fc      	b.n	800c580 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800c586 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800c586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c58a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800c58e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800c592:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800c596:	ea43 0308 	orr.w	r3, r3, r8
 800c59a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800c59e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c5a2:	6809      	ldr	r1, [r1, #0]
 800c5a4:	b981      	cbnz	r1, 800c5c8 <FMC_SDRAM_Init+0x42>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5a6:	ea43 030e 	orr.w	r3, r3, lr
 800c5aa:	6801      	ldr	r1, [r0, #0]
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	f36f 010e 	bfc	r1, #0, #15
 800c5b2:	ea43 030c 	orr.w	r3, r3, ip
 800c5b6:	433b      	orrs	r3, r7
 800c5b8:	4333      	orrs	r3, r6
 800c5ba:	432b      	orrs	r3, r5
 800c5bc:	4323      	orrs	r3, r4
 800c5be:	430b      	orrs	r3, r1
 800c5c0:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5c8:	6801      	ldr	r1, [r0, #0]
 800c5ca:	ea43 030e 	orr.w	r3, r3, lr
 800c5ce:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800c5d2:	430b      	orrs	r3, r1
 800c5d4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c5d6:	ea42 030c 	orr.w	r3, r2, ip
 800c5da:	6841      	ldr	r1, [r0, #4]
 800c5dc:	433b      	orrs	r3, r7
 800c5de:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800c5e2:	4333      	orrs	r3, r6
 800c5e4:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800c5e8:	432b      	orrs	r3, r5
 800c5ea:	4323      	orrs	r3, r4
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	6043      	str	r3, [r0, #4]
 800c5f0:	e7e7      	b.n	800c5c2 <FMC_SDRAM_Init+0x3c>

0800c5f2 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c5f2:	68cb      	ldr	r3, [r1, #12]
 800c5f4:	f103 3cff 	add.w	ip, r3, #4294967295
 800c5f8:	694b      	ldr	r3, [r1, #20]
{
 800c5fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	684c      	ldr	r4, [r1, #4]
 800c600:	688f      	ldr	r7, [r1, #8]
 800c602:	690e      	ldr	r6, [r1, #16]
 800c604:	051b      	lsls	r3, r3, #20
 800c606:	698d      	ldr	r5, [r1, #24]
 800c608:	3c01      	subs	r4, #1
 800c60a:	3f01      	subs	r7, #1
 800c60c:	3e01      	subs	r6, #1
 800c60e:	3d01      	subs	r5, #1
 800c610:	6809      	ldr	r1, [r1, #0]
 800c612:	0124      	lsls	r4, r4, #4
 800c614:	023f      	lsls	r7, r7, #8
 800c616:	3901      	subs	r1, #1
 800c618:	0436      	lsls	r6, r6, #16
 800c61a:	062d      	lsls	r5, r5, #24
 800c61c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800c620:	b95a      	cbnz	r2, 800c63a <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c622:	430b      	orrs	r3, r1
 800c624:	6882      	ldr	r2, [r0, #8]
 800c626:	4323      	orrs	r3, r4
 800c628:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c62c:	433b      	orrs	r3, r7
 800c62e:	4333      	orrs	r3, r6
 800c630:	432b      	orrs	r3, r5
 800c632:	4313      	orrs	r3, r2
 800c634:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800c636:	2000      	movs	r0, #0
 800c638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c63a:	6882      	ldr	r2, [r0, #8]
 800c63c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c640:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800c644:	4313      	orrs	r3, r2
 800c646:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c648:	ea44 0307 	orr.w	r3, r4, r7
 800c64c:	68c2      	ldr	r2, [r0, #12]
 800c64e:	430b      	orrs	r3, r1
 800c650:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c654:	4333      	orrs	r3, r6
 800c656:	432b      	orrs	r3, r5
 800c658:	4313      	orrs	r3, r2
 800c65a:	60c3      	str	r3, [r0, #12]
 800c65c:	e7eb      	b.n	800c636 <FMC_SDRAM_Timing_Init+0x44>

0800c65e <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800c65e:	4603      	mov	r3, r0
 800c660:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800c664:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800c668:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800c66c:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800c66e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c672:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800c674:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800c676:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800c678:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800c67a:	4770      	bx	lr

0800c67c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c67c:	b510      	push	{r4, lr}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c67e:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c682:	6902      	ldr	r2, [r0, #16]
 800c684:	4323      	orrs	r3, r4
 800c686:	68cc      	ldr	r4, [r1, #12]
 800c688:	f36f 0215 	bfc	r2, #0, #22
 800c68c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800c690:	4313      	orrs	r3, r2
 800c692:	688a      	ldr	r2, [r1, #8]
 800c694:	3a01      	subs	r2, #1
 800c696:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c69a:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800c69c:	2000      	movs	r0, #0
 800c69e:	bd10      	pop	{r4, pc}

0800c6a0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c6a0:	6943      	ldr	r3, [r0, #20]
 800c6a2:	f36f 034d 	bfc	r3, #1, #13
 800c6a6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c6aa:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	4770      	bx	lr

0800c6b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6b0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c6b6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6b8:	f001 fedc 	bl	800e474 <xTaskGetSchedulerState>
 800c6bc:	2801      	cmp	r0, #1
 800c6be:	d003      	beq.n	800c6c8 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c6c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800c6c4:	f000 bc46 	b.w	800cf54 <xPortSysTickHandler>
}
 800c6c8:	bd08      	pop	{r3, pc}
	...

0800c6cc <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6cc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6d0:	b92b      	cbnz	r3, 800c6de <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c6d2:	4b06      	ldr	r3, [pc, #24]	@ (800c6ec <osKernelInitialize+0x20>)
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	b928      	cbnz	r0, 800c6e4 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c6d8:	2201      	movs	r2, #1
 800c6da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c6dc:	4770      	bx	lr
    stat = osErrorISR;
 800c6de:	f06f 0005 	mvn.w	r0, #5
 800c6e2:	4770      	bx	lr
    } else {
      stat = osError;
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	2400c638 	.word	0x2400c638

0800c6f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c6f0:	b510      	push	{r4, lr}
 800c6f2:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6f6:	b95c      	cbnz	r4, 800c710 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c6f8:	4b08      	ldr	r3, [pc, #32]	@ (800c71c <osKernelStart+0x2c>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	2a01      	cmp	r2, #1
 800c6fe:	d10a      	bne.n	800c716 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c700:	4a07      	ldr	r2, [pc, #28]	@ (800c720 <osKernelStart+0x30>)
 800c702:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c704:	2202      	movs	r2, #2
 800c706:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c708:	f001 fd54 	bl	800e1b4 <vTaskStartScheduler>
      stat = osOK;
 800c70c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c70e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c710:	f06f 0005 	mvn.w	r0, #5
 800c714:	e7fb      	b.n	800c70e <osKernelStart+0x1e>
      stat = osError;
 800c716:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800c71a:	e7f8      	b.n	800c70e <osKernelStart+0x1e>
 800c71c:	2400c638 	.word	0x2400c638
 800c720:	e000ed00 	.word	0xe000ed00

0800c724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c724:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c726:	4614      	mov	r4, r2
 800c728:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c72a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c72c:	460b      	mov	r3, r1
  hTask = NULL;
 800c72e:	9205      	str	r2, [sp, #20]
 800c730:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c734:	b9fa      	cbnz	r2, 800c776 <osThreadNew+0x52>
 800c736:	b1f0      	cbz	r0, 800c776 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c738:	b354      	cbz	r4, 800c790 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c73a:	69a5      	ldr	r5, [r4, #24]
 800c73c:	b125      	cbz	r5, 800c748 <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c73e:	1e69      	subs	r1, r5, #1
 800c740:	2937      	cmp	r1, #55	@ 0x37
 800c742:	d902      	bls.n	800c74a <osThreadNew+0x26>
        return (NULL);
 800c744:	2000      	movs	r0, #0
 800c746:	e017      	b.n	800c778 <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 800c748:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c74a:	6862      	ldr	r2, [r4, #4]
 800c74c:	07d2      	lsls	r2, r2, #31
 800c74e:	d4f9      	bmi.n	800c744 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 800c750:	6966      	ldr	r6, [r4, #20]
 800c752:	b19e      	cbz	r6, 800c77c <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c754:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800c756:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c758:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
 800c75c:	b187      	cbz	r7, 800c780 <osThreadNew+0x5c>
 800c75e:	f1bc 0f5f 	cmp.w	ip, #95	@ 0x5f
 800c762:	d908      	bls.n	800c776 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c764:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c766:	b134      	cbz	r4, 800c776 <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c768:	b12e      	cbz	r6, 800c776 <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c76a:	9500      	str	r5, [sp, #0]
 800c76c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800c770:	f001 fb85 	bl	800de7e <xTaskCreateStatic>
 800c774:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c776:	9805      	ldr	r0, [sp, #20]
}
 800c778:	b007      	add	sp, #28
 800c77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800c77c:	2280      	movs	r2, #128	@ 0x80
 800c77e:	e7ea      	b.n	800c756 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c780:	f1bc 0f00 	cmp.w	ip, #0
 800c784:	d1f7      	bne.n	800c776 <osThreadNew+0x52>
 800c786:	6924      	ldr	r4, [r4, #16]
 800c788:	2c00      	cmp	r4, #0
 800c78a:	d1f4      	bne.n	800c776 <osThreadNew+0x52>
 800c78c:	460c      	mov	r4, r1
 800c78e:	e001      	b.n	800c794 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 800c790:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800c792:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c794:	a905      	add	r1, sp, #20
 800c796:	b292      	uxth	r2, r2
 800c798:	e9cd 5100 	strd	r5, r1, [sp]
 800c79c:	4621      	mov	r1, r4
 800c79e:	f001 fba6 	bl	800deee <xTaskCreate>
 800c7a2:	2801      	cmp	r0, #1
            hTask = NULL;
 800c7a4:	bf1c      	itt	ne
 800c7a6:	2300      	movne	r3, #0
 800c7a8:	9305      	strne	r3, [sp, #20]
 800c7aa:	e7e4      	b.n	800c776 <osThreadNew+0x52>

0800c7ac <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800c7b4:	b117      	cbz	r7, 800c7bc <osMutexNew+0x10>
  hMutex = NULL;
 800c7b6:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (attr != NULL) {
 800c7bc:	b320      	cbz	r0, 800c808 <osMutexNew+0x5c>
      type = attr->attr_bits;
 800c7be:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800c7c0:	0733      	lsls	r3, r6, #28
 800c7c2:	d4f8      	bmi.n	800c7b6 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c7c4:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c7c8:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800c7cc:	b199      	cbz	r1, 800c7f6 <osMutexNew+0x4a>
 800c7ce:	2b4f      	cmp	r3, #79	@ 0x4f
 800c7d0:	d9f1      	bls.n	800c7b6 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800c7d2:	b1be      	cbz	r6, 800c804 <osMutexNew+0x58>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c7d4:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c7d6:	f000 fec4 	bl	800d562 <xQueueCreateMutexStatic>
 800c7da:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d0ea      	beq.n	800c7b6 <osMutexNew+0xa>
          name = attr->name;
 800c7e0:	682d      	ldr	r5, [r5, #0]
 800c7e2:	4637      	mov	r7, r6
        vQueueAddToRegistry (hMutex, name);
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f001 f984 	bl	800daf4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c7ec:	2f00      	cmp	r7, #0
 800c7ee:	d0e3      	beq.n	800c7b8 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c7f0:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800c7f4:	e7e0      	b.n	800c7b8 <osMutexNew+0xc>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1dd      	bne.n	800c7b6 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800c7fa:	b12e      	cbz	r6, 800c808 <osMutexNew+0x5c>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c7fc:	2004      	movs	r0, #4
 800c7fe:	f000 fee4 	bl	800d5ca <xQueueCreateMutex>
 800c802:	e7ea      	b.n	800c7da <osMutexNew+0x2e>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c804:	2001      	movs	r0, #1
 800c806:	e7e6      	b.n	800c7d6 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800c808:	2001      	movs	r0, #1
 800c80a:	f000 fede 	bl	800d5ca <xQueueCreateMutex>
      if (hMutex != NULL) {
 800c80e:	4604      	mov	r4, r0
 800c810:	2800      	cmp	r0, #0
 800c812:	d0d0      	beq.n	800c7b6 <osMutexNew+0xa>
        if (attr != NULL) {
 800c814:	2d00      	cmp	r5, #0
 800c816:	d0e5      	beq.n	800c7e4 <osMutexNew+0x38>
 800c818:	2600      	movs	r6, #0
 800c81a:	e7e1      	b.n	800c7e0 <osMutexNew+0x34>

0800c81c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	4603      	mov	r3, r0
 800c820:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c822:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800c826:	f003 0201 	and.w	r2, r3, #1
 800c82a:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c82e:	b995      	cbnz	r5, 800c856 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c830:	2b01      	cmp	r3, #1
 800c832:	d913      	bls.n	800c85c <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c834:	b162      	cbz	r2, 800c850 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c836:	f001 f8ee 	bl	800da16 <xQueueTakeMutexRecursive>
 800c83a:	2801      	cmp	r0, #1
 800c83c:	d101      	bne.n	800c842 <osMutexAcquire+0x26>
  stat = osOK;
 800c83e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c840:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800c842:	2c00      	cmp	r4, #0
 800c844:	bf14      	ite	ne
 800c846:	f06f 0001 	mvnne.w	r0, #1
 800c84a:	f06f 0002 	mvneq.w	r0, #2
 800c84e:	e7f7      	b.n	800c840 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c850:	f001 f824 	bl	800d89c <xQueueSemaphoreTake>
 800c854:	e7f1      	b.n	800c83a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800c856:	f06f 0005 	mvn.w	r0, #5
 800c85a:	e7f1      	b.n	800c840 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800c85c:	f06f 0003 	mvn.w	r0, #3
 800c860:	e7ee      	b.n	800c840 <osMutexAcquire+0x24>

0800c862 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c862:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c864:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c868:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800c86a:	f002 0301 	and.w	r3, r2, #1
 800c86e:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c872:	b979      	cbnz	r1, 800c894 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c874:	2a01      	cmp	r2, #1
 800c876:	d910      	bls.n	800c89a <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c878:	b13b      	cbz	r3, 800c88a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c87a:	f000 fe87 	bl	800d58c <xQueueGiveMutexRecursive>
 800c87e:	2801      	cmp	r0, #1
  stat = osOK;
 800c880:	bf0c      	ite	eq
 800c882:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800c884:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c888:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c88a:	461a      	mov	r2, r3
 800c88c:	4619      	mov	r1, r3
 800c88e:	f000 fdb6 	bl	800d3fe <xQueueGenericSend>
 800c892:	e7f4      	b.n	800c87e <osMutexRelease+0x1c>
    stat = osErrorISR;
 800c894:	f06f 0005 	mvn.w	r0, #5
 800c898:	e7f6      	b.n	800c888 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800c89a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c89e:	e7f3      	b.n	800c888 <osMutexRelease+0x26>

0800c8a0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c8a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	460e      	mov	r6, r1
 800c8a6:	4615      	mov	r5, r2
 800c8a8:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c8ac:	b942      	cbnz	r2, 800c8c0 <osSemaphoreNew+0x20>
 800c8ae:	b138      	cbz	r0, 800c8c0 <osSemaphoreNew+0x20>
 800c8b0:	4288      	cmp	r0, r1
 800c8b2:	d305      	bcc.n	800c8c0 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800c8b4:	b155      	cbz	r5, 800c8cc <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8b6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800c8ba:	b12b      	cbz	r3, 800c8c8 <osSemaphoreNew+0x28>
 800c8bc:	2f4f      	cmp	r7, #79	@ 0x4f
 800c8be:	d822      	bhi.n	800c906 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800c8c0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	b003      	add	sp, #12
 800c8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8c8:	2f00      	cmp	r7, #0
 800c8ca:	d1f9      	bne.n	800c8c0 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800c8cc:	2c01      	cmp	r4, #1
 800c8ce:	d00c      	beq.n	800c8ea <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	f000 fd75 	bl	800d3c2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800c8d8:	4604      	mov	r4, r0
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0f0      	beq.n	800c8c0 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800c8de:	b985      	cbnz	r5, 800c902 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f001 f906 	bl	800daf4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800c8e8:	e7eb      	b.n	800c8c2 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	2001      	movs	r0, #1
 800c8f0:	f000 fd1e 	bl	800d330 <xQueueGenericCreate>
 800c8f4:	e00e      	b.n	800c914 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f000 fd41 	bl	800d37e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2800      	cmp	r0, #0
 800c900:	d0de      	beq.n	800c8c0 <osSemaphoreNew+0x20>
          name = attr->name;
 800c902:	682d      	ldr	r5, [r5, #0]
 800c904:	e7ec      	b.n	800c8e0 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800c906:	2801      	cmp	r0, #1
 800c908:	d1f5      	bne.n	800c8f6 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c90a:	2103      	movs	r1, #3
 800c90c:	9100      	str	r1, [sp, #0]
 800c90e:	4611      	mov	r1, r2
 800c910:	f000 fcc0 	bl	800d294 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800c914:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c916:	2800      	cmp	r0, #0
 800c918:	d0d2      	beq.n	800c8c0 <osSemaphoreNew+0x20>
 800c91a:	2e00      	cmp	r6, #0
 800c91c:	d0df      	beq.n	800c8de <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c91e:	2300      	movs	r3, #0
 800c920:	461a      	mov	r2, r3
 800c922:	4619      	mov	r1, r3
 800c924:	f000 fd6b 	bl	800d3fe <xQueueGenericSend>
 800c928:	2801      	cmp	r0, #1
 800c92a:	d0d8      	beq.n	800c8de <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800c92c:	4620      	mov	r0, r4
 800c92e:	f001 f90b 	bl	800db48 <vQueueDelete>
      if (hSemaphore != NULL) {
 800c932:	e7c5      	b.n	800c8c0 <osSemaphoreNew+0x20>

0800c934 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c934:	b513      	push	{r0, r1, r4, lr}
 800c936:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c938:	b328      	cbz	r0, 800c986 <osSemaphoreAcquire+0x52>
 800c93a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c93e:	b1cb      	cbz	r3, 800c974 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800c940:	bb09      	cbnz	r1, 800c986 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c942:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c944:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c946:	f001 f887 	bl	800da58 <xQueueReceiveFromISR>
 800c94a:	2801      	cmp	r0, #1
 800c94c:	d003      	beq.n	800c956 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800c94e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c952:	b002      	add	sp, #8
 800c954:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800c956:	9b01      	ldr	r3, [sp, #4]
 800c958:	b90b      	cbnz	r3, 800c95e <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800c95a:	2000      	movs	r0, #0
 800c95c:	e7f9      	b.n	800c952 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800c95e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c966:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	e7f2      	b.n	800c95a <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c974:	f000 ff92 	bl	800d89c <xQueueSemaphoreTake>
 800c978:	2801      	cmp	r0, #1
 800c97a:	d0ee      	beq.n	800c95a <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	d0e6      	beq.n	800c94e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800c980:	f06f 0001 	mvn.w	r0, #1
 800c984:	e7e5      	b.n	800c952 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800c986:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c98a:	e7e2      	b.n	800c952 <osSemaphoreAcquire+0x1e>

0800c98c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c98c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c98e:	b318      	cbz	r0, 800c9d8 <osSemaphoreRelease+0x4c>
 800c990:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c994:	b1cb      	cbz	r3, 800c9ca <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800c996:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c998:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800c99a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c99c:	f000 fe8f 	bl	800d6be <xQueueGiveFromISR>
 800c9a0:	2801      	cmp	r0, #1
 800c9a2:	d004      	beq.n	800c9ae <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800c9a4:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800c9a8:	b003      	add	sp, #12
 800c9aa:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800c9ae:	9b01      	ldr	r3, [sp, #4]
 800c9b0:	b14b      	cbz	r3, 800c9c6 <osSemaphoreRelease+0x3a>
 800c9b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c9b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c9c6:	2000      	movs	r0, #0
 800c9c8:	e7ee      	b.n	800c9a8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	f000 fd16 	bl	800d3fe <xQueueGenericSend>
 800c9d2:	2801      	cmp	r0, #1
 800c9d4:	d0f7      	beq.n	800c9c6 <osSemaphoreRelease+0x3a>
 800c9d6:	e7e5      	b.n	800c9a4 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800c9d8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c9dc:	e7e4      	b.n	800c9a8 <osSemaphoreRelease+0x1c>

0800c9de <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	460e      	mov	r6, r1
 800c9e4:	4614      	mov	r4, r2
 800c9e6:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c9ea:	b11f      	cbz	r7, 800c9f4 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800c9ec:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	b003      	add	sp, #12
 800c9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d0f9      	beq.n	800c9ec <osMessageQueueNew+0xe>
 800c9f8:	2900      	cmp	r1, #0
 800c9fa:	d0f7      	beq.n	800c9ec <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800c9fc:	b1da      	cbz	r2, 800ca36 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c9fe:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800ca02:	b183      	cbz	r3, 800ca26 <osMessageQueueNew+0x48>
 800ca04:	2a4f      	cmp	r2, #79	@ 0x4f
 800ca06:	d9f1      	bls.n	800c9ec <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca08:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ca0a:	2a00      	cmp	r2, #0
 800ca0c:	d0ee      	beq.n	800c9ec <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ca0e:	434d      	muls	r5, r1
 800ca10:	6966      	ldr	r6, [r4, #20]
 800ca12:	42ae      	cmp	r6, r5
 800ca14:	d3ea      	bcc.n	800c9ec <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ca16:	9700      	str	r7, [sp, #0]
 800ca18:	f000 fc3c 	bl	800d294 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d0e4      	beq.n	800c9ec <osMessageQueueNew+0xe>
        name = attr->name;
 800ca22:	6824      	ldr	r4, [r4, #0]
 800ca24:	e011      	b.n	800ca4a <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ca26:	2a00      	cmp	r2, #0
 800ca28:	d1e0      	bne.n	800c9ec <osMessageQueueNew+0xe>
 800ca2a:	6923      	ldr	r3, [r4, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1dd      	bne.n	800c9ec <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ca30:	6963      	ldr	r3, [r4, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1da      	bne.n	800c9ec <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800ca36:	4628      	mov	r0, r5
 800ca38:	2200      	movs	r2, #0
 800ca3a:	4631      	mov	r1, r6
 800ca3c:	f000 fc78 	bl	800d330 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800ca40:	4605      	mov	r5, r0
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d0d2      	beq.n	800c9ec <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800ca46:	2c00      	cmp	r4, #0
 800ca48:	d1eb      	bne.n	800ca22 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f001 f851 	bl	800daf4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800ca52:	e7cc      	b.n	800c9ee <osMessageQueueNew+0x10>

0800ca54 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ca54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca56:	461c      	mov	r4, r3
 800ca58:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800ca5c:	b1de      	cbz	r6, 800ca96 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca5e:	b338      	cbz	r0, 800cab0 <osMessageQueuePut+0x5c>
 800ca60:	b331      	cbz	r1, 800cab0 <osMessageQueuePut+0x5c>
 800ca62:	bb2b      	cbnz	r3, 800cab0 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ca64:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ca66:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ca68:	f000 fdcc 	bl	800d604 <xQueueGenericSendFromISR>
 800ca6c:	2801      	cmp	r0, #1
 800ca6e:	d003      	beq.n	800ca78 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800ca70:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800ca74:	b002      	add	sp, #8
 800ca76:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800ca78:	9b01      	ldr	r3, [sp, #4]
 800ca7a:	b90b      	cbnz	r3, 800ca80 <osMessageQueuePut+0x2c>
  stat = osOK;
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7f9      	b.n	800ca74 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800ca80:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca88:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	f3bf 8f6f 	isb	sy
 800ca94:	e7f2      	b.n	800ca7c <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ca96:	b158      	cbz	r0, 800cab0 <osMessageQueuePut+0x5c>
 800ca98:	b151      	cbz	r1, 800cab0 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ca9a:	4633      	mov	r3, r6
 800ca9c:	4622      	mov	r2, r4
 800ca9e:	f000 fcae 	bl	800d3fe <xQueueGenericSend>
 800caa2:	2801      	cmp	r0, #1
 800caa4:	d0ea      	beq.n	800ca7c <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800caa6:	2c00      	cmp	r4, #0
 800caa8:	d0e2      	beq.n	800ca70 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800caaa:	f06f 0001 	mvn.w	r0, #1
 800caae:	e7e1      	b.n	800ca74 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800cab0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cab4:	e7de      	b.n	800ca74 <osMessageQueuePut+0x20>

0800cab6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cab8:	461c      	mov	r4, r3
 800caba:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cabe:	b1db      	cbz	r3, 800caf8 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cac0:	b330      	cbz	r0, 800cb10 <osMessageQueueGet+0x5a>
 800cac2:	b329      	cbz	r1, 800cb10 <osMessageQueueGet+0x5a>
 800cac4:	bb24      	cbnz	r4, 800cb10 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cac6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cac8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800caca:	f000 ffc5 	bl	800da58 <xQueueReceiveFromISR>
 800cace:	2801      	cmp	r0, #1
 800cad0:	d003      	beq.n	800cada <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800cad2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cad6:	b003      	add	sp, #12
 800cad8:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800cada:	9b01      	ldr	r3, [sp, #4]
 800cadc:	b90b      	cbnz	r3, 800cae2 <osMessageQueueGet+0x2c>
  stat = osOK;
 800cade:	2000      	movs	r0, #0
 800cae0:	e7f9      	b.n	800cad6 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800cae2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800caee:	f3bf 8f4f 	dsb	sy
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	e7f2      	b.n	800cade <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800caf8:	b150      	cbz	r0, 800cb10 <osMessageQueueGet+0x5a>
 800cafa:	b149      	cbz	r1, 800cb10 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cafc:	4622      	mov	r2, r4
 800cafe:	f000 fe2f 	bl	800d760 <xQueueReceive>
 800cb02:	2801      	cmp	r0, #1
 800cb04:	d0eb      	beq.n	800cade <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800cb06:	2c00      	cmp	r4, #0
 800cb08:	d0e3      	beq.n	800cad2 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800cb0a:	f06f 0001 	mvn.w	r0, #1
 800cb0e:	e7e2      	b.n	800cad6 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800cb10:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cb14:	e7df      	b.n	800cad6 <osMessageQueueGet+0x20>
	...

0800cb18 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb18:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <vApplicationGetIdleTaskMemory+0x10>)
 800cb1a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb1c:	4b03      	ldr	r3, [pc, #12]	@ (800cb2c <vApplicationGetIdleTaskMemory+0x14>)
 800cb1e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb20:	2380      	movs	r3, #128	@ 0x80
 800cb22:	6013      	str	r3, [r2, #0]
}
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	2400c5d8 	.word	0x2400c5d8
 800cb2c:	2400c3d8 	.word	0x2400c3d8

0800cb30 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb30:	4b03      	ldr	r3, [pc, #12]	@ (800cb40 <vApplicationGetTimerTaskMemory+0x10>)
 800cb32:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb34:	4b03      	ldr	r3, [pc, #12]	@ (800cb44 <vApplicationGetTimerTaskMemory+0x14>)
 800cb36:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb3c:	6013      	str	r3, [r2, #0]
}
 800cb3e:	4770      	bx	lr
 800cb40:	2400c378 	.word	0x2400c378
 800cb44:	2400bf78 	.word	0x2400bf78

0800cb48 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb48:	4b10      	ldr	r3, [pc, #64]	@ (800cb8c <prvInsertBlockIntoFreeList+0x44>)
{
 800cb4a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4283      	cmp	r3, r0
 800cb52:	d3fb      	bcc.n	800cb4c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb54:	6854      	ldr	r4, [r2, #4]
 800cb56:	1911      	adds	r1, r2, r4
 800cb58:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb5a:	bf01      	itttt	eq
 800cb5c:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 800cb5e:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb60:	1909      	addeq	r1, r1, r4
 800cb62:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb64:	6844      	ldr	r4, [r0, #4]
 800cb66:	1901      	adds	r1, r0, r4
 800cb68:	428b      	cmp	r3, r1
 800cb6a:	d10c      	bne.n	800cb86 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb6c:	4908      	ldr	r1, [pc, #32]	@ (800cb90 <prvInsertBlockIntoFreeList+0x48>)
 800cb6e:	6809      	ldr	r1, [r1, #0]
 800cb70:	428b      	cmp	r3, r1
 800cb72:	d003      	beq.n	800cb7c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb74:	6859      	ldr	r1, [r3, #4]
 800cb76:	4421      	add	r1, r4
 800cb78:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb7a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb7c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb7e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb80:	bf18      	it	ne
 800cb82:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb84:	bd10      	pop	{r4, pc}
 800cb86:	4619      	mov	r1, r3
 800cb88:	e7f8      	b.n	800cb7c <prvInsertBlockIntoFreeList+0x34>
 800cb8a:	bf00      	nop
 800cb8c:	2400c654 	.word	0x2400c654
 800cb90:	2400c650 	.word	0x2400c650

0800cb94 <pvPortMalloc>:
{
 800cb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb98:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800cb9a:	f001 f9d7 	bl	800df4c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800cb9e:	4940      	ldr	r1, [pc, #256]	@ (800cca0 <pvPortMalloc+0x10c>)
 800cba0:	4d40      	ldr	r5, [pc, #256]	@ (800cca4 <pvPortMalloc+0x110>)
 800cba2:	680b      	ldr	r3, [r1, #0]
 800cba4:	b9f3      	cbnz	r3, 800cbe4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800cba6:	4a40      	ldr	r2, [pc, #256]	@ (800cca8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800cba8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbaa:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbac:	4e3f      	ldr	r6, [pc, #252]	@ (800ccac <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbae:	bf1b      	ittet	ne
 800cbb0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbb2:	4b3f      	ldrne	r3, [pc, #252]	@ (800ccb0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbb4:	4b3f      	ldreq	r3, [pc, #252]	@ (800ccb4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800cbba:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbbc:	bf18      	it	ne
 800cbbe:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbc0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbc2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800cbc4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbc6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800cbca:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cbce:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800cbd0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cbd2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbd6:	4b38      	ldr	r3, [pc, #224]	@ (800ccb8 <pvPortMalloc+0x124>)
 800cbd8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbda:	4b38      	ldr	r3, [pc, #224]	@ (800ccbc <pvPortMalloc+0x128>)
 800cbdc:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbde:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cbe2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbe4:	682e      	ldr	r6, [r5, #0]
 800cbe6:	4226      	tst	r6, r4
 800cbe8:	d155      	bne.n	800cc96 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800cbea:	2c00      	cmp	r4, #0
 800cbec:	d046      	beq.n	800cc7c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800cbee:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbf2:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbf4:	bf1c      	itt	ne
 800cbf6:	f023 0307 	bicne.w	r3, r3, #7
 800cbfa:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d04a      	beq.n	800cc96 <pvPortMalloc+0x102>
 800cc00:	4f2e      	ldr	r7, [pc, #184]	@ (800ccbc <pvPortMalloc+0x128>)
 800cc02:	683c      	ldr	r4, [r7, #0]
 800cc04:	429c      	cmp	r4, r3
 800cc06:	d346      	bcc.n	800cc96 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800cc08:	4a28      	ldr	r2, [pc, #160]	@ (800ccac <pvPortMalloc+0x118>)
 800cc0a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc0c:	6868      	ldr	r0, [r5, #4]
 800cc0e:	4298      	cmp	r0, r3
 800cc10:	d204      	bcs.n	800cc1c <pvPortMalloc+0x88>
 800cc12:	f8d5 c000 	ldr.w	ip, [r5]
 800cc16:	f1bc 0f00 	cmp.w	ip, #0
 800cc1a:	d115      	bne.n	800cc48 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800cc1c:	6809      	ldr	r1, [r1, #0]
 800cc1e:	42a9      	cmp	r1, r5
 800cc20:	d039      	beq.n	800cc96 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc22:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc24:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc28:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc2a:	1ac2      	subs	r2, r0, r3
 800cc2c:	2a10      	cmp	r2, #16
 800cc2e:	d912      	bls.n	800cc56 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc30:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc32:	0741      	lsls	r1, r0, #29
 800cc34:	d00b      	beq.n	800cc4e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	e7fe      	b.n	800cc46 <pvPortMalloc+0xb2>
					pxPreviousBlock = pxBlock;
 800cc48:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc4a:	4665      	mov	r5, ip
 800cc4c:	e7de      	b.n	800cc0c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc4e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc50:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc52:	f7ff ff79 	bl	800cb48 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc56:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc58:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc5a:	4917      	ldr	r1, [pc, #92]	@ (800ccb8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc5c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc5e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc60:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800cc62:	4a17      	ldr	r2, [pc, #92]	@ (800ccc0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc64:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800cc66:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800cc68:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc6a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800cc6c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc70:	bf38      	it	cc
 800cc72:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc74:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc78:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800cc7a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800cc7c:	f001 fa0a 	bl	800e094 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc80:	0763      	lsls	r3, r4, #29
 800cc82:	d00a      	beq.n	800cc9a <pvPortMalloc+0x106>
 800cc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	e7fe      	b.n	800cc94 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800cc96:	2400      	movs	r4, #0
 800cc98:	e7f0      	b.n	800cc7c <pvPortMalloc+0xe8>
}
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca0:	2400c650 	.word	0x2400c650
 800cca4:	2400c63c 	.word	0x2400c63c
 800cca8:	2400c65c 	.word	0x2400c65c
 800ccac:	2400c654 	.word	0x2400c654
 800ccb0:	24024cfc 	.word	0x24024cfc
 800ccb4:	000186a0 	.word	0x000186a0
 800ccb8:	2400c648 	.word	0x2400c648
 800ccbc:	2400c64c 	.word	0x2400c64c
 800ccc0:	2400c644 	.word	0x2400c644

0800ccc4 <vPortFree>:
{
 800ccc4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	b390      	cbz	r0, 800cd30 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccca:	4a1a      	ldr	r2, [pc, #104]	@ (800cd34 <vPortFree+0x70>)
 800cccc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	4213      	tst	r3, r2
 800ccd4:	d108      	bne.n	800cce8 <vPortFree+0x24>
 800ccd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccda:	f383 8811 	msr	BASEPRI, r3
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f3bf 8f4f 	dsb	sy
 800cce6:	e7fe      	b.n	800cce6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cce8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ccec:	b141      	cbz	r1, 800cd00 <vPortFree+0x3c>
 800ccee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	e7fe      	b.n	800ccfe <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd00:	ea23 0302 	bic.w	r3, r3, r2
 800cd04:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800cd08:	f001 f920 	bl	800df4c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd0c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd38 <vPortFree+0x74>)
 800cd0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd12:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd16:	6811      	ldr	r1, [r2, #0]
 800cd18:	440b      	add	r3, r1
 800cd1a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd1c:	f7ff ff14 	bl	800cb48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd20:	4a06      	ldr	r2, [pc, #24]	@ (800cd3c <vPortFree+0x78>)
 800cd22:	6813      	ldr	r3, [r2, #0]
 800cd24:	3301      	adds	r3, #1
}
 800cd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800cd2a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800cd2c:	f001 b9b2 	b.w	800e094 <xTaskResumeAll>
}
 800cd30:	bd10      	pop	{r4, pc}
 800cd32:	bf00      	nop
 800cd34:	2400c63c 	.word	0x2400c63c
 800cd38:	2400c64c 	.word	0x2400c64c
 800cd3c:	2400c640 	.word	0x2400c640

0800cd40 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd40:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd44:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd48:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd4a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd4c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd50:	2300      	movs	r3, #0
 800cd52:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd54:	4770      	bx	lr

0800cd56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd5a:	4770      	bx	lr

0800cd5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd5c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd5e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800cd60:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd62:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd64:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd66:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800cd68:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800cd6a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	6003      	str	r3, [r0, #0]
}
 800cd70:	4770      	bx	lr

0800cd72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd72:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd74:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd76:	1c63      	adds	r3, r4, #1
 800cd78:	d10a      	bne.n	800cd90 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd7a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd80:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd82:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd84:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800cd86:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800cd88:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	6003      	str	r3, [r0, #0]
}
 800cd8e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd90:	f100 0208 	add.w	r2, r0, #8
 800cd94:	4613      	mov	r3, r2
 800cd96:	6852      	ldr	r2, [r2, #4]
 800cd98:	6815      	ldr	r5, [r2, #0]
 800cd9a:	42a5      	cmp	r5, r4
 800cd9c:	d9fa      	bls.n	800cd94 <vListInsert+0x22>
 800cd9e:	e7ed      	b.n	800cd7c <vListInsert+0xa>

0800cda0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cda0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cda2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800cda6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cda8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdaa:	6859      	ldr	r1, [r3, #4]
 800cdac:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdae:	bf08      	it	eq
 800cdb0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	3a01      	subs	r2, #1
 800cdba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cdbc:	6818      	ldr	r0, [r3, #0]
}
 800cdbe:	4770      	bx	lr

0800cdc0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cdc0:	4808      	ldr	r0, [pc, #32]	@ (800cde4 <prvPortStartFirstTask+0x24>)
 800cdc2:	6800      	ldr	r0, [r0, #0]
 800cdc4:	6800      	ldr	r0, [r0, #0]
 800cdc6:	f380 8808 	msr	MSP, r0
 800cdca:	f04f 0000 	mov.w	r0, #0
 800cdce:	f380 8814 	msr	CONTROL, r0
 800cdd2:	b662      	cpsie	i
 800cdd4:	b661      	cpsie	f
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	df00      	svc	0
 800cde0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cde2:	0000      	.short	0x0000
 800cde4:	e000ed08 	.word	0xe000ed08

0800cde8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cde8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cdf8 <vPortEnableVFP+0x10>
 800cdec:	6801      	ldr	r1, [r0, #0]
 800cdee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cdf2:	6001      	str	r1, [r0, #0]
 800cdf4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cdf6:	0000      	.short	0x0000
 800cdf8:	e000ed88 	.word	0xe000ed88

0800cdfc <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800cdfc:	2300      	movs	r3, #0
{
 800cdfe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800ce00:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800ce02:	4b0d      	ldr	r3, [pc, #52]	@ (800ce38 <prvTaskExitError+0x3c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3301      	adds	r3, #1
 800ce08:	d008      	beq.n	800ce1c <prvTaskExitError+0x20>
 800ce0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	e7fe      	b.n	800ce1a <prvTaskExitError+0x1e>
 800ce1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d0fc      	beq.n	800ce2c <prvTaskExitError+0x30>
}
 800ce32:	b002      	add	sp, #8
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	24000078 	.word	0x24000078

0800ce3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce40:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ce44:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800ce48:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ce4a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce4c:	4b03      	ldr	r3, [pc, #12]	@ (800ce5c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ce4e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ce50:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ce52:	f06f 0302 	mvn.w	r3, #2
 800ce56:	6203      	str	r3, [r0, #32]
}
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	0800cdfd 	.word	0x0800cdfd

0800ce60 <SVC_Handler>:
	__asm volatile (
 800ce60:	4b07      	ldr	r3, [pc, #28]	@ (800ce80 <pxCurrentTCBConst2>)
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	6808      	ldr	r0, [r1, #0]
 800ce66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6a:	f380 8809 	msr	PSP, r0
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f04f 0000 	mov.w	r0, #0
 800ce76:	f380 8811 	msr	BASEPRI, r0
 800ce7a:	4770      	bx	lr
 800ce7c:	f3af 8000 	nop.w

0800ce80 <pxCurrentTCBConst2>:
 800ce80:	2402523c 	.word	0x2402523c

0800ce84 <vPortEnterCritical>:
 800ce84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ce94:	4a0a      	ldr	r2, [pc, #40]	@ (800cec0 <vPortEnterCritical+0x3c>)
 800ce96:	6813      	ldr	r3, [r2, #0]
 800ce98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ce9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ce9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ce9e:	d10e      	bne.n	800cebe <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cea0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cea4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	b143      	cbz	r3, 800cebe <vPortEnterCritical+0x3a>
 800ceac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	e7fe      	b.n	800cebc <vPortEnterCritical+0x38>
}
 800cebe:	4770      	bx	lr
 800cec0:	24000078 	.word	0x24000078

0800cec4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800cec4:	4a08      	ldr	r2, [pc, #32]	@ (800cee8 <vPortExitCritical+0x24>)
 800cec6:	6813      	ldr	r3, [r2, #0]
 800cec8:	b943      	cbnz	r3, 800cedc <vPortExitCritical+0x18>
 800ceca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cece:	f383 8811 	msr	BASEPRI, r3
 800ced2:	f3bf 8f6f 	isb	sy
 800ced6:	f3bf 8f4f 	dsb	sy
 800ceda:	e7fe      	b.n	800ceda <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800cedc:	3b01      	subs	r3, #1
 800cede:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cee0:	b90b      	cbnz	r3, 800cee6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cee2:	f383 8811 	msr	BASEPRI, r3
}
 800cee6:	4770      	bx	lr
 800cee8:	24000078 	.word	0x24000078
 800ceec:	00000000 	.word	0x00000000

0800cef0 <PendSV_Handler>:
	__asm volatile
 800cef0:	f3ef 8009 	mrs	r0, PSP
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	4b15      	ldr	r3, [pc, #84]	@ (800cf50 <pxCurrentTCBConst>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	f01e 0f10 	tst.w	lr, #16
 800cf00:	bf08      	it	eq
 800cf02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0a:	6010      	str	r0, [r2, #0]
 800cf0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf14:	f380 8811 	msr	BASEPRI, r0
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	f3bf 8f6f 	isb	sy
 800cf20:	f001 f996 	bl	800e250 <vTaskSwitchContext>
 800cf24:	f04f 0000 	mov.w	r0, #0
 800cf28:	f380 8811 	msr	BASEPRI, r0
 800cf2c:	bc09      	pop	{r0, r3}
 800cf2e:	6819      	ldr	r1, [r3, #0]
 800cf30:	6808      	ldr	r0, [r1, #0]
 800cf32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf36:	f01e 0f10 	tst.w	lr, #16
 800cf3a:	bf08      	it	eq
 800cf3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf40:	f380 8809 	msr	PSP, r0
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w

0800cf50 <pxCurrentTCBConst>:
 800cf50:	2402523c 	.word	0x2402523c

0800cf54 <xPortSysTickHandler>:
{
 800cf54:	b508      	push	{r3, lr}
	__asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800cf66:	f000 ffff 	bl	800df68 <xTaskIncrementTick>
 800cf6a:	b128      	cbz	r0, 800cf78 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf74:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f383 8811 	msr	BASEPRI, r3
}
 800cf7e:	bd08      	pop	{r3, pc}

0800cf80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf80:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800cf84:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf86:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf8a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf8c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf8e:	4b04      	ldr	r3, [pc, #16]	@ (800cfa0 <vPortSetupTimerInterrupt+0x20>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf96:	3b01      	subs	r3, #1
 800cf98:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf9a:	2307      	movs	r3, #7
 800cf9c:	6113      	str	r3, [r2, #16]
}
 800cf9e:	4770      	bx	lr
 800cfa0:	2400006c 	.word	0x2400006c

0800cfa4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfa4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800cfa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfaa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800cfae:	4a38      	ldr	r2, [pc, #224]	@ (800d090 <xPortStartScheduler+0xec>)
 800cfb0:	4291      	cmp	r1, r2
 800cfb2:	d108      	bne.n	800cfc6 <xPortStartScheduler+0x22>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	e7fe      	b.n	800cfc4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cfc6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800cfca:	4b32      	ldr	r3, [pc, #200]	@ (800d094 <xPortStartScheduler+0xf0>)
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d108      	bne.n	800cfe2 <xPortStartScheduler+0x3e>
 800cfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	e7fe      	b.n	800cfe0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cfe2:	4b2d      	ldr	r3, [pc, #180]	@ (800d098 <xPortStartScheduler+0xf4>)
 800cfe4:	781a      	ldrb	r2, [r3, #0]
 800cfe6:	b2d2      	uxtb	r2, r2
 800cfe8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfea:	22ff      	movs	r2, #255	@ 0xff
 800cfec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cff0:	4a2a      	ldr	r2, [pc, #168]	@ (800d09c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cff8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cffc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d000:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d002:	2307      	movs	r3, #7
 800d004:	4a26      	ldr	r2, [pc, #152]	@ (800d0a0 <xPortStartScheduler+0xfc>)
 800d006:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d008:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d00c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d00e:	0609      	lsls	r1, r1, #24
 800d010:	d40a      	bmi.n	800d028 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d012:	2b03      	cmp	r3, #3
 800d014:	d011      	beq.n	800d03a <xPortStartScheduler+0x96>
 800d016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d01a:	f383 8811 	msr	BASEPRI, r3
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f3bf 8f4f 	dsb	sy
 800d026:	e7fe      	b.n	800d026 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d028:	3b01      	subs	r3, #1
 800d02a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d02c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f88d 3003 	strb.w	r3, [sp, #3]
 800d038:	e7e6      	b.n	800d008 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d03a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d03e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d042:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d044:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d046:	9b01      	ldr	r3, [sp, #4]
 800d048:	4a13      	ldr	r2, [pc, #76]	@ (800d098 <xPortStartScheduler+0xf4>)
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d04e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d056:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d05a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d05e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d062:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d066:	f7ff ff8b 	bl	800cf80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d06a:	4b0e      	ldr	r3, [pc, #56]	@ (800d0a4 <xPortStartScheduler+0x100>)
 800d06c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d06e:	f7ff febb 	bl	800cde8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d072:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d076:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d07a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d07e:	f7ff fe9f 	bl	800cdc0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d082:	f001 f8e5 	bl	800e250 <vTaskSwitchContext>
}
 800d086:	4628      	mov	r0, r5
	prvTaskExitError();
 800d088:	f7ff feb8 	bl	800cdfc <prvTaskExitError>
}
 800d08c:	b003      	add	sp, #12
 800d08e:	bd30      	pop	{r4, r5, pc}
 800d090:	410fc271 	.word	0x410fc271
 800d094:	410fc270 	.word	0x410fc270
 800d098:	e000e400 	.word	0xe000e400
 800d09c:	24024d00 	.word	0x24024d00
 800d0a0:	24024cfc 	.word	0x24024cfc
 800d0a4:	24000078 	.word	0x24000078

0800d0a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0ac:	2b0f      	cmp	r3, #15
 800d0ae:	d90e      	bls.n	800d0ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0b0:	4a11      	ldr	r2, [pc, #68]	@ (800d0f8 <vPortValidateInterruptPriority+0x50>)
 800d0b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0b4:	4a11      	ldr	r2, [pc, #68]	@ (800d0fc <vPortValidateInterruptPriority+0x54>)
 800d0b6:	7812      	ldrb	r2, [r2, #0]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d908      	bls.n	800d0ce <vPortValidateInterruptPriority+0x26>
 800d0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	e7fe      	b.n	800d0cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d0d2:	4a0b      	ldr	r2, [pc, #44]	@ (800d100 <vPortValidateInterruptPriority+0x58>)
 800d0d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d0d8:	6812      	ldr	r2, [r2, #0]
 800d0da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d908      	bls.n	800d0f4 <vPortValidateInterruptPriority+0x4c>
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	e7fe      	b.n	800d0f2 <vPortValidateInterruptPriority+0x4a>
	}
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	e000e3f0 	.word	0xe000e3f0
 800d0fc:	24024d00 	.word	0x24024d00
 800d100:	24024cfc 	.word	0x24024cfc

0800d104 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d104:	b510      	push	{r4, lr}
 800d106:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d108:	f7ff febc 	bl	800ce84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d10c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d10e:	f7ff fed9 	bl	800cec4 <vPortExitCritical>

	return xReturn;
}
 800d112:	fab4 f084 	clz	r0, r4
 800d116:	0940      	lsrs	r0, r0, #5
 800d118:	bd10      	pop	{r4, pc}

0800d11a <prvCopyDataToQueue>:
{
 800d11a:	b570      	push	{r4, r5, r6, lr}
 800d11c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d11e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d120:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d122:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d124:	b942      	cbnz	r2, 800d138 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d126:	6806      	ldr	r6, [r0, #0]
 800d128:	b99e      	cbnz	r6, 800d152 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d12a:	6880      	ldr	r0, [r0, #8]
 800d12c:	f001 f9f0 	bl	800e510 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d130:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d132:	3501      	adds	r5, #1
 800d134:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d136:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d138:	b96e      	cbnz	r6, 800d156 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d13a:	6840      	ldr	r0, [r0, #4]
 800d13c:	f016 fa65 	bl	802360a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d140:	6863      	ldr	r3, [r4, #4]
 800d142:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d144:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d146:	68a2      	ldr	r2, [r4, #8]
 800d148:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d14a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d14c:	bf24      	itt	cs
 800d14e:	6823      	ldrcs	r3, [r4, #0]
 800d150:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d152:	2000      	movs	r0, #0
 800d154:	e7ed      	b.n	800d132 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d156:	68c0      	ldr	r0, [r0, #12]
 800d158:	f016 fa57 	bl	802360a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d15c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d15e:	68e3      	ldr	r3, [r4, #12]
 800d160:	4251      	negs	r1, r2
 800d162:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d164:	6822      	ldr	r2, [r4, #0]
 800d166:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d168:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d16a:	bf3e      	ittt	cc
 800d16c:	68a3      	ldrcc	r3, [r4, #8]
 800d16e:	185b      	addcc	r3, r3, r1
 800d170:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d172:	2e02      	cmp	r6, #2
 800d174:	d1ed      	bne.n	800d152 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d176:	b10d      	cbz	r5, 800d17c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d178:	3d01      	subs	r5, #1
 800d17a:	e7ea      	b.n	800d152 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d17c:	4628      	mov	r0, r5
 800d17e:	e7d8      	b.n	800d132 <prvCopyDataToQueue+0x18>

0800d180 <prvCopyDataFromQueue>:
{
 800d180:	4603      	mov	r3, r0
 800d182:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d184:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d186:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d188:	b162      	cbz	r2, 800d1a4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d18a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d18c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d18e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d190:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d192:	60dc      	str	r4, [r3, #12]
}
 800d194:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d198:	bf24      	itt	cs
 800d19a:	6819      	ldrcs	r1, [r3, #0]
 800d19c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d19e:	68d9      	ldr	r1, [r3, #12]
 800d1a0:	f016 ba33 	b.w	802360a <memcpy>
}
 800d1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <prvUnlockQueue>:
{
 800d1aa:	b570      	push	{r4, r5, r6, lr}
 800d1ac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d1ae:	f7ff fe69 	bl	800ce84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d1b2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d1ba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d1bc:	2d00      	cmp	r5, #0
 800d1be:	dd01      	ble.n	800d1c4 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d1c2:	b9b3      	cbnz	r3, 800d1f2 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 800d1c4:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1c6:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d1ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d1ce:	f7ff fe79 	bl	800cec4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d1d2:	f7ff fe57 	bl	800ce84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d1d6:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d1da:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1dc:	2d00      	cmp	r5, #0
 800d1de:	dd01      	ble.n	800d1e4 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1e0:	6923      	ldr	r3, [r4, #16]
 800d1e2:	b97b      	cbnz	r3, 800d204 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 800d1e4:	23ff      	movs	r3, #255	@ 0xff
 800d1e6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d1ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d1ee:	f7ff be69 	b.w	800cec4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f001 f8a8 	bl	800e348 <xTaskRemoveFromEventList>
 800d1f8:	b108      	cbz	r0, 800d1fe <prvUnlockQueue+0x54>
						vTaskMissedYield();
 800d1fa:	f001 f92f 	bl	800e45c <vTaskMissedYield>
			--cTxLock;
 800d1fe:	3d01      	subs	r5, #1
 800d200:	b26d      	sxtb	r5, r5
 800d202:	e7db      	b.n	800d1bc <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d204:	4630      	mov	r0, r6
 800d206:	f001 f89f 	bl	800e348 <xTaskRemoveFromEventList>
 800d20a:	b108      	cbz	r0, 800d210 <prvUnlockQueue+0x66>
					vTaskMissedYield();
 800d20c:	f001 f926 	bl	800e45c <vTaskMissedYield>
				--cRxLock;
 800d210:	3d01      	subs	r5, #1
 800d212:	b26d      	sxtb	r5, r5
 800d214:	e7e2      	b.n	800d1dc <prvUnlockQueue+0x32>

0800d216 <xQueueGenericReset>:
{
 800d216:	b538      	push	{r3, r4, r5, lr}
 800d218:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d21a:	4604      	mov	r4, r0
 800d21c:	b940      	cbnz	r0, 800d230 <xQueueGenericReset+0x1a>
 800d21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	e7fe      	b.n	800d22e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d230:	f7ff fe28 	bl	800ce84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d234:	6822      	ldr	r2, [r4, #0]
 800d236:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d23a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d23c:	434b      	muls	r3, r1
 800d23e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d240:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d242:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d244:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d246:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d248:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d24a:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d24c:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d24e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d252:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d256:	b9a5      	cbnz	r5, 800d282 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d258:	6923      	ldr	r3, [r4, #16]
 800d25a:	b173      	cbz	r3, 800d27a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d25c:	f104 0010 	add.w	r0, r4, #16
 800d260:	f001 f872 	bl	800e348 <xTaskRemoveFromEventList>
 800d264:	b148      	cbz	r0, 800d27a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d266:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d26a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d26e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d27a:	f7ff fe23 	bl	800cec4 <vPortExitCritical>
}
 800d27e:	2001      	movs	r0, #1
 800d280:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d282:	f104 0010 	add.w	r0, r4, #16
 800d286:	f7ff fd5b 	bl	800cd40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d28a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d28e:	f7ff fd57 	bl	800cd40 <vListInitialise>
 800d292:	e7f2      	b.n	800d27a <xQueueGenericReset+0x64>

0800d294 <xQueueGenericCreateStatic>:
	{
 800d294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d296:	460d      	mov	r5, r1
 800d298:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d29a:	b940      	cbnz	r0, 800d2ae <xQueueGenericCreateStatic+0x1a>
 800d29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	e7fe      	b.n	800d2ac <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d2ae:	b943      	cbnz	r3, 800d2c2 <xQueueGenericCreateStatic+0x2e>
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2c2:	b14a      	cbz	r2, 800d2d8 <xQueueGenericCreateStatic+0x44>
 800d2c4:	b991      	cbnz	r1, 800d2ec <xQueueGenericCreateStatic+0x58>
 800d2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ca:	f383 8811 	msr	BASEPRI, r3
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	e7fe      	b.n	800d2d6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2d8:	b141      	cbz	r1, 800d2ec <xQueueGenericCreateStatic+0x58>
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	e7fe      	b.n	800d2ea <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2ec:	2350      	movs	r3, #80	@ 0x50
 800d2ee:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2f0:	9b01      	ldr	r3, [sp, #4]
 800d2f2:	2b50      	cmp	r3, #80	@ 0x50
 800d2f4:	d008      	beq.n	800d308 <xQueueGenericCreateStatic+0x74>
 800d2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	e7fe      	b.n	800d306 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d308:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d30a:	2d00      	cmp	r5, #0
 800d30c:	bf08      	it	eq
 800d30e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d310:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d312:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d316:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d318:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d31c:	4620      	mov	r0, r4
 800d31e:	f7ff ff7a 	bl	800d216 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d322:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d326:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d328:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d32c:	b003      	add	sp, #12
 800d32e:	bd30      	pop	{r4, r5, pc}

0800d330 <xQueueGenericCreate>:
	{
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	460d      	mov	r5, r1
 800d334:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d336:	4606      	mov	r6, r0
 800d338:	b940      	cbnz	r0, 800d34c <xQueueGenericCreate+0x1c>
 800d33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	e7fe      	b.n	800d34a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d34c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d34e:	3050      	adds	r0, #80	@ 0x50
 800d350:	f7ff fc20 	bl	800cb94 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d354:	4604      	mov	r4, r0
 800d356:	b170      	cbz	r0, 800d376 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d358:	2300      	movs	r3, #0
 800d35a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d35e:	b165      	cbz	r5, 800d37a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d360:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d364:	2101      	movs	r1, #1
 800d366:	4620      	mov	r0, r4
 800d368:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d36a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d36e:	f7ff ff52 	bl	800d216 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d372:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d376:	4620      	mov	r0, r4
 800d378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d37a:	4603      	mov	r3, r0
 800d37c:	e7f2      	b.n	800d364 <xQueueGenericCreate+0x34>

0800d37e <xQueueCreateCountingSemaphoreStatic>:
	{
 800d37e:	b513      	push	{r0, r1, r4, lr}
 800d380:	4613      	mov	r3, r2
 800d382:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d384:	b940      	cbnz	r0, 800d398 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	e7fe      	b.n	800d396 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d398:	4288      	cmp	r0, r1
 800d39a:	d208      	bcs.n	800d3ae <xQueueCreateCountingSemaphoreStatic+0x30>
 800d39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	e7fe      	b.n	800d3ac <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	9200      	str	r2, [sp, #0]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	f7ff ff6d 	bl	800d294 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d3ba:	b100      	cbz	r0, 800d3be <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d3bc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d3be:	b002      	add	sp, #8
 800d3c0:	bd10      	pop	{r4, pc}

0800d3c2 <xQueueCreateCountingSemaphore>:
	{
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d3c6:	b940      	cbnz	r0, 800d3da <xQueueCreateCountingSemaphore+0x18>
 800d3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	e7fe      	b.n	800d3d8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d3da:	4288      	cmp	r0, r1
 800d3dc:	d208      	bcs.n	800d3f0 <xQueueCreateCountingSemaphore+0x2e>
 800d3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	e7fe      	b.n	800d3ee <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d3f0:	2202      	movs	r2, #2
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	f7ff ff9c 	bl	800d330 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d3f8:	b100      	cbz	r0, 800d3fc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d3fa:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d3fc:	bd10      	pop	{r4, pc}

0800d3fe <xQueueGenericSend>:
{
 800d3fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d402:	460f      	mov	r7, r1
 800d404:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d406:	4604      	mov	r4, r0
{
 800d408:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d40a:	b940      	cbnz	r0, 800d41e <xQueueGenericSend+0x20>
 800d40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	e7fe      	b.n	800d41c <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d41e:	b951      	cbnz	r1, 800d436 <xQueueGenericSend+0x38>
 800d420:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d422:	b143      	cbz	r3, 800d436 <xQueueGenericSend+0x38>
 800d424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	e7fe      	b.n	800d434 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d436:	2e02      	cmp	r6, #2
 800d438:	d10b      	bne.n	800d452 <xQueueGenericSend+0x54>
 800d43a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d008      	beq.n	800d452 <xQueueGenericSend+0x54>
 800d440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	e7fe      	b.n	800d450 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d452:	f001 f80f 	bl	800e474 <xTaskGetSchedulerState>
 800d456:	4605      	mov	r5, r0
 800d458:	b320      	cbz	r0, 800d4a4 <xQueueGenericSend+0xa6>
 800d45a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d45c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d460:	f7ff fd10 	bl	800ce84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d464:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d466:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d468:	429a      	cmp	r2, r3
 800d46a:	d227      	bcs.n	800d4bc <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d46c:	4632      	mov	r2, r6
 800d46e:	4639      	mov	r1, r7
 800d470:	4620      	mov	r0, r4
 800d472:	f7ff fe52 	bl	800d11a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d476:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d478:	b11b      	cbz	r3, 800d482 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d47a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d47e:	f000 ff63 	bl	800e348 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800d482:	b148      	cbz	r0, 800d498 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800d484:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d488:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d48c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d490:	f3bf 8f4f 	dsb	sy
 800d494:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d498:	f7ff fd14 	bl	800cec4 <vPortExitCritical>
				return pdPASS;
 800d49c:	2001      	movs	r0, #1
}
 800d49e:	b004      	add	sp, #16
 800d4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4a4:	9b01      	ldr	r3, [sp, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d0d8      	beq.n	800d45c <xQueueGenericSend+0x5e>
 800d4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	e7fe      	b.n	800d4ba <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4bc:	2e02      	cmp	r6, #2
 800d4be:	d0d5      	beq.n	800d46c <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4c0:	9b01      	ldr	r3, [sp, #4]
 800d4c2:	b91b      	cbnz	r3, 800d4cc <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800d4c4:	f7ff fcfe 	bl	800cec4 <vPortExitCritical>
					return errQUEUE_FULL;
 800d4c8:	2000      	movs	r0, #0
 800d4ca:	e7e8      	b.n	800d49e <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 800d4cc:	b915      	cbnz	r5, 800d4d4 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4ce:	a802      	add	r0, sp, #8
 800d4d0:	f000 ff7c 	bl	800e3cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d4d4:	f7ff fcf6 	bl	800cec4 <vPortExitCritical>
		vTaskSuspendAll();
 800d4d8:	f000 fd38 	bl	800df4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4dc:	f7ff fcd2 	bl	800ce84 <vPortEnterCritical>
 800d4e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d4e4:	2bff      	cmp	r3, #255	@ 0xff
 800d4e6:	d101      	bne.n	800d4ec <xQueueGenericSend+0xee>
 800d4e8:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d4ec:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d4f0:	2bff      	cmp	r3, #255	@ 0xff
 800d4f2:	d101      	bne.n	800d4f8 <xQueueGenericSend+0xfa>
 800d4f4:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d4f8:	f7ff fce4 	bl	800cec4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d4fc:	a901      	add	r1, sp, #4
 800d4fe:	a802      	add	r0, sp, #8
 800d500:	f000 ff70 	bl	800e3e4 <xTaskCheckForTimeOut>
 800d504:	bb38      	cbnz	r0, 800d556 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d506:	f7ff fcbd 	bl	800ce84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d50a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d50c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d50e:	429a      	cmp	r2, r3
 800d510:	d10e      	bne.n	800d530 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d512:	f7ff fcd7 	bl	800cec4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d516:	9901      	ldr	r1, [sp, #4]
 800d518:	f104 0010 	add.w	r0, r4, #16
 800d51c:	f000 fedc 	bl	800e2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d520:	4620      	mov	r0, r4
 800d522:	f7ff fe42 	bl	800d1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d526:	f000 fdb5 	bl	800e094 <xTaskResumeAll>
 800d52a:	b148      	cbz	r0, 800d540 <xQueueGenericSend+0x142>
 800d52c:	2501      	movs	r5, #1
 800d52e:	e797      	b.n	800d460 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800d530:	f7ff fcc8 	bl	800cec4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d534:	4620      	mov	r0, r4
 800d536:	f7ff fe38 	bl	800d1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d53a:	f000 fdab 	bl	800e094 <xTaskResumeAll>
 800d53e:	e7f5      	b.n	800d52c <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800d540:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d548:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	f3bf 8f6f 	isb	sy
 800d554:	e7ea      	b.n	800d52c <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800d556:	4620      	mov	r0, r4
 800d558:	f7ff fe27 	bl	800d1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d55c:	f000 fd9a 	bl	800e094 <xTaskResumeAll>
			return errQUEUE_FULL;
 800d560:	e7b2      	b.n	800d4c8 <xQueueGenericSend+0xca>

0800d562 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d562:	2200      	movs	r2, #0
	{
 800d564:	460b      	mov	r3, r1
 800d566:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d568:	4611      	mov	r1, r2
 800d56a:	9000      	str	r0, [sp, #0]
 800d56c:	2001      	movs	r0, #1
 800d56e:	f7ff fe91 	bl	800d294 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800d572:	4604      	mov	r4, r0
 800d574:	b138      	cbz	r0, 800d586 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d576:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d578:	461a      	mov	r2, r3
 800d57a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d57c:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d57e:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d580:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d582:	f7ff ff3c 	bl	800d3fe <xQueueGenericSend>
	}
 800d586:	4620      	mov	r0, r4
 800d588:	b002      	add	sp, #8
 800d58a:	bd10      	pop	{r4, pc}

0800d58c <xQueueGiveMutexRecursive>:
	{
 800d58c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800d58e:	4604      	mov	r4, r0
 800d590:	b940      	cbnz	r0, 800d5a4 <xQueueGiveMutexRecursive+0x18>
 800d592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d596:	f383 8811 	msr	BASEPRI, r3
 800d59a:	f3bf 8f6f 	isb	sy
 800d59e:	f3bf 8f4f 	dsb	sy
 800d5a2:	e7fe      	b.n	800d5a2 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d5a4:	6885      	ldr	r5, [r0, #8]
 800d5a6:	f000 ff5f 	bl	800e468 <xTaskGetCurrentTaskHandle>
 800d5aa:	4285      	cmp	r5, r0
 800d5ac:	d10b      	bne.n	800d5c6 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d5ae:	68e3      	ldr	r3, [r4, #12]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d5b4:	b10b      	cbz	r3, 800d5ba <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800d5b6:	2001      	movs	r0, #1
	}
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f7ff ff1d 	bl	800d3fe <xQueueGenericSend>
 800d5c4:	e7f7      	b.n	800d5b6 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800d5c6:	2000      	movs	r0, #0
		return xReturn;
 800d5c8:	e7f6      	b.n	800d5b8 <xQueueGiveMutexRecursive+0x2c>

0800d5ca <xQueueCreateMutex>:
	{
 800d5ca:	b570      	push	{r4, r5, r6, lr}
 800d5cc:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5ce:	2050      	movs	r0, #80	@ 0x50
 800d5d0:	f7ff fae0 	bl	800cb94 <pvPortMalloc>
 800d5d4:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800d5d6:	b198      	cbz	r0, 800d600 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5d8:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800d5da:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5dc:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5de:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d5e2:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5e6:	f7ff fe16 	bl	800d216 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d5ea:	462b      	mov	r3, r5
 800d5ec:	462a      	mov	r2, r5
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d5f2:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5f6:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d5f8:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d5fa:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d5fc:	f7ff feff 	bl	800d3fe <xQueueGenericSend>
	}
 800d600:	4620      	mov	r0, r4
 800d602:	bd70      	pop	{r4, r5, r6, pc}

0800d604 <xQueueGenericSendFromISR>:
{
 800d604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d608:	4689      	mov	r9, r1
 800d60a:	4617      	mov	r7, r2
 800d60c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d60e:	4604      	mov	r4, r0
 800d610:	b940      	cbnz	r0, 800d624 <xQueueGenericSendFromISR+0x20>
 800d612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d616:	f383 8811 	msr	BASEPRI, r3
 800d61a:	f3bf 8f6f 	isb	sy
 800d61e:	f3bf 8f4f 	dsb	sy
 800d622:	e7fe      	b.n	800d622 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d624:	b951      	cbnz	r1, 800d63c <xQueueGenericSendFromISR+0x38>
 800d626:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d628:	b143      	cbz	r3, 800d63c <xQueueGenericSendFromISR+0x38>
 800d62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	e7fe      	b.n	800d63a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d63c:	2e02      	cmp	r6, #2
 800d63e:	d10b      	bne.n	800d658 <xQueueGenericSendFromISR+0x54>
 800d640:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d642:	2b01      	cmp	r3, #1
 800d644:	d008      	beq.n	800d658 <xQueueGenericSendFromISR+0x54>
 800d646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d64a:	f383 8811 	msr	BASEPRI, r3
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f3bf 8f4f 	dsb	sy
 800d656:	e7fe      	b.n	800d656 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d658:	f7ff fd26 	bl	800d0a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d65c:	f3ef 8811 	mrs	r8, BASEPRI
 800d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d670:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d672:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d674:	429a      	cmp	r2, r3
 800d676:	d301      	bcc.n	800d67c <xQueueGenericSendFromISR+0x78>
 800d678:	2e02      	cmp	r6, #2
 800d67a:	d11e      	bne.n	800d6ba <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d67c:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d680:	4632      	mov	r2, r6
 800d682:	4649      	mov	r1, r9
 800d684:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d686:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d688:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d68a:	f7ff fd46 	bl	800d11a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d68e:	1c6b      	adds	r3, r5, #1
 800d690:	d10e      	bne.n	800d6b0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d692:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d694:	b13b      	cbz	r3, 800d6a6 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d696:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d69a:	f000 fe55 	bl	800e348 <xTaskRemoveFromEventList>
 800d69e:	b110      	cbz	r0, 800d6a6 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800d6a0:	b10f      	cbz	r7, 800d6a6 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800d6a6:	2001      	movs	r0, #1
	__asm volatile
 800d6a8:	f388 8811 	msr	BASEPRI, r8
}
 800d6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	b26d      	sxtb	r5, r5
 800d6b4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800d6b8:	e7f5      	b.n	800d6a6 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	e7f4      	b.n	800d6a8 <xQueueGenericSendFromISR+0xa4>

0800d6be <xQueueGiveFromISR>:
{
 800d6be:	b570      	push	{r4, r5, r6, lr}
 800d6c0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d6c2:	4604      	mov	r4, r0
 800d6c4:	b940      	cbnz	r0, 800d6d8 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	e7fe      	b.n	800d6d6 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d6d8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d6da:	b143      	cbz	r3, 800d6ee <xQueueGiveFromISR+0x30>
 800d6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	e7fe      	b.n	800d6ec <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d6ee:	6803      	ldr	r3, [r0, #0]
 800d6f0:	b953      	cbnz	r3, 800d708 <xQueueGiveFromISR+0x4a>
 800d6f2:	6883      	ldr	r3, [r0, #8]
 800d6f4:	b143      	cbz	r3, 800d708 <xQueueGiveFromISR+0x4a>
 800d6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	e7fe      	b.n	800d706 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d708:	f7ff fcce 	bl	800d0a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d70c:	f3ef 8611 	mrs	r6, BASEPRI
 800d710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d720:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d722:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d724:	4293      	cmp	r3, r2
 800d726:	d919      	bls.n	800d75c <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d72c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800d72e:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800d730:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d732:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d734:	d10d      	bne.n	800d752 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d736:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d738:	b13b      	cbz	r3, 800d74a <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d73a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d73e:	f000 fe03 	bl	800e348 <xTaskRemoveFromEventList>
 800d742:	b110      	cbz	r0, 800d74a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800d744:	b10d      	cbz	r5, 800d74a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d746:	2301      	movs	r3, #1
 800d748:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800d74a:	2001      	movs	r0, #1
	__asm volatile
 800d74c:	f386 8811 	msr	BASEPRI, r6
}
 800d750:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d752:	3301      	adds	r3, #1
 800d754:	b25b      	sxtb	r3, r3
 800d756:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d75a:	e7f6      	b.n	800d74a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800d75c:	2000      	movs	r0, #0
 800d75e:	e7f5      	b.n	800d74c <xQueueGiveFromISR+0x8e>

0800d760 <xQueueReceive>:
{
 800d760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d764:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800d766:	4604      	mov	r4, r0
{
 800d768:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d76a:	b940      	cbnz	r0, 800d77e <xQueueReceive+0x1e>
	__asm volatile
 800d76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d770:	f383 8811 	msr	BASEPRI, r3
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	f3bf 8f4f 	dsb	sy
 800d77c:	e7fe      	b.n	800d77c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d77e:	b951      	cbnz	r1, 800d796 <xQueueReceive+0x36>
 800d780:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d782:	b143      	cbz	r3, 800d796 <xQueueReceive+0x36>
 800d784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	e7fe      	b.n	800d794 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d796:	f000 fe6d 	bl	800e474 <xTaskGetSchedulerState>
 800d79a:	4605      	mov	r5, r0
 800d79c:	b318      	cbz	r0, 800d7e6 <xQueueReceive+0x86>
 800d79e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d7a0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d7a4:	f7ff fb6e 	bl	800ce84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7a8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7aa:	b347      	cbz	r7, 800d7fe <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7ac:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f7ff fce5 	bl	800d180 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7b6:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	b173      	cbz	r3, 800d7da <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7bc:	f104 0010 	add.w	r0, r4, #16
 800d7c0:	f000 fdc2 	bl	800e348 <xTaskRemoveFromEventList>
 800d7c4:	b148      	cbz	r0, 800d7da <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800d7c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d7ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d7da:	f7ff fb73 	bl	800cec4 <vPortExitCritical>
				return pdPASS;
 800d7de:	2001      	movs	r0, #1
}
 800d7e0:	b004      	add	sp, #16
 800d7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7e6:	9b01      	ldr	r3, [sp, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0d9      	beq.n	800d7a0 <xQueueReceive+0x40>
 800d7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f0:	f383 8811 	msr	BASEPRI, r3
 800d7f4:	f3bf 8f6f 	isb	sy
 800d7f8:	f3bf 8f4f 	dsb	sy
 800d7fc:	e7fe      	b.n	800d7fc <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7fe:	9b01      	ldr	r3, [sp, #4]
 800d800:	b91b      	cbnz	r3, 800d80a <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800d802:	f7ff fb5f 	bl	800cec4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d806:	2000      	movs	r0, #0
 800d808:	e7ea      	b.n	800d7e0 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800d80a:	b915      	cbnz	r5, 800d812 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d80c:	a802      	add	r0, sp, #8
 800d80e:	f000 fddd 	bl	800e3cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d812:	f7ff fb57 	bl	800cec4 <vPortExitCritical>
		vTaskSuspendAll();
 800d816:	f000 fb99 	bl	800df4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d81a:	f7ff fb33 	bl	800ce84 <vPortEnterCritical>
 800d81e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d822:	2bff      	cmp	r3, #255	@ 0xff
 800d824:	d101      	bne.n	800d82a <xQueueReceive+0xca>
 800d826:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d82a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d82e:	2bff      	cmp	r3, #255	@ 0xff
 800d830:	d101      	bne.n	800d836 <xQueueReceive+0xd6>
 800d832:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d836:	f7ff fb45 	bl	800cec4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d83a:	a901      	add	r1, sp, #4
 800d83c:	a802      	add	r0, sp, #8
 800d83e:	f000 fdd1 	bl	800e3e4 <xTaskCheckForTimeOut>
 800d842:	bb00      	cbnz	r0, 800d886 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d844:	4620      	mov	r0, r4
 800d846:	f7ff fc5d 	bl	800d104 <prvIsQueueEmpty>
 800d84a:	b1b0      	cbz	r0, 800d87a <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d84c:	9901      	ldr	r1, [sp, #4]
 800d84e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d852:	f000 fd41 	bl	800e2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d856:	4620      	mov	r0, r4
 800d858:	f7ff fca7 	bl	800d1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d85c:	f000 fc1a 	bl	800e094 <xTaskResumeAll>
 800d860:	b948      	cbnz	r0, 800d876 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800d862:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d86a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	2501      	movs	r5, #1
 800d878:	e794      	b.n	800d7a4 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800d87a:	4620      	mov	r0, r4
 800d87c:	f7ff fc95 	bl	800d1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d880:	f000 fc08 	bl	800e094 <xTaskResumeAll>
 800d884:	e7f7      	b.n	800d876 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff fc8f 	bl	800d1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d88c:	f000 fc02 	bl	800e094 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d890:	4620      	mov	r0, r4
 800d892:	f7ff fc37 	bl	800d104 <prvIsQueueEmpty>
 800d896:	2800      	cmp	r0, #0
 800d898:	d0ed      	beq.n	800d876 <xQueueReceive+0x116>
 800d89a:	e7b4      	b.n	800d806 <xQueueReceive+0xa6>

0800d89c <xQueueSemaphoreTake>:
{
 800d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89e:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800d8a0:	4604      	mov	r4, r0
{
 800d8a2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d8a4:	b940      	cbnz	r0, 800d8b8 <xQueueSemaphoreTake+0x1c>
 800d8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	e7fe      	b.n	800d8b6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8b8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800d8ba:	b145      	cbz	r5, 800d8ce <xQueueSemaphoreTake+0x32>
 800d8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	e7fe      	b.n	800d8cc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8ce:	f000 fdd1 	bl	800e474 <xTaskGetSchedulerState>
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	b320      	cbz	r0, 800d920 <xQueueSemaphoreTake+0x84>
 800d8d6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800d8d8:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800d8da:	f7ff fad3 	bl	800ce84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d8de:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d8e0:	b353      	cbz	r3, 800d938 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	b913      	cbnz	r3, 800d8f0 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d8ea:	f000 fea1 	bl	800e630 <pvTaskIncrementMutexHeldCount>
 800d8ee:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	b173      	cbz	r3, 800d912 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8f4:	f104 0010 	add.w	r0, r4, #16
 800d8f8:	f000 fd26 	bl	800e348 <xTaskRemoveFromEventList>
 800d8fc:	b148      	cbz	r0, 800d912 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800d8fe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d906:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d912:	f7ff fad7 	bl	800cec4 <vPortExitCritical>
				return pdPASS;
 800d916:	2001      	movs	r0, #1
}
 800d918:	b005      	add	sp, #20
 800d91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d91c:	4635      	mov	r5, r6
 800d91e:	e7db      	b.n	800d8d8 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d920:	9b01      	ldr	r3, [sp, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d0fa      	beq.n	800d91c <xQueueSemaphoreTake+0x80>
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	e7fe      	b.n	800d936 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d938:	9b01      	ldr	r3, [sp, #4]
 800d93a:	b953      	cbnz	r3, 800d952 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d93c:	2d00      	cmp	r5, #0
 800d93e:	d066      	beq.n	800da0e <xQueueSemaphoreTake+0x172>
 800d940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	e7fe      	b.n	800d950 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800d952:	b916      	cbnz	r6, 800d95a <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d954:	a802      	add	r0, sp, #8
 800d956:	f000 fd39 	bl	800e3cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d95a:	f7ff fab3 	bl	800cec4 <vPortExitCritical>
		vTaskSuspendAll();
 800d95e:	f000 faf5 	bl	800df4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d962:	f7ff fa8f 	bl	800ce84 <vPortEnterCritical>
 800d966:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d96a:	2bff      	cmp	r3, #255	@ 0xff
 800d96c:	d101      	bne.n	800d972 <xQueueSemaphoreTake+0xd6>
 800d96e:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800d972:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d976:	2bff      	cmp	r3, #255	@ 0xff
 800d978:	d101      	bne.n	800d97e <xQueueSemaphoreTake+0xe2>
 800d97a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d97e:	f7ff faa1 	bl	800cec4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d982:	a901      	add	r1, sp, #4
 800d984:	a802      	add	r0, sp, #8
 800d986:	f000 fd2d 	bl	800e3e4 <xTaskCheckForTimeOut>
 800d98a:	bb50      	cbnz	r0, 800d9e2 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d98c:	4620      	mov	r0, r4
 800d98e:	f7ff fbb9 	bl	800d104 <prvIsQueueEmpty>
 800d992:	b300      	cbz	r0, 800d9d6 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d994:	6823      	ldr	r3, [r4, #0]
 800d996:	b93b      	cbnz	r3, 800d9a8 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800d998:	f7ff fa74 	bl	800ce84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d99c:	68a0      	ldr	r0, [r4, #8]
 800d99e:	f000 fd79 	bl	800e494 <xTaskPriorityInherit>
 800d9a2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800d9a4:	f7ff fa8e 	bl	800cec4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9a8:	9901      	ldr	r1, [sp, #4]
 800d9aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d9ae:	f000 fc93 	bl	800e2d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f7ff fbf9 	bl	800d1aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9b8:	f000 fb6c 	bl	800e094 <xTaskResumeAll>
 800d9bc:	b948      	cbnz	r0, 800d9d2 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800d9be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d9c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	2601      	movs	r6, #1
 800d9d4:	e781      	b.n	800d8da <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff fbe7 	bl	800d1aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9dc:	f000 fb5a 	bl	800e094 <xTaskResumeAll>
 800d9e0:	e7f7      	b.n	800d9d2 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f7ff fbe1 	bl	800d1aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9e8:	f000 fb54 	bl	800e094 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f7ff fb89 	bl	800d104 <prvIsQueueEmpty>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d0ed      	beq.n	800d9d2 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800d9f6:	b165      	cbz	r5, 800da12 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800d9f8:	f7ff fa44 	bl	800ce84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d9fc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d9fe:	b119      	cbz	r1, 800da08 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800da02:	6819      	ldr	r1, [r3, #0]
 800da04:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da08:	68a0      	ldr	r0, [r4, #8]
 800da0a:	f000 fdc3 	bl	800e594 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800da0e:	f7ff fa59 	bl	800cec4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800da12:	2000      	movs	r0, #0
 800da14:	e780      	b.n	800d918 <xQueueSemaphoreTake+0x7c>

0800da16 <xQueueTakeMutexRecursive>:
	{
 800da16:	b570      	push	{r4, r5, r6, lr}
 800da18:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800da1a:	4604      	mov	r4, r0
 800da1c:	b940      	cbnz	r0, 800da30 <xQueueTakeMutexRecursive+0x1a>
 800da1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	e7fe      	b.n	800da2e <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800da30:	6886      	ldr	r6, [r0, #8]
 800da32:	f000 fd19 	bl	800e468 <xTaskGetCurrentTaskHandle>
 800da36:	4286      	cmp	r6, r0
 800da38:	d104      	bne.n	800da44 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800da3a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800da3c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800da3e:	3301      	adds	r3, #1
 800da40:	60e3      	str	r3, [r4, #12]
	}
 800da42:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800da44:	4629      	mov	r1, r5
 800da46:	4620      	mov	r0, r4
 800da48:	f7ff ff28 	bl	800d89c <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d0f8      	beq.n	800da42 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800da50:	68e3      	ldr	r3, [r4, #12]
 800da52:	3301      	adds	r3, #1
 800da54:	60e3      	str	r3, [r4, #12]
 800da56:	e7f4      	b.n	800da42 <xQueueTakeMutexRecursive+0x2c>

0800da58 <xQueueReceiveFromISR>:
{
 800da58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da5c:	4689      	mov	r9, r1
 800da5e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800da60:	4604      	mov	r4, r0
 800da62:	b940      	cbnz	r0, 800da76 <xQueueReceiveFromISR+0x1e>
 800da64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da68:	f383 8811 	msr	BASEPRI, r3
 800da6c:	f3bf 8f6f 	isb	sy
 800da70:	f3bf 8f4f 	dsb	sy
 800da74:	e7fe      	b.n	800da74 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da76:	b951      	cbnz	r1, 800da8e <xQueueReceiveFromISR+0x36>
 800da78:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800da7a:	b143      	cbz	r3, 800da8e <xQueueReceiveFromISR+0x36>
 800da7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da80:	f383 8811 	msr	BASEPRI, r3
 800da84:	f3bf 8f6f 	isb	sy
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	e7fe      	b.n	800da8c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da8e:	f7ff fb0b 	bl	800d0a8 <vPortValidateInterruptPriority>
	__asm volatile
 800da92:	f3ef 8711 	mrs	r7, BASEPRI
 800da96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9a:	f383 8811 	msr	BASEPRI, r3
 800da9e:	f3bf 8f6f 	isb	sy
 800daa2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daa6:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800daa8:	b30d      	cbz	r5, 800daee <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800daaa:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800daae:	4649      	mov	r1, r9
 800dab0:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dab2:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800dab4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dab6:	f7ff fb63 	bl	800d180 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daba:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800dabc:	1c73      	adds	r3, r6, #1
 800dabe:	d111      	bne.n	800dae4 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dac0:	6923      	ldr	r3, [r4, #16]
 800dac2:	b153      	cbz	r3, 800dada <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dac4:	f104 0010 	add.w	r0, r4, #16
 800dac8:	f000 fc3e 	bl	800e348 <xTaskRemoveFromEventList>
 800dacc:	b128      	cbz	r0, 800dada <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800dace:	f1b8 0f00 	cmp.w	r8, #0
 800dad2:	d002      	beq.n	800dada <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dad4:	2301      	movs	r3, #1
 800dad6:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800dada:	2001      	movs	r0, #1
	__asm volatile
 800dadc:	f387 8811 	msr	BASEPRI, r7
}
 800dae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dae4:	3601      	adds	r6, #1
 800dae6:	b276      	sxtb	r6, r6
 800dae8:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800daec:	e7f5      	b.n	800dada <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800daee:	4628      	mov	r0, r5
 800daf0:	e7f4      	b.n	800dadc <xQueueReceiveFromISR+0x84>
	...

0800daf4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800daf4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800daf6:	4a07      	ldr	r2, [pc, #28]	@ (800db14 <vQueueAddToRegistry+0x20>)
	{
 800daf8:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dafa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800dafe:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800db02:	b91d      	cbnz	r5, 800db0c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800db04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800db08:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800db0a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db0c:	3301      	adds	r3, #1
 800db0e:	2b08      	cmp	r3, #8
 800db10:	d1f3      	bne.n	800dafa <vQueueAddToRegistry+0x6>
 800db12:	e7fa      	b.n	800db0a <vQueueAddToRegistry+0x16>
 800db14:	24024d04 	.word	0x24024d04

0800db18 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db18:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800db1a:	4a09      	ldr	r2, [pc, #36]	@ (800db40 <vQueueUnregisterQueue+0x28>)
	{
 800db1c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800db1e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800db22:	00dc      	lsls	r4, r3, #3
 800db24:	4281      	cmp	r1, r0
 800db26:	d106      	bne.n	800db36 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800db28:	4a06      	ldr	r2, [pc, #24]	@ (800db44 <vQueueUnregisterQueue+0x2c>)
 800db2a:	2100      	movs	r1, #0
 800db2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800db30:	4422      	add	r2, r4
 800db32:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800db34:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db36:	3301      	adds	r3, #1
 800db38:	2b08      	cmp	r3, #8
 800db3a:	d1f0      	bne.n	800db1e <vQueueUnregisterQueue+0x6>
 800db3c:	e7fa      	b.n	800db34 <vQueueUnregisterQueue+0x1c>
 800db3e:	bf00      	nop
 800db40:	24024d08 	.word	0x24024d08
 800db44:	24024d04 	.word	0x24024d04

0800db48 <vQueueDelete>:
{
 800db48:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800db4a:	b940      	cbnz	r0, 800db5e <vQueueDelete+0x16>
	__asm volatile
 800db4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	e7fe      	b.n	800db5c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800db5e:	f7ff ffdb 	bl	800db18 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800db62:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800db66:	b91b      	cbnz	r3, 800db70 <vQueueDelete+0x28>
}
 800db68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800db6c:	f7ff b8aa 	b.w	800ccc4 <vPortFree>
}
 800db70:	bd10      	pop	{r4, pc}

0800db72 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db72:	b570      	push	{r4, r5, r6, lr}
 800db74:	4604      	mov	r4, r0
 800db76:	460d      	mov	r5, r1
 800db78:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800db7a:	f7ff f983 	bl	800ce84 <vPortEnterCritical>
 800db7e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800db82:	2bff      	cmp	r3, #255	@ 0xff
 800db84:	d102      	bne.n	800db8c <vQueueWaitForMessageRestricted+0x1a>
 800db86:	2300      	movs	r3, #0
 800db88:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800db8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800db90:	2bff      	cmp	r3, #255	@ 0xff
 800db92:	d102      	bne.n	800db9a <vQueueWaitForMessageRestricted+0x28>
 800db94:	2300      	movs	r3, #0
 800db96:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800db9a:	f7ff f993 	bl	800cec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800db9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dba0:	b92b      	cbnz	r3, 800dbae <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dba2:	4632      	mov	r2, r6
 800dba4:	4629      	mov	r1, r5
 800dba6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dbaa:	f000 fbaf 	bl	800e30c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dbae:	4620      	mov	r0, r4
	}
 800dbb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800dbb4:	f7ff baf9 	b.w	800d1aa <prvUnlockQueue>

0800dbb8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbbc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dbbe:	f7ff f961 	bl	800ce84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dbc2:	4b2f      	ldr	r3, [pc, #188]	@ (800dc80 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800dbc4:	4e2f      	ldr	r6, [pc, #188]	@ (800dc84 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	4f2f      	ldr	r7, [pc, #188]	@ (800dc88 <prvAddNewTaskToReadyList+0xd0>)
 800dbca:	3201      	adds	r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800dbce:	6835      	ldr	r5, [r6, #0]
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	d14a      	bne.n	800dc6a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbd4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d11f      	bne.n	800dc1c <prvAddNewTaskToReadyList+0x64>
 800dbdc:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbde:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	f7ff f8ad 	bl	800cd40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dbe6:	f108 0814 	add.w	r8, r8, #20
 800dbea:	2d38      	cmp	r5, #56	@ 0x38
 800dbec:	d1f7      	bne.n	800dbde <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dbee:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800dcb0 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800dbf2:	4d26      	ldr	r5, [pc, #152]	@ (800dc8c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	f7ff f8a3 	bl	800cd40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	f7ff f8a0 	bl	800cd40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc00:	4823      	ldr	r0, [pc, #140]	@ (800dc90 <prvAddNewTaskToReadyList+0xd8>)
 800dc02:	f7ff f89d 	bl	800cd40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc06:	4823      	ldr	r0, [pc, #140]	@ (800dc94 <prvAddNewTaskToReadyList+0xdc>)
 800dc08:	f7ff f89a 	bl	800cd40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc0c:	4822      	ldr	r0, [pc, #136]	@ (800dc98 <prvAddNewTaskToReadyList+0xe0>)
 800dc0e:	f7ff f897 	bl	800cd40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc12:	4b22      	ldr	r3, [pc, #136]	@ (800dc9c <prvAddNewTaskToReadyList+0xe4>)
 800dc14:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc18:	4b21      	ldr	r3, [pc, #132]	@ (800dca0 <prvAddNewTaskToReadyList+0xe8>)
 800dc1a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800dc1c:	4a21      	ldr	r2, [pc, #132]	@ (800dca4 <prvAddNewTaskToReadyList+0xec>)
 800dc1e:	6813      	ldr	r3, [r2, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800dc24:	4a20      	ldr	r2, [pc, #128]	@ (800dca8 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc26:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800dc28:	6811      	ldr	r1, [r2, #0]
 800dc2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc2c:	428b      	cmp	r3, r1
 800dc2e:	d900      	bls.n	800dc32 <prvAddNewTaskToReadyList+0x7a>
 800dc30:	6013      	str	r3, [r2, #0]
 800dc32:	2014      	movs	r0, #20
 800dc34:	1d21      	adds	r1, r4, #4
 800dc36:	fb00 7003 	mla	r0, r0, r3, r7
 800dc3a:	f7ff f88f 	bl	800cd5c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dc3e:	f7ff f941 	bl	800cec4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dc42:	4b1a      	ldr	r3, [pc, #104]	@ (800dcac <prvAddNewTaskToReadyList+0xf4>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	b173      	cbz	r3, 800dc66 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc48:	6833      	ldr	r3, [r6, #0]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d209      	bcs.n	800dc66 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800dc52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	f3bf 8f6f 	isb	sy
}
 800dc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800dc6a:	4b10      	ldr	r3, [pc, #64]	@ (800dcac <prvAddNewTaskToReadyList+0xf4>)
 800dc6c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc6e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	d1d3      	bne.n	800dc1c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc74:	6832      	ldr	r2, [r6, #0]
 800dc76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d8cf      	bhi.n	800dc1c <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800dc7c:	6034      	str	r4, [r6, #0]
 800dc7e:	e7cd      	b.n	800dc1c <prvAddNewTaskToReadyList+0x64>
 800dc80:	24024d68 	.word	0x24024d68
 800dc84:	2402523c 	.word	0x2402523c
 800dc88:	24024ddc 	.word	0x24024ddc
 800dc8c:	24024db4 	.word	0x24024db4
 800dc90:	24024d98 	.word	0x24024d98
 800dc94:	24024d84 	.word	0x24024d84
 800dc98:	24024d6c 	.word	0x24024d6c
 800dc9c:	24024db0 	.word	0x24024db0
 800dca0:	24024dac 	.word	0x24024dac
 800dca4:	24024d4c 	.word	0x24024d4c
 800dca8:	24024d60 	.word	0x24024d60
 800dcac:	24024d5c 	.word	0x24024d5c
 800dcb0:	24024dc8 	.word	0x24024dc8

0800dcb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dcb6:	4b15      	ldr	r3, [pc, #84]	@ (800dd0c <prvAddCurrentTaskToDelayedList+0x58>)
{
 800dcb8:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcba:	4d15      	ldr	r5, [pc, #84]	@ (800dd10 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800dcbc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800dcbe:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc0:	6828      	ldr	r0, [r5, #0]
 800dcc2:	3004      	adds	r0, #4
 800dcc4:	f7ff f86c 	bl	800cda0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcc8:	1c73      	adds	r3, r6, #1
 800dcca:	d107      	bne.n	800dcdc <prvAddCurrentTaskToDelayedList+0x28>
 800dccc:	b137      	cbz	r7, 800dcdc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcce:	6829      	ldr	r1, [r5, #0]
 800dcd0:	4810      	ldr	r0, [pc, #64]	@ (800dd14 <prvAddCurrentTaskToDelayedList+0x60>)
 800dcd2:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dcd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcd8:	f7ff b840 	b.w	800cd5c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dcdc:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dcde:	682b      	ldr	r3, [r5, #0]
 800dce0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dce2:	d307      	bcc.n	800dcf4 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dce4:	4b0c      	ldr	r3, [pc, #48]	@ (800dd18 <prvAddCurrentTaskToDelayedList+0x64>)
 800dce6:	6818      	ldr	r0, [r3, #0]
 800dce8:	6829      	ldr	r1, [r5, #0]
}
 800dcea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcee:	3104      	adds	r1, #4
 800dcf0:	f7ff b83f 	b.w	800cd72 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcf4:	4b09      	ldr	r3, [pc, #36]	@ (800dd1c <prvAddCurrentTaskToDelayedList+0x68>)
 800dcf6:	6818      	ldr	r0, [r3, #0]
 800dcf8:	6829      	ldr	r1, [r5, #0]
 800dcfa:	3104      	adds	r1, #4
 800dcfc:	f7ff f839 	bl	800cd72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd00:	4b07      	ldr	r3, [pc, #28]	@ (800dd20 <prvAddCurrentTaskToDelayedList+0x6c>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	42a2      	cmp	r2, r4
 800dd06:	d900      	bls.n	800dd0a <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800dd08:	601c      	str	r4, [r3, #0]
}
 800dd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd0c:	24024d64 	.word	0x24024d64
 800dd10:	2402523c 	.word	0x2402523c
 800dd14:	24024d6c 	.word	0x24024d6c
 800dd18:	24024dac 	.word	0x24024dac
 800dd1c:	24024db0 	.word	0x24024db0
 800dd20:	24024d48 	.word	0x24024d48

0800dd24 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd24:	4a06      	ldr	r2, [pc, #24]	@ (800dd40 <prvResetNextTaskUnblockTime+0x1c>)
 800dd26:	6813      	ldr	r3, [r2, #0]
 800dd28:	6819      	ldr	r1, [r3, #0]
 800dd2a:	4b06      	ldr	r3, [pc, #24]	@ (800dd44 <prvResetNextTaskUnblockTime+0x20>)
 800dd2c:	b919      	cbnz	r1, 800dd36 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd2e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd32:	601a      	str	r2, [r3, #0]
}
 800dd34:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd36:	6812      	ldr	r2, [r2, #0]
 800dd38:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd3a:	68d2      	ldr	r2, [r2, #12]
 800dd3c:	6852      	ldr	r2, [r2, #4]
 800dd3e:	e7f8      	b.n	800dd32 <prvResetNextTaskUnblockTime+0xe>
 800dd40:	24024db0 	.word	0x24024db0
 800dd44:	24024d48 	.word	0x24024d48

0800dd48 <prvDeleteTCB>:
	{
 800dd48:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd4a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800dd4e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd50:	b93b      	cbnz	r3, 800dd62 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800dd52:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800dd54:	f7fe ffb6 	bl	800ccc4 <vPortFree>
				vPortFree( pxTCB );
 800dd58:	4620      	mov	r0, r4
	}
 800dd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800dd5e:	f7fe bfb1 	b.w	800ccc4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d0f9      	beq.n	800dd5a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d008      	beq.n	800dd7c <prvDeleteTCB+0x34>
 800dd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	e7fe      	b.n	800dd7a <prvDeleteTCB+0x32>
	}
 800dd7c:	bd10      	pop	{r4, pc}
	...

0800dd80 <prvIdleTask>:
{
 800dd80:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd82:	4c14      	ldr	r4, [pc, #80]	@ (800ddd4 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd84:	4f14      	ldr	r7, [pc, #80]	@ (800ddd8 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800dd86:	4d15      	ldr	r5, [pc, #84]	@ (800dddc <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	b983      	cbnz	r3, 800ddae <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd8c:	4b14      	ldr	r3, [pc, #80]	@ (800dde0 <prvIdleTask+0x60>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d909      	bls.n	800dda8 <prvIdleTask+0x28>
				taskYIELD();
 800dd94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dda0:	f3bf 8f4f 	dsb	sy
 800dda4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800dda8:	f7f2 fe3c 	bl	8000a24 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ddac:	e7eb      	b.n	800dd86 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800ddae:	f7ff f869 	bl	800ce84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddb6:	1d30      	adds	r0, r6, #4
 800ddb8:	f7fe fff2 	bl	800cda0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800ddc8:	f7ff f87c 	bl	800cec4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f7ff ffbb 	bl	800dd48 <prvDeleteTCB>
 800ddd2:	e7d9      	b.n	800dd88 <prvIdleTask+0x8>
 800ddd4:	24024d80 	.word	0x24024d80
 800ddd8:	24024d84 	.word	0x24024d84
 800dddc:	24024d68 	.word	0x24024d68
 800dde0:	24024ddc 	.word	0x24024ddc

0800dde4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800dde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dde8:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ddea:	4607      	mov	r7, r0
 800ddec:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ddee:	21a5      	movs	r1, #165	@ 0xa5
 800ddf0:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ddf2:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddf4:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ddf6:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ddfa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ddfc:	f015 fb24 	bl	8023448 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800de02:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de04:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800de08:	b3b5      	cbz	r5, 800de78 <prvInitialiseNewTask.constprop.0+0x94>
 800de0a:	1e6b      	subs	r3, r5, #1
 800de0c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800de10:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de12:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800de16:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800de1a:	b109      	cbz	r1, 800de20 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de1c:	42ab      	cmp	r3, r5
 800de1e:	d1f8      	bne.n	800de12 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de20:	2300      	movs	r3, #0
 800de22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de26:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800de28:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de2c:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de2e:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800de30:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de34:	bf28      	it	cs
 800de36:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800de38:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800de3a:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de3c:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de40:	f7fe ff89 	bl	800cd56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de44:	f104 0018 	add.w	r0, r4, #24
 800de48:	f7fe ff85 	bl	800cd56 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800de4c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de50:	4642      	mov	r2, r8
 800de52:	4639      	mov	r1, r7
 800de54:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de56:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de58:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de5a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800de5c:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de60:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de64:	f7fe ffea 	bl	800ce3c <pxPortInitialiseStack>
 800de68:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800de6a:	f1b9 0f00 	cmp.w	r9, #0
 800de6e:	d001      	beq.n	800de74 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de70:	f8c9 4000 	str.w	r4, [r9]
}
 800de74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de78:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800de7c:	e7d3      	b.n	800de26 <prvInitialiseNewTask.constprop.0+0x42>

0800de7e <xTaskCreateStatic>:
	{
 800de7e:	b570      	push	{r4, r5, r6, lr}
 800de80:	b086      	sub	sp, #24
 800de82:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800de86:	b945      	cbnz	r5, 800de9a <xTaskCreateStatic+0x1c>
 800de88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	e7fe      	b.n	800de98 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800de9a:	b944      	cbnz	r4, 800deae <xTaskCreateStatic+0x30>
 800de9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea0:	f383 8811 	msr	BASEPRI, r3
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	e7fe      	b.n	800deac <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800deae:	2660      	movs	r6, #96	@ 0x60
 800deb0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800deb2:	9e05      	ldr	r6, [sp, #20]
 800deb4:	2e60      	cmp	r6, #96	@ 0x60
 800deb6:	d008      	beq.n	800deca <xTaskCreateStatic+0x4c>
 800deb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	e7fe      	b.n	800dec8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800deca:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800decc:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dece:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ded0:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ded4:	ad04      	add	r5, sp, #16
 800ded6:	9402      	str	r4, [sp, #8]
 800ded8:	9501      	str	r5, [sp, #4]
 800deda:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dedc:	9500      	str	r5, [sp, #0]
 800dede:	f7ff ff81 	bl	800dde4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dee2:	4620      	mov	r0, r4
 800dee4:	f7ff fe68 	bl	800dbb8 <prvAddNewTaskToReadyList>
	}
 800dee8:	9804      	ldr	r0, [sp, #16]
 800deea:	b006      	add	sp, #24
 800deec:	bd70      	pop	{r4, r5, r6, pc}

0800deee <xTaskCreate>:
	{
 800deee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800def2:	4607      	mov	r7, r0
 800def4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800def6:	0090      	lsls	r0, r2, #2
	{
 800def8:	4688      	mov	r8, r1
 800defa:	4616      	mov	r6, r2
 800defc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800defe:	f7fe fe49 	bl	800cb94 <pvPortMalloc>
			if( pxStack != NULL )
 800df02:	4605      	mov	r5, r0
 800df04:	b920      	cbnz	r0, 800df10 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df06:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800df0a:	b005      	add	sp, #20
 800df0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df10:	2060      	movs	r0, #96	@ 0x60
 800df12:	f7fe fe3f 	bl	800cb94 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800df16:	4604      	mov	r4, r0
 800df18:	b198      	cbz	r0, 800df42 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df1a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800df1c:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df1e:	4632      	mov	r2, r6
 800df20:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df22:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df28:	9002      	str	r0, [sp, #8]
 800df2a:	4638      	mov	r0, r7
 800df2c:	9301      	str	r3, [sp, #4]
 800df2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	464b      	mov	r3, r9
 800df34:	f7ff ff56 	bl	800dde4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df38:	4620      	mov	r0, r4
 800df3a:	f7ff fe3d 	bl	800dbb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df3e:	2001      	movs	r0, #1
 800df40:	e7e3      	b.n	800df0a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800df42:	4628      	mov	r0, r5
 800df44:	f7fe febe 	bl	800ccc4 <vPortFree>
		if( pxNewTCB != NULL )
 800df48:	e7dd      	b.n	800df06 <xTaskCreate+0x18>
	...

0800df4c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800df4c:	4a02      	ldr	r2, [pc, #8]	@ (800df58 <vTaskSuspendAll+0xc>)
 800df4e:	6813      	ldr	r3, [r2, #0]
 800df50:	3301      	adds	r3, #1
 800df52:	6013      	str	r3, [r2, #0]
}
 800df54:	4770      	bx	lr
 800df56:	bf00      	nop
 800df58:	24024d44 	.word	0x24024d44

0800df5c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800df5c:	4b01      	ldr	r3, [pc, #4]	@ (800df64 <xTaskGetTickCount+0x8>)
 800df5e:	6818      	ldr	r0, [r3, #0]
}
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	24024d64 	.word	0x24024d64

0800df68 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df68:	4b3f      	ldr	r3, [pc, #252]	@ (800e068 <xTaskIncrementTick+0x100>)
 800df6a:	681b      	ldr	r3, [r3, #0]
{
 800df6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df70:	2b00      	cmp	r3, #0
 800df72:	d172      	bne.n	800e05a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df74:	4b3d      	ldr	r3, [pc, #244]	@ (800e06c <xTaskIncrementTick+0x104>)
 800df76:	681c      	ldr	r4, [r3, #0]
 800df78:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800df7a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df7c:	b9bc      	cbnz	r4, 800dfae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800df7e:	4b3c      	ldr	r3, [pc, #240]	@ (800e070 <xTaskIncrementTick+0x108>)
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	6812      	ldr	r2, [r2, #0]
 800df84:	b142      	cbz	r2, 800df98 <xTaskIncrementTick+0x30>
 800df86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df8a:	f383 8811 	msr	BASEPRI, r3
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	e7fe      	b.n	800df96 <xTaskIncrementTick+0x2e>
 800df98:	4a36      	ldr	r2, [pc, #216]	@ (800e074 <xTaskIncrementTick+0x10c>)
 800df9a:	6819      	ldr	r1, [r3, #0]
 800df9c:	6810      	ldr	r0, [r2, #0]
 800df9e:	6018      	str	r0, [r3, #0]
 800dfa0:	6011      	str	r1, [r2, #0]
 800dfa2:	4a35      	ldr	r2, [pc, #212]	@ (800e078 <xTaskIncrementTick+0x110>)
 800dfa4:	6813      	ldr	r3, [r2, #0]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	f7ff febb 	bl	800dd24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfae:	4d33      	ldr	r5, [pc, #204]	@ (800e07c <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800dfb0:	f04f 0b00 	mov.w	fp, #0
 800dfb4:	4e32      	ldr	r6, [pc, #200]	@ (800e080 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	4f32      	ldr	r7, [pc, #200]	@ (800e084 <xTaskIncrementTick+0x11c>)
 800dfba:	429c      	cmp	r4, r3
 800dfbc:	d212      	bcs.n	800dfe4 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dfbe:	683a      	ldr	r2, [r7, #0]
 800dfc0:	2114      	movs	r1, #20
 800dfc2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dfc4:	434a      	muls	r2, r1
 800dfc6:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800dfc8:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800dfca:	4a2f      	ldr	r2, [pc, #188]	@ (800e088 <xTaskIncrementTick+0x120>)
 800dfcc:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800dfce:	bf28      	it	cs
 800dfd0:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800dfd4:	2a00      	cmp	r2, #0
 800dfd6:	bf18      	it	ne
 800dfd8:	f04f 0b01 	movne.w	fp, #1
}
 800dfdc:	4658      	mov	r0, fp
 800dfde:	b003      	add	sp, #12
 800dfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfe4:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e070 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800dfe8:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e090 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfec:	f8d9 2000 	ldr.w	r2, [r9]
 800dff0:	6812      	ldr	r2, [r2, #0]
 800dff2:	b91a      	cbnz	r2, 800dffc <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dff4:	f04f 32ff 	mov.w	r2, #4294967295
 800dff8:	602a      	str	r2, [r5, #0]
					break;
 800dffa:	e7e0      	b.n	800dfbe <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dffc:	f8d9 2000 	ldr.w	r2, [r9]
 800e000:	68d2      	ldr	r2, [r2, #12]
 800e002:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e006:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e00a:	428c      	cmp	r4, r1
 800e00c:	d201      	bcs.n	800e012 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e00e:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e010:	e7d5      	b.n	800dfbe <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e012:	f108 0304 	add.w	r3, r8, #4
 800e016:	4618      	mov	r0, r3
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	f7fe fec1 	bl	800cda0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e01e:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e022:	b119      	cbz	r1, 800e02c <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e024:	f108 0018 	add.w	r0, r8, #24
 800e028:	f7fe feba 	bl	800cda0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e02c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e030:	f8da 1000 	ldr.w	r1, [sl]
 800e034:	4288      	cmp	r0, r1
 800e036:	d901      	bls.n	800e03c <xTaskIncrementTick+0xd4>
 800e038:	f8ca 0000 	str.w	r0, [sl]
 800e03c:	2314      	movs	r3, #20
 800e03e:	9901      	ldr	r1, [sp, #4]
 800e040:	fb03 6000 	mla	r0, r3, r0, r6
 800e044:	f7fe fe8a 	bl	800cd5c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e048:	6838      	ldr	r0, [r7, #0]
 800e04a:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e04e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e050:	4291      	cmp	r1, r2
 800e052:	bf28      	it	cs
 800e054:	f04f 0b01 	movcs.w	fp, #1
 800e058:	e7c8      	b.n	800dfec <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e05a:	4a0c      	ldr	r2, [pc, #48]	@ (800e08c <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e05c:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e060:	6813      	ldr	r3, [r2, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	6013      	str	r3, [r2, #0]
 800e066:	e7b9      	b.n	800dfdc <xTaskIncrementTick+0x74>
 800e068:	24024d44 	.word	0x24024d44
 800e06c:	24024d64 	.word	0x24024d64
 800e070:	24024db0 	.word	0x24024db0
 800e074:	24024dac 	.word	0x24024dac
 800e078:	24024d50 	.word	0x24024d50
 800e07c:	24024d48 	.word	0x24024d48
 800e080:	24024ddc 	.word	0x24024ddc
 800e084:	2402523c 	.word	0x2402523c
 800e088:	24024d54 	.word	0x24024d54
 800e08c:	24024d58 	.word	0x24024d58
 800e090:	24024d60 	.word	0x24024d60

0800e094 <xTaskResumeAll>:
{
 800e094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e098:	4c30      	ldr	r4, [pc, #192]	@ (800e15c <xTaskResumeAll+0xc8>)
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	b943      	cbnz	r3, 800e0b0 <xTaskResumeAll+0x1c>
 800e09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	e7fe      	b.n	800e0ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e0b0:	f7fe fee8 	bl	800ce84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0ba:	6824      	ldr	r4, [r4, #0]
 800e0bc:	b12c      	cbz	r4, 800e0ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e0be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e0c0:	f7fe ff00 	bl	800cec4 <vPortExitCritical>
}
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0ca:	4b25      	ldr	r3, [pc, #148]	@ (800e160 <xTaskResumeAll+0xcc>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0f5      	beq.n	800e0be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0d2:	4d24      	ldr	r5, [pc, #144]	@ (800e164 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e0d4:	4e24      	ldr	r6, [pc, #144]	@ (800e168 <xTaskResumeAll+0xd4>)
 800e0d6:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e178 <xTaskResumeAll+0xe4>
 800e0da:	e01d      	b.n	800e118 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0dc:	68eb      	ldr	r3, [r5, #12]
 800e0de:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0e0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0e2:	f104 0018 	add.w	r0, r4, #24
 800e0e6:	f7fe fe5b 	bl	800cda0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0ea:	4638      	mov	r0, r7
 800e0ec:	f7fe fe58 	bl	800cda0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0f0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e0f2:	6832      	ldr	r2, [r6, #0]
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d900      	bls.n	800e0fa <xTaskResumeAll+0x66>
 800e0f8:	6033      	str	r3, [r6, #0]
 800e0fa:	2014      	movs	r0, #20
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	fb00 8003 	mla	r0, r0, r3, r8
 800e102:	f7fe fe2b 	bl	800cd5c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e106:	4b19      	ldr	r3, [pc, #100]	@ (800e16c <xTaskResumeAll+0xd8>)
 800e108:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e10e:	429a      	cmp	r2, r3
 800e110:	d302      	bcc.n	800e118 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e112:	4b17      	ldr	r3, [pc, #92]	@ (800e170 <xTaskResumeAll+0xdc>)
 800e114:	2201      	movs	r2, #1
 800e116:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e118:	682b      	ldr	r3, [r5, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1de      	bne.n	800e0dc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e11e:	b10c      	cbz	r4, 800e124 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e120:	f7ff fe00 	bl	800dd24 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e124:	4d13      	ldr	r5, [pc, #76]	@ (800e174 <xTaskResumeAll+0xe0>)
 800e126:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e128:	b144      	cbz	r4, 800e13c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e12a:	4e11      	ldr	r6, [pc, #68]	@ (800e170 <xTaskResumeAll+0xdc>)
 800e12c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e12e:	f7ff ff1b 	bl	800df68 <xTaskIncrementTick>
 800e132:	b100      	cbz	r0, 800e136 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e134:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e136:	3c01      	subs	r4, #1
 800e138:	d1f9      	bne.n	800e12e <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e13a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e13c:	4b0c      	ldr	r3, [pc, #48]	@ (800e170 <xTaskResumeAll+0xdc>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0bc      	beq.n	800e0be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e144:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e14c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e158:	2401      	movs	r4, #1
 800e15a:	e7b1      	b.n	800e0c0 <xTaskResumeAll+0x2c>
 800e15c:	24024d44 	.word	0x24024d44
 800e160:	24024d68 	.word	0x24024d68
 800e164:	24024d98 	.word	0x24024d98
 800e168:	24024d60 	.word	0x24024d60
 800e16c:	2402523c 	.word	0x2402523c
 800e170:	24024d54 	.word	0x24024d54
 800e174:	24024d58 	.word	0x24024d58
 800e178:	24024ddc 	.word	0x24024ddc

0800e17c <vTaskSetApplicationTaskTag>:
	{
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e180:	4604      	mov	r4, r0
 800e182:	b908      	cbnz	r0, 800e188 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e184:	4b04      	ldr	r3, [pc, #16]	@ (800e198 <vTaskSetApplicationTaskTag+0x1c>)
 800e186:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e188:	f7fe fe7c 	bl	800ce84 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e18c:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e192:	f7fe be97 	b.w	800cec4 <vPortExitCritical>
 800e196:	bf00      	nop
 800e198:	2402523c 	.word	0x2402523c

0800e19c <xTaskCallApplicationTaskHook>:
	{
 800e19c:	4603      	mov	r3, r0
 800e19e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e1a0:	b90b      	cbnz	r3, 800e1a6 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e1a2:	4b03      	ldr	r3, [pc, #12]	@ (800e1b0 <xTaskCallApplicationTaskHook+0x14>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1a8:	b103      	cbz	r3, 800e1ac <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e1aa:	4718      	bx	r3
	}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	4770      	bx	lr
 800e1b0:	2402523c 	.word	0x2402523c

0800e1b4 <vTaskStartScheduler>:
{
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1b8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1ba:	aa07      	add	r2, sp, #28
 800e1bc:	a906      	add	r1, sp, #24
 800e1be:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1c0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1c4:	f7fe fca8 	bl	800cb18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1c8:	9b05      	ldr	r3, [sp, #20]
 800e1ca:	9a07      	ldr	r2, [sp, #28]
 800e1cc:	9302      	str	r3, [sp, #8]
 800e1ce:	9b06      	ldr	r3, [sp, #24]
 800e1d0:	4919      	ldr	r1, [pc, #100]	@ (800e238 <vTaskStartScheduler+0x84>)
 800e1d2:	481a      	ldr	r0, [pc, #104]	@ (800e23c <vTaskStartScheduler+0x88>)
 800e1d4:	e9cd 4300 	strd	r4, r3, [sp]
 800e1d8:	4623      	mov	r3, r4
 800e1da:	f7ff fe50 	bl	800de7e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e1de:	b340      	cbz	r0, 800e232 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800e1e0:	f000 fa84 	bl	800e6ec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e1e4:	2801      	cmp	r0, #1
 800e1e6:	d119      	bne.n	800e21c <vTaskStartScheduler+0x68>
 800e1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ec:	f383 8811 	msr	BASEPRI, r3
 800e1f0:	f3bf 8f6f 	isb	sy
 800e1f4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1fc:	4b10      	ldr	r3, [pc, #64]	@ (800e240 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800e1fe:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800e200:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e202:	4b10      	ldr	r3, [pc, #64]	@ (800e244 <vTaskStartScheduler+0x90>)
 800e204:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e206:	4b10      	ldr	r3, [pc, #64]	@ (800e248 <vTaskStartScheduler+0x94>)
 800e208:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e20a:	4b10      	ldr	r3, [pc, #64]	@ (800e24c <vTaskStartScheduler+0x98>)
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f7ff ffc5 	bl	800e19c <xTaskCallApplicationTaskHook>
}
 800e212:	b008      	add	sp, #32
 800e214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e218:	f7fe bec4 	b.w	800cfa4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e21c:	3001      	adds	r0, #1
 800e21e:	d108      	bne.n	800e232 <vTaskStartScheduler+0x7e>
 800e220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	e7fe      	b.n	800e230 <vTaskStartScheduler+0x7c>
}
 800e232:	b008      	add	sp, #32
 800e234:	bd10      	pop	{r4, pc}
 800e236:	bf00      	nop
 800e238:	08025e65 	.word	0x08025e65
 800e23c:	0800dd81 	.word	0x0800dd81
 800e240:	24024d48 	.word	0x24024d48
 800e244:	24024d5c 	.word	0x24024d5c
 800e248:	24024d64 	.word	0x24024d64
 800e24c:	2402523c 	.word	0x2402523c

0800e250 <vTaskSwitchContext>:
{
 800e250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e252:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c4 <vTaskSwitchContext+0x74>)
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c8 <vTaskSwitchContext+0x78>)
 800e258:	b112      	cbz	r2, 800e260 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e25a:	2201      	movs	r2, #1
 800e25c:	601a      	str	r2, [r3, #0]
}
 800e25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e260:	4c1a      	ldr	r4, [pc, #104]	@ (800e2cc <vTaskSwitchContext+0x7c>)
 800e262:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e264:	4e1a      	ldr	r6, [pc, #104]	@ (800e2d0 <vTaskSwitchContext+0x80>)
 800e266:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e268:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e26a:	6820      	ldr	r0, [r4, #0]
 800e26c:	f7ff ff96 	bl	800e19c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e270:	6832      	ldr	r2, [r6, #0]
 800e272:	4918      	ldr	r1, [pc, #96]	@ (800e2d4 <vTaskSwitchContext+0x84>)
 800e274:	fb07 f302 	mul.w	r3, r7, r2
 800e278:	58cd      	ldr	r5, [r1, r3]
 800e27a:	18c8      	adds	r0, r1, r3
 800e27c:	b1ad      	cbz	r5, 800e2aa <vTaskSwitchContext+0x5a>
 800e27e:	6845      	ldr	r5, [r0, #4]
 800e280:	3308      	adds	r3, #8
 800e282:	686d      	ldr	r5, [r5, #4]
 800e284:	440b      	add	r3, r1
 800e286:	429d      	cmp	r5, r3
 800e288:	6045      	str	r5, [r0, #4]
 800e28a:	bf04      	itt	eq
 800e28c:	686b      	ldreq	r3, [r5, #4]
 800e28e:	6043      	streq	r3, [r0, #4]
 800e290:	2314      	movs	r3, #20
 800e292:	fb03 1102 	mla	r1, r3, r2, r1
 800e296:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e298:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	6023      	str	r3, [r4, #0]
 800e29e:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e2a0:	6820      	ldr	r0, [r4, #0]
}
 800e2a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800e2a6:	f7ff bf79 	b.w	800e19c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2aa:	b942      	cbnz	r2, 800e2be <vTaskSwitchContext+0x6e>
 800e2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	e7fe      	b.n	800e2bc <vTaskSwitchContext+0x6c>
 800e2be:	3a01      	subs	r2, #1
 800e2c0:	e7d8      	b.n	800e274 <vTaskSwitchContext+0x24>
 800e2c2:	bf00      	nop
 800e2c4:	24024d44 	.word	0x24024d44
 800e2c8:	24024d54 	.word	0x24024d54
 800e2cc:	2402523c 	.word	0x2402523c
 800e2d0:	24024d60 	.word	0x24024d60
 800e2d4:	24024ddc 	.word	0x24024ddc

0800e2d8 <vTaskPlaceOnEventList>:
{
 800e2d8:	b510      	push	{r4, lr}
 800e2da:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e2dc:	b940      	cbnz	r0, 800e2f0 <vTaskPlaceOnEventList+0x18>
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	e7fe      	b.n	800e2ee <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2f0:	4b05      	ldr	r3, [pc, #20]	@ (800e308 <vTaskPlaceOnEventList+0x30>)
 800e2f2:	6819      	ldr	r1, [r3, #0]
 800e2f4:	3118      	adds	r1, #24
 800e2f6:	f7fe fd3c 	bl	800cd72 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	2101      	movs	r1, #1
}
 800e2fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e302:	f7ff bcd7 	b.w	800dcb4 <prvAddCurrentTaskToDelayedList>
 800e306:	bf00      	nop
 800e308:	2402523c 	.word	0x2402523c

0800e30c <vTaskPlaceOnEventListRestricted>:
	{
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	460d      	mov	r5, r1
 800e310:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e312:	b940      	cbnz	r0, 800e326 <vTaskPlaceOnEventListRestricted+0x1a>
 800e314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	e7fe      	b.n	800e324 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e326:	4b07      	ldr	r3, [pc, #28]	@ (800e344 <vTaskPlaceOnEventListRestricted+0x38>)
 800e328:	6819      	ldr	r1, [r3, #0]
 800e32a:	3118      	adds	r1, #24
 800e32c:	f7fe fd16 	bl	800cd5c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e330:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e332:	4621      	mov	r1, r4
 800e334:	bf0c      	ite	eq
 800e336:	4628      	moveq	r0, r5
 800e338:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e340:	f7ff bcb8 	b.w	800dcb4 <prvAddCurrentTaskToDelayedList>
 800e344:	2402523c 	.word	0x2402523c

0800e348 <xTaskRemoveFromEventList>:
{
 800e348:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e34a:	68c3      	ldr	r3, [r0, #12]
 800e34c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e34e:	b944      	cbnz	r4, 800e362 <xTaskRemoveFromEventList+0x1a>
 800e350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	e7fe      	b.n	800e360 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e362:	f104 0518 	add.w	r5, r4, #24
 800e366:	4628      	mov	r0, r5
 800e368:	f7fe fd1a 	bl	800cda0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e36c:	4b11      	ldr	r3, [pc, #68]	@ (800e3b4 <xTaskRemoveFromEventList+0x6c>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	b9d3      	cbnz	r3, 800e3a8 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e372:	1d25      	adds	r5, r4, #4
 800e374:	4628      	mov	r0, r5
 800e376:	f7fe fd13 	bl	800cda0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e37a:	4a0f      	ldr	r2, [pc, #60]	@ (800e3b8 <xTaskRemoveFromEventList+0x70>)
 800e37c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e37e:	6811      	ldr	r1, [r2, #0]
 800e380:	428b      	cmp	r3, r1
 800e382:	d900      	bls.n	800e386 <xTaskRemoveFromEventList+0x3e>
 800e384:	6013      	str	r3, [r2, #0]
 800e386:	2014      	movs	r0, #20
 800e388:	4a0c      	ldr	r2, [pc, #48]	@ (800e3bc <xTaskRemoveFromEventList+0x74>)
 800e38a:	4629      	mov	r1, r5
 800e38c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e390:	f7fe fce4 	bl	800cd5c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e394:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c0 <xTaskRemoveFromEventList+0x78>)
 800e396:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d906      	bls.n	800e3ae <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800e3a0:	2001      	movs	r0, #1
 800e3a2:	4b08      	ldr	r3, [pc, #32]	@ (800e3c4 <xTaskRemoveFromEventList+0x7c>)
 800e3a4:	6018      	str	r0, [r3, #0]
}
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	4807      	ldr	r0, [pc, #28]	@ (800e3c8 <xTaskRemoveFromEventList+0x80>)
 800e3ac:	e7f0      	b.n	800e390 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800e3ae:	2000      	movs	r0, #0
	return xReturn;
 800e3b0:	e7f9      	b.n	800e3a6 <xTaskRemoveFromEventList+0x5e>
 800e3b2:	bf00      	nop
 800e3b4:	24024d44 	.word	0x24024d44
 800e3b8:	24024d60 	.word	0x24024d60
 800e3bc:	24024ddc 	.word	0x24024ddc
 800e3c0:	2402523c 	.word	0x2402523c
 800e3c4:	24024d54 	.word	0x24024d54
 800e3c8:	24024d98 	.word	0x24024d98

0800e3cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e3cc:	4b03      	ldr	r3, [pc, #12]	@ (800e3dc <vTaskInternalSetTimeOutState+0x10>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e3d2:	4b03      	ldr	r3, [pc, #12]	@ (800e3e0 <vTaskInternalSetTimeOutState+0x14>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6043      	str	r3, [r0, #4]
}
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	24024d50 	.word	0x24024d50
 800e3e0:	24024d64 	.word	0x24024d64

0800e3e4 <xTaskCheckForTimeOut>:
{
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	b940      	cbnz	r0, 800e3fe <xTaskCheckForTimeOut+0x1a>
 800e3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f0:	f383 8811 	msr	BASEPRI, r3
 800e3f4:	f3bf 8f6f 	isb	sy
 800e3f8:	f3bf 8f4f 	dsb	sy
 800e3fc:	e7fe      	b.n	800e3fc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800e3fe:	b941      	cbnz	r1, 800e412 <xTaskCheckForTimeOut+0x2e>
 800e400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e404:	f383 8811 	msr	BASEPRI, r3
 800e408:	f3bf 8f6f 	isb	sy
 800e40c:	f3bf 8f4f 	dsb	sy
 800e410:	e7fe      	b.n	800e410 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800e412:	f7fe fd37 	bl	800ce84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e416:	4b0f      	ldr	r3, [pc, #60]	@ (800e454 <xTaskCheckForTimeOut+0x70>)
 800e418:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e41a:	6823      	ldr	r3, [r4, #0]
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	d010      	beq.n	800e442 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e420:	480d      	ldr	r0, [pc, #52]	@ (800e458 <xTaskCheckForTimeOut+0x74>)
 800e422:	682e      	ldr	r6, [r5, #0]
 800e424:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e426:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e428:	4286      	cmp	r6, r0
 800e42a:	d001      	beq.n	800e430 <xTaskCheckForTimeOut+0x4c>
 800e42c:	428a      	cmp	r2, r1
 800e42e:	d90f      	bls.n	800e450 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e430:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e432:	4283      	cmp	r3, r0
 800e434:	d90a      	bls.n	800e44c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800e436:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e438:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800e43a:	4413      	add	r3, r2
 800e43c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e43e:	f7ff ffc5 	bl	800e3cc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800e442:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e444:	f7fe fd3e 	bl	800cec4 <vPortExitCritical>
}
 800e448:	4620      	mov	r0, r4
 800e44a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e450:	2401      	movs	r4, #1
 800e452:	e7f7      	b.n	800e444 <xTaskCheckForTimeOut+0x60>
 800e454:	24024d64 	.word	0x24024d64
 800e458:	24024d50 	.word	0x24024d50

0800e45c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e45c:	4b01      	ldr	r3, [pc, #4]	@ (800e464 <vTaskMissedYield+0x8>)
 800e45e:	2201      	movs	r2, #1
 800e460:	601a      	str	r2, [r3, #0]
}
 800e462:	4770      	bx	lr
 800e464:	24024d54 	.word	0x24024d54

0800e468 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800e468:	4b01      	ldr	r3, [pc, #4]	@ (800e470 <xTaskGetCurrentTaskHandle+0x8>)
 800e46a:	6818      	ldr	r0, [r3, #0]
	}
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	2402523c 	.word	0x2402523c

0800e474 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e474:	4b05      	ldr	r3, [pc, #20]	@ (800e48c <xTaskGetSchedulerState+0x18>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	b133      	cbz	r3, 800e488 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e47a:	4b05      	ldr	r3, [pc, #20]	@ (800e490 <xTaskGetSchedulerState+0x1c>)
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	fab0 f080 	clz	r0, r0
 800e482:	0940      	lsrs	r0, r0, #5
 800e484:	0040      	lsls	r0, r0, #1
 800e486:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e488:	2001      	movs	r0, #1
	}
 800e48a:	4770      	bx	lr
 800e48c:	24024d5c 	.word	0x24024d5c
 800e490:	24024d44 	.word	0x24024d44

0800e494 <xTaskPriorityInherit>:
	{
 800e494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e496:	4604      	mov	r4, r0
 800e498:	b338      	cbz	r0, 800e4ea <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e49a:	4d1a      	ldr	r5, [pc, #104]	@ (800e504 <xTaskPriorityInherit+0x70>)
 800e49c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e49e:	682a      	ldr	r2, [r5, #0]
 800e4a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d226      	bcs.n	800e4f4 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4a6:	6982      	ldr	r2, [r0, #24]
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	db04      	blt.n	800e4b6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4ac:	682a      	ldr	r2, [r5, #0]
 800e4ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e4b0:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e4b4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e4b6:	2214      	movs	r2, #20
 800e4b8:	4e13      	ldr	r6, [pc, #76]	@ (800e508 <xTaskPriorityInherit+0x74>)
 800e4ba:	fb02 6303 	mla	r3, r2, r3, r6
 800e4be:	6962      	ldr	r2, [r4, #20]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d113      	bne.n	800e4ec <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4c4:	1d27      	adds	r7, r4, #4
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	f7fe fc6a 	bl	800cda0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4cc:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4ce:	4a0f      	ldr	r2, [pc, #60]	@ (800e50c <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4d2:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e4d6:	428b      	cmp	r3, r1
 800e4d8:	d900      	bls.n	800e4dc <xTaskPriorityInherit+0x48>
 800e4da:	6013      	str	r3, [r2, #0]
 800e4dc:	2014      	movs	r0, #20
 800e4de:	4639      	mov	r1, r7
 800e4e0:	fb00 6003 	mla	r0, r0, r3, r6
 800e4e4:	f7fe fc3a 	bl	800cd5c <vListInsertEnd>
				xReturn = pdTRUE;
 800e4e8:	2001      	movs	r0, #1
	}
 800e4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4ec:	682b      	ldr	r3, [r5, #0]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4f2:	e7f9      	b.n	800e4e8 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800e4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fa:	4298      	cmp	r0, r3
 800e4fc:	bf2c      	ite	cs
 800e4fe:	2000      	movcs	r0, #0
 800e500:	2001      	movcc	r0, #1
 800e502:	e7f2      	b.n	800e4ea <xTaskPriorityInherit+0x56>
 800e504:	2402523c 	.word	0x2402523c
 800e508:	24024ddc 	.word	0x24024ddc
 800e50c:	24024d60 	.word	0x24024d60

0800e510 <xTaskPriorityDisinherit>:
	{
 800e510:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800e512:	b908      	cbnz	r0, 800e518 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800e514:	2000      	movs	r0, #0
	}
 800e516:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800e518:	4b1b      	ldr	r3, [pc, #108]	@ (800e588 <xTaskPriorityDisinherit+0x78>)
 800e51a:	681c      	ldr	r4, [r3, #0]
 800e51c:	4284      	cmp	r4, r0
 800e51e:	d008      	beq.n	800e532 <xTaskPriorityDisinherit+0x22>
 800e520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	e7fe      	b.n	800e530 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800e532:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e534:	b943      	cbnz	r3, 800e548 <xTaskPriorityDisinherit+0x38>
 800e536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	e7fe      	b.n	800e546 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e548:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800e54a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e54c:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e54e:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e550:	4291      	cmp	r1, r2
 800e552:	d0df      	beq.n	800e514 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1dd      	bne.n	800e514 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e558:	1d25      	adds	r5, r4, #4
 800e55a:	4628      	mov	r0, r5
 800e55c:	f7fe fc20 	bl	800cda0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e560:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e562:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e566:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e568:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e56a:	4a08      	ldr	r2, [pc, #32]	@ (800e58c <xTaskPriorityDisinherit+0x7c>)
 800e56c:	6811      	ldr	r1, [r2, #0]
 800e56e:	428b      	cmp	r3, r1
 800e570:	d900      	bls.n	800e574 <xTaskPriorityDisinherit+0x64>
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	4a06      	ldr	r2, [pc, #24]	@ (800e590 <xTaskPriorityDisinherit+0x80>)
 800e576:	2014      	movs	r0, #20
 800e578:	4629      	mov	r1, r5
 800e57a:	fb00 2003 	mla	r0, r0, r3, r2
 800e57e:	f7fe fbed 	bl	800cd5c <vListInsertEnd>
					xReturn = pdTRUE;
 800e582:	2001      	movs	r0, #1
		return xReturn;
 800e584:	e7c7      	b.n	800e516 <xTaskPriorityDisinherit+0x6>
 800e586:	bf00      	nop
 800e588:	2402523c 	.word	0x2402523c
 800e58c:	24024d60 	.word	0x24024d60
 800e590:	24024ddc 	.word	0x24024ddc

0800e594 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800e594:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800e596:	4604      	mov	r4, r0
 800e598:	2800      	cmp	r0, #0
 800e59a:	d042      	beq.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800e59c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800e59e:	b942      	cbnz	r2, 800e5b2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a4:	f383 8811 	msr	BASEPRI, r3
 800e5a8:	f3bf 8f6f 	isb	sy
 800e5ac:	f3bf 8f4f 	dsb	sy
 800e5b0:	e7fe      	b.n	800e5b0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5b2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e5b4:	4299      	cmp	r1, r3
 800e5b6:	bf38      	it	cc
 800e5b8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5ba:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e5bc:	428b      	cmp	r3, r1
 800e5be:	d030      	beq.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5c0:	2a01      	cmp	r2, #1
 800e5c2:	d12e      	bne.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800e5c4:	4a17      	ldr	r2, [pc, #92]	@ (800e624 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800e5c6:	6812      	ldr	r2, [r2, #0]
 800e5c8:	4282      	cmp	r2, r0
 800e5ca:	d108      	bne.n	800e5de <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800e5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	e7fe      	b.n	800e5dc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5de:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5e0:	4d11      	ldr	r5, [pc, #68]	@ (800e628 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5e2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5e4:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800e5e8:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5ea:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5ee:	bfa8      	it	ge
 800e5f0:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5f4:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f6:	bfa8      	it	ge
 800e5f8:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d111      	bne.n	800e622 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5fe:	1d06      	adds	r6, r0, #4
 800e600:	4630      	mov	r0, r6
 800e602:	f7fe fbcd 	bl	800cda0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e606:	4a09      	ldr	r2, [pc, #36]	@ (800e62c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e608:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e60a:	6811      	ldr	r1, [r2, #0]
 800e60c:	428b      	cmp	r3, r1
 800e60e:	d900      	bls.n	800e612 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800e610:	6013      	str	r3, [r2, #0]
 800e612:	2014      	movs	r0, #20
 800e614:	4631      	mov	r1, r6
 800e616:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800e61a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800e61e:	f7fe bb9d 	b.w	800cd5c <vListInsertEnd>
	}
 800e622:	bd70      	pop	{r4, r5, r6, pc}
 800e624:	2402523c 	.word	0x2402523c
 800e628:	24024ddc 	.word	0x24024ddc
 800e62c:	24024d60 	.word	0x24024d60

0800e630 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e630:	4b04      	ldr	r3, [pc, #16]	@ (800e644 <pvTaskIncrementMutexHeldCount+0x14>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	b11a      	cbz	r2, 800e63e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e636:	6819      	ldr	r1, [r3, #0]
 800e638:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800e63a:	3201      	adds	r2, #1
 800e63c:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800e63e:	6818      	ldr	r0, [r3, #0]
	}
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	2402523c 	.word	0x2402523c

0800e648 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800e648:	4291      	cmp	r1, r2
{
 800e64a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e64c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e64e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e650:	d80a      	bhi.n	800e668 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e652:	1ad2      	subs	r2, r2, r3
 800e654:	6983      	ldr	r3, [r0, #24]
 800e656:	429a      	cmp	r2, r3
 800e658:	d20d      	bcs.n	800e676 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e65a:	1d01      	adds	r1, r0, #4
 800e65c:	4b07      	ldr	r3, [pc, #28]	@ (800e67c <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e65e:	6818      	ldr	r0, [r3, #0]
 800e660:	f7fe fb87 	bl	800cd72 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e664:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800e666:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e668:	429a      	cmp	r2, r3
 800e66a:	d201      	bcs.n	800e670 <prvInsertTimerInActiveList+0x28>
 800e66c:	4299      	cmp	r1, r3
 800e66e:	d202      	bcs.n	800e676 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e670:	1d01      	adds	r1, r0, #4
 800e672:	4b03      	ldr	r3, [pc, #12]	@ (800e680 <prvInsertTimerInActiveList+0x38>)
 800e674:	e7f3      	b.n	800e65e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800e676:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e678:	e7f5      	b.n	800e666 <prvInsertTimerInActiveList+0x1e>
 800e67a:	bf00      	nop
 800e67c:	2402533c 	.word	0x2402533c
 800e680:	24025340 	.word	0x24025340

0800e684 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e686:	4c11      	ldr	r4, [pc, #68]	@ (800e6cc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800e688:	f7fe fbfc 	bl	800ce84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e68c:	6825      	ldr	r5, [r4, #0]
 800e68e:	b9bd      	cbnz	r5, 800e6c0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e690:	4f0f      	ldr	r7, [pc, #60]	@ (800e6d0 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800e692:	4e10      	ldr	r6, [pc, #64]	@ (800e6d4 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800e694:	4638      	mov	r0, r7
 800e696:	f7fe fb53 	bl	800cd40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e69a:	4630      	mov	r0, r6
 800e69c:	f7fe fb50 	bl	800cd40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e6a0:	4b0d      	ldr	r3, [pc, #52]	@ (800e6d8 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6a2:	4a0e      	ldr	r2, [pc, #56]	@ (800e6dc <prvCheckForValidListAndQueue+0x58>)
 800e6a4:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800e6a6:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6a8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e0 <prvCheckForValidListAndQueue+0x5c>)
 800e6ac:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e4 <prvCheckForValidListAndQueue+0x60>)
 800e6b0:	9500      	str	r5, [sp, #0]
 800e6b2:	f7fe fdef 	bl	800d294 <xQueueGenericCreateStatic>
 800e6b6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e6b8:	b110      	cbz	r0, 800e6c0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e6ba:	490b      	ldr	r1, [pc, #44]	@ (800e6e8 <prvCheckForValidListAndQueue+0x64>)
 800e6bc:	f7ff fa1a 	bl	800daf4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800e6c0:	b003      	add	sp, #12
 800e6c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800e6c6:	f7fe bbfd 	b.w	800cec4 <vPortExitCritical>
 800e6ca:	bf00      	nop
 800e6cc:	24025338 	.word	0x24025338
 800e6d0:	24025358 	.word	0x24025358
 800e6d4:	24025344 	.word	0x24025344
 800e6d8:	24025340 	.word	0x24025340
 800e6dc:	24025290 	.word	0x24025290
 800e6e0:	2402533c 	.word	0x2402533c
 800e6e4:	24025240 	.word	0x24025240
 800e6e8:	08025e6a 	.word	0x08025e6a

0800e6ec <xTimerCreateTimerTask>:
{
 800e6ec:	b510      	push	{r4, lr}
 800e6ee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e6f0:	f7ff ffc8 	bl	800e684 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e6f4:	4b12      	ldr	r3, [pc, #72]	@ (800e740 <xTimerCreateTimerTask+0x54>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	b1b3      	cbz	r3, 800e728 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e6fa:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e6fc:	aa07      	add	r2, sp, #28
 800e6fe:	a906      	add	r1, sp, #24
 800e700:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e702:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e706:	f7fe fa13 	bl	800cb30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	9a07      	ldr	r2, [sp, #28]
 800e70e:	9302      	str	r3, [sp, #8]
 800e710:	9b06      	ldr	r3, [sp, #24]
 800e712:	490c      	ldr	r1, [pc, #48]	@ (800e744 <xTimerCreateTimerTask+0x58>)
 800e714:	9301      	str	r3, [sp, #4]
 800e716:	2302      	movs	r3, #2
 800e718:	480b      	ldr	r0, [pc, #44]	@ (800e748 <xTimerCreateTimerTask+0x5c>)
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	4623      	mov	r3, r4
 800e71e:	f7ff fbae 	bl	800de7e <xTaskCreateStatic>
 800e722:	4b0a      	ldr	r3, [pc, #40]	@ (800e74c <xTimerCreateTimerTask+0x60>)
 800e724:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e726:	b940      	cbnz	r0, 800e73a <xTimerCreateTimerTask+0x4e>
 800e728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e72c:	f383 8811 	msr	BASEPRI, r3
 800e730:	f3bf 8f6f 	isb	sy
 800e734:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e738:	e7fe      	b.n	800e738 <xTimerCreateTimerTask+0x4c>
}
 800e73a:	2001      	movs	r0, #1
 800e73c:	b008      	add	sp, #32
 800e73e:	bd10      	pop	{r4, pc}
 800e740:	24025338 	.word	0x24025338
 800e744:	08025e6f 	.word	0x08025e6f
 800e748:	0800e849 	.word	0x0800e849
 800e74c:	24025334 	.word	0x24025334

0800e750 <xTimerGenericCommand>:
{
 800e750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e752:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800e754:	4604      	mov	r4, r0
{
 800e756:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800e758:	b940      	cbnz	r0, 800e76c <xTimerGenericCommand+0x1c>
 800e75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	e7fe      	b.n	800e76a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800e76c:	4d0c      	ldr	r5, [pc, #48]	@ (800e7a0 <xTimerGenericCommand+0x50>)
 800e76e:	6828      	ldr	r0, [r5, #0]
 800e770:	b178      	cbz	r0, 800e792 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e772:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e774:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e776:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e77a:	dc0c      	bgt.n	800e796 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e77c:	f7ff fe7a 	bl	800e474 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e780:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e782:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e784:	4669      	mov	r1, sp
 800e786:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e788:	bf0c      	ite	eq
 800e78a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e78c:	461a      	movne	r2, r3
 800e78e:	f7fe fe36 	bl	800d3fe <xQueueGenericSend>
}
 800e792:	b004      	add	sp, #16
 800e794:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e796:	2300      	movs	r3, #0
 800e798:	4669      	mov	r1, sp
 800e79a:	f7fe ff33 	bl	800d604 <xQueueGenericSendFromISR>
 800e79e:	e7f8      	b.n	800e792 <xTimerGenericCommand+0x42>
 800e7a0:	24025338 	.word	0x24025338

0800e7a4 <prvSampleTimeNow>:
{
 800e7a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800e7a8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800e844 <prvSampleTimeNow+0xa0>
{
 800e7ac:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800e7ae:	f7ff fbd5 	bl	800df5c <xTaskGetTickCount>
 800e7b2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800e7b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e7b8:	4283      	cmp	r3, r0
 800e7ba:	d909      	bls.n	800e7d0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7bc:	4f1f      	ldr	r7, [pc, #124]	@ (800e83c <prvSampleTimeNow+0x98>)
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	b96a      	cbnz	r2, 800e7e0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800e7c4:	4a1e      	ldr	r2, [pc, #120]	@ (800e840 <prvSampleTimeNow+0x9c>)
 800e7c6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e7c8:	6013      	str	r3, [r2, #0]
 800e7ca:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800e7cc:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e7ce:	e000      	b.n	800e7d2 <prvSampleTimeNow+0x2e>
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800e7d4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800e7d6:	f8c8 5000 	str.w	r5, [r8]
}
 800e7da:	b002      	add	sp, #8
 800e7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7e0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7e4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7e8:	f104 0a04 	add.w	sl, r4, #4
 800e7ec:	4650      	mov	r0, sl
 800e7ee:	f7fe fad7 	bl	800cda0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7f2:	6a23      	ldr	r3, [r4, #32]
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e7f8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e7fc:	075b      	lsls	r3, r3, #29
 800e7fe:	d5de      	bpl.n	800e7be <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e800:	69a3      	ldr	r3, [r4, #24]
 800e802:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800e804:	4599      	cmp	r9, r3
 800e806:	d206      	bcs.n	800e816 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e808:	4651      	mov	r1, sl
 800e80a:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e80c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e80e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e810:	f7fe faaf 	bl	800cd72 <vListInsert>
 800e814:	e7d3      	b.n	800e7be <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e816:	2300      	movs	r3, #0
 800e818:	464a      	mov	r2, r9
 800e81a:	4620      	mov	r0, r4
 800e81c:	4619      	mov	r1, r3
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	f7ff ff96 	bl	800e750 <xTimerGenericCommand>
				configASSERT( xResult );
 800e824:	2800      	cmp	r0, #0
 800e826:	d1ca      	bne.n	800e7be <prvSampleTimeNow+0x1a>
 800e828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82c:	f383 8811 	msr	BASEPRI, r3
 800e830:	f3bf 8f6f 	isb	sy
 800e834:	f3bf 8f4f 	dsb	sy
 800e838:	e7fe      	b.n	800e838 <prvSampleTimeNow+0x94>
 800e83a:	bf00      	nop
 800e83c:	24025340 	.word	0x24025340
 800e840:	2402533c 	.word	0x2402533c
 800e844:	24025330 	.word	0x24025330

0800e848 <prvTimerTask>:
{
 800e848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e84c:	4d6e      	ldr	r5, [pc, #440]	@ (800ea08 <prvTimerTask+0x1c0>)
{
 800e84e:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e850:	4e6e      	ldr	r6, [pc, #440]	@ (800ea0c <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e852:	682b      	ldr	r3, [r5, #0]
 800e854:	f8d3 8000 	ldr.w	r8, [r3]
 800e858:	f1b8 0f00 	cmp.w	r8, #0
 800e85c:	d035      	beq.n	800e8ca <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e85e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e860:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e862:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800e866:	f7ff fb71 	bl	800df4c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e86a:	a804      	add	r0, sp, #16
 800e86c:	f7ff ff9a 	bl	800e7a4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e870:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e872:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e874:	2b00      	cmp	r3, #0
 800e876:	d169      	bne.n	800e94c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e878:	2c00      	cmp	r4, #0
 800e87a:	d14c      	bne.n	800e916 <prvTimerTask+0xce>
 800e87c:	4540      	cmp	r0, r8
 800e87e:	d350      	bcc.n	800e922 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800e880:	f7ff fc08 	bl	800e094 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e88a:	1d38      	adds	r0, r7, #4
 800e88c:	f7fe fa88 	bl	800cda0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e890:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e894:	0758      	lsls	r0, r3, #29
 800e896:	d51a      	bpl.n	800e8ce <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e898:	69b9      	ldr	r1, [r7, #24]
 800e89a:	4643      	mov	r3, r8
 800e89c:	464a      	mov	r2, r9
 800e89e:	4638      	mov	r0, r7
 800e8a0:	4441      	add	r1, r8
 800e8a2:	f7ff fed1 	bl	800e648 <prvInsertTimerInActiveList>
 800e8a6:	b1b0      	cbz	r0, 800e8d6 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	4642      	mov	r2, r8
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	4638      	mov	r0, r7
 800e8b0:	9400      	str	r4, [sp, #0]
 800e8b2:	f7ff ff4d 	bl	800e750 <xTimerGenericCommand>
			configASSERT( xResult );
 800e8b6:	b970      	cbnz	r0, 800e8d6 <prvTimerTask+0x8e>
 800e8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8bc:	f383 8811 	msr	BASEPRI, r3
 800e8c0:	f3bf 8f6f 	isb	sy
 800e8c4:	f3bf 8f4f 	dsb	sy
 800e8c8:	e7fe      	b.n	800e8c8 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8ca:	2401      	movs	r4, #1
 800e8cc:	e7cb      	b.n	800e866 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8ce:	f023 0301 	bic.w	r3, r3, #1
 800e8d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	4638      	mov	r0, r7
 800e8da:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8dc:	2200      	movs	r2, #0
 800e8de:	a904      	add	r1, sp, #16
 800e8e0:	6830      	ldr	r0, [r6, #0]
 800e8e2:	f7fe ff3d 	bl	800d760 <xQueueReceive>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d0b3      	beq.n	800e852 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8ea:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e8ec:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	db2f      	blt.n	800e952 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e8f2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e8f4:	6963      	ldr	r3, [r4, #20]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d132      	bne.n	800e960 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e8fa:	a803      	add	r0, sp, #12
 800e8fc:	f7ff ff52 	bl	800e7a4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800e900:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e902:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800e904:	2b09      	cmp	r3, #9
 800e906:	d8e9      	bhi.n	800e8dc <prvTimerTask+0x94>
 800e908:	e8df f003 	tbb	[pc, r3]
 800e90c:	572e2e2e 	.word	0x572e2e2e
 800e910:	2e2e765e 	.word	0x2e2e765e
 800e914:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e916:	4b3e      	ldr	r3, [pc, #248]	@ (800ea10 <prvTimerTask+0x1c8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	681c      	ldr	r4, [r3, #0]
 800e91c:	fab4 f484 	clz	r4, r4
 800e920:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e922:	4622      	mov	r2, r4
 800e924:	eba8 0109 	sub.w	r1, r8, r9
 800e928:	6830      	ldr	r0, [r6, #0]
 800e92a:	f7ff f922 	bl	800db72 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e92e:	f7ff fbb1 	bl	800e094 <xTaskResumeAll>
 800e932:	2800      	cmp	r0, #0
 800e934:	d1d2      	bne.n	800e8dc <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800e936:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e93e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e942:	f3bf 8f4f 	dsb	sy
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	e7c7      	b.n	800e8dc <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800e94c:	f7ff fba2 	bl	800e094 <xTaskResumeAll>
}
 800e950:	e7c4      	b.n	800e8dc <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e952:	9b05      	ldr	r3, [sp, #20]
 800e954:	9907      	ldr	r1, [sp, #28]
 800e956:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e958:	9b04      	ldr	r3, [sp, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	dbbe      	blt.n	800e8dc <prvTimerTask+0x94>
 800e95e:	e7c8      	b.n	800e8f2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e960:	1d20      	adds	r0, r4, #4
 800e962:	f7fe fa1d 	bl	800cda0 <uxListRemove>
 800e966:	e7c8      	b.n	800e8fa <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e968:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e96c:	4620      	mov	r0, r4
 800e96e:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e970:	f043 0301 	orr.w	r3, r3, #1
 800e974:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e978:	9b05      	ldr	r3, [sp, #20]
 800e97a:	4419      	add	r1, r3
 800e97c:	f7ff fe64 	bl	800e648 <prvInsertTimerInActiveList>
 800e980:	2800      	cmp	r0, #0
 800e982:	d0ab      	beq.n	800e8dc <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e984:	6a23      	ldr	r3, [r4, #32]
 800e986:	4620      	mov	r0, r4
 800e988:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e98a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e98e:	0759      	lsls	r1, r3, #29
 800e990:	d5a4      	bpl.n	800e8dc <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e992:	69a2      	ldr	r2, [r4, #24]
 800e994:	2300      	movs	r3, #0
 800e996:	9905      	ldr	r1, [sp, #20]
 800e998:	4620      	mov	r0, r4
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	440a      	add	r2, r1
 800e99e:	4619      	mov	r1, r3
 800e9a0:	f7ff fed6 	bl	800e750 <xTimerGenericCommand>
							configASSERT( xResult );
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d199      	bne.n	800e8dc <prvTimerTask+0x94>
 800e9a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ac:	f383 8811 	msr	BASEPRI, r3
 800e9b0:	f3bf 8f6f 	isb	sy
 800e9b4:	f3bf 8f4f 	dsb	sy
 800e9b8:	e7fe      	b.n	800e9b8 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9be:	f023 0301 	bic.w	r3, r3, #1
 800e9c2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800e9c6:	e789      	b.n	800e8dc <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e9c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9cc:	f043 0301 	orr.w	r3, r3, #1
 800e9d0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e9d4:	9905      	ldr	r1, [sp, #20]
 800e9d6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e9d8:	b941      	cbnz	r1, 800e9ec <prvTimerTask+0x1a4>
 800e9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	e7fe      	b.n	800e9ea <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	4401      	add	r1, r0
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f7ff fe29 	bl	800e648 <prvInsertTimerInActiveList>
					break;
 800e9f6:	e771      	b.n	800e8dc <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e9f8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9fc:	079a      	lsls	r2, r3, #30
 800e9fe:	d4de      	bmi.n	800e9be <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7fe f95f 	bl	800ccc4 <vPortFree>
 800ea06:	e769      	b.n	800e8dc <prvTimerTask+0x94>
 800ea08:	24025340 	.word	0x24025340
 800ea0c:	24025338 	.word	0x24025338
 800ea10:	2402533c 	.word	0x2402533c

0800ea14 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800ea14:	8880      	ldrh	r0, [r0, #4]
 800ea16:	4770      	bx	lr

0800ea18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800ea18:	b570      	push	{r4, r5, r6, lr}
 800ea1a:	6803      	ldr	r3, [r0, #0]
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	2100      	movs	r1, #0
 800ea20:	4605      	mov	r5, r0
 800ea22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea24:	4798      	blx	r3
 800ea26:	4606      	mov	r6, r0
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	1ba4      	subs	r4, r4, r6
 800ea2e:	6a1b      	ldr	r3, [r3, #32]
 800ea30:	b2a4      	uxth	r4, r4
 800ea32:	4798      	blx	r3
 800ea34:	fbb4 f0f0 	udiv	r0, r4, r0
 800ea38:	bd70      	pop	{r4, r5, r6, pc}

0800ea3a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	8083      	strh	r3, [r0, #4]
 800ea3e:	4770      	bx	lr

0800ea40 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800ea40:	b510      	push	{r4, lr}
 800ea42:	6803      	ldr	r3, [r0, #0]
 800ea44:	4604      	mov	r4, r0
 800ea46:	8881      	ldrh	r1, [r0, #4]
 800ea48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea4a:	4798      	blx	r3
 800ea4c:	88a3      	ldrh	r3, [r4, #4]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	80a3      	strh	r3, [r4, #4]
 800ea52:	bd10      	pop	{r4, pc}

0800ea54 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800ea54:	6803      	ldr	r3, [r0, #0]
 800ea56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea58:	4718      	bx	r3

0800ea5a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800ea5a:	4770      	bx	lr

0800ea5c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ea5c:	4a02      	ldr	r2, [pc, #8]	@ (800ea68 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ea5e:	6002      	str	r2, [r0, #0]
 800ea60:	2200      	movs	r2, #0
 800ea62:	8082      	strh	r2, [r0, #4]
 800ea64:	4770      	bx	lr
 800ea66:	bf00      	nop
 800ea68:	08026ac4 	.word	0x08026ac4

0800ea6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ea6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ea6e:	2000      	movs	r0, #0
 800ea70:	b12b      	cbz	r3, 800ea7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ea72:	b920      	cbnz	r0, 800ea7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ea74:	1a5a      	subs	r2, r3, r1
 800ea76:	699b      	ldr	r3, [r3, #24]
 800ea78:	4250      	negs	r0, r2
 800ea7a:	4150      	adcs	r0, r2
 800ea7c:	e7f8      	b.n	800ea70 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ea7e:	4770      	bx	lr

0800ea80 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ea80:	2300      	movs	r3, #0
 800ea82:	6148      	str	r0, [r1, #20]
 800ea84:	618b      	str	r3, [r1, #24]
 800ea86:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ea88:	b913      	cbnz	r3, 800ea90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ea8a:	6281      	str	r1, [r0, #40]	@ 0x28
 800ea8c:	4770      	bx	lr
 800ea8e:	4613      	mov	r3, r2
 800ea90:	699a      	ldr	r2, [r3, #24]
 800ea92:	2a00      	cmp	r2, #0
 800ea94:	d1fb      	bne.n	800ea8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ea96:	6199      	str	r1, [r3, #24]
 800ea98:	4770      	bx	lr

0800ea9a <_ZN8touchgfx9Container9removeAllEv>:
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ea9e:	b123      	cbz	r3, 800eaaa <_ZN8touchgfx9Container9removeAllEv+0x10>
 800eaa0:	6999      	ldr	r1, [r3, #24]
 800eaa2:	6281      	str	r1, [r0, #40]	@ 0x28
 800eaa4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800eaa8:	e7f8      	b.n	800ea9c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800eaaa:	4770      	bx	lr

0800eaac <_ZN8touchgfx9Container6unlinkEv>:
 800eaac:	2300      	movs	r3, #0
 800eaae:	6283      	str	r3, [r0, #40]	@ 0x28
 800eab0:	4770      	bx	lr

0800eab2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800eab2:	2200      	movs	r2, #0
 800eab4:	8002      	strh	r2, [r0, #0]
 800eab6:	8042      	strh	r2, [r0, #2]
 800eab8:	8082      	strh	r2, [r0, #4]
 800eaba:	80c2      	strh	r2, [r0, #6]
 800eabc:	4770      	bx	lr

0800eabe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800eabe:	b570      	push	{r4, r5, r6, lr}
 800eac0:	460d      	mov	r5, r1
 800eac2:	4616      	mov	r6, r2
 800eac4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800eac6:	b13c      	cbz	r4, 800ead8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	4620      	mov	r0, r4
 800eacc:	4632      	mov	r2, r6
 800eace:	4629      	mov	r1, r5
 800ead0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead2:	4798      	blx	r3
 800ead4:	69a4      	ldr	r4, [r4, #24]
 800ead6:	e7f6      	b.n	800eac6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ead8:	bd70      	pop	{r4, r5, r6, pc}

0800eada <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800eada:	b538      	push	{r3, r4, r5, lr}
 800eadc:	460d      	mov	r5, r1
 800eade:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800eae0:	b134      	cbz	r4, 800eaf0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800eae2:	682b      	ldr	r3, [r5, #0]
 800eae4:	4621      	mov	r1, r4
 800eae6:	4628      	mov	r0, r5
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	4798      	blx	r3
 800eaec:	69a4      	ldr	r4, [r4, #24]
 800eaee:	e7f7      	b.n	800eae0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800eaf0:	bd38      	pop	{r3, r4, r5, pc}

0800eaf2 <_ZN8touchgfx9ContainerD1Ev>:
 800eaf2:	4770      	bx	lr

0800eaf4 <_ZN8touchgfx9ContainerD0Ev>:
 800eaf4:	b510      	push	{r4, lr}
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	212c      	movs	r1, #44	@ 0x2c
 800eafa:	f013 fe93 	bl	8022824 <_ZdlPvj>
 800eafe:	4620      	mov	r0, r4
 800eb00:	bd10      	pop	{r4, pc}

0800eb02 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800eb02:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800eb04:	b19b      	cbz	r3, 800eb2e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800eb06:	428b      	cmp	r3, r1
 800eb08:	d109      	bne.n	800eb1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800eb0a:	699a      	ldr	r2, [r3, #24]
 800eb0c:	2100      	movs	r1, #0
 800eb0e:	6159      	str	r1, [r3, #20]
 800eb10:	6282      	str	r2, [r0, #40]	@ 0x28
 800eb12:	b902      	cbnz	r2, 800eb16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800eb14:	4770      	bx	lr
 800eb16:	6199      	str	r1, [r3, #24]
 800eb18:	4770      	bx	lr
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	b13a      	cbz	r2, 800eb2e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800eb1e:	699a      	ldr	r2, [r3, #24]
 800eb20:	428a      	cmp	r2, r1
 800eb22:	d1fa      	bne.n	800eb1a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800eb24:	698a      	ldr	r2, [r1, #24]
 800eb26:	619a      	str	r2, [r3, #24]
 800eb28:	2300      	movs	r3, #0
 800eb2a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800eb2e:	4770      	bx	lr

0800eb30 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800eb30:	b410      	push	{r4}
 800eb32:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800eb34:	4604      	mov	r4, r0
 800eb36:	b92b      	cbnz	r3, 800eb44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800eb38:	6803      	ldr	r3, [r0, #0]
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb42:	4718      	bx	r3
 800eb44:	b941      	cbnz	r1, 800eb58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800eb46:	6193      	str	r3, [r2, #24]
 800eb48:	6282      	str	r2, [r0, #40]	@ 0x28
 800eb4a:	6154      	str	r4, [r2, #20]
 800eb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	4603      	mov	r3, r0
 800eb54:	2800      	cmp	r0, #0
 800eb56:	d0f9      	beq.n	800eb4c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800eb58:	4299      	cmp	r1, r3
 800eb5a:	6998      	ldr	r0, [r3, #24]
 800eb5c:	d1f9      	bne.n	800eb52 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800eb5e:	6190      	str	r0, [r2, #24]
 800eb60:	618a      	str	r2, [r1, #24]
 800eb62:	e7f2      	b.n	800eb4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800eb64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800eb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb68:	461f      	mov	r7, r3
 800eb6a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800eb6e:	460d      	mov	r5, r1
 800eb70:	4616      	mov	r6, r2
 800eb72:	b103      	cbz	r3, 800eb76 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800eb74:	6038      	str	r0, [r7, #0]
 800eb76:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800eb78:	b314      	cbz	r4, 800ebc0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800eb7a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800eb7e:	b1eb      	cbz	r3, 800ebbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eb80:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800eb84:	428d      	cmp	r5, r1
 800eb86:	db19      	blt.n	800ebbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eb88:	b289      	uxth	r1, r1
 800eb8a:	8923      	ldrh	r3, [r4, #8]
 800eb8c:	440b      	add	r3, r1
 800eb8e:	b21b      	sxth	r3, r3
 800eb90:	429d      	cmp	r5, r3
 800eb92:	da13      	bge.n	800ebbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eb94:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800eb98:	4296      	cmp	r6, r2
 800eb9a:	db0f      	blt.n	800ebbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eb9c:	b292      	uxth	r2, r2
 800eb9e:	8963      	ldrh	r3, [r4, #10]
 800eba0:	4413      	add	r3, r2
 800eba2:	b21b      	sxth	r3, r3
 800eba4:	429e      	cmp	r6, r3
 800eba6:	da09      	bge.n	800ebbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800eba8:	6823      	ldr	r3, [r4, #0]
 800ebaa:	1ab2      	subs	r2, r6, r2
 800ebac:	1a69      	subs	r1, r5, r1
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800ebb4:	b212      	sxth	r2, r2
 800ebb6:	463b      	mov	r3, r7
 800ebb8:	b209      	sxth	r1, r1
 800ebba:	47c0      	blx	r8
 800ebbc:	69a4      	ldr	r4, [r4, #24]
 800ebbe:	e7db      	b.n	800eb78 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ebc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ebc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc8:	4c6d      	ldr	r4, [pc, #436]	@ (800ed80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ebca:	b0a1      	sub	sp, #132	@ 0x84
 800ebcc:	4606      	mov	r6, r0
 800ebce:	6824      	ldr	r4, [r4, #0]
 800ebd0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800ebd2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800ebd6:	2400      	movs	r4, #0
 800ebd8:	9303      	str	r3, [sp, #12]
 800ebda:	802c      	strh	r4, [r5, #0]
 800ebdc:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800ebde:	802c      	strh	r4, [r5, #0]
 800ebe0:	601c      	str	r4, [r3, #0]
 800ebe2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ebe6:	f7ff ffbd 	bl	800eb64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ebea:	f1b9 0f03 	cmp.w	r9, #3
 800ebee:	f340 80c1 	ble.w	800ed74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	a80c      	add	r0, sp, #48	@ 0x30
 800ebf6:	f006 ff8d 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ebfa:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800ebfe:	9306      	str	r3, [sp, #24]
 800ec00:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800ec04:	9307      	str	r3, [sp, #28]
 800ec06:	9b03      	ldr	r3, [sp, #12]
 800ec08:	f8d3 a000 	ldr.w	sl, [r3]
 800ec0c:	f1ba 0f00 	cmp.w	sl, #0
 800ec10:	f000 80b3 	beq.w	800ed7a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ec14:	4651      	mov	r1, sl
 800ec16:	a810      	add	r0, sp, #64	@ 0x40
 800ec18:	f006 ff7c 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ec1c:	2002      	movs	r0, #2
 800ec1e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800ec22:	9b01      	ldr	r3, [sp, #4]
 800ec24:	9a06      	ldr	r2, [sp, #24]
 800ec26:	fb91 f1f0 	sdiv	r1, r1, r0
 800ec2a:	189d      	adds	r5, r3, r2
 800ec2c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800ec30:	9a07      	ldr	r2, [sp, #28]
 800ec32:	4419      	add	r1, r3
 800ec34:	9b02      	ldr	r3, [sp, #8]
 800ec36:	4413      	add	r3, r2
 800ec38:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800ec3c:	1a6d      	subs	r5, r5, r1
 800ec3e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800ec42:	fb92 f2f0 	sdiv	r2, r2, r0
 800ec46:	440a      	add	r2, r1
 800ec48:	1a9b      	subs	r3, r3, r2
 800ec4a:	435b      	muls	r3, r3
 800ec4c:	fb05 3505 	mla	r5, r5, r5, r3
 800ec50:	4f4c      	ldr	r7, [pc, #304]	@ (800ed84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ec52:	ac10      	add	r4, sp, #64	@ 0x40
 800ec54:	f1b9 0f0c 	cmp.w	r9, #12
 800ec58:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec5c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ec62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec64:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ec68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ec6c:	f04f 0303 	mov.w	r3, #3
 800ec70:	bfd8      	it	le
 800ec72:	f109 32ff 	addle.w	r2, r9, #4294967295
 800ec76:	f04f 0400 	mov.w	r4, #0
 800ec7a:	f8cd 9000 	str.w	r9, [sp]
 800ec7e:	bfcc      	ite	gt
 800ec80:	4698      	movgt	r8, r3
 800ec82:	fb92 f8f3 	sdivle	r8, r2, r3
 800ec86:	1c63      	adds	r3, r4, #1
 800ec88:	aa10      	add	r2, sp, #64	@ 0x40
 800ec8a:	f004 0401 	and.w	r4, r4, #1
 800ec8e:	f04f 0b00 	mov.w	fp, #0
 800ec92:	9308      	str	r3, [sp, #32]
 800ec94:	9b00      	ldr	r3, [sp, #0]
 800ec96:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800ec9a:	fb93 f3f8 	sdiv	r3, r3, r8
 800ec9e:	3404      	adds	r4, #4
 800eca0:	b29b      	uxth	r3, r3
 800eca2:	9304      	str	r3, [sp, #16]
 800eca4:	9a04      	ldr	r2, [sp, #16]
 800eca6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ecaa:	fb13 f302 	smulbb	r3, r3, r2
 800ecae:	9a01      	ldr	r2, [sp, #4]
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	1899      	adds	r1, r3, r2
 800ecb4:	9305      	str	r3, [sp, #20]
 800ecb6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ecba:	b209      	sxth	r1, r1
 800ecbc:	4299      	cmp	r1, r3
 800ecbe:	db4d      	blt.n	800ed5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ecc0:	8932      	ldrh	r2, [r6, #8]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	b21b      	sxth	r3, r3
 800ecc6:	4299      	cmp	r1, r3
 800ecc8:	da48      	bge.n	800ed5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ecca:	9b04      	ldr	r3, [sp, #16]
 800eccc:	6827      	ldr	r7, [r4, #0]
 800ecce:	fb17 f703 	smulbb	r7, r7, r3
 800ecd2:	9b02      	ldr	r3, [sp, #8]
 800ecd4:	b2bf      	uxth	r7, r7
 800ecd6:	18fa      	adds	r2, r7, r3
 800ecd8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ecdc:	b212      	sxth	r2, r2
 800ecde:	429a      	cmp	r2, r3
 800ece0:	db3c      	blt.n	800ed5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ece2:	8970      	ldrh	r0, [r6, #10]
 800ece4:	4403      	add	r3, r0
 800ece6:	b21b      	sxth	r3, r3
 800ece8:	429a      	cmp	r2, r3
 800ecea:	da37      	bge.n	800ed5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ecec:	2300      	movs	r3, #0
 800ecee:	4630      	mov	r0, r6
 800ecf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecf2:	ab0b      	add	r3, sp, #44	@ 0x2c
 800ecf4:	f7ff ff36 	bl	800eb64 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ecf8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecfa:	b37a      	cbz	r2, 800ed5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ecfc:	4552      	cmp	r2, sl
 800ecfe:	d02d      	beq.n	800ed5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ed00:	4611      	mov	r1, r2
 800ed02:	a80e      	add	r0, sp, #56	@ 0x38
 800ed04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed06:	f006 ff05 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed0a:	f04f 0e02 	mov.w	lr, #2
 800ed0e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800ed12:	9a06      	ldr	r2, [sp, #24]
 800ed14:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800ed18:	9b01      	ldr	r3, [sp, #4]
 800ed1a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800ed1e:	4413      	add	r3, r2
 800ed20:	9a07      	ldr	r2, [sp, #28]
 800ed22:	fb91 f1fe 	sdiv	r1, r1, lr
 800ed26:	fb9c fcfe 	sdiv	ip, ip, lr
 800ed2a:	4401      	add	r1, r0
 800ed2c:	1a58      	subs	r0, r3, r1
 800ed2e:	9b02      	ldr	r3, [sp, #8]
 800ed30:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800ed34:	4413      	add	r3, r2
 800ed36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed38:	448c      	add	ip, r1
 800ed3a:	eba3 030c 	sub.w	r3, r3, ip
 800ed3e:	435b      	muls	r3, r3
 800ed40:	fb00 3300 	mla	r3, r0, r0, r3
 800ed44:	42ab      	cmp	r3, r5
 800ed46:	d208      	bcs.n	800ed5a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ed48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed4a:	461d      	mov	r5, r3
 800ed4c:	9803      	ldr	r0, [sp, #12]
 800ed4e:	6001      	str	r1, [r0, #0]
 800ed50:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800ed52:	9805      	ldr	r0, [sp, #20]
 800ed54:	8008      	strh	r0, [r1, #0]
 800ed56:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800ed58:	800f      	strh	r7, [r1, #0]
 800ed5a:	4692      	mov	sl, r2
 800ed5c:	f10b 0b01 	add.w	fp, fp, #1
 800ed60:	3408      	adds	r4, #8
 800ed62:	f1bb 0f04 	cmp.w	fp, #4
 800ed66:	d19d      	bne.n	800eca4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800ed68:	9b00      	ldr	r3, [sp, #0]
 800ed6a:	9c08      	ldr	r4, [sp, #32]
 800ed6c:	444b      	add	r3, r9
 800ed6e:	4544      	cmp	r4, r8
 800ed70:	9300      	str	r3, [sp, #0]
 800ed72:	d188      	bne.n	800ec86 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800ed74:	b021      	add	sp, #132	@ 0x84
 800ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7a:	f04f 35ff 	mov.w	r5, #4294967295
 800ed7e:	e767      	b.n	800ec50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ed80:	24025378 	.word	0x24025378
 800ed84:	08023f88 	.word	0x08023f88

0800ed88 <_ZN8touchgfx4RectaNERKS0_>:
 800ed88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed8c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ed90:	888c      	ldrh	r4, [r1, #4]
 800ed92:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ed96:	443c      	add	r4, r7
 800ed98:	b2a4      	uxth	r4, r4
 800ed9a:	fa0f f884 	sxth.w	r8, r4
 800ed9e:	45c1      	cmp	r9, r8
 800eda0:	da2f      	bge.n	800ee02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eda2:	8882      	ldrh	r2, [r0, #4]
 800eda4:	444a      	add	r2, r9
 800eda6:	b292      	uxth	r2, r2
 800eda8:	fa0f fe82 	sxth.w	lr, r2
 800edac:	4577      	cmp	r7, lr
 800edae:	da28      	bge.n	800ee02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800edb0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800edb4:	88cb      	ldrh	r3, [r1, #6]
 800edb6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800edba:	442b      	add	r3, r5
 800edbc:	b21b      	sxth	r3, r3
 800edbe:	429e      	cmp	r6, r3
 800edc0:	da1f      	bge.n	800ee02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800edc2:	88c3      	ldrh	r3, [r0, #6]
 800edc4:	4433      	add	r3, r6
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	fa0f fc83 	sxth.w	ip, r3
 800edcc:	4565      	cmp	r5, ip
 800edce:	da18      	bge.n	800ee02 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800edd0:	454f      	cmp	r7, r9
 800edd2:	bfb8      	it	lt
 800edd4:	464f      	movlt	r7, r9
 800edd6:	42b5      	cmp	r5, r6
 800edd8:	bfb8      	it	lt
 800edda:	4635      	movlt	r5, r6
 800eddc:	45f0      	cmp	r8, lr
 800edde:	bfd8      	it	le
 800ede0:	4622      	movle	r2, r4
 800ede2:	1bd2      	subs	r2, r2, r7
 800ede4:	8082      	strh	r2, [r0, #4]
 800ede6:	884a      	ldrh	r2, [r1, #2]
 800ede8:	88c9      	ldrh	r1, [r1, #6]
 800edea:	8007      	strh	r7, [r0, #0]
 800edec:	440a      	add	r2, r1
 800edee:	8045      	strh	r5, [r0, #2]
 800edf0:	b292      	uxth	r2, r2
 800edf2:	b211      	sxth	r1, r2
 800edf4:	458c      	cmp	ip, r1
 800edf6:	bfa8      	it	ge
 800edf8:	4613      	movge	r3, r2
 800edfa:	1b5b      	subs	r3, r3, r5
 800edfc:	80c3      	strh	r3, [r0, #6]
 800edfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee02:	2300      	movs	r3, #0
 800ee04:	8003      	strh	r3, [r0, #0]
 800ee06:	8043      	strh	r3, [r0, #2]
 800ee08:	8083      	strh	r3, [r0, #4]
 800ee0a:	80c3      	strh	r3, [r0, #6]
 800ee0c:	e7f7      	b.n	800edfe <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ee0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	dd06      	ble.n	800ee24 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ee16:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	bfcc      	ite	gt
 800ee1e:	2000      	movgt	r0, #0
 800ee20:	2001      	movle	r0, #1
 800ee22:	4770      	bx	lr
 800ee24:	2001      	movs	r0, #1
 800ee26:	4770      	bx	lr

0800ee28 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ee28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	4604      	mov	r4, r0
 800ee30:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ee32:	8003      	strh	r3, [r0, #0]
 800ee34:	8043      	strh	r3, [r0, #2]
 800ee36:	8083      	strh	r3, [r0, #4]
 800ee38:	80c3      	strh	r3, [r0, #6]
 800ee3a:	2d00      	cmp	r5, #0
 800ee3c:	d040      	beq.n	800eec0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ee3e:	1d28      	adds	r0, r5, #4
 800ee40:	f7ff ffe5 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee44:	b988      	cbnz	r0, 800ee6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ee46:	4620      	mov	r0, r4
 800ee48:	f7ff ffe1 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee4c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ee50:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ee54:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ee58:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ee5c:	b138      	cbz	r0, 800ee6e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ee5e:	8022      	strh	r2, [r4, #0]
 800ee60:	8063      	strh	r3, [r4, #2]
 800ee62:	f8a4 e004 	strh.w	lr, [r4, #4]
 800ee66:	f8a4 c006 	strh.w	ip, [r4, #6]
 800ee6a:	69ad      	ldr	r5, [r5, #24]
 800ee6c:	e7e5      	b.n	800ee3a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800ee6e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800ee72:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800ee76:	4290      	cmp	r0, r2
 800ee78:	4607      	mov	r7, r0
 800ee7a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800ee7e:	460e      	mov	r6, r1
 800ee80:	bfa8      	it	ge
 800ee82:	4617      	movge	r7, r2
 800ee84:	4299      	cmp	r1, r3
 800ee86:	4472      	add	r2, lr
 800ee88:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800ee8c:	bfa8      	it	ge
 800ee8e:	461e      	movge	r6, r3
 800ee90:	4440      	add	r0, r8
 800ee92:	4471      	add	r1, lr
 800ee94:	4463      	add	r3, ip
 800ee96:	b200      	sxth	r0, r0
 800ee98:	8027      	strh	r7, [r4, #0]
 800ee9a:	b212      	sxth	r2, r2
 800ee9c:	8066      	strh	r6, [r4, #2]
 800ee9e:	b209      	sxth	r1, r1
 800eea0:	b21b      	sxth	r3, r3
 800eea2:	4290      	cmp	r0, r2
 800eea4:	bfac      	ite	ge
 800eea6:	ebc7 0200 	rsbge	r2, r7, r0
 800eeaa:	ebc7 0202 	rsblt	r2, r7, r2
 800eeae:	4299      	cmp	r1, r3
 800eeb0:	bfac      	ite	ge
 800eeb2:	ebc6 0301 	rsbge	r3, r6, r1
 800eeb6:	ebc6 0303 	rsblt	r3, r6, r3
 800eeba:	80a2      	strh	r2, [r4, #4]
 800eebc:	80e3      	strh	r3, [r4, #6]
 800eebe:	e7d4      	b.n	800ee6a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800eec0:	4620      	mov	r0, r4
 800eec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eec6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800eec6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800eeca:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800eece:	b383      	cbz	r3, 800ef32 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800eed0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800eed2:	b374      	cbz	r4, 800ef32 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800eed4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800eed8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800eedc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800eee0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800eee4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800eee8:	b303      	cbz	r3, 800ef2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800eeea:	4668      	mov	r0, sp
 800eeec:	1d21      	adds	r1, r4, #4
 800eeee:	f8ad 5000 	strh.w	r5, [sp]
 800eef2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800eef6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800eefa:	f8ad 8006 	strh.w	r8, [sp, #6]
 800eefe:	f7ff ff43 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 800ef02:	4668      	mov	r0, sp
 800ef04:	f7ff ff83 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef08:	b980      	cbnz	r0, 800ef2c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ef0a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef0e:	4669      	mov	r1, sp
 800ef10:	88a2      	ldrh	r2, [r4, #4]
 800ef12:	4620      	mov	r0, r4
 800ef14:	1a9b      	subs	r3, r3, r2
 800ef16:	88e2      	ldrh	r2, [r4, #6]
 800ef18:	f8ad 3000 	strh.w	r3, [sp]
 800ef1c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ef20:	1a9b      	subs	r3, r3, r2
 800ef22:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	4798      	blx	r3
 800ef2c:	69a4      	ldr	r4, [r4, #24]
 800ef2e:	2c00      	cmp	r4, #0
 800ef30:	d1d8      	bne.n	800eee4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ef32:	b002      	add	sp, #8
 800ef34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef38 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ef38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef3a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800ef3e:	460d      	mov	r5, r1
 800ef40:	4616      	mov	r6, r2
 800ef42:	b323      	cbz	r3, 800ef8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ef44:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ef46:	b314      	cbz	r4, 800ef8e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ef48:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ef4c:	b1eb      	cbz	r3, 800ef8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ef4e:	6828      	ldr	r0, [r5, #0]
 800ef50:	466b      	mov	r3, sp
 800ef52:	6869      	ldr	r1, [r5, #4]
 800ef54:	c303      	stmia	r3!, {r0, r1}
 800ef56:	4668      	mov	r0, sp
 800ef58:	1d21      	adds	r1, r4, #4
 800ef5a:	f7ff ff15 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 800ef5e:	4668      	mov	r0, sp
 800ef60:	f7ff ff55 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef64:	b988      	cbnz	r0, 800ef8a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ef66:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef6a:	4669      	mov	r1, sp
 800ef6c:	88a2      	ldrh	r2, [r4, #4]
 800ef6e:	4620      	mov	r0, r4
 800ef70:	1a9b      	subs	r3, r3, r2
 800ef72:	88e2      	ldrh	r2, [r4, #6]
 800ef74:	f8ad 3000 	strh.w	r3, [sp]
 800ef78:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ef7c:	1a9b      	subs	r3, r3, r2
 800ef7e:	4632      	mov	r2, r6
 800ef80:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ef84:	6823      	ldr	r3, [r4, #0]
 800ef86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef88:	4798      	blx	r3
 800ef8a:	69a4      	ldr	r4, [r4, #24]
 800ef8c:	e7db      	b.n	800ef46 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800ef8e:	b002      	add	sp, #8
 800ef90:	bd70      	pop	{r4, r5, r6, pc}

0800ef92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800ef92:	6803      	ldr	r3, [r0, #0]
 800ef94:	b513      	push	{r0, r1, r4, lr}
 800ef96:	f8d3 40b4 	ldr.w	r4, [r3, #180]	@ 0xb4
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	e9cd 3300 	strd	r3, r3, [sp]
 800efa0:	466b      	mov	r3, sp
 800efa2:	47a0      	blx	r4
 800efa4:	b002      	add	sp, #8
 800efa6:	bd10      	pop	{r4, pc}

0800efa8 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800efa8:	2301      	movs	r3, #1
 800efaa:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800efae:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800efb2:	4770      	bx	lr

0800efb4 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800efb4:	2301      	movs	r3, #1
 800efb6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800efba:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800efbe:	4770      	bx	lr

0800efc0 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800efc0:	6843      	ldr	r3, [r0, #4]
 800efc2:	2201      	movs	r2, #1
 800efc4:	725a      	strb	r2, [r3, #9]
 800efc6:	6840      	ldr	r0, [r0, #4]
 800efc8:	6803      	ldr	r3, [r0, #0]
 800efca:	691b      	ldr	r3, [r3, #16]
 800efcc:	4718      	bx	r3

0800efce <_ZN8touchgfx3HAL8flushDMAEv>:
 800efce:	6840      	ldr	r0, [r0, #4]
 800efd0:	6803      	ldr	r3, [r0, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	4718      	bx	r3

0800efd6 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800efd6:	b530      	push	{r4, r5, lr}
 800efd8:	b08b      	sub	sp, #44	@ 0x2c
 800efda:	6804      	ldr	r4, [r0, #0]
 800efdc:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800efe0:	9509      	str	r5, [sp, #36]	@ 0x24
 800efe2:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800efe6:	9508      	str	r5, [sp, #32]
 800efe8:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800efec:	9507      	str	r5, [sp, #28]
 800efee:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800eff2:	9506      	str	r5, [sp, #24]
 800eff4:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800eff8:	9505      	str	r5, [sp, #20]
 800effa:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800effe:	9504      	str	r5, [sp, #16]
 800f000:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800f004:	9503      	str	r5, [sp, #12]
 800f006:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800f00a:	9502      	str	r5, [sp, #8]
 800f00c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800f010:	e9cd 3500 	strd	r3, r5, [sp]
 800f014:	4613      	mov	r3, r2
 800f016:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 800f018:	2200      	movs	r2, #0
 800f01a:	47a0      	blx	r4
 800f01c:	b00b      	add	sp, #44	@ 0x2c
 800f01e:	bd30      	pop	{r4, r5, pc}

0800f020 <_ZN8touchgfx3HAL10beginFrameEv>:
 800f020:	4b04      	ldr	r3, [pc, #16]	@ (800f034 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	b123      	cbz	r3, 800f030 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f026:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800f02a:	f080 0001 	eor.w	r0, r0, #1
 800f02e:	4770      	bx	lr
 800f030:	2001      	movs	r0, #1
 800f032:	4770      	bx	lr
 800f034:	24025376 	.word	0x24025376

0800f038 <_ZN8touchgfx3HAL8endFrameEv>:
 800f038:	b510      	push	{r4, lr}
 800f03a:	4604      	mov	r4, r0
 800f03c:	6840      	ldr	r0, [r0, #4]
 800f03e:	6803      	ldr	r3, [r0, #0]
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	4798      	blx	r3
 800f044:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800f048:	b113      	cbz	r3, 800f050 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f04a:	2301      	movs	r3, #1
 800f04c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f050:	bd10      	pop	{r4, pc}

0800f052 <_ZN8touchgfx3HAL10initializeEv>:
 800f052:	b510      	push	{r4, lr}
 800f054:	4604      	mov	r4, r0
 800f056:	f7f3 ff3f 	bl	8002ed8 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f05a:	f7f2 ff85 	bl	8001f68 <_ZN8touchgfx4GPIO4initEv>
 800f05e:	6860      	ldr	r0, [r4, #4]
 800f060:	6803      	ldr	r3, [r0, #0]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	4798      	blx	r3
 800f066:	68e0      	ldr	r0, [r4, #12]
 800f068:	6803      	ldr	r3, [r0, #0]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	4798      	blx	r3
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	4620      	mov	r0, r4
 800f072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f078:	4718      	bx	r3
	...

0800f07c <_ZN8touchgfx3HAL4tickEv>:
 800f07c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f07e:	6803      	ldr	r3, [r0, #0]
 800f080:	4604      	mov	r4, r0
 800f082:	4d62      	ldr	r5, [pc, #392]	@ (800f20c <_ZN8touchgfx3HAL4tickEv+0x190>)
 800f084:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f088:	4798      	blx	r3
 800f08a:	2800      	cmp	r0, #0
 800f08c:	f000 809e 	beq.w	800f1cc <_ZN8touchgfx3HAL4tickEv+0x150>
 800f090:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f094:	2b02      	cmp	r3, #2
 800f096:	d002      	beq.n	800f09e <_ZN8touchgfx3HAL4tickEv+0x22>
 800f098:	2001      	movs	r0, #1
 800f09a:	f7f2 fecb 	bl	8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f09e:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f0a8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800f0ac:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800f0b0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800f0b4:	b133      	cbz	r3, 800f0c4 <_ZN8touchgfx3HAL4tickEv+0x48>
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800f0be:	4798      	blx	r3
 800f0c0:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f0c4:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800f0c8:	2601      	movs	r6, #1
 800f0ca:	6862      	ldr	r2, [r4, #4]
 800f0cc:	f083 0301 	eor.w	r3, r3, #1
 800f0d0:	702e      	strb	r6, [r5, #0]
 800f0d2:	7253      	strb	r3, [r2, #9]
 800f0d4:	f005 faca 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 800f0d8:	6803      	ldr	r3, [r0, #0]
 800f0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0dc:	4798      	blx	r3
 800f0de:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f0e2:	b90b      	cbnz	r3, 800f0e8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800f0e4:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800f0e8:	f005 fac0 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 800f0ec:	6803      	ldr	r3, [r0, #0]
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	4798      	blx	r3
 800f0f2:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f0f4:	6803      	ldr	r3, [r0, #0]
 800f0f6:	691b      	ldr	r3, [r3, #16]
 800f0f8:	4798      	blx	r3
 800f0fa:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f0fe:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800f102:	3b01      	subs	r3, #1
 800f104:	b2db      	uxtb	r3, r3
 800f106:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f10a:	b10a      	cbz	r2, 800f110 <_ZN8touchgfx3HAL4tickEv+0x94>
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1eb      	bne.n	800f0e8 <_ZN8touchgfx3HAL4tickEv+0x6c>
 800f110:	4a3f      	ldr	r2, [pc, #252]	@ (800f210 <_ZN8touchgfx3HAL4tickEv+0x194>)
 800f112:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800f116:	7813      	ldrb	r3, [r2, #0]
 800f118:	3301      	adds	r3, #1
 800f11a:	b25b      	sxtb	r3, r3
 800f11c:	4299      	cmp	r1, r3
 800f11e:	7013      	strb	r3, [r2, #0]
 800f120:	dc10      	bgt.n	800f144 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f122:	2300      	movs	r3, #0
 800f124:	68e0      	ldr	r0, [r4, #12]
 800f126:	a902      	add	r1, sp, #8
 800f128:	7013      	strb	r3, [r2, #0]
 800f12a:	aa03      	add	r2, sp, #12
 800f12c:	6803      	ldr	r3, [r0, #0]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	4798      	blx	r3
 800f132:	6823      	ldr	r3, [r4, #0]
 800f134:	2800      	cmp	r0, #0
 800f136:	d059      	beq.n	800f1ec <_ZN8touchgfx3HAL4tickEv+0x170>
 800f138:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f13c:	4620      	mov	r0, r4
 800f13e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f142:	4798      	blx	r3
 800f144:	2300      	movs	r3, #0
 800f146:	6960      	ldr	r0, [r4, #20]
 800f148:	f88d 3007 	strb.w	r3, [sp, #7]
 800f14c:	b158      	cbz	r0, 800f166 <_ZN8touchgfx3HAL4tickEv+0xea>
 800f14e:	6803      	ldr	r3, [r0, #0]
 800f150:	f10d 0107 	add.w	r1, sp, #7
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	4798      	blx	r3
 800f158:	b128      	cbz	r0, 800f166 <_ZN8touchgfx3HAL4tickEv+0xea>
 800f15a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f15c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f160:	6803      	ldr	r3, [r0, #0]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	4798      	blx	r3
 800f166:	f104 001c 	add.w	r0, r4, #28
 800f16a:	f012 fd3f 	bl	8021bec <_ZN8touchgfx8Gestures4tickEv>
 800f16e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800f172:	b30b      	cbz	r3, 800f1b8 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800f174:	6920      	ldr	r0, [r4, #16]
 800f176:	6803      	ldr	r3, [r0, #0]
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	4798      	blx	r3
 800f17c:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f17e:	4606      	mov	r6, r0
 800f180:	b903      	cbnz	r3, 800f184 <_ZN8touchgfx3HAL4tickEv+0x108>
 800f182:	6760      	str	r0, [r4, #116]	@ 0x74
 800f184:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f186:	4a23      	ldr	r2, [pc, #140]	@ (800f214 <_ZN8touchgfx3HAL4tickEv+0x198>)
 800f188:	1af3      	subs	r3, r6, r3
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d914      	bls.n	800f1b8 <_ZN8touchgfx3HAL4tickEv+0x13c>
 800f18e:	6920      	ldr	r0, [r4, #16]
 800f190:	6803      	ldr	r3, [r0, #0]
 800f192:	699b      	ldr	r3, [r3, #24]
 800f194:	4798      	blx	r3
 800f196:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f198:	2264      	movs	r2, #100	@ 0x64
 800f19a:	1af3      	subs	r3, r6, r3
 800f19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1a0:	fbb0 f0f3 	udiv	r0, r0, r3
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	dc26      	bgt.n	800f1f6 <_ZN8touchgfx3HAL4tickEv+0x17a>
 800f1a8:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800f1ac:	6920      	ldr	r0, [r4, #16]
 800f1ae:	2100      	movs	r1, #0
 800f1b0:	6803      	ldr	r3, [r0, #0]
 800f1b2:	69db      	ldr	r3, [r3, #28]
 800f1b4:	4798      	blx	r3
 800f1b6:	6766      	str	r6, [r4, #116]	@ 0x74
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800f1c0:	4798      	blx	r3
 800f1c2:	f005 fa53 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 800f1c6:	6803      	ldr	r3, [r0, #0]
 800f1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1ca:	4798      	blx	r3
 800f1cc:	6823      	ldr	r3, [r4, #0]
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f1d4:	4798      	blx	r3
 800f1d6:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d002      	beq.n	800f1e4 <_ZN8touchgfx3HAL4tickEv+0x168>
 800f1de:	2001      	movs	r0, #1
 800f1e0:	f7f2 fe58 	bl	8001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	702b      	strb	r3, [r5, #0]
 800f1e8:	b004      	add	sp, #16
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}
 800f1ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	4798      	blx	r3
 800f1f4:	e7a6      	b.n	800f144 <_ZN8touchgfx3HAL4tickEv+0xc8>
 800f1f6:	2863      	cmp	r0, #99	@ 0x63
 800f1f8:	bfcb      	itete	gt
 800f1fa:	2300      	movgt	r3, #0
 800f1fc:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800f200:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800f204:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800f208:	e7d0      	b.n	800f1ac <_ZN8touchgfx3HAL4tickEv+0x130>
 800f20a:	bf00      	nop
 800f20c:	2402537c 	.word	0x2402537c
 800f210:	2402537d 	.word	0x2402537d
 800f214:	05f5e100 	.word	0x05f5e100

0800f218 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f218:	b510      	push	{r4, lr}
 800f21a:	4604      	mov	r4, r0
 800f21c:	f7f3 fe8c 	bl	8002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800f220:	2200      	movs	r2, #0
 800f222:	6863      	ldr	r3, [r4, #4]
 800f224:	729a      	strb	r2, [r3, #10]
 800f226:	bd10      	pop	{r4, pc}

0800f228 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f228:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800f22a:	301c      	adds	r0, #28
 800f22c:	f012 bcdc 	b.w	8021be8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f230 <_ZN8touchgfx3HAL5touchEll>:
 800f230:	b530      	push	{r4, r5, lr}
 800f232:	b087      	sub	sp, #28
 800f234:	4604      	mov	r4, r0
 800f236:	a804      	add	r0, sp, #16
 800f238:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f23c:	f004 ffe2 	bl	8014204 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f240:	9b04      	ldr	r3, [sp, #16]
 800f242:	a906      	add	r1, sp, #24
 800f244:	a803      	add	r0, sp, #12
 800f246:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f24a:	9b05      	ldr	r3, [sp, #20]
 800f24c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f250:	f005 f82a 	bl	80142a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f254:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800f258:	f104 001c 	add.w	r0, r4, #28
 800f25c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f260:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f264:	b189      	cbz	r1, 800f28a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f266:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	4613      	mov	r3, r2
 800f26e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800f272:	462a      	mov	r2, r5
 800f274:	f012 fcc8 	bl	8021c08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f278:	b128      	cbz	r0, 800f286 <_ZN8touchgfx3HAL5touchEll+0x56>
 800f27a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f27e:	6623      	str	r3, [r4, #96]	@ 0x60
 800f280:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f284:	6663      	str	r3, [r4, #100]	@ 0x64
 800f286:	b007      	add	sp, #28
 800f288:	bd30      	pop	{r4, r5, pc}
 800f28a:	f012 fcfd 	bl	8021c88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f28e:	2301      	movs	r3, #1
 800f290:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f294:	e7f1      	b.n	800f27a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f296 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f296:	b510      	push	{r4, lr}
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d046      	beq.n	800f32a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f29c:	ea81 0002 	eor.w	r0, r1, r2
 800f2a0:	07c4      	lsls	r4, r0, #31
 800f2a2:	d508      	bpl.n	800f2b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f2a4:	440b      	add	r3, r1
 800f2a6:	3a01      	subs	r2, #1
 800f2a8:	428b      	cmp	r3, r1
 800f2aa:	d93e      	bls.n	800f32a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f2ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f2b0:	f801 0b01 	strb.w	r0, [r1], #1
 800f2b4:	e7f8      	b.n	800f2a8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f2b6:	07d0      	lsls	r0, r2, #31
 800f2b8:	bf42      	ittt	mi
 800f2ba:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f2be:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f2c2:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d911      	bls.n	800f2ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f2ca:	ea81 0402 	eor.w	r4, r1, r2
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	07a4      	lsls	r4, r4, #30
 800f2d2:	d022      	beq.n	800f31a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800f2d4:	f023 0401 	bic.w	r4, r3, #1
 800f2d8:	440c      	add	r4, r1
 800f2da:	428c      	cmp	r4, r1
 800f2dc:	4602      	mov	r2, r0
 800f2de:	d904      	bls.n	800f2ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800f2e0:	8812      	ldrh	r2, [r2, #0]
 800f2e2:	3002      	adds	r0, #2
 800f2e4:	f821 2b02 	strh.w	r2, [r1], #2
 800f2e8:	e7f7      	b.n	800f2da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800f2ea:	f003 0301 	and.w	r3, r3, #1
 800f2ee:	f023 0003 	bic.w	r0, r3, #3
 800f2f2:	4408      	add	r0, r1
 800f2f4:	4288      	cmp	r0, r1
 800f2f6:	4614      	mov	r4, r2
 800f2f8:	d904      	bls.n	800f304 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800f2fa:	6824      	ldr	r4, [r4, #0]
 800f2fc:	3204      	adds	r2, #4
 800f2fe:	f841 4b04 	str.w	r4, [r1], #4
 800f302:	e7f7      	b.n	800f2f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800f304:	f003 0303 	and.w	r3, r3, #3
 800f308:	3a01      	subs	r2, #1
 800f30a:	440b      	add	r3, r1
 800f30c:	428b      	cmp	r3, r1
 800f30e:	d90c      	bls.n	800f32a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f310:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f314:	f801 0b01 	strb.w	r0, [r1], #1
 800f318:	e7f8      	b.n	800f30c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800f31a:	0790      	lsls	r0, r2, #30
 800f31c:	d0e7      	beq.n	800f2ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f31e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f322:	3b02      	subs	r3, #2
 800f324:	f821 0b02 	strh.w	r0, [r1], #2
 800f328:	e7e1      	b.n	800f2ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f32a:	2001      	movs	r0, #1
 800f32c:	bd10      	pop	{r4, pc}

0800f32e <_ZN8touchgfx3HAL7noTouchEv>:
 800f32e:	b510      	push	{r4, lr}
 800f330:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800f334:	4604      	mov	r4, r0
 800f336:	b153      	cbz	r3, 800f34e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f338:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800f33c:	2101      	movs	r1, #1
 800f33e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800f342:	301c      	adds	r0, #28
 800f344:	f012 fca0 	bl	8021c88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f348:	2300      	movs	r3, #0
 800f34a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f34e:	bd10      	pop	{r4, pc}

0800f350 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f354:	b085      	sub	sp, #20
 800f356:	4604      	mov	r4, r0
 800f358:	2000      	movs	r0, #0
 800f35a:	4699      	mov	r9, r3
 800f35c:	ad04      	add	r5, sp, #16
 800f35e:	460f      	mov	r7, r1
 800f360:	4690      	mov	r8, r2
 800f362:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f366:	69a0      	ldr	r0, [r4, #24]
 800f368:	6806      	ldr	r6, [r0, #0]
 800f36a:	9501      	str	r5, [sp, #4]
 800f36c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800f370:	9500      	str	r5, [sp, #0]
 800f372:	6835      	ldr	r5, [r6, #0]
 800f374:	47a8      	blx	r5
 800f376:	4d10      	ldr	r5, [pc, #64]	@ (800f3b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800f378:	4606      	mov	r6, r0
 800f37a:	f8a5 9000 	strh.w	r9, [r5]
 800f37e:	f7f4 ff8b 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f382:	6803      	ldr	r3, [r0, #0]
 800f384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f386:	4798      	blx	r3
 800f388:	b128      	cbz	r0, 800f396 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800f38a:	2801      	cmp	r0, #1
 800f38c:	d00b      	beq.n	800f3a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800f38e:	4630      	mov	r0, r6
 800f390:	b005      	add	sp, #20
 800f392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f396:	882b      	ldrh	r3, [r5, #0]
 800f398:	fb08 7203 	mla	r2, r8, r3, r7
 800f39c:	9b03      	ldr	r3, [sp, #12]
 800f39e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f3a2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f3a4:	e7f3      	b.n	800f38e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f3a6:	882a      	ldrh	r2, [r5, #0]
 800f3a8:	9b03      	ldr	r3, [sp, #12]
 800f3aa:	fb08 7202 	mla	r2, r8, r2, r7
 800f3ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f3b2:	1a9a      	subs	r2, r3, r2
 800f3b4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800f3b6:	e7ea      	b.n	800f38e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f3b8:	24025372 	.word	0x24025372

0800f3bc <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs>:
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3be:	4b15      	ldr	r3, [pc, #84]	@ (800f414 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x58>)
 800f3c0:	460f      	mov	r7, r1
 800f3c2:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
 800f3c6:	4606      	mov	r6, r0
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800f3cc:	fb93 f4f4 	sdiv	r4, r3, r4
 800f3d0:	f7f4 ff62 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f3d4:	6803      	ldr	r3, [r0, #0]
 800f3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3d8:	4798      	blx	r3
 800f3da:	2801      	cmp	r0, #1
 800f3dc:	d00b      	beq.n	800f3f6 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x3a>
 800f3de:	d303      	bcc.n	800f3e8 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x2c>
 800f3e0:	2802      	cmp	r0, #2
 800f3e2:	d010      	beq.n	800f406 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x4a>
 800f3e4:	63f5      	str	r5, [r6, #60]	@ 0x3c
 800f3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f418 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f3ea:	437c      	muls	r4, r7
 800f3ec:	8819      	ldrh	r1, [r3, #0]
 800f3ee:	434c      	muls	r4, r1
 800f3f0:	eba5 0544 	sub.w	r5, r5, r4, lsl #1
 800f3f4:	e7f6      	b.n	800f3e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f3f6:	4b08      	ldr	r3, [pc, #32]	@ (800f418 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f3f8:	437c      	muls	r4, r7
 800f3fa:	8819      	ldrh	r1, [r3, #0]
 800f3fc:	434c      	muls	r4, r1
 800f3fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f402:	1b2d      	subs	r5, r5, r4
 800f404:	e7ee      	b.n	800f3e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f406:	4b04      	ldr	r3, [pc, #16]	@ (800f418 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x5c>)
 800f408:	437c      	muls	r4, r7
 800f40a:	8819      	ldrh	r1, [r3, #0]
 800f40c:	434c      	muls	r4, r1
 800f40e:	eba5 0584 	sub.w	r5, r5, r4, lsl #2
 800f412:	e7e7      	b.n	800f3e4 <_ZN8touchgfx3HAL31configurePartialFrameBufferLTDCEs+0x28>
 800f414:	24025374 	.word	0x24025374
 800f418:	24025372 	.word	0x24025372

0800f41c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41e:	b08b      	sub	sp, #44	@ 0x2c
 800f420:	4617      	mov	r7, r2
 800f422:	4604      	mov	r4, r0
 800f424:	460e      	mov	r6, r1
 800f426:	461d      	mov	r5, r3
 800f428:	f7f4 ff36 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f42c:	6803      	ldr	r3, [r0, #0]
 800f42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f430:	4798      	blx	r3
 800f432:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f436:	9007      	str	r0, [sp, #28]
 800f438:	4631      	mov	r1, r6
 800f43a:	6822      	ldr	r2, [r4, #0]
 800f43c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f440:	4b0c      	ldr	r3, [pc, #48]	@ (800f474 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800f442:	4620      	mov	r0, r4
 800f444:	881b      	ldrh	r3, [r3, #0]
 800f446:	9306      	str	r3, [sp, #24]
 800f448:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f44c:	9305      	str	r3, [sp, #20]
 800f44e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800f452:	9304      	str	r3, [sp, #16]
 800f454:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f458:	9303      	str	r3, [sp, #12]
 800f45a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f45e:	9302      	str	r3, [sp, #8]
 800f460:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f464:	e9cd 5300 	strd	r5, r3, [sp]
 800f468:	463b      	mov	r3, r7
 800f46a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800f46c:	2200      	movs	r2, #0
 800f46e:	47a8      	blx	r5
 800f470:	b00b      	add	sp, #44	@ 0x2c
 800f472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f474:	24025372 	.word	0x24025372

0800f478 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800f478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f47c:	4698      	mov	r8, r3
 800f47e:	6803      	ldr	r3, [r0, #0]
 800f480:	b08b      	sub	sp, #44	@ 0x2c
 800f482:	4617      	mov	r7, r2
 800f484:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f486:	460e      	mov	r6, r1
 800f488:	4b13      	ldr	r3, [pc, #76]	@ (800f4d8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800f48a:	4604      	mov	r4, r0
 800f48c:	f8b3 9000 	ldrh.w	r9, [r3]
 800f490:	f7f4 ff02 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f494:	6803      	ldr	r3, [r0, #0]
 800f496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f498:	4798      	blx	r3
 800f49a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f49e:	2200      	movs	r2, #0
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	9305      	str	r3, [sp, #20]
 800f4b2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f4b6:	9304      	str	r3, [sp, #16]
 800f4b8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f4bc:	9303      	str	r3, [sp, #12]
 800f4be:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f4c2:	9302      	str	r3, [sp, #8]
 800f4c4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f4c8:	e9cd 8300 	strd	r8, r3, [sp]
 800f4cc:	463b      	mov	r3, r7
 800f4ce:	47a8      	blx	r5
 800f4d0:	b00b      	add	sp, #44	@ 0x2c
 800f4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4d6:	bf00      	nop
 800f4d8:	24025372 	.word	0x24025372

0800f4dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800f4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4e0:	4698      	mov	r8, r3
 800f4e2:	6803      	ldr	r3, [r0, #0]
 800f4e4:	b087      	sub	sp, #28
 800f4e6:	460e      	mov	r6, r1
 800f4e8:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800f4ea:	4617      	mov	r7, r2
 800f4ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f52c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	f8b3 9000 	ldrh.w	r9, [r3]
 800f4f4:	f7f4 fed0 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f4f8:	6803      	ldr	r3, [r0, #0]
 800f4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fc:	4798      	blx	r3
 800f4fe:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800f502:	463a      	mov	r2, r7
 800f504:	4631      	mov	r1, r6
 800f506:	f8cd 900c 	str.w	r9, [sp, #12]
 800f50a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800f50e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800f512:	4620      	mov	r0, r4
 800f514:	9302      	str	r3, [sp, #8]
 800f516:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800f51a:	9301      	str	r3, [sp, #4]
 800f51c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	4643      	mov	r3, r8
 800f524:	47a8      	blx	r5
 800f526:	b007      	add	sp, #28
 800f528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f52c:	24025372 	.word	0x24025372

0800f530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	4604      	mov	r4, r0
 800f536:	b08f      	sub	sp, #60	@ 0x3c
 800f538:	4610      	mov	r0, r2
 800f53a:	460d      	mov	r5, r1
 800f53c:	4691      	mov	r9, r2
 800f53e:	461e      	mov	r6, r3
 800f540:	f008 fa06 	bl	8017950 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f544:	2800      	cmp	r0, #0
 800f546:	f000 809d 	beq.w	800f684 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	4620      	mov	r0, r4
 800f54e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800f6e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800f552:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f558:	4798      	blx	r3
 800f55a:	6823      	ldr	r3, [r4, #0]
 800f55c:	4620      	mov	r0, r4
 800f55e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800f6ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800f562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f564:	4798      	blx	r3
 800f566:	f8bb 3000 	ldrh.w	r3, [fp]
 800f56a:	4f5c      	ldr	r7, [pc, #368]	@ (800f6dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f56c:	9301      	str	r3, [sp, #4]
 800f56e:	f8ba 3000 	ldrh.w	r3, [sl]
 800f572:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800f576:	4640      	mov	r0, r8
 800f578:	9302      	str	r3, [sp, #8]
 800f57a:	883b      	ldrh	r3, [r7, #0]
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	4b58      	ldr	r3, [pc, #352]	@ (800f6e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f580:	881a      	ldrh	r2, [r3, #0]
 800f582:	9305      	str	r3, [sp, #20]
 800f584:	9204      	str	r2, [sp, #16]
 800f586:	f008 fb33 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f58a:	8038      	strh	r0, [r7, #0]
 800f58c:	4640      	mov	r0, r8
 800f58e:	f008 fb63 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f592:	9b05      	ldr	r3, [sp, #20]
 800f594:	b280      	uxth	r0, r0
 800f596:	8018      	strh	r0, [r3, #0]
 800f598:	4b52      	ldr	r3, [pc, #328]	@ (800f6e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d174      	bne.n	800f68a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800f5a0:	883b      	ldrh	r3, [r7, #0]
 800f5a2:	f8aa 0000 	strh.w	r0, [sl]
 800f5a6:	f8ab 3000 	strh.w	r3, [fp]
 800f5aa:	4648      	mov	r0, r9
 800f5ac:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800f5b0:	f008 f9ce 	bl	8017950 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	4628      	mov	r0, r5
 800f5be:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800f5c2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800f5c6:	f7f4 ff90 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800f5d0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f5d4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	dd5c      	ble.n	800f696 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f5dc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	dd58      	ble.n	800f696 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f5e8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f5ec:	6851      	ldr	r1, [r2, #4]
 800f5ee:	c303      	stmia	r3!, {r0, r1}
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	a80a      	add	r0, sp, #40	@ 0x28
 800f5f4:	f7ff fbc8 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 800f5f8:	4b38      	ldr	r3, [pc, #224]	@ (800f6dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f600:	4b37      	ldr	r3, [pc, #220]	@ (800f6e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f602:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800f606:	aa0a      	add	r2, sp, #40	@ 0x28
 800f608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f60c:	910c      	str	r1, [sp, #48]	@ 0x30
 800f60e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f612:	ab08      	add	r3, sp, #32
 800f614:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f618:	e883 0003 	stmia.w	r3, {r0, r1}
 800f61c:	4618      	mov	r0, r3
 800f61e:	a90c      	add	r1, sp, #48	@ 0x30
 800f620:	f7ff fbb2 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 800f624:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f626:	2b00      	cmp	r3, #0
 800f628:	d13c      	bne.n	800f6a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800f62a:	2000      	movs	r0, #0
 800f62c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800f630:	2600      	movs	r6, #0
 800f632:	696b      	ldr	r3, [r5, #20]
 800f634:	a908      	add	r1, sp, #32
 800f636:	682a      	ldr	r2, [r5, #0]
 800f638:	4628      	mov	r0, r5
 800f63a:	9305      	str	r3, [sp, #20]
 800f63c:	616e      	str	r6, [r5, #20]
 800f63e:	6892      	ldr	r2, [r2, #8]
 800f640:	4790      	blx	r2
 800f642:	9b05      	ldr	r3, [sp, #20]
 800f644:	4652      	mov	r2, sl
 800f646:	4649      	mov	r1, r9
 800f648:	616b      	str	r3, [r5, #20]
 800f64a:	4628      	mov	r0, r5
 800f64c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800f650:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800f654:	f7f4 ff49 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
 800f658:	9a01      	ldr	r2, [sp, #4]
 800f65a:	4b23      	ldr	r3, [pc, #140]	@ (800f6e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800f65c:	4620      	mov	r0, r4
 800f65e:	801a      	strh	r2, [r3, #0]
 800f660:	9a02      	ldr	r2, [sp, #8]
 800f662:	4b22      	ldr	r3, [pc, #136]	@ (800f6ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800f664:	801a      	strh	r2, [r3, #0]
 800f666:	9a03      	ldr	r2, [sp, #12]
 800f668:	4b1c      	ldr	r3, [pc, #112]	@ (800f6dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f66a:	801a      	strh	r2, [r3, #0]
 800f66c:	4b1c      	ldr	r3, [pc, #112]	@ (800f6e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f66e:	9a04      	ldr	r2, [sp, #16]
 800f670:	801a      	strh	r2, [r3, #0]
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800f678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67a:	4798      	blx	r3
 800f67c:	6823      	ldr	r3, [r4, #0]
 800f67e:	4620      	mov	r0, r4
 800f680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f682:	4798      	blx	r3
 800f684:	b00f      	add	sp, #60	@ 0x3c
 800f686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68a:	883b      	ldrh	r3, [r7, #0]
 800f68c:	f8ab 0000 	strh.w	r0, [fp]
 800f690:	f8aa 3000 	strh.w	r3, [sl]
 800f694:	e789      	b.n	800f5aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800f696:	462a      	mov	r2, r5
 800f698:	ab0a      	add	r3, sp, #40	@ 0x28
 800f69a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f69e:	6851      	ldr	r1, [r2, #4]
 800f6a0:	c303      	stmia	r3!, {r0, r1}
 800f6a2:	e7a9      	b.n	800f5f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800f6a4:	a807      	add	r0, sp, #28
 800f6a6:	f008 fc19 	bl	8017edc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f6aa:	4606      	mov	r6, r0
 800f6ac:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f6ae:	6803      	ldr	r3, [r0, #0]
 800f6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6b2:	4798      	blx	r3
 800f6b4:	4286      	cmp	r6, r0
 800f6b6:	d1b8      	bne.n	800f62a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800f6b8:	f7f4 fdee 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f6bc:	6803      	ldr	r3, [r0, #0]
 800f6be:	4606      	mov	r6, r0
 800f6c0:	a807      	add	r0, sp, #28
 800f6c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6c4:	9305      	str	r3, [sp, #20]
 800f6c6:	f008 fc09 	bl	8017edc <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f6ca:	9b05      	ldr	r3, [sp, #20]
 800f6cc:	4601      	mov	r1, r0
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	4798      	blx	r3
 800f6d2:	f080 0001 	eor.w	r0, r0, #1
 800f6d6:	b2c0      	uxtb	r0, r0
 800f6d8:	e7a8      	b.n	800f62c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800f6da:	bf00      	nop
 800f6dc:	2402536c 	.word	0x2402536c
 800f6e0:	2402536e 	.word	0x2402536e
 800f6e4:	24025370 	.word	0x24025370
 800f6e8:	24025372 	.word	0x24025372
 800f6ec:	24025374 	.word	0x24025374

0800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f6f0:	4b07      	ldr	r3, [pc, #28]	@ (800f710 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f6f2:	b510      	push	{r4, lr}
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	4604      	mov	r4, r0
 800f6f8:	b13b      	cbz	r3, 800f70a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f6fa:	6803      	ldr	r3, [r0, #0]
 800f6fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6fe:	4798      	blx	r3
 800f700:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f702:	4283      	cmp	r3, r0
 800f704:	d101      	bne.n	800f70a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f706:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800f708:	bd10      	pop	{r4, pc}
 800f70a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f70c:	e7fc      	b.n	800f708 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f70e:	bf00      	nop
 800f710:	24025376 	.word	0x24025376

0800f714 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800f714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f718:	461d      	mov	r5, r3
 800f71a:	b08a      	sub	sp, #40	@ 0x28
 800f71c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f720:	4690      	mov	r8, r2
 800f722:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800f726:	2400      	movs	r4, #0
 800f728:	4607      	mov	r7, r0
 800f72a:	fb06 8505 	mla	r5, r6, r5, r8
 800f72e:	9404      	str	r4, [sp, #16]
 800f730:	f88d 4020 	strb.w	r4, [sp, #32]
 800f734:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f738:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f73c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f740:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f744:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f748:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f74c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f750:	f7ff ffce 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f754:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f75e:	a901      	add	r1, sp, #4
 800f760:	9505      	str	r5, [sp, #20]
 800f762:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f766:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800f76a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f76e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	4798      	blx	r3
 800f778:	b00a      	add	sp, #40	@ 0x28
 800f77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f77e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800f77e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f782:	b08b      	sub	sp, #44	@ 0x2c
 800f784:	2400      	movs	r4, #0
 800f786:	4691      	mov	r9, r2
 800f788:	461d      	mov	r5, r3
 800f78a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800f78e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f792:	4688      	mov	r8, r1
 800f794:	4607      	mov	r7, r0
 800f796:	9404      	str	r4, [sp, #16]
 800f798:	fb06 9505 	mla	r5, r6, r5, r9
 800f79c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7a0:	f7ff ffa6 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f7a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f7a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f7b2:	a901      	add	r1, sp, #4
 800f7b4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f7b8:	9505      	str	r5, [sp, #20]
 800f7ba:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f7be:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f7c2:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f7c6:	f8cd 8010 	str.w	r8, [sp, #16]
 800f7ca:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f7ce:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f7d2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f7d6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f7da:	6803      	ldr	r3, [r0, #0]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	4798      	blx	r3
 800f7e0:	b00b      	add	sp, #44	@ 0x2c
 800f7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f7e8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7ec:	b08a      	sub	sp, #40	@ 0x28
 800f7ee:	4698      	mov	r8, r3
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4606      	mov	r6, r0
 800f7f4:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800f7f8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800f7fc:	2d0b      	cmp	r5, #11
 800f7fe:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800f802:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800f806:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800f80a:	9304      	str	r3, [sp, #16]
 800f80c:	d137      	bne.n	800f87e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800f80e:	2380      	movs	r3, #128	@ 0x80
 800f810:	f88d 0020 	strb.w	r0, [sp, #32]
 800f814:	4630      	mov	r0, r6
 800f816:	9203      	str	r2, [sp, #12]
 800f818:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f81c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f820:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f824:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f828:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f82c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f830:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f834:	f7ff ff5c 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f838:	2c0b      	cmp	r4, #11
 800f83a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f83e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f842:	bf94      	ite	ls
 800f844:	4b19      	ldrls	r3, [pc, #100]	@ (800f8ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800f846:	2100      	movhi	r1, #0
 800f848:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800f84c:	bf98      	it	ls
 800f84e:	5d19      	ldrbls	r1, [r3, r4]
 800f850:	fb02 8307 	mla	r3, r2, r7, r8
 800f854:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f858:	10c9      	asrs	r1, r1, #3
 800f85a:	fb01 0003 	mla	r0, r1, r3, r0
 800f85e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800f862:	a901      	add	r1, sp, #4
 800f864:	9005      	str	r0, [sp, #20]
 800f866:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f86a:	2300      	movs	r3, #0
 800f86c:	6870      	ldr	r0, [r6, #4]
 800f86e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f872:	6803      	ldr	r3, [r0, #0]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	4798      	blx	r3
 800f878:	b00a      	add	sp, #40	@ 0x28
 800f87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87e:	2d02      	cmp	r5, #2
 800f880:	d109      	bne.n	800f896 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800f882:	28ff      	cmp	r0, #255	@ 0xff
 800f884:	d105      	bne.n	800f892 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800f886:	f1bc 0f00 	cmp.w	ip, #0
 800f88a:	bf14      	ite	ne
 800f88c:	2340      	movne	r3, #64	@ 0x40
 800f88e:	2320      	moveq	r3, #32
 800f890:	e7be      	b.n	800f810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f892:	2340      	movs	r3, #64	@ 0x40
 800f894:	e7bc      	b.n	800f810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f896:	28ff      	cmp	r0, #255	@ 0xff
 800f898:	d105      	bne.n	800f8a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800f89a:	f1bc 0f00 	cmp.w	ip, #0
 800f89e:	bf14      	ite	ne
 800f8a0:	2304      	movne	r3, #4
 800f8a2:	2301      	moveq	r3, #1
 800f8a4:	e7b4      	b.n	800f810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f8a6:	2304      	movs	r3, #4
 800f8a8:	e7b2      	b.n	800f810 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f8aa:	bf00      	nop
 800f8ac:	08026b80 	.word	0x08026b80

0800f8b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b4:	b08b      	sub	sp, #44	@ 0x2c
 800f8b6:	461d      	mov	r5, r3
 800f8b8:	2400      	movs	r4, #0
 800f8ba:	4688      	mov	r8, r1
 800f8bc:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800f8c0:	4693      	mov	fp, r2
 800f8c2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800f8c6:	4607      	mov	r7, r0
 800f8c8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800f8cc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800f8d0:	9404      	str	r4, [sp, #16]
 800f8d2:	bf14      	ite	ne
 800f8d4:	2308      	movne	r3, #8
 800f8d6:	2302      	moveq	r3, #2
 800f8d8:	fb05 b50a 	mla	r5, r5, sl, fp
 800f8dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8e0:	f7ff ff06 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f8e4:	2e0b      	cmp	r6, #11
 800f8e6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800f8ea:	a901      	add	r1, sp, #4
 800f8ec:	bf98      	it	ls
 800f8ee:	4b13      	ldrls	r3, [pc, #76]	@ (800f93c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800f8f0:	f8ad a01e 	strh.w	sl, [sp, #30]
 800f8f4:	bf98      	it	ls
 800f8f6:	5d9c      	ldrbls	r4, [r3, r6]
 800f8f8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f8fc:	10e4      	asrs	r4, r4, #3
 800f8fe:	f8cd 8010 	str.w	r8, [sp, #16]
 800f902:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f906:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f90a:	fb04 0405 	mla	r4, r4, r5, r0
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f914:	2300      	movs	r3, #0
 800f916:	9405      	str	r4, [sp, #20]
 800f918:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f91c:	f88d 9020 	strb.w	r9, [sp, #32]
 800f920:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800f924:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f928:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800f92c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800f930:	6803      	ldr	r3, [r0, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	4798      	blx	r3
 800f936:	b00b      	add	sp, #44	@ 0x2c
 800f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f93c:	08026b80 	.word	0x08026b80

0800f940 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	461e      	mov	r6, r3
 800f946:	4b0a      	ldr	r3, [pc, #40]	@ (800f970 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800f948:	460f      	mov	r7, r1
 800f94a:	4690      	mov	r8, r2
 800f94c:	881d      	ldrh	r5, [r3, #0]
 800f94e:	f7f4 fca3 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f952:	6803      	ldr	r3, [r0, #0]
 800f954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f956:	4798      	blx	r3
 800f958:	280b      	cmp	r0, #11
 800f95a:	bf96      	itet	ls
 800f95c:	4b05      	ldrls	r3, [pc, #20]	@ (800f974 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800f95e:	2400      	movhi	r4, #0
 800f960:	5c1c      	ldrbls	r4, [r3, r0]
 800f962:	fb08 7005 	mla	r0, r8, r5, r7
 800f966:	10e4      	asrs	r4, r4, #3
 800f968:	fb04 6000 	mla	r0, r4, r0, r6
 800f96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f970:	24025372 	.word	0x24025372
 800f974:	08026b80 	.word	0x08026b80

0800f978 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800f978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f97a:	b08b      	sub	sp, #44	@ 0x2c
 800f97c:	461f      	mov	r7, r3
 800f97e:	4604      	mov	r4, r0
 800f980:	4616      	mov	r6, r2
 800f982:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f986:	2500      	movs	r5, #0
 800f988:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f98c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f990:	9504      	str	r5, [sp, #16]
 800f992:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f996:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f99a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f99e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f9a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f9a6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f9aa:	f88d 3020 	strb.w	r3, [sp, #32]
 800f9ae:	f7ff fe9f 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f9b2:	463a      	mov	r2, r7
 800f9b4:	4631      	mov	r1, r6
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7ff ffc1 	bl	800f940 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800f9be:	4b0e      	ldr	r3, [pc, #56]	@ (800f9f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800f9c0:	9005      	str	r0, [sp, #20]
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f9c8:	f7f4 fc66 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800f9cc:	6803      	ldr	r3, [r0, #0]
 800f9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9d0:	4798      	blx	r3
 800f9d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f9d4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800f9d8:	a901      	add	r1, sp, #4
 800f9da:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800f9de:	9304      	str	r3, [sp, #16]
 800f9e0:	6860      	ldr	r0, [r4, #4]
 800f9e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f9e6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800f9ea:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f9ee:	6803      	ldr	r3, [r0, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	4798      	blx	r3
 800f9f4:	b00b      	add	sp, #44	@ 0x2c
 800f9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9f8:	24025372 	.word	0x24025372

0800f9fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800f9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9fe:	b08d      	sub	sp, #52	@ 0x34
 800fa00:	2501      	movs	r5, #1
 800fa02:	4604      	mov	r4, r0
 800fa04:	466b      	mov	r3, sp
 800fa06:	9503      	str	r5, [sp, #12]
 800fa08:	e883 0006 	stmia.w	r3, {r1, r2}
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f8bd 6000 	ldrh.w	r6, [sp]
 800fa12:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800fa16:	9306      	str	r3, [sp, #24]
 800fa18:	6803      	ldr	r3, [r0, #0]
 800fa1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa1c:	4798      	blx	r3
 800fa1e:	463a      	mov	r2, r7
 800fa20:	4631      	mov	r1, r6
 800fa22:	4603      	mov	r3, r0
 800fa24:	4620      	mov	r0, r4
 800fa26:	f7ff ff8b 	bl	800f940 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fa2a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fa2c:	9004      	str	r0, [sp, #16]
 800fa2e:	9307      	str	r3, [sp, #28]
 800fa30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fa34:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fa38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fa3c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800fa40:	4b0e      	ldr	r3, [pc, #56]	@ (800fa7c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800fa48:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800fa4c:	f7f4 fc24 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800fa50:	6803      	ldr	r3, [r0, #0]
 800fa52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa54:	4798      	blx	r3
 800fa56:	23ff      	movs	r3, #255	@ 0xff
 800fa58:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800fa5c:	a903      	add	r1, sp, #12
 800fa5e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800fa62:	6860      	ldr	r0, [r4, #4]
 800fa64:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800fa68:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800fa6c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800fa70:	6803      	ldr	r3, [r0, #0]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	4798      	blx	r3
 800fa76:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800fa78:	b00d      	add	sp, #52	@ 0x34
 800fa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa7c:	24025372 	.word	0x24025372

0800fa80 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800fa80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa84:	b08c      	sub	sp, #48	@ 0x30
 800fa86:	461e      	mov	r6, r3
 800fa88:	2300      	movs	r3, #0
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	466d      	mov	r5, sp
 800fa8e:	9306      	str	r3, [sp, #24]
 800fa90:	6803      	ldr	r3, [r0, #0]
 800fa92:	e885 0006 	stmia.w	r5, {r1, r2}
 800fa96:	2501      	movs	r5, #1
 800fa98:	f8bd 7000 	ldrh.w	r7, [sp]
 800fa9c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800faa0:	9503      	str	r5, [sp, #12]
 800faa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faa4:	4798      	blx	r3
 800faa6:	4642      	mov	r2, r8
 800faa8:	4639      	mov	r1, r7
 800faaa:	4603      	mov	r3, r0
 800faac:	4620      	mov	r0, r4
 800faae:	f7ff ff47 	bl	800f940 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fab2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fab6:	9004      	str	r0, [sp, #16]
 800fab8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fabc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fac0:	9607      	str	r6, [sp, #28]
 800fac2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800fac6:	4b10      	ldr	r3, [pc, #64]	@ (800fb08 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800fac8:	881b      	ldrh	r3, [r3, #0]
 800faca:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800face:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fad0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800fad4:	f7f4 fbe0 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 800fad8:	6803      	ldr	r3, [r0, #0]
 800fada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fadc:	4798      	blx	r3
 800fade:	23ff      	movs	r3, #255	@ 0xff
 800fae0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800fae4:	a903      	add	r1, sp, #12
 800fae6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800faea:	6860      	ldr	r0, [r4, #4]
 800faec:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800faf0:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800faf4:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800faf8:	6803      	ldr	r3, [r0, #0]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	4798      	blx	r3
 800fafe:	4630      	mov	r0, r6
 800fb00:	b00c      	add	sp, #48	@ 0x30
 800fb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb06:	bf00      	nop
 800fb08:	24025372 	.word	0x24025372

0800fb0c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800fb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	4605      	mov	r5, r0
 800fb12:	ac02      	add	r4, sp, #8
 800fb14:	e884 0006 	stmia.w	r4, {r1, r2}
 800fb18:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800fb1c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800fb20:	f7ff fde6 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fb24:	4631      	mov	r1, r6
 800fb26:	4603      	mov	r3, r0
 800fb28:	463a      	mov	r2, r7
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	f7ff ff08 	bl	800f940 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fb30:	4a05      	ldr	r2, [pc, #20]	@ (800fb48 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	8812      	ldrh	r2, [r2, #0]
 800fb36:	9200      	str	r2, [sp, #0]
 800fb38:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	4628      	mov	r0, r5
 800fb3e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800fb42:	47b0      	blx	r6
 800fb44:	b005      	add	sp, #20
 800fb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb48:	24025372 	.word	0x24025372

0800fb4c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800fb52:	4604      	mov	r4, r0
 800fb54:	b19b      	cbz	r3, 800fb7e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800fb56:	2002      	movs	r0, #2
 800fb58:	f7f2 f9cc 	bl	8001ef4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800fb64:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	f8d3 50c8 	ldr.w	r5, [r3, #200]	@ 0xc8
 800fb6e:	f7ff fdbf 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fb72:	4601      	mov	r1, r0
 800fb74:	4620      	mov	r0, r4
 800fb76:	462b      	mov	r3, r5
 800fb78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb7c:	4718      	bx	r3
 800fb7e:	bd70      	pop	{r4, r5, r6, pc}

0800fb80 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800fb80:	b570      	push	{r4, r5, r6, lr}
 800fb82:	4605      	mov	r5, r0
 800fb84:	460c      	mov	r4, r1
 800fb86:	2003      	movs	r0, #3
 800fb88:	b149      	cbz	r1, 800fb9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800fb8a:	f7f2 f953 	bl	8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fb8e:	6928      	ldr	r0, [r5, #16]
 800fb90:	b168      	cbz	r0, 800fbae <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fb92:	6803      	ldr	r3, [r0, #0]
 800fb94:	2101      	movs	r1, #1
 800fb96:	695b      	ldr	r3, [r3, #20]
 800fb98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb9c:	4718      	bx	r3
 800fb9e:	f7f2 f979 	bl	8001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fba2:	6928      	ldr	r0, [r5, #16]
 800fba4:	b118      	cbz	r0, 800fbae <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fba6:	6803      	ldr	r3, [r0, #0]
 800fba8:	4621      	mov	r1, r4
 800fbaa:	695b      	ldr	r3, [r3, #20]
 800fbac:	e7f4      	b.n	800fb98 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800fbae:	bd70      	pop	{r4, r5, r6, pc}

0800fbb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	460d      	mov	r5, r1
 800fbba:	428b      	cmp	r3, r1
 800fbbc:	d006      	beq.n	800fbcc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800fbbe:	6803      	ldr	r3, [r0, #0]
 800fbc0:	b929      	cbnz	r1, 800fbce <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800fbc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800fbc6:	4798      	blx	r3
 800fbc8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800fbcc:	bd38      	pop	{r3, r4, r5, pc}
 800fbce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800fbd2:	e7f8      	b.n	800fbc6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800fbd4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	@ (800fc08 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x34>)
 800fbd6:	b510      	push	{r4, lr}
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	4604      	mov	r4, r0
 800fbdc:	b953      	cbnz	r3, 800fbf4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800fbde:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800fbe2:	b93b      	cbnz	r3, 800fbf4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800fbe4:	6840      	ldr	r0, [r0, #4]
 800fbe6:	f000 f919 	bl	800fe1c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800fbea:	b118      	cbz	r0, 800fbf4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x20>
 800fbec:	6862      	ldr	r2, [r4, #4]
 800fbee:	7a53      	ldrb	r3, [r2, #9]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d0fc      	beq.n	800fbee <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1a>
 800fbf4:	f7f3 f998 	bl	8002f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	f7ff ffd8 	bl	800fbb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fc00:	4620      	mov	r0, r4
 800fc02:	f7ff fd75 	bl	800f6f0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fc06:	bd10      	pop	{r4, pc}
 800fc08:	24025376 	.word	0x24025376

0800fc0c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800fc0c:	b570      	push	{r4, r5, r6, lr}
 800fc0e:	4604      	mov	r4, r0
 800fc10:	6803      	ldr	r3, [r0, #0]
 800fc12:	b919      	cbnz	r1, 800fc1c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800fc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc1a:	4718      	bx	r3
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800fc22:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800fc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc28:	4798      	blx	r3
 800fc2a:	6863      	ldr	r3, [r4, #4]
 800fc2c:	2101      	movs	r1, #1
 800fc2e:	4605      	mov	r5, r0
 800fc30:	4620      	mov	r0, r4
 800fc32:	7299      	strb	r1, [r3, #10]
 800fc34:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800fc38:	f7ff ffba 	bl	800fbb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fc3c:	4628      	mov	r0, r5
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}

0800fc40 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800fc40:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800fc44:	1a13      	subs	r3, r2, r0
 800fc46:	4258      	negs	r0, r3
 800fc48:	4158      	adcs	r0, r3
 800fc4a:	4770      	bx	lr

0800fc4c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800fc4c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800fc50:	1a9b      	subs	r3, r3, r2
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	bfdc      	itt	le
 800fc56:	6882      	ldrle	r2, [r0, #8]
 800fc58:	189b      	addle	r3, r3, r2
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	bfcc      	ite	gt
 800fc5e:	2000      	movgt	r0, #0
 800fc60:	2001      	movle	r0, #1
 800fc62:	4770      	bx	lr

0800fc64 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800fc64:	6902      	ldr	r2, [r0, #16]
 800fc66:	6843      	ldr	r3, [r0, #4]
 800fc68:	2024      	movs	r0, #36	@ 0x24
 800fc6a:	fb00 3002 	mla	r0, r0, r2, r3
 800fc6e:	4770      	bx	lr

0800fc70 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800fc70:	6803      	ldr	r3, [r0, #0]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	4718      	bx	r3

0800fc76 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800fc76:	2301      	movs	r3, #1
 800fc78:	b570      	push	{r4, r5, r6, lr}
 800fc7a:	7203      	strb	r3, [r0, #8]
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	6840      	ldr	r0, [r0, #4]
 800fc80:	6803      	ldr	r3, [r0, #0]
 800fc82:	699b      	ldr	r3, [r3, #24]
 800fc84:	4798      	blx	r3
 800fc86:	6803      	ldr	r3, [r0, #0]
 800fc88:	4605      	mov	r5, r0
 800fc8a:	2b40      	cmp	r3, #64	@ 0x40
 800fc8c:	d00c      	beq.n	800fca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fc8e:	d810      	bhi.n	800fcb2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800fc90:	2b04      	cmp	r3, #4
 800fc92:	d01d      	beq.n	800fcd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800fc94:	d804      	bhi.n	800fca0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d006      	beq.n	800fca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d02c      	beq.n	800fcf8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800fc9e:	bd70      	pop	{r4, r5, r6, pc}
 800fca0:	2b08      	cmp	r3, #8
 800fca2:	d01d      	beq.n	800fce0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800fca4:	2b20      	cmp	r3, #32
 800fca6:	d1fa      	bne.n	800fc9e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800fca8:	6823      	ldr	r3, [r4, #0]
 800fcaa:	4620      	mov	r0, r4
 800fcac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcae:	4798      	blx	r3
 800fcb0:	e013      	b.n	800fcda <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800fcb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcb6:	d0f7      	beq.n	800fca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fcb8:	d804      	bhi.n	800fcc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800fcba:	2b80      	cmp	r3, #128	@ 0x80
 800fcbc:	d0f4      	beq.n	800fca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fcbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcc2:	e7f0      	b.n	800fca6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800fcc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fcc8:	d0ee      	beq.n	800fca8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fcca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fcce:	e7e5      	b.n	800fc9c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	7f01      	ldrb	r1, [r0, #28]
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcd8:	4798      	blx	r3
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcde:	e006      	b.n	800fcee <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800fce0:	6823      	ldr	r3, [r4, #0]
 800fce2:	7f01      	ldrb	r1, [r0, #28]
 800fce4:	4620      	mov	r0, r4
 800fce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fce8:	4798      	blx	r3
 800fcea:	6823      	ldr	r3, [r4, #0]
 800fcec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcee:	4629      	mov	r1, r5
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcf6:	4718      	bx	r3
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcfe:	4798      	blx	r3
 800fd00:	e7f3      	b.n	800fcea <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800fd02 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800fd02:	4770      	bx	lr

0800fd04 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800fd04:	4770      	bx	lr

0800fd06 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800fd06:	4770      	bx	lr

0800fd08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800fd08:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800fd0c:	b510      	push	{r4, lr}
 800fd0e:	1ad2      	subs	r2, r2, r3
 800fd10:	2a00      	cmp	r2, #0
 800fd12:	bfdc      	itt	le
 800fd14:	6884      	ldrle	r4, [r0, #8]
 800fd16:	1912      	addle	r2, r2, r4
 800fd18:	2a01      	cmp	r2, #1
 800fd1a:	dd16      	ble.n	800fd4a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800fd1c:	6842      	ldr	r2, [r0, #4]
 800fd1e:	2424      	movs	r4, #36	@ 0x24
 800fd20:	fb04 2303 	mla	r3, r4, r3, r2
 800fd24:	f101 0220 	add.w	r2, r1, #32
 800fd28:	f851 4b04 	ldr.w	r4, [r1], #4
 800fd2c:	4291      	cmp	r1, r2
 800fd2e:	f843 4b04 	str.w	r4, [r3], #4
 800fd32:	d1f9      	bne.n	800fd28 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800fd34:	780a      	ldrb	r2, [r1, #0]
 800fd36:	701a      	strb	r2, [r3, #0]
 800fd38:	68c3      	ldr	r3, [r0, #12]
 800fd3a:	6882      	ldr	r2, [r0, #8]
 800fd3c:	f3bf 8f5b 	dmb	ish
 800fd40:	3301      	adds	r3, #1
 800fd42:	429a      	cmp	r2, r3
 800fd44:	bfd8      	it	le
 800fd46:	1a9b      	suble	r3, r3, r2
 800fd48:	60c3      	str	r3, [r0, #12]
 800fd4a:	bd10      	pop	{r4, pc}

0800fd4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800fd4c:	6903      	ldr	r3, [r0, #16]
 800fd4e:	6882      	ldr	r2, [r0, #8]
 800fd50:	f3bf 8f5b 	dmb	ish
 800fd54:	3301      	adds	r3, #1
 800fd56:	429a      	cmp	r2, r3
 800fd58:	bfd8      	it	le
 800fd5a:	1a9b      	suble	r3, r3, r2
 800fd5c:	6103      	str	r3, [r0, #16]
 800fd5e:	4770      	bx	lr

0800fd60 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800fd60:	b570      	push	{r4, r5, r6, lr}
 800fd62:	4604      	mov	r4, r0
 800fd64:	460e      	mov	r6, r1
 800fd66:	6860      	ldr	r0, [r4, #4]
 800fd68:	6803      	ldr	r3, [r0, #0]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	4798      	blx	r3
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	d1f9      	bne.n	800fd66 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800fd72:	4d0d      	ldr	r5, [pc, #52]	@ (800fda8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800fd74:	6828      	ldr	r0, [r5, #0]
 800fd76:	6803      	ldr	r3, [r0, #0]
 800fd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd7c:	4798      	blx	r3
 800fd7e:	f7f3 f8e1 	bl	8002f44 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800fd82:	6828      	ldr	r0, [r5, #0]
 800fd84:	2101      	movs	r1, #1
 800fd86:	f7ff ff13 	bl	800fbb0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fd8a:	6860      	ldr	r0, [r4, #4]
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	6803      	ldr	r3, [r0, #0]
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	4798      	blx	r3
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	4620      	mov	r0, r4
 800fd98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd9a:	4798      	blx	r3
 800fd9c:	6828      	ldr	r0, [r5, #0]
 800fd9e:	6803      	ldr	r3, [r0, #0]
 800fda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fda4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fda6:	4718      	bx	r3
 800fda8:	24025378 	.word	0x24025378

0800fdac <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800fdac:	b508      	push	{r3, lr}
 800fdae:	f7f3 f8bb 	bl	8002f28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fdb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fdb6:	f7f3 b8bf 	b.w	8002f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fdba <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fdba:	b510      	push	{r4, lr}
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	2114      	movs	r1, #20
 800fdc0:	f012 fd30 	bl	8022824 <_ZdlPvj>
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	bd10      	pop	{r4, pc}

0800fdc8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4604      	mov	r4, r0
 800fdcc:	6840      	ldr	r0, [r0, #4]
 800fdce:	6803      	ldr	r3, [r0, #0]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	4798      	blx	r3
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	b930      	cbnz	r0, 800fde6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fdd8:	7a23      	ldrb	r3, [r4, #8]
 800fdda:	b123      	cbz	r3, 800fde6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800fddc:	6860      	ldr	r0, [r4, #4]
 800fdde:	6803      	ldr	r3, [r0, #0]
 800fde0:	695b      	ldr	r3, [r3, #20]
 800fde2:	4798      	blx	r3
 800fde4:	7225      	strb	r5, [r4, #8]
 800fde6:	6860      	ldr	r0, [r4, #4]
 800fde8:	6803      	ldr	r3, [r0, #0]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4798      	blx	r3
 800fdee:	b928      	cbnz	r0, 800fdfc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdfa:	4718      	bx	r3
 800fdfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe00:	f7f3 b8a8 	b.w	8002f54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800fe04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800fe04:	b510      	push	{r4, lr}
 800fe06:	6082      	str	r2, [r0, #8]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4c03      	ldr	r4, [pc, #12]	@ (800fe18 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800fe0c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fe10:	e9c0 4100 	strd	r4, r1, [r0]
 800fe14:	bd10      	pop	{r4, pc}
 800fe16:	bf00      	nop
 800fe18:	08026b94 	.word	0x08026b94

0800fe1c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800fe1c:	6840      	ldr	r0, [r0, #4]
 800fe1e:	6803      	ldr	r3, [r0, #0]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4718      	bx	r3

0800fe24 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800fe24:	2300      	movs	r3, #0
 800fe26:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800fe28:	8503      	strh	r3, [r0, #40]	@ 0x28
 800fe2a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800fe2c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fe2e:	6980      	ldr	r0, [r0, #24]
 800fe30:	b110      	cbz	r0, 800fe38 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800fe32:	6803      	ldr	r3, [r0, #0]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	4718      	bx	r3
 800fe38:	4770      	bx	lr

0800fe3a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800fe3a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800fe3e:	4770      	bx	lr

0800fe40 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	0e0b      	lsrs	r3, r1, #24
 800fe44:	4604      	mov	r4, r0
 800fe46:	460d      	mov	r5, r1
 800fe48:	7783      	strb	r3, [r0, #30]
 800fe4a:	6803      	ldr	r3, [r0, #0]
 800fe4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe4e:	4798      	blx	r3
 800fe50:	6803      	ldr	r3, [r0, #0]
 800fe52:	4629      	mov	r1, r5
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	4798      	blx	r3
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe5e:	4798      	blx	r3
 800fe60:	61a0      	str	r0, [r4, #24]
 800fe62:	bd38      	pop	{r3, r4, r5, pc}

0800fe64 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800fe64:	7741      	strb	r1, [r0, #29]
 800fe66:	4770      	bx	lr

0800fe68 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800fe68:	b530      	push	{r4, r5, lr}
 800fe6a:	460d      	mov	r5, r1
 800fe6c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800fe70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe78:	682b      	ldr	r3, [r5, #0]
 800fe7a:	6023      	str	r3, [r4, #0]
 800fe7c:	bd30      	pop	{r4, r5, pc}

0800fe7e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800fe7e:	b538      	push	{r3, r4, r5, lr}
 800fe80:	4604      	mov	r4, r0
 800fe82:	1d03      	adds	r3, r0, #4
 800fe84:	6808      	ldr	r0, [r1, #0]
 800fe86:	2500      	movs	r5, #0
 800fe88:	6849      	ldr	r1, [r1, #4]
 800fe8a:	c303      	stmia	r3!, {r0, r1}
 800fe8c:	6813      	ldr	r3, [r2, #0]
 800fe8e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800fe92:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800fe96:	6853      	ldr	r3, [r2, #4]
 800fe98:	61a5      	str	r5, [r4, #24]
 800fe9a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800fe9e:	f006 f92b 	bl	80160f8 <_ZN8touchgfx9Matrix3x35resetEv>
 800fea2:	23ff      	movs	r3, #255	@ 0xff
 800fea4:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800fea8:	7763      	strb	r3, [r4, #29]
 800feaa:	77a3      	strb	r3, [r4, #30]
 800feac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800feb0:	6323      	str	r3, [r4, #48]	@ 0x30
 800feb2:	2301      	movs	r3, #1
 800feb4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800feb8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800febc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800febc:	ee70 7a41 	vsub.f32	s15, s0, s2
 800fec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fec4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fec8:	4605      	mov	r5, r0
 800feca:	ed2d 8b0a 	vpush	{d8-d12}
 800fece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fed2:	b087      	sub	sp, #28
 800fed4:	eef0 9a40 	vmov.f32	s19, s0
 800fed8:	6802      	ldr	r2, [r0, #0]
 800feda:	eeb0 aa60 	vmov.f32	s20, s1
 800fede:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800fee2:	eeb0 9a41 	vmov.f32	s18, s2
 800fee6:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 800fee8:	eef0 8a61 	vmov.f32	s17, s3
 800feec:	eeb0 ca42 	vmov.f32	s24, s4
 800fef0:	eef0 ca62 	vmov.f32	s25, s5
 800fef4:	d112      	bne.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800fef6:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800fefa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff02:	d10b      	bne.n	800ff1c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ff04:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800ff08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ff0a:	3901      	subs	r1, #1
 800ff0c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ff10:	b007      	add	sp, #28
 800ff12:	ecbd 8b0a 	vpop	{d8-d12}
 800ff16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff1a:	4710      	bx	r2
 800ff1c:	23ff      	movs	r3, #255	@ 0xff
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800ff24:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 80101ec <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x330>
 800ff28:	77ab      	strb	r3, [r5, #30]
 800ff2a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800ff2c:	4798      	blx	r3
 800ff2e:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800ff32:	eeb0 0a69 	vmov.f32	s0, s19
 800ff36:	4604      	mov	r4, r0
 800ff38:	80c3      	strh	r3, [r0, #6]
 800ff3a:	eef0 0a4a 	vmov.f32	s1, s20
 800ff3e:	4640      	mov	r0, r8
 800ff40:	f006 f989 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff44:	eeb0 ba40 	vmov.f32	s22, s0
 800ff48:	ed8d 0a00 	vstr	s0, [sp]
 800ff4c:	eeb0 0a49 	vmov.f32	s0, s18
 800ff50:	eef0 ba60 	vmov.f32	s23, s1
 800ff54:	edcd 0a01 	vstr	s1, [sp, #4]
 800ff58:	4640      	mov	r0, r8
 800ff5a:	eef0 0a68 	vmov.f32	s1, s17
 800ff5e:	f006 f97a 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff62:	eeb4 ba40 	vcmp.f32	s22, s0
 800ff66:	eeb0 8a40 	vmov.f32	s16, s0
 800ff6a:	ed8d 0a02 	vstr	s0, [sp, #8]
 800ff6e:	eef0 aa60 	vmov.f32	s21, s1
 800ff72:	edcd 0a03 	vstr	s1, [sp, #12]
 800ff76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff7a:	eef4 ba60 	vcmp.f32	s23, s1
 800ff7e:	bf0c      	ite	eq
 800ff80:	2301      	moveq	r3, #1
 800ff82:	2300      	movne	r3, #0
 800ff84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff88:	eeb4 ba40 	vcmp.f32	s22, s0
 800ff8c:	7463      	strb	r3, [r4, #17]
 800ff8e:	bf0c      	ite	eq
 800ff90:	2301      	moveq	r3, #1
 800ff92:	2300      	movne	r3, #0
 800ff94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff98:	74a3      	strb	r3, [r4, #18]
 800ff9a:	d031      	beq.n	8010000 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800ff9c:	eef4 ba60 	vcmp.f32	s23, s1
 800ffa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa4:	d02c      	beq.n	8010000 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 800ffa6:	ee39 9a69 	vsub.f32	s18, s18, s19
 800ffaa:	4640      	mov	r0, r8
 800ffac:	ee78 8aca 	vsub.f32	s17, s17, s20
 800ffb0:	eef0 0a4a 	vmov.f32	s1, s20
 800ffb4:	ee89 7a0c 	vdiv.f32	s14, s18, s24
 800ffb8:	eec8 7aac 	vdiv.f32	s15, s17, s25
 800ffbc:	eeb0 0a69 	vmov.f32	s0, s19
 800ffc0:	eeec 0a87 	vfma.f32	s1, s25, s14
 800ffc4:	eea7 0acc 	vfms.f32	s0, s15, s24
 800ffc8:	f006 f945 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ffcc:	f899 3000 	ldrb.w	r3, [r9]
 800ffd0:	edcd 0a05 	vstr	s1, [sp, #20]
 800ffd4:	ee70 0aeb 	vsub.f32	s1, s1, s23
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	bf08      	it	eq
 800ffdc:	eef1 7a60 	vnegeq.f32	s15, s1
 800ffe0:	ed8d 0a04 	vstr	s0, [sp, #16]
 800ffe4:	ee30 0a4b 	vsub.f32	s0, s0, s22
 800ffe8:	bf04      	itt	eq
 800ffea:	eef0 0a40 	vmoveq.f32	s1, s0
 800ffee:	eeb0 0a67 	vmoveq.f32	s0, s15
 800fff2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffa:	d135      	bne.n	8010068 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ac>
 800fffc:	2301      	movs	r3, #1
 800fffe:	74a3      	strb	r3, [r4, #18]
 8010000:	f899 2000 	ldrb.w	r2, [r9]
 8010004:	7c63      	ldrb	r3, [r4, #17]
 8010006:	2a01      	cmp	r2, #1
 8010008:	f040 80a3 	bne.w	8010152 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x296>
 801000c:	2b00      	cmp	r3, #0
 801000e:	d073      	beq.n	80100f8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x23c>
 8010010:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8010014:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80101e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010018:	eef4 baea 	vcmpe.f32	s23, s21
 801001c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010024:	edc4 7a08 	vstr	s15, [r4, #32]
 8010028:	eefd 7aea 	vcvt.s32.f32	s15, s21
 801002c:	ee17 3a90 	vmov	r3, s15
 8010030:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010034:	b21a      	sxth	r2, r3
 8010036:	ee17 3a90 	vmov	r3, s15
 801003a:	bf48      	it	mi
 801003c:	8162      	strhmi	r2, [r4, #10]
 801003e:	b21b      	sxth	r3, r3
 8010040:	bf56      	itet	pl
 8010042:	8122      	strhpl	r2, [r4, #8]
 8010044:	8123      	strhmi	r3, [r4, #8]
 8010046:	8163      	strhpl	r3, [r4, #10]
 8010048:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801004c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8010050:	1a9b      	subs	r3, r3, r2
 8010052:	ee07 3a90 	vmov	s15, r3
 8010056:	2300      	movs	r3, #0
 8010058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801005c:	7463      	strb	r3, [r4, #17]
 801005e:	2301      	movs	r3, #1
 8010060:	edc4 7a07 	vstr	s15, [r4, #28]
 8010064:	74a3      	strb	r3, [r4, #18]
 8010066:	e03f      	b.n	80100e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010068:	ee80 7a80 	vdiv.f32	s14, s1, s0
 801006c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010070:	ed84 7a05 	vstr	s14, [r4, #20]
 8010074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010078:	d102      	bne.n	8010080 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1c4>
 801007a:	2301      	movs	r3, #1
 801007c:	7463      	strb	r3, [r4, #17]
 801007e:	e7bf      	b.n	8010000 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x144>
 8010080:	2b01      	cmp	r3, #1
 8010082:	ee38 8a4b 	vsub.f32	s16, s16, s22
 8010086:	ee7a aaeb 	vsub.f32	s21, s21, s23
 801008a:	bf0b      	itete	eq
 801008c:	f9b4 2006 	ldrsheq.w	r2, [r4, #6]
 8010090:	eef0 7a6b 	vmovne.f32	s15, s23
 8010094:	ee07 2a90 	vmoveq	s15, r2
 8010098:	eeeb 7a47 	vfmsne.f32	s15, s22, s14
 801009c:	bf02      	ittt	eq
 801009e:	eef8 7ae7 	vcvteq.f32.s32	s15, s15
 80100a2:	ee77 7acb 	vsubeq.f32	s15, s15, s22
 80100a6:	eeeb 7ac7 	vfmseq.f32	s15, s23, s14
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	edc4 7a06 	vstr	s15, [r4, #24]
 80100b0:	bf02      	ittt	eq
 80100b2:	eef1 7a48 	vnegeq.f32	s15, s16
 80100b6:	eeb0 8a6a 	vmoveq.f32	s16, s21
 80100ba:	eef0 aa67 	vmoveq.f32	s21, s15
 80100be:	eeca 7a87 	vdiv.f32	s15, s21, s14
 80100c2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80101e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x32c>
 80100c6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80100ca:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80100ce:	ed84 8a07 	vstr	s16, [r4, #28]
 80100d2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80100d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100da:	edc4 7a08 	vstr	s15, [r4, #32]
 80100de:	d503      	bpl.n	80100e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80100e0:	eeb1 8a48 	vneg.f32	s16, s16
 80100e4:	ed84 8a07 	vstr	s16, [r4, #28]
 80100e8:	60e7      	str	r7, [r4, #12]
 80100ea:	7426      	strb	r6, [r4, #16]
 80100ec:	61ac      	str	r4, [r5, #24]
 80100ee:	b007      	add	sp, #28
 80100f0:	ecbd 8b0a 	vpop	{d8-d12}
 80100f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100f8:	7ca3      	ldrb	r3, [r4, #18]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d0f4      	beq.n	80100e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80100fe:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010102:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80101e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 8010106:	ee00 3a10 	vmov	s0, r3
 801010a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801010e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010112:	ee30 0a4b 	vsub.f32	s0, s0, s22
 8010116:	ee38 7a40 	vsub.f32	s14, s16, s0
 801011a:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801011e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	edc4 7a08 	vstr	s15, [r4, #32]
 801012a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801012e:	ee17 3a90 	vmov	r3, s15
 8010132:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010136:	b21a      	sxth	r2, r3
 8010138:	ee17 3a90 	vmov	r3, s15
 801013c:	bfc8      	it	gt
 801013e:	8162      	strhgt	r2, [r4, #10]
 8010140:	b21b      	sxth	r3, r3
 8010142:	bfd6      	itet	le
 8010144:	8122      	strhle	r2, [r4, #8]
 8010146:	8123      	strhgt	r3, [r4, #8]
 8010148:	8163      	strhle	r3, [r4, #10]
 801014a:	2301      	movs	r3, #1
 801014c:	7463      	strb	r3, [r4, #17]
 801014e:	2300      	movs	r3, #0
 8010150:	e788      	b.n	8010064 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1a8>
 8010152:	b1e3      	cbz	r3, 801018e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x2d2>
 8010154:	ee3a 7aeb 	vsub.f32	s14, s21, s23
 8010158:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80101e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 801015c:	eef4 baea 	vcmpe.f32	s23, s21
 8010160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010168:	edc4 7a08 	vstr	s15, [r4, #32]
 801016c:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8010170:	ee17 3a90 	vmov	r3, s15
 8010174:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8010178:	b21a      	sxth	r2, r3
 801017a:	ee17 3a90 	vmov	r3, s15
 801017e:	bf48      	it	mi
 8010180:	8162      	strhmi	r2, [r4, #10]
 8010182:	b21b      	sxth	r3, r3
 8010184:	bf56      	itet	pl
 8010186:	8122      	strhpl	r2, [r4, #8]
 8010188:	8123      	strhmi	r3, [r4, #8]
 801018a:	8163      	strhpl	r3, [r4, #10]
 801018c:	e7ac      	b.n	80100e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 801018e:	7ca3      	ldrb	r3, [r4, #18]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0a9      	beq.n	80100e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 8010194:	ee38 7a4b 	vsub.f32	s14, s16, s22
 8010198:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80101e4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x328>
 801019c:	eeb4 bac8 	vcmpe.f32	s22, s16
 80101a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a8:	edc4 7a08 	vstr	s15, [r4, #32]
 80101ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80101b0:	ee17 3a90 	vmov	r3, s15
 80101b4:	eefd 7acb 	vcvt.s32.f32	s15, s22
 80101b8:	b21a      	sxth	r2, r3
 80101ba:	ee17 3a90 	vmov	r3, s15
 80101be:	bf48      	it	mi
 80101c0:	8162      	strhmi	r2, [r4, #10]
 80101c2:	b21b      	sxth	r3, r3
 80101c4:	bf56      	itet	pl
 80101c6:	8122      	strhpl	r2, [r4, #8]
 80101c8:	8123      	strhmi	r3, [r4, #8]
 80101ca:	8163      	strhpl	r3, [r4, #10]
 80101cc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80101d0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80101d4:	1a9b      	subs	r3, r3, r2
 80101d6:	ee07 3a90 	vmov	s15, r3
 80101da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101de:	edc4 7a07 	vstr	s15, [r4, #28]
 80101e2:	e781      	b.n	80100e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x22c>
 80101e4:	447ffffe 	.word	0x447ffffe
 80101e8:	44800000 	.word	0x44800000
 80101ec:	24025370 	.word	0x24025370

080101f0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80101f0:	b510      	push	{r4, lr}
 80101f2:	ed2d 8b02 	vpush	{d8}
 80101f6:	eef0 8a62 	vmov.f32	s17, s5
 80101fa:	2100      	movs	r1, #0
 80101fc:	4604      	mov	r4, r0
 80101fe:	eeb0 8a42 	vmov.f32	s16, s4
 8010202:	f012 f881 	bl	8022308 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8010206:	eef0 7a68 	vmov.f32	s15, s17
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	4620      	mov	r0, r4
 801020e:	689b      	ldr	r3, [r3, #8]
 8010210:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010214:	ee17 2a90 	vmov	r2, s15
 8010218:	eef0 7a48 	vmov.f32	s15, s16
 801021c:	ecbd 8b02 	vpop	{d8}
 8010220:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010228:	ee17 1a90 	vmov	r1, s15
 801022c:	4718      	bx	r3

0801022e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 801022e:	b510      	push	{r4, lr}
 8010230:	ed2d 8b02 	vpush	{d8}
 8010234:	eef0 8a63 	vmov.f32	s17, s7
 8010238:	2100      	movs	r1, #0
 801023a:	4604      	mov	r4, r0
 801023c:	eeb0 8a43 	vmov.f32	s16, s6
 8010240:	f012 f924 	bl	802248c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8010244:	eef0 7a68 	vmov.f32	s15, s17
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	4620      	mov	r0, r4
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010252:	ee17 2a90 	vmov	r2, s15
 8010256:	eef0 7a48 	vmov.f32	s15, s16
 801025a:	ecbd 8b02 	vpop	{d8}
 801025e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010266:	ee17 1a90 	vmov	r1, s15
 801026a:	4718      	bx	r3

0801026c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 801026c:	b513      	push	{r0, r1, r4, lr}
 801026e:	4604      	mov	r4, r0
 8010270:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8010272:	f005 fff0 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010276:	eef0 7a60 	vmov.f32	s15, s1
 801027a:	4620      	mov	r0, r4
 801027c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010280:	ee17 2a90 	vmov	r2, s15
 8010284:	eef0 7a40 	vmov.f32	s15, s0
 8010288:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801028c:	ee17 1a90 	vmov	r1, s15
 8010290:	b002      	add	sp, #8
 8010292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010296:	f011 bf91 	b.w	80221bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801029a:	b513      	push	{r0, r1, r4, lr}
 801029c:	4604      	mov	r4, r0
 801029e:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80102a0:	f005 ffd9 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80102a4:	eef0 7a60 	vmov.f32	s15, s1
 80102a8:	4620      	mov	r0, r4
 80102aa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80102ae:	ee17 2a90 	vmov	r2, s15
 80102b2:	eef0 7a40 	vmov.f32	s15, s0
 80102b6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80102ba:	ee17 1a90 	vmov	r1, s15
 80102be:	b002      	add	sp, #8
 80102c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102c4:	f011 bfc7 	b.w	8022256 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080102c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80102c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ca:	2400      	movs	r4, #0
 80102cc:	9f07      	ldr	r7, [sp, #28]
 80102ce:	f04f 0e01 	mov.w	lr, #1
 80102d2:	4626      	mov	r6, r4
 80102d4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80102d8:	4463      	add	r3, ip
 80102da:	4563      	cmp	r3, ip
 80102dc:	d02d      	beq.n	801033a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80102de:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80102e2:	2d06      	cmp	r5, #6
 80102e4:	d8f9      	bhi.n	80102da <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80102e6:	fa0e f505 	lsl.w	r5, lr, r5
 80102ea:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80102ee:	d10d      	bne.n	801030c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80102f0:	f015 0f10 	tst.w	r5, #16
 80102f4:	d117      	bne.n	8010326 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80102f6:	072d      	lsls	r5, r5, #28
 80102f8:	d5ef      	bpl.n	80102da <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80102fa:	3801      	subs	r0, #1
 80102fc:	b91e      	cbnz	r6, 8010306 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80102fe:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 8010302:	682d      	ldr	r5, [r5, #0]
 8010304:	600d      	str	r5, [r1, #0]
 8010306:	b96c      	cbnz	r4, 8010324 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010308:	2601      	movs	r6, #1
 801030a:	e7e6      	b.n	80102da <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801030c:	b926      	cbnz	r6, 8010318 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 801030e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 8010312:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8010316:	600b      	str	r3, [r1, #0]
 8010318:	b924      	cbnz	r4, 8010324 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801031a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801031e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010322:	6013      	str	r3, [r2, #0]
 8010324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010326:	3801      	subs	r0, #1
 8010328:	b91c      	cbnz	r4, 8010332 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 801032a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 801032e:	6824      	ldr	r4, [r4, #0]
 8010330:	6014      	str	r4, [r2, #0]
 8010332:	2e00      	cmp	r6, #0
 8010334:	d1f6      	bne.n	8010324 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010336:	2401      	movs	r4, #1
 8010338:	e7cf      	b.n	80102da <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801033a:	b90e      	cbnz	r6, 8010340 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 801033c:	2300      	movs	r3, #0
 801033e:	600b      	str	r3, [r1, #0]
 8010340:	2c00      	cmp	r4, #0
 8010342:	d1ef      	bne.n	8010324 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010344:	2300      	movs	r3, #0
 8010346:	e7ec      	b.n	8010322 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08010348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	ed2d 8b0a 	vpush	{d8-d12}
 801034e:	eef0 ba40 	vmov.f32	s23, s0
 8010352:	4604      	mov	r4, r0
 8010354:	eeb0 ca60 	vmov.f32	s24, s1
 8010358:	460d      	mov	r5, r1
 801035a:	eef0 aa41 	vmov.f32	s21, s2
 801035e:	eeb0 ba61 	vmov.f32	s22, s3
 8010362:	eeb0 9a42 	vmov.f32	s18, s4
 8010366:	eef0 9a62 	vmov.f32	s19, s5
 801036a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801036e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8010372:	ee3a 8a89 	vadd.f32	s16, s21, s18
 8010376:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801037a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 801037e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8010382:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 8010386:	ee20 0a00 	vmul.f32	s0, s0, s0
 801038a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801038e:	f012 fa73 	bl	8022878 <sqrtf>
 8010392:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039a:	d12e      	bne.n	80103fa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 801039c:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80103a0:	ee39 7acb 	vsub.f32	s14, s19, s22
 80103a4:	eeb0 8a6a 	vmov.f32	s16, s21
 80103a8:	eef0 8a4b 	vmov.f32	s17, s22
 80103ac:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80103b0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80103b4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80103b8:	eee7 8aca 	vfms.f32	s17, s15, s20
 80103bc:	2d02      	cmp	r5, #2
 80103be:	dc2f      	bgt.n	8010420 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80103c0:	3501      	adds	r5, #1
 80103c2:	eef0 1a4b 	vmov.f32	s3, s22
 80103c6:	eeb0 1a6a 	vmov.f32	s2, s21
 80103ca:	4620      	mov	r0, r4
 80103cc:	4629      	mov	r1, r5
 80103ce:	eef0 2a68 	vmov.f32	s5, s17
 80103d2:	eeb0 2a48 	vmov.f32	s4, s16
 80103d6:	eef0 0a4c 	vmov.f32	s1, s24
 80103da:	eeb0 0a6b 	vmov.f32	s0, s23
 80103de:	f7ff ffb3 	bl	8010348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80103e2:	eef0 0a68 	vmov.f32	s1, s17
 80103e6:	eeb0 0a48 	vmov.f32	s0, s16
 80103ea:	4620      	mov	r0, r4
 80103ec:	f7ff ff55 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80103f0:	eeb0 ba68 	vmov.f32	s22, s17
 80103f4:	eef0 aa48 	vmov.f32	s21, s16
 80103f8:	e7b9      	b.n	801036e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80103fa:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80103fe:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010402:	ee78 8acc 	vsub.f32	s17, s17, s24
 8010406:	ee28 7a27 	vmul.f32	s14, s16, s15
 801040a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801040e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 8010412:	eec7 8a80 	vdiv.f32	s17, s15, s0
 8010416:	ee3b 8a88 	vadd.f32	s16, s23, s16
 801041a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 801041e:	e7cd      	b.n	80103bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8010420:	eef0 0a68 	vmov.f32	s1, s17
 8010424:	4620      	mov	r0, r4
 8010426:	eeb0 0a48 	vmov.f32	s0, s16
 801042a:	f7ff ff36 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801042e:	ecbd 8b0a 	vpop	{d8-d12}
 8010432:	bd38      	pop	{r3, r4, r5, pc}

08010434 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8010434:	b510      	push	{r4, lr}
 8010436:	ed2d 8b0a 	vpush	{d8-d12}
 801043a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801043e:	4604      	mov	r4, r0
 8010440:	eeb0 ca40 	vmov.f32	s24, s0
 8010444:	2b02      	cmp	r3, #2
 8010446:	eeb0 9a60 	vmov.f32	s18, s1
 801044a:	eef0 9a41 	vmov.f32	s19, s2
 801044e:	eef0 8a61 	vmov.f32	s17, s3
 8010452:	eeb0 ba42 	vmov.f32	s22, s4
 8010456:	eef0 ba62 	vmov.f32	s23, s5
 801045a:	eeb0 aa43 	vmov.f32	s20, s6
 801045e:	eef0 aa63 	vmov.f32	s21, s7
 8010462:	eeb0 8a44 	vmov.f32	s16, s8
 8010466:	eef0 ca64 	vmov.f32	s25, s9
 801046a:	d12c      	bne.n	80104c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 801046c:	eef0 0a62 	vmov.f32	s1, s5
 8010470:	eeb0 0a42 	vmov.f32	s0, s4
 8010474:	f7ff ff11 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010478:	ee79 9acb 	vsub.f32	s19, s19, s22
 801047c:	ee7a caec 	vsub.f32	s25, s21, s25
 8010480:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8010484:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010488:	ee69 9aac 	vmul.f32	s19, s19, s25
 801048c:	ee28 8a88 	vmul.f32	s16, s17, s16
 8010490:	eef4 9ac8 	vcmpe.f32	s19, s16
 8010494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010498:	db0f      	blt.n	80104ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801049a:	2101      	movs	r1, #1
 801049c:	eef0 2a6a 	vmov.f32	s5, s21
 80104a0:	eeb0 2a4a 	vmov.f32	s4, s20
 80104a4:	4620      	mov	r0, r4
 80104a6:	eef0 1a6b 	vmov.f32	s3, s23
 80104aa:	eeb0 1a4b 	vmov.f32	s2, s22
 80104ae:	eef0 0a49 	vmov.f32	s1, s18
 80104b2:	eeb0 0a4c 	vmov.f32	s0, s24
 80104b6:	f7ff ff47 	bl	8010348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80104ba:	eef0 0a6a 	vmov.f32	s1, s21
 80104be:	4620      	mov	r0, r4
 80104c0:	eeb0 0a4a 	vmov.f32	s0, s20
 80104c4:	e035      	b.n	8010532 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80104c6:	2b01      	cmp	r3, #1
 80104c8:	d138      	bne.n	801053c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80104ca:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80104ce:	ee33 6a48 	vsub.f32	s12, s6, s16
 80104d2:	ee71 7a42 	vsub.f32	s15, s2, s4
 80104d6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80104da:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80104de:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80104e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80104e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ea:	d027      	beq.n	801053c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80104ec:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80104f0:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80104f4:	eea4 8a83 	vfma.f32	s16, s9, s6
 80104f8:	eee1 8a22 	vfma.f32	s17, s2, s5
 80104fc:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8010500:	ee28 8a44 	vnmul.f32	s16, s16, s8
 8010504:	eee6 7a28 	vfma.f32	s15, s12, s17
 8010508:	eea6 8aa8 	vfma.f32	s16, s13, s17
 801050c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010510:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 8010514:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8010518:	ee3c ca40 	vsub.f32	s24, s24, s0
 801051c:	ee39 9a60 	vsub.f32	s18, s18, s1
 8010520:	ee29 9a09 	vmul.f32	s18, s18, s18
 8010524:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8010528:	eef4 7ac9 	vcmpe.f32	s15, s18
 801052c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010530:	db04      	blt.n	801053c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010532:	f7ff feb2 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010536:	ecbd 8b0a 	vpop	{d8-d12}
 801053a:	bd10      	pop	{r4, pc}
 801053c:	eef0 0a6b 	vmov.f32	s1, s23
 8010540:	4620      	mov	r0, r4
 8010542:	eeb0 0a4b 	vmov.f32	s0, s22
 8010546:	f7ff fea8 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801054a:	e7b6      	b.n	80104ba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 801054c:	b510      	push	{r4, lr}
 801054e:	ed2d 8b0c 	vpush	{d8-d13}
 8010552:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 8010556:	4604      	mov	r4, r0
 8010558:	eeb0 9a40 	vmov.f32	s18, s0
 801055c:	eef0 9a60 	vmov.f32	s19, s1
 8010560:	eef0 aa41 	vmov.f32	s21, s2
 8010564:	eeb0 ba61 	vmov.f32	s22, s3
 8010568:	b933      	cbnz	r3, 8010578 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801056a:	f7ff fe96 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801056e:	eef0 0a4b 	vmov.f32	s1, s22
 8010572:	eeb0 0a6a 	vmov.f32	s0, s21
 8010576:	e015      	b.n	80105a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8010578:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801057c:	2b02      	cmp	r3, #2
 801057e:	ee71 8a40 	vsub.f32	s17, s2, s0
 8010582:	ee31 8ae0 	vsub.f32	s16, s3, s1
 8010586:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801058a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801058e:	d10f      	bne.n	80105b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8010590:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010594:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010598:	f7ff fe7f 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801059c:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80105a0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80105a4:	4620      	mov	r0, r4
 80105a6:	f7ff fe78 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80105aa:	ecbd 8b0c 	vpop	{d8-d13}
 80105ae:	bd10      	pop	{r4, pc}
 80105b0:	f7ff fe73 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80105b4:	eef0 0a69 	vmov.f32	s1, s19
 80105b8:	eeb0 0a49 	vmov.f32	s0, s18
 80105bc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80106ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80105c0:	eeb1 aa68 	vneg.f32	s20, s17
 80105c4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80105c8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80105cc:	4620      	mov	r0, r4
 80105ce:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80105d2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80106f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80105d6:	eddf ca48 	vldr	s25, [pc, #288]	@ 80106f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80105da:	ed9f da48 	vldr	s26, [pc, #288]	@ 80106fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80105de:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80105e2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80105e6:	f7ff fe58 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80105ea:	eef0 0a69 	vmov.f32	s1, s19
 80105ee:	eeb0 0a49 	vmov.f32	s0, s18
 80105f2:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010700 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80105f6:	4620      	mov	r0, r4
 80105f8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80105fc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010600:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010604:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8010608:	f7ff fe47 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801060c:	eef0 0a69 	vmov.f32	s1, s19
 8010610:	eeb0 0a49 	vmov.f32	s0, s18
 8010614:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8010704 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8010618:	4620      	mov	r0, r4
 801061a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801061e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010622:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8010626:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801062a:	f7ff fe36 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801062e:	eef0 0a69 	vmov.f32	s1, s19
 8010632:	eeb0 0a49 	vmov.f32	s0, s18
 8010636:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8010708 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801063a:	4620      	mov	r0, r4
 801063c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010640:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010644:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010648:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801064c:	f7ff fe25 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010650:	ee79 0a88 	vadd.f32	s1, s19, s16
 8010654:	ee39 0a28 	vadd.f32	s0, s18, s17
 8010658:	4620      	mov	r0, r4
 801065a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801065e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010662:	f7ff fe1a 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010666:	eef0 0a69 	vmov.f32	s1, s19
 801066a:	eeb0 0a49 	vmov.f32	s0, s18
 801066e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 801070c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8010672:	4620      	mov	r0, r4
 8010674:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010678:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801067c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010680:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010684:	f7ff fe09 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010688:	eef0 0a69 	vmov.f32	s1, s19
 801068c:	eeb0 0a49 	vmov.f32	s0, s18
 8010690:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8010710 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8010694:	4620      	mov	r0, r4
 8010696:	eee8 0a27 	vfma.f32	s1, s16, s15
 801069a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801069e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80106a2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80106a6:	f7ff fdf8 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80106aa:	eef0 0a69 	vmov.f32	s1, s19
 80106ae:	eeb0 0a49 	vmov.f32	s0, s18
 80106b2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8010714 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80106b6:	4620      	mov	r0, r4
 80106b8:	eee8 0a27 	vfma.f32	s1, s16, s15
 80106bc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80106c0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80106c4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80106c8:	f7ff fde7 	bl	801029a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80106cc:	eef0 0a69 	vmov.f32	s1, s19
 80106d0:	eeb0 0a49 	vmov.f32	s0, s18
 80106d4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010718 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80106d8:	4620      	mov	r0, r4
 80106da:	eee8 0a27 	vfma.f32	s1, s16, s15
 80106de:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80106e2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80106e6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80106ea:	e73e      	b.n	801056a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80106ec:	3d23d70a 	.word	0x3d23d70a
 80106f0:	3e8f5c29 	.word	0x3e8f5c29
 80106f4:	3f19999a 	.word	0x3f19999a
 80106f8:	3f4ccccd 	.word	0x3f4ccccd
 80106fc:	3f75c28f 	.word	0x3f75c28f
 8010700:	3e4ccccd 	.word	0x3e4ccccd
 8010704:	3ecccccd 	.word	0x3ecccccd
 8010708:	3f3851ec 	.word	0x3f3851ec
 801070c:	3fa3d70a 	.word	0x3fa3d70a
 8010710:	3fcccccd 	.word	0x3fcccccd
 8010714:	3fe66666 	.word	0x3fe66666
 8010718:	3ffae148 	.word	0x3ffae148

0801071c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	ed2d 8b06 	vpush	{d8-d10}
 8010722:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8010726:	eef0 aa40 	vmov.f32	s21, s0
 801072a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 801072e:	4604      	mov	r4, r0
 8010730:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8010734:	ee30 9a49 	vsub.f32	s18, s0, s18
 8010738:	eeb0 aa60 	vmov.f32	s20, s1
 801073c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010740:	eea9 0a09 	vfma.f32	s0, s18, s18
 8010744:	f012 f898 	bl	8022878 <sqrtf>
 8010748:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010750:	dd36      	ble.n	80107c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8010752:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 8010756:	2600      	movs	r6, #0
 8010758:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 801075c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8010760:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8010764:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8010768:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 801076c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8010770:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8010774:	ee70 9a28 	vadd.f32	s19, s0, s17
 8010778:	ee78 8aaa 	vadd.f32	s17, s17, s21
 801077c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8010780:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010784:	b1fd      	cbz	r5, 80107c6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 8010786:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801078a:	eef0 0a49 	vmov.f32	s1, s18
 801078e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8010792:	eeb0 0a69 	vmov.f32	s0, s19
 8010796:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801079a:	4620      	mov	r0, r4
 801079c:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80107a0:	f7ff fd64 	bl	801026c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80107a4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80107a8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80107ac:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80107b0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80107b4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80107b8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80107bc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80107c0:	ecbd 8b06 	vpop	{d8-d10}
 80107c4:	bd70      	pop	{r4, r5, r6, pc}
 80107c6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80107ca:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80107ce:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80107d2:	b16b      	cbz	r3, 80107f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80107d4:	eef0 1a49 	vmov.f32	s3, s18
 80107d8:	4620      	mov	r0, r4
 80107da:	eeb0 1a69 	vmov.f32	s2, s19
 80107de:	eef0 0a62 	vmov.f32	s1, s5
 80107e2:	eeb0 0a42 	vmov.f32	s0, s4
 80107e6:	f7ff feb1 	bl	801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80107ea:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80107ee:	e7db      	b.n	80107a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80107f0:	eef0 4a48 	vmov.f32	s9, s16
 80107f4:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80107f8:	eeb0 4a68 	vmov.f32	s8, s17
 80107fc:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8010800:	eef0 3a49 	vmov.f32	s7, s18
 8010804:	4620      	mov	r0, r4
 8010806:	eeb0 3a69 	vmov.f32	s6, s19
 801080a:	f7ff fe13 	bl	8010434 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 801080e:	e7cb      	b.n	80107a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08010810 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8010810:	ee07 2a90 	vmov	s15, r2
 8010814:	ee07 1a10 	vmov	s14, r1
 8010818:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801081c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8010830 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8010820:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8010824:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010828:	ee20 0a27 	vmul.f32	s0, s0, s15
 801082c:	f7ff bf76 	b.w	801071c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010830:	3d000000 	.word	0x3d000000

08010834 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	ed2d 8b02 	vpush	{d8}
 801083a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 801083e:	4604      	mov	r4, r0
 8010840:	b31d      	cbz	r5, 801088a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8010842:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 8010846:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801084a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 801084e:	ee78 8a67 	vsub.f32	s17, s16, s15
 8010852:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010856:	eef0 0a68 	vmov.f32	s1, s17
 801085a:	f7ff fd07 	bl	801026c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 801085e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010862:	eef0 1a48 	vmov.f32	s3, s16
 8010866:	4620      	mov	r0, r4
 8010868:	eeb0 0a41 	vmov.f32	s0, s2
 801086c:	eef0 0a68 	vmov.f32	s1, s17
 8010870:	f7ff fe6c 	bl	801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010874:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010878:	eef0 1a68 	vmov.f32	s3, s17
 801087c:	4620      	mov	r0, r4
 801087e:	eef0 0a48 	vmov.f32	s1, s16
 8010882:	eeb0 0a41 	vmov.f32	s0, s2
 8010886:	f7ff fe61 	bl	801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801088a:	4628      	mov	r0, r5
 801088c:	ecbd 8b02 	vpop	{d8}
 8010890:	bd38      	pop	{r3, r4, r5, pc}

08010892 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8010892:	b510      	push	{r4, lr}
 8010894:	ed2d 8b02 	vpush	{d8}
 8010898:	4604      	mov	r4, r0
 801089a:	eeb0 8a40 	vmov.f32	s16, s0
 801089e:	eef0 8a60 	vmov.f32	s17, s1
 80108a2:	f7ff ffc7 	bl	8010834 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80108a6:	b9d0      	cbnz	r0, 80108de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80108a8:	4620      	mov	r0, r4
 80108aa:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80108ae:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80108b2:	eef0 0a68 	vmov.f32	s1, s17
 80108b6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80108ba:	eeb0 0a48 	vmov.f32	s0, s16
 80108be:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80108c2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80108c6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80108ca:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80108ce:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80108d2:	f7ff fdaf 	bl	8010434 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80108d6:	2001      	movs	r0, #1
 80108d8:	ecbd 8b02 	vpop	{d8}
 80108dc:	bd10      	pop	{r4, pc}
 80108de:	2000      	movs	r0, #0
 80108e0:	e7fa      	b.n	80108d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080108e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80108e2:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80108e6:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80108ea:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80108ee:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80108f2:	f7ff be2b 	b.w	801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80108f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fc:	b089      	sub	sp, #36	@ 0x24
 80108fe:	461c      	mov	r4, r3
 8010900:	4682      	mov	sl, r0
 8010902:	4615      	mov	r5, r2
 8010904:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010908:	f10d 0820 	add.w	r8, sp, #32
 801090c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801090e:	9304      	str	r3, [sp, #16]
 8010910:	2300      	movs	r3, #0
 8010912:	9105      	str	r1, [sp, #20]
 8010914:	9306      	str	r3, [sp, #24]
 8010916:	f848 3d04 	str.w	r3, [r8, #-4]!
 801091a:	9b04      	ldr	r3, [sp, #16]
 801091c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8010920:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 8010924:	9b05      	ldr	r3, [sp, #20]
 8010926:	429d      	cmp	r5, r3
 8010928:	d96d      	bls.n	8010a06 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 801092a:	3d01      	subs	r5, #1
 801092c:	f819 3005 	ldrb.w	r3, [r9, r5]
 8010930:	2b06      	cmp	r3, #6
 8010932:	d8f7      	bhi.n	8010924 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010934:	a201      	add	r2, pc, #4	@ (adr r2, 801093c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 8010936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093a:	bf00      	nop
 801093c:	0801095b 	.word	0x0801095b
 8010940:	08010925 	.word	0x08010925
 8010944:	08010959 	.word	0x08010959
 8010948:	0801097d 	.word	0x0801097d
 801094c:	0801097d 	.word	0x0801097d
 8010950:	08010981 	.word	0x08010981
 8010954:	080109c1 	.word	0x080109c1
 8010958:	3c02      	subs	r4, #2
 801095a:	4650      	mov	r0, sl
 801095c:	9400      	str	r4, [sp, #0]
 801095e:	462b      	mov	r3, r5
 8010960:	4642      	mov	r2, r8
 8010962:	a906      	add	r1, sp, #24
 8010964:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8010968:	f7ff fcae 	bl	80102c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801096c:	eddd 0a07 	vldr	s1, [sp, #28]
 8010970:	ed9d 0a06 	vldr	s0, [sp, #24]
 8010974:	4630      	mov	r0, r6
 8010976:	f7ff fed1 	bl	801071c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801097a:	e7d3      	b.n	8010924 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801097c:	3c01      	subs	r4, #1
 801097e:	e7ec      	b.n	801095a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8010980:	f1a4 0b04 	sub.w	fp, r4, #4
 8010984:	3c02      	subs	r4, #2
 8010986:	4650      	mov	r0, sl
 8010988:	462b      	mov	r3, r5
 801098a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801098e:	f8cd b000 	str.w	fp, [sp]
 8010992:	4642      	mov	r2, r8
 8010994:	a906      	add	r1, sp, #24
 8010996:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801099a:	f7ff fc95 	bl	80102c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 801099e:	eddd 2a07 	vldr	s5, [sp, #28]
 80109a2:	ed9d 2a06 	vldr	s4, [sp, #24]
 80109a6:	4630      	mov	r0, r6
 80109a8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80109ac:	ed14 1a02 	vldr	s2, [r4, #-8]
 80109b0:	edd4 0a01 	vldr	s1, [r4, #4]
 80109b4:	ed94 0a00 	vldr	s0, [r4]
 80109b8:	f7ff fc1a 	bl	80101f0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80109bc:	465c      	mov	r4, fp
 80109be:	e7b1      	b.n	8010924 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80109c0:	f1a4 0b06 	sub.w	fp, r4, #6
 80109c4:	3c02      	subs	r4, #2
 80109c6:	4650      	mov	r0, sl
 80109c8:	462b      	mov	r3, r5
 80109ca:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80109ce:	f8cd b000 	str.w	fp, [sp]
 80109d2:	4642      	mov	r2, r8
 80109d4:	a906      	add	r1, sp, #24
 80109d6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80109da:	f7ff fc75 	bl	80102c8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80109de:	eddd 3a07 	vldr	s7, [sp, #28]
 80109e2:	ed9d 3a06 	vldr	s6, [sp, #24]
 80109e6:	4630      	mov	r0, r6
 80109e8:	ed54 2a03 	vldr	s5, [r4, #-12]
 80109ec:	ed14 2a04 	vldr	s4, [r4, #-16]
 80109f0:	ed54 1a01 	vldr	s3, [r4, #-4]
 80109f4:	ed14 1a02 	vldr	s2, [r4, #-8]
 80109f8:	edd4 0a01 	vldr	s1, [r4, #4]
 80109fc:	ed94 0a00 	vldr	s0, [r4]
 8010a00:	f7ff fc15 	bl	801022e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010a04:	e7da      	b.n	80109bc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8010a06:	9b04      	ldr	r3, [sp, #16]
 8010a08:	b113      	cbz	r3, 8010a10 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7ff ff69 	bl	80108e2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8010a10:	b009      	add	sp, #36	@ 0x24
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	bf00      	nop

08010a18 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8010a18:	eef0 7a60 	vmov.f32	s15, s1
 8010a1c:	6803      	ldr	r3, [r0, #0]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010a24:	ee17 2a90 	vmov	r2, s15
 8010a28:	eef0 7a40 	vmov.f32	s15, s0
 8010a2c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010a30:	ee17 1a90 	vmov	r1, s15
 8010a34:	4718      	bx	r3
	...

08010a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8010a38:	4b04      	ldr	r3, [pc, #16]	@ (8010a4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8010a3a:	b510      	push	{r4, lr}
 8010a3c:	4604      	mov	r4, r0
 8010a3e:	f840 3b14 	str.w	r3, [r0], #20
 8010a42:	f001 fabb 	bl	8011fbc <_ZN8touchgfx7OutlineD1Ev>
 8010a46:	4620      	mov	r0, r4
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	bf00      	nop
 8010a4c:	080272a4 	.word	0x080272a4

08010a50 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8010a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a54:	ed2d 8b04 	vpush	{d8-d9}
 8010a58:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8010a5c:	b0b5      	sub	sp, #212	@ 0xd4
 8010a5e:	4605      	mov	r5, r0
 8010a60:	468b      	mov	fp, r1
 8010a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a66:	9206      	str	r2, [sp, #24]
 8010a68:	461e      	mov	r6, r3
 8010a6a:	2400      	movs	r4, #0
 8010a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a70:	f240 814f 	bls.w	8010d12 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8010a74:	23ff      	movs	r3, #255	@ 0xff
 8010a76:	1d02      	adds	r2, r0, #4
 8010a78:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8010d18 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8010a7c:	f04f 0800 	mov.w	r8, #0
 8010a80:	9300      	str	r3, [sp, #0]
 8010a82:	af08      	add	r7, sp, #32
 8010a84:	6981      	ldr	r1, [r0, #24]
 8010a86:	a808      	add	r0, sp, #32
 8010a88:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010a8a:	eef0 9a49 	vmov.f32	s19, s18
 8010a8e:	f011 fa49 	bl	8021f24 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8010a92:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8010a96:	4ba1      	ldr	r3, [pc, #644]	@ (8010d1c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8010a98:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	9308      	str	r3, [sp, #32]
 8010aa4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8010aa8:	edd5 6a08 	vldr	s13, [r5, #32]
 8010aac:	eeb0 8a49 	vmov.f32	s16, s18
 8010ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab4:	9325      	str	r3, [sp, #148]	@ 0x94
 8010ab6:	f04f 0300 	mov.w	r3, #0
 8010aba:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8010abe:	7f6a      	ldrb	r2, [r5, #29]
 8010ac0:	eef0 8a49 	vmov.f32	s17, s18
 8010ac4:	bf48      	it	mi
 8010ac6:	eef1 7a67 	vnegmi.f32	s15, s15
 8010aca:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8010ace:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8010ad2:	46c1      	mov	r9, r8
 8010ad4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010ad8:	f04f 0a01 	mov.w	sl, #1
 8010adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ae0:	7fab      	ldrb	r3, [r5, #30]
 8010ae2:	942a      	str	r4, [sp, #168]	@ 0xa8
 8010ae4:	435a      	muls	r2, r3
 8010ae6:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8010aea:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8010aee:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8010af2:	1c53      	adds	r3, r2, #1
 8010af4:	942b      	str	r4, [sp, #172]	@ 0xac
 8010af6:	942c      	str	r4, [sp, #176]	@ 0xb0
 8010af8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010afc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8010b00:	942d      	str	r4, [sp, #180]	@ 0xb4
 8010b02:	942e      	str	r4, [sp, #184]	@ 0xb8
 8010b04:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b0c:	942f      	str	r4, [sp, #188]	@ 0xbc
 8010b0e:	9430      	str	r4, [sp, #192]	@ 0xc0
 8010b10:	9431      	str	r4, [sp, #196]	@ 0xc4
 8010b12:	9432      	str	r4, [sp, #200]	@ 0xc8
 8010b14:	9433      	str	r4, [sp, #204]	@ 0xcc
 8010b16:	4644      	mov	r4, r8
 8010b18:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010b1c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8010b20:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8010b24:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8010b28:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8010b2c:	9b06      	ldr	r3, [sp, #24]
 8010b2e:	454b      	cmp	r3, r9
 8010b30:	f000 80cc 	beq.w	8010ccc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8010b34:	f109 0301 	add.w	r3, r9, #1
 8010b38:	9305      	str	r3, [sp, #20]
 8010b3a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010b3e:	2b06      	cmp	r3, #6
 8010b40:	d839      	bhi.n	8010bb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010b42:	e8df f003 	tbb	[pc, r3]
 8010b46:	3b04      	.short	0x3b04
 8010b48:	817c6f60 	.word	0x817c6f60
 8010b4c:	a0          	.byte	0xa0
 8010b4d:	00          	.byte	0x00
 8010b4e:	45c1      	cmp	r9, r8
 8010b50:	d92b      	bls.n	8010baa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8010b52:	eef0 0a49 	vmov.f32	s1, s18
 8010b56:	4638      	mov	r0, r7
 8010b58:	eeb0 0a69 	vmov.f32	s0, s19
 8010b5c:	f7ff fdde 	bl	801071c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010b60:	4638      	mov	r0, r7
 8010b62:	f7ff fe67 	bl	8010834 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010b66:	4681      	mov	r9, r0
 8010b68:	b9f8      	cbnz	r0, 8010baa <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8010b6a:	eef0 0a49 	vmov.f32	s1, s18
 8010b6e:	4638      	mov	r0, r7
 8010b70:	eeb0 0a69 	vmov.f32	s0, s19
 8010b74:	f7ff fe8d 	bl	8010892 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8010b78:	4628      	mov	r0, r5
 8010b7a:	4623      	mov	r3, r4
 8010b7c:	9a05      	ldr	r2, [sp, #20]
 8010b7e:	4641      	mov	r1, r8
 8010b80:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8010b84:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8010b88:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010b8c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8010b90:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8010b94:	e9cd b600 	strd	fp, r6, [sp]
 8010b98:	f7ff feae 	bl	80108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010b9c:	eef0 0a49 	vmov.f32	s1, s18
 8010ba0:	eeb0 0a69 	vmov.f32	s0, s19
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	f7ff fe74 	bl	8010892 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8010baa:	eeb0 8a49 	vmov.f32	s16, s18
 8010bae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010bb2:	eef0 8a69 	vmov.f32	s17, s19
 8010bb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010bba:	e7b7      	b.n	8010b2c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8010bbc:	45c1      	cmp	r9, r8
 8010bbe:	d90d      	bls.n	8010bdc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8010bc0:	4638      	mov	r0, r7
 8010bc2:	f7ff fe37 	bl	8010834 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010bc6:	b948      	cbnz	r0, 8010bdc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8010bc8:	4623      	mov	r3, r4
 8010bca:	464a      	mov	r2, r9
 8010bcc:	4641      	mov	r1, r8
 8010bce:	4628      	mov	r0, r5
 8010bd0:	e9cd a702 	strd	sl, r7, [sp, #8]
 8010bd4:	e9cd b600 	strd	fp, r6, [sp]
 8010bd8:	f7ff fe8e 	bl	80108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010bdc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010be0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010be4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8010be8:	3402      	adds	r4, #2
 8010bea:	edd3 8a00 	vldr	s17, [r3]
 8010bee:	46c8      	mov	r8, r9
 8010bf0:	ed93 8a01 	vldr	s16, [r3, #4]
 8010bf4:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8010bf8:	eef0 9a68 	vmov.f32	s19, s17
 8010bfc:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8010c00:	eeb0 9a48 	vmov.f32	s18, s16
 8010c04:	e7d7      	b.n	8010bb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010c06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010c0a:	4638      	mov	r0, r7
 8010c0c:	3402      	adds	r4, #2
 8010c0e:	edd3 8a00 	vldr	s17, [r3]
 8010c12:	ed93 8a01 	vldr	s16, [r3, #4]
 8010c16:	eeb0 0a68 	vmov.f32	s0, s17
 8010c1a:	eef0 0a48 	vmov.f32	s1, s16
 8010c1e:	f7ff fd7d 	bl	801071c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010c22:	e7c8      	b.n	8010bb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010c24:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010c28:	edd3 8a00 	vldr	s17, [r3]
 8010c2c:	eef0 0a48 	vmov.f32	s1, s16
 8010c30:	4638      	mov	r0, r7
 8010c32:	eeb0 0a68 	vmov.f32	s0, s17
 8010c36:	3401      	adds	r4, #1
 8010c38:	f7ff fd70 	bl	801071c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010c3c:	e7bb      	b.n	8010bb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010c3e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010c42:	ed93 8a00 	vldr	s16, [r3]
 8010c46:	e7f1      	b.n	8010c2c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8010c48:	00a3      	lsls	r3, r4, #2
 8010c4a:	eef0 0a48 	vmov.f32	s1, s16
 8010c4e:	eeb0 0a68 	vmov.f32	s0, s17
 8010c52:	4638      	mov	r0, r7
 8010c54:	f103 0208 	add.w	r2, r3, #8
 8010c58:	f103 090c 	add.w	r9, r3, #12
 8010c5c:	4433      	add	r3, r6
 8010c5e:	3404      	adds	r4, #4
 8010c60:	4432      	add	r2, r6
 8010c62:	44b1      	add	r9, r6
 8010c64:	edd3 1a01 	vldr	s3, [r3, #4]
 8010c68:	ed92 2a00 	vldr	s4, [r2]
 8010c6c:	edd9 2a00 	vldr	s5, [r9]
 8010c70:	ed93 1a00 	vldr	s2, [r3]
 8010c74:	9207      	str	r2, [sp, #28]
 8010c76:	f7ff fabb 	bl	80101f0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010c7a:	9a07      	ldr	r2, [sp, #28]
 8010c7c:	ed99 8a00 	vldr	s16, [r9]
 8010c80:	edd2 8a00 	vldr	s17, [r2]
 8010c84:	e797      	b.n	8010bb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010c86:	00a3      	lsls	r3, r4, #2
 8010c88:	eef0 0a48 	vmov.f32	s1, s16
 8010c8c:	eeb0 0a68 	vmov.f32	s0, s17
 8010c90:	4638      	mov	r0, r7
 8010c92:	f103 0210 	add.w	r2, r3, #16
 8010c96:	f103 0914 	add.w	r9, r3, #20
 8010c9a:	4433      	add	r3, r6
 8010c9c:	3406      	adds	r4, #6
 8010c9e:	4432      	add	r2, r6
 8010ca0:	44b1      	add	r9, r6
 8010ca2:	edd3 2a03 	vldr	s5, [r3, #12]
 8010ca6:	ed92 3a00 	vldr	s6, [r2]
 8010caa:	edd9 3a00 	vldr	s7, [r9]
 8010cae:	ed93 2a02 	vldr	s4, [r3, #8]
 8010cb2:	edd3 1a01 	vldr	s3, [r3, #4]
 8010cb6:	ed93 1a00 	vldr	s2, [r3]
 8010cba:	9207      	str	r2, [sp, #28]
 8010cbc:	f7ff fab7 	bl	801022e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010cc0:	9a07      	ldr	r2, [sp, #28]
 8010cc2:	ed99 8a00 	vldr	s16, [r9]
 8010cc6:	edd2 8a00 	vldr	s17, [r2]
 8010cca:	e774      	b.n	8010bb6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010ccc:	9b06      	ldr	r3, [sp, #24]
 8010cce:	af08      	add	r7, sp, #32
 8010cd0:	4543      	cmp	r3, r8
 8010cd2:	d90f      	bls.n	8010cf4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f7ff fdad 	bl	8010834 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010cda:	b958      	cbnz	r0, 8010cf4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010cdc:	2301      	movs	r3, #1
 8010cde:	9703      	str	r7, [sp, #12]
 8010ce0:	f8cd b000 	str.w	fp, [sp]
 8010ce4:	4641      	mov	r1, r8
 8010ce6:	9a06      	ldr	r2, [sp, #24]
 8010ce8:	4628      	mov	r0, r5
 8010cea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8010cee:	4623      	mov	r3, r4
 8010cf0:	f7ff fe02 	bl	80108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010cf4:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8010cf8:	4638      	mov	r0, r7
 8010cfa:	f011 f9a7 	bl	802204c <_ZN8touchgfx6Canvas6renderEh>
 8010cfe:	4604      	mov	r4, r0
 8010d00:	4638      	mov	r0, r7
 8010d02:	f7ff fe99 	bl	8010a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010d06:	4620      	mov	r0, r4
 8010d08:	b035      	add	sp, #212	@ 0xd4
 8010d0a:	ecbd 8b04 	vpop	{d8-d9}
 8010d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d12:	2401      	movs	r4, #1
 8010d14:	e7f7      	b.n	8010d06 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8010d16:	bf00      	nop
 8010d18:	00000000 	.word	0x00000000
 8010d1c:	08026bb8 	.word	0x08026bb8

08010d20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8010d20:	b510      	push	{r4, lr}
 8010d22:	4604      	mov	r4, r0
 8010d24:	f7ff fe88 	bl	8010a38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010d28:	21b0      	movs	r1, #176	@ 0xb0
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f011 fd7a 	bl	8022824 <_ZdlPvj>
 8010d30:	4620      	mov	r0, r4
 8010d32:	bd10      	pop	{r4, pc}

08010d34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8010d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d38:	4698      	mov	r8, r3
 8010d3a:	23ff      	movs	r3, #255	@ 0xff
 8010d3c:	4607      	mov	r7, r0
 8010d3e:	4689      	mov	r9, r1
 8010d40:	4692      	mov	sl, r2
 8010d42:	1d02      	adds	r2, r0, #4
 8010d44:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8010d48:	2400      	movs	r4, #0
 8010d4a:	44ca      	add	sl, r9
 8010d4c:	ed2d 8b06 	vpush	{d8-d10}
 8010d50:	b0aa      	sub	sp, #168	@ 0xa8
 8010d52:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8010f58 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010d56:	9300      	str	r3, [sp, #0]
 8010d58:	eef0 8a48 	vmov.f32	s17, s16
 8010d5c:	6981      	ldr	r1, [r0, #24]
 8010d5e:	a80d      	add	r0, sp, #52	@ 0x34
 8010d60:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010d62:	f011 f8df 	bl	8021f24 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8010d66:	7f3b      	ldrb	r3, [r7, #28]
 8010d68:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8010f58 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	1e5a      	subs	r2, r3, #1
 8010d70:	eeb0 0a60 	vmov.f32	s0, s1
 8010d74:	4253      	negs	r3, r2
 8010d76:	4153      	adcs	r3, r2
 8010d78:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8010d7c:	f005 fa6b 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010d80:	eeb0 9a40 	vmov.f32	s18, s0
 8010d84:	eef0 9a60 	vmov.f32	s19, s1
 8010d88:	45ca      	cmp	sl, r9
 8010d8a:	f000 80cd 	beq.w	8010f28 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8010d8e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010d92:	2b06      	cmp	r3, #6
 8010d94:	d8f8      	bhi.n	8010d88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010d96:	e8df f003 	tbb	[pc, r3]
 8010d9a:	0804      	.short	0x0804
 8010d9c:	58533f2a 	.word	0x58533f2a
 8010da0:	8a          	.byte	0x8a
 8010da1:	00          	.byte	0x00
 8010da2:	a80d      	add	r0, sp, #52	@ 0x34
 8010da4:	f011 f930 	bl	8022008 <_ZN8touchgfx6Canvas5closeEv>
 8010da8:	e7ee      	b.n	8010d88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010daa:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010dae:	4628      	mov	r0, r5
 8010db0:	ed93 8a01 	vldr	s16, [r3, #4]
 8010db4:	edd3 8a00 	vldr	s17, [r3]
 8010db8:	eef0 0a48 	vmov.f32	s1, s16
 8010dbc:	eeb0 0a68 	vmov.f32	s0, s17
 8010dc0:	f005 fa49 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010dc4:	a80d      	add	r0, sp, #52	@ 0x34
 8010dc6:	eef0 7a60 	vmov.f32	s15, s1
 8010dca:	eeb0 9a40 	vmov.f32	s18, s0
 8010dce:	eef0 9a60 	vmov.f32	s19, s1
 8010dd2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010dd6:	ee17 2a90 	vmov	r2, s15
 8010dda:	eef0 7a40 	vmov.f32	s15, s0
 8010dde:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010de2:	ee17 1a90 	vmov	r1, s15
 8010de6:	f011 f9e9 	bl	80221bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8010dea:	3402      	adds	r4, #2
 8010dec:	e7cc      	b.n	8010d88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010dee:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010df2:	4628      	mov	r0, r5
 8010df4:	edd3 8a00 	vldr	s17, [r3]
 8010df8:	ed93 8a01 	vldr	s16, [r3, #4]
 8010dfc:	eeb0 0a68 	vmov.f32	s0, s17
 8010e00:	eef0 0a48 	vmov.f32	s1, s16
 8010e04:	f005 fa27 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e08:	a80d      	add	r0, sp, #52	@ 0x34
 8010e0a:	eeb0 9a40 	vmov.f32	s18, s0
 8010e0e:	eef0 9a60 	vmov.f32	s19, s1
 8010e12:	f7ff fe01 	bl	8010a18 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010e16:	e7e8      	b.n	8010dea <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8010e18:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010e1c:	edd3 8a00 	vldr	s17, [r3]
 8010e20:	eef0 0a48 	vmov.f32	s1, s16
 8010e24:	4628      	mov	r0, r5
 8010e26:	eeb0 0a68 	vmov.f32	s0, s17
 8010e2a:	3401      	adds	r4, #1
 8010e2c:	f005 fa13 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e30:	a80d      	add	r0, sp, #52	@ 0x34
 8010e32:	eef0 9a60 	vmov.f32	s19, s1
 8010e36:	eeb0 9a40 	vmov.f32	s18, s0
 8010e3a:	f7ff fded 	bl	8010a18 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010e3e:	e7a3      	b.n	8010d88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010e40:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010e44:	ed93 8a00 	vldr	s16, [r3]
 8010e48:	e7ea      	b.n	8010e20 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8010e4a:	1ca3      	adds	r3, r4, #2
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	3404      	adds	r4, #4
 8010e50:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010e54:	ed53 0a01 	vldr	s1, [r3, #-4]
 8010e58:	ed13 0a02 	vldr	s0, [r3, #-8]
 8010e5c:	edd3 8a00 	vldr	s17, [r3]
 8010e60:	ed93 8a01 	vldr	s16, [r3, #4]
 8010e64:	f005 f9f7 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e68:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010e6c:	eeb0 0a68 	vmov.f32	s0, s17
 8010e70:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010e74:	eef0 0a48 	vmov.f32	s1, s16
 8010e78:	4628      	mov	r0, r5
 8010e7a:	f005 f9ec 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e7e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8010e82:	eef0 2a60 	vmov.f32	s5, s1
 8010e86:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8010e8a:	eeb0 2a40 	vmov.f32	s4, s0
 8010e8e:	a80d      	add	r0, sp, #52	@ 0x34
 8010e90:	eeb0 aa40 	vmov.f32	s20, s0
 8010e94:	eef0 aa60 	vmov.f32	s21, s1
 8010e98:	eeb0 0a49 	vmov.f32	s0, s18
 8010e9c:	eef0 0a69 	vmov.f32	s1, s19
 8010ea0:	f7ff f9a6 	bl	80101f0 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010ea4:	eef0 9a6a 	vmov.f32	s19, s21
 8010ea8:	eeb0 9a4a 	vmov.f32	s18, s20
 8010eac:	e76c      	b.n	8010d88 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010eae:	1d26      	adds	r6, r4, #4
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	3406      	adds	r4, #6
 8010eb4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010eb8:	ed56 0a03 	vldr	s1, [r6, #-12]
 8010ebc:	ed16 0a04 	vldr	s0, [r6, #-16]
 8010ec0:	edd6 8a00 	vldr	s17, [r6]
 8010ec4:	ed96 8a01 	vldr	s16, [r6, #4]
 8010ec8:	f005 f9c5 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ecc:	ed8d 0a07 	vstr	s0, [sp, #28]
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	ed16 0a02 	vldr	s0, [r6, #-8]
 8010ed6:	edcd 0a08 	vstr	s1, [sp, #32]
 8010eda:	ed56 0a01 	vldr	s1, [r6, #-4]
 8010ede:	f005 f9ba 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ee2:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010ee6:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010eea:	eeb0 0a68 	vmov.f32	s0, s17
 8010eee:	eef0 0a48 	vmov.f32	s1, s16
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f005 f9af 	bl	8016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ef8:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8010efc:	eeb0 3a40 	vmov.f32	s6, s0
 8010f00:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8010f04:	eef0 3a60 	vmov.f32	s7, s1
 8010f08:	eddd 1a08 	vldr	s3, [sp, #32]
 8010f0c:	eeb0 aa40 	vmov.f32	s20, s0
 8010f10:	ed9d 1a07 	vldr	s2, [sp, #28]
 8010f14:	eef0 aa60 	vmov.f32	s21, s1
 8010f18:	a80d      	add	r0, sp, #52	@ 0x34
 8010f1a:	eef0 0a69 	vmov.f32	s1, s19
 8010f1e:	eeb0 0a49 	vmov.f32	s0, s18
 8010f22:	f7ff f984 	bl	801022e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010f26:	e7bd      	b.n	8010ea4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8010f28:	7f7b      	ldrb	r3, [r7, #29]
 8010f2a:	a80d      	add	r0, sp, #52	@ 0x34
 8010f2c:	7fb9      	ldrb	r1, [r7, #30]
 8010f2e:	4359      	muls	r1, r3
 8010f30:	1c4b      	adds	r3, r1, #1
 8010f32:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8010f36:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010f3a:	f011 f887 	bl	802204c <_ZN8touchgfx6Canvas6renderEh>
 8010f3e:	4b07      	ldr	r3, [pc, #28]	@ (8010f5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8010f40:	4604      	mov	r4, r0
 8010f42:	a812      	add	r0, sp, #72	@ 0x48
 8010f44:	930d      	str	r3, [sp, #52]	@ 0x34
 8010f46:	f001 f839 	bl	8011fbc <_ZN8touchgfx7OutlineD1Ev>
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	b02a      	add	sp, #168	@ 0xa8
 8010f4e:	ecbd 8b06 	vpop	{d8-d10}
 8010f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f56:	bf00      	nop
 8010f58:	00000000 	.word	0x00000000
 8010f5c:	080272a4 	.word	0x080272a4

08010f60 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8010f60:	b410      	push	{r4}
 8010f62:	7f04      	ldrb	r4, [r0, #28]
 8010f64:	b11c      	cbz	r4, 8010f6e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8010f66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f6a:	f7ff bee3 	b.w	8010d34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8010f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f72:	f7ff bd6d 	b.w	8010a50 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>
	...

08010f78 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	4691      	mov	r9, r2
 8010f7e:	4602      	mov	r2, r0
 8010f80:	b085      	sub	sp, #20
 8010f82:	4605      	mov	r5, r0
 8010f84:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8010f88:	4688      	mov	r8, r1
 8010f8a:	469a      	mov	sl, r3
 8010f8c:	ab02      	add	r3, sp, #8
 8010f8e:	6851      	ldr	r1, [r2, #4]
 8010f90:	af02      	add	r7, sp, #8
 8010f92:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010f96:	c303      	stmia	r3!, {r0, r1}
 8010f98:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	dd08      	ble.n	8010fb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010fa0:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8010fa4:	2c00      	cmp	r4, #0
 8010fa6:	dd04      	ble.n	8010fb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8011064 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xec>)
 8010faa:	7812      	ldrb	r2, [r2, #0]
 8010fac:	b122      	cbz	r2, 8010fb8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x40>
 8010fae:	2a01      	cmp	r2, #1
 8010fb0:	d02d      	beq.n	801100e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x96>
 8010fb2:	b005      	add	sp, #20
 8010fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010fbc:	441c      	add	r4, r3
 8010fbe:	b2a4      	uxth	r4, r4
 8010fc0:	b226      	sxth	r6, r4
 8010fc2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010fc6:	42b3      	cmp	r3, r6
 8010fc8:	daf3      	bge.n	8010fb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8010fca:	4653      	mov	r3, sl
 8010fcc:	464a      	mov	r2, r9
 8010fce:	4641      	mov	r1, r8
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	e9cd b700 	strd	fp, r7, [sp]
 8010fd6:	f7ff ffc3 	bl	8010f60 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010fda:	b940      	cbnz	r0, 8010fee <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8010fdc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d004      	beq.n	8010fee <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x76>
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	105b      	asrs	r3, r3, #1
 8010fe8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010fec:	e7ed      	b.n	8010fca <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x52>
 8010fee:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010ff2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010ff6:	4413      	add	r3, r2
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	441a      	add	r2, r3
 8010ffc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011000:	b212      	sxth	r2, r2
 8011002:	4296      	cmp	r6, r2
 8011004:	dadd      	bge.n	8010fc2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 8011006:	1ae3      	subs	r3, r4, r3
 8011008:	f8ad 300e 	strh.w	r3, [sp, #14]
 801100c:	e7d9      	b.n	8010fc2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x4a>
 801100e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8011012:	441c      	add	r4, r3
 8011014:	b2a4      	uxth	r4, r4
 8011016:	b226      	sxth	r6, r4
 8011018:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801101c:	42b3      	cmp	r3, r6
 801101e:	dac8      	bge.n	8010fb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3a>
 8011020:	4653      	mov	r3, sl
 8011022:	464a      	mov	r2, r9
 8011024:	4641      	mov	r1, r8
 8011026:	4628      	mov	r0, r5
 8011028:	e9cd b700 	strd	fp, r7, [sp]
 801102c:	f7ff ff98 	bl	8010f60 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8011030:	b940      	cbnz	r0, 8011044 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 8011032:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d004      	beq.n	8011044 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xcc>
 801103a:	3301      	adds	r3, #1
 801103c:	105b      	asrs	r3, r3, #1
 801103e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011042:	e7ed      	b.n	8011020 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa8>
 8011044:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011048:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801104c:	4413      	add	r3, r2
 801104e:	b29b      	uxth	r3, r3
 8011050:	441a      	add	r2, r3
 8011052:	f8ad 3008 	strh.w	r3, [sp, #8]
 8011056:	b212      	sxth	r2, r2
 8011058:	4296      	cmp	r6, r2
 801105a:	dadd      	bge.n	8011018 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 801105c:	1ae3      	subs	r3, r4, r3
 801105e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011062:	e7d9      	b.n	8011018 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0xa0>
 8011064:	24025370 	.word	0x24025370

08011068 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8011068:	0c0b      	lsrs	r3, r1, #16
 801106a:	60c1      	str	r1, [r0, #12]
 801106c:	7481      	strb	r1, [r0, #18]
 801106e:	7403      	strb	r3, [r0, #16]
 8011070:	0a0b      	lsrs	r3, r1, #8
 8011072:	7443      	strb	r3, [r0, #17]
 8011074:	4770      	bx	lr

08011076 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8011076:	f1a0 0008 	sub.w	r0, r0, #8
 801107a:	e7f5      	b.n	8011068 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

0801107c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 801107c:	b508      	push	{r3, lr}
 801107e:	4b05      	ldr	r3, [pc, #20]	@ (8011094 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8011080:	6818      	ldr	r0, [r3, #0]
 8011082:	6803      	ldr	r3, [r0, #0]
 8011084:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011088:	4798      	blx	r3
 801108a:	1e43      	subs	r3, r0, #1
 801108c:	4258      	negs	r0, r3
 801108e:	4158      	adcs	r0, r3
 8011090:	bd08      	pop	{r3, pc}
 8011092:	bf00      	nop
 8011094:	24025378 	.word	0x24025378

08011098 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8011098:	4770      	bx	lr

0801109a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 801109a:	3808      	subs	r0, #8
 801109c:	4770      	bx	lr

0801109e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801109e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80110a2:	b410      	push	{r4}
 80110a4:	188c      	adds	r4, r1, r2
 80110a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80110aa:	68c2      	ldr	r2, [r0, #12]
 80110ac:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80110b0:	4620      	mov	r0, r4
 80110b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b6:	f7f2 b9ab 	b.w	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

080110ba <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 80110ba:	f7f2 b985 	b.w	80033c8 <_ZN8touchgfx5paint8tearDownEv>

080110be <_ZN8touchgfx13PainterRGB888D0Ev>:
 80110be:	b510      	push	{r4, lr}
 80110c0:	4604      	mov	r4, r0
 80110c2:	2114      	movs	r1, #20
 80110c4:	f011 fbae 	bl	8022824 <_ZdlPvj>
 80110c8:	4620      	mov	r0, r4
 80110ca:	bd10      	pop	{r4, pc}

080110cc <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 80110cc:	f1a0 0008 	sub.w	r0, r0, #8
 80110d0:	e7f5      	b.n	80110be <_ZN8touchgfx13PainterRGB888D0Ev>
	...

080110d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 80110d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80110d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110dc:	4411      	add	r1, r2
 80110de:	7c42      	ldrb	r2, [r0, #17]
 80110e0:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 80110e4:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80110e8:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	f000 8084 	beq.w	80111fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 80110f2:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80110f6:	ed90 7a08 	vldr	s14, [r0, #32]
 80110fa:	42a2      	cmp	r2, r4
 80110fc:	68c3      	ldr	r3, [r0, #12]
 80110fe:	db20      	blt.n	8011142 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8011100:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011104:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110c:	bfc8      	it	gt
 801110e:	2200      	movgt	r2, #0
 8011110:	589a      	ldr	r2, [r3, r2]
 8011112:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011116:	7c03      	ldrb	r3, [r0, #16]
 8011118:	fa5f fc82 	uxtb.w	ip, r2
 801111c:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8011120:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8011124:	440e      	add	r6, r1
 8011126:	b36b      	cbz	r3, 8011184 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8011128:	2dff      	cmp	r5, #255	@ 0xff
 801112a:	d12b      	bne.n	8011184 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801112c:	42b1      	cmp	r1, r6
 801112e:	f080 8204 	bcs.w	801153a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011132:	f881 c000 	strb.w	ip, [r1]
 8011136:	3103      	adds	r1, #3
 8011138:	f801 7c02 	strb.w	r7, [r1, #-2]
 801113c:	f801 4c01 	strb.w	r4, [r1, #-1]
 8011140:	e7f4      	b.n	801112c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8011142:	f9b0 700a 	ldrsh.w	r7, [r0, #10]
 8011146:	42a7      	cmp	r7, r4
 8011148:	dc08      	bgt.n	801115c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 801114a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801114e:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011156:	bfd8      	it	le
 8011158:	2200      	movle	r2, #0
 801115a:	e7d9      	b.n	8011110 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 801115c:	1aa2      	subs	r2, r4, r2
 801115e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011162:	ee07 2a90 	vmov	s15, r2
 8011166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801116e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011176:	ee17 2a90 	vmov	r2, s15
 801117a:	bfd8      	it	le
 801117c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8011180:	0092      	lsls	r2, r2, #2
 8011182:	e7c5      	b.n	8011110 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8011184:	0e12      	lsrs	r2, r2, #24
 8011186:	4355      	muls	r5, r2
 8011188:	1c6a      	adds	r2, r5, #1
 801118a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801118e:	122d      	asrs	r5, r5, #8
 8011190:	43e8      	mvns	r0, r5
 8011192:	b2ad      	uxth	r5, r5
 8011194:	fb1c fc05 	smulbb	ip, ip, r5
 8011198:	b2c0      	uxtb	r0, r0
 801119a:	fb17 f705 	smulbb	r7, r7, r5
 801119e:	fb14 f505 	smulbb	r5, r4, r5
 80111a2:	fa1f fc8c 	uxth.w	ip, ip
 80111a6:	b2bf      	uxth	r7, r7
 80111a8:	b2ad      	uxth	r5, r5
 80111aa:	428e      	cmp	r6, r1
 80111ac:	f101 0303 	add.w	r3, r1, #3
 80111b0:	f240 81c3 	bls.w	801153a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80111b4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80111b8:	fb02 c200 	mla	r2, r2, r0, ip
 80111bc:	b292      	uxth	r2, r2
 80111be:	1c51      	adds	r1, r2, #1
 80111c0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80111c4:	1212      	asrs	r2, r2, #8
 80111c6:	f803 2c03 	strb.w	r2, [r3, #-3]
 80111ca:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80111ce:	fb02 7200 	mla	r2, r2, r0, r7
 80111d2:	b292      	uxth	r2, r2
 80111d4:	1c51      	adds	r1, r2, #1
 80111d6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80111da:	1212      	asrs	r2, r2, #8
 80111dc:	f803 2c02 	strb.w	r2, [r3, #-2]
 80111e0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80111e4:	fb02 5200 	mla	r2, r2, r0, r5
 80111e8:	b292      	uxth	r2, r2
 80111ea:	1c51      	adds	r1, r2, #1
 80111ec:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80111f0:	4619      	mov	r1, r3
 80111f2:	1212      	asrs	r2, r2, #8
 80111f4:	f803 2c01 	strb.w	r2, [r3, #-1]
 80111f8:	e7d7      	b.n	80111aa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 80111fa:	7c82      	ldrb	r2, [r0, #18]
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	d047      	beq.n	8011290 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8011200:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8011204:	ee07 2a10 	vmov	s14, r2
 8011208:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801120c:	ee07 3a90 	vmov	s15, r3
 8011210:	461a      	mov	r2, r3
 8011212:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011216:	eef4 6ac7 	vcmpe.f32	s13, s14
 801121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121e:	f200 808e 	bhi.w	801133e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8011222:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011226:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801122a:	68c7      	ldr	r7, [r0, #12]
 801122c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011230:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011234:	ee06 6a90 	vmov	s13, r6
 8011238:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801123c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011244:	bf4a      	itet	mi
 8011246:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801124a:	4634      	movpl	r4, r6
 801124c:	ee17 4a90 	vmovmi	r4, s15
 8011250:	edd0 7a08 	vldr	s15, [r0, #32]
 8011254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011258:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 801125c:	448e      	add	lr, r1
 801125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011262:	bfc8      	it	gt
 8011264:	2200      	movgt	r2, #0
 8011266:	58bf      	ldr	r7, [r7, r2]
 8011268:	7c02      	ldrb	r2, [r0, #16]
 801126a:	fa5f f987 	uxtb.w	r9, r7
 801126e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8011272:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8011276:	b31a      	cbz	r2, 80112c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8011278:	2dff      	cmp	r5, #255	@ 0xff
 801127a:	d121      	bne.n	80112c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801127c:	4571      	cmp	r1, lr
 801127e:	d25d      	bcs.n	801133c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8011280:	f881 9000 	strb.w	r9, [r1]
 8011284:	3103      	adds	r1, #3
 8011286:	f801 8c02 	strb.w	r8, [r1, #-2]
 801128a:	f801 cc01 	strb.w	ip, [r1, #-1]
 801128e:	e7f5      	b.n	801127c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8011290:	ee07 4a90 	vmov	s15, r4
 8011294:	ed90 7a06 	vldr	s14, [r0, #24]
 8011298:	edd0 6a05 	vldr	s13, [r0, #20]
 801129c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80112a8:	edd0 7a08 	vldr	s15, [r0, #32]
 80112ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80112b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112b4:	bf44      	itt	mi
 80112b6:	edd0 7a07 	vldrmi	s15, [r0, #28]
 80112ba:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 80112be:	e7a5      	b.n	801120c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 80112c0:	0e3f      	lsrs	r7, r7, #24
 80112c2:	436f      	muls	r7, r5
 80112c4:	1c7a      	adds	r2, r7, #1
 80112c6:	eb02 2227 	add.w	r2, r2, r7, asr #8
 80112ca:	1212      	asrs	r2, r2, #8
 80112cc:	ea6f 0a02 	mvn.w	sl, r2
 80112d0:	b292      	uxth	r2, r2
 80112d2:	fb19 f902 	smulbb	r9, r9, r2
 80112d6:	fa5f fa8a 	uxtb.w	sl, sl
 80112da:	fb18 f802 	smulbb	r8, r8, r2
 80112de:	fb1c fc02 	smulbb	ip, ip, r2
 80112e2:	fa1f f989 	uxth.w	r9, r9
 80112e6:	fa1f f888 	uxth.w	r8, r8
 80112ea:	fa1f fc8c 	uxth.w	ip, ip
 80112ee:	458e      	cmp	lr, r1
 80112f0:	f101 0203 	add.w	r2, r1, #3
 80112f4:	d922      	bls.n	801133c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80112f6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80112fa:	fb01 910a 	mla	r1, r1, sl, r9
 80112fe:	b289      	uxth	r1, r1
 8011300:	1c4f      	adds	r7, r1, #1
 8011302:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011306:	1209      	asrs	r1, r1, #8
 8011308:	f802 1c03 	strb.w	r1, [r2, #-3]
 801130c:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011310:	fb01 810a 	mla	r1, r1, sl, r8
 8011314:	b289      	uxth	r1, r1
 8011316:	1c4f      	adds	r7, r1, #1
 8011318:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801131c:	1209      	asrs	r1, r1, #8
 801131e:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011322:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011326:	fb01 c10a 	mla	r1, r1, sl, ip
 801132a:	b289      	uxth	r1, r1
 801132c:	1c4f      	adds	r7, r1, #1
 801132e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011332:	1209      	asrs	r1, r1, #8
 8011334:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011338:	4611      	mov	r1, r2
 801133a:	e7d8      	b.n	80112ee <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 801133c:	191a      	adds	r2, r3, r4
 801133e:	4433      	add	r3, r6
 8011340:	b21b      	sxth	r3, r3
 8011342:	4293      	cmp	r3, r2
 8011344:	f340 80f9 	ble.w	801153a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011348:	edd0 7a07 	vldr	s15, [r0, #28]
 801134c:	ee06 2a90 	vmov	s13, r2
 8011350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011354:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8011358:	eef4 7ae6 	vcmpe.f32	s15, s13
 801135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011360:	f340 80b0 	ble.w	80114c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8011364:	ee06 3a10 	vmov	s12, r3
 8011368:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801136c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8011540 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8011370:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011374:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011378:	ed90 6a08 	vldr	s12, [r0, #32]
 801137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011380:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011384:	bfd6      	itet	le
 8011386:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801138a:	469c      	movgt	ip, r3
 801138c:	ee17 ca90 	vmovle	ip, s15
 8011390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011394:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8011544 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8011398:	ebac 0202 	sub.w	r2, ip, r2
 801139c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80113a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80113a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80113a8:	188c      	adds	r4, r1, r2
 80113aa:	7c02      	ldrb	r2, [r0, #16]
 80113ac:	b1d2      	cbz	r2, 80113e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80113ae:	2dff      	cmp	r5, #255	@ 0xff
 80113b0:	d118      	bne.n	80113e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80113b2:	42a1      	cmp	r1, r4
 80113b4:	d261      	bcs.n	801147a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80113b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113ba:	68c6      	ldr	r6, [r0, #12]
 80113bc:	3103      	adds	r1, #3
 80113be:	ee17 7a10 	vmov	r7, s14
 80113c2:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 80113c6:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 80113ca:	f801 6c03 	strb.w	r6, [r1, #-3]
 80113ce:	7856      	ldrb	r6, [r2, #1]
 80113d0:	f801 6c02 	strb.w	r6, [r1, #-2]
 80113d4:	7892      	ldrb	r2, [r2, #2]
 80113d6:	f801 2c01 	strb.w	r2, [r1, #-1]
 80113da:	ed90 7a08 	vldr	s14, [r0, #32]
 80113de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80113e2:	e7e6      	b.n	80113b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 80113e4:	68c2      	ldr	r2, [r0, #12]
 80113e6:	428c      	cmp	r4, r1
 80113e8:	f101 0e03 	add.w	lr, r1, #3
 80113ec:	d945      	bls.n	801147a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80113ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80113f2:	ee17 9a10 	vmov	r9, s14
 80113f6:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 80113fa:	f898 7003 	ldrb.w	r7, [r8, #3]
 80113fe:	fb07 f605 	mul.w	r6, r7, r5
 8011402:	1c77      	adds	r7, r6, #1
 8011404:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8011408:	123f      	asrs	r7, r7, #8
 801140a:	b2b9      	uxth	r1, r7
 801140c:	43ff      	mvns	r7, r7
 801140e:	b2fe      	uxtb	r6, r7
 8011410:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8011414:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8011418:	fb19 f906 	smulbb	r9, r9, r6
 801141c:	fb07 9701 	mla	r7, r7, r1, r9
 8011420:	b2bf      	uxth	r7, r7
 8011422:	f107 0901 	add.w	r9, r7, #1
 8011426:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801142a:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801142e:	fb19 f906 	smulbb	r9, r9, r6
 8011432:	123f      	asrs	r7, r7, #8
 8011434:	f80e 7c03 	strb.w	r7, [lr, #-3]
 8011438:	f898 7001 	ldrb.w	r7, [r8, #1]
 801143c:	fb07 9701 	mla	r7, r7, r1, r9
 8011440:	b2bf      	uxth	r7, r7
 8011442:	f107 0901 	add.w	r9, r7, #1
 8011446:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801144a:	123f      	asrs	r7, r7, #8
 801144c:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8011450:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8011454:	f898 8002 	ldrb.w	r8, [r8, #2]
 8011458:	fb17 f606 	smulbb	r6, r7, r6
 801145c:	fb08 6601 	mla	r6, r8, r1, r6
 8011460:	b2b6      	uxth	r6, r6
 8011462:	1c71      	adds	r1, r6, #1
 8011464:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8011468:	4671      	mov	r1, lr
 801146a:	1236      	asrs	r6, r6, #8
 801146c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8011470:	ed90 7a08 	vldr	s14, [r0, #32]
 8011474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011478:	e7b5      	b.n	80113e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801147a:	4563      	cmp	r3, ip
 801147c:	dd5d      	ble.n	801153a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801147e:	edd0 7a08 	vldr	s15, [r0, #32]
 8011482:	eba3 030c 	sub.w	r3, r3, ip
 8011486:	68c4      	ldr	r4, [r0, #12]
 8011488:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801148c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011494:	7c00      	ldrb	r0, [r0, #16]
 8011496:	440b      	add	r3, r1
 8011498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801149c:	bfd8      	it	le
 801149e:	2200      	movle	r2, #0
 80114a0:	58a2      	ldr	r2, [r4, r2]
 80114a2:	b2d4      	uxtb	r4, r2
 80114a4:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80114a8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80114ac:	b160      	cbz	r0, 80114c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80114ae:	2dff      	cmp	r5, #255	@ 0xff
 80114b0:	d10a      	bne.n	80114c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80114b2:	4299      	cmp	r1, r3
 80114b4:	d241      	bcs.n	801153a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80114b6:	700c      	strb	r4, [r1, #0]
 80114b8:	3103      	adds	r1, #3
 80114ba:	f801 cc02 	strb.w	ip, [r1, #-2]
 80114be:	f801 7c01 	strb.w	r7, [r1, #-1]
 80114c2:	e7f6      	b.n	80114b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 80114c4:	4694      	mov	ip, r2
 80114c6:	e7da      	b.n	801147e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 80114c8:	0e12      	lsrs	r2, r2, #24
 80114ca:	436a      	muls	r2, r5
 80114cc:	1c55      	adds	r5, r2, #1
 80114ce:	eb05 2522 	add.w	r5, r5, r2, asr #8
 80114d2:	122d      	asrs	r5, r5, #8
 80114d4:	43ee      	mvns	r6, r5
 80114d6:	b2ad      	uxth	r5, r5
 80114d8:	fb14 f405 	smulbb	r4, r4, r5
 80114dc:	b2f6      	uxtb	r6, r6
 80114de:	fb1c f005 	smulbb	r0, ip, r5
 80114e2:	fb17 f505 	smulbb	r5, r7, r5
 80114e6:	b2a4      	uxth	r4, r4
 80114e8:	b280      	uxth	r0, r0
 80114ea:	b2ad      	uxth	r5, r5
 80114ec:	428b      	cmp	r3, r1
 80114ee:	f101 0203 	add.w	r2, r1, #3
 80114f2:	d922      	bls.n	801153a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80114f4:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80114f8:	fb01 4106 	mla	r1, r1, r6, r4
 80114fc:	b289      	uxth	r1, r1
 80114fe:	1c4f      	adds	r7, r1, #1
 8011500:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011504:	1209      	asrs	r1, r1, #8
 8011506:	f802 1c03 	strb.w	r1, [r2, #-3]
 801150a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801150e:	fb01 0106 	mla	r1, r1, r6, r0
 8011512:	b289      	uxth	r1, r1
 8011514:	1c4f      	adds	r7, r1, #1
 8011516:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801151a:	1209      	asrs	r1, r1, #8
 801151c:	f802 1c02 	strb.w	r1, [r2, #-2]
 8011520:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011524:	fb01 5106 	mla	r1, r1, r6, r5
 8011528:	b289      	uxth	r1, r1
 801152a:	1c4f      	adds	r7, r1, #1
 801152c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011530:	1209      	asrs	r1, r1, #8
 8011532:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011536:	4611      	mov	r1, r2
 8011538:	e7d8      	b.n	80114ec <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801153a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801153e:	bf00      	nop
 8011540:	447ffffe 	.word	0x447ffffe
 8011544:	00000000 	.word	0x00000000

08011548 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 8011548:	4770      	bx	lr

0801154a <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801154a:	4770      	bx	lr

0801154c <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 801154c:	b510      	push	{r4, lr}
 801154e:	4604      	mov	r4, r0
 8011550:	2124      	movs	r1, #36	@ 0x24
 8011552:	f011 f967 	bl	8022824 <_ZdlPvj>
 8011556:	4620      	mov	r0, r4
 8011558:	bd10      	pop	{r4, pc}
	...

0801155c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801155c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801155e:	6803      	ldr	r3, [r0, #0]
 8011560:	460d      	mov	r5, r1
 8011562:	4604      	mov	r4, r0
 8011564:	4601      	mov	r1, r0
 8011566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011568:	a802      	add	r0, sp, #8
 801156a:	4798      	blx	r3
 801156c:	6828      	ldr	r0, [r5, #0]
 801156e:	6869      	ldr	r1, [r5, #4]
 8011570:	466b      	mov	r3, sp
 8011572:	c303      	stmia	r3!, {r0, r1}
 8011574:	4668      	mov	r0, sp
 8011576:	4619      	mov	r1, r3
 8011578:	f7fd fc06 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 801157c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801157e:	b188      	cbz	r0, 80115a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011580:	6803      	ldr	r3, [r0, #0]
 8011582:	1d21      	adds	r1, r4, #4
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	4798      	blx	r3
 8011588:	b160      	cbz	r0, 80115a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801158a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	dd08      	ble.n	80115a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011592:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011596:	2d00      	cmp	r5, #0
 8011598:	dd04      	ble.n	80115a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801159a:	4a2b      	ldr	r2, [pc, #172]	@ (8011648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801159c:	7812      	ldrb	r2, [r2, #0]
 801159e:	b11a      	cbz	r2, 80115a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80115a0:	2a01      	cmp	r2, #1
 80115a2:	d029      	beq.n	80115f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80115a4:	b004      	add	sp, #16
 80115a6:	bd70      	pop	{r4, r5, r6, pc}
 80115a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80115ac:	441d      	add	r5, r3
 80115ae:	b2ad      	uxth	r5, r5
 80115b0:	b22e      	sxth	r6, r5
 80115b2:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80115b6:	42b3      	cmp	r3, r6
 80115b8:	daf4      	bge.n	80115a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80115ba:	6823      	ldr	r3, [r4, #0]
 80115bc:	4669      	mov	r1, sp
 80115be:	4620      	mov	r0, r4
 80115c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115c2:	4798      	blx	r3
 80115c4:	b940      	cbnz	r0, 80115d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80115c6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d004      	beq.n	80115d8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 80115ce:	3301      	adds	r3, #1
 80115d0:	105b      	asrs	r3, r3, #1
 80115d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80115d6:	e7f0      	b.n	80115ba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80115d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80115dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80115e0:	4413      	add	r3, r2
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	441a      	add	r2, r3
 80115e6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80115ea:	b212      	sxth	r2, r2
 80115ec:	4296      	cmp	r6, r2
 80115ee:	dae0      	bge.n	80115b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80115f0:	1aeb      	subs	r3, r5, r3
 80115f2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80115f6:	e7dc      	b.n	80115b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80115f8:	f8bd 5000 	ldrh.w	r5, [sp]
 80115fc:	441d      	add	r5, r3
 80115fe:	b2ad      	uxth	r5, r5
 8011600:	b22e      	sxth	r6, r5
 8011602:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011606:	42b3      	cmp	r3, r6
 8011608:	dacc      	bge.n	80115a4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801160a:	6823      	ldr	r3, [r4, #0]
 801160c:	4669      	mov	r1, sp
 801160e:	4620      	mov	r0, r4
 8011610:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011612:	4798      	blx	r3
 8011614:	b940      	cbnz	r0, 8011628 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011616:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d004      	beq.n	8011628 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801161e:	3301      	adds	r3, #1
 8011620:	105b      	asrs	r3, r3, #1
 8011622:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011626:	e7f0      	b.n	801160a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011628:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801162c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011630:	4413      	add	r3, r2
 8011632:	b29b      	uxth	r3, r3
 8011634:	441a      	add	r2, r3
 8011636:	f8ad 3000 	strh.w	r3, [sp]
 801163a:	b212      	sxth	r2, r2
 801163c:	4296      	cmp	r6, r2
 801163e:	dae0      	bge.n	8011602 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011640:	1aeb      	subs	r3, r5, r3
 8011642:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011646:	e7dc      	b.n	8011602 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8011648:	24025370 	.word	0x24025370

0801164c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801164c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801164e:	6803      	ldr	r3, [r0, #0]
 8011650:	4604      	mov	r4, r0
 8011652:	4601      	mov	r1, r0
 8011654:	4668      	mov	r0, sp
 8011656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011658:	4798      	blx	r3
 801165a:	2100      	movs	r1, #0
 801165c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011660:	4668      	mov	r0, sp
 8011662:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011666:	9102      	str	r1, [sp, #8]
 8011668:	a902      	add	r1, sp, #8
 801166a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801166e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011672:	f7fd fb89 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	4669      	mov	r1, sp
 801167a:	4620      	mov	r0, r4
 801167c:	691b      	ldr	r3, [r3, #16]
 801167e:	4798      	blx	r3
 8011680:	b004      	add	sp, #16
 8011682:	bd10      	pop	{r4, pc}

08011684 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011684:	2101      	movs	r1, #1
 8011686:	2200      	movs	r2, #0
 8011688:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801168c:	490a      	ldr	r1, [pc, #40]	@ (80116b8 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801168e:	8082      	strh	r2, [r0, #4]
 8011690:	6001      	str	r1, [r0, #0]
 8011692:	21ff      	movs	r1, #255	@ 0xff
 8011694:	80c2      	strh	r2, [r0, #6]
 8011696:	8102      	strh	r2, [r0, #8]
 8011698:	8142      	strh	r2, [r0, #10]
 801169a:	8182      	strh	r2, [r0, #12]
 801169c:	81c2      	strh	r2, [r0, #14]
 801169e:	8202      	strh	r2, [r0, #16]
 80116a0:	8242      	strh	r2, [r0, #18]
 80116a2:	61c2      	str	r2, [r0, #28]
 80116a4:	8402      	strh	r2, [r0, #32]
 80116a6:	8442      	strh	r2, [r0, #34]	@ 0x22
 80116a8:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80116ac:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80116b0:	6282      	str	r2, [r0, #40]	@ 0x28
 80116b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80116b6:	4770      	bx	lr
 80116b8:	08026c70 	.word	0x08026c70

080116bc <_ZNK8touchgfx5Image17invalidateContentEv>:
 80116bc:	b508      	push	{r3, lr}
 80116be:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80116c2:	b10b      	cbz	r3, 80116c8 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 80116c4:	f7f2 f91d 	bl	8003902 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80116c8:	bd08      	pop	{r3, pc}

080116ca <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 80116ca:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80116ce:	4770      	bx	lr

080116d0 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 80116d0:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80116d4:	4770      	bx	lr

080116d6 <_ZN8touchgfx13ScalableImageD1Ev>:
 80116d6:	4770      	bx	lr

080116d8 <_ZN8touchgfx13ScalableImageD0Ev>:
 80116d8:	b510      	push	{r4, lr}
 80116da:	4604      	mov	r4, r0
 80116dc:	212c      	movs	r1, #44	@ 0x2c
 80116de:	f011 f8a1 	bl	8022824 <_ZdlPvj>
 80116e2:	4620      	mov	r0, r4
 80116e4:	bd10      	pop	{r4, pc}

080116e6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 80116e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116e8:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 80116ec:	b085      	sub	sp, #20
 80116ee:	4604      	mov	r4, r0
 80116f0:	460d      	mov	r5, r1
 80116f2:	2bff      	cmp	r3, #255	@ 0xff
 80116f4:	d128      	bne.n	8011748 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80116f6:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 80116fa:	4668      	mov	r0, sp
 80116fc:	4631      	mov	r1, r6
 80116fe:	f006 fadf 	bl	8017cc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011702:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8011706:	4630      	mov	r0, r6
 8011708:	f006 fa72 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801170c:	4287      	cmp	r7, r0
 801170e:	d11b      	bne.n	8011748 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8011710:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8011714:	4630      	mov	r0, r6
 8011716:	f006 fa9f 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801171a:	4287      	cmp	r7, r0
 801171c:	d114      	bne.n	8011748 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 801171e:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 8011722:	2100      	movs	r1, #0
 8011724:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8011728:	f8ad 300e 	strh.w	r3, [sp, #14]
 801172c:	466b      	mov	r3, sp
 801172e:	9102      	str	r1, [sp, #8]
 8011730:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011734:	cb03      	ldmia	r3!, {r0, r1}
 8011736:	6020      	str	r0, [r4, #0]
 8011738:	4620      	mov	r0, r4
 801173a:	6061      	str	r1, [r4, #4]
 801173c:	4619      	mov	r1, r3
 801173e:	f7fd fb23 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8011742:	4620      	mov	r0, r4
 8011744:	b005      	add	sp, #20
 8011746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011748:	2300      	movs	r3, #0
 801174a:	8023      	strh	r3, [r4, #0]
 801174c:	8063      	strh	r3, [r4, #2]
 801174e:	80a3      	strh	r3, [r4, #4]
 8011750:	80e3      	strh	r3, [r4, #6]
 8011752:	e7f6      	b.n	8011742 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

08011754 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8011754:	b538      	push	{r3, r4, r5, lr}
 8011756:	2300      	movs	r3, #0
 8011758:	2501      	movs	r5, #1
 801175a:	4604      	mov	r4, r0
 801175c:	8083      	strh	r3, [r0, #4]
 801175e:	80c3      	strh	r3, [r0, #6]
 8011760:	8103      	strh	r3, [r0, #8]
 8011762:	8143      	strh	r3, [r0, #10]
 8011764:	8183      	strh	r3, [r0, #12]
 8011766:	81c3      	strh	r3, [r0, #14]
 8011768:	8203      	strh	r3, [r0, #16]
 801176a:	8243      	strh	r3, [r0, #18]
 801176c:	61c3      	str	r3, [r0, #28]
 801176e:	8403      	strh	r3, [r0, #32]
 8011770:	8443      	strh	r3, [r0, #34]	@ 0x22
 8011772:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8011776:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 801177a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801177e:	4b07      	ldr	r3, [pc, #28]	@ (801179c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8011780:	6003      	str	r3, [r0, #0]
 8011782:	880b      	ldrh	r3, [r1, #0]
 8011784:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011786:	23ff      	movs	r3, #255	@ 0xff
 8011788:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801178c:	f000 fab1 	bl	8011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8011790:	4b03      	ldr	r3, [pc, #12]	@ (80117a0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8011792:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8011796:	4620      	mov	r0, r4
 8011798:	6023      	str	r3, [r4, #0]
 801179a:	bd38      	pop	{r3, r4, r5, pc}
 801179c:	08026dc4 	.word	0x08026dc4
 80117a0:	08026ce8 	.word	0x08026ce8

080117a4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 80117a4:	4603      	mov	r3, r0
 80117a6:	3026      	adds	r0, #38	@ 0x26
 80117a8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80117ac:	b90b      	cbnz	r3, 80117b2 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 80117ae:	f004 bdff 	b.w	80163b0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 80117b2:	f004 be0d 	b.w	80163d0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

080117b8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 80117b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117bc:	4604      	mov	r4, r0
 80117be:	b0b3      	sub	sp, #204	@ 0xcc
 80117c0:	469b      	mov	fp, r3
 80117c2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80117c6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80117ca:	2500      	movs	r5, #0
 80117cc:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80117d0:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 80117d4:	ab11      	add	r3, sp, #68	@ 0x44
 80117d6:	9206      	str	r2, [sp, #24]
 80117d8:	4618      	mov	r0, r3
 80117da:	9511      	str	r5, [sp, #68]	@ 0x44
 80117dc:	9307      	str	r3, [sp, #28]
 80117de:	ad13      	add	r5, sp, #76	@ 0x4c
 80117e0:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 80117e4:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 80117e8:	f7fd face 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 80117ec:	9b07      	ldr	r3, [sp, #28]
 80117ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80117f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80117f6:	6821      	ldr	r1, [r4, #0]
 80117f8:	4620      	mov	r0, r4
 80117fa:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80117fc:	4629      	mov	r1, r5
 80117fe:	47b0      	blx	r6
 8011800:	4621      	mov	r1, r4
 8011802:	a815      	add	r0, sp, #84	@ 0x54
 8011804:	1d26      	adds	r6, r4, #4
 8011806:	f004 f985 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801180a:	a815      	add	r0, sp, #84	@ 0x54
 801180c:	f002 fd7a 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011810:	9b07      	ldr	r3, [sp, #28]
 8011812:	4631      	mov	r1, r6
 8011814:	4618      	mov	r0, r3
 8011816:	f002 fdb9 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801181a:	4628      	mov	r0, r5
 801181c:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 8011820:	f002 fd70 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011824:	4628      	mov	r0, r5
 8011826:	f006 fad5 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801182a:	9007      	str	r0, [sp, #28]
 801182c:	2800      	cmp	r0, #0
 801182e:	f000 80ce 	beq.w	80119ce <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 8011832:	f8db 200c 	ldr.w	r2, [fp, #12]
 8011836:	a809      	add	r0, sp, #36	@ 0x24
 8011838:	f8db 1000 	ldr.w	r1, [fp]
 801183c:	920c      	str	r2, [sp, #48]	@ 0x30
 801183e:	f8da 2000 	ldr.w	r2, [sl]
 8011842:	9109      	str	r1, [sp, #36]	@ 0x24
 8011844:	920d      	str	r2, [sp, #52]	@ 0x34
 8011846:	f8da 2004 	ldr.w	r2, [sl, #4]
 801184a:	f8db 1004 	ldr.w	r1, [fp, #4]
 801184e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011850:	f8da 2008 	ldr.w	r2, [sl, #8]
 8011854:	910a      	str	r1, [sp, #40]	@ 0x28
 8011856:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011858:	f8db 1008 	ldr.w	r1, [fp, #8]
 801185c:	f8da 200c 	ldr.w	r2, [sl, #12]
 8011860:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011862:	a90d      	add	r1, sp, #52	@ 0x34
 8011864:	9210      	str	r2, [sp, #64]	@ 0x40
 8011866:	4632      	mov	r2, r6
 8011868:	f002 fd74 	bl	8014354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801186c:	4632      	mov	r2, r6
 801186e:	a90e      	add	r1, sp, #56	@ 0x38
 8011870:	a80a      	add	r0, sp, #40	@ 0x28
 8011872:	f002 fd6f 	bl	8014354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8011876:	4632      	mov	r2, r6
 8011878:	a90f      	add	r1, sp, #60	@ 0x3c
 801187a:	a80b      	add	r0, sp, #44	@ 0x2c
 801187c:	f002 fd6a 	bl	8014354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8011880:	4632      	mov	r2, r6
 8011882:	a910      	add	r1, sp, #64	@ 0x40
 8011884:	a80c      	add	r0, sp, #48	@ 0x30
 8011886:	f002 fd65 	bl	8014354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801188a:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 801188e:	ed97 3a00 	vldr	s6, [r7]
 8011892:	eef0 6a67 	vmov.f32	s13, s15
 8011896:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801189a:	edd7 4a01 	vldr	s9, [r7, #4]
 801189e:	eeb0 7a67 	vmov.f32	s14, s15
 80118a2:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80118a6:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 80118aa:	ed99 2a00 	vldr	s4, [r9]
 80118ae:	eeb0 6a67 	vmov.f32	s12, s15
 80118b2:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 80118b6:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80118ba:	edd8 2a00 	vldr	s5, [r8]
 80118be:	edd9 3a01 	vldr	s7, [r9, #4]
 80118c2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80118c6:	ed98 4a01 	vldr	s8, [r8, #4]
 80118ca:	ed99 5a02 	vldr	s10, [r9, #8]
 80118ce:	edd8 5a02 	vldr	s11, [r8, #8]
 80118d2:	ee16 6a10 	vmov	r6, s12
 80118d6:	eeb0 6a67 	vmov.f32	s12, s15
 80118da:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80118de:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80118e2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80118e6:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80118ea:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80118ee:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 80118f2:	ee16 0a10 	vmov	r0, s12
 80118f6:	eeb0 6a67 	vmov.f32	s12, s15
 80118fa:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80118fe:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 8011902:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8011906:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 801190a:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 801190e:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 8011912:	ee16 1a10 	vmov	r1, s12
 8011916:	eeb0 6a67 	vmov.f32	s12, s15
 801191a:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801191e:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 8011922:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8011926:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 801192a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801192e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8011932:	68ff      	ldr	r7, [r7, #12]
 8011934:	ee16 2a10 	vmov	r2, s12
 8011938:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 801193c:	9624      	str	r6, [sp, #144]	@ 0x90
 801193e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8011942:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8011946:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 801194a:	4628      	mov	r0, r5
 801194c:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 8011950:	9b06      	ldr	r3, [sp, #24]
 8011952:	922d      	str	r2, [sp, #180]	@ 0xb4
 8011954:	4a1f      	ldr	r2, [pc, #124]	@ (80119d4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 8011956:	9317      	str	r3, [sp, #92]	@ 0x5c
 8011958:	8812      	ldrh	r2, [r2, #0]
 801195a:	9b07      	ldr	r3, [sp, #28]
 801195c:	9218      	str	r2, [sp, #96]	@ 0x60
 801195e:	9319      	str	r3, [sp, #100]	@ 0x64
 8011960:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8011964:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8011968:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 801196c:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8011970:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8011974:	9731      	str	r7, [sp, #196]	@ 0xc4
 8011976:	f006 fa5d 	bl	8017e34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801197a:	901a      	str	r0, [sp, #104]	@ 0x68
 801197c:	4628      	mov	r0, r5
 801197e:	f006 f937 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011982:	901b      	str	r0, [sp, #108]	@ 0x6c
 8011984:	4628      	mov	r0, r5
 8011986:	f006 f967 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801198a:	901c      	str	r0, [sp, #112]	@ 0x70
 801198c:	4628      	mov	r0, r5
 801198e:	f006 f92f 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011992:	4b11      	ldr	r3, [pc, #68]	@ (80119d8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8011994:	901d      	str	r0, [sp, #116]	@ 0x74
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801199c:	b10a      	cbz	r2, 80119a2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 801199e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80119a0:	b905      	cbnz	r5, 80119a4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 80119a2:	689d      	ldr	r5, [r3, #8]
 80119a4:	682b      	ldr	r3, [r5, #0]
 80119a6:	4620      	mov	r0, r4
 80119a8:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80119aa:	f7ff fefb 	bl	80117a4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 80119ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80119b2:	aa1e      	add	r2, sp, #120	@ 0x78
 80119b4:	a917      	add	r1, sp, #92	@ 0x5c
 80119b6:	9304      	str	r3, [sp, #16]
 80119b8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80119bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80119c0:	ab13      	add	r3, sp, #76	@ 0x4c
 80119c2:	4628      	mov	r0, r5
 80119c4:	9301      	str	r3, [sp, #4]
 80119c6:	ab15      	add	r3, sp, #84	@ 0x54
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	ab19      	add	r3, sp, #100	@ 0x64
 80119cc:	47b0      	blx	r6
 80119ce:	b033      	add	sp, #204	@ 0xcc
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	24025372 	.word	0x24025372
 80119d8:	24025378 	.word	0x24025378

080119dc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 80119dc:	b570      	push	{r4, r5, r6, lr}
 80119de:	ed2d 8b04 	vpush	{d8-d9}
 80119e2:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80119e6:	b098      	sub	sp, #96	@ 0x60
 80119e8:	4604      	mov	r4, r0
 80119ea:	460e      	mov	r6, r1
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d065      	beq.n	8011abc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 80119f0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80119f4:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80119f8:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 8011ad8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 80119fc:	ee09 3a10 	vmov	s18, r3
 8011a00:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8011a04:	4628      	mov	r0, r5
 8011a06:	ee08 3a90 	vmov	s17, r3
 8011a0a:	4b34      	ldr	r3, [pc, #208]	@ (8011adc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8011a0c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8011a10:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a12:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8011a16:	930d      	str	r3, [sp, #52]	@ 0x34
 8011a18:	930e      	str	r3, [sp, #56]	@ 0x38
 8011a1a:	ee39 9a08 	vadd.f32	s18, s18, s16
 8011a1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a20:	f006 f8e6 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011a24:	ee07 0a90 	vmov	s15, r0
 8011a28:	4628      	mov	r0, r5
 8011a2a:	ee78 8a88 	vadd.f32	s17, s17, s16
 8011a2e:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 8011a32:	f006 f911 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011a36:	4b2a      	ldr	r3, [pc, #168]	@ (8011ae0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 8011a38:	ee07 0a90 	vmov	s15, r0
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011a42:	eef0 7a48 	vmov.f32	s15, s16
 8011a46:	2b01      	cmp	r3, #1
 8011a48:	d13c      	bne.n	8011ac4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 8011a4a:	eef0 6a69 	vmov.f32	s13, s19
 8011a4e:	ee19 3a90 	vmov	r3, s19
 8011a52:	eeb0 6a47 	vmov.f32	s12, s14
 8011a56:	eef0 5a47 	vmov.f32	s11, s14
 8011a5a:	eef0 9a48 	vmov.f32	s19, s16
 8011a5e:	eeb0 7a48 	vmov.f32	s14, s16
 8011a62:	9314      	str	r3, [sp, #80]	@ 0x50
 8011a64:	ab14      	add	r3, sp, #80	@ 0x50
 8011a66:	2200      	movs	r2, #0
 8011a68:	4631      	mov	r1, r6
 8011a6a:	9303      	str	r3, [sp, #12]
 8011a6c:	ab10      	add	r3, sp, #64	@ 0x40
 8011a6e:	4620      	mov	r0, r4
 8011a70:	edcd 7a04 	vstr	s15, [sp, #16]
 8011a74:	9302      	str	r3, [sp, #8]
 8011a76:	ab0c      	add	r3, sp, #48	@ 0x30
 8011a78:	ed8d 9a05 	vstr	s18, [sp, #20]
 8011a7c:	9301      	str	r3, [sp, #4]
 8011a7e:	ab08      	add	r3, sp, #32
 8011a80:	ed8d 9a06 	vstr	s18, [sp, #24]
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	ab04      	add	r3, sp, #16
 8011a88:	edcd 7a07 	vstr	s15, [sp, #28]
 8011a8c:	edcd 7a08 	vstr	s15, [sp, #32]
 8011a90:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8011a94:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 8011a98:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 8011a9c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8011aa0:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 8011aa4:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8011aa8:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8011aac:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8011ab0:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 8011ab4:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 8011ab8:	f7ff fe7e 	bl	80117b8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8011abc:	b018      	add	sp, #96	@ 0x60
 8011abe:	ecbd 8b04 	vpop	{d8-d9}
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}
 8011ac4:	eef0 6a47 	vmov.f32	s13, s14
 8011ac8:	ee18 3a10 	vmov	r3, s16
 8011acc:	eef0 5a69 	vmov.f32	s11, s19
 8011ad0:	eeb0 6a48 	vmov.f32	s12, s16
 8011ad4:	e7c5      	b.n	8011a62 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8011ad6:	bf00      	nop
 8011ad8:	00000000 	.word	0x00000000
 8011adc:	42c80000 	.word	0x42c80000
 8011ae0:	24025370 	.word	0x24025370

08011ae4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	8083      	strh	r3, [r0, #4]
 8011ae8:	80c3      	strh	r3, [r0, #6]
 8011aea:	8003      	strh	r3, [r0, #0]
 8011aec:	8043      	strh	r3, [r0, #2]
 8011aee:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8011af2:	2bff      	cmp	r3, #255	@ 0xff
 8011af4:	bf01      	itttt	eq
 8011af6:	890b      	ldrheq	r3, [r1, #8]
 8011af8:	8083      	strheq	r3, [r0, #4]
 8011afa:	894b      	ldrheq	r3, [r1, #10]
 8011afc:	80c3      	strheq	r3, [r0, #6]
 8011afe:	4770      	bx	lr

08011b00 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b02:	4604      	mov	r4, r0
 8011b04:	466b      	mov	r3, sp
 8011b06:	6808      	ldr	r0, [r1, #0]
 8011b08:	6849      	ldr	r1, [r1, #4]
 8011b0a:	c303      	stmia	r3!, {r0, r1}
 8011b0c:	6823      	ldr	r3, [r4, #0]
 8011b0e:	4669      	mov	r1, sp
 8011b10:	4620      	mov	r0, r4
 8011b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b14:	4798      	blx	r3
 8011b16:	4b08      	ldr	r3, [pc, #32]	@ (8011b38 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011b1e:	b10a      	cbz	r2, 8011b24 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011b20:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011b22:	b900      	cbnz	r0, 8011b26 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011b24:	6898      	ldr	r0, [r3, #8]
 8011b26:	6803      	ldr	r3, [r0, #0]
 8011b28:	4669      	mov	r1, sp
 8011b2a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011b2c:	6a1d      	ldr	r5, [r3, #32]
 8011b2e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011b32:	47a8      	blx	r5
 8011b34:	b003      	add	sp, #12
 8011b36:	bd30      	pop	{r4, r5, pc}
 8011b38:	24025378 	.word	0x24025378

08011b3c <_ZN8touchgfx3BoxD1Ev>:
 8011b3c:	4770      	bx	lr

08011b3e <_ZN8touchgfx3BoxD0Ev>:
 8011b3e:	b510      	push	{r4, lr}
 8011b40:	4604      	mov	r4, r0
 8011b42:	212c      	movs	r1, #44	@ 0x2c
 8011b44:	f010 fe6e 	bl	8022824 <_ZdlPvj>
 8011b48:	4620      	mov	r0, r4
 8011b4a:	bd10      	pop	{r4, pc}

08011b4c <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011b4c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8011b50:	b12a      	cbz	r2, 8011b5e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011b52:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011b56:	b112      	cbz	r2, 8011b5e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011b58:	6803      	ldr	r3, [r0, #0]
 8011b5a:	695b      	ldr	r3, [r3, #20]
 8011b5c:	4718      	bx	r3
 8011b5e:	4770      	bx	lr

08011b60 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8011b60:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8011b64:	4770      	bx	lr

08011b66 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8011b66:	b570      	push	{r4, r5, r6, lr}
 8011b68:	880b      	ldrh	r3, [r1, #0]
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8011b70:	8813      	ldrh	r3, [r2, #0]
 8011b72:	f825 3f30 	strh.w	r3, [r5, #48]!
 8011b76:	4628      	mov	r0, r5
 8011b78:	f006 f83a 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	4628      	mov	r0, r5
 8011b80:	f006 f86a 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011b84:	6823      	ldr	r3, [r4, #0]
 8011b86:	4605      	mov	r5, r0
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b8e:	4798      	blx	r3
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	4629      	mov	r1, r5
 8011b94:	4620      	mov	r0, r4
 8011b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b9c:	4718      	bx	r3

08011b9e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8011b9e:	b510      	push	{r4, lr}
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8011ba4:	b150      	cbz	r0, 8011bbc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011ba6:	6803      	ldr	r3, [r0, #0]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	4798      	blx	r3
 8011bac:	b130      	cbz	r0, 8011bbc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8011bae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011bb0:	4621      	mov	r1, r4
 8011bb2:	6803      	ldr	r3, [r0, #0]
 8011bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	4718      	bx	r3
 8011bbc:	bd10      	pop	{r4, pc}

08011bbe <_ZNK8touchgfx6Button12getSolidRectEv>:
 8011bbe:	b510      	push	{r4, lr}
 8011bc0:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	2bff      	cmp	r3, #255	@ 0xff
 8011bc8:	d006      	beq.n	8011bd8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	8003      	strh	r3, [r0, #0]
 8011bce:	8043      	strh	r3, [r0, #2]
 8011bd0:	8083      	strh	r3, [r0, #4]
 8011bd2:	80c3      	strh	r3, [r0, #6]
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	bd10      	pop	{r4, pc}
 8011bd8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8011bdc:	b11b      	cbz	r3, 8011be6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8011bde:	3130      	adds	r1, #48	@ 0x30
 8011be0:	f006 f86e 	bl	8017cc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011be4:	e7f6      	b.n	8011bd4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8011be6:	312e      	adds	r1, #46	@ 0x2e
 8011be8:	e7fa      	b.n	8011be0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08011bec <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8011bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8011bf4:	b08a      	sub	sp, #40	@ 0x28
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	4688      	mov	r8, r1
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d066      	beq.n	8011ccc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8011bfe:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8011c00:	a805      	add	r0, sp, #20
 8011c02:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011c06:	f005 fff3 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011c0a:	4607      	mov	r7, r0
 8011c0c:	a805      	add	r0, sp, #20
 8011c0e:	f006 f823 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011c12:	f9b8 6000 	ldrsh.w	r6, [r8]
 8011c16:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	4432      	add	r2, r6
 8011c1e:	9306      	str	r3, [sp, #24]
 8011c20:	b292      	uxth	r2, r2
 8011c22:	fa0f fc82 	sxth.w	ip, r2
 8011c26:	459c      	cmp	ip, r3
 8011c28:	dd52      	ble.n	8011cd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c2a:	42b7      	cmp	r7, r6
 8011c2c:	dd50      	ble.n	8011cd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c2e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8011c32:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011c36:	442b      	add	r3, r5
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	b219      	sxth	r1, r3
 8011c3c:	2900      	cmp	r1, #0
 8011c3e:	dd47      	ble.n	8011cd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c40:	42a8      	cmp	r0, r5
 8011c42:	dd45      	ble.n	8011cd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8011c44:	4567      	cmp	r7, ip
 8011c46:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8011c4a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8011c4e:	bfb8      	it	lt
 8011c50:	b2ba      	uxthlt	r2, r7
 8011c52:	4288      	cmp	r0, r1
 8011c54:	f8ad 6018 	strh.w	r6, [sp, #24]
 8011c58:	bfb8      	it	lt
 8011c5a:	b283      	uxthlt	r3, r0
 8011c5c:	1b92      	subs	r2, r2, r6
 8011c5e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8011c62:	1b5b      	subs	r3, r3, r5
 8011c64:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011c68:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011c6c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8011c70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d026      	beq.n	8011cc6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011c78:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dd22      	ble.n	8011cc6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011c80:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	dd1e      	ble.n	8011cc6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	a908      	add	r1, sp, #32
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c96:	4798      	blx	r3
 8011c98:	4b0f      	ldr	r3, [pc, #60]	@ (8011cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011ca0:	b10a      	cbz	r2, 8011ca6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8011ca2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011ca4:	b900      	cbnz	r0, 8011ca8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8011ca6:	6898      	ldr	r0, [r3, #8]
 8011ca8:	2501      	movs	r5, #1
 8011caa:	6801      	ldr	r1, [r0, #0]
 8011cac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8011cb0:	9502      	str	r5, [sp, #8]
 8011cb2:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8011cb6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8011cba:	9401      	str	r4, [sp, #4]
 8011cbc:	ac06      	add	r4, sp, #24
 8011cbe:	9400      	str	r4, [sp, #0]
 8011cc0:	688c      	ldr	r4, [r1, #8]
 8011cc2:	a905      	add	r1, sp, #20
 8011cc4:	47a0      	blx	r4
 8011cc6:	b00a      	add	sp, #40	@ 0x28
 8011cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ccc:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8011cce:	e797      	b.n	8011c00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	9307      	str	r3, [sp, #28]
 8011cd4:	e7ca      	b.n	8011c6c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8011cd6:	bf00      	nop
 8011cd8:	24025378 	.word	0x24025378

08011cdc <_ZNK8touchgfx6Button17invalidateContentEv>:
 8011cdc:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8011ce0:	b12a      	cbz	r2, 8011cee <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011ce2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8011ce6:	b112      	cbz	r2, 8011cee <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8011ce8:	6803      	ldr	r3, [r0, #0]
 8011cea:	695b      	ldr	r3, [r3, #20]
 8011cec:	4718      	bx	r3
 8011cee:	4770      	bx	lr

08011cf0 <_ZN8touchgfx5ImageD1Ev>:
 8011cf0:	4770      	bx	lr

08011cf2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011cf2:	b570      	push	{r4, r5, r6, lr}
 8011cf4:	880b      	ldrh	r3, [r1, #0]
 8011cf6:	460d      	mov	r5, r1
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	f005 ff77 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011d02:	4606      	mov	r6, r0
 8011d04:	4628      	mov	r0, r5
 8011d06:	f005 ffa7 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	4631      	mov	r1, r6
 8011d10:	4620      	mov	r0, r4
 8011d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d14:	4798      	blx	r3
 8011d16:	6823      	ldr	r3, [r4, #0]
 8011d18:	4629      	mov	r1, r5
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d22:	4718      	bx	r3

08011d24 <_ZN8touchgfx5ImageD0Ev>:
 8011d24:	b510      	push	{r4, lr}
 8011d26:	4604      	mov	r4, r0
 8011d28:	212c      	movs	r1, #44	@ 0x2c
 8011d2a:	f010 fd7b 	bl	8022824 <_ZdlPvj>
 8011d2e:	4620      	mov	r0, r4
 8011d30:	bd10      	pop	{r4, pc}

08011d32 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011d32:	b510      	push	{r4, lr}
 8011d34:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8011d38:	4604      	mov	r4, r0
 8011d3a:	2bff      	cmp	r3, #255	@ 0xff
 8011d3c:	d006      	beq.n	8011d4c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	8003      	strh	r3, [r0, #0]
 8011d42:	8043      	strh	r3, [r0, #2]
 8011d44:	8083      	strh	r3, [r0, #4]
 8011d46:	80c3      	strh	r3, [r0, #6]
 8011d48:	4620      	mov	r0, r4
 8011d4a:	bd10      	pop	{r4, pc}
 8011d4c:	3126      	adds	r1, #38	@ 0x26
 8011d4e:	f005 ffb7 	bl	8017cc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011d52:	e7f9      	b.n	8011d48 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08011d54 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d58:	4604      	mov	r4, r0
 8011d5a:	b088      	sub	sp, #32
 8011d5c:	2500      	movs	r5, #0
 8011d5e:	460f      	mov	r7, r1
 8011d60:	f854 3b26 	ldr.w	r3, [r4], #38
 8011d64:	a904      	add	r1, sp, #16
 8011d66:	4606      	mov	r6, r0
 8011d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011d6e:	4798      	blx	r3
 8011d70:	4620      	mov	r0, r4
 8011d72:	f005 ff3d 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011d76:	4680      	mov	r8, r0
 8011d78:	4620      	mov	r0, r4
 8011d7a:	f005 ff6d 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011d7e:	9506      	str	r5, [sp, #24]
 8011d80:	ad06      	add	r5, sp, #24
 8011d82:	f8ad 001e 	strh.w	r0, [sp, #30]
 8011d86:	4639      	mov	r1, r7
 8011d88:	f8ad 801c 	strh.w	r8, [sp, #28]
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f7fc fffb 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8011d92:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dd19      	ble.n	8011dce <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011d9a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	dd15      	ble.n	8011dce <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8011da2:	4b0c      	ldr	r3, [pc, #48]	@ (8011dd4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011daa:	b10a      	cbz	r2, 8011db0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8011dac:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011dae:	b900      	cbnz	r0, 8011db2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8011db0:	6898      	ldr	r0, [r3, #8]
 8011db2:	2701      	movs	r7, #1
 8011db4:	6801      	ldr	r1, [r0, #0]
 8011db6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011dba:	9702      	str	r7, [sp, #8]
 8011dbc:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8011dc0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011dc4:	e9cd 5600 	strd	r5, r6, [sp]
 8011dc8:	688d      	ldr	r5, [r1, #8]
 8011dca:	4621      	mov	r1, r4
 8011dcc:	47a8      	blx	r5
 8011dce:	b008      	add	sp, #32
 8011dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd4:	24025378 	.word	0x24025378

08011dd8 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8011dd8:	4770      	bx	lr

08011dda <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8011dda:	b510      	push	{r4, lr}
 8011ddc:	4604      	mov	r4, r0
 8011dde:	2148      	movs	r1, #72	@ 0x48
 8011de0:	f010 fd20 	bl	8022824 <_ZdlPvj>
 8011de4:	4620      	mov	r0, r4
 8011de6:	bd10      	pop	{r4, pc}

08011de8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8011de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dec:	b08d      	sub	sp, #52	@ 0x34
 8011dee:	4604      	mov	r4, r0
 8011df0:	460f      	mov	r7, r1
 8011df2:	f7ff fefb 	bl	8011bec <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8011df6:	4a55      	ldr	r2, [pc, #340]	@ (8011f4c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8011df8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8011dfa:	8812      	ldrh	r2, [r2, #0]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	f240 8082 	bls.w	8011f06 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8011e02:	4d53      	ldr	r5, [pc, #332]	@ (8011f50 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 8011e04:	682a      	ldr	r2, [r5, #0]
 8011e06:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8011e0a:	4b52      	ldr	r3, [pc, #328]	@ (8011f54 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8011e18:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011e1c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8011e20:	2a03      	cmp	r2, #3
 8011e22:	d811      	bhi.n	8011e48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8011e24:	e8df f002 	tbb	[pc, r2]
 8011e28:	89727902 	.word	0x89727902
 8011e2c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8011e30:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011e34:	1ad2      	subs	r2, r2, r3
 8011e36:	2002      	movs	r0, #2
 8011e38:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011e3c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011e40:	fb92 f2f0 	sdiv	r2, r2, r0
 8011e44:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011e48:	f10d 080c 	add.w	r8, sp, #12
 8011e4c:	f10d 0914 	add.w	r9, sp, #20
 8011e50:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011e54:	e889 0003 	stmia.w	r9, {r0, r1}
 8011e58:	4639      	mov	r1, r7
 8011e5a:	4648      	mov	r0, r9
 8011e5c:	f7fc ff94 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8011e60:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	dd4e      	ble.n	8011f06 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8011e68:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	dd4a      	ble.n	8011f06 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8011e70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011e74:	4641      	mov	r1, r8
 8011e76:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	1a9b      	subs	r3, r3, r2
 8011e7e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011e82:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e86:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8011e8a:	1a9b      	subs	r3, r3, r2
 8011e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e90:	6823      	ldr	r3, [r4, #0]
 8011e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e94:	4798      	blx	r3
 8011e96:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d053      	beq.n	8011f46 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8011e9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011ea0:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8011ea2:	682b      	ldr	r3, [r5, #0]
 8011ea4:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8011ea8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011eac:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8011eb0:	785b      	ldrb	r3, [r3, #1]
 8011eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8011eb4:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8011eb8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011ebc:	9607      	str	r6, [sp, #28]
 8011ebe:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	f88d 5020 	strb.w	r5, [sp, #32]
 8011ec8:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8011ecc:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8011ed0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011ed4:	4b20      	ldr	r3, [pc, #128]	@ (8011f58 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 8011ed6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8011ee0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011ee4:	b10a      	cbz	r2, 8011eea <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8011ee6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011ee8:	b904      	cbnz	r4, 8011eec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8011eea:	689c      	ldr	r4, [r3, #8]
 8011eec:	4b1b      	ldr	r3, [pc, #108]	@ (8011f5c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8011eee:	6818      	ldr	r0, [r3, #0]
 8011ef0:	f7f2 ff86 	bl	8004e00 <_ZNK8touchgfx5Texts7getTextEt>
 8011ef4:	ab07      	add	r3, sp, #28
 8011ef6:	9001      	str	r0, [sp, #4]
 8011ef8:	4620      	mov	r0, r4
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	464b      	mov	r3, r9
 8011efe:	e898 0006 	ldmia.w	r8, {r1, r2}
 8011f02:	f7f2 ff2f 	bl	8004d64 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011f06:	b00d      	add	sp, #52	@ 0x34
 8011f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f0c:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8011f10:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8011f14:	1ad2      	subs	r2, r2, r3
 8011f16:	3201      	adds	r2, #1
 8011f18:	e78d      	b.n	8011e36 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 8011f1a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011f1e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8011f22:	1ad2      	subs	r2, r2, r3
 8011f24:	3201      	adds	r2, #1
 8011f26:	2002      	movs	r0, #2
 8011f28:	f8ad 3010 	strh.w	r3, [sp, #16]
 8011f2c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011f30:	fb92 f2f0 	sdiv	r2, r2, r0
 8011f34:	f8ad 200c 	strh.w	r2, [sp, #12]
 8011f38:	e786      	b.n	8011e48 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8011f3a:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8011f3e:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8011f42:	1ad2      	subs	r2, r2, r3
 8011f44:	e7ef      	b.n	8011f26 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 8011f46:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8011f48:	e7aa      	b.n	8011ea0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8011f4a:	bf00      	nop
 8011f4c:	240253d4 	.word	0x240253d4
 8011f50:	240253d0 	.word	0x240253d0
 8011f54:	240253d8 	.word	0x240253d8
 8011f58:	24025378 	.word	0x24025378
 8011f5c:	240253dc 	.word	0x240253dc

08011f60 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8011f60:	2101      	movs	r1, #1
 8011f62:	2200      	movs	r2, #0
 8011f64:	b510      	push	{r4, lr}
 8011f66:	4c13      	ldr	r4, [pc, #76]	@ (8011fb4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8011f68:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8011f6c:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8011f70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011f74:	6004      	str	r4, [r0, #0]
 8011f76:	4c10      	ldr	r4, [pc, #64]	@ (8011fb8 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8011f78:	8082      	strh	r2, [r0, #4]
 8011f7a:	80c2      	strh	r2, [r0, #6]
 8011f7c:	8102      	strh	r2, [r0, #8]
 8011f7e:	8142      	strh	r2, [r0, #10]
 8011f80:	8182      	strh	r2, [r0, #12]
 8011f82:	81c2      	strh	r2, [r0, #14]
 8011f84:	8202      	strh	r2, [r0, #16]
 8011f86:	8242      	strh	r2, [r0, #18]
 8011f88:	61c2      	str	r2, [r0, #28]
 8011f8a:	8402      	strh	r2, [r0, #32]
 8011f8c:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011f8e:	6282      	str	r2, [r0, #40]	@ 0x28
 8011f90:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8011f94:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 8011f96:	8601      	strh	r1, [r0, #48]	@ 0x30
 8011f98:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8011f9c:	6344      	str	r4, [r0, #52]	@ 0x34
 8011f9e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8011fa0:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8011fa4:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8011fa8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011fac:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8011fb0:	bd10      	pop	{r4, pc}
 8011fb2:	bf00      	nop
 8011fb4:	08026e30 	.word	0x08026e30
 8011fb8:	0802635c 	.word	0x0802635c

08011fbc <_ZN8touchgfx7OutlineD1Ev>:
 8011fbc:	4770      	bx	lr

08011fbe <_ZN8touchgfx7OutlineD0Ev>:
 8011fbe:	b510      	push	{r4, lr}
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	2130      	movs	r1, #48	@ 0x30
 8011fc4:	f010 fc2e 	bl	8022824 <_ZdlPvj>
 8011fc8:	4620      	mov	r0, r4
 8011fca:	bd10      	pop	{r4, pc}

08011fcc <_ZN8touchgfx7Outline5resetEv>:
 8011fcc:	b510      	push	{r4, lr}
 8011fce:	4604      	mov	r4, r0
 8011fd0:	f000 fe72 	bl	8012cb8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8011fd4:	60e0      	str	r0, [r4, #12]
 8011fd6:	f000 fe75 	bl	8012cc4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8011fda:	68e3      	ldr	r3, [r4, #12]
 8011fdc:	08c0      	lsrs	r0, r0, #3
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8011fe4:	6123      	str	r3, [r4, #16]
 8011fe6:	3801      	subs	r0, #1
 8011fe8:	60a2      	str	r2, [r4, #8]
 8011fea:	6060      	str	r0, [r4, #4]
 8011fec:	8019      	strh	r1, [r3, #0]
 8011fee:	8059      	strh	r1, [r3, #2]
 8011ff0:	809a      	strh	r2, [r3, #4]
 8011ff2:	80da      	strh	r2, [r3, #6]
 8011ff4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011ff6:	f023 0301 	bic.w	r3, r3, #1
 8011ffa:	f043 0302 	orr.w	r3, r3, #2
 8011ffe:	6263      	str	r3, [r4, #36]	@ 0x24
 8012000:	bd10      	pop	{r4, pc}
	...

08012004 <_ZN8touchgfx7OutlineC1Ev>:
 8012004:	4b0a      	ldr	r3, [pc, #40]	@ (8012030 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8012006:	b510      	push	{r4, lr}
 8012008:	6003      	str	r3, [r0, #0]
 801200a:	2300      	movs	r3, #0
 801200c:	4604      	mov	r4, r0
 801200e:	6243      	str	r3, [r0, #36]	@ 0x24
 8012010:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8012014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012018:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801201c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8012020:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012024:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8012028:	f7ff ffd0 	bl	8011fcc <_ZN8touchgfx7Outline5resetEv>
 801202c:	4620      	mov	r0, r4
 801202e:	bd10      	pop	{r4, pc}
 8012030:	08026ea4 	.word	0x08026ea4

08012034 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8012034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012038:	b093      	sub	sp, #76	@ 0x4c
 801203a:	1156      	asrs	r6, r2, #5
 801203c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801203e:	9305      	str	r3, [sp, #20]
 8012040:	1153      	asrs	r3, r2, #5
 8012042:	f004 051f 	and.w	r5, r4, #31
 8012046:	9303      	str	r3, [sp, #12]
 8012048:	1163      	asrs	r3, r4, #5
 801204a:	9504      	str	r5, [sp, #16]
 801204c:	1165      	asrs	r5, r4, #5
 801204e:	9306      	str	r3, [sp, #24]
 8012050:	f002 031f 	and.w	r3, r2, #31
 8012054:	42ae      	cmp	r6, r5
 8012056:	f040 80f4 	bne.w	8012242 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801205a:	9c04      	ldr	r4, [sp, #16]
 801205c:	9a05      	ldr	r2, [sp, #20]
 801205e:	42a3      	cmp	r3, r4
 8012060:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8012064:	6902      	ldr	r2, [r0, #16]
 8012066:	d125      	bne.n	80120b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8012068:	f9b2 3000 	ldrsh.w	r3, [r2]
 801206c:	459e      	cmp	lr, r3
 801206e:	d103      	bne.n	8012078 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8012070:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012074:	429e      	cmp	r6, r3
 8012076:	d035      	beq.n	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012078:	88d1      	ldrh	r1, [r2, #6]
 801207a:	8893      	ldrh	r3, [r2, #4]
 801207c:	430b      	orrs	r3, r1
 801207e:	d010      	beq.n	80120a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8012080:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8012084:	2b00      	cmp	r3, #0
 8012086:	db0c      	blt.n	80120a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8012088:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801208a:	428b      	cmp	r3, r1
 801208c:	da09      	bge.n	80120a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801208e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8012092:	428b      	cmp	r3, r1
 8012094:	f103 0301 	add.w	r3, r3, #1
 8012098:	bf38      	it	cc
 801209a:	3208      	addcc	r2, #8
 801209c:	6083      	str	r3, [r0, #8]
 801209e:	bf38      	it	cc
 80120a0:	6102      	strcc	r2, [r0, #16]
 80120a2:	6903      	ldr	r3, [r0, #16]
 80120a4:	9a03      	ldr	r2, [sp, #12]
 80120a6:	f8a3 e000 	strh.w	lr, [r3]
 80120aa:	805a      	strh	r2, [r3, #2]
 80120ac:	2200      	movs	r2, #0
 80120ae:	809a      	strh	r2, [r3, #4]
 80120b0:	80da      	strh	r2, [r3, #6]
 80120b2:	e017      	b.n	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80120b4:	9c05      	ldr	r4, [sp, #20]
 80120b6:	114e      	asrs	r6, r1, #5
 80120b8:	f001 0c1f 	and.w	ip, r1, #31
 80120bc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80120c0:	f004 041f 	and.w	r4, r4, #31
 80120c4:	4576      	cmp	r6, lr
 80120c6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80120ca:	9402      	str	r4, [sp, #8]
 80120cc:	9c04      	ldr	r4, [sp, #16]
 80120ce:	eba4 0403 	sub.w	r4, r4, r3
 80120d2:	d10a      	bne.n	80120ea <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80120d4:	9b02      	ldr	r3, [sp, #8]
 80120d6:	44a0      	add	r8, r4
 80120d8:	449c      	add	ip, r3
 80120da:	f8a2 8004 	strh.w	r8, [r2, #4]
 80120de:	fb04 a40c 	mla	r4, r4, ip, sl
 80120e2:	80d4      	strh	r4, [r2, #6]
 80120e4:	b013      	add	sp, #76	@ 0x4c
 80120e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ea:	9d05      	ldr	r5, [sp, #20]
 80120ec:	1a69      	subs	r1, r5, r1
 80120ee:	bf51      	iteee	pl
 80120f0:	f1cc 0520 	rsbpl	r5, ip, #32
 80120f4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80120f8:	4249      	negmi	r1, r1
 80120fa:	2500      	movmi	r5, #0
 80120fc:	bf5d      	ittte	pl
 80120fe:	436c      	mulpl	r4, r5
 8012100:	2520      	movpl	r5, #32
 8012102:	f04f 0901 	movpl.w	r9, #1
 8012106:	f04f 39ff 	movmi.w	r9, #4294967295
 801210a:	9501      	str	r5, [sp, #4]
 801210c:	9f01      	ldr	r7, [sp, #4]
 801210e:	444e      	add	r6, r9
 8012110:	fb94 f5f1 	sdiv	r5, r4, r1
 8012114:	fb01 4415 	mls	r4, r1, r5, r4
 8012118:	44bc      	add	ip, r7
 801211a:	2c00      	cmp	r4, #0
 801211c:	bfbc      	itt	lt
 801211e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8012122:	1864      	addlt	r4, r4, r1
 8012124:	44a8      	add	r8, r5
 8012126:	fb05 ac0c 	mla	ip, r5, ip, sl
 801212a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801212e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012132:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012136:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801213a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801213e:	ea58 0202 	orrs.w	r2, r8, r2
 8012142:	d011      	beq.n	8012168 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8012144:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8012148:	f1b8 0f00 	cmp.w	r8, #0
 801214c:	db0c      	blt.n	8012168 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801214e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8012150:	4590      	cmp	r8, r2
 8012152:	da09      	bge.n	8012168 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8012154:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8012158:	4590      	cmp	r8, r2
 801215a:	bf3c      	itt	cc
 801215c:	f10c 0208 	addcc.w	r2, ip, #8
 8012160:	6102      	strcc	r2, [r0, #16]
 8012162:	f108 0201 	add.w	r2, r8, #1
 8012166:	6082      	str	r2, [r0, #8]
 8012168:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801216c:	2700      	movs	r7, #0
 801216e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012172:	45b6      	cmp	lr, r6
 8012174:	f8ac 6000 	strh.w	r6, [ip]
 8012178:	442b      	add	r3, r5
 801217a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801217e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012182:	f8ac 7006 	strh.w	r7, [ip, #6]
 8012186:	d04b      	beq.n	8012220 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8012188:	9f04      	ldr	r7, [sp, #16]
 801218a:	1a64      	subs	r4, r4, r1
 801218c:	f04f 0a00 	mov.w	sl, #0
 8012190:	1aff      	subs	r7, r7, r3
 8012192:	443d      	add	r5, r7
 8012194:	016d      	lsls	r5, r5, #5
 8012196:	fb95 f8f1 	sdiv	r8, r5, r1
 801219a:	fb01 5518 	mls	r5, r1, r8, r5
 801219e:	2d00      	cmp	r5, #0
 80121a0:	bfbc      	itt	lt
 80121a2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80121a6:	186d      	addlt	r5, r5, r1
 80121a8:	f108 0701 	add.w	r7, r8, #1
 80121ac:	9703      	str	r7, [sp, #12]
 80121ae:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80121b2:	1964      	adds	r4, r4, r5
 80121b4:	444e      	add	r6, r9
 80121b6:	bf54      	ite	pl
 80121b8:	9f03      	ldrpl	r7, [sp, #12]
 80121ba:	4647      	movmi	r7, r8
 80121bc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80121c0:	bf58      	it	pl
 80121c2:	1a64      	subpl	r4, r4, r1
 80121c4:	443b      	add	r3, r7
 80121c6:	44bb      	add	fp, r7
 80121c8:	f8ac b004 	strh.w	fp, [ip, #4]
 80121cc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80121d0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80121d4:	f8ac b006 	strh.w	fp, [ip, #6]
 80121d8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80121dc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80121e0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80121e4:	ea5b 0707 	orrs.w	r7, fp, r7
 80121e8:	d011      	beq.n	801220e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80121ea:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80121ee:	f1bb 0f00 	cmp.w	fp, #0
 80121f2:	db0c      	blt.n	801220e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80121f4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80121f6:	45bb      	cmp	fp, r7
 80121f8:	da09      	bge.n	801220e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80121fa:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80121fe:	45bb      	cmp	fp, r7
 8012200:	bf3c      	itt	cc
 8012202:	f10c 0708 	addcc.w	r7, ip, #8
 8012206:	6107      	strcc	r7, [r0, #16]
 8012208:	f10b 0701 	add.w	r7, fp, #1
 801220c:	6087      	str	r7, [r0, #8]
 801220e:	6907      	ldr	r7, [r0, #16]
 8012210:	45b6      	cmp	lr, r6
 8012212:	803e      	strh	r6, [r7, #0]
 8012214:	807a      	strh	r2, [r7, #2]
 8012216:	f8a7 a004 	strh.w	sl, [r7, #4]
 801221a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801221e:	d1c6      	bne.n	80121ae <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8012220:	9a04      	ldr	r2, [sp, #16]
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	6902      	ldr	r2, [r0, #16]
 8012226:	8891      	ldrh	r1, [r2, #4]
 8012228:	88d6      	ldrh	r6, [r2, #6]
 801222a:	4419      	add	r1, r3
 801222c:	8091      	strh	r1, [r2, #4]
 801222e:	9902      	ldr	r1, [sp, #8]
 8012230:	f101 0c20 	add.w	ip, r1, #32
 8012234:	9901      	ldr	r1, [sp, #4]
 8012236:	ebac 0c01 	sub.w	ip, ip, r1
 801223a:	fb03 630c 	mla	r3, r3, ip, r6
 801223e:	80d3      	strh	r3, [r2, #6]
 8012240:	e750      	b.n	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012242:	9d05      	ldr	r5, [sp, #20]
 8012244:	1aa2      	subs	r2, r4, r2
 8012246:	eba5 0501 	sub.w	r5, r5, r1
 801224a:	9202      	str	r2, [sp, #8]
 801224c:	9508      	str	r5, [sp, #32]
 801224e:	f140 8128 	bpl.w	80124a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8012252:	9a03      	ldr	r2, [sp, #12]
 8012254:	2a00      	cmp	r2, #0
 8012256:	f6ff af45 	blt.w	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801225a:	9a02      	ldr	r2, [sp, #8]
 801225c:	f04f 34ff 	mov.w	r4, #4294967295
 8012260:	4252      	negs	r2, r2
 8012262:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012264:	2400      	movs	r4, #0
 8012266:	9202      	str	r2, [sp, #8]
 8012268:	9a06      	ldr	r2, [sp, #24]
 801226a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801226e:	9206      	str	r2, [sp, #24]
 8012270:	462a      	mov	r2, r5
 8012272:	435a      	muls	r2, r3
 8012274:	9401      	str	r4, [sp, #4]
 8012276:	9c02      	ldr	r4, [sp, #8]
 8012278:	9d02      	ldr	r5, [sp, #8]
 801227a:	fb92 f4f4 	sdiv	r4, r2, r4
 801227e:	fb05 2214 	mls	r2, r5, r4, r2
 8012282:	2a00      	cmp	r2, #0
 8012284:	9207      	str	r2, [sp, #28]
 8012286:	bfbc      	itt	lt
 8012288:	1952      	addlt	r2, r2, r5
 801228a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801228e:	6905      	ldr	r5, [r0, #16]
 8012290:	bfb8      	it	lt
 8012292:	9207      	strlt	r2, [sp, #28]
 8012294:	eb04 0901 	add.w	r9, r4, r1
 8012298:	9a01      	ldr	r2, [sp, #4]
 801229a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801229e:	429a      	cmp	r2, r3
 80122a0:	f040 8111 	bne.w	80124c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80122a4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80122a8:	429e      	cmp	r6, r3
 80122aa:	d104      	bne.n	80122b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80122ac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80122b0:	9a03      	ldr	r2, [sp, #12]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d01b      	beq.n	80122ee <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80122b6:	88ea      	ldrh	r2, [r5, #6]
 80122b8:	88ab      	ldrh	r3, [r5, #4]
 80122ba:	4313      	orrs	r3, r2
 80122bc:	d010      	beq.n	80122e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80122be:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80122c2:	2a00      	cmp	r2, #0
 80122c4:	db0c      	blt.n	80122e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80122c6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80122c8:	429a      	cmp	r2, r3
 80122ca:	da09      	bge.n	80122e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80122cc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	f102 0201 	add.w	r2, r2, #1
 80122d6:	bf38      	it	cc
 80122d8:	3508      	addcc	r5, #8
 80122da:	6082      	str	r2, [r0, #8]
 80122dc:	bf38      	it	cc
 80122de:	6105      	strcc	r5, [r0, #16]
 80122e0:	6903      	ldr	r3, [r0, #16]
 80122e2:	9a03      	ldr	r2, [sp, #12]
 80122e4:	801e      	strh	r6, [r3, #0]
 80122e6:	805a      	strh	r2, [r3, #2]
 80122e8:	2200      	movs	r2, #0
 80122ea:	809a      	strh	r2, [r3, #4]
 80122ec:	80da      	strh	r2, [r3, #6]
 80122ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122f0:	9a03      	ldr	r2, [sp, #12]
 80122f2:	6901      	ldr	r1, [r0, #16]
 80122f4:	441a      	add	r2, r3
 80122f6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80122fa:	42b3      	cmp	r3, r6
 80122fc:	d103      	bne.n	8012306 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80122fe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012302:	429a      	cmp	r2, r3
 8012304:	d01a      	beq.n	801233c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8012306:	88cc      	ldrh	r4, [r1, #6]
 8012308:	888b      	ldrh	r3, [r1, #4]
 801230a:	4323      	orrs	r3, r4
 801230c:	d010      	beq.n	8012330 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801230e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012312:	2c00      	cmp	r4, #0
 8012314:	db0c      	blt.n	8012330 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8012316:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012318:	429c      	cmp	r4, r3
 801231a:	da09      	bge.n	8012330 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801231c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012320:	429c      	cmp	r4, r3
 8012322:	f104 0401 	add.w	r4, r4, #1
 8012326:	bf38      	it	cc
 8012328:	3108      	addcc	r1, #8
 801232a:	6084      	str	r4, [r0, #8]
 801232c:	bf38      	it	cc
 801232e:	6101      	strcc	r1, [r0, #16]
 8012330:	6903      	ldr	r3, [r0, #16]
 8012332:	2100      	movs	r1, #0
 8012334:	801e      	strh	r6, [r3, #0]
 8012336:	805a      	strh	r2, [r3, #2]
 8012338:	8099      	strh	r1, [r3, #4]
 801233a:	80d9      	strh	r1, [r3, #6]
 801233c:	9b06      	ldr	r3, [sp, #24]
 801233e:	4293      	cmp	r3, r2
 8012340:	f000 8082 	beq.w	8012448 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8012344:	9b08      	ldr	r3, [sp, #32]
 8012346:	9902      	ldr	r1, [sp, #8]
 8012348:	015b      	lsls	r3, r3, #5
 801234a:	9c02      	ldr	r4, [sp, #8]
 801234c:	fb93 f1f1 	sdiv	r1, r3, r1
 8012350:	fb04 3311 	mls	r3, r4, r1, r3
 8012354:	9103      	str	r1, [sp, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	9308      	str	r3, [sp, #32]
 801235a:	da04      	bge.n	8012366 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801235c:	1e4b      	subs	r3, r1, #1
 801235e:	9303      	str	r3, [sp, #12]
 8012360:	9b08      	ldr	r3, [sp, #32]
 8012362:	4423      	add	r3, r4
 8012364:	9308      	str	r3, [sp, #32]
 8012366:	9b07      	ldr	r3, [sp, #28]
 8012368:	464f      	mov	r7, r9
 801236a:	9902      	ldr	r1, [sp, #8]
 801236c:	2600      	movs	r6, #0
 801236e:	1a5b      	subs	r3, r3, r1
 8012370:	9307      	str	r3, [sp, #28]
 8012372:	9b01      	ldr	r3, [sp, #4]
 8012374:	f1c3 0320 	rsb	r3, r3, #32
 8012378:	930e      	str	r3, [sp, #56]	@ 0x38
 801237a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801237c:	9b01      	ldr	r3, [sp, #4]
 801237e:	1a5b      	subs	r3, r3, r1
 8012380:	930a      	str	r3, [sp, #40]	@ 0x28
 8012382:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8012386:	185b      	adds	r3, r3, r1
 8012388:	bf58      	it	pl
 801238a:	9902      	ldrpl	r1, [sp, #8]
 801238c:	9307      	str	r3, [sp, #28]
 801238e:	bf57      	itett	pl
 8012390:	1a5b      	subpl	r3, r3, r1
 8012392:	9903      	ldrmi	r1, [sp, #12]
 8012394:	9307      	strpl	r3, [sp, #28]
 8012396:	9b03      	ldrpl	r3, [sp, #12]
 8012398:	bf58      	it	pl
 801239a:	1c59      	addpl	r1, r3, #1
 801239c:	2a00      	cmp	r2, #0
 801239e:	4489      	add	r9, r1
 80123a0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80123a4:	db2e      	blt.n	8012404 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80123a6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80123a8:	4293      	cmp	r3, r2
 80123aa:	dd2b      	ble.n	8012404 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80123ac:	9c01      	ldr	r4, [sp, #4]
 80123ae:	6905      	ldr	r5, [r0, #16]
 80123b0:	46a0      	mov	r8, r4
 80123b2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80123b4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80123b8:	45a0      	cmp	r8, r4
 80123ba:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80123be:	f040 814c 	bne.w	801265a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80123c2:	f9b5 1000 	ldrsh.w	r1, [r5]
 80123c6:	4551      	cmp	r1, sl
 80123c8:	d103      	bne.n	80123d2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80123ca:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80123ce:	4291      	cmp	r1, r2
 80123d0:	d018      	beq.n	8012404 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80123d2:	ea5c 010e 	orrs.w	r1, ip, lr
 80123d6:	d00f      	beq.n	80123f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80123d8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80123dc:	2900      	cmp	r1, #0
 80123de:	db0b      	blt.n	80123f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80123e0:	428b      	cmp	r3, r1
 80123e2:	dd09      	ble.n	80123f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80123e4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80123e8:	4299      	cmp	r1, r3
 80123ea:	f101 0101 	add.w	r1, r1, #1
 80123ee:	bf38      	it	cc
 80123f0:	3508      	addcc	r5, #8
 80123f2:	6081      	str	r1, [r0, #8]
 80123f4:	bf38      	it	cc
 80123f6:	6105      	strcc	r5, [r0, #16]
 80123f8:	6903      	ldr	r3, [r0, #16]
 80123fa:	f8a3 a000 	strh.w	sl, [r3]
 80123fe:	805a      	strh	r2, [r3, #2]
 8012400:	809e      	strh	r6, [r3, #4]
 8012402:	80de      	strh	r6, [r3, #6]
 8012404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012406:	6901      	ldr	r1, [r0, #16]
 8012408:	441a      	add	r2, r3
 801240a:	88cc      	ldrh	r4, [r1, #6]
 801240c:	888b      	ldrh	r3, [r1, #4]
 801240e:	4323      	orrs	r3, r4
 8012410:	d010      	beq.n	8012434 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012412:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8012416:	2c00      	cmp	r4, #0
 8012418:	db0c      	blt.n	8012434 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801241a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801241c:	429c      	cmp	r4, r3
 801241e:	da09      	bge.n	8012434 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8012420:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8012424:	429c      	cmp	r4, r3
 8012426:	f104 0401 	add.w	r4, r4, #1
 801242a:	bf38      	it	cc
 801242c:	3108      	addcc	r1, #8
 801242e:	6084      	str	r4, [r0, #8]
 8012430:	bf38      	it	cc
 8012432:	6101      	strcc	r1, [r0, #16]
 8012434:	6903      	ldr	r3, [r0, #16]
 8012436:	464f      	mov	r7, r9
 8012438:	f8a3 a000 	strh.w	sl, [r3]
 801243c:	805a      	strh	r2, [r3, #2]
 801243e:	809e      	strh	r6, [r3, #4]
 8012440:	80de      	strh	r6, [r3, #6]
 8012442:	9b06      	ldr	r3, [sp, #24]
 8012444:	4293      	cmp	r3, r2
 8012446:	d19c      	bne.n	8012382 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8012448:	9b01      	ldr	r3, [sp, #4]
 801244a:	6907      	ldr	r7, [r0, #16]
 801244c:	f1c3 0620 	rsb	r6, r3, #32
 8012450:	9b05      	ldr	r3, [sp, #20]
 8012452:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8012456:	9b04      	ldr	r3, [sp, #16]
 8012458:	429e      	cmp	r6, r3
 801245a:	f040 81c7 	bne.w	80127ec <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801245e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012462:	459e      	cmp	lr, r3
 8012464:	d104      	bne.n	8012470 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8012466:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801246a:	429a      	cmp	r2, r3
 801246c:	f43f ae3a 	beq.w	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012470:	88f9      	ldrh	r1, [r7, #6]
 8012472:	88bb      	ldrh	r3, [r7, #4]
 8012474:	430b      	orrs	r3, r1
 8012476:	d010      	beq.n	801249a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012478:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801247c:	2b00      	cmp	r3, #0
 801247e:	db0c      	blt.n	801249a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012480:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8012482:	428b      	cmp	r3, r1
 8012484:	da09      	bge.n	801249a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8012486:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801248a:	428b      	cmp	r3, r1
 801248c:	f103 0301 	add.w	r3, r3, #1
 8012490:	bf38      	it	cc
 8012492:	3708      	addcc	r7, #8
 8012494:	6083      	str	r3, [r0, #8]
 8012496:	bf38      	it	cc
 8012498:	6107      	strcc	r7, [r0, #16]
 801249a:	6903      	ldr	r3, [r0, #16]
 801249c:	f8a3 e000 	strh.w	lr, [r3]
 80124a0:	e603      	b.n	80120aa <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80124a2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80124a4:	9c03      	ldr	r4, [sp, #12]
 80124a6:	42a2      	cmp	r2, r4
 80124a8:	f6ff ae1c 	blt.w	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80124ac:	9c06      	ldr	r4, [sp, #24]
 80124ae:	42a2      	cmp	r2, r4
 80124b0:	9c08      	ldr	r4, [sp, #32]
 80124b2:	bfbc      	itt	lt
 80124b4:	3201      	addlt	r2, #1
 80124b6:	9206      	strlt	r2, [sp, #24]
 80124b8:	f1c3 0220 	rsb	r2, r3, #32
 80124bc:	4362      	muls	r2, r4
 80124be:	2401      	movs	r4, #1
 80124c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80124c2:	2420      	movs	r4, #32
 80124c4:	e6d6      	b.n	8012274 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80124c6:	ea4f 1861 	mov.w	r8, r1, asr #5
 80124ca:	f009 021f 	and.w	r2, r9, #31
 80124ce:	f001 011f 	and.w	r1, r1, #31
 80124d2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80124d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80124d8:	45b0      	cmp	r8, r6
 80124da:	9a01      	ldr	r2, [sp, #4]
 80124dc:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80124e0:	eba2 0203 	sub.w	r2, r2, r3
 80124e4:	d108      	bne.n	80124f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80124e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124e8:	4496      	add	lr, r2
 80124ea:	4419      	add	r1, r3
 80124ec:	f8a5 e004 	strh.w	lr, [r5, #4]
 80124f0:	fb02 a101 	mla	r1, r2, r1, sl
 80124f4:	80e9      	strh	r1, [r5, #6]
 80124f6:	e6fa      	b.n	80122ee <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80124f8:	2c00      	cmp	r4, #0
 80124fa:	f2c0 80a7 	blt.w	801264c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80124fe:	2701      	movs	r7, #1
 8012500:	f1c1 0c20 	rsb	ip, r1, #32
 8012504:	970a      	str	r7, [sp, #40]	@ 0x28
 8012506:	2720      	movs	r7, #32
 8012508:	fb02 f20c 	mul.w	r2, r2, ip
 801250c:	9709      	str	r7, [sp, #36]	@ 0x24
 801250e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8012510:	fb92 fcf4 	sdiv	ip, r2, r4
 8012514:	fb04 221c 	mls	r2, r4, ip, r2
 8012518:	4439      	add	r1, r7
 801251a:	2a00      	cmp	r2, #0
 801251c:	bfbc      	itt	lt
 801251e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8012522:	1912      	addlt	r2, r2, r4
 8012524:	fb0c a101 	mla	r1, ip, r1, sl
 8012528:	44e6      	add	lr, ip
 801252a:	80e9      	strh	r1, [r5, #6]
 801252c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801252e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8012532:	eb08 0501 	add.w	r5, r8, r1
 8012536:	6901      	ldr	r1, [r0, #16]
 8012538:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801253c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8012540:	ea58 070e 	orrs.w	r7, r8, lr
 8012544:	d010      	beq.n	8012568 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012546:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801254a:	f1be 0f00 	cmp.w	lr, #0
 801254e:	db0b      	blt.n	8012568 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012550:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012552:	45be      	cmp	lr, r7
 8012554:	da08      	bge.n	8012568 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8012556:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801255a:	45be      	cmp	lr, r7
 801255c:	bf3c      	itt	cc
 801255e:	3108      	addcc	r1, #8
 8012560:	6101      	strcc	r1, [r0, #16]
 8012562:	f10e 0101 	add.w	r1, lr, #1
 8012566:	6081      	str	r1, [r0, #8]
 8012568:	6901      	ldr	r1, [r0, #16]
 801256a:	f04f 0e00 	mov.w	lr, #0
 801256e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8012572:	42ae      	cmp	r6, r5
 8012574:	800d      	strh	r5, [r1, #0]
 8012576:	4463      	add	r3, ip
 8012578:	f8a1 8002 	strh.w	r8, [r1, #2]
 801257c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012580:	f8a1 e006 	strh.w	lr, [r1, #6]
 8012584:	d053      	beq.n	801262e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8012586:	9901      	ldr	r1, [sp, #4]
 8012588:	1b12      	subs	r2, r2, r4
 801258a:	1ac9      	subs	r1, r1, r3
 801258c:	4461      	add	r1, ip
 801258e:	0149      	lsls	r1, r1, #5
 8012590:	fb91 fef4 	sdiv	lr, r1, r4
 8012594:	fb04 111e 	mls	r1, r4, lr, r1
 8012598:	2900      	cmp	r1, #0
 801259a:	bfbc      	itt	lt
 801259c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80125a0:	1909      	addlt	r1, r1, r4
 80125a2:	f10e 0701 	add.w	r7, lr, #1
 80125a6:	970d      	str	r7, [sp, #52]	@ 0x34
 80125a8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80125ac:	1852      	adds	r2, r2, r1
 80125ae:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80125b0:	bf54      	ite	pl
 80125b2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 80125b6:	46f4      	movmi	ip, lr
 80125b8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80125bc:	bf58      	it	pl
 80125be:	1b12      	subpl	r2, r2, r4
 80125c0:	4463      	add	r3, ip
 80125c2:	443d      	add	r5, r7
 80125c4:	44e3      	add	fp, ip
 80125c6:	f8aa b004 	strh.w	fp, [sl, #4]
 80125ca:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80125ce:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80125d2:	f8aa b006 	strh.w	fp, [sl, #6]
 80125d6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80125da:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80125de:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80125e2:	ea5b 070a 	orrs.w	r7, fp, sl
 80125e6:	d014      	beq.n	8012612 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80125e8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80125ec:	f1ba 0f00 	cmp.w	sl, #0
 80125f0:	db0f      	blt.n	8012612 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80125f2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80125f4:	45ba      	cmp	sl, r7
 80125f6:	da0c      	bge.n	8012612 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80125f8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80125fc:	45ba      	cmp	sl, r7
 80125fe:	f10a 0a01 	add.w	sl, sl, #1
 8012602:	bf38      	it	cc
 8012604:	f10c 0c08 	addcc.w	ip, ip, #8
 8012608:	f8c0 a008 	str.w	sl, [r0, #8]
 801260c:	bf38      	it	cc
 801260e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8012612:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012616:	f04f 0700 	mov.w	r7, #0
 801261a:	42ae      	cmp	r6, r5
 801261c:	f8ac 5000 	strh.w	r5, [ip]
 8012620:	f8ac 8002 	strh.w	r8, [ip, #2]
 8012624:	f8ac 7004 	strh.w	r7, [ip, #4]
 8012628:	f8ac 7006 	strh.w	r7, [ip, #6]
 801262c:	d1bc      	bne.n	80125a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801262e:	6904      	ldr	r4, [r0, #16]
 8012630:	9a01      	ldr	r2, [sp, #4]
 8012632:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012634:	1ad3      	subs	r3, r2, r3
 8012636:	88a2      	ldrh	r2, [r4, #4]
 8012638:	3120      	adds	r1, #32
 801263a:	441a      	add	r2, r3
 801263c:	80a2      	strh	r2, [r4, #4]
 801263e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012640:	1a89      	subs	r1, r1, r2
 8012642:	88e2      	ldrh	r2, [r4, #6]
 8012644:	fb03 2301 	mla	r3, r3, r1, r2
 8012648:	80e3      	strh	r3, [r4, #6]
 801264a:	e650      	b.n	80122ee <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801264c:	f04f 37ff 	mov.w	r7, #4294967295
 8012650:	434a      	muls	r2, r1
 8012652:	4264      	negs	r4, r4
 8012654:	970a      	str	r7, [sp, #40]	@ 0x28
 8012656:	2700      	movs	r7, #0
 8012658:	e758      	b.n	801250c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801265a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801265e:	f009 031f 	and.w	r3, r9, #31
 8012662:	f007 071f 	and.w	r7, r7, #31
 8012666:	fa1f fc8c 	uxth.w	ip, ip
 801266a:	45d0      	cmp	r8, sl
 801266c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801266e:	fa1f fe8e 	uxth.w	lr, lr
 8012672:	d10a      	bne.n	801268a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8012674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012676:	449c      	add	ip, r3
 8012678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801267a:	441f      	add	r7, r3
 801267c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801267e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8012682:	fb03 e707 	mla	r7, r3, r7, lr
 8012686:	80ef      	strh	r7, [r5, #6]
 8012688:	e6bc      	b.n	8012404 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801268a:	2900      	cmp	r1, #0
 801268c:	f2c0 80a6 	blt.w	80127dc <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8012690:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012692:	f1c7 0320 	rsb	r3, r7, #32
 8012696:	4363      	muls	r3, r4
 8012698:	2401      	movs	r4, #1
 801269a:	940d      	str	r4, [sp, #52]	@ 0x34
 801269c:	2420      	movs	r4, #32
 801269e:	940c      	str	r4, [sp, #48]	@ 0x30
 80126a0:	fb93 f4f1 	sdiv	r4, r3, r1
 80126a4:	fb01 3b14 	mls	fp, r1, r4, r3
 80126a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126aa:	f1bb 0f00 	cmp.w	fp, #0
 80126ae:	441f      	add	r7, r3
 80126b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80126b2:	bfbc      	itt	lt
 80126b4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80126b8:	448b      	addlt	fp, r1
 80126ba:	fb04 e707 	mla	r7, r4, r7, lr
 80126be:	44a4      	add	ip, r4
 80126c0:	80ef      	strh	r7, [r5, #6]
 80126c2:	f8a5 c004 	strh.w	ip, [r5, #4]
 80126c6:	eb08 0503 	add.w	r5, r8, r3
 80126ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80126ce:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80126d2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80126d6:	ea5e 0307 	orrs.w	r3, lr, r7
 80126da:	d011      	beq.n	8012700 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80126dc:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80126e0:	f1be 0f00 	cmp.w	lr, #0
 80126e4:	db0c      	blt.n	8012700 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80126e6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80126e8:	45be      	cmp	lr, r7
 80126ea:	da09      	bge.n	8012700 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80126ec:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80126f0:	45be      	cmp	lr, r7
 80126f2:	bf3c      	itt	cc
 80126f4:	f10c 0708 	addcc.w	r7, ip, #8
 80126f8:	6107      	strcc	r7, [r0, #16]
 80126fa:	f10e 0701 	add.w	r7, lr, #1
 80126fe:	6087      	str	r7, [r0, #8]
 8012700:	6907      	ldr	r7, [r0, #16]
 8012702:	b213      	sxth	r3, r2
 8012704:	4555      	cmp	r5, sl
 8012706:	9310      	str	r3, [sp, #64]	@ 0x40
 8012708:	807b      	strh	r3, [r7, #2]
 801270a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801270c:	803d      	strh	r5, [r7, #0]
 801270e:	80be      	strh	r6, [r7, #4]
 8012710:	eb04 0c03 	add.w	ip, r4, r3
 8012714:	80fe      	strh	r6, [r7, #6]
 8012716:	d050      	beq.n	80127ba <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8012718:	9b01      	ldr	r3, [sp, #4]
 801271a:	eba3 070c 	sub.w	r7, r3, ip
 801271e:	ebab 0301 	sub.w	r3, fp, r1
 8012722:	443c      	add	r4, r7
 8012724:	9309      	str	r3, [sp, #36]	@ 0x24
 8012726:	0164      	lsls	r4, r4, #5
 8012728:	fb94 f8f1 	sdiv	r8, r4, r1
 801272c:	fb01 4418 	mls	r4, r1, r8, r4
 8012730:	2c00      	cmp	r4, #0
 8012732:	bfbc      	itt	lt
 8012734:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8012738:	1864      	addlt	r4, r4, r1
 801273a:	f108 0701 	add.w	r7, r8, #1
 801273e:	9711      	str	r7, [sp, #68]	@ 0x44
 8012740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012742:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012746:	191b      	adds	r3, r3, r4
 8012748:	f8be b004 	ldrh.w	fp, [lr, #4]
 801274c:	bf54      	ite	pl
 801274e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8012750:	4647      	movmi	r7, r8
 8012752:	9309      	str	r3, [sp, #36]	@ 0x24
 8012754:	bf58      	it	pl
 8012756:	1a5b      	subpl	r3, r3, r1
 8012758:	44bb      	add	fp, r7
 801275a:	44bc      	add	ip, r7
 801275c:	bf58      	it	pl
 801275e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8012760:	f8ae b004 	strh.w	fp, [lr, #4]
 8012764:	f8be b006 	ldrh.w	fp, [lr, #6]
 8012768:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801276c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801276e:	f8ae b006 	strh.w	fp, [lr, #6]
 8012772:	443d      	add	r5, r7
 8012774:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8012778:	f8be b006 	ldrh.w	fp, [lr, #6]
 801277c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8012780:	ea5b 0307 	orrs.w	r3, fp, r7
 8012784:	d011      	beq.n	80127aa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012786:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801278a:	f1bb 0f00 	cmp.w	fp, #0
 801278e:	db0c      	blt.n	80127aa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012790:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8012792:	45bb      	cmp	fp, r7
 8012794:	da09      	bge.n	80127aa <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8012796:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801279a:	45bb      	cmp	fp, r7
 801279c:	bf3c      	itt	cc
 801279e:	f10e 0708 	addcc.w	r7, lr, #8
 80127a2:	6107      	strcc	r7, [r0, #16]
 80127a4:	f10b 0701 	add.w	r7, fp, #1
 80127a8:	6087      	str	r7, [r0, #8]
 80127aa:	6907      	ldr	r7, [r0, #16]
 80127ac:	4555      	cmp	r5, sl
 80127ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80127b0:	803d      	strh	r5, [r7, #0]
 80127b2:	807b      	strh	r3, [r7, #2]
 80127b4:	80be      	strh	r6, [r7, #4]
 80127b6:	80fe      	strh	r6, [r7, #6]
 80127b8:	d1c2      	bne.n	8012740 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80127ba:	9b01      	ldr	r3, [sp, #4]
 80127bc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80127be:	eba3 0c0c 	sub.w	ip, r3, ip
 80127c2:	6903      	ldr	r3, [r0, #16]
 80127c4:	3720      	adds	r7, #32
 80127c6:	8899      	ldrh	r1, [r3, #4]
 80127c8:	4461      	add	r1, ip
 80127ca:	8099      	strh	r1, [r3, #4]
 80127cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127ce:	1a7f      	subs	r7, r7, r1
 80127d0:	88d9      	ldrh	r1, [r3, #6]
 80127d2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80127d6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80127da:	e613      	b.n	8012404 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80127dc:	f04f 34ff 	mov.w	r4, #4294967295
 80127e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127e2:	4249      	negs	r1, r1
 80127e4:	940d      	str	r4, [sp, #52]	@ 0x34
 80127e6:	2400      	movs	r4, #0
 80127e8:	437b      	muls	r3, r7
 80127ea:	e758      	b.n	801269e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80127ec:	9905      	ldr	r1, [sp, #20]
 80127ee:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80127f2:	f009 0c1f 	and.w	ip, r9, #31
 80127f6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80127fa:	f001 011f 	and.w	r1, r1, #31
 80127fe:	45f3      	cmp	fp, lr
 8012800:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8012804:	9102      	str	r1, [sp, #8]
 8012806:	9904      	ldr	r1, [sp, #16]
 8012808:	eba1 0406 	sub.w	r4, r1, r6
 801280c:	d108      	bne.n	8012820 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801280e:	9b02      	ldr	r3, [sp, #8]
 8012810:	44a0      	add	r8, r4
 8012812:	449c      	add	ip, r3
 8012814:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012818:	fb04 a40c 	mla	r4, r4, ip, sl
 801281c:	80fc      	strh	r4, [r7, #6]
 801281e:	e461      	b.n	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8012820:	9905      	ldr	r1, [sp, #20]
 8012822:	ebb1 0109 	subs.w	r1, r1, r9
 8012826:	bf51      	iteee	pl
 8012828:	f1cc 0520 	rsbpl	r5, ip, #32
 801282c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8012830:	4249      	negmi	r1, r1
 8012832:	2500      	movmi	r5, #0
 8012834:	bf5d      	ittte	pl
 8012836:	436c      	mulpl	r4, r5
 8012838:	2520      	movpl	r5, #32
 801283a:	f04f 0901 	movpl.w	r9, #1
 801283e:	f04f 39ff 	movmi.w	r9, #4294967295
 8012842:	9501      	str	r5, [sp, #4]
 8012844:	9b01      	ldr	r3, [sp, #4]
 8012846:	fb94 f5f1 	sdiv	r5, r4, r1
 801284a:	fb01 4415 	mls	r4, r1, r5, r4
 801284e:	449c      	add	ip, r3
 8012850:	eb0b 0309 	add.w	r3, fp, r9
 8012854:	2c00      	cmp	r4, #0
 8012856:	bfbc      	itt	lt
 8012858:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801285c:	1864      	addlt	r4, r4, r1
 801285e:	44a8      	add	r8, r5
 8012860:	fb05 ac0c 	mla	ip, r5, ip, sl
 8012864:	f8a7 8004 	strh.w	r8, [r7, #4]
 8012868:	f8a7 c006 	strh.w	ip, [r7, #6]
 801286c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012870:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8012874:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012878:	ea58 0707 	orrs.w	r7, r8, r7
 801287c:	d011      	beq.n	80128a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801287e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8012882:	f1b8 0f00 	cmp.w	r8, #0
 8012886:	db0c      	blt.n	80128a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8012888:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801288a:	45b8      	cmp	r8, r7
 801288c:	da09      	bge.n	80128a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801288e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8012892:	45b8      	cmp	r8, r7
 8012894:	bf3c      	itt	cc
 8012896:	f10c 0708 	addcc.w	r7, ip, #8
 801289a:	6107      	strcc	r7, [r0, #16]
 801289c:	f108 0701 	add.w	r7, r8, #1
 80128a0:	6087      	str	r7, [r0, #8]
 80128a2:	6907      	ldr	r7, [r0, #16]
 80128a4:	f04f 0c00 	mov.w	ip, #0
 80128a8:	b212      	sxth	r2, r2
 80128aa:	459e      	cmp	lr, r3
 80128ac:	803b      	strh	r3, [r7, #0]
 80128ae:	442e      	add	r6, r5
 80128b0:	807a      	strh	r2, [r7, #2]
 80128b2:	f8a7 c004 	strh.w	ip, [r7, #4]
 80128b6:	f8a7 c006 	strh.w	ip, [r7, #6]
 80128ba:	d04b      	beq.n	8012954 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80128bc:	9f04      	ldr	r7, [sp, #16]
 80128be:	1a64      	subs	r4, r4, r1
 80128c0:	f04f 0a00 	mov.w	sl, #0
 80128c4:	1bbf      	subs	r7, r7, r6
 80128c6:	443d      	add	r5, r7
 80128c8:	016d      	lsls	r5, r5, #5
 80128ca:	fb95 f8f1 	sdiv	r8, r5, r1
 80128ce:	fb01 5518 	mls	r5, r1, r8, r5
 80128d2:	4565      	cmp	r5, ip
 80128d4:	bfbc      	itt	lt
 80128d6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80128da:	186d      	addlt	r5, r5, r1
 80128dc:	f108 0701 	add.w	r7, r8, #1
 80128e0:	9703      	str	r7, [sp, #12]
 80128e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80128e6:	1964      	adds	r4, r4, r5
 80128e8:	444b      	add	r3, r9
 80128ea:	bf54      	ite	pl
 80128ec:	9f03      	ldrpl	r7, [sp, #12]
 80128ee:	4647      	movmi	r7, r8
 80128f0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80128f4:	bf58      	it	pl
 80128f6:	1a64      	subpl	r4, r4, r1
 80128f8:	443e      	add	r6, r7
 80128fa:	44bb      	add	fp, r7
 80128fc:	f8ac b004 	strh.w	fp, [ip, #4]
 8012900:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012904:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012908:	f8ac b006 	strh.w	fp, [ip, #6]
 801290c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012910:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012914:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012918:	ea5b 0707 	orrs.w	r7, fp, r7
 801291c:	d011      	beq.n	8012942 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801291e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8012922:	f1bb 0f00 	cmp.w	fp, #0
 8012926:	db0c      	blt.n	8012942 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012928:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801292a:	45bb      	cmp	fp, r7
 801292c:	da09      	bge.n	8012942 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801292e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012932:	45bb      	cmp	fp, r7
 8012934:	bf3c      	itt	cc
 8012936:	f10c 0708 	addcc.w	r7, ip, #8
 801293a:	6107      	strcc	r7, [r0, #16]
 801293c:	f10b 0701 	add.w	r7, fp, #1
 8012940:	6087      	str	r7, [r0, #8]
 8012942:	6907      	ldr	r7, [r0, #16]
 8012944:	459e      	cmp	lr, r3
 8012946:	803b      	strh	r3, [r7, #0]
 8012948:	807a      	strh	r2, [r7, #2]
 801294a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801294e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8012952:	d1c6      	bne.n	80128e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8012954:	9b04      	ldr	r3, [sp, #16]
 8012956:	1b9e      	subs	r6, r3, r6
 8012958:	6903      	ldr	r3, [r0, #16]
 801295a:	889a      	ldrh	r2, [r3, #4]
 801295c:	4432      	add	r2, r6
 801295e:	809a      	strh	r2, [r3, #4]
 8012960:	9a02      	ldr	r2, [sp, #8]
 8012962:	f102 0c20 	add.w	ip, r2, #32
 8012966:	9a01      	ldr	r2, [sp, #4]
 8012968:	ebac 0c02 	sub.w	ip, ip, r2
 801296c:	88da      	ldrh	r2, [r3, #6]
 801296e:	fb06 260c 	mla	r6, r6, ip, r2
 8012972:	80de      	strh	r6, [r3, #6]
 8012974:	f7ff bbb6 	b.w	80120e4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08012978 <_ZN8touchgfx7Outline6lineToEii>:
 8012978:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801297a:	079b      	lsls	r3, r3, #30
 801297c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801297e:	460e      	mov	r6, r1
 8012980:	4615      	mov	r5, r2
 8012982:	d511      	bpl.n	80129a8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012984:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8012988:	ea86 0701 	eor.w	r7, r6, r1
 801298c:	ea85 0302 	eor.w	r3, r5, r2
 8012990:	433b      	orrs	r3, r7
 8012992:	d009      	beq.n	80129a8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8012994:	4633      	mov	r3, r6
 8012996:	9500      	str	r5, [sp, #0]
 8012998:	f7ff fb4c 	bl	8012034 <_ZN8touchgfx7Outline10renderLineEiiii>
 801299c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801299e:	f043 0301 	orr.w	r3, r3, #1
 80129a2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80129a6:	6243      	str	r3, [r0, #36]	@ 0x24
 80129a8:	b003      	add	sp, #12
 80129aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080129ac <_ZN8touchgfx7Outline6moveToEii>:
 80129ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80129b0:	4615      	mov	r5, r2
 80129b2:	4604      	mov	r4, r0
 80129b4:	460e      	mov	r6, r1
 80129b6:	079a      	lsls	r2, r3, #30
 80129b8:	d401      	bmi.n	80129be <_ZN8touchgfx7Outline6moveToEii+0x12>
 80129ba:	f7ff fb07 	bl	8011fcc <_ZN8touchgfx7Outline5resetEv>
 80129be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80129c0:	07db      	lsls	r3, r3, #31
 80129c2:	d504      	bpl.n	80129ce <_ZN8touchgfx7Outline6moveToEii+0x22>
 80129c4:	4620      	mov	r0, r4
 80129c6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80129ca:	f7ff ffd5 	bl	8012978 <_ZN8touchgfx7Outline6lineToEii>
 80129ce:	6923      	ldr	r3, [r4, #16]
 80129d0:	1170      	asrs	r0, r6, #5
 80129d2:	1169      	asrs	r1, r5, #5
 80129d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129d8:	4290      	cmp	r0, r2
 80129da:	d103      	bne.n	80129e4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80129dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80129e0:	4291      	cmp	r1, r2
 80129e2:	d01a      	beq.n	8012a1a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80129e4:	88df      	ldrh	r7, [r3, #6]
 80129e6:	889a      	ldrh	r2, [r3, #4]
 80129e8:	433a      	orrs	r2, r7
 80129ea:	d010      	beq.n	8012a0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80129ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80129f0:	2a00      	cmp	r2, #0
 80129f2:	db0c      	blt.n	8012a0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80129f4:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80129f6:	42ba      	cmp	r2, r7
 80129f8:	da09      	bge.n	8012a0e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80129fa:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80129fe:	42ba      	cmp	r2, r7
 8012a00:	f102 0201 	add.w	r2, r2, #1
 8012a04:	bf38      	it	cc
 8012a06:	3308      	addcc	r3, #8
 8012a08:	60a2      	str	r2, [r4, #8]
 8012a0a:	bf38      	it	cc
 8012a0c:	6123      	strcc	r3, [r4, #16]
 8012a0e:	6923      	ldr	r3, [r4, #16]
 8012a10:	2200      	movs	r2, #0
 8012a12:	8018      	strh	r0, [r3, #0]
 8012a14:	8059      	strh	r1, [r3, #2]
 8012a16:	809a      	strh	r2, [r3, #4]
 8012a18:	80da      	strh	r2, [r3, #6]
 8012a1a:	6166      	str	r6, [r4, #20]
 8012a1c:	6225      	str	r5, [r4, #32]
 8012a1e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8012a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a28:	b0d0      	sub	sp, #320	@ 0x140
 8012a2a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012a2e:	466c      	mov	r4, sp
 8012a30:	4627      	mov	r7, r4
 8012a32:	1a0d      	subs	r5, r1, r0
 8012a34:	f100 0308 	add.w	r3, r0, #8
 8012a38:	2d48      	cmp	r5, #72	@ 0x48
 8012a3a:	f340 80d5 	ble.w	8012be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012a3e:	112d      	asrs	r5, r5, #4
 8012a40:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012a44:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012a48:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8012a4c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012a50:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012a54:	6816      	ldr	r6, [r2, #0]
 8012a56:	6006      	str	r6, [r0, #0]
 8012a58:	6856      	ldr	r6, [r2, #4]
 8012a5a:	6046      	str	r6, [r0, #4]
 8012a5c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012a60:	f8a2 8002 	strh.w	r8, [r2, #2]
 8012a64:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012a68:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012a6c:	f1a1 0208 	sub.w	r2, r1, #8
 8012a70:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012a74:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8012a78:	4565      	cmp	r5, ip
 8012a7a:	db06      	blt.n	8012a8a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8012a7c:	d119      	bne.n	8012ab2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012a7e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8012a82:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8012a86:	42ae      	cmp	r6, r5
 8012a88:	dd13      	ble.n	8012ab2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8012a8a:	460e      	mov	r6, r1
 8012a8c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8012a90:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8012a94:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012a98:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8012a9c:	601d      	str	r5, [r3, #0]
 8012a9e:	6875      	ldr	r5, [r6, #4]
 8012aa0:	605d      	str	r5, [r3, #4]
 8012aa2:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012aa6:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012aaa:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012aae:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012ab2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012ab6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8012aba:	42ae      	cmp	r6, r5
 8012abc:	db06      	blt.n	8012acc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8012abe:	d116      	bne.n	8012aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012ac0:	f9b0 c000 	ldrsh.w	ip, [r0]
 8012ac4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8012ac8:	45ac      	cmp	ip, r5
 8012aca:	da10      	bge.n	8012aee <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012acc:	681d      	ldr	r5, [r3, #0]
 8012ace:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012ad2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012ad6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012ada:	6005      	str	r5, [r0, #0]
 8012adc:	685d      	ldr	r5, [r3, #4]
 8012ade:	f8a0 8008 	strh.w	r8, [r0, #8]
 8012ae2:	6045      	str	r5, [r0, #4]
 8012ae4:	8146      	strh	r6, [r0, #10]
 8012ae6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8012aea:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8012aee:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012af2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012af6:	4565      	cmp	r5, ip
 8012af8:	db06      	blt.n	8012b08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8012afa:	d119      	bne.n	8012b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012afc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8012b00:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012b04:	42ae      	cmp	r6, r5
 8012b06:	da13      	bge.n	8012b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b08:	460e      	mov	r6, r1
 8012b0a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012b0e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8012b12:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012b16:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8012b1a:	6005      	str	r5, [r0, #0]
 8012b1c:	6875      	ldr	r5, [r6, #4]
 8012b1e:	6045      	str	r5, [r0, #4]
 8012b20:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012b24:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012b28:	f821 8c04 	strh.w	r8, [r1, #-4]
 8012b2c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012b30:	3308      	adds	r3, #8
 8012b32:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012b36:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8012b3a:	45e6      	cmp	lr, ip
 8012b3c:	dbf8      	blt.n	8012b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b3e:	d105      	bne.n	8012b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012b40:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012b44:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012b48:	42ae      	cmp	r6, r5
 8012b4a:	dbf1      	blt.n	8012b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b4c:	4615      	mov	r5, r2
 8012b4e:	3a08      	subs	r2, #8
 8012b50:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012b54:	45b4      	cmp	ip, r6
 8012b56:	dbf9      	blt.n	8012b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012b58:	d105      	bne.n	8012b66 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8012b5a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012b5e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8012b62:	45b0      	cmp	r8, r6
 8012b64:	dbf2      	blt.n	8012b4c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012b66:	4293      	cmp	r3, r2
 8012b68:	f1a5 0608 	sub.w	r6, r5, #8
 8012b6c:	d816      	bhi.n	8012b9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8012b6e:	f8d6 c000 	ldr.w	ip, [r6]
 8012b72:	f9b3 a000 	ldrsh.w	sl, [r3]
 8012b76:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8012b7a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8012b7e:	f8c3 c000 	str.w	ip, [r3]
 8012b82:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8012b86:	f8c3 c004 	str.w	ip, [r3, #4]
 8012b8a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012b8e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8012b92:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012b96:	f825 8c02 	strh.w	r8, [r5, #-2]
 8012b9a:	e7c9      	b.n	8012b30 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012b9c:	f8d6 e000 	ldr.w	lr, [r6]
 8012ba0:	f9b0 a000 	ldrsh.w	sl, [r0]
 8012ba4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8012ba8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8012bac:	f8c0 e000 	str.w	lr, [r0]
 8012bb0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8012bb4:	1a16      	subs	r6, r2, r0
 8012bb6:	f8c0 e004 	str.w	lr, [r0, #4]
 8012bba:	f825 ac08 	strh.w	sl, [r5, #-8]
 8012bbe:	f825 cc06 	strh.w	ip, [r5, #-6]
 8012bc2:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012bc6:	f825 8c02 	strh.w	r8, [r5, #-2]
 8012bca:	1acd      	subs	r5, r1, r3
 8012bcc:	10ed      	asrs	r5, r5, #3
 8012bce:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8012bd2:	bfb5      	itete	lt
 8012bd4:	e9c4 0200 	strdlt	r0, r2, [r4]
 8012bd8:	e9c4 3100 	strdge	r3, r1, [r4]
 8012bdc:	460a      	movlt	r2, r1
 8012bde:	4603      	movge	r3, r0
 8012be0:	3408      	adds	r4, #8
 8012be2:	4618      	mov	r0, r3
 8012be4:	4611      	mov	r1, r2
 8012be6:	e724      	b.n	8012a32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012be8:	4299      	cmp	r1, r3
 8012bea:	d927      	bls.n	8012c3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8012bec:	f1a3 0210 	sub.w	r2, r3, #16
 8012bf0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8012bf4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8012bf8:	45ac      	cmp	ip, r5
 8012bfa:	db06      	blt.n	8012c0a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8012bfc:	d11c      	bne.n	8012c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012bfe:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8012c02:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8012c06:	42ae      	cmp	r6, r5
 8012c08:	da16      	bge.n	8012c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8012c0a:	4615      	mov	r5, r2
 8012c0c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8012c10:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8012c14:	3a08      	subs	r2, #8
 8012c16:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8012c1a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8012c1e:	6196      	str	r6, [r2, #24]
 8012c20:	42a8      	cmp	r0, r5
 8012c22:	686e      	ldr	r6, [r5, #4]
 8012c24:	f8a2 9010 	strh.w	r9, [r2, #16]
 8012c28:	61d6      	str	r6, [r2, #28]
 8012c2a:	f8a2 c012 	strh.w	ip, [r2, #18]
 8012c2e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8012c32:	f8a2 e016 	strh.w	lr, [r2, #22]
 8012c36:	d1db      	bne.n	8012bf0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8012c38:	3308      	adds	r3, #8
 8012c3a:	e7d5      	b.n	8012be8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8012c3c:	42bc      	cmp	r4, r7
 8012c3e:	d903      	bls.n	8012c48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012c40:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8012c44:	3c08      	subs	r4, #8
 8012c46:	e6f4      	b.n	8012a32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012c48:	b050      	add	sp, #320	@ 0x140
 8012c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012c4e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8012c4e:	b510      	push	{r4, lr}
 8012c50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012c52:	4604      	mov	r4, r0
 8012c54:	07da      	lsls	r2, r3, #31
 8012c56:	d507      	bpl.n	8012c68 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8012c58:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8012c5c:	f7ff fe8c 	bl	8012978 <_ZN8touchgfx7Outline6lineToEii>
 8012c60:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012c62:	f023 0301 	bic.w	r3, r3, #1
 8012c66:	6243      	str	r3, [r0, #36]	@ 0x24
 8012c68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012c6a:	079b      	lsls	r3, r3, #30
 8012c6c:	d521      	bpl.n	8012cb2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8012c6e:	6923      	ldr	r3, [r4, #16]
 8012c70:	88d9      	ldrh	r1, [r3, #6]
 8012c72:	889a      	ldrh	r2, [r3, #4]
 8012c74:	430a      	orrs	r2, r1
 8012c76:	d010      	beq.n	8012c9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012c78:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012c7c:	2a00      	cmp	r2, #0
 8012c7e:	db0c      	blt.n	8012c9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012c80:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012c82:	428a      	cmp	r2, r1
 8012c84:	da09      	bge.n	8012c9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8012c86:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8012c8a:	4291      	cmp	r1, r2
 8012c8c:	f102 0201 	add.w	r2, r2, #1
 8012c90:	bf88      	it	hi
 8012c92:	3308      	addhi	r3, #8
 8012c94:	60a2      	str	r2, [r4, #8]
 8012c96:	bf88      	it	hi
 8012c98:	6123      	strhi	r3, [r4, #16]
 8012c9a:	68a1      	ldr	r1, [r4, #8]
 8012c9c:	b129      	cbz	r1, 8012caa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012c9e:	6863      	ldr	r3, [r4, #4]
 8012ca0:	4299      	cmp	r1, r3
 8012ca2:	d802      	bhi.n	8012caa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8012ca4:	68e0      	ldr	r0, [r4, #12]
 8012ca6:	f7ff febd 	bl	8012a24 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8012caa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012cac:	f023 0302 	bic.w	r3, r3, #2
 8012cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8012cb2:	68e0      	ldr	r0, [r4, #12]
 8012cb4:	bd10      	pop	{r4, pc}
	...

08012cb8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8012cb8:	4b01      	ldr	r3, [pc, #4]	@ (8012cc0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8012cba:	6818      	ldr	r0, [r3, #0]
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	24025380 	.word	0x24025380

08012cc4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8012cc4:	4b01      	ldr	r3, [pc, #4]	@ (8012ccc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8012cc6:	6818      	ldr	r0, [r3, #0]
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	24025384 	.word	0x24025384

08012cd0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012cd0:	b510      	push	{r4, lr}
 8012cd2:	6803      	ldr	r3, [r0, #0]
 8012cd4:	460c      	mov	r4, r1
 8012cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cd8:	4798      	blx	r3
 8012cda:	1b03      	subs	r3, r0, r4
 8012cdc:	4258      	negs	r0, r3
 8012cde:	4158      	adcs	r0, r3
 8012ce0:	bd10      	pop	{r4, pc}
	...

08012ce4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8012ce4:	4b01      	ldr	r3, [pc, #4]	@ (8012cec <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8012ce6:	6019      	str	r1, [r3, #0]
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop
 8012cec:	24025388 	.word	0x24025388

08012cf0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf4:	4696      	mov	lr, r2
 8012cf6:	b097      	sub	sp, #92	@ 0x5c
 8012cf8:	4605      	mov	r5, r0
 8012cfa:	4614      	mov	r4, r2
 8012cfc:	460e      	mov	r6, r1
 8012cfe:	461f      	mov	r7, r3
 8012d00:	f10d 0c1c 	add.w	ip, sp, #28
 8012d04:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8012d08:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8012d0c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8012d10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d18:	f8de 3000 	ldr.w	r3, [lr]
 8012d1c:	f104 0e14 	add.w	lr, r4, #20
 8012d20:	f8cc 3000 	str.w	r3, [ip]
 8012d24:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012d28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d30:	f8de 3000 	ldr.w	r3, [lr]
 8012d34:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012d38:	f8cc 3000 	str.w	r3, [ip]
 8012d3c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012d40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d48:	f8de 3000 	ldr.w	r3, [lr]
 8012d4c:	4631      	mov	r1, r6
 8012d4e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012d50:	4628      	mov	r0, r5
 8012d52:	f8cc 3000 	str.w	r3, [ip]
 8012d56:	682b      	ldr	r3, [r5, #0]
 8012d58:	9201      	str	r2, [sp, #4]
 8012d5a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012d5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8012d60:	9200      	str	r2, [sp, #0]
 8012d62:	aa07      	add	r2, sp, #28
 8012d64:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012d68:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8012d6c:	463b      	mov	r3, r7
 8012d6e:	47d8      	blx	fp
 8012d70:	46a6      	mov	lr, r4
 8012d72:	f10d 0c1c 	add.w	ip, sp, #28
 8012d76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d7e:	f8de 3000 	ldr.w	r3, [lr]
 8012d82:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012d86:	343c      	adds	r4, #60	@ 0x3c
 8012d88:	f8cc 3000 	str.w	r3, [ip]
 8012d8c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012d90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d98:	f8de 3000 	ldr.w	r3, [lr]
 8012d9c:	f8cc 3000 	str.w	r3, [ip]
 8012da0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012da6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012daa:	6823      	ldr	r3, [r4, #0]
 8012dac:	4631      	mov	r1, r6
 8012dae:	4628      	mov	r0, r5
 8012db0:	f8cc 3000 	str.w	r3, [ip]
 8012db4:	682b      	ldr	r3, [r5, #0]
 8012db6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012dba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012dbc:	f8cd 8008 	str.w	r8, [sp, #8]
 8012dc0:	9201      	str	r2, [sp, #4]
 8012dc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012dc4:	9200      	str	r2, [sp, #0]
 8012dc6:	aa07      	add	r2, sp, #28
 8012dc8:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8012dca:	463b      	mov	r3, r7
 8012dcc:	47a0      	blx	r4
 8012dce:	b017      	add	sp, #92	@ 0x5c
 8012dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012dd4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd8:	b08d      	sub	sp, #52	@ 0x34
 8012dda:	4688      	mov	r8, r1
 8012ddc:	f8d3 c000 	ldr.w	ip, [r3]
 8012de0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012de2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8012de6:	680f      	ldr	r7, [r1, #0]
 8012de8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8012dec:	eba7 070c 	sub.w	r7, r7, ip
 8012df0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8012df4:	edd3 6a07 	vldr	s13, [r3, #28]
 8012df8:	42bc      	cmp	r4, r7
 8012dfa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012dfc:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8012e00:	bfa8      	it	ge
 8012e02:	463c      	movge	r4, r7
 8012e04:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012e08:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012e0c:	ee07 4a90 	vmov	s15, r4
 8012e10:	eb09 0e0c 	add.w	lr, r9, ip
 8012e14:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8012e18:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8012e1c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8012e20:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8012e24:	4571      	cmp	r1, lr
 8012e26:	ee25 4a04 	vmul.f32	s8, s10, s8
 8012e2a:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012e2e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012e32:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012e36:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8012e3a:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012e3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012e42:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012e46:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012e4a:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012e4e:	f340 808c 	ble.w	8012f6a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012e52:	eba1 060e 	sub.w	r6, r1, lr
 8012e56:	fb96 f5f4 	sdiv	r5, r6, r4
 8012e5a:	ee07 5a10 	vmov	s14, r5
 8012e5e:	2d00      	cmp	r5, #0
 8012e60:	fb04 6615 	mls	r6, r4, r5, r6
 8012e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e68:	eea7 0a04 	vfma.f32	s0, s14, s8
 8012e6c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012e70:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012e74:	dd12      	ble.n	8012e9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8012e76:	ee70 6a44 	vsub.f32	s13, s0, s8
 8012e7a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012e7e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012e82:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8a:	bf14      	ite	ne
 8012e8c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8012e90:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012e94:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012e98:	ee22 2a07 	vmul.f32	s4, s4, s14
 8012e9c:	fb05 f204 	mul.w	r2, r5, r4
 8012ea0:	1abf      	subs	r7, r7, r2
 8012ea2:	4494      	add	ip, r2
 8012ea4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8012ea8:	4411      	add	r1, r2
 8012eaa:	eb09 020c 	add.w	r2, r9, ip
 8012eae:	b209      	sxth	r1, r1
 8012eb0:	443a      	add	r2, r7
 8012eb2:	428a      	cmp	r2, r1
 8012eb4:	bfc4      	itt	gt
 8012eb6:	eba1 0209 	subgt.w	r2, r1, r9
 8012eba:	eba2 070c 	subgt.w	r7, r2, ip
 8012ebe:	2f00      	cmp	r7, #0
 8012ec0:	dd50      	ble.n	8012f64 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8012ec2:	fb97 f1f4 	sdiv	r1, r7, r4
 8012ec6:	fb04 7211 	mls	r2, r4, r1, r7
 8012eca:	b90a      	cbnz	r2, 8012ed0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8012ecc:	3901      	subs	r1, #1
 8012ece:	4622      	mov	r2, r4
 8012ed0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012ed4:	6840      	ldr	r0, [r0, #4]
 8012ed6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8012eda:	44b6      	add	lr, r6
 8012edc:	f8d0 a000 	ldr.w	sl, [r0]
 8012ee0:	2900      	cmp	r1, #0
 8012ee2:	bfcc      	ite	gt
 8012ee4:	46a1      	movgt	r9, r4
 8012ee6:	4691      	movle	r9, r2
 8012ee8:	900b      	str	r0, [sp, #44]	@ 0x2c
 8012eea:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8012eec:	fb04 e505 	mla	r5, r4, r5, lr
 8012ef0:	eef0 6a42 	vmov.f32	s13, s4
 8012ef4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012ef8:	9008      	str	r0, [sp, #32]
 8012efa:	eeb0 7a61 	vmov.f32	s14, s3
 8012efe:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8012f00:	695b      	ldr	r3, [r3, #20]
 8012f02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012f06:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8012f0a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8012f0e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012f10:	445b      	add	r3, fp
 8012f12:	9307      	str	r3, [sp, #28]
 8012f14:	ee16 3a90 	vmov	r3, s13
 8012f18:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012f1c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012f20:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012f24:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012f28:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012f2c:	ee17 7a90 	vmov	r7, s15
 8012f30:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012f34:	fb97 f7f4 	sdiv	r7, r7, r4
 8012f38:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8012f3c:	ee17 ca90 	vmov	ip, s15
 8012f40:	fb9c fcf4 	sdiv	ip, ip, r4
 8012f44:	fb0c 3306 	mla	r3, ip, r6, r3
 8012f48:	9302      	str	r3, [sp, #8]
 8012f4a:	ee17 3a10 	vmov	r3, s14
 8012f4e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012f52:	fb07 3706 	mla	r7, r7, r6, r3
 8012f56:	eba9 0306 	sub.w	r3, r9, r6
 8012f5a:	e9cd 4700 	strd	r4, r7, [sp]
 8012f5e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012f62:	47a0      	blx	r4
 8012f64:	b00d      	add	sp, #52	@ 0x34
 8012f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	462e      	mov	r6, r5
 8012f6e:	e799      	b.n	8012ea4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f74:	b0db      	sub	sp, #364	@ 0x16c
 8012f76:	461d      	mov	r5, r3
 8012f78:	4614      	mov	r4, r2
 8012f7a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8012f7e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012f80:	4629      	mov	r1, r5
 8012f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f84:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8012f88:	9009      	str	r0, [sp, #36]	@ 0x24
 8012f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f8c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8012f90:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8012f94:	9310      	str	r3, [sp, #64]	@ 0x40
 8012f96:	6803      	ldr	r3, [r0, #0]
 8012f98:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8012f9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012f9e:	47b8      	blx	r7
 8012fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fa2:	6058      	str	r0, [r3, #4]
 8012fa4:	2800      	cmp	r0, #0
 8012fa6:	f000 83a1 	beq.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012faa:	682b      	ldr	r3, [r5, #0]
 8012fac:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8012fb0:	ed94 7a02 	vldr	s14, [r4, #8]
 8012fb4:	9314      	str	r3, [sp, #80]	@ 0x50
 8012fb6:	686b      	ldr	r3, [r5, #4]
 8012fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8012fbe:	4bc1      	ldr	r3, [pc, #772]	@ (80132c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012fc0:	7819      	ldrb	r1, [r3, #0]
 8012fc2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012fc6:	2900      	cmp	r1, #0
 8012fc8:	bf16      	itet	ne
 8012fca:	4619      	movne	r1, r3
 8012fcc:	4611      	moveq	r1, r2
 8012fce:	4613      	movne	r3, r2
 8012fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd4:	9116      	str	r1, [sp, #88]	@ 0x58
 8012fd6:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8012fda:	f240 8387 	bls.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fde:	ed94 7a07 	vldr	s14, [r4, #28]
 8012fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fea:	f240 837f 	bls.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012fee:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8012ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffa:	f240 8377 	bls.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012ffe:	6822      	ldr	r2, [r4, #0]
 8013000:	4bb1      	ldr	r3, [pc, #708]	@ (80132c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8013002:	429a      	cmp	r2, r3
 8013004:	f2c0 8372 	blt.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013008:	49b0      	ldr	r1, [pc, #704]	@ (80132cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801300a:	6963      	ldr	r3, [r4, #20]
 801300c:	428a      	cmp	r2, r1
 801300e:	f300 836d 	bgt.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013012:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013016:	48ae      	ldr	r0, [pc, #696]	@ (80132d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8013018:	33ff      	adds	r3, #255	@ 0xff
 801301a:	4283      	cmp	r3, r0
 801301c:	f200 8366 	bhi.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013020:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013022:	4dac      	ldr	r5, [pc, #688]	@ (80132d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8013024:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8013028:	33ff      	adds	r3, #255	@ 0xff
 801302a:	42ab      	cmp	r3, r5
 801302c:	f200 835e 	bhi.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8013030:	6862      	ldr	r2, [r4, #4]
 8013032:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8013036:	33ff      	adds	r3, #255	@ 0xff
 8013038:	4283      	cmp	r3, r0
 801303a:	f200 8357 	bhi.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801303e:	69a1      	ldr	r1, [r4, #24]
 8013040:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8013044:	33ff      	adds	r3, #255	@ 0xff
 8013046:	4283      	cmp	r3, r0
 8013048:	f200 8350 	bhi.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801304c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801304e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8013052:	30ff      	adds	r0, #255	@ 0xff
 8013054:	42a8      	cmp	r0, r5
 8013056:	f200 8349 	bhi.w	80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801305a:	428a      	cmp	r2, r1
 801305c:	f280 8110 	bge.w	8013280 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8013060:	429a      	cmp	r2, r3
 8013062:	f300 8119 	bgt.w	8013298 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8013066:	4299      	cmp	r1, r3
 8013068:	f280 811d 	bge.w	80132a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801306c:	2502      	movs	r5, #2
 801306e:	2701      	movs	r7, #1
 8013070:	46a9      	mov	r9, r5
 8013072:	46b8      	mov	r8, r7
 8013074:	f04f 0a00 	mov.w	sl, #0
 8013078:	4621      	mov	r1, r4
 801307a:	a849      	add	r0, sp, #292	@ 0x124
 801307c:	f004 fa34 	bl	80174e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8013080:	4622      	mov	r2, r4
 8013082:	4653      	mov	r3, sl
 8013084:	a949      	add	r1, sp, #292	@ 0x124
 8013086:	f8cd 9000 	str.w	r9, [sp]
 801308a:	a819      	add	r0, sp, #100	@ 0x64
 801308c:	f004 fb5c 	bl	8017748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8013090:	4622      	mov	r2, r4
 8013092:	4653      	mov	r3, sl
 8013094:	a949      	add	r1, sp, #292	@ 0x124
 8013096:	f8cd 8000 	str.w	r8, [sp]
 801309a:	a829      	add	r0, sp, #164	@ 0xa4
 801309c:	f004 fb54 	bl	8017748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80130a0:	4643      	mov	r3, r8
 80130a2:	4622      	mov	r2, r4
 80130a4:	a949      	add	r1, sp, #292	@ 0x124
 80130a6:	f8cd 9000 	str.w	r9, [sp]
 80130aa:	a839      	add	r0, sp, #228	@ 0xe4
 80130ac:	f004 fb4c 	bl	8017748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80130b0:	42af      	cmp	r7, r5
 80130b2:	af12      	add	r7, sp, #72	@ 0x48
 80130b4:	bfb7      	itett	lt
 80130b6:	2300      	movlt	r3, #0
 80130b8:	2301      	movge	r3, #1
 80130ba:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80130bc:	ac19      	addlt	r4, sp, #100	@ 0x64
 80130be:	bfb1      	iteee	lt
 80130c0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80130c2:	ad19      	addge	r5, sp, #100	@ 0x64
 80130c4:	930e      	strge	r3, [sp, #56]	@ 0x38
 80130c6:	ac29      	addge	r4, sp, #164	@ 0xa4
 80130c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80130ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80130ce:	e887 0003 	stmia.w	r7, {r0, r1}
 80130d2:	b928      	cbnz	r0, 80130e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80130d4:	4b80      	ldr	r3, [pc, #512]	@ (80132d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80130d6:	6818      	ldr	r0, [r3, #0]
 80130d8:	6803      	ldr	r3, [r0, #0]
 80130da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130dc:	4798      	blx	r3
 80130de:	6038      	str	r0, [r7, #0]
 80130e0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80130e2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80130e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80130ea:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80130ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80130ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130f0:	6963      	ldr	r3, [r4, #20]
 80130f2:	440b      	add	r3, r1
 80130f4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80130f8:	4408      	add	r0, r1
 80130fa:	b200      	sxth	r0, r0
 80130fc:	4283      	cmp	r3, r0
 80130fe:	900d      	str	r0, [sp, #52]	@ 0x34
 8013100:	f280 80dd 	bge.w	80132be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8013104:	428b      	cmp	r3, r1
 8013106:	da08      	bge.n	801311a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013108:	2a00      	cmp	r2, #0
 801310a:	dd06      	ble.n	801311a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801310c:	1acb      	subs	r3, r1, r3
 801310e:	429a      	cmp	r2, r3
 8013110:	f2c0 80e4 	blt.w	80132dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8013114:	2b00      	cmp	r3, #0
 8013116:	f300 80e2 	bgt.w	80132de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801311a:	6967      	ldr	r7, [r4, #20]
 801311c:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8013120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013122:	443b      	add	r3, r7
 8013124:	461f      	mov	r7, r3
 8013126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013128:	1bdf      	subs	r7, r3, r7
 801312a:	4297      	cmp	r7, r2
 801312c:	bfa8      	it	ge
 801312e:	4617      	movge	r7, r2
 8013130:	2f00      	cmp	r7, #0
 8013132:	f340 8166 	ble.w	8013402 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8013136:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013138:	6829      	ldr	r1, [r5, #0]
 801313a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801313e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013142:	4411      	add	r1, r2
 8013144:	6820      	ldr	r0, [r4, #0]
 8013146:	4299      	cmp	r1, r3
 8013148:	dd1a      	ble.n	8013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801314a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801314e:	4402      	add	r2, r0
 8013150:	440b      	add	r3, r1
 8013152:	b21b      	sxth	r3, r3
 8013154:	429a      	cmp	r2, r3
 8013156:	dc13      	bgt.n	8013180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8013158:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801315a:	a912      	add	r1, sp, #72	@ 0x48
 801315c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801315e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	9206      	str	r2, [sp, #24]
 8013164:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013166:	9500      	str	r5, [sp, #0]
 8013168:	9205      	str	r2, [sp, #20]
 801316a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801316c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8013170:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8013172:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8013176:	aa49      	add	r2, sp, #292	@ 0x124
 8013178:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801317c:	4623      	mov	r3, r4
 801317e:	47c8      	blx	r9
 8013180:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8013184:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8013188:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801318c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013190:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8013194:	68a1      	ldr	r1, [r4, #8]
 8013196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801319a:	ed94 6a08 	vldr	s12, [r4, #32]
 801319e:	edd4 6a07 	vldr	s13, [r4, #28]
 80131a2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80131a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80131aa:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80131ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80131b2:	edc4 6a07 	vstr	s13, [r4, #28]
 80131b6:	441a      	add	r2, r3
 80131b8:	6963      	ldr	r3, [r4, #20]
 80131ba:	3301      	adds	r3, #1
 80131bc:	6022      	str	r2, [r4, #0]
 80131be:	6163      	str	r3, [r4, #20]
 80131c0:	69a3      	ldr	r3, [r4, #24]
 80131c2:	3b01      	subs	r3, #1
 80131c4:	61a3      	str	r3, [r4, #24]
 80131c6:	6923      	ldr	r3, [r4, #16]
 80131c8:	440b      	add	r3, r1
 80131ca:	68e1      	ldr	r1, [r4, #12]
 80131cc:	428b      	cmp	r3, r1
 80131ce:	6123      	str	r3, [r4, #16]
 80131d0:	db15      	blt.n	80131fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80131d2:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80131d6:	3201      	adds	r2, #1
 80131d8:	1a5b      	subs	r3, r3, r1
 80131da:	ee76 6a26 	vadd.f32	s13, s12, s13
 80131de:	6022      	str	r2, [r4, #0]
 80131e0:	6123      	str	r3, [r4, #16]
 80131e2:	edc4 6a07 	vstr	s13, [r4, #28]
 80131e6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80131ea:	ee36 7a87 	vadd.f32	s14, s13, s14
 80131ee:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80131f2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80131f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80131fa:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80131fe:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013202:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8013206:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801320a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801320e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013212:	68a9      	ldr	r1, [r5, #8]
 8013214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013218:	ed95 6a08 	vldr	s12, [r5, #32]
 801321c:	edd5 6a07 	vldr	s13, [r5, #28]
 8013220:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013224:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013228:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801322c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013230:	edc5 6a07 	vstr	s13, [r5, #28]
 8013234:	441a      	add	r2, r3
 8013236:	696b      	ldr	r3, [r5, #20]
 8013238:	3301      	adds	r3, #1
 801323a:	602a      	str	r2, [r5, #0]
 801323c:	616b      	str	r3, [r5, #20]
 801323e:	69ab      	ldr	r3, [r5, #24]
 8013240:	3b01      	subs	r3, #1
 8013242:	61ab      	str	r3, [r5, #24]
 8013244:	692b      	ldr	r3, [r5, #16]
 8013246:	440b      	add	r3, r1
 8013248:	68e9      	ldr	r1, [r5, #12]
 801324a:	428b      	cmp	r3, r1
 801324c:	612b      	str	r3, [r5, #16]
 801324e:	db15      	blt.n	801327c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8013250:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8013254:	3201      	adds	r2, #1
 8013256:	1a5b      	subs	r3, r3, r1
 8013258:	ee76 6a26 	vadd.f32	s13, s12, s13
 801325c:	602a      	str	r2, [r5, #0]
 801325e:	612b      	str	r3, [r5, #16]
 8013260:	edc5 6a07 	vstr	s13, [r5, #28]
 8013264:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013268:	ee36 7a87 	vadd.f32	s14, s13, s14
 801326c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013270:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8013274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013278:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801327c:	3f01      	subs	r7, #1
 801327e:	e757      	b.n	8013130 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8013280:	4299      	cmp	r1, r3
 8013282:	dc13      	bgt.n	80132ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8013284:	429a      	cmp	r2, r3
 8013286:	da14      	bge.n	80132b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8013288:	2502      	movs	r5, #2
 801328a:	2703      	movs	r7, #3
 801328c:	f04f 0800 	mov.w	r8, #0
 8013290:	46a9      	mov	r9, r5
 8013292:	f04f 0a01 	mov.w	sl, #1
 8013296:	e6ef      	b.n	8013078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8013298:	2501      	movs	r5, #1
 801329a:	2700      	movs	r7, #0
 801329c:	46a9      	mov	r9, r5
 801329e:	46b8      	mov	r8, r7
 80132a0:	f04f 0a02 	mov.w	sl, #2
 80132a4:	e6e8      	b.n	8013078 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80132a6:	2501      	movs	r5, #1
 80132a8:	2702      	movs	r7, #2
 80132aa:	e6e1      	b.n	8013070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80132ac:	2500      	movs	r5, #0
 80132ae:	2701      	movs	r7, #1
 80132b0:	e7f4      	b.n	801329c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80132b2:	2702      	movs	r7, #2
 80132b4:	2503      	movs	r5, #3
 80132b6:	f04f 0900 	mov.w	r9, #0
 80132ba:	46b8      	mov	r8, r7
 80132bc:	e7e9      	b.n	8013292 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80132be:	4613      	mov	r3, r2
 80132c0:	e728      	b.n	8013114 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80132c2:	bf00      	nop
 80132c4:	24025370 	.word	0x24025370
 80132c8:	fffd8f01 	.word	0xfffd8f01
 80132cc:	00027100 	.word	0x00027100
 80132d0:	0004e1ff 	.word	0x0004e1ff
 80132d4:	0004e1fe 	.word	0x0004e1fe
 80132d8:	24025378 	.word	0x24025378
 80132dc:	4613      	mov	r3, r2
 80132de:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80132e0:	469e      	mov	lr, r3
 80132e2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80132e4:	469c      	mov	ip, r3
 80132e6:	9111      	str	r1, [sp, #68]	@ 0x44
 80132e8:	f04f 0900 	mov.w	r9, #0
 80132ec:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 80132f0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 80132f4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80132f8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80132fc:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8013300:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013304:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8013308:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801330c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8013310:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8013314:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8013318:	f1bc 0f00 	cmp.w	ip, #0
 801331c:	d147      	bne.n	80133ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801331e:	eb03 0c07 	add.w	ip, r3, r7
 8013322:	1ad7      	subs	r7, r2, r3
 8013324:	f1b9 0f00 	cmp.w	r9, #0
 8013328:	d009      	beq.n	801333e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801332a:	9029      	str	r0, [sp, #164]	@ 0xa4
 801332c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8013330:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8013334:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8013338:	912d      	str	r1, [sp, #180]	@ 0xb4
 801333a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801333e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8013340:	f04f 0800 	mov.w	r8, #0
 8013344:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013348:	9111      	str	r1, [sp, #68]	@ 0x44
 801334a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801334e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8013352:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013356:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801335a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801335e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8013362:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8013366:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801336a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801336e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8013372:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8013376:	f1be 0f00 	cmp.w	lr, #0
 801337a:	d031      	beq.n	80133e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801337c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801337e:	4450      	add	r0, sl
 8013380:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013384:	4431      	add	r1, r6
 8013386:	ee37 7a04 	vadd.f32	s14, s14, s8
 801338a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801338e:	4549      	cmp	r1, r9
 8013390:	db08      	blt.n	80133a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8013392:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013396:	3001      	adds	r0, #1
 8013398:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801339c:	eba1 0109 	sub.w	r1, r1, r9
 80133a0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80133a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80133a8:	f04f 0801 	mov.w	r8, #1
 80133ac:	e7e3      	b.n	8013376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80133ae:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80133b0:	4450      	add	r0, sl
 80133b2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80133b6:	4431      	add	r1, r6
 80133b8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80133bc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80133c0:	4541      	cmp	r1, r8
 80133c2:	db08      	blt.n	80133d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80133c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80133c8:	3001      	adds	r0, #1
 80133ca:	ee37 7a25 	vadd.f32	s14, s14, s11
 80133ce:	eba1 0108 	sub.w	r1, r1, r8
 80133d2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80133d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80133da:	f04f 0901 	mov.w	r9, #1
 80133de:	e79b      	b.n	8013318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80133e0:	449c      	add	ip, r3
 80133e2:	1aff      	subs	r7, r7, r3
 80133e4:	f1b8 0f00 	cmp.w	r8, #0
 80133e8:	d009      	beq.n	80133fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80133ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80133ec:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80133f0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80133f4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80133f8:	911d      	str	r1, [sp, #116]	@ 0x74
 80133fa:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80133fe:	1ad2      	subs	r2, r2, r3
 8013400:	e68b      	b.n	801311a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8013402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013404:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8013406:	2b00      	cmp	r3, #0
 8013408:	f000 80d1 	beq.w	80135ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801340c:	ad19      	add	r5, sp, #100	@ 0x64
 801340e:	ac39      	add	r4, sp, #228	@ 0xe4
 8013410:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013412:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8013416:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801341a:	930c      	str	r3, [sp, #48]	@ 0x30
 801341c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801341e:	6963      	ldr	r3, [r4, #20]
 8013420:	440b      	add	r3, r1
 8013422:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8013426:	4408      	add	r0, r1
 8013428:	b200      	sxth	r0, r0
 801342a:	4283      	cmp	r3, r0
 801342c:	900d      	str	r0, [sp, #52]	@ 0x34
 801342e:	f280 80c1 	bge.w	80135b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8013432:	428b      	cmp	r3, r1
 8013434:	da08      	bge.n	8013448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8013436:	2a00      	cmp	r2, #0
 8013438:	dd06      	ble.n	8013448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801343a:	1acb      	subs	r3, r1, r3
 801343c:	429a      	cmp	r2, r3
 801343e:	f2c0 80bb 	blt.w	80135b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8013442:	2b00      	cmp	r3, #0
 8013444:	f300 80b9 	bgt.w	80135ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8013448:	6967      	ldr	r7, [r4, #20]
 801344a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801344e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013450:	443b      	add	r3, r7
 8013452:	461f      	mov	r7, r3
 8013454:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013456:	1bdf      	subs	r7, r3, r7
 8013458:	4297      	cmp	r7, r2
 801345a:	bfa8      	it	ge
 801345c:	4617      	movge	r7, r2
 801345e:	2f00      	cmp	r7, #0
 8013460:	f340 813c 	ble.w	80136dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8013464:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8013466:	6829      	ldr	r1, [r5, #0]
 8013468:	f9b3 2000 	ldrsh.w	r2, [r3]
 801346c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8013470:	4411      	add	r1, r2
 8013472:	6820      	ldr	r0, [r4, #0]
 8013474:	4299      	cmp	r1, r3
 8013476:	dd1a      	ble.n	80134ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013478:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801347c:	4402      	add	r2, r0
 801347e:	440b      	add	r3, r1
 8013480:	b21b      	sxth	r3, r3
 8013482:	429a      	cmp	r2, r3
 8013484:	dc13      	bgt.n	80134ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8013486:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8013488:	a912      	add	r1, sp, #72	@ 0x48
 801348a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801348c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	9206      	str	r2, [sp, #24]
 8013492:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013494:	9500      	str	r5, [sp, #0]
 8013496:	9205      	str	r2, [sp, #20]
 8013498:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801349a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801349e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80134a0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80134a4:	aa49      	add	r2, sp, #292	@ 0x124
 80134a6:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80134aa:	4623      	mov	r3, r4
 80134ac:	47c8      	blx	r9
 80134ae:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80134b2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80134b6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80134ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134be:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80134c2:	68a1      	ldr	r1, [r4, #8]
 80134c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80134c8:	ed94 6a08 	vldr	s12, [r4, #32]
 80134cc:	edd4 6a07 	vldr	s13, [r4, #28]
 80134d0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80134d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80134d8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80134dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134e0:	edc4 6a07 	vstr	s13, [r4, #28]
 80134e4:	441a      	add	r2, r3
 80134e6:	6963      	ldr	r3, [r4, #20]
 80134e8:	3301      	adds	r3, #1
 80134ea:	6022      	str	r2, [r4, #0]
 80134ec:	6163      	str	r3, [r4, #20]
 80134ee:	69a3      	ldr	r3, [r4, #24]
 80134f0:	3b01      	subs	r3, #1
 80134f2:	61a3      	str	r3, [r4, #24]
 80134f4:	6923      	ldr	r3, [r4, #16]
 80134f6:	440b      	add	r3, r1
 80134f8:	68e1      	ldr	r1, [r4, #12]
 80134fa:	428b      	cmp	r3, r1
 80134fc:	6123      	str	r3, [r4, #16]
 80134fe:	db15      	blt.n	801352c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8013500:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8013504:	3201      	adds	r2, #1
 8013506:	1a5b      	subs	r3, r3, r1
 8013508:	ee76 6a26 	vadd.f32	s13, s12, s13
 801350c:	6022      	str	r2, [r4, #0]
 801350e:	6123      	str	r3, [r4, #16]
 8013510:	edc4 6a07 	vstr	s13, [r4, #28]
 8013514:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8013518:	ee36 7a87 	vadd.f32	s14, s13, s14
 801351c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8013520:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8013524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013528:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801352c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8013530:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8013534:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8013538:	ee37 7a27 	vadd.f32	s14, s14, s15
 801353c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8013540:	68a9      	ldr	r1, [r5, #8]
 8013542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013546:	ed95 6a08 	vldr	s12, [r5, #32]
 801354a:	edd5 6a07 	vldr	s13, [r5, #28]
 801354e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8013552:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013556:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801355a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801355e:	edc5 6a07 	vstr	s13, [r5, #28]
 8013562:	441a      	add	r2, r3
 8013564:	696b      	ldr	r3, [r5, #20]
 8013566:	3301      	adds	r3, #1
 8013568:	602a      	str	r2, [r5, #0]
 801356a:	616b      	str	r3, [r5, #20]
 801356c:	69ab      	ldr	r3, [r5, #24]
 801356e:	3b01      	subs	r3, #1
 8013570:	61ab      	str	r3, [r5, #24]
 8013572:	692b      	ldr	r3, [r5, #16]
 8013574:	440b      	add	r3, r1
 8013576:	68e9      	ldr	r1, [r5, #12]
 8013578:	428b      	cmp	r3, r1
 801357a:	612b      	str	r3, [r5, #16]
 801357c:	db15      	blt.n	80135aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801357e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8013582:	3201      	adds	r2, #1
 8013584:	1a5b      	subs	r3, r3, r1
 8013586:	ee76 6a26 	vadd.f32	s13, s12, s13
 801358a:	602a      	str	r2, [r5, #0]
 801358c:	612b      	str	r3, [r5, #16]
 801358e:	edc5 6a07 	vstr	s13, [r5, #28]
 8013592:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8013596:	ee36 7a87 	vadd.f32	s14, s13, s14
 801359a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801359e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80135a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135a6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80135aa:	3f01      	subs	r7, #1
 80135ac:	e757      	b.n	801345e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80135ae:	ad39      	add	r5, sp, #228	@ 0xe4
 80135b0:	ac19      	add	r4, sp, #100	@ 0x64
 80135b2:	e72d      	b.n	8013410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80135b4:	4613      	mov	r3, r2
 80135b6:	e744      	b.n	8013442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80135b8:	4613      	mov	r3, r2
 80135ba:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 80135bc:	469e      	mov	lr, r3
 80135be:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80135c2:	461f      	mov	r7, r3
 80135c4:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 80135c8:	f04f 0900 	mov.w	r9, #0
 80135cc:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 80135d0:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 80135d4:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 80135d8:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 80135dc:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 80135e0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80135e2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80135e6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 80135ea:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 80135ee:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 80135f2:	960e      	str	r6, [sp, #56]	@ 0x38
 80135f4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80135f8:	2f00      	cmp	r7, #0
 80135fa:	d146      	bne.n	801368a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80135fc:	449c      	add	ip, r3
 80135fe:	1ad7      	subs	r7, r2, r3
 8013600:	f1b9 0f00 	cmp.w	r9, #0
 8013604:	d009      	beq.n	801361a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8013606:	9039      	str	r0, [sp, #228]	@ 0xe4
 8013608:	913d      	str	r1, [sp, #244]	@ 0xf4
 801360a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801360e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8013612:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8013616:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801361a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801361c:	f04f 0800 	mov.w	r8, #0
 8013620:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8013624:	910e      	str	r1, [sp, #56]	@ 0x38
 8013626:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801362a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801362e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8013632:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8013636:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801363a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801363e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8013642:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8013646:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801364a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801364e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8013652:	f1be 0f00 	cmp.w	lr, #0
 8013656:	d030      	beq.n	80136ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013658:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801365a:	4450      	add	r0, sl
 801365c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013660:	4431      	add	r1, r6
 8013662:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013666:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801366a:	4549      	cmp	r1, r9
 801366c:	db08      	blt.n	8013680 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801366e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013672:	3001      	adds	r0, #1
 8013674:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013678:	eba1 0109 	sub.w	r1, r1, r9
 801367c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013680:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013684:	f04f 0801 	mov.w	r8, #1
 8013688:	e7e3      	b.n	8013652 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801368a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801368c:	4450      	add	r0, sl
 801368e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013692:	4431      	add	r1, r6
 8013694:	ee77 7a84 	vadd.f32	s15, s15, s8
 8013698:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801369c:	4541      	cmp	r1, r8
 801369e:	db08      	blt.n	80136b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80136a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80136a4:	3001      	adds	r0, #1
 80136a6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80136aa:	eba1 0108 	sub.w	r1, r1, r8
 80136ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 80136b2:	3f01      	subs	r7, #1
 80136b4:	f04f 0901 	mov.w	r9, #1
 80136b8:	e79e      	b.n	80135f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80136ba:	449c      	add	ip, r3
 80136bc:	1aff      	subs	r7, r7, r3
 80136be:	f1b8 0f00 	cmp.w	r8, #0
 80136c2:	d009      	beq.n	80136d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80136c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80136c6:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 80136ca:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80136ce:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80136d2:	911d      	str	r1, [sp, #116]	@ 0x74
 80136d4:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80136d8:	1ad2      	subs	r2, r2, r3
 80136da:	e6b5      	b.n	8013448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80136dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	b923      	cbnz	r3, 80136ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80136e2:	4b04      	ldr	r3, [pc, #16]	@ (80136f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80136e4:	6818      	ldr	r0, [r3, #0]
 80136e6:	6803      	ldr	r3, [r0, #0]
 80136e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136ea:	4798      	blx	r3
 80136ec:	b05b      	add	sp, #364	@ 0x16c
 80136ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f2:	bf00      	nop
 80136f4:	24025378 	.word	0x24025378

080136f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80136f8:	b570      	push	{r4, r5, r6, lr}
 80136fa:	4604      	mov	r4, r0
 80136fc:	2500      	movs	r5, #0
 80136fe:	9805      	ldr	r0, [sp, #20]
 8013700:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8013704:	6061      	str	r1, [r4, #4]
 8013706:	8263      	strh	r3, [r4, #18]
 8013708:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801370c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013710:	8025      	strh	r5, [r4, #0]
 8013712:	7221      	strb	r1, [r4, #8]
 8013714:	7266      	strb	r6, [r4, #9]
 8013716:	60e0      	str	r0, [r4, #12]
 8013718:	8222      	strh	r2, [r4, #16]
 801371a:	82a3      	strh	r3, [r4, #20]
 801371c:	82e5      	strh	r5, [r4, #22]
 801371e:	8325      	strh	r5, [r4, #24]
 8013720:	8365      	strh	r5, [r4, #26]
 8013722:	83a5      	strh	r5, [r4, #28]
 8013724:	83e5      	strh	r5, [r4, #30]
 8013726:	8425      	strh	r5, [r4, #32]
 8013728:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 801372c:	b32e      	cbz	r6, 801377a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801372e:	6803      	ldr	r3, [r0, #0]
 8013730:	695b      	ldr	r3, [r3, #20]
 8013732:	4798      	blx	r3
 8013734:	4606      	mov	r6, r0
 8013736:	b300      	cbz	r0, 801377a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013738:	68e0      	ldr	r0, [r4, #12]
 801373a:	4631      	mov	r1, r6
 801373c:	6803      	ldr	r3, [r0, #0]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	4798      	blx	r3
 8013742:	4605      	mov	r5, r0
 8013744:	b1c8      	cbz	r0, 801377a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8013746:	7b43      	ldrb	r3, [r0, #13]
 8013748:	7a82      	ldrb	r2, [r0, #10]
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013750:	4313      	orrs	r3, r2
 8013752:	8423      	strh	r3, [r4, #32]
 8013754:	7a63      	ldrb	r3, [r4, #9]
 8013756:	2b06      	cmp	r3, #6
 8013758:	d10f      	bne.n	801377a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801375a:	68e0      	ldr	r0, [r4, #12]
 801375c:	462a      	mov	r2, r5
 801375e:	4631      	mov	r1, r6
 8013760:	6803      	ldr	r3, [r0, #0]
 8013762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013764:	4798      	blx	r3
 8013766:	7b6b      	ldrb	r3, [r5, #13]
 8013768:	005b      	lsls	r3, r3, #1
 801376a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801376e:	7aab      	ldrb	r3, [r5, #10]
 8013770:	4313      	orrs	r3, r2
 8013772:	4418      	add	r0, r3
 8013774:	8c23      	ldrh	r3, [r4, #32]
 8013776:	4418      	add	r0, r3
 8013778:	8420      	strh	r0, [r4, #32]
 801377a:	4620      	mov	r0, r4
 801377c:	bd70      	pop	{r4, r5, r6, pc}

0801377e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801377e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013782:	2400      	movs	r4, #0
 8013784:	b085      	sub	sp, #20
 8013786:	4681      	mov	r9, r0
 8013788:	4688      	mov	r8, r1
 801378a:	4692      	mov	sl, r2
 801378c:	469b      	mov	fp, r3
 801378e:	4627      	mov	r7, r4
 8013790:	4625      	mov	r5, r4
 8013792:	4626      	mov	r6, r4
 8013794:	4554      	cmp	r4, sl
 8013796:	da2a      	bge.n	80137ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8013798:	2300      	movs	r3, #0
 801379a:	9303      	str	r3, [sp, #12]
 801379c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80137a0:	429d      	cmp	r5, r3
 80137a2:	d004      	beq.n	80137ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80137a4:	f242 030b 	movw	r3, #8203	@ 0x200b
 80137a8:	429d      	cmp	r5, r3
 80137aa:	bf18      	it	ne
 80137ac:	462f      	movne	r7, r5
 80137ae:	ab03      	add	r3, sp, #12
 80137b0:	4642      	mov	r2, r8
 80137b2:	4659      	mov	r1, fp
 80137b4:	4648      	mov	r0, r9
 80137b6:	f003 fcad 	bl	8017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80137ba:	4605      	mov	r5, r0
 80137bc:	b1b8      	cbz	r0, 80137ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80137be:	280a      	cmp	r0, #10
 80137c0:	d015      	beq.n	80137ee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80137c2:	9a03      	ldr	r2, [sp, #12]
 80137c4:	b18a      	cbz	r2, 80137ea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80137c6:	7b50      	ldrb	r0, [r2, #13]
 80137c8:	4639      	mov	r1, r7
 80137ca:	7a93      	ldrb	r3, [r2, #10]
 80137cc:	0040      	lsls	r0, r0, #1
 80137ce:	8895      	ldrh	r5, [r2, #4]
 80137d0:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80137d4:	4303      	orrs	r3, r0
 80137d6:	4640      	mov	r0, r8
 80137d8:	9301      	str	r3, [sp, #4]
 80137da:	f8d8 3000 	ldr.w	r3, [r8]
 80137de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137e0:	4798      	blx	r3
 80137e2:	9b01      	ldr	r3, [sp, #4]
 80137e4:	4418      	add	r0, r3
 80137e6:	4406      	add	r6, r0
 80137e8:	b2b6      	uxth	r6, r6
 80137ea:	3401      	adds	r4, #1
 80137ec:	e7d2      	b.n	8013794 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80137ee:	4630      	mov	r0, r6
 80137f0:	b005      	add	sp, #20
 80137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80137f6:	2a02      	cmp	r2, #2
 80137f8:	b530      	push	{r4, r5, lr}
 80137fa:	d011      	beq.n	8013820 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80137fc:	2a03      	cmp	r2, #3
 80137fe:	d01c      	beq.n	801383a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8013800:	2a01      	cmp	r2, #1
 8013802:	d10c      	bne.n	801381e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8013804:	888b      	ldrh	r3, [r1, #4]
 8013806:	8801      	ldrh	r1, [r0, #0]
 8013808:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801380c:	1a5b      	subs	r3, r3, r1
 801380e:	8844      	ldrh	r4, [r0, #2]
 8013810:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8013814:	1a9b      	subs	r3, r3, r2
 8013816:	8004      	strh	r4, [r0, #0]
 8013818:	8081      	strh	r1, [r0, #4]
 801381a:	8043      	strh	r3, [r0, #2]
 801381c:	80c2      	strh	r2, [r0, #6]
 801381e:	bd30      	pop	{r4, r5, pc}
 8013820:	88cb      	ldrh	r3, [r1, #6]
 8013822:	8842      	ldrh	r2, [r0, #2]
 8013824:	1a9b      	subs	r3, r3, r2
 8013826:	88c2      	ldrh	r2, [r0, #6]
 8013828:	1a9b      	subs	r3, r3, r2
 801382a:	888a      	ldrh	r2, [r1, #4]
 801382c:	8801      	ldrh	r1, [r0, #0]
 801382e:	8043      	strh	r3, [r0, #2]
 8013830:	1a52      	subs	r2, r2, r1
 8013832:	8881      	ldrh	r1, [r0, #4]
 8013834:	1a52      	subs	r2, r2, r1
 8013836:	8002      	strh	r2, [r0, #0]
 8013838:	e7f1      	b.n	801381e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801383a:	88cb      	ldrh	r3, [r1, #6]
 801383c:	8841      	ldrh	r1, [r0, #2]
 801383e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8013842:	1a5b      	subs	r3, r3, r1
 8013844:	f9b0 5000 	ldrsh.w	r5, [r0]
 8013848:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801384c:	1a9b      	subs	r3, r3, r2
 801384e:	8045      	strh	r5, [r0, #2]
 8013850:	8082      	strh	r2, [r0, #4]
 8013852:	8003      	strh	r3, [r0, #0]
 8013854:	80c4      	strh	r4, [r0, #6]
 8013856:	e7e2      	b.n	801381e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08013858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8013858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801385c:	b09f      	sub	sp, #124	@ 0x7c
 801385e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013860:	9312      	str	r3, [sp, #72]	@ 0x48
 8013862:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013864:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013866:	8812      	ldrh	r2, [r2, #0]
 8013868:	889b      	ldrh	r3, [r3, #4]
 801386a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801386c:	4413      	add	r3, r2
 801386e:	900e      	str	r0, [sp, #56]	@ 0x38
 8013870:	6828      	ldr	r0, [r5, #0]
 8013872:	b21b      	sxth	r3, r3
 8013874:	9117      	str	r1, [sp, #92]	@ 0x5c
 8013876:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801387a:	9311      	str	r3, [sp, #68]	@ 0x44
 801387c:	6803      	ldr	r3, [r0, #0]
 801387e:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8013882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013884:	4798      	blx	r3
 8013886:	682b      	ldr	r3, [r5, #0]
 8013888:	9013      	str	r0, [sp, #76]	@ 0x4c
 801388a:	7b1a      	ldrb	r2, [r3, #12]
 801388c:	7adb      	ldrb	r3, [r3, #11]
 801388e:	9215      	str	r2, [sp, #84]	@ 0x54
 8013890:	9316      	str	r3, [sp, #88]	@ 0x58
 8013892:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8013896:	2c00      	cmp	r4, #0
 8013898:	d067      	beq.n	801396a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801389a:	7c2b      	ldrb	r3, [r5, #16]
 801389c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801389e:	2b06      	cmp	r3, #6
 80138a0:	bf14      	ite	ne
 80138a2:	2301      	movne	r3, #1
 80138a4:	2302      	moveq	r3, #2
 80138a6:	4413      	add	r3, r2
 80138a8:	f04f 0900 	mov.w	r9, #0
 80138ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80138ae:	464c      	mov	r4, r9
 80138b0:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 80138b4:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 80138b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80138bc:	4293      	cmp	r3, r2
 80138be:	f280 808b 	bge.w	80139d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 80138c2:	2300      	movs	r3, #0
 80138c4:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80138c8:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 80138cc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80138d0:	429c      	cmp	r4, r3
 80138d2:	d006      	beq.n	80138e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 80138d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80138d6:	f242 020b 	movw	r2, #8203	@ 0x200b
 80138da:	4294      	cmp	r4, r2
 80138dc:	bf18      	it	ne
 80138de:	4623      	movne	r3, r4
 80138e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80138e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138e4:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80138e6:	682a      	ldr	r2, [r5, #0]
 80138e8:	428b      	cmp	r3, r1
 80138ea:	db40      	blt.n	801396e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80138ec:	6813      	ldr	r3, [r2, #0]
 80138ee:	4610      	mov	r0, r2
 80138f0:	695b      	ldr	r3, [r3, #20]
 80138f2:	4798      	blx	r3
 80138f4:	4604      	mov	r4, r0
 80138f6:	6828      	ldr	r0, [r5, #0]
 80138f8:	aa1d      	add	r2, sp, #116	@ 0x74
 80138fa:	4621      	mov	r1, r4
 80138fc:	6803      	ldr	r3, [r0, #0]
 80138fe:	689f      	ldr	r7, [r3, #8]
 8013900:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8013904:	47b8      	blx	r7
 8013906:	901c      	str	r0, [sp, #112]	@ 0x70
 8013908:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801390c:	429c      	cmp	r4, r3
 801390e:	f000 80eb 	beq.w	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013912:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013916:	429c      	cmp	r4, r3
 8013918:	f000 80e6 	beq.w	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801391c:	2c00      	cmp	r4, #0
 801391e:	f000 810d 	beq.w	8013b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013922:	2c0a      	cmp	r4, #10
 8013924:	d05e      	beq.n	80139e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013926:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013928:	b36a      	cbz	r2, 8013986 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801392a:	8894      	ldrh	r4, [r2, #4]
 801392c:	f1bb 0f00 	cmp.w	fp, #0
 8013930:	d03a      	beq.n	80139a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8013932:	f892 900d 	ldrb.w	r9, [r2, #13]
 8013936:	f1bb 0f01 	cmp.w	fp, #1
 801393a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801393e:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8013942:	f892 900a 	ldrb.w	r9, [r2, #10]
 8013946:	ea49 0903 	orr.w	r9, r9, r3
 801394a:	d133      	bne.n	80139b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 801394c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801394e:	eba6 0609 	sub.w	r6, r6, r9
 8013952:	2b00      	cmp	r3, #0
 8013954:	d14d      	bne.n	80139f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8013956:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013958:	eb09 0306 	add.w	r3, r9, r6
 801395c:	4413      	add	r3, r2
 801395e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013960:	f9b2 2000 	ldrsh.w	r2, [r2]
 8013964:	4293      	cmp	r3, r2
 8013966:	da4e      	bge.n	8013a06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8013968:	e036      	b.n	80139d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801396a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801396c:	e79c      	b.n	80138a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801396e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8013972:	4659      	mov	r1, fp
 8013974:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013976:	9301      	str	r3, [sp, #4]
 8013978:	ab1d      	add	r3, sp, #116	@ 0x74
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	ab1c      	add	r3, sp, #112	@ 0x70
 801397e:	f003 fc12 	bl	80171a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8013982:	4604      	mov	r4, r0
 8013984:	e7c0      	b.n	8013908 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8013986:	6828      	ldr	r0, [r5, #0]
 8013988:	6803      	ldr	r3, [r0, #0]
 801398a:	691b      	ldr	r3, [r3, #16]
 801398c:	4798      	blx	r3
 801398e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013992:	4298      	cmp	r0, r3
 8013994:	f000 80a8 	beq.w	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013998:	f242 030b 	movw	r3, #8203	@ 0x200b
 801399c:	4298      	cmp	r0, r3
 801399e:	f000 80a3 	beq.w	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80139a2:	f1bb 0f00 	cmp.w	fp, #0
 80139a6:	d100      	bne.n	80139aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80139a8:	444e      	add	r6, r9
 80139aa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80139ac:	2a00      	cmp	r2, #0
 80139ae:	d1c0      	bne.n	8013932 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80139b0:	4691      	mov	r9, r2
 80139b2:	e099      	b.n	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80139b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	f000 80c2 	beq.w	8013b40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 80139bc:	f1bb 0f00 	cmp.w	fp, #0
 80139c0:	d117      	bne.n	80139f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 80139c2:	6828      	ldr	r0, [r5, #0]
 80139c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80139c6:	6803      	ldr	r3, [r0, #0]
 80139c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139ca:	4798      	blx	r3
 80139cc:	4406      	add	r6, r0
 80139ce:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80139d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80139d2:	1af3      	subs	r3, r6, r3
 80139d4:	4293      	cmp	r3, r2
 80139d6:	dd16      	ble.n	8013a06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 80139d8:	2c00      	cmp	r4, #0
 80139da:	f000 80af 	beq.w	8013b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80139de:	2c0a      	cmp	r4, #10
 80139e0:	f040 809d 	bne.w	8013b1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 80139e4:	240a      	movs	r4, #10
 80139e6:	fab4 f084 	clz	r0, r4
 80139ea:	0940      	lsrs	r0, r0, #5
 80139ec:	b01f      	add	sp, #124	@ 0x7c
 80139ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139f2:	6828      	ldr	r0, [r5, #0]
 80139f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80139f6:	6803      	ldr	r3, [r0, #0]
 80139f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139fa:	4798      	blx	r3
 80139fc:	f1bb 0f01 	cmp.w	fp, #1
 8013a00:	eba6 0600 	sub.w	r6, r6, r0
 8013a04:	d0a7      	beq.n	8013956 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8013a06:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013a08:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013a0a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8013a0e:	f9b3 8000 	ldrsh.w	r8, [r3]
 8013a12:	7b43      	ldrb	r3, [r0, #13]
 8013a14:	4431      	add	r1, r6
 8013a16:	015b      	lsls	r3, r3, #5
 8013a18:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8013a1c:	7983      	ldrb	r3, [r0, #6]
 8013a1e:	4313      	orrs	r3, r2
 8013a20:	440b      	add	r3, r1
 8013a22:	4543      	cmp	r3, r8
 8013a24:	db60      	blt.n	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a28:	4299      	cmp	r1, r3
 8013a2a:	da5d      	bge.n	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a2c:	6828      	ldr	r0, [r5, #0]
 8013a2e:	45b0      	cmp	r8, r6
 8013a30:	6803      	ldr	r3, [r0, #0]
 8013a32:	bfcc      	ite	gt
 8013a34:	eba8 0806 	subgt.w	r8, r8, r6
 8013a38:	f04f 0800 	movle.w	r8, #0
 8013a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a3e:	bfc8      	it	gt
 8013a40:	fa1f f888 	uxthgt.w	r8, r8
 8013a44:	4798      	blx	r3
 8013a46:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013a48:	7b53      	ldrb	r3, [r2, #13]
 8013a4a:	00d9      	lsls	r1, r3, #3
 8013a4c:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8013a50:	7a11      	ldrb	r1, [r2, #8]
 8013a52:	4339      	orrs	r1, r7
 8013a54:	065f      	lsls	r7, r3, #25
 8013a56:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8013a58:	bf48      	it	mi
 8013a5a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8013a5e:	4407      	add	r7, r0
 8013a60:	bf48      	it	mi
 8013a62:	b209      	sxthmi	r1, r1
 8013a64:	1a7f      	subs	r7, r7, r1
 8013a66:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8013a68:	b2bf      	uxth	r7, r7
 8013a6a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013a6e:	fa0f fa87 	sxth.w	sl, r7
 8013a72:	4551      	cmp	r1, sl
 8013a74:	dd3c      	ble.n	8013af0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8013a76:	011b      	lsls	r3, r3, #4
 8013a78:	79d0      	ldrb	r0, [r2, #7]
 8013a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a7e:	4303      	orrs	r3, r0
 8013a80:	449a      	add	sl, r3
 8013a82:	4551      	cmp	r1, sl
 8013a84:	dc30      	bgt.n	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013a86:	1bcf      	subs	r7, r1, r7
 8013a88:	468a      	mov	sl, r1
 8013a8a:	b23f      	sxth	r7, r7
 8013a8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013a90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013a92:	6828      	ldr	r0, [r5, #0]
 8013a94:	2a00      	cmp	r2, #0
 8013a96:	d12d      	bne.n	8013af4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8013a98:	9318      	str	r3, [sp, #96]	@ 0x60
 8013a9a:	b2bf      	uxth	r7, r7
 8013a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a9e:	6819      	ldr	r1, [r3, #0]
 8013aa0:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8013aa2:	6801      	ldr	r1, [r0, #0]
 8013aa4:	9314      	str	r3, [sp, #80]	@ 0x50
 8013aa6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013aa8:	4788      	blx	r1
 8013aaa:	79a9      	ldrb	r1, [r5, #6]
 8013aac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8013aae:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013ab0:	7ba9      	ldrb	r1, [r5, #14]
 8013ab2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013ab4:	910a      	str	r1, [sp, #40]	@ 0x28
 8013ab6:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8013aba:	9109      	str	r1, [sp, #36]	@ 0x24
 8013abc:	68a9      	ldr	r1, [r5, #8]
 8013abe:	9306      	str	r3, [sp, #24]
 8013ac0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8013ac2:	9205      	str	r2, [sp, #20]
 8013ac4:	9304      	str	r3, [sp, #16]
 8013ac6:	f8cd a004 	str.w	sl, [sp, #4]
 8013aca:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8013ace:	44b0      	add	r8, r6
 8013ad0:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8013ad2:	fa0f f388 	sxth.w	r3, r8
 8013ad6:	9300      	str	r3, [sp, #0]
 8013ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ada:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8013ade:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013ae0:	681a      	ldr	r2, [r3, #0]
 8013ae2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	47b8      	blx	r7
 8013ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013aea:	3301      	adds	r3, #1
 8013aec:	930d      	str	r3, [sp, #52]	@ 0x34
 8013aee:	e6e3      	b.n	80138b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8013af0:	2700      	movs	r7, #0
 8013af2:	e7cb      	b.n	8013a8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8013af4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013af6:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8013afa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013afc:	f8dc 1000 	ldr.w	r1, [ip]
 8013b00:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8013b04:	79aa      	ldrb	r2, [r5, #6]
 8013b06:	9203      	str	r2, [sp, #12]
 8013b08:	7baa      	ldrb	r2, [r5, #14]
 8013b0a:	9202      	str	r2, [sp, #8]
 8013b0c:	68aa      	ldr	r2, [r5, #8]
 8013b0e:	e9cd 0200 	strd	r0, r2, [sp]
 8013b12:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8013b14:	4660      	mov	r0, ip
 8013b16:	688f      	ldr	r7, [r1, #8]
 8013b18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b1a:	47b8      	blx	r7
 8013b1c:	e7e4      	b.n	8013ae8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8013b1e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013b20:	3501      	adds	r5, #1
 8013b22:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8013b24:	429d      	cmp	r5, r3
 8013b26:	f6bf af5e 	bge.w	80139e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013b2a:	4659      	mov	r1, fp
 8013b2c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8013b2e:	f7f1 f8d5 	bl	8004cdc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013b32:	4604      	mov	r4, r0
 8013b34:	b110      	cbz	r0, 8013b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8013b36:	280a      	cmp	r0, #10
 8013b38:	d1f2      	bne.n	8013b20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8013b3a:	e753      	b.n	80139e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8013b3c:	2400      	movs	r4, #0
 8013b3e:	e752      	b.n	80139e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8013b40:	f1bb 0f00 	cmp.w	fp, #0
 8013b44:	f43f af43 	beq.w	80139ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8013b48:	e75d      	b.n	8013a06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08013b4a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8013b4a:	b530      	push	{r4, r5, lr}
 8013b4c:	8ac4      	ldrh	r4, [r0, #22]
 8013b4e:	8b45      	ldrh	r5, [r0, #26]
 8013b50:	8343      	strh	r3, [r0, #26]
 8013b52:	442c      	add	r4, r5
 8013b54:	1ae4      	subs	r4, r4, r3
 8013b56:	8b83      	ldrh	r3, [r0, #28]
 8013b58:	82c4      	strh	r4, [r0, #22]
 8013b5a:	8b04      	ldrh	r4, [r0, #24]
 8013b5c:	4422      	add	r2, r4
 8013b5e:	440c      	add	r4, r1
 8013b60:	1a59      	subs	r1, r3, r1
 8013b62:	83c2      	strh	r2, [r0, #30]
 8013b64:	8304      	strh	r4, [r0, #24]
 8013b66:	8381      	strh	r1, [r0, #28]
 8013b68:	bd30      	pop	{r4, r5, pc}

08013b6a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8013b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6e:	4604      	mov	r4, r0
 8013b70:	8a47      	ldrh	r7, [r0, #18]
 8013b72:	68c0      	ldr	r0, [r0, #12]
 8013b74:	b085      	sub	sp, #20
 8013b76:	6803      	ldr	r3, [r0, #0]
 8013b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b7a:	4798      	blx	r3
 8013b7c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8013b80:	7a63      	ldrb	r3, [r4, #9]
 8013b82:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8013b86:	3b01      	subs	r3, #1
 8013b88:	42b7      	cmp	r7, r6
 8013b8a:	bfac      	ite	ge
 8013b8c:	f04f 0900 	movge.w	r9, #0
 8013b90:	f04f 0901 	movlt.w	r9, #1
 8013b94:	2b05      	cmp	r3, #5
 8013b96:	d804      	bhi.n	8013ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8013b98:	e8df f003 	tbb	[pc, r3]
 8013b9c:	470f0854 	.word	0x470f0854
 8013ba0:	4c4c      	.short	0x4c4c
 8013ba2:	2500      	movs	r5, #0
 8013ba4:	46a9      	mov	r9, r5
 8013ba6:	462e      	mov	r6, r5
 8013ba8:	462f      	mov	r7, r5
 8013baa:	e00e      	b.n	8013bca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013bac:	42b7      	cmp	r7, r6
 8013bae:	f04f 0500 	mov.w	r5, #0
 8013bb2:	bfb4      	ite	lt
 8013bb4:	2600      	movlt	r6, #0
 8013bb6:	2601      	movge	r6, #1
 8013bb8:	e7f6      	b.n	8013ba8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013bba:	42b7      	cmp	r7, r6
 8013bbc:	464d      	mov	r5, r9
 8013bbe:	f04f 0900 	mov.w	r9, #0
 8013bc2:	bfb4      	ite	lt
 8013bc4:	2600      	movlt	r6, #0
 8013bc6:	2601      	movge	r6, #1
 8013bc8:	464f      	mov	r7, r9
 8013bca:	f04f 0800 	mov.w	r8, #0
 8013bce:	f8a4 8016 	strh.w	r8, [r4, #22]
 8013bd2:	f8a4 8018 	strh.w	r8, [r4, #24]
 8013bd6:	f8cd 8004 	str.w	r8, [sp, #4]
 8013bda:	2300      	movs	r3, #0
 8013bdc:	9303      	str	r3, [sp, #12]
 8013bde:	8823      	ldrh	r3, [r4, #0]
 8013be0:	2b20      	cmp	r3, #32
 8013be2:	d033      	beq.n	8013c4c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8013be4:	f242 010b 	movw	r1, #8203	@ 0x200b
 8013be8:	1a5a      	subs	r2, r3, r1
 8013bea:	f1d2 0a00 	rsbs	sl, r2, #0
 8013bee:	eb4a 0a02 	adc.w	sl, sl, r2
 8013bf2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d008      	beq.n	8013c0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013bfa:	428b      	cmp	r3, r1
 8013bfc:	9a01      	ldr	r2, [sp, #4]
 8013bfe:	bf0e      	itee	eq
 8013c00:	f04f 0a01 	moveq.w	sl, #1
 8013c04:	461a      	movne	r2, r3
 8013c06:	f04f 0a00 	movne.w	sl, #0
 8013c0a:	9201      	str	r2, [sp, #4]
 8013c0c:	ab03      	add	r3, sp, #12
 8013c0e:	68e2      	ldr	r2, [r4, #12]
 8013c10:	7a21      	ldrb	r1, [r4, #8]
 8013c12:	6860      	ldr	r0, [r4, #4]
 8013c14:	f003 fa7e 	bl	8017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c18:	8020      	strh	r0, [r4, #0]
 8013c1a:	b9d8      	cbnz	r0, 8013c54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8013c1c:	8ba2      	ldrh	r2, [r4, #28]
 8013c1e:	2300      	movs	r3, #0
 8013c20:	4611      	mov	r1, r2
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff ff91 	bl	8013b4a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013c28:	e06e      	b.n	8013d08 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013c2a:	2500      	movs	r5, #0
 8013c2c:	2701      	movs	r7, #1
 8013c2e:	46a9      	mov	r9, r5
 8013c30:	462e      	mov	r6, r5
 8013c32:	e7ca      	b.n	8013bca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013c34:	42b7      	cmp	r7, r6
 8013c36:	f04f 0500 	mov.w	r5, #0
 8013c3a:	bfb4      	ite	lt
 8013c3c:	2700      	movlt	r7, #0
 8013c3e:	2701      	movge	r7, #1
 8013c40:	462e      	mov	r6, r5
 8013c42:	e7c2      	b.n	8013bca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8013c44:	2500      	movs	r5, #0
 8013c46:	2601      	movs	r6, #1
 8013c48:	46a9      	mov	r9, r5
 8013c4a:	e7ad      	b.n	8013ba8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8013c4c:	9301      	str	r3, [sp, #4]
 8013c4e:	f04f 0a01 	mov.w	sl, #1
 8013c52:	e7db      	b.n	8013c0c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8013c54:	8b63      	ldrh	r3, [r4, #26]
 8013c56:	280a      	cmp	r0, #10
 8013c58:	f103 0301 	add.w	r3, r3, #1
 8013c5c:	8363      	strh	r3, [r4, #26]
 8013c5e:	d0dd      	beq.n	8013c1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8013c60:	9a03      	ldr	r2, [sp, #12]
 8013c62:	bb62      	cbnz	r2, 8013cbe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8013c64:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8013c68:	4298      	cmp	r0, r3
 8013c6a:	d003      	beq.n	8013c74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013c6c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8013c70:	4298      	cmp	r0, r3
 8013c72:	d1b2      	bne.n	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013c74:	8823      	ldrh	r3, [r4, #0]
 8013c76:	8ba1      	ldrh	r1, [r4, #28]
 8013c78:	2b20      	cmp	r3, #32
 8013c7a:	d003      	beq.n	8013c84 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8013c7c:	f242 000b 	movw	r0, #8203	@ 0x200b
 8013c80:	4283      	cmp	r3, r0
 8013c82:	d131      	bne.n	8013ce8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8013c84:	f1ba 0f00 	cmp.w	sl, #0
 8013c88:	bf0a      	itet	eq
 8013c8a:	4688      	moveq	r8, r1
 8013c8c:	4650      	movne	r0, sl
 8013c8e:	2001      	moveq	r0, #1
 8013c90:	440a      	add	r2, r1
 8013c92:	8b23      	ldrh	r3, [r4, #24]
 8013c94:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8013c98:	b292      	uxth	r2, r2
 8013c9a:	83a2      	strh	r2, [r4, #28]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	f1b9 0f00 	cmp.w	r9, #0
 8013ca2:	d102      	bne.n	8013caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8013ca4:	2d00      	cmp	r5, #0
 8013ca6:	d042      	beq.n	8013d2e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8013ca8:	b300      	cbz	r0, 8013cec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8013caa:	8c21      	ldrh	r1, [r4, #32]
 8013cac:	4419      	add	r1, r3
 8013cae:	458c      	cmp	ip, r1
 8013cb0:	da37      	bge.n	8013d22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013cb2:	8ae1      	ldrh	r1, [r4, #22]
 8013cb4:	2900      	cmp	r1, #0
 8013cb6:	d034      	beq.n	8013d22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8013cb8:	4563      	cmp	r3, ip
 8013cba:	dd8e      	ble.n	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013cbc:	e01d      	b.n	8013cfa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8013cbe:	8893      	ldrh	r3, [r2, #4]
 8013cc0:	9901      	ldr	r1, [sp, #4]
 8013cc2:	8023      	strh	r3, [r4, #0]
 8013cc4:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8013cc8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8013ccc:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8013cd0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8013cd4:	ea4b 0b00 	orr.w	fp, fp, r0
 8013cd8:	68e0      	ldr	r0, [r4, #12]
 8013cda:	6803      	ldr	r3, [r0, #0]
 8013cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013cde:	4798      	blx	r3
 8013ce0:	eb0b 0200 	add.w	r2, fp, r0
 8013ce4:	b292      	uxth	r2, r2
 8013ce6:	e7c5      	b.n	8013c74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8013ce8:	2000      	movs	r0, #0
 8013cea:	e7d1      	b.n	8013c90 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8013cec:	4563      	cmp	r3, ip
 8013cee:	f77f af74 	ble.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013cf2:	8ae3      	ldrh	r3, [r4, #22]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f43f af70 	beq.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	8c22      	ldrh	r2, [r4, #32]
 8013cfe:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8013d02:	8be3      	ldrh	r3, [r4, #30]
 8013d04:	4413      	add	r3, r2
 8013d06:	83e3      	strh	r3, [r4, #30]
 8013d08:	68e0      	ldr	r0, [r4, #12]
 8013d0a:	6803      	ldr	r3, [r0, #0]
 8013d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d0e:	4798      	blx	r3
 8013d10:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8013d14:	4418      	add	r0, r3
 8013d16:	8a63      	ldrh	r3, [r4, #18]
 8013d18:	1a18      	subs	r0, r3, r0
 8013d1a:	8260      	strh	r0, [r4, #18]
 8013d1c:	b005      	add	sp, #20
 8013d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d22:	2300      	movs	r3, #0
 8013d24:	4611      	mov	r1, r2
 8013d26:	4620      	mov	r0, r4
 8013d28:	f7ff ff0f 	bl	8013b4a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8013d2c:	e755      	b.n	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d2e:	4563      	cmp	r3, ip
 8013d30:	dd14      	ble.n	8013d5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8013d32:	b117      	cbz	r7, 8013d3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8013d34:	2301      	movs	r3, #1
 8013d36:	460a      	mov	r2, r1
 8013d38:	e772      	b.n	8013c20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	f43f af4d 	beq.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	f47f af4a 	bne.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d46:	f1ba 0f00 	cmp.w	sl, #0
 8013d4a:	d002      	beq.n	8013d52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	4642      	mov	r2, r8
 8013d50:	e767      	b.n	8013c22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8013d52:	8ae3      	ldrh	r3, [r4, #22]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f43f af40 	beq.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d5a:	e7d5      	b.n	8013d08 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f47f af3c 	bne.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d62:	f1ba 0f00 	cmp.w	sl, #0
 8013d66:	f43f af38 	beq.w	8013bda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	4642      	mov	r2, r8
 8013d6e:	e7da      	b.n	8013d26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08013d70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	b0e3      	sub	sp, #396	@ 0x18c
 8013d76:	461c      	mov	r4, r3
 8013d78:	4683      	mov	fp, r0
 8013d7a:	4688      	mov	r8, r1
 8013d7c:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	f000 8112 	beq.w	8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	f000 810e 	beq.w	8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013d8c:	7ba3      	ldrb	r3, [r4, #14]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f000 810a 	beq.w	8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013d94:	ad0a      	add	r5, sp, #40	@ 0x28
 8013d96:	6810      	ldr	r0, [r2, #0]
 8013d98:	6851      	ldr	r1, [r2, #4]
 8013d9a:	462b      	mov	r3, r5
 8013d9c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8013da0:	c303      	stmia	r3!, {r0, r1}
 8013da2:	2100      	movs	r1, #0
 8013da4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013da8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013dac:	4628      	mov	r0, r5
 8013dae:	910c      	str	r1, [sp, #48]	@ 0x30
 8013db0:	a90c      	add	r1, sp, #48	@ 0x30
 8013db2:	79a2      	ldrb	r2, [r4, #6]
 8013db4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013db8:	f7ff fd1d 	bl	80137f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013dbc:	a90c      	add	r1, sp, #48	@ 0x30
 8013dbe:	79a2      	ldrb	r2, [r4, #6]
 8013dc0:	4608      	mov	r0, r1
 8013dc2:	f7ff fd18 	bl	80137f6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8013dc6:	a817      	add	r0, sp, #92	@ 0x5c
 8013dc8:	f002 fe2e 	bl	8016a28 <_ZN8touchgfx12TextProviderC1Ev>
 8013dcc:	6820      	ldr	r0, [r4, #0]
 8013dce:	6803      	ldr	r3, [r0, #0]
 8013dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013dd2:	4798      	blx	r3
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	6820      	ldr	r0, [r4, #0]
 8013dd8:	6803      	ldr	r3, [r0, #0]
 8013dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ddc:	4798      	blx	r3
 8013dde:	4633      	mov	r3, r6
 8013de0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013de2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013de4:	9000      	str	r0, [sp, #0]
 8013de6:	a817      	add	r0, sp, #92	@ 0x5c
 8013de8:	f002 fe71 	bl	8016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013dec:	6820      	ldr	r0, [r4, #0]
 8013dee:	f894 a004 	ldrb.w	sl, [r4, #4]
 8013df2:	6803      	ldr	r3, [r0, #0]
 8013df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013df6:	4798      	blx	r3
 8013df8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8013dfc:	6823      	ldr	r3, [r4, #0]
 8013dfe:	4607      	mov	r7, r0
 8013e00:	4406      	add	r6, r0
 8013e02:	a830      	add	r0, sp, #192	@ 0xc0
 8013e04:	f893 9009 	ldrb.w	r9, [r3, #9]
 8013e08:	f002 fe0e 	bl	8016a28 <_ZN8touchgfx12TextProviderC1Ev>
 8013e0c:	7c23      	ldrb	r3, [r4, #16]
 8013e0e:	b17b      	cbz	r3, 8013e30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8013e10:	6820      	ldr	r0, [r4, #0]
 8013e12:	6803      	ldr	r3, [r0, #0]
 8013e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013e16:	4798      	blx	r3
 8013e18:	9009      	str	r0, [sp, #36]	@ 0x24
 8013e1a:	6820      	ldr	r0, [r4, #0]
 8013e1c:	6802      	ldr	r2, [r0, #0]
 8013e1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013e20:	4790      	blx	r2
 8013e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e24:	9000      	str	r0, [sp, #0]
 8013e26:	a830      	add	r0, sp, #192	@ 0xc0
 8013e28:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8013e2a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8013e2c:	f002 fe4f 	bl	8016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013e30:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8013e34:	a80e      	add	r0, sp, #56	@ 0x38
 8013e36:	7be2      	ldrb	r2, [r4, #15]
 8013e38:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8013e3c:	1a8a      	subs	r2, r1, r2
 8013e3e:	7c21      	ldrb	r1, [r4, #16]
 8013e40:	9103      	str	r1, [sp, #12]
 8013e42:	b292      	uxth	r2, r2
 8013e44:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8013e48:	9102      	str	r1, [sp, #8]
 8013e4a:	6821      	ldr	r1, [r4, #0]
 8013e4c:	9101      	str	r1, [sp, #4]
 8013e4e:	7961      	ldrb	r1, [r4, #5]
 8013e50:	9100      	str	r1, [sp, #0]
 8013e52:	a930      	add	r1, sp, #192	@ 0xc0
 8013e54:	f7ff fc50 	bl	80136f8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8013e58:	2e00      	cmp	r6, #0
 8013e5a:	dc5b      	bgt.n	8013f14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8013e5c:	af17      	add	r7, sp, #92	@ 0x5c
 8013e5e:	f04f 0900 	mov.w	r9, #0
 8013e62:	7c23      	ldrb	r3, [r4, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f000 80b1 	beq.w	8013fcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8013e6a:	a80e      	add	r0, sp, #56	@ 0x38
 8013e6c:	f7ff fe7d 	bl	8013b6a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013e70:	f1ba 0f00 	cmp.w	sl, #0
 8013e74:	f000 80a5 	beq.w	8013fc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8013e78:	7c23      	ldrb	r3, [r4, #16]
 8013e7a:	2264      	movs	r2, #100	@ 0x64
 8013e7c:	4639      	mov	r1, r7
 8013e7e:	a849      	add	r0, sp, #292	@ 0x124
 8013e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e82:	f00f fbc2 	bl	802360a <memcpy>
 8013e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	f000 80a7 	beq.w	8013fdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8013e8e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8013e92:	7922      	ldrb	r2, [r4, #4]
 8013e94:	2a01      	cmp	r2, #1
 8013e96:	f040 808a 	bne.w	8013fae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8013e9a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8013e9e:	1ac0      	subs	r0, r0, r3
 8013ea0:	2302      	movs	r3, #2
 8013ea2:	fb90 f0f3 	sdiv	r0, r0, r3
 8013ea6:	b200      	sxth	r0, r0
 8013ea8:	7c23      	ldrb	r3, [r4, #16]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 808b 	beq.w	8013fc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8013eb0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8013eb4:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8013eb8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013ebc:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8013ec0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	4410      	add	r0, r2
 8013ec8:	4642      	mov	r2, r8
 8013eca:	b200      	sxth	r0, r0
 8013ecc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8013ed0:	9000      	str	r0, [sp, #0]
 8013ed2:	4658      	mov	r0, fp
 8013ed4:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8013ed8:	f7ff fcbe 	bl	8013858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8013edc:	2800      	cmp	r0, #0
 8013ede:	d163      	bne.n	8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013ee0:	b2b2      	uxth	r2, r6
 8013ee2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013ee6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013eea:	4413      	add	r3, r2
 8013eec:	1a8a      	subs	r2, r1, r2
 8013eee:	b21b      	sxth	r3, r3
 8013ef0:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8013ef4:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8013ef8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013efc:	2a00      	cmp	r2, #0
 8013efe:	d153      	bne.n	8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f00:	6822      	ldr	r2, [r4, #0]
 8013f02:	8869      	ldrh	r1, [r5, #2]
 8013f04:	7a12      	ldrb	r2, [r2, #8]
 8013f06:	1a9b      	subs	r3, r3, r2
 8013f08:	88ea      	ldrh	r2, [r5, #6]
 8013f0a:	440a      	add	r2, r1
 8013f0c:	b212      	sxth	r2, r2
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	dda7      	ble.n	8013e62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8013f12:	e049      	b.n	8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f14:	7c23      	ldrb	r3, [r4, #16]
 8013f16:	444f      	add	r7, r9
 8013f18:	b1c3      	cbz	r3, 8013f4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8013f1a:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8013f1e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013f22:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013f26:	443b      	add	r3, r7
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	da97      	bge.n	8013e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013f2c:	a80e      	add	r0, sp, #56	@ 0x38
 8013f2e:	f7ff fe1c 	bl	8013b6a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013f32:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 8013f36:	3b01      	subs	r3, #1
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	454b      	cmp	r3, r9
 8013f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f3e:	d021      	beq.n	8013f84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8013f40:	7961      	ldrb	r1, [r4, #5]
 8013f42:	a817      	add	r0, sp, #92	@ 0x5c
 8013f44:	f7f0 feca 	bl	8004cdc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f4a:	e7f4      	b.n	8013f36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8013f4c:	fa1f f986 	uxth.w	r9, r6
 8013f50:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8013f54:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8013f58:	443b      	add	r3, r7
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	f6bf af7e 	bge.w	8013e5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8013f60:	a817      	add	r0, sp, #92	@ 0x5c
 8013f62:	f003 f9a3 	bl	80172ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013f66:	b1f8      	cbz	r0, 8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013f68:	280a      	cmp	r0, #10
 8013f6a:	d1f1      	bne.n	8013f50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8013f6c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8013f70:	444b      	add	r3, r9
 8013f72:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8013f76:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8013f7a:	eba3 0309 	sub.w	r3, r3, r9
 8013f7e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013f82:	e7e5      	b.n	8013f50 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8013f84:	b2b3      	uxth	r3, r6
 8013f86:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8013f8a:	441a      	add	r2, r3
 8013f8c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8013f90:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8013f94:	1ad3      	subs	r3, r2, r3
 8013f96:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8013f9a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8013f9e:	b11b      	cbz	r3, 8013fa8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8013fa0:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d0ba      	beq.n	8013f1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8013fa8:	b063      	add	sp, #396	@ 0x18c
 8013faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fae:	2a02      	cmp	r2, #2
 8013fb0:	d105      	bne.n	8013fbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8013fb2:	7be2      	ldrb	r2, [r4, #15]
 8013fb4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013fb8:	1a80      	subs	r0, r0, r2
 8013fba:	1ac0      	subs	r0, r0, r3
 8013fbc:	e773      	b.n	8013ea6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	e772      	b.n	8013ea8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8013fc2:	7be0      	ldrb	r0, [r4, #15]
 8013fc4:	e770      	b.n	8013ea8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8013fc6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013fca:	e773      	b.n	8013eb4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8013fcc:	f1ba 0f00 	cmp.w	sl, #0
 8013fd0:	d0f7      	beq.n	8013fc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8013fd2:	2264      	movs	r2, #100	@ 0x64
 8013fd4:	4639      	mov	r1, r7
 8013fd6:	a849      	add	r0, sp, #292	@ 0x124
 8013fd8:	f00f fb17 	bl	802360a <memcpy>
 8013fdc:	2300      	movs	r3, #0
 8013fde:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013fe2:	6821      	ldr	r1, [r4, #0]
 8013fe4:	a849      	add	r0, sp, #292	@ 0x124
 8013fe6:	f7ff fbca 	bl	801377e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013fea:	b203      	sxth	r3, r0
 8013fec:	e751      	b.n	8013e92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08013fee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8013fee:	2b03      	cmp	r3, #3
 8013ff0:	d818      	bhi.n	8014024 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8013ff2:	e8df f003 	tbb	[pc, r3]
 8013ff6:	0602      	.short	0x0602
 8013ff8:	130d      	.short	0x130d
 8013ffa:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013ffe:	1850      	adds	r0, r2, r1
 8014000:	4770      	bx	lr
 8014002:	8803      	ldrh	r3, [r0, #0]
 8014004:	8880      	ldrh	r0, [r0, #4]
 8014006:	4418      	add	r0, r3
 8014008:	b200      	sxth	r0, r0
 801400a:	1a80      	subs	r0, r0, r2
 801400c:	3801      	subs	r0, #1
 801400e:	4770      	bx	lr
 8014010:	8803      	ldrh	r3, [r0, #0]
 8014012:	8880      	ldrh	r0, [r0, #4]
 8014014:	4418      	add	r0, r3
 8014016:	b200      	sxth	r0, r0
 8014018:	1a40      	subs	r0, r0, r1
 801401a:	e7f7      	b.n	801400c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801401c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8014020:	4410      	add	r0, r2
 8014022:	4770      	bx	lr
 8014024:	2000      	movs	r0, #0
 8014026:	4770      	bx	lr

08014028 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8014028:	2b03      	cmp	r3, #3
 801402a:	d817      	bhi.n	801405c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801402c:	e8df f003 	tbb	[pc, r3]
 8014030:	10090602 	.word	0x10090602
 8014034:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014038:	1850      	adds	r0, r2, r1
 801403a:	4770      	bx	lr
 801403c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014040:	e7fa      	b.n	8014038 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8014042:	8843      	ldrh	r3, [r0, #2]
 8014044:	88c0      	ldrh	r0, [r0, #6]
 8014046:	4418      	add	r0, r3
 8014048:	b200      	sxth	r0, r0
 801404a:	1a80      	subs	r0, r0, r2
 801404c:	3801      	subs	r0, #1
 801404e:	4770      	bx	lr
 8014050:	8843      	ldrh	r3, [r0, #2]
 8014052:	88c0      	ldrh	r0, [r0, #6]
 8014054:	4418      	add	r0, r3
 8014056:	b200      	sxth	r0, r0
 8014058:	1a40      	subs	r0, r0, r1
 801405a:	e7f7      	b.n	801404c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801405c:	2000      	movs	r0, #0
 801405e:	4770      	bx	lr

08014060 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8014060:	4b01      	ldr	r3, [pc, #4]	@ (8014068 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8014062:	2200      	movs	r2, #0
 8014064:	601a      	str	r2, [r3, #0]
 8014066:	4770      	bx	lr
 8014068:	24025388 	.word	0x24025388

0801406c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801406c:	4603      	mov	r3, r0
 801406e:	b1c8      	cbz	r0, 80140a4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8014070:	0c02      	lsrs	r2, r0, #16
 8014072:	0412      	lsls	r2, r2, #16
 8014074:	b9a2      	cbnz	r2, 80140a0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8014076:	0403      	lsls	r3, r0, #16
 8014078:	2010      	movs	r0, #16
 801407a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801407e:	bf04      	itt	eq
 8014080:	021b      	lsleq	r3, r3, #8
 8014082:	3008      	addeq	r0, #8
 8014084:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8014088:	bf04      	itt	eq
 801408a:	011b      	lsleq	r3, r3, #4
 801408c:	3004      	addeq	r0, #4
 801408e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8014092:	bf04      	itt	eq
 8014094:	009b      	lsleq	r3, r3, #2
 8014096:	3002      	addeq	r0, #2
 8014098:	2b00      	cmp	r3, #0
 801409a:	db04      	blt.n	80140a6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801409c:	3001      	adds	r0, #1
 801409e:	4770      	bx	lr
 80140a0:	2000      	movs	r0, #0
 80140a2:	e7ea      	b.n	801407a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80140a4:	2020      	movs	r0, #32
 80140a6:	4770      	bx	lr

080140a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80140a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140ac:	b087      	sub	sp, #28
 80140ae:	460d      	mov	r5, r1
 80140b0:	4616      	mov	r6, r2
 80140b2:	4698      	mov	r8, r3
 80140b4:	4601      	mov	r1, r0
 80140b6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 80140ba:	b120      	cbz	r0, 80140c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80140bc:	b11a      	cbz	r2, 80140c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80140be:	2d1f      	cmp	r5, #31
 80140c0:	d801      	bhi.n	80140c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80140c2:	2b1f      	cmp	r3, #31
 80140c4:	d904      	bls.n	80140d0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80140c6:	2000      	movs	r0, #0
 80140c8:	6038      	str	r0, [r7, #0]
 80140ca:	b007      	add	sp, #28
 80140cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d0:	b97d      	cbnz	r5, 80140f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80140d2:	b143      	cbz	r3, 80140e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80140d4:	4602      	mov	r2, r0
 80140d6:	462b      	mov	r3, r5
 80140d8:	4641      	mov	r1, r8
 80140da:	4630      	mov	r0, r6
 80140dc:	e9cd 4700 	strd	r4, r7, [sp]
 80140e0:	f7ff ffe2 	bl	80140a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80140e4:	e7f1      	b.n	80140ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80140e6:	f04f 33ff 	mov.w	r3, #4294967295
 80140ea:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80140ee:	603b      	str	r3, [r7, #0]
 80140f0:	e7eb      	b.n	80140ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80140f2:	fa32 fa05 	lsrs.w	sl, r2, r5
 80140f6:	d106      	bne.n	8014106 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80140f8:	4346      	muls	r6, r0
 80140fa:	fbb6 f0f4 	udiv	r0, r6, r4
 80140fe:	fb04 6610 	mls	r6, r4, r0, r6
 8014102:	603e      	str	r6, [r7, #0]
 8014104:	e7e1      	b.n	80140ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8014106:	2201      	movs	r2, #1
 8014108:	fa00 fb05 	lsl.w	fp, r0, r5
 801410c:	40aa      	lsls	r2, r5
 801410e:	fbbb f9f4 	udiv	r9, fp, r4
 8014112:	3a01      	subs	r2, #1
 8014114:	fb0a f309 	mul.w	r3, sl, r9
 8014118:	fb04 b919 	mls	r9, r4, r9, fp
 801411c:	4016      	ands	r6, r2
 801411e:	9303      	str	r3, [sp, #12]
 8014120:	4630      	mov	r0, r6
 8014122:	f7ff ffa3 	bl	801406c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014126:	462b      	mov	r3, r5
 8014128:	460a      	mov	r2, r1
 801412a:	4601      	mov	r1, r0
 801412c:	4630      	mov	r0, r6
 801412e:	e9cd 4700 	strd	r4, r7, [sp]
 8014132:	f7ff ffb9 	bl	80140a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014136:	4606      	mov	r6, r0
 8014138:	4648      	mov	r0, r9
 801413a:	eb05 0108 	add.w	r1, r5, r8
 801413e:	f7ff ff95 	bl	801406c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014142:	ab05      	add	r3, sp, #20
 8014144:	464a      	mov	r2, r9
 8014146:	e9cd 4300 	strd	r4, r3, [sp]
 801414a:	4603      	mov	r3, r0
 801414c:	4650      	mov	r0, sl
 801414e:	f7ff ffab 	bl	80140a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014152:	6839      	ldr	r1, [r7, #0]
 8014154:	9a05      	ldr	r2, [sp, #20]
 8014156:	9b03      	ldr	r3, [sp, #12]
 8014158:	4411      	add	r1, r2
 801415a:	fbb1 f2f4 	udiv	r2, r1, r4
 801415e:	18d3      	adds	r3, r2, r3
 8014160:	fb04 1412 	mls	r4, r4, r2, r1
 8014164:	441e      	add	r6, r3
 8014166:	603c      	str	r4, [r7, #0]
 8014168:	4430      	add	r0, r6
 801416a:	e7ae      	b.n	80140ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801416c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801416c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014170:	b085      	sub	sp, #20
 8014172:	f1b0 0900 	subs.w	r9, r0, #0
 8014176:	461d      	mov	r5, r3
 8014178:	4617      	mov	r7, r2
 801417a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801417c:	bfbb      	ittet	lt
 801417e:	f1c9 0900 	rsblt	r9, r9, #0
 8014182:	f04f 36ff 	movlt.w	r6, #4294967295
 8014186:	2601      	movge	r6, #1
 8014188:	6823      	ldrlt	r3, [r4, #0]
 801418a:	bfbc      	itt	lt
 801418c:	425b      	neglt	r3, r3
 801418e:	6023      	strlt	r3, [r4, #0]
 8014190:	2a00      	cmp	r2, #0
 8014192:	da04      	bge.n	801419e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014194:	6823      	ldr	r3, [r4, #0]
 8014196:	4257      	negs	r7, r2
 8014198:	4276      	negs	r6, r6
 801419a:	425b      	negs	r3, r3
 801419c:	6023      	str	r3, [r4, #0]
 801419e:	2d00      	cmp	r5, #0
 80141a0:	4638      	mov	r0, r7
 80141a2:	bfba      	itte	lt
 80141a4:	426d      	neglt	r5, r5
 80141a6:	f04f 38ff 	movlt.w	r8, #4294967295
 80141aa:	f04f 0801 	movge.w	r8, #1
 80141ae:	f7ff ff5d 	bl	801406c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80141b2:	ab03      	add	r3, sp, #12
 80141b4:	463a      	mov	r2, r7
 80141b6:	e9cd 5300 	strd	r5, r3, [sp]
 80141ba:	4603      	mov	r3, r0
 80141bc:	4648      	mov	r0, r9
 80141be:	f7ff ff73 	bl	80140a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80141c2:	6823      	ldr	r3, [r4, #0]
 80141c4:	9a03      	ldr	r2, [sp, #12]
 80141c6:	4546      	cmp	r6, r8
 80141c8:	441a      	add	r2, r3
 80141ca:	fb92 f3f5 	sdiv	r3, r2, r5
 80141ce:	4418      	add	r0, r3
 80141d0:	fb05 2313 	mls	r3, r5, r3, r2
 80141d4:	bf18      	it	ne
 80141d6:	4240      	negne	r0, r0
 80141d8:	1c72      	adds	r2, r6, #1
 80141da:	6023      	str	r3, [r4, #0]
 80141dc:	d105      	bne.n	80141ea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80141de:	2b00      	cmp	r3, #0
 80141e0:	f1c3 0200 	rsb	r2, r3, #0
 80141e4:	db0b      	blt.n	80141fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80141e6:	6022      	str	r2, [r4, #0]
 80141e8:	e006      	b.n	80141f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80141ea:	2e01      	cmp	r6, #1
 80141ec:	d104      	bne.n	80141f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	da02      	bge.n	80141f8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80141f2:	442b      	add	r3, r5
 80141f4:	3801      	subs	r0, #1
 80141f6:	6023      	str	r3, [r4, #0]
 80141f8:	b005      	add	sp, #20
 80141fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141fe:	3801      	subs	r0, #1
 8014200:	1b52      	subs	r2, r2, r5
 8014202:	e7f0      	b.n	80141e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08014204 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014204:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014208:	4c1c      	ldr	r4, [pc, #112]	@ (801427c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801420a:	4605      	mov	r5, r0
 801420c:	6807      	ldr	r7, [r0, #0]
 801420e:	69a3      	ldr	r3, [r4, #24]
 8014210:	b92b      	cbnz	r3, 801421e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014212:	6840      	ldr	r0, [r0, #4]
 8014214:	e9c5 7000 	strd	r7, r0, [r5]
 8014218:	b004      	add	sp, #16
 801421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421e:	f04f 0802 	mov.w	r8, #2
 8014222:	68a2      	ldr	r2, [r4, #8]
 8014224:	ae04      	add	r6, sp, #16
 8014226:	6820      	ldr	r0, [r4, #0]
 8014228:	fb93 f1f8 	sdiv	r1, r3, r8
 801422c:	440a      	add	r2, r1
 801422e:	69e1      	ldr	r1, [r4, #28]
 8014230:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014234:	463a      	mov	r2, r7
 8014236:	9600      	str	r6, [sp, #0]
 8014238:	f7ff ff98 	bl	801416c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801423c:	69a3      	ldr	r3, [r4, #24]
 801423e:	4607      	mov	r7, r0
 8014240:	686a      	ldr	r2, [r5, #4]
 8014242:	6a21      	ldr	r1, [r4, #32]
 8014244:	9600      	str	r6, [sp, #0]
 8014246:	6860      	ldr	r0, [r4, #4]
 8014248:	f7ff ff90 	bl	801416c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801424c:	69a3      	ldr	r3, [r4, #24]
 801424e:	6962      	ldr	r2, [r4, #20]
 8014250:	4407      	add	r7, r0
 8014252:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014254:	9600      	str	r6, [sp, #0]
 8014256:	68e0      	ldr	r0, [r4, #12]
 8014258:	fb93 f8f8 	sdiv	r8, r3, r8
 801425c:	4442      	add	r2, r8
 801425e:	9203      	str	r2, [sp, #12]
 8014260:	682a      	ldr	r2, [r5, #0]
 8014262:	f7ff ff83 	bl	801416c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014266:	4680      	mov	r8, r0
 8014268:	9600      	str	r6, [sp, #0]
 801426a:	69a3      	ldr	r3, [r4, #24]
 801426c:	686a      	ldr	r2, [r5, #4]
 801426e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014270:	6920      	ldr	r0, [r4, #16]
 8014272:	f7ff ff7b 	bl	801416c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014276:	4440      	add	r0, r8
 8014278:	e7cc      	b.n	8014214 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801427a:	bf00      	nop
 801427c:	2402538c 	.word	0x2402538c

08014280 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014280:	4b07      	ldr	r3, [pc, #28]	@ (80142a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	2b01      	cmp	r3, #1
 8014286:	d109      	bne.n	801429c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014288:	f9b1 3000 	ldrsh.w	r3, [r1]
 801428c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014290:	8003      	strh	r3, [r0, #0]
 8014292:	4b04      	ldr	r3, [pc, #16]	@ (80142a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014294:	881b      	ldrh	r3, [r3, #0]
 8014296:	3b01      	subs	r3, #1
 8014298:	1a9b      	subs	r3, r3, r2
 801429a:	800b      	strh	r3, [r1, #0]
 801429c:	4770      	bx	lr
 801429e:	bf00      	nop
 80142a0:	24025370 	.word	0x24025370
 80142a4:	2402536c 	.word	0x2402536c

080142a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80142a8:	4b07      	ldr	r3, [pc, #28]	@ (80142c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80142aa:	b510      	push	{r4, lr}
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d108      	bne.n	80142c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80142b2:	4b06      	ldr	r3, [pc, #24]	@ (80142cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80142b4:	880c      	ldrh	r4, [r1, #0]
 80142b6:	881b      	ldrh	r3, [r3, #0]
 80142b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80142bc:	3b01      	subs	r3, #1
 80142be:	1b1b      	subs	r3, r3, r4
 80142c0:	8003      	strh	r3, [r0, #0]
 80142c2:	800a      	strh	r2, [r1, #0]
 80142c4:	bd10      	pop	{r4, pc}
 80142c6:	bf00      	nop
 80142c8:	24025370 	.word	0x24025370
 80142cc:	2402536c 	.word	0x2402536c

080142d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80142d0:	4b0a      	ldr	r3, [pc, #40]	@ (80142fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80142d2:	b510      	push	{r4, lr}
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	d10e      	bne.n	80142f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80142da:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80142de:	8843      	ldrh	r3, [r0, #2]
 80142e0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80142e4:	18ca      	adds	r2, r1, r3
 80142e6:	4b06      	ldr	r3, [pc, #24]	@ (8014300 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80142e8:	8044      	strh	r4, [r0, #2]
 80142ea:	881b      	ldrh	r3, [r3, #0]
 80142ec:	1a9b      	subs	r3, r3, r2
 80142ee:	8003      	strh	r3, [r0, #0]
 80142f0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80142f4:	8081      	strh	r1, [r0, #4]
 80142f6:	80c3      	strh	r3, [r0, #6]
 80142f8:	bd10      	pop	{r4, pc}
 80142fa:	bf00      	nop
 80142fc:	24025370 	.word	0x24025370
 8014300:	2402536c 	.word	0x2402536c

08014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014304:	4b08      	ldr	r3, [pc, #32]	@ (8014328 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8014306:	781b      	ldrb	r3, [r3, #0]
 8014308:	2b01      	cmp	r3, #1
 801430a:	d10c      	bne.n	8014326 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801430c:	8803      	ldrh	r3, [r0, #0]
 801430e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014312:	8842      	ldrh	r2, [r0, #2]
 8014314:	8002      	strh	r2, [r0, #0]
 8014316:	185a      	adds	r2, r3, r1
 8014318:	4b04      	ldr	r3, [pc, #16]	@ (801432c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801431a:	881b      	ldrh	r3, [r3, #0]
 801431c:	1a9b      	subs	r3, r3, r2
 801431e:	8043      	strh	r3, [r0, #2]
 8014320:	88c3      	ldrh	r3, [r0, #6]
 8014322:	80c1      	strh	r1, [r0, #6]
 8014324:	8083      	strh	r3, [r0, #4]
 8014326:	4770      	bx	lr
 8014328:	24025370 	.word	0x24025370
 801432c:	2402536c 	.word	0x2402536c

08014330 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014330:	4b07      	ldr	r3, [pc, #28]	@ (8014350 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014332:	b510      	push	{r4, lr}
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	2b01      	cmp	r3, #1
 8014338:	d108      	bne.n	801434c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801433a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801433e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014342:	8003      	strh	r3, [r0, #0]
 8014344:	8893      	ldrh	r3, [r2, #4]
 8014346:	3b01      	subs	r3, #1
 8014348:	1b1b      	subs	r3, r3, r4
 801434a:	800b      	strh	r3, [r1, #0]
 801434c:	bd10      	pop	{r4, pc}
 801434e:	bf00      	nop
 8014350:	24025370 	.word	0x24025370

08014354 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8014354:	4b0b      	ldr	r3, [pc, #44]	@ (8014384 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	2b01      	cmp	r3, #1
 801435a:	d111      	bne.n	8014380 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801435c:	680b      	ldr	r3, [r1, #0]
 801435e:	ed90 7a00 	vldr	s14, [r0]
 8014362:	6003      	str	r3, [r0, #0]
 8014364:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8014368:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8014388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801436c:	ee07 3a90 	vmov	s15, r3
 8014370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014374:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801437c:	edc1 7a00 	vstr	s15, [r1]
 8014380:	4770      	bx	lr
 8014382:	bf00      	nop
 8014384:	24025370 	.word	0x24025370
 8014388:	38d1b717 	.word	0x38d1b717

0801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801438c:	4b0a      	ldr	r3, [pc, #40]	@ (80143b8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801438e:	460a      	mov	r2, r1
 8014390:	b510      	push	{r4, lr}
 8014392:	781b      	ldrb	r3, [r3, #0]
 8014394:	2b01      	cmp	r3, #1
 8014396:	d10d      	bne.n	80143b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014398:	8881      	ldrh	r1, [r0, #4]
 801439a:	8803      	ldrh	r3, [r0, #0]
 801439c:	440b      	add	r3, r1
 801439e:	4601      	mov	r1, r0
 80143a0:	3b01      	subs	r3, #1
 80143a2:	f821 3b02 	strh.w	r3, [r1], #2
 80143a6:	f7ff ffc3 	bl	8014330 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80143aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80143ae:	88c2      	ldrh	r2, [r0, #6]
 80143b0:	80c3      	strh	r3, [r0, #6]
 80143b2:	8082      	strh	r2, [r0, #4]
 80143b4:	bd10      	pop	{r4, pc}
 80143b6:	bf00      	nop
 80143b8:	24025370 	.word	0x24025370

080143bc <_ZN8touchgfx11Application13requestRedrawEv>:
 80143bc:	4b06      	ldr	r3, [pc, #24]	@ (80143d8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80143be:	2100      	movs	r1, #0
 80143c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80143c4:	4b05      	ldr	r3, [pc, #20]	@ (80143dc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80143c6:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80143ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80143ce:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80143d2:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80143d6:	4770      	bx	lr
 80143d8:	2402536c 	.word	0x2402536c
 80143dc:	2402536e 	.word	0x2402536e

080143e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80143e0:	4b03      	ldr	r3, [pc, #12]	@ (80143f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80143e2:	6818      	ldr	r0, [r3, #0]
 80143e4:	b110      	cbz	r0, 80143ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80143e6:	6803      	ldr	r3, [r0, #0]
 80143e8:	699b      	ldr	r3, [r3, #24]
 80143ea:	4718      	bx	r3
 80143ec:	4770      	bx	lr
 80143ee:	bf00      	nop
 80143f0:	240253bc 	.word	0x240253bc

080143f4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80143f4:	4770      	bx	lr
	...

080143f8 <_ZN8touchgfx11Application4drawEv>:
 80143f8:	4b09      	ldr	r3, [pc, #36]	@ (8014420 <_ZN8touchgfx11Application4drawEv+0x28>)
 80143fa:	b507      	push	{r0, r1, r2, lr}
 80143fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014400:	2100      	movs	r1, #0
 8014402:	4b08      	ldr	r3, [pc, #32]	@ (8014424 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014404:	9100      	str	r1, [sp, #0]
 8014406:	4669      	mov	r1, sp
 8014408:	f9b3 3000 	ldrsh.w	r3, [r3]
 801440c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014410:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014414:	6803      	ldr	r3, [r0, #0]
 8014416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014418:	4798      	blx	r3
 801441a:	b003      	add	sp, #12
 801441c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014420:	2402536c 	.word	0x2402536c
 8014424:	2402536e 	.word	0x2402536e

08014428 <_ZN8touchgfx11Application10invalidateEv>:
 8014428:	4b09      	ldr	r3, [pc, #36]	@ (8014450 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801442a:	b082      	sub	sp, #8
 801442c:	2100      	movs	r1, #0
 801442e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014432:	4b08      	ldr	r3, [pc, #32]	@ (8014454 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8014434:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014438:	aa02      	add	r2, sp, #8
 801443a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801443e:	9100      	str	r1, [sp, #0]
 8014440:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014444:	6803      	ldr	r3, [r0, #0]
 8014446:	e912 0006 	ldmdb	r2, {r1, r2}
 801444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801444c:	b002      	add	sp, #8
 801444e:	4718      	bx	r3
 8014450:	2402536c 	.word	0x2402536c
 8014454:	2402536e 	.word	0x2402536e

08014458 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014458:	4b03      	ldr	r3, [pc, #12]	@ (8014468 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801445a:	6818      	ldr	r0, [r3, #0]
 801445c:	b110      	cbz	r0, 8014464 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801445e:	6803      	ldr	r3, [r0, #0]
 8014460:	69db      	ldr	r3, [r3, #28]
 8014462:	4718      	bx	r3
 8014464:	4770      	bx	lr
 8014466:	bf00      	nop
 8014468:	240253bc 	.word	0x240253bc

0801446c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801446c:	4b03      	ldr	r3, [pc, #12]	@ (801447c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801446e:	6818      	ldr	r0, [r3, #0]
 8014470:	b110      	cbz	r0, 8014478 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8014472:	6803      	ldr	r3, [r0, #0]
 8014474:	6a1b      	ldr	r3, [r3, #32]
 8014476:	4718      	bx	r3
 8014478:	4770      	bx	lr
 801447a:	bf00      	nop
 801447c:	240253bc 	.word	0x240253bc

08014480 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014480:	2300      	movs	r3, #0
 8014482:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8014486:	4770      	bx	lr

08014488 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014488:	4b03      	ldr	r3, [pc, #12]	@ (8014498 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801448a:	6818      	ldr	r0, [r3, #0]
 801448c:	b110      	cbz	r0, 8014494 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801448e:	6803      	ldr	r3, [r0, #0]
 8014490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014492:	4718      	bx	r3
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	240253bc 	.word	0x240253bc

0801449c <_ZN8touchgfx11ApplicationD1Ev>:
 801449c:	4770      	bx	lr

0801449e <_ZN8touchgfx11ApplicationD0Ev>:
 801449e:	b510      	push	{r4, lr}
 80144a0:	4604      	mov	r4, r0
 80144a2:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80144a6:	f00e f9bd 	bl	8022824 <_ZdlPvj>
 80144aa:	4620      	mov	r0, r4
 80144ac:	bd10      	pop	{r4, pc}

080144ae <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80144ae:	b510      	push	{r4, lr}
 80144b0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80144b4:	888a      	ldrh	r2, [r1, #4]
 80144b6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80144ba:	4422      	add	r2, r4
 80144bc:	b212      	sxth	r2, r2
 80144be:	4293      	cmp	r3, r2
 80144c0:	da15      	bge.n	80144ee <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80144c2:	8882      	ldrh	r2, [r0, #4]
 80144c4:	4413      	add	r3, r2
 80144c6:	b21b      	sxth	r3, r3
 80144c8:	429c      	cmp	r4, r3
 80144ca:	da10      	bge.n	80144ee <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80144cc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80144d0:	88c9      	ldrh	r1, [r1, #6]
 80144d2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80144d6:	4419      	add	r1, r3
 80144d8:	b209      	sxth	r1, r1
 80144da:	428a      	cmp	r2, r1
 80144dc:	da07      	bge.n	80144ee <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80144de:	88c0      	ldrh	r0, [r0, #6]
 80144e0:	4410      	add	r0, r2
 80144e2:	b200      	sxth	r0, r0
 80144e4:	4283      	cmp	r3, r0
 80144e6:	bfac      	ite	ge
 80144e8:	2000      	movge	r0, #0
 80144ea:	2001      	movlt	r0, #1
 80144ec:	bd10      	pop	{r4, pc}
 80144ee:	2000      	movs	r0, #0
 80144f0:	e7fc      	b.n	80144ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080144f2 <_ZN8touchgfx4Rect10restrictToEss>:
 80144f2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	b510      	push	{r4, lr}
 80144fa:	da04      	bge.n	8014506 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80144fc:	8884      	ldrh	r4, [r0, #4]
 80144fe:	4423      	add	r3, r4
 8014500:	8083      	strh	r3, [r0, #4]
 8014502:	2300      	movs	r3, #0
 8014504:	8003      	strh	r3, [r0, #0]
 8014506:	f9b0 4000 	ldrsh.w	r4, [r0]
 801450a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801450e:	1b09      	subs	r1, r1, r4
 8014510:	428b      	cmp	r3, r1
 8014512:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014516:	bfc8      	it	gt
 8014518:	8081      	strhgt	r1, [r0, #4]
 801451a:	2b00      	cmp	r3, #0
 801451c:	da04      	bge.n	8014528 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801451e:	88c1      	ldrh	r1, [r0, #6]
 8014520:	440b      	add	r3, r1
 8014522:	80c3      	strh	r3, [r0, #6]
 8014524:	2300      	movs	r3, #0
 8014526:	8043      	strh	r3, [r0, #2]
 8014528:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801452c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014530:	1a52      	subs	r2, r2, r1
 8014532:	4293      	cmp	r3, r2
 8014534:	bfc8      	it	gt
 8014536:	80c2      	strhgt	r2, [r0, #6]
 8014538:	bd10      	pop	{r4, pc}
	...

0801453c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801453c:	4b10      	ldr	r3, [pc, #64]	@ (8014580 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801453e:	b510      	push	{r4, lr}
 8014540:	460c      	mov	r4, r1
 8014542:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014546:	4b0f      	ldr	r3, [pc, #60]	@ (8014584 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014548:	4620      	mov	r0, r4
 801454a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801454e:	f7ff ffd0 	bl	80144f2 <_ZN8touchgfx4Rect10restrictToEss>
 8014552:	4b0d      	ldr	r3, [pc, #52]	@ (8014588 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014554:	6818      	ldr	r0, [r3, #0]
 8014556:	b190      	cbz	r0, 801457e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014558:	6803      	ldr	r3, [r0, #0]
 801455a:	4621      	mov	r1, r4
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	4798      	blx	r3
 8014560:	4b0a      	ldr	r3, [pc, #40]	@ (801458c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8014562:	6818      	ldr	r0, [r3, #0]
 8014564:	b118      	cbz	r0, 801456e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8014566:	6803      	ldr	r3, [r0, #0]
 8014568:	4621      	mov	r1, r4
 801456a:	689b      	ldr	r3, [r3, #8]
 801456c:	4798      	blx	r3
 801456e:	4b08      	ldr	r3, [pc, #32]	@ (8014590 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014570:	4621      	mov	r1, r4
 8014572:	6818      	ldr	r0, [r3, #0]
 8014574:	6803      	ldr	r3, [r0, #0]
 8014576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801457a:	69db      	ldr	r3, [r3, #28]
 801457c:	4718      	bx	r3
 801457e:	bd10      	pop	{r4, pc}
 8014580:	2402536e 	.word	0x2402536e
 8014584:	2402536c 	.word	0x2402536c
 8014588:	240253bc 	.word	0x240253bc
 801458c:	240253b8 	.word	0x240253b8
 8014590:	24025378 	.word	0x24025378

08014594 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8014594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014596:	4606      	mov	r6, r0
 8014598:	4608      	mov	r0, r1
 801459a:	460f      	mov	r7, r1
 801459c:	f7fa fc37 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80145a0:	b9e8      	cbnz	r0, 80145de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80145a2:	f9b7 5000 	ldrsh.w	r5, [r7]
 80145a6:	f9b6 4000 	ldrsh.w	r4, [r6]
 80145aa:	42a5      	cmp	r5, r4
 80145ac:	db17      	blt.n	80145de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80145ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80145b2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80145b6:	429a      	cmp	r2, r3
 80145b8:	db11      	blt.n	80145de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80145ba:	88b9      	ldrh	r1, [r7, #4]
 80145bc:	440d      	add	r5, r1
 80145be:	88b1      	ldrh	r1, [r6, #4]
 80145c0:	440c      	add	r4, r1
 80145c2:	b22d      	sxth	r5, r5
 80145c4:	b224      	sxth	r4, r4
 80145c6:	42a5      	cmp	r5, r4
 80145c8:	dc09      	bgt.n	80145de <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80145ca:	88f8      	ldrh	r0, [r7, #6]
 80145cc:	4410      	add	r0, r2
 80145ce:	88f2      	ldrh	r2, [r6, #6]
 80145d0:	4413      	add	r3, r2
 80145d2:	b200      	sxth	r0, r0
 80145d4:	b21b      	sxth	r3, r3
 80145d6:	4298      	cmp	r0, r3
 80145d8:	bfcc      	ite	gt
 80145da:	2000      	movgt	r0, #0
 80145dc:	2001      	movle	r0, #1
 80145de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080145e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80145e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145e2:	4604      	mov	r4, r0
 80145e4:	4608      	mov	r0, r1
 80145e6:	460d      	mov	r5, r1
 80145e8:	f7fa fc11 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80145ec:	b978      	cbnz	r0, 801460e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80145ee:	4620      	mov	r0, r4
 80145f0:	f7fa fc0d 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80145f4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80145f8:	b150      	cbz	r0, 8014610 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80145fa:	8026      	strh	r6, [r4, #0]
 80145fc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014600:	8063      	strh	r3, [r4, #2]
 8014602:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014606:	80a3      	strh	r3, [r4, #4]
 8014608:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801460c:	80e3      	strh	r3, [r4, #6]
 801460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014610:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014614:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014618:	42b1      	cmp	r1, r6
 801461a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801461e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8014622:	460f      	mov	r7, r1
 8014624:	88ed      	ldrh	r5, [r5, #6]
 8014626:	bfa8      	it	ge
 8014628:	4637      	movge	r7, r6
 801462a:	4293      	cmp	r3, r2
 801462c:	4618      	mov	r0, r3
 801462e:	4466      	add	r6, ip
 8014630:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014634:	bfa8      	it	ge
 8014636:	4610      	movge	r0, r2
 8014638:	442a      	add	r2, r5
 801463a:	88e5      	ldrh	r5, [r4, #6]
 801463c:	4461      	add	r1, ip
 801463e:	b236      	sxth	r6, r6
 8014640:	8027      	strh	r7, [r4, #0]
 8014642:	442b      	add	r3, r5
 8014644:	b209      	sxth	r1, r1
 8014646:	b212      	sxth	r2, r2
 8014648:	8060      	strh	r0, [r4, #2]
 801464a:	b21b      	sxth	r3, r3
 801464c:	428e      	cmp	r6, r1
 801464e:	bfac      	ite	ge
 8014650:	ebc7 0106 	rsbge	r1, r7, r6
 8014654:	ebc7 0101 	rsblt	r1, r7, r1
 8014658:	429a      	cmp	r2, r3
 801465a:	bfac      	ite	ge
 801465c:	ebc0 0202 	rsbge	r2, r0, r2
 8014660:	ebc0 0203 	rsblt	r2, r0, r3
 8014664:	80a1      	strh	r1, [r4, #4]
 8014666:	80e2      	strh	r2, [r4, #6]
 8014668:	e7d1      	b.n	801460e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801466c <_ZN8touchgfx11Application11getInstanceEv>:
 801466c:	4b01      	ldr	r3, [pc, #4]	@ (8014674 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801466e:	6818      	ldr	r0, [r3, #0]
 8014670:	4770      	bx	lr
 8014672:	bf00      	nop
 8014674:	240253cc 	.word	0x240253cc

08014678 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8014678:	2300      	movs	r3, #0
 801467a:	b510      	push	{r4, lr}
 801467c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8014680:	4604      	mov	r4, r0
 8014682:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014686:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801468a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801468e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8014692:	429a      	cmp	r2, r3
 8014694:	d90e      	bls.n	80146b4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8014696:	18e2      	adds	r2, r4, r3
 8014698:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801469c:	b122      	cbz	r2, 80146a8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801469e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80146a2:	6803      	ldr	r3, [r0, #0]
 80146a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146a6:	4798      	blx	r3
 80146a8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80146ac:	3301      	adds	r3, #1
 80146ae:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80146b2:	e7ea      	b.n	801468a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80146b4:	bd10      	pop	{r4, pc}

080146b6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80146b6:	2300      	movs	r3, #0
 80146b8:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 80146bc:	30a4      	adds	r0, #164	@ 0xa4
 80146be:	f820 3c24 	strh.w	r3, [r0, #-36]
 80146c2:	f802 3b01 	strb.w	r3, [r2], #1
 80146c6:	4282      	cmp	r2, r0
 80146c8:	d1fb      	bne.n	80146c2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80146ca:	4770      	bx	lr

080146cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80146cc:	b570      	push	{r4, r5, r6, lr}
 80146ce:	4c0b      	ldr	r4, [pc, #44]	@ (80146fc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80146d0:	4605      	mov	r5, r0
 80146d2:	460e      	mov	r6, r1
 80146d4:	6820      	ldr	r0, [r4, #0]
 80146d6:	b110      	cbz	r0, 80146de <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80146d8:	6803      	ldr	r3, [r0, #0]
 80146da:	695b      	ldr	r3, [r3, #20]
 80146dc:	4798      	blx	r3
 80146de:	1d28      	adds	r0, r5, #4
 80146e0:	f7ff ffe9 	bl	80146b6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80146e4:	6026      	str	r6, [r4, #0]
 80146e6:	6833      	ldr	r3, [r6, #0]
 80146e8:	4630      	mov	r0, r6
 80146ea:	68db      	ldr	r3, [r3, #12]
 80146ec:	4798      	blx	r3
 80146ee:	682b      	ldr	r3, [r5, #0]
 80146f0:	4628      	mov	r0, r5
 80146f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146f8:	4718      	bx	r3
 80146fa:	bf00      	nop
 80146fc:	240253bc 	.word	0x240253bc

08014700 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8014700:	2300      	movs	r3, #0
 8014702:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8014706:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801470a:	461a      	mov	r2, r3
 801470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801470e:	461c      	mov	r4, r3
 8014710:	461d      	mov	r5, r3
 8014712:	459c      	cmp	ip, r3
 8014714:	dd1a      	ble.n	801474c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8014716:	18c6      	adds	r6, r0, r3
 8014718:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801471c:	b16e      	cbz	r6, 801473a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801471e:	429a      	cmp	r2, r3
 8014720:	d008      	beq.n	8014734 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8014722:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8014726:	fa1f fe82 	uxth.w	lr, r2
 801472a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801472e:	1887      	adds	r7, r0, r2
 8014730:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8014734:	3201      	adds	r2, #1
 8014736:	3301      	adds	r3, #1
 8014738:	e7eb      	b.n	8014712 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801473a:	4299      	cmp	r1, r3
 801473c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8014740:	bfa8      	it	ge
 8014742:	3501      	addge	r5, #1
 8014744:	429e      	cmp	r6, r3
 8014746:	bfc8      	it	gt
 8014748:	3401      	addgt	r4, #1
 801474a:	e7f4      	b.n	8014736 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801474c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8014750:	1b49      	subs	r1, r1, r5
 8014752:	1b1b      	subs	r3, r3, r4
 8014754:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8014758:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801475c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8014760:	4293      	cmp	r3, r2
 8014762:	dd03      	ble.n	801476c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8014764:	3b01      	subs	r3, #1
 8014766:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801476a:	e7f7      	b.n	801475c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08014770 <_ZN8touchgfx11Application15handleTickEventEv>:
 8014770:	b570      	push	{r4, r5, r6, lr}
 8014772:	4d16      	ldr	r5, [pc, #88]	@ (80147cc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8014774:	4604      	mov	r4, r0
 8014776:	6828      	ldr	r0, [r5, #0]
 8014778:	b140      	cbz	r0, 801478c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801477a:	7a03      	ldrb	r3, [r0, #8]
 801477c:	b933      	cbnz	r3, 801478c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801477e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8014782:	6803      	ldr	r3, [r0, #0]
 8014784:	689b      	ldr	r3, [r3, #8]
 8014786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801478a:	4718      	bx	r3
 801478c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8014790:	4e0f      	ldr	r6, [pc, #60]	@ (80147d0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8014792:	b973      	cbnz	r3, 80147b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014794:	b168      	cbz	r0, 80147b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014796:	7a03      	ldrb	r3, [r0, #8]
 8014798:	b15b      	cbz	r3, 80147b2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801479a:	6830      	ldr	r0, [r6, #0]
 801479c:	b110      	cbz	r0, 80147a4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801479e:	6803      	ldr	r3, [r0, #0]
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	4798      	blx	r3
 80147a4:	6828      	ldr	r0, [r5, #0]
 80147a6:	6803      	ldr	r3, [r0, #0]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	4798      	blx	r3
 80147ac:	2301      	movs	r3, #1
 80147ae:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80147b2:	3404      	adds	r4, #4
 80147b4:	4620      	mov	r0, r4
 80147b6:	f7ff ff5f 	bl	8014678 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80147ba:	4620      	mov	r0, r4
 80147bc:	f7ff ffa0 	bl	8014700 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80147c0:	6830      	ldr	r0, [r6, #0]
 80147c2:	b110      	cbz	r0, 80147ca <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80147c4:	6803      	ldr	r3, [r0, #0]
 80147c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147c8:	e7dd      	b.n	8014786 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80147ca:	bd70      	pop	{r4, r5, r6, pc}
 80147cc:	240253c0 	.word	0x240253c0
 80147d0:	240253bc 	.word	0x240253bc

080147d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80147d4:	4603      	mov	r3, r0
 80147d6:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80147da:	2200      	movs	r2, #0
 80147dc:	801a      	strh	r2, [r3, #0]
 80147de:	3308      	adds	r3, #8
 80147e0:	f823 2c06 	strh.w	r2, [r3, #-6]
 80147e4:	f823 2c04 	strh.w	r2, [r3, #-4]
 80147e8:	f823 2c02 	strh.w	r2, [r3, #-2]
 80147ec:	428b      	cmp	r3, r1
 80147ee:	d1f5      	bne.n	80147dc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80147f0:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80147f4:	4770      	bx	lr
	...

080147f8 <_ZN8touchgfx11ApplicationC1Ev>:
 80147f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147fa:	4b1d      	ldr	r3, [pc, #116]	@ (8014870 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80147fc:	4606      	mov	r6, r0
 80147fe:	4604      	mov	r4, r0
 8014800:	2500      	movs	r5, #0
 8014802:	f846 3b04 	str.w	r3, [r6], #4
 8014806:	22a8      	movs	r2, #168	@ 0xa8
 8014808:	2100      	movs	r1, #0
 801480a:	4630      	mov	r0, r6
 801480c:	f00e fe1c 	bl	8023448 <memset>
 8014810:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8014814:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8014818:	4f16      	ldr	r7, [pc, #88]	@ (8014874 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801481a:	f7ff ffdb 	bl	80147d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801481e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8014822:	f7ff ffd7 	bl	80147d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8014826:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801482a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801482e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8014832:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8014836:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801483a:	490f      	ldr	r1, [pc, #60]	@ (8014878 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801483c:	480f      	ldr	r0, [pc, #60]	@ (801487c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801483e:	f00d f961 	bl	8021b04 <CRC_Lock>
 8014842:	4b0f      	ldr	r3, [pc, #60]	@ (8014880 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8014844:	b158      	cbz	r0, 801485e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8014846:	801d      	strh	r5, [r3, #0]
 8014848:	2300      	movs	r3, #0
 801484a:	4a0e      	ldr	r2, [pc, #56]	@ (8014884 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801484c:	4630      	mov	r0, r6
 801484e:	6013      	str	r3, [r2, #0]
 8014850:	4a0d      	ldr	r2, [pc, #52]	@ (8014888 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8014852:	603b      	str	r3, [r7, #0]
 8014854:	6013      	str	r3, [r2, #0]
 8014856:	f7ff ff2e 	bl	80146b6 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801485a:	4620      	mov	r0, r4
 801485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801485e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014862:	2002      	movs	r0, #2
 8014864:	801a      	strh	r2, [r3, #0]
 8014866:	6038      	str	r0, [r7, #0]
 8014868:	f001 ff64 	bl	8016734 <_ZN8touchgfx6Screen4drawEv>
 801486c:	e7ec      	b.n	8014848 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801486e:	bf00      	nop
 8014870:	08026eb4 	.word	0x08026eb4
 8014874:	240253bc 	.word	0x240253bc
 8014878:	b5e8b5cd 	.word	0xb5e8b5cd
 801487c:	f407a5c2 	.word	0xf407a5c2
 8014880:	2400007c 	.word	0x2400007c
 8014884:	240253cc 	.word	0x240253cc
 8014888:	240253c0 	.word	0x240253c0

0801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801488c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8014890:	3b01      	subs	r3, #1
 8014892:	b29b      	uxth	r3, r3
 8014894:	428b      	cmp	r3, r1
 8014896:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801489a:	b510      	push	{r4, lr}
 801489c:	d908      	bls.n	80148b0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801489e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80148a2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80148a6:	681a      	ldr	r2, [r3, #0]
 80148a8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80148ac:	685a      	ldr	r2, [r3, #4]
 80148ae:	6062      	str	r2, [r4, #4]
 80148b0:	bd10      	pop	{r4, pc}
	...

080148b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80148b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b8:	b08f      	sub	sp, #60	@ 0x3c
 80148ba:	4b92      	ldr	r3, [pc, #584]	@ (8014b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x250>)
 80148bc:	4683      	mov	fp, r0
 80148be:	ac0a      	add	r4, sp, #40	@ 0x28
 80148c0:	e884 0006 	stmia.w	r4, {r1, r2}
 80148c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80148c8:	4620      	mov	r0, r4
 80148ca:	4b8f      	ldr	r3, [pc, #572]	@ (8014b08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x254>)
 80148cc:	f9b3 1000 	ldrsh.w	r1, [r3]
 80148d0:	f7ff fe0f 	bl	80144f2 <_ZN8touchgfx4Rect10restrictToEss>
 80148d4:	4620      	mov	r0, r4
 80148d6:	f7fa fa9a 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80148da:	2800      	cmp	r0, #0
 80148dc:	d170      	bne.n	80149c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80148de:	4b8b      	ldr	r3, [pc, #556]	@ (8014b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80148e6:	2b02      	cmp	r3, #2
 80148e8:	d06a      	beq.n	80149c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 80148ea:	9403      	str	r4, [sp, #12]
 80148ec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80148f0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80148f4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80148f8:	9301      	str	r3, [sp, #4]
 80148fa:	35a4      	adds	r5, #164	@ 0xa4
 80148fc:	b15c      	cbz	r4, 8014916 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 80148fe:	4629      	mov	r1, r5
 8014900:	9803      	ldr	r0, [sp, #12]
 8014902:	f7ff fe47 	bl	8014594 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014906:	3c01      	subs	r4, #1
 8014908:	b118      	cbz	r0, 8014912 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801490a:	b2a1      	uxth	r1, r4
 801490c:	9801      	ldr	r0, [sp, #4]
 801490e:	f7ff ffbd 	bl	801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014912:	3d08      	subs	r5, #8
 8014914:	e7f2      	b.n	80148fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 8014916:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801491a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801491e:	f8cd a010 	str.w	sl, [sp, #16]
 8014922:	9302      	str	r3, [sp, #8]
 8014924:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014928:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801492c:	9306      	str	r3, [sp, #24]
 801492e:	445c      	add	r4, fp
 8014930:	2500      	movs	r5, #0
 8014932:	4626      	mov	r6, r4
 8014934:	f8cd a014 	str.w	sl, [sp, #20]
 8014938:	462f      	mov	r7, r5
 801493a:	9b05      	ldr	r3, [sp, #20]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d073      	beq.n	8014a28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x174>
 8014940:	9903      	ldr	r1, [sp, #12]
 8014942:	4630      	mov	r0, r6
 8014944:	f7ff fdb3 	bl	80144ae <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014948:	b350      	cbz	r0, 80149a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 801494a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801494e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8014952:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8014956:	45e6      	cmp	lr, ip
 8014958:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801495c:	db33      	blt.n	80149c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 801495e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014962:	88b3      	ldrh	r3, [r6, #4]
 8014964:	4472      	add	r2, lr
 8014966:	4463      	add	r3, ip
 8014968:	b212      	sxth	r2, r2
 801496a:	b21b      	sxth	r3, r3
 801496c:	429a      	cmp	r2, r3
 801496e:	dc2a      	bgt.n	80149c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x112>
 8014970:	fa1f f289 	uxth.w	r2, r9
 8014974:	88f3      	ldrh	r3, [r6, #6]
 8014976:	45c8      	cmp	r8, r9
 8014978:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801497c:	4413      	add	r3, r2
 801497e:	fa1f fc88 	uxth.w	ip, r8
 8014982:	b29b      	uxth	r3, r3
 8014984:	fa0f fe83 	sxth.w	lr, r3
 8014988:	db0f      	blt.n	80149aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf6>
 801498a:	eba3 030c 	sub.w	r3, r3, ip
 801498e:	1ac9      	subs	r1, r1, r3
 8014990:	b209      	sxth	r1, r1
 8014992:	2900      	cmp	r1, #0
 8014994:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014998:	dd12      	ble.n	80149c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 801499a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801499e:	4605      	mov	r5, r0
 80149a0:	9b05      	ldr	r3, [sp, #20]
 80149a2:	3e08      	subs	r6, #8
 80149a4:	3b01      	subs	r3, #1
 80149a6:	9305      	str	r3, [sp, #20]
 80149a8:	e7c7      	b.n	801493a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x86>
 80149aa:	4461      	add	r1, ip
 80149ac:	b209      	sxth	r1, r1
 80149ae:	4571      	cmp	r1, lr
 80149b0:	dc38      	bgt.n	8014a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80149b2:	eba2 020c 	sub.w	r2, r2, ip
 80149b6:	b212      	sxth	r2, r2
 80149b8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80149bc:	2a00      	cmp	r2, #0
 80149be:	dcee      	bgt.n	801499e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80149c0:	b00f      	add	sp, #60	@ 0x3c
 80149c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149c6:	45c8      	cmp	r8, r9
 80149c8:	db2c      	blt.n	8014a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80149ca:	88f3      	ldrh	r3, [r6, #6]
 80149cc:	4499      	add	r9, r3
 80149ce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80149d2:	4498      	add	r8, r3
 80149d4:	fa0f f989 	sxth.w	r9, r9
 80149d8:	fa0f f888 	sxth.w	r8, r8
 80149dc:	45c1      	cmp	r9, r8
 80149de:	db21      	blt.n	8014a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 80149e0:	fa1f f28c 	uxth.w	r2, ip
 80149e4:	88b3      	ldrh	r3, [r6, #4]
 80149e6:	45e6      	cmp	lr, ip
 80149e8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80149ec:	4413      	add	r3, r2
 80149ee:	fa1f f88e 	uxth.w	r8, lr
 80149f2:	b29b      	uxth	r3, r3
 80149f4:	fa0f f983 	sxth.w	r9, r3
 80149f8:	db0a      	blt.n	8014a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15c>
 80149fa:	eba3 0308 	sub.w	r3, r3, r8
 80149fe:	1ac9      	subs	r1, r1, r3
 8014a00:	b209      	sxth	r1, r1
 8014a02:	2900      	cmp	r1, #0
 8014a04:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8014a08:	ddda      	ble.n	80149c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014a0a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014a0e:	e7c6      	b.n	801499e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8014a10:	4441      	add	r1, r8
 8014a12:	b209      	sxth	r1, r1
 8014a14:	4549      	cmp	r1, r9
 8014a16:	dc05      	bgt.n	8014a24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x170>
 8014a18:	eba2 0208 	sub.w	r2, r2, r8
 8014a1c:	b212      	sxth	r2, r2
 8014a1e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8014a22:	e7cb      	b.n	80149bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x108>
 8014a24:	4607      	mov	r7, r0
 8014a26:	e7bb      	b.n	80149a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xec>
 8014a28:	2d00      	cmp	r5, #0
 8014a2a:	d181      	bne.n	8014930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7c>
 8014a2c:	2f00      	cmp	r7, #0
 8014a2e:	f000 81df 	beq.w	8014df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014a32:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8014a36:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8014a3a:	b2b3      	uxth	r3, r6
 8014a3c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8014a40:	9305      	str	r3, [sp, #20]
 8014a42:	9a05      	ldr	r2, [sp, #20]
 8014a44:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014a48:	4413      	add	r3, r2
 8014a4a:	b2ba      	uxth	r2, r7
 8014a4c:	4492      	add	sl, r2
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	fa1f fa8a 	uxth.w	sl, sl
 8014a54:	fa0f f883 	sxth.w	r8, r3
 8014a58:	fa0f f98a 	sxth.w	r9, sl
 8014a5c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8014a60:	9b04      	ldr	r3, [sp, #16]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d054      	beq.n	8014b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>
 8014a66:	9903      	ldr	r1, [sp, #12]
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f7ff fd20 	bl	80144ae <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014a6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014a72:	b1c0      	cbz	r0, 8014aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014a74:	f9b4 e000 	ldrsh.w	lr, [r4]
 8014a78:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014a7c:	4576      	cmp	r6, lr
 8014a7e:	dc22      	bgt.n	8014ac6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8014a80:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8014a84:	44f4      	add	ip, lr
 8014a86:	fa0f fc8c 	sxth.w	ip, ip
 8014a8a:	45e0      	cmp	r8, ip
 8014a8c:	db1b      	blt.n	8014ac6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x212>
 8014a8e:	428f      	cmp	r7, r1
 8014a90:	fa1f fc81 	uxth.w	ip, r1
 8014a94:	88e1      	ldrh	r1, [r4, #6]
 8014a96:	dc0d      	bgt.n	8014ab4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x200>
 8014a98:	ebaa 0c0c 	sub.w	ip, sl, ip
 8014a9c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8014aa0:	eba1 010c 	sub.w	r1, r1, ip
 8014aa4:	80e1      	strh	r1, [r4, #6]
 8014aa6:	4628      	mov	r0, r5
 8014aa8:	9904      	ldr	r1, [sp, #16]
 8014aaa:	3c08      	subs	r4, #8
 8014aac:	4605      	mov	r5, r0
 8014aae:	3901      	subs	r1, #1
 8014ab0:	9104      	str	r1, [sp, #16]
 8014ab2:	e7d3      	b.n	8014a5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a8>
 8014ab4:	4461      	add	r1, ip
 8014ab6:	b209      	sxth	r1, r1
 8014ab8:	4549      	cmp	r1, r9
 8014aba:	dcf5      	bgt.n	8014aa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014abc:	eba2 0c0c 	sub.w	ip, r2, ip
 8014ac0:	f8a4 c006 	strh.w	ip, [r4, #6]
 8014ac4:	e7ef      	b.n	8014aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014ac6:	428f      	cmp	r7, r1
 8014ac8:	dcee      	bgt.n	8014aa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014aca:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8014ace:	4461      	add	r1, ip
 8014ad0:	b209      	sxth	r1, r1
 8014ad2:	4589      	cmp	r9, r1
 8014ad4:	dbe8      	blt.n	8014aa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014ad6:	4576      	cmp	r6, lr
 8014ad8:	fa1f fc8e 	uxth.w	ip, lr
 8014adc:	88a1      	ldrh	r1, [r4, #4]
 8014ade:	dc07      	bgt.n	8014af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x23c>
 8014ae0:	eba3 0c0c 	sub.w	ip, r3, ip
 8014ae4:	f8a4 8000 	strh.w	r8, [r4]
 8014ae8:	eba1 010c 	sub.w	r1, r1, ip
 8014aec:	80a1      	strh	r1, [r4, #4]
 8014aee:	e7da      	b.n	8014aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014af0:	4461      	add	r1, ip
 8014af2:	b209      	sxth	r1, r1
 8014af4:	4588      	cmp	r8, r1
 8014af6:	dbd7      	blt.n	8014aa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8014af8:	9905      	ldr	r1, [sp, #20]
 8014afa:	eba1 0c0c 	sub.w	ip, r1, ip
 8014afe:	f8a4 c004 	strh.w	ip, [r4, #4]
 8014b02:	e7d0      	b.n	8014aa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8014b04:	2402536e 	.word	0x2402536e
 8014b08:	2402536c 	.word	0x2402536c
 8014b0c:	24025378 	.word	0x24025378
 8014b10:	2d00      	cmp	r5, #0
 8014b12:	f000 816d 	beq.w	8014df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014b16:	9b06      	ldr	r3, [sp, #24]
 8014b18:	445b      	add	r3, fp
 8014b1a:	461c      	mov	r4, r3
 8014b1c:	9b02      	ldr	r3, [sp, #8]
 8014b1e:	3301      	adds	r3, #1
 8014b20:	f000 8166 	beq.w	8014df0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8014b24:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8014b28:	9803      	ldr	r0, [sp, #12]
 8014b2a:	4629      	mov	r1, r5
 8014b2c:	f7ff fd32 	bl	8014594 <_ZNK8touchgfx4Rect8includesERKS0_>
 8014b30:	b120      	cbz	r0, 8014b3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x288>
 8014b32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8014b36:	9801      	ldr	r0, [sp, #4]
 8014b38:	f7ff fea8 	bl	801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014b3c:	9903      	ldr	r1, [sp, #12]
 8014b3e:	4628      	mov	r0, r5
 8014b40:	f7ff fcb5 	bl	80144ae <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014b44:	2800      	cmp	r0, #0
 8014b46:	f000 809c 	beq.w	8014c82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014b4a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8014b4e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014b52:	fa1f f189 	uxth.w	r1, r9
 8014b56:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8014b5c:	eb01 0c03 	add.w	ip, r1, r3
 8014b60:	b283      	uxth	r3, r0
 8014b62:	4548      	cmp	r0, r9
 8014b64:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8014b68:	fa1f fa8c 	uxth.w	sl, ip
 8014b6c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8014b70:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8014b74:	eb03 050c 	add.w	r5, r3, ip
 8014b78:	b2ad      	uxth	r5, r5
 8014b7a:	9505      	str	r5, [sp, #20]
 8014b7c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8014b80:	9504      	str	r5, [sp, #16]
 8014b82:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8014b86:	f340 8099 	ble.w	8014cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8014b8a:	1a5b      	subs	r3, r3, r1
 8014b8c:	4596      	cmp	lr, r2
 8014b8e:	fa0f f08a 	sxth.w	r0, sl
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	b21e      	sxth	r6, r3
 8014b96:	dd2e      	ble.n	8014bf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x342>
 8014b98:	9f02      	ldr	r7, [sp, #8]
 8014b9a:	fa1f fe8e 	uxth.w	lr, lr
 8014b9e:	b292      	uxth	r2, r2
 8014ba0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8014ba4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8014ba8:	9f04      	ldr	r7, [sp, #16]
 8014baa:	ebae 0102 	sub.w	r1, lr, r2
 8014bae:	44a6      	add	lr, r4
 8014bb0:	1a3f      	subs	r7, r7, r0
 8014bb2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8014bb6:	b289      	uxth	r1, r1
 8014bb8:	4402      	add	r2, r0
 8014bba:	fa0f fe8e 	sxth.w	lr, lr
 8014bbe:	b20d      	sxth	r5, r1
 8014bc0:	b212      	sxth	r2, r2
 8014bc2:	436f      	muls	r7, r5
 8014bc4:	ebae 0202 	sub.w	r2, lr, r2
 8014bc8:	4372      	muls	r2, r6
 8014bca:	4297      	cmp	r7, r2
 8014bcc:	db09      	blt.n	8014be2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32e>
 8014bce:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8014bd2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8014bd6:	449c      	add	ip, r3
 8014bd8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8014bdc:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014be0:	e684      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014be2:	4421      	add	r1, r4
 8014be4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8014be8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8014bec:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014bf0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014bf4:	e67a      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014bf6:	9f04      	ldr	r7, [sp, #16]
 8014bf8:	42b8      	cmp	r0, r7
 8014bfa:	da27      	bge.n	8014c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x398>
 8014bfc:	9902      	ldr	r1, [sp, #8]
 8014bfe:	1a3f      	subs	r7, r7, r0
 8014c00:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8014c04:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8014c08:	eb05 010e 	add.w	r1, r5, lr
 8014c0c:	fa1f f881 	uxth.w	r8, r1
 8014c10:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8014c14:	4411      	add	r1, r2
 8014c16:	fa0f f988 	sxth.w	r9, r8
 8014c1a:	eba2 020e 	sub.w	r2, r2, lr
 8014c1e:	eba1 0108 	sub.w	r1, r1, r8
 8014c22:	4372      	muls	r2, r6
 8014c24:	b289      	uxth	r1, r1
 8014c26:	fa0f f881 	sxth.w	r8, r1
 8014c2a:	fb08 f707 	mul.w	r7, r8, r7
 8014c2e:	42ba      	cmp	r2, r7
 8014c30:	dc06      	bgt.n	8014c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38c>
 8014c32:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8014c36:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8014c3a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8014c3e:	e7ca      	b.n	8014bd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 8014c40:	4429      	add	r1, r5
 8014c42:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8014c46:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014c4a:	e64f      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014c4c:	9805      	ldr	r0, [sp, #20]
 8014c4e:	2d06      	cmp	r5, #6
 8014c50:	ebaa 0000 	sub.w	r0, sl, r0
 8014c54:	b280      	uxth	r0, r0
 8014c56:	fa0f fe80 	sxth.w	lr, r0
 8014c5a:	d817      	bhi.n	8014c8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d8>
 8014c5c:	9b04      	ldr	r3, [sp, #16]
 8014c5e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8014c62:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8014c66:	1c6b      	adds	r3, r5, #1
 8014c68:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8014c6c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014c70:	9b01      	ldr	r3, [sp, #4]
 8014c72:	9801      	ldr	r0, [sp, #4]
 8014c74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014c78:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014c7c:	805a      	strh	r2, [r3, #2]
 8014c7e:	809e      	strh	r6, [r3, #4]
 8014c80:	80d9      	strh	r1, [r3, #6]
 8014c82:	9b02      	ldr	r3, [sp, #8]
 8014c84:	3c08      	subs	r4, #8
 8014c86:	3b01      	subs	r3, #1
 8014c88:	9302      	str	r3, [sp, #8]
 8014c8a:	e747      	b.n	8014b1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x268>
 8014c8c:	9a02      	ldr	r2, [sp, #8]
 8014c8e:	45b6      	cmp	lr, r6
 8014c90:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014c94:	db0d      	blt.n	8014cb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fe>
 8014c96:	449c      	add	ip, r3
 8014c98:	445a      	add	r2, fp
 8014c9a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8014c9e:	fa1f fc8c 	uxth.w	ip, ip
 8014ca2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8014ca6:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8014caa:	448c      	add	ip, r1
 8014cac:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8014cb0:	e61c      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014cb2:	445a      	add	r2, fp
 8014cb4:	4484      	add	ip, r0
 8014cb6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8014cba:	e78f      	b.n	8014bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014cbc:	fa1f f18e 	uxth.w	r1, lr
 8014cc0:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8014cc4:	b293      	uxth	r3, r2
 8014cc6:	4596      	cmp	lr, r2
 8014cc8:	eb01 0806 	add.w	r8, r1, r6
 8014ccc:	9306      	str	r3, [sp, #24]
 8014cce:	fa1f f888 	uxth.w	r8, r8
 8014cd2:	9f06      	ldr	r7, [sp, #24]
 8014cd4:	fa0f f388 	sxth.w	r3, r8
 8014cd8:	9307      	str	r3, [sp, #28]
 8014cda:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014cde:	443b      	add	r3, r7
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	9308      	str	r3, [sp, #32]
 8014ce4:	da24      	bge.n	8014d30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8014ce6:	9905      	ldr	r1, [sp, #20]
 8014ce8:	eba3 0308 	sub.w	r3, r3, r8
 8014cec:	eba2 020e 	sub.w	r2, r2, lr
 8014cf0:	eba9 0000 	sub.w	r0, r9, r0
 8014cf4:	ebaa 0401 	sub.w	r4, sl, r1
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	b2a4      	uxth	r4, r4
 8014cfc:	b219      	sxth	r1, r3
 8014cfe:	b225      	sxth	r5, r4
 8014d00:	4348      	muls	r0, r1
 8014d02:	436a      	muls	r2, r5
 8014d04:	4282      	cmp	r2, r0
 8014d06:	9a02      	ldr	r2, [sp, #8]
 8014d08:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8014d0c:	445a      	add	r2, fp
 8014d0e:	dc06      	bgt.n	8014d1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 8014d10:	9b07      	ldr	r3, [sp, #28]
 8014d12:	44a4      	add	ip, r4
 8014d14:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8014d18:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8014d1c:	e75e      	b.n	8014bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014d1e:	9904      	ldr	r1, [sp, #16]
 8014d20:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8014d24:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8014d28:	4433      	add	r3, r6
 8014d2a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014d2e:	e5dd      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014d30:	9f06      	ldr	r7, [sp, #24]
 8014d32:	9b04      	ldr	r3, [sp, #16]
 8014d34:	1bc9      	subs	r1, r1, r7
 8014d36:	fa0f f78a 	sxth.w	r7, sl
 8014d3a:	b289      	uxth	r1, r1
 8014d3c:	429f      	cmp	r7, r3
 8014d3e:	fa0f fe81 	sxth.w	lr, r1
 8014d42:	dd23      	ble.n	8014d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d8>
 8014d44:	9a05      	ldr	r2, [sp, #20]
 8014d46:	eba9 0000 	sub.w	r0, r9, r0
 8014d4a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014d4e:	ebaa 0202 	sub.w	r2, sl, r2
 8014d52:	9d07      	ldr	r5, [sp, #28]
 8014d54:	fb0e f000 	mul.w	r0, lr, r0
 8014d58:	b292      	uxth	r2, r2
 8014d5a:	eba5 0a03 	sub.w	sl, r5, r3
 8014d5e:	9b02      	ldr	r3, [sp, #8]
 8014d60:	b214      	sxth	r4, r2
 8014d62:	00db      	lsls	r3, r3, #3
 8014d64:	fb04 fa0a 	mul.w	sl, r4, sl
 8014d68:	445b      	add	r3, fp
 8014d6a:	4550      	cmp	r0, sl
 8014d6c:	db03      	blt.n	8014d76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c2>
 8014d6e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8014d72:	4494      	add	ip, r2
 8014d74:	e732      	b.n	8014bdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 8014d76:	9a04      	ldr	r2, [sp, #16]
 8014d78:	4431      	add	r1, r6
 8014d7a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8014d7e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8014d82:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8014d86:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014d8a:	e75c      	b.n	8014c46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x392>
 8014d8c:	9b08      	ldr	r3, [sp, #32]
 8014d8e:	2d06      	cmp	r5, #6
 8014d90:	eba3 0308 	sub.w	r3, r3, r8
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	b218      	sxth	r0, r3
 8014d98:	d813      	bhi.n	8014dc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50e>
 8014d9a:	9b07      	ldr	r3, [sp, #28]
 8014d9c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8014da0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8014da4:	1c6b      	adds	r3, r5, #1
 8014da6:	9901      	ldr	r1, [sp, #4]
 8014da8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8014dac:	9b01      	ldr	r3, [sp, #4]
 8014dae:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8014db2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014db6:	805a      	strh	r2, [r3, #2]
 8014db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014dba:	f8a3 e006 	strh.w	lr, [r3, #6]
 8014dbe:	809a      	strh	r2, [r3, #4]
 8014dc0:	e75f      	b.n	8014c82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ce>
 8014dc2:	9c02      	ldr	r4, [sp, #8]
 8014dc4:	4570      	cmp	r0, lr
 8014dc6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8014dca:	db0d      	blt.n	8014de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 8014dcc:	4431      	add	r1, r6
 8014dce:	9b06      	ldr	r3, [sp, #24]
 8014dd0:	445c      	add	r4, fp
 8014dd2:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8014dd6:	b289      	uxth	r1, r1
 8014dd8:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8014ddc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8014de0:	4419      	add	r1, r3
 8014de2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8014de6:	e581      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014de8:	445c      	add	r4, fp
 8014dea:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8014dee:	e79b      	b.n	8014d28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8014df0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8014df4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8014df8:	1e65      	subs	r5, r4, #1
 8014dfa:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014dfe:	b2ad      	uxth	r5, r5
 8014e00:	42b5      	cmp	r5, r6
 8014e02:	d044      	beq.n	8014e8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5da>
 8014e04:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8014e08:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8014e0c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8014e10:	4282      	cmp	r2, r0
 8014e12:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8014e16:	d11f      	bne.n	8014e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014e18:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8014e1c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014e20:	459c      	cmp	ip, r3
 8014e22:	d119      	bne.n	8014e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a4>
 8014e24:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8014e28:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8014e2c:	19d8      	adds	r0, r3, r7
 8014e2e:	b200      	sxth	r0, r0
 8014e30:	4288      	cmp	r0, r1
 8014e32:	d109      	bne.n	8014e48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8014e34:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8014e38:	4413      	add	r3, r2
 8014e3a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8014e3e:	4629      	mov	r1, r5
 8014e40:	9801      	ldr	r0, [sp, #4]
 8014e42:	f7ff fd23 	bl	801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014e46:	e003      	b.n	8014e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014e48:	4411      	add	r1, r2
 8014e4a:	b209      	sxth	r1, r1
 8014e4c:	42b9      	cmp	r1, r7
 8014e4e:	d0f3      	beq.n	8014e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8014e50:	3d01      	subs	r5, #1
 8014e52:	3c08      	subs	r4, #8
 8014e54:	b2ad      	uxth	r5, r5
 8014e56:	e7d3      	b.n	8014e00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 8014e58:	42b9      	cmp	r1, r7
 8014e5a:	d1f9      	bne.n	8014e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014e5c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8014e60:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014e64:	4299      	cmp	r1, r3
 8014e66:	d1f3      	bne.n	8014e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014e68:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8014e6c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8014e70:	181f      	adds	r7, r3, r0
 8014e72:	b23f      	sxth	r7, r7
 8014e74:	42ba      	cmp	r2, r7
 8014e76:	d105      	bne.n	8014e84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5d0>
 8014e78:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8014e7c:	440b      	add	r3, r1
 8014e7e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8014e82:	e7dc      	b.n	8014e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58a>
 8014e84:	440a      	add	r2, r1
 8014e86:	b212      	sxth	r2, r2
 8014e88:	4290      	cmp	r0, r2
 8014e8a:	d1e1      	bne.n	8014e50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x59c>
 8014e8c:	e7f6      	b.n	8014e7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c8>
 8014e8e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8014e92:	2e07      	cmp	r6, #7
 8014e94:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8014e98:	d812      	bhi.n	8014ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60c>
 8014e9a:	1c75      	adds	r5, r6, #1
 8014e9c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8014ea0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8014ea4:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8014ea8:	9d01      	ldr	r5, [sp, #4]
 8014eaa:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8014eae:	442c      	add	r4, r5
 8014eb0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8014eb4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8014eb8:	8061      	strh	r1, [r4, #2]
 8014eba:	80a2      	strh	r2, [r4, #4]
 8014ebc:	80e3      	strh	r3, [r4, #6]
 8014ebe:	e57f      	b.n	80149c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x10c>
 8014ec0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8014ec4:	3e01      	subs	r6, #1
 8014ec6:	445c      	add	r4, fp
 8014ec8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8014ecc:	f04f 37ff 	mov.w	r7, #4294967295
 8014ed0:	2500      	movs	r5, #0
 8014ed2:	9305      	str	r3, [sp, #20]
 8014ed4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8014ed8:	1e72      	subs	r2, r6, #1
 8014eda:	9302      	str	r3, [sp, #8]
 8014edc:	4691      	mov	r9, r2
 8014ede:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8014ee2:	9304      	str	r3, [sp, #16]
 8014ee4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8014ee8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014eec:	6818      	ldr	r0, [r3, #0]
 8014eee:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8014ef2:	9207      	str	r2, [sp, #28]
 8014ef4:	bf16      	itet	ne
 8014ef6:	9905      	ldrne	r1, [sp, #20]
 8014ef8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8014efc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8014f00:	9306      	str	r3, [sp, #24]
 8014f02:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8014f06:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8014f0a:	fb18 f801 	smulbb	r8, r8, r1
 8014f0e:	6859      	ldr	r1, [r3, #4]
 8014f10:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014f14:	4671      	mov	r1, lr
 8014f16:	a80c      	add	r0, sp, #48	@ 0x30
 8014f18:	f7ff fb62 	bl	80145e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014f1c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8014f20:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8014f24:	f04f 0c08 	mov.w	ip, #8
 8014f28:	9b04      	ldr	r3, [sp, #16]
 8014f2a:	9a02      	ldr	r2, [sp, #8]
 8014f2c:	fb10 f001 	smulbb	r0, r0, r1
 8014f30:	fb02 8803 	mla	r8, r2, r3, r8
 8014f34:	eba0 0108 	sub.w	r1, r0, r8
 8014f38:	fb90 f0fc 	sdiv	r0, r0, ip
 8014f3c:	4288      	cmp	r0, r1
 8014f3e:	dc20      	bgt.n	8014f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014f40:	4551      	cmp	r1, sl
 8014f42:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f46:	da03      	bge.n	8014f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x69c>
 8014f48:	b1d9      	cbz	r1, 8014f82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6ce>
 8014f4a:	468a      	mov	sl, r1
 8014f4c:	464f      	mov	r7, r9
 8014f4e:	4635      	mov	r5, r6
 8014f50:	f109 39ff 	add.w	r9, r9, #4294967295
 8014f54:	f119 0f02 	cmn.w	r9, #2
 8014f58:	d1c6      	bne.n	8014ee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8014f5a:	4616      	mov	r6, r2
 8014f5c:	3201      	adds	r2, #1
 8014f5e:	f1a4 0408 	sub.w	r4, r4, #8
 8014f62:	d1b7      	bne.n	8014ed4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8014f64:	9b01      	ldr	r3, [sp, #4]
 8014f66:	b2ac      	uxth	r4, r5
 8014f68:	00ed      	lsls	r5, r5, #3
 8014f6a:	1958      	adds	r0, r3, r5
 8014f6c:	1c7b      	adds	r3, r7, #1
 8014f6e:	d10b      	bne.n	8014f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6d4>
 8014f70:	4601      	mov	r1, r0
 8014f72:	9803      	ldr	r0, [sp, #12]
 8014f74:	f7ff fb34 	bl	80145e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014f78:	4621      	mov	r1, r4
 8014f7a:	9801      	ldr	r0, [sp, #4]
 8014f7c:	f7ff fc86 	bl	801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014f80:	e4b4      	b.n	80148ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38>
 8014f82:	464f      	mov	r7, r9
 8014f84:	4635      	mov	r5, r6
 8014f86:	e7ed      	b.n	8014f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b0>
 8014f88:	9b01      	ldr	r3, [sp, #4]
 8014f8a:	00ff      	lsls	r7, r7, #3
 8014f8c:	445d      	add	r5, fp
 8014f8e:	19d9      	adds	r1, r3, r7
 8014f90:	445f      	add	r7, fp
 8014f92:	f7ff fb25 	bl	80145e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014f96:	9b03      	ldr	r3, [sp, #12]
 8014f98:	cb03      	ldmia	r3!, {r0, r1}
 8014f9a:	9b03      	ldr	r3, [sp, #12]
 8014f9c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8014fa0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8014fa4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8014fa8:	6869      	ldr	r1, [r5, #4]
 8014faa:	c303      	stmia	r3!, {r0, r1}
 8014fac:	e7e4      	b.n	8014f78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8014fae:	bf00      	nop

08014fb0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8014fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fb4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8014fb8:	b0a1      	sub	sp, #132	@ 0x84
 8014fba:	4604      	mov	r4, r0
 8014fbc:	4630      	mov	r0, r6
 8014fbe:	f7f9 ff26 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8014fc2:	4605      	mov	r5, r0
 8014fc4:	b948      	cbnz	r0, 8014fda <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8014fc6:	6823      	ldr	r3, [r4, #0]
 8014fc8:	4620      	mov	r0, r4
 8014fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fcc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8014fd0:	4798      	blx	r3
 8014fd2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8014fd6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8014fda:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d149      	bne.n	8015076 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc6>
 8014fe2:	4bb2      	ldr	r3, [pc, #712]	@ (80152ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	f893 7048 	ldrb.w	r7, [r3, #72]	@ 0x48
 8014fea:	1ebb      	subs	r3, r7, #2
 8014fec:	425f      	negs	r7, r3
 8014fee:	415f      	adcs	r7, r3
 8014ff0:	4baf      	ldr	r3, [pc, #700]	@ (80152b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x300>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d040      	beq.n	801507a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8014ff8:	4dae      	ldr	r5, [pc, #696]	@ (80152b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x304>)
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f7f9 ff07 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015000:	4606      	mov	r6, r0
 8015002:	2800      	cmp	r0, #0
 8015004:	d139      	bne.n	801507a <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8015006:	4628      	mov	r0, r5
 8015008:	f7ff f962 	bl	80142d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801500c:	6823      	ldr	r3, [r4, #0]
 801500e:	6829      	ldr	r1, [r5, #0]
 8015010:	4620      	mov	r0, r4
 8015012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015014:	686a      	ldr	r2, [r5, #4]
 8015016:	4798      	blx	r3
 8015018:	802e      	strh	r6, [r5, #0]
 801501a:	806e      	strh	r6, [r5, #2]
 801501c:	80ae      	strh	r6, [r5, #4]
 801501e:	80ee      	strh	r6, [r5, #6]
 8015020:	af0f      	add	r7, sp, #60	@ 0x3c
 8015022:	4ea5      	ldr	r6, [pc, #660]	@ (80152b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x308>)
 8015024:	4638      	mov	r0, r7
 8015026:	f7ff fbd5 	bl	80147d4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801502a:	8835      	ldrh	r5, [r6, #0]
 801502c:	f8b4 c0ec 	ldrh.w	ip, [r4, #236]	@ 0xec
 8015030:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8015034:	462b      	mov	r3, r5
 8015036:	4563      	cmp	r3, ip
 8015038:	d224      	bcs.n	8015084 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 801503a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 801503e:	2907      	cmp	r1, #7
 8015040:	d816      	bhi.n	8015070 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8015042:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8015046:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801504a:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801504e:	f9b2 8004 	ldrsh.w	r8, [r2, #4]
 8015052:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 8015056:	1c4a      	adds	r2, r1, #1
 8015058:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
 801505c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
 8015060:	f827 9031 	strh.w	r9, [r7, r1, lsl #3]
 8015064:	f8a2 a002 	strh.w	sl, [r2, #2]
 8015068:	f8a2 8004 	strh.w	r8, [r2, #4]
 801506c:	f8a2 e006 	strh.w	lr, [r2, #6]
 8015070:	3301      	adds	r3, #1
 8015072:	b29b      	uxth	r3, r3
 8015074:	e7df      	b.n	8015036 <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8015076:	2701      	movs	r7, #1
 8015078:	e7ba      	b.n	8014ff0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40>
 801507a:	2f00      	cmp	r7, #0
 801507c:	d1d0      	bne.n	8015020 <_ZN8touchgfx11Application15drawCachedAreasEv+0x70>
 801507e:	b021      	add	sp, #132	@ 0x84
 8015080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015084:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8015088:	42ab      	cmp	r3, r5
 801508a:	d90c      	bls.n	80150a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xf6>
 801508c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8015090:	6822      	ldr	r2, [r4, #0]
 8015092:	3501      	adds	r5, #1
 8015094:	4620      	mov	r0, r4
 8015096:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8015098:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801509c:	b2ad      	uxth	r5, r5
 801509e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80150a2:	47b8      	blx	r7
 80150a4:	e7ee      	b.n	8015084 <_ZN8touchgfx11Application15drawCachedAreasEv+0xd4>
 80150a6:	4d81      	ldr	r5, [pc, #516]	@ (80152ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2fc>)
 80150a8:	6828      	ldr	r0, [r5, #0]
 80150aa:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	f040 813d 	bne.w	801532e <_ZN8touchgfx11Application15drawCachedAreasEv+0x37e>
 80150b4:	4a81      	ldr	r2, [pc, #516]	@ (80152bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x30c>)
 80150b6:	8833      	ldrh	r3, [r6, #0]
 80150b8:	7812      	ldrb	r2, [r2, #0]
 80150ba:	f8b4 00ec 	ldrh.w	r0, [r4, #236]	@ 0xec
 80150be:	2a01      	cmp	r2, #1
 80150c0:	d014      	beq.n	80150ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 80150c2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80150c6:	f04f 0900 	mov.w	r9, #0
 80150ca:	32ae      	adds	r2, #174	@ 0xae
 80150cc:	4283      	cmp	r3, r0
 80150ce:	f102 0208 	add.w	r2, r2, #8
 80150d2:	f280 8083 	bge.w	80151dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80150d6:	f832 1c04 	ldrh.w	r1, [r2, #-4]
 80150da:	3301      	adds	r3, #1
 80150dc:	f832 7c08 	ldrh.w	r7, [r2, #-8]
 80150e0:	4439      	add	r1, r7
 80150e2:	b209      	sxth	r1, r1
 80150e4:	4589      	cmp	r9, r1
 80150e6:	bfb8      	it	lt
 80150e8:	4689      	movlt	r9, r1
 80150ea:	e7ef      	b.n	80150cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x11c>
 80150ec:	4f74      	ldr	r7, [pc, #464]	@ (80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>)
 80150ee:	883a      	ldrh	r2, [r7, #0]
 80150f0:	4693      	mov	fp, r2
 80150f2:	4283      	cmp	r3, r0
 80150f4:	da08      	bge.n	8015108 <_ZN8touchgfx11Application15drawCachedAreasEv+0x158>
 80150f6:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 80150fa:	3301      	adds	r3, #1
 80150fc:	f9b1 10ac 	ldrsh.w	r1, [r1, #172]	@ 0xac
 8015100:	458b      	cmp	fp, r1
 8015102:	bfa8      	it	ge
 8015104:	468b      	movge	fp, r1
 8015106:	e7f4      	b.n	80150f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x142>
 8015108:	2a0f      	cmp	r2, #15
 801510a:	f04f 0300 	mov.w	r3, #0
 801510e:	f8df 91b4 	ldr.w	r9, [pc, #436]	@ 80152c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>
 8015112:	bf8c      	ite	hi
 8015114:	ea4f 08d2 	movhi.w	r8, r2, lsr #3
 8015118:	f04f 0801 	movls.w	r8, #1
 801511c:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8015120:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015124:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8015128:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801512c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8015130:	6828      	ldr	r0, [r5, #0]
 8015132:	455b      	cmp	r3, fp
 8015134:	f340 80c8 	ble.w	80152c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015138:	6803      	ldr	r3, [r0, #0]
 801513a:	f8b7 a000 	ldrh.w	sl, [r7]
 801513e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015142:	4798      	blx	r3
 8015144:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8015148:	ebaa 0000 	sub.w	r0, sl, r0
 801514c:	682b      	ldr	r3, [r5, #0]
 801514e:	ebac 0e08 	sub.w	lr, ip, r8
 8015152:	b280      	uxth	r0, r0
 8015154:	f893 107c 	ldrb.w	r1, [r3, #124]	@ 0x7c
 8015158:	f893 206a 	ldrb.w	r2, [r3, #106]	@ 0x6a
 801515c:	4570      	cmp	r0, lr
 801515e:	dd05      	ble.n	801516c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8015160:	4558      	cmp	r0, fp
 8015162:	dd03      	ble.n	801516c <_ZN8touchgfx11Application15drawCachedAreasEv+0x1bc>
 8015164:	b901      	cbnz	r1, 8015168 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8015166:	b392      	cbz	r2, 80151ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x21e>
 8015168:	4658      	mov	r0, fp
 801516a:	e006      	b.n	801517a <_ZN8touchgfx11Application15drawCachedAreasEv+0x1ca>
 801516c:	2900      	cmp	r1, #0
 801516e:	d1fb      	bne.n	8015168 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8015170:	2a00      	cmp	r2, #0
 8015172:	d1f9      	bne.n	8015168 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1b8>
 8015174:	4558      	cmp	r0, fp
 8015176:	bfb8      	it	lt
 8015178:	4658      	movlt	r0, fp
 801517a:	f9b9 3000 	ldrsh.w	r3, [r9]
 801517e:	2200      	movs	r2, #0
 8015180:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8015184:	ebac 0000 	sub.w	r0, ip, r0
 8015188:	f8b6 a000 	ldrh.w	sl, [r6]
 801518c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8015190:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8015194:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8015198:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801519c:	4553      	cmp	r3, sl
 801519e:	ddc5      	ble.n	801512c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 80151a0:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80151a4:	ab0d      	add	r3, sp, #52	@ 0x34
 80151a6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80151aa:	6851      	ldr	r1, [r2, #4]
 80151ac:	c303      	stmia	r3!, {r0, r1}
 80151ae:	a80d      	add	r0, sp, #52	@ 0x34
 80151b0:	a90b      	add	r1, sp, #44	@ 0x2c
 80151b2:	f7f9 fde9 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 80151b6:	a80d      	add	r0, sp, #52	@ 0x34
 80151b8:	f7f9 fe29 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80151bc:	b920      	cbnz	r0, 80151c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x218>
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	a90d      	add	r1, sp, #52	@ 0x34
 80151c2:	4620      	mov	r0, r4
 80151c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80151c6:	4798      	blx	r3
 80151c8:	f10a 0a01 	add.w	sl, sl, #1
 80151cc:	e7e4      	b.n	8015198 <_ZN8touchgfx11Application15drawCachedAreasEv+0x1e8>
 80151ce:	681a      	ldr	r2, [r3, #0]
 80151d0:	2101      	movs	r1, #1
 80151d2:	4618      	mov	r0, r3
 80151d4:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 80151d8:	4790      	blx	r2
 80151da:	e7a7      	b.n	801512c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 80151dc:	4b39      	ldr	r3, [pc, #228]	@ (80152c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x314>)
 80151de:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 80152c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x310>
 80151e2:	881f      	ldrh	r7, [r3, #0]
 80151e4:	2300      	movs	r3, #0
 80151e6:	2f0f      	cmp	r7, #15
 80151e8:	bf8c      	ite	hi
 80151ea:	08ff      	lsrhi	r7, r7, #3
 80151ec:	2701      	movls	r7, #1
 80151ee:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 80151f2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80151f6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 80151fa:	6828      	ldr	r0, [r5, #0]
 80151fc:	4413      	add	r3, r2
 80151fe:	b21b      	sxth	r3, r3
 8015200:	454b      	cmp	r3, r9
 8015202:	da61      	bge.n	80152c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8015204:	6803      	ldr	r3, [r0, #0]
 8015206:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801520a:	4798      	blx	r3
 801520c:	f8bd e02e 	ldrh.w	lr, [sp, #46]	@ 0x2e
 8015210:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8015214:	682a      	ldr	r2, [r5, #0]
 8015216:	4473      	add	r3, lr
 8015218:	f892 c07c 	ldrb.w	ip, [r2, #124]	@ 0x7c
 801521c:	b21b      	sxth	r3, r3
 801521e:	f892 106a 	ldrb.w	r1, [r2, #106]	@ 0x6a
 8015222:	eb03 0e07 	add.w	lr, r3, r7
 8015226:	4570      	cmp	r0, lr
 8015228:	da0d      	bge.n	8015246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 801522a:	4548      	cmp	r0, r9
 801522c:	da0b      	bge.n	8015246 <_ZN8touchgfx11Application15drawCachedAreasEv+0x296>
 801522e:	f1bc 0f00 	cmp.w	ip, #0
 8015232:	d138      	bne.n	80152a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8015234:	2900      	cmp	r1, #0
 8015236:	d136      	bne.n	80152a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 8015238:	6813      	ldr	r3, [r2, #0]
 801523a:	2101      	movs	r1, #1
 801523c:	4610      	mov	r0, r2
 801523e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015242:	4798      	blx	r3
 8015244:	e7d5      	b.n	80151f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8015246:	f1bc 0f00 	cmp.w	ip, #0
 801524a:	d12c      	bne.n	80152a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 801524c:	bb59      	cbnz	r1, 80152a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 801524e:	4548      	cmp	r0, r9
 8015250:	bfa8      	it	ge
 8015252:	4648      	movge	r0, r9
 8015254:	f9b8 2000 	ldrsh.w	r2, [r8]
 8015258:	2100      	movs	r1, #0
 801525a:	1ac0      	subs	r0, r0, r3
 801525c:	f8b6 a000 	ldrh.w	sl, [r6]
 8015260:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8015264:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8015268:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801526c:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8015270:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015274:	4553      	cmp	r3, sl
 8015276:	ddbc      	ble.n	80151f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x242>
 8015278:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801527c:	ab0d      	add	r3, sp, #52	@ 0x34
 801527e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015282:	6851      	ldr	r1, [r2, #4]
 8015284:	c303      	stmia	r3!, {r0, r1}
 8015286:	a80d      	add	r0, sp, #52	@ 0x34
 8015288:	a90b      	add	r1, sp, #44	@ 0x2c
 801528a:	f7f9 fd7d 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 801528e:	a80d      	add	r0, sp, #52	@ 0x34
 8015290:	f7f9 fdbd 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8015294:	b920      	cbnz	r0, 80152a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f0>
 8015296:	6823      	ldr	r3, [r4, #0]
 8015298:	a90d      	add	r1, sp, #52	@ 0x34
 801529a:	4620      	mov	r0, r4
 801529c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801529e:	4798      	blx	r3
 80152a0:	f10a 0a01 	add.w	sl, sl, #1
 80152a4:	e7e4      	b.n	8015270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c0>
 80152a6:	4648      	mov	r0, r9
 80152a8:	e7d4      	b.n	8015254 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a4>
 80152aa:	bf00      	nop
 80152ac:	24025378 	.word	0x24025378
 80152b0:	240253b8 	.word	0x240253b8
 80152b4:	240253c4 	.word	0x240253c4
 80152b8:	2400007c 	.word	0x2400007c
 80152bc:	24025370 	.word	0x24025370
 80152c0:	2402536c 	.word	0x2402536c
 80152c4:	2402536e 	.word	0x2402536e
 80152c8:	6828      	ldr	r0, [r5, #0]
 80152ca:	6803      	ldr	r3, [r0, #0]
 80152cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80152ce:	4798      	blx	r3
 80152d0:	4ba4      	ldr	r3, [pc, #656]	@ (8015564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b4>)
 80152d2:	781b      	ldrb	r3, [r3, #0]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f43f aed2 	beq.w	801507e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 80152da:	2300      	movs	r3, #0
 80152dc:	f8bd 607c 	ldrh.w	r6, [sp, #124]	@ 0x7c
 80152e0:	a80f      	add	r0, sp, #60	@ 0x3c
 80152e2:	f104 05ee 	add.w	r5, r4, #238	@ 0xee
 80152e6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80152ea:	4b9f      	ldr	r3, [pc, #636]	@ (8015568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5b8>)
 80152ec:	881b      	ldrh	r3, [r3, #0]
 80152ee:	42b3      	cmp	r3, r6
 80152f0:	f4bf aec5 	bcs.w	801507e <_ZN8touchgfx11Application15drawCachedAreasEv+0xce>
 80152f4:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80152f8:	2907      	cmp	r1, #7
 80152fa:	d815      	bhi.n	8015328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x378>
 80152fc:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8015300:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8015304:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015308:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801530c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8015310:	1c4a      	adds	r2, r1, #1
 8015312:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8015316:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 801531a:	f825 8031 	strh.w	r8, [r5, r1, lsl #3]
 801531e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8015322:	f8a2 c004 	strh.w	ip, [r2, #4]
 8015326:	80d7      	strh	r7, [r2, #6]
 8015328:	3301      	adds	r3, #1
 801532a:	b29b      	uxth	r3, r3
 801532c:	e7df      	b.n	80152ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x33e>
 801532e:	2b02      	cmp	r3, #2
 8015330:	f040 80ce 	bne.w	80154d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8015334:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8015338:	f890 b07d 	ldrb.w	fp, [r0, #125]	@ 0x7d
 801533c:	9308      	str	r3, [sp, #32]
 801533e:	f8b0 307e 	ldrh.w	r3, [r0, #126]	@ 0x7e
 8015342:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015346:	9307      	str	r3, [sp, #28]
 8015348:	b2bf      	uxth	r7, r7
 801534a:	6803      	ldr	r3, [r0, #0]
 801534c:	fa0f f887 	sxth.w	r8, r7
 8015350:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015354:	4798      	blx	r3
 8015356:	4b85      	ldr	r3, [pc, #532]	@ (801556c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5bc>)
 8015358:	4682      	mov	sl, r0
 801535a:	2000      	movs	r0, #0
 801535c:	881b      	ldrh	r3, [r3, #0]
 801535e:	9302      	str	r3, [sp, #8]
 8015360:	4b83      	ldr	r3, [pc, #524]	@ (8015570 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c0>)
 8015362:	881e      	ldrh	r6, [r3, #0]
 8015364:	4b83      	ldr	r3, [pc, #524]	@ (8015574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b01      	cmp	r3, #1
 801536a:	bf1e      	ittt	ne
 801536c:	9b02      	ldrne	r3, [sp, #8]
 801536e:	9602      	strne	r6, [sp, #8]
 8015370:	461e      	movne	r6, r3
 8015372:	f7ec fd5f 	bl	8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015376:	fb96 fbfb 	sdiv	fp, r6, fp
 801537a:	fb0b f808 	mul.w	r8, fp, r8
 801537e:	45c2      	cmp	sl, r8
 8015380:	da0c      	bge.n	801539c <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ec>
 8015382:	6828      	ldr	r0, [r5, #0]
 8015384:	210a      	movs	r1, #10
 8015386:	6803      	ldr	r3, [r0, #0]
 8015388:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801538c:	4798      	blx	r3
 801538e:	6828      	ldr	r0, [r5, #0]
 8015390:	6803      	ldr	r3, [r0, #0]
 8015392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015396:	4798      	blx	r3
 8015398:	4682      	mov	sl, r0
 801539a:	e7f0      	b.n	801537e <_ZN8touchgfx11Application15drawCachedAreasEv+0x3ce>
 801539c:	2000      	movs	r0, #0
 801539e:	f04f 0800 	mov.w	r8, #0
 80153a2:	f7ec fd77 	bl	8001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80153a6:	fa1f f38b 	uxth.w	r3, fp
 80153aa:	4645      	mov	r5, r8
 80153ac:	fb17 f703 	smulbb	r7, r7, r3
 80153b0:	9304      	str	r3, [sp, #16]
 80153b2:	b2bb      	uxth	r3, r7
 80153b4:	4f70      	ldr	r7, [pc, #448]	@ (8015578 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c8>)
 80153b6:	9305      	str	r3, [sp, #20]
 80153b8:	0973      	lsrs	r3, r6, #5
 80153ba:	9306      	str	r3, [sp, #24]
 80153bc:	42b5      	cmp	r5, r6
 80153be:	d087      	beq.n	80152d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80153c0:	6838      	ldr	r0, [r7, #0]
 80153c2:	6803      	ldr	r3, [r0, #0]
 80153c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80153c8:	4798      	blx	r3
 80153ca:	4582      	cmp	sl, r0
 80153cc:	4681      	mov	r9, r0
 80153ce:	d907      	bls.n	80153e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x430>
 80153d0:	f1b8 0f00 	cmp.w	r8, #0
 80153d4:	d007      	beq.n	80153e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x436>
 80153d6:	6838      	ldr	r0, [r7, #0]
 80153d8:	6803      	ldr	r3, [r0, #0]
 80153da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80153de:	e776      	b.n	80152ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80153e0:	f1b8 0f00 	cmp.w	r8, #0
 80153e4:	d003      	beq.n	80153ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x43e>
 80153e6:	454d      	cmp	r5, r9
 80153e8:	d3f5      	bcc.n	80153d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x426>
 80153ea:	f04f 0801 	mov.w	r8, #1
 80153ee:	9a04      	ldr	r2, [sp, #16]
 80153f0:	fb95 f3fb 	sdiv	r3, r5, fp
 80153f4:	9303      	str	r3, [sp, #12]
 80153f6:	3301      	adds	r3, #1
 80153f8:	fb13 f302 	smulbb	r3, r3, r2
 80153fc:	b299      	uxth	r1, r3
 80153fe:	f1b8 0f00 	cmp.w	r8, #0
 8015402:	d04d      	beq.n	80154a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f0>
 8015404:	eb09 030b 	add.w	r3, r9, fp
 8015408:	42b3      	cmp	r3, r6
 801540a:	bfa8      	it	ge
 801540c:	4633      	movge	r3, r6
 801540e:	b29b      	uxth	r3, r3
 8015410:	9807      	ldr	r0, [sp, #28]
 8015412:	428b      	cmp	r3, r1
 8015414:	bf94      	ite	ls
 8015416:	ebc5 0203 	rsbls	r2, r5, r3
 801541a:	ebc5 0201 	rsbhi	r2, r5, r1
 801541e:	4282      	cmp	r2, r0
 8015420:	bfa8      	it	ge
 8015422:	4602      	movge	r2, r0
 8015424:	9808      	ldr	r0, [sp, #32]
 8015426:	fa1f fa82 	uxth.w	sl, r2
 801542a:	4582      	cmp	sl, r0
 801542c:	d205      	bcs.n	801543a <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 801542e:	fa15 f082 	uxtah	r0, r5, r2
 8015432:	4286      	cmp	r6, r0
 8015434:	d001      	beq.n	801543a <_ZN8touchgfx11Application15drawCachedAreasEv+0x48a>
 8015436:	4299      	cmp	r1, r3
 8015438:	d23f      	bcs.n	80154ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x50a>
 801543a:	2001      	movs	r0, #1
 801543c:	9209      	str	r2, [sp, #36]	@ 0x24
 801543e:	f7ec fcf9 	bl	8001e34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8015442:	6838      	ldr	r0, [r7, #0]
 8015444:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8015448:	6803      	ldr	r3, [r0, #0]
 801544a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801544e:	4798      	blx	r3
 8015450:	4b48      	ldr	r3, [pc, #288]	@ (8015574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 8015452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015454:	2000      	movs	r0, #0
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801545c:	b212      	sxth	r2, r2
 801545e:	2b01      	cmp	r3, #1
 8015460:	d122      	bne.n	80154a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4f8>
 8015462:	1b73      	subs	r3, r6, r5
 8015464:	f8ad 0036 	strh.w	r0, [sp, #54]	@ 0x36
 8015468:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801546c:	eba3 030a 	sub.w	r3, r3, sl
 8015470:	f8ad 103a 	strh.w	r1, [sp, #58]	@ 0x3a
 8015474:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8015478:	6823      	ldr	r3, [r4, #0]
 801547a:	a90d      	add	r1, sp, #52	@ 0x34
 801547c:	4620      	mov	r0, r4
 801547e:	4455      	add	r5, sl
 8015480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015482:	4798      	blx	r3
 8015484:	6838      	ldr	r0, [r7, #0]
 8015486:	9b03      	ldr	r3, [sp, #12]
 8015488:	b2ad      	uxth	r5, r5
 801548a:	4259      	negs	r1, r3
 801548c:	6803      	ldr	r3, [r0, #0]
 801548e:	b209      	sxth	r1, r1
 8015490:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8015494:	4798      	blx	r3
 8015496:	2001      	movs	r0, #1
 8015498:	f7ec fcfc 	bl	8001e94 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801549c:	46ca      	mov	sl, r9
 801549e:	e78d      	b.n	80153bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x40c>
 80154a0:	9b05      	ldr	r3, [sp, #20]
 80154a2:	eba9 0303 	sub.w	r3, r9, r3
 80154a6:	e7b2      	b.n	801540e <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80154a8:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80154ac:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
 80154b0:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
 80154b4:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
 80154b8:	e7de      	b.n	8015478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4c8>
 80154ba:	6838      	ldr	r0, [r7, #0]
 80154bc:	6803      	ldr	r3, [r0, #0]
 80154be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80154c0:	4798      	blx	r3
 80154c2:	6838      	ldr	r0, [r7, #0]
 80154c4:	9906      	ldr	r1, [sp, #24]
 80154c6:	6803      	ldr	r3, [r0, #0]
 80154c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80154cc:	4798      	blx	r3
 80154ce:	e7e5      	b.n	801549c <_ZN8touchgfx11Application15drawCachedAreasEv+0x4ec>
 80154d0:	2b03      	cmp	r3, #3
 80154d2:	f040 8133 	bne.w	801573c <_ZN8touchgfx11Application15drawCachedAreasEv+0x78c>
 80154d6:	4b27      	ldr	r3, [pc, #156]	@ (8015574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5c4>)
 80154d8:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80154dc:	f9b0 9082 	ldrsh.w	r9, [r0, #130]	@ 0x82
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	f000 8095 	beq.w	8015612 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80154e8:	8832      	ldrh	r2, [r6, #0]
 80154ea:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80154ee:	3201      	adds	r2, #1
 80154f0:	b292      	uxth	r2, r2
 80154f2:	2900      	cmp	r1, #0
 80154f4:	f43f aeec 	beq.w	80152d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 80154f8:	f8b4 50b2 	ldrh.w	r5, [r4, #178]	@ 0xb2
 80154fc:	4694      	mov	ip, r2
 80154fe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 8015502:	f04f 0800 	mov.w	r8, #0
 8015506:	441d      	add	r5, r3
 8015508:	b22d      	sxth	r5, r5
 801550a:	fa1f f38c 	uxth.w	r3, ip
 801550e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8015512:	4299      	cmp	r1, r3
 8015514:	f240 80bc 	bls.w	8015690 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e0>
 8015518:	4427      	add	r7, r4
 801551a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801551e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8015522:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8015526:	4283      	cmp	r3, r0
 8015528:	f340 809e 	ble.w	8015668 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b8>
 801552c:	f8be 50b2 	ldrh.w	r5, [lr, #178]	@ 0xb2
 8015530:	46e0      	mov	r8, ip
 8015532:	4405      	add	r5, r0
 8015534:	b22d      	sxth	r5, r5
 8015536:	429d      	cmp	r5, r3
 8015538:	bfa8      	it	ge
 801553a:	461d      	movge	r5, r3
 801553c:	f10c 0c01 	add.w	ip, ip, #1
 8015540:	e7e3      	b.n	801550a <_ZN8touchgfx11Application15drawCachedAreasEv+0x55a>
 8015542:	d10a      	bne.n	801555a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5aa>
 8015544:	4562      	cmp	r2, ip
 8015546:	f9b7 00b2 	ldrsh.w	r0, [r7, #178]	@ 0xb2
 801554a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801554e:	bfb8      	it	lt
 8015550:	4662      	movlt	r2, ip
 8015552:	4288      	cmp	r0, r1
 8015554:	bfb8      	it	lt
 8015556:	4698      	movlt	r8, r3
 8015558:	e084      	b.n	8015664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 801555a:	428a      	cmp	r2, r1
 801555c:	bfb8      	it	lt
 801555e:	460a      	movlt	r2, r1
 8015560:	e080      	b.n	8015664 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6b4>
 8015562:	bf00      	nop
 8015564:	24025376 	.word	0x24025376
 8015568:	2400007c 	.word	0x2400007c
 801556c:	2402536e 	.word	0x2402536e
 8015570:	2402536c 	.word	0x2402536c
 8015574:	24025370 	.word	0x24025370
 8015578:	24025378 	.word	0x24025378
 801557c:	19e1      	adds	r1, r4, r7
 801557e:	ab0d      	add	r3, sp, #52	@ 0x34
 8015580:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8015584:	6849      	ldr	r1, [r1, #4]
 8015586:	c303      	stmia	r3!, {r0, r1}
 8015588:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	@ 0x38
 801558c:	a80d      	add	r0, sp, #52	@ 0x34
 801558e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8015592:	454b      	cmp	r3, r9
 8015594:	440b      	add	r3, r1
 8015596:	bfb8      	it	lt
 8015598:	f9bd 2034 	ldrshlt.w	r2, [sp, #52]	@ 0x34
 801559c:	1a9b      	subs	r3, r3, r2
 801559e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80155a2:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80155a6:	f7fe fead 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80155aa:	a80d      	add	r0, sp, #52	@ 0x34
 80155ac:	f7f9 fc2f 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80155b0:	bb78      	cbnz	r0, 8015612 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 80155b2:	f9bd c03a 	ldrsh.w	ip, [sp, #58]	@ 0x3a
 80155b6:	4427      	add	r7, r4
 80155b8:	6828      	ldr	r0, [r5, #0]
 80155ba:	45cc      	cmp	ip, r9
 80155bc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80155c0:	f8d0 e000 	ldr.w	lr, [r0]
 80155c4:	bfd8      	it	le
 80155c6:	fa1f fc8c 	uxthle.w	ip, ip
 80155ca:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80155ce:	bfc8      	it	gt
 80155d0:	fa1f fc89 	uxthgt.w	ip, r9
 80155d4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80155d8:	f8cd c000 	str.w	ip, [sp]
 80155dc:	f8de b094 	ldr.w	fp, [lr, #148]	@ 0x94
 80155e0:	47d8      	blx	fp
 80155e2:	4683      	mov	fp, r0
 80155e4:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80155e8:	a80d      	add	r0, sp, #52	@ 0x34
 80155ea:	f7fe fe71 	bl	80142d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80155ee:	6823      	ldr	r3, [r4, #0]
 80155f0:	4620      	mov	r0, r4
 80155f2:	a90d      	add	r1, sp, #52	@ 0x34
 80155f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80155f6:	4798      	blx	r3
 80155f8:	f8b7 00b0 	ldrh.w	r0, [r7, #176]	@ 0xb0
 80155fc:	eba0 000b 	sub.w	r0, r0, fp
 8015600:	b200      	sxth	r0, r0
 8015602:	f8a7 00b0 	strh.w	r0, [r7, #176]	@ 0xb0
 8015606:	b920      	cbnz	r0, 8015612 <_ZN8touchgfx11Application15drawCachedAreasEv+0x662>
 8015608:	fa1f f188 	uxth.w	r1, r8
 801560c:	4650      	mov	r0, sl
 801560e:	f7ff f93d 	bl	801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015612:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8015616:	f1bb 0f00 	cmp.w	fp, #0
 801561a:	f43f ae59 	beq.w	80152d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801561e:	8833      	ldrh	r3, [r6, #0]
 8015620:	f04f 0800 	mov.w	r8, #0
 8015624:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8015628:	3301      	adds	r3, #1
 801562a:	b29b      	uxth	r3, r3
 801562c:	b299      	uxth	r1, r3
 801562e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8015632:	458b      	cmp	fp, r1
 8015634:	d9a2      	bls.n	801557c <_ZN8touchgfx11Application15drawCachedAreasEv+0x5cc>
 8015636:	4427      	add	r7, r4
 8015638:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801563c:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	@ 0xb0
 8015640:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	@ 0xac
 8015644:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8015648:	4408      	add	r0, r1
 801564a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801564e:	4461      	add	r1, ip
 8015650:	b200      	sxth	r0, r0
 8015652:	b209      	sxth	r1, r1
 8015654:	4288      	cmp	r0, r1
 8015656:	f6bf af74 	bge.w	8015542 <_ZN8touchgfx11Application15drawCachedAreasEv+0x592>
 801565a:	4584      	cmp	ip, r0
 801565c:	4662      	mov	r2, ip
 801565e:	4698      	mov	r8, r3
 8015660:	bfb8      	it	lt
 8015662:	4602      	movlt	r2, r0
 8015664:	3301      	adds	r3, #1
 8015666:	e7e1      	b.n	801562c <_ZN8touchgfx11Application15drawCachedAreasEv+0x67c>
 8015668:	d10e      	bne.n	8015688 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6d8>
 801566a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801566e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8015672:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8015676:	4473      	add	r3, lr
 8015678:	b21b      	sxth	r3, r3
 801567a:	429d      	cmp	r5, r3
 801567c:	bfa8      	it	ge
 801567e:	461d      	movge	r5, r3
 8015680:	4287      	cmp	r7, r0
 8015682:	bfb8      	it	lt
 8015684:	46e0      	movlt	r8, ip
 8015686:	e759      	b.n	801553c <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8015688:	4285      	cmp	r5, r0
 801568a:	bfa8      	it	ge
 801568c:	4605      	movge	r5, r0
 801568e:	e755      	b.n	801553c <_ZN8touchgfx11Application15drawCachedAreasEv+0x58c>
 8015690:	eb0a 0007 	add.w	r0, sl, r7
 8015694:	4427      	add	r7, r4
 8015696:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801569a:	45cb      	cmp	fp, r9
 801569c:	bfbc      	itt	lt
 801569e:	f8b7 50ae 	ldrhlt.w	r5, [r7, #174]	@ 0xae
 80156a2:	445d      	addlt	r5, fp
 80156a4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80156a8:	bfb8      	it	lt
 80156aa:	b22d      	sxthlt	r5, r5
 80156ac:	f7f9 fbaf 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80156b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80156b4:	2800      	cmp	r0, #0
 80156b6:	f47f af1c 	bne.w	80154f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x542>
 80156ba:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80156be:	fa1f fb8b 	uxth.w	fp, fp
 80156c2:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 80156c6:	1aad      	subs	r5, r5, r2
 80156c8:	4829      	ldr	r0, [pc, #164]	@ (8015770 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7c0>)
 80156ca:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80156ce:	454d      	cmp	r5, r9
 80156d0:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80156d4:	6800      	ldr	r0, [r0, #0]
 80156d6:	bfa8      	it	ge
 80156d8:	464d      	movge	r5, r9
 80156da:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
 80156de:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80156e2:	b289      	uxth	r1, r1
 80156e4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80156e8:	b2ad      	uxth	r5, r5
 80156ea:	f8d0 c000 	ldr.w	ip, [r0]
 80156ee:	b292      	uxth	r2, r2
 80156f0:	455d      	cmp	r5, fp
 80156f2:	bf94      	ite	ls
 80156f4:	9500      	strls	r5, [sp, #0]
 80156f6:	f8cd b000 	strhi.w	fp, [sp]
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	f8dc 5094 	ldr.w	r5, [ip, #148]	@ 0x94
 8015700:	47a8      	blx	r5
 8015702:	6823      	ldr	r3, [r4, #0]
 8015704:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8015708:	a90d      	add	r1, sp, #52	@ 0x34
 801570a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801570c:	4620      	mov	r0, r4
 801570e:	4798      	blx	r3
 8015710:	f8bd 103a 	ldrh.w	r1, [sp, #58]	@ 0x3a
 8015714:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8015718:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801571c:	1a5b      	subs	r3, r3, r1
 801571e:	440a      	add	r2, r1
 8015720:	b21b      	sxth	r3, r3
 8015722:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8015726:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801572a:	2b00      	cmp	r3, #0
 801572c:	f47f aedc 	bne.w	80154e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 8015730:	fa1f f188 	uxth.w	r1, r8
 8015734:	4650      	mov	r0, sl
 8015736:	f7ff f8a9 	bl	801488c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801573a:	e6d5      	b.n	80154e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x538>
 801573c:	8835      	ldrh	r5, [r6, #0]
 801573e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8015742:	42ab      	cmp	r3, r5
 8015744:	f67f adc4 	bls.w	80152d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8015748:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801574c:	ab0d      	add	r3, sp, #52	@ 0x34
 801574e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8015752:	6851      	ldr	r1, [r2, #4]
 8015754:	c303      	stmia	r3!, {r0, r1}
 8015756:	a80d      	add	r0, sp, #52	@ 0x34
 8015758:	f7f9 fb59 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 801575c:	b920      	cbnz	r0, 8015768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7b8>
 801575e:	6823      	ldr	r3, [r4, #0]
 8015760:	a90d      	add	r1, sp, #52	@ 0x34
 8015762:	4620      	mov	r0, r4
 8015764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015766:	4798      	blx	r3
 8015768:	3501      	adds	r5, #1
 801576a:	b2ad      	uxth	r5, r5
 801576c:	e7e7      	b.n	801573e <_ZN8touchgfx11Application15drawCachedAreasEv+0x78e>
 801576e:	bf00      	nop
 8015770:	24025378 	.word	0x24025378

08015774 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015774:	4b03      	ldr	r3, [pc, #12]	@ (8015784 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015776:	2200      	movs	r2, #0
 8015778:	801a      	strh	r2, [r3, #0]
 801577a:	805a      	strh	r2, [r3, #2]
 801577c:	809a      	strh	r2, [r3, #4]
 801577e:	80da      	strh	r2, [r3, #6]
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	240253c4 	.word	0x240253c4

08015788 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578c:	b09d      	sub	sp, #116	@ 0x74
 801578e:	4606      	mov	r6, r0
 8015790:	4614      	mov	r4, r2
 8015792:	468a      	mov	sl, r1
 8015794:	a803      	add	r0, sp, #12
 8015796:	461d      	mov	r5, r3
 8015798:	f001 f946 	bl	8016a28 <_ZN8touchgfx12TextProviderC1Ev>
 801579c:	6833      	ldr	r3, [r6, #0]
 801579e:	4630      	mov	r0, r6
 80157a0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80157a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157a6:	4798      	blx	r3
 80157a8:	6833      	ldr	r3, [r6, #0]
 80157aa:	4607      	mov	r7, r0
 80157ac:	4630      	mov	r0, r6
 80157ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80157b0:	4798      	blx	r3
 80157b2:	462a      	mov	r2, r5
 80157b4:	2500      	movs	r5, #0
 80157b6:	4621      	mov	r1, r4
 80157b8:	9000      	str	r0, [sp, #0]
 80157ba:	463b      	mov	r3, r7
 80157bc:	462c      	mov	r4, r5
 80157be:	46a9      	mov	r9, r5
 80157c0:	46a8      	mov	r8, r5
 80157c2:	a803      	add	r0, sp, #12
 80157c4:	f001 f983 	bl	8016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80157c8:	2300      	movs	r3, #0
 80157ca:	9302      	str	r3, [sp, #8]
 80157cc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80157d0:	429c      	cmp	r4, r3
 80157d2:	d002      	beq.n	80157da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80157d4:	455c      	cmp	r4, fp
 80157d6:	bf18      	it	ne
 80157d8:	4625      	movne	r5, r4
 80157da:	ab02      	add	r3, sp, #8
 80157dc:	4632      	mov	r2, r6
 80157de:	4651      	mov	r1, sl
 80157e0:	a803      	add	r0, sp, #12
 80157e2:	f001 fc97 	bl	8017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80157e6:	4604      	mov	r4, r0
 80157e8:	b108      	cbz	r0, 80157ee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80157ea:	280a      	cmp	r0, #10
 80157ec:	d10a      	bne.n	8015804 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80157ee:	45c1      	cmp	r9, r8
 80157f0:	bf38      	it	cc
 80157f2:	46c1      	movcc	r9, r8
 80157f4:	f04f 0800 	mov.w	r8, #0
 80157f8:	2c00      	cmp	r4, #0
 80157fa:	d1e5      	bne.n	80157c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80157fc:	4648      	mov	r0, r9
 80157fe:	b01d      	add	sp, #116	@ 0x74
 8015800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015804:	9a02      	ldr	r2, [sp, #8]
 8015806:	2a00      	cmp	r2, #0
 8015808:	d0de      	beq.n	80157c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801580a:	7b57      	ldrb	r7, [r2, #13]
 801580c:	4629      	mov	r1, r5
 801580e:	6833      	ldr	r3, [r6, #0]
 8015810:	007f      	lsls	r7, r7, #1
 8015812:	8894      	ldrh	r4, [r2, #4]
 8015814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015816:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801581a:	7a97      	ldrb	r7, [r2, #10]
 801581c:	4307      	orrs	r7, r0
 801581e:	4630      	mov	r0, r6
 8015820:	4798      	blx	r3
 8015822:	4438      	add	r0, r7
 8015824:	4480      	add	r8, r0
 8015826:	fa1f f888 	uxth.w	r8, r8
 801582a:	e7e5      	b.n	80157f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801582c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801582c:	b508      	push	{r3, lr}
 801582e:	6803      	ldr	r3, [r0, #0]
 8015830:	68db      	ldr	r3, [r3, #12]
 8015832:	4798      	blx	r3
 8015834:	b128      	cbz	r0, 8015842 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015836:	7b43      	ldrb	r3, [r0, #13]
 8015838:	7a80      	ldrb	r0, [r0, #10]
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015840:	4318      	orrs	r0, r3
 8015842:	bd08      	pop	{r3, pc}

08015844 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015844:	b40e      	push	{r1, r2, r3}
 8015846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015848:	b09e      	sub	sp, #120	@ 0x78
 801584a:	4605      	mov	r5, r0
 801584c:	ab23      	add	r3, sp, #140	@ 0x8c
 801584e:	a805      	add	r0, sp, #20
 8015850:	f853 4b04 	ldr.w	r4, [r3], #4
 8015854:	9303      	str	r3, [sp, #12]
 8015856:	f001 f8e7 	bl	8016a28 <_ZN8touchgfx12TextProviderC1Ev>
 801585a:	682b      	ldr	r3, [r5, #0]
 801585c:	4628      	mov	r0, r5
 801585e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015860:	4798      	blx	r3
 8015862:	682b      	ldr	r3, [r5, #0]
 8015864:	4606      	mov	r6, r0
 8015866:	4628      	mov	r0, r5
 8015868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801586a:	4798      	blx	r3
 801586c:	4633      	mov	r3, r6
 801586e:	4621      	mov	r1, r4
 8015870:	ae1e      	add	r6, sp, #120	@ 0x78
 8015872:	2400      	movs	r4, #0
 8015874:	9000      	str	r0, [sp, #0]
 8015876:	9a03      	ldr	r2, [sp, #12]
 8015878:	a805      	add	r0, sp, #20
 801587a:	f001 f928 	bl	8016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801587e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8015882:	462a      	mov	r2, r5
 8015884:	4633      	mov	r3, r6
 8015886:	4621      	mov	r1, r4
 8015888:	a805      	add	r0, sp, #20
 801588a:	f001 fc43 	bl	8017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801588e:	b300      	cbz	r0, 80158d2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015890:	280a      	cmp	r0, #10
 8015892:	d01a      	beq.n	80158ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015894:	9f04      	ldr	r7, [sp, #16]
 8015896:	b1c7      	cbz	r7, 80158ca <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015898:	7b78      	ldrb	r0, [r7, #13]
 801589a:	7a3b      	ldrb	r3, [r7, #8]
 801589c:	00c1      	lsls	r1, r0, #3
 801589e:	88ea      	ldrh	r2, [r5, #6]
 80158a0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80158a4:	4319      	orrs	r1, r3
 80158a6:	0643      	lsls	r3, r0, #25
 80158a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80158ac:	bf48      	it	mi
 80158ae:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80158b2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80158b6:	bf48      	it	mi
 80158b8:	b219      	sxthmi	r1, r3
 80158ba:	79fb      	ldrb	r3, [r7, #7]
 80158bc:	4303      	orrs	r3, r0
 80158be:	4413      	add	r3, r2
 80158c0:	1a5b      	subs	r3, r3, r1
 80158c2:	b21b      	sxth	r3, r3
 80158c4:	429c      	cmp	r4, r3
 80158c6:	bfb8      	it	lt
 80158c8:	461c      	movlt	r4, r3
 80158ca:	4633      	mov	r3, r6
 80158cc:	462a      	mov	r2, r5
 80158ce:	2100      	movs	r1, #0
 80158d0:	e7da      	b.n	8015888 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80158d2:	b2a0      	uxth	r0, r4
 80158d4:	b01e      	add	sp, #120	@ 0x78
 80158d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80158da:	b003      	add	sp, #12
 80158dc:	4770      	bx	lr

080158de <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80158de:	7a43      	ldrb	r3, [r0, #9]
 80158e0:	8880      	ldrh	r0, [r0, #4]
 80158e2:	4418      	add	r0, r3
 80158e4:	b280      	uxth	r0, r0
 80158e6:	4770      	bx	lr

080158e8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80158e8:	6803      	ldr	r3, [r0, #0]
 80158ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80158ec:	4718      	bx	r3

080158ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80158ee:	b40e      	push	{r1, r2, r3}
 80158f0:	b570      	push	{r4, r5, r6, lr}
 80158f2:	b09d      	sub	sp, #116	@ 0x74
 80158f4:	4604      	mov	r4, r0
 80158f6:	ab21      	add	r3, sp, #132	@ 0x84
 80158f8:	a803      	add	r0, sp, #12
 80158fa:	f853 5b04 	ldr.w	r5, [r3], #4
 80158fe:	9302      	str	r3, [sp, #8]
 8015900:	f001 f892 	bl	8016a28 <_ZN8touchgfx12TextProviderC1Ev>
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	4620      	mov	r0, r4
 8015908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801590a:	4798      	blx	r3
 801590c:	6823      	ldr	r3, [r4, #0]
 801590e:	4606      	mov	r6, r0
 8015910:	4620      	mov	r0, r4
 8015912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015914:	2401      	movs	r4, #1
 8015916:	4798      	blx	r3
 8015918:	4633      	mov	r3, r6
 801591a:	9000      	str	r0, [sp, #0]
 801591c:	4629      	mov	r1, r5
 801591e:	9a02      	ldr	r2, [sp, #8]
 8015920:	a803      	add	r0, sp, #12
 8015922:	f001 f8d4 	bl	8016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015926:	a803      	add	r0, sp, #12
 8015928:	f001 fcc0 	bl	80172ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801592c:	b2a3      	uxth	r3, r4
 801592e:	b138      	cbz	r0, 8015940 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015930:	280a      	cmp	r0, #10
 8015932:	a803      	add	r0, sp, #12
 8015934:	bf04      	itt	eq
 8015936:	3301      	addeq	r3, #1
 8015938:	b21c      	sxtheq	r4, r3
 801593a:	f001 fcb7 	bl	80172ac <_ZN8touchgfx12TextProvider11getNextCharEv>
 801593e:	e7f5      	b.n	801592c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015940:	4618      	mov	r0, r3
 8015942:	b01d      	add	sp, #116	@ 0x74
 8015944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015948:	b003      	add	sp, #12
 801594a:	4770      	bx	lr

0801594c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801594c:	b40e      	push	{r1, r2, r3}
 801594e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015950:	b09e      	sub	sp, #120	@ 0x78
 8015952:	4604      	mov	r4, r0
 8015954:	ab23      	add	r3, sp, #140	@ 0x8c
 8015956:	a805      	add	r0, sp, #20
 8015958:	f853 5b04 	ldr.w	r5, [r3], #4
 801595c:	9303      	str	r3, [sp, #12]
 801595e:	f001 f863 	bl	8016a28 <_ZN8touchgfx12TextProviderC1Ev>
 8015962:	6823      	ldr	r3, [r4, #0]
 8015964:	4620      	mov	r0, r4
 8015966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015968:	4798      	blx	r3
 801596a:	6823      	ldr	r3, [r4, #0]
 801596c:	4606      	mov	r6, r0
 801596e:	4620      	mov	r0, r4
 8015970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015972:	4798      	blx	r3
 8015974:	4633      	mov	r3, r6
 8015976:	4629      	mov	r1, r5
 8015978:	9000      	str	r0, [sp, #0]
 801597a:	9a03      	ldr	r2, [sp, #12]
 801597c:	a805      	add	r0, sp, #20
 801597e:	f001 f8a6 	bl	8016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015982:	ad1e      	add	r5, sp, #120	@ 0x78
 8015984:	2100      	movs	r1, #0
 8015986:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801598a:	4622      	mov	r2, r4
 801598c:	a805      	add	r0, sp, #20
 801598e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015992:	462b      	mov	r3, r5
 8015994:	f001 fbbe 	bl	8017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015998:	b1d8      	cbz	r0, 80159d2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801599a:	280a      	cmp	r0, #10
 801599c:	d012      	beq.n	80159c4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801599e:	9804      	ldr	r0, [sp, #16]
 80159a0:	b180      	cbz	r0, 80159c4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80159a2:	7b47      	ldrb	r7, [r0, #13]
 80159a4:	88e2      	ldrh	r2, [r4, #6]
 80159a6:	00fb      	lsls	r3, r7, #3
 80159a8:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80159ac:	7a03      	ldrb	r3, [r0, #8]
 80159ae:	430b      	orrs	r3, r1
 80159b0:	0679      	lsls	r1, r7, #25
 80159b2:	bf44      	itt	mi
 80159b4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80159b8:	b21b      	sxthmi	r3, r3
 80159ba:	1ad3      	subs	r3, r2, r3
 80159bc:	b21b      	sxth	r3, r3
 80159be:	429e      	cmp	r6, r3
 80159c0:	bfa8      	it	ge
 80159c2:	461e      	movge	r6, r3
 80159c4:	462b      	mov	r3, r5
 80159c6:	4622      	mov	r2, r4
 80159c8:	2100      	movs	r1, #0
 80159ca:	a805      	add	r0, sp, #20
 80159cc:	f001 fba2 	bl	8017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80159d0:	e7e2      	b.n	8015998 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80159d2:	4630      	mov	r0, r6
 80159d4:	b01e      	add	sp, #120	@ 0x78
 80159d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80159da:	b003      	add	sp, #12
 80159dc:	4770      	bx	lr

080159de <_ZNK8touchgfx8Drawable10invalidateEv>:
 80159de:	b513      	push	{r0, r1, r4, lr}
 80159e0:	6803      	ldr	r3, [r0, #0]
 80159e2:	2400      	movs	r4, #0
 80159e4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80159e8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80159ec:	f8ad 1004 	strh.w	r1, [sp, #4]
 80159f0:	4669      	mov	r1, sp
 80159f2:	691b      	ldr	r3, [r3, #16]
 80159f4:	9400      	str	r4, [sp, #0]
 80159f6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80159fa:	4798      	blx	r3
 80159fc:	b002      	add	sp, #8
 80159fe:	bd10      	pop	{r4, pc}

08015a00 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015a00:	b538      	push	{r3, r4, r5, lr}
 8015a02:	680b      	ldr	r3, [r1, #0]
 8015a04:	460c      	mov	r4, r1
 8015a06:	4605      	mov	r5, r0
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	4798      	blx	r3
 8015a0c:	6823      	ldr	r3, [r4, #0]
 8015a0e:	4620      	mov	r0, r4
 8015a10:	4629      	mov	r1, r5
 8015a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a14:	4798      	blx	r3
 8015a16:	4628      	mov	r0, r5
 8015a18:	bd38      	pop	{r3, r4, r5, pc}

08015a1a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015a1a:	b410      	push	{r4}
 8015a1c:	880a      	ldrh	r2, [r1, #0]
 8015a1e:	8884      	ldrh	r4, [r0, #4]
 8015a20:	4422      	add	r2, r4
 8015a22:	800a      	strh	r2, [r1, #0]
 8015a24:	884a      	ldrh	r2, [r1, #2]
 8015a26:	88c4      	ldrh	r4, [r0, #6]
 8015a28:	4422      	add	r2, r4
 8015a2a:	804a      	strh	r2, [r1, #2]
 8015a2c:	6940      	ldr	r0, [r0, #20]
 8015a2e:	b120      	cbz	r0, 8015a3a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015a30:	6803      	ldr	r3, [r0, #0]
 8015a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a38:	4718      	bx	r3
 8015a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a3e:	4770      	bx	lr

08015a40 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015a40:	b570      	push	{r4, r5, r6, lr}
 8015a42:	8882      	ldrh	r2, [r0, #4]
 8015a44:	460c      	mov	r4, r1
 8015a46:	880b      	ldrh	r3, [r1, #0]
 8015a48:	4605      	mov	r5, r0
 8015a4a:	4413      	add	r3, r2
 8015a4c:	800b      	strh	r3, [r1, #0]
 8015a4e:	884b      	ldrh	r3, [r1, #2]
 8015a50:	88c2      	ldrh	r2, [r0, #6]
 8015a52:	4413      	add	r3, r2
 8015a54:	804b      	strh	r3, [r1, #2]
 8015a56:	1d01      	adds	r1, r0, #4
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f7f9 f995 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8015a5e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	dd0b      	ble.n	8015a7e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015a66:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	dd07      	ble.n	8015a7e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015a6e:	6968      	ldr	r0, [r5, #20]
 8015a70:	b128      	cbz	r0, 8015a7e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8015a72:	6803      	ldr	r3, [r0, #0]
 8015a74:	4621      	mov	r1, r4
 8015a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015a7c:	4718      	bx	r3
 8015a7e:	bd70      	pop	{r4, r5, r6, pc}

08015a80 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8015a80:	b570      	push	{r4, r5, r6, lr}
 8015a82:	8882      	ldrh	r2, [r0, #4]
 8015a84:	460c      	mov	r4, r1
 8015a86:	880b      	ldrh	r3, [r1, #0]
 8015a88:	4605      	mov	r5, r0
 8015a8a:	4413      	add	r3, r2
 8015a8c:	800b      	strh	r3, [r1, #0]
 8015a8e:	884b      	ldrh	r3, [r1, #2]
 8015a90:	88c2      	ldrh	r2, [r0, #6]
 8015a92:	4413      	add	r3, r2
 8015a94:	804b      	strh	r3, [r1, #2]
 8015a96:	1d01      	adds	r1, r0, #4
 8015a98:	4620      	mov	r0, r4
 8015a9a:	f7f9 f975 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8015a9e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	dd19      	ble.n	8015ada <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015aa6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	dd15      	ble.n	8015ada <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015aae:	6968      	ldr	r0, [r5, #20]
 8015ab0:	b128      	cbz	r0, 8015abe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8015ab2:	6803      	ldr	r3, [r0, #0]
 8015ab4:	4621      	mov	r1, r4
 8015ab6:	691b      	ldr	r3, [r3, #16]
 8015ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015abc:	4718      	bx	r3
 8015abe:	4b07      	ldr	r3, [pc, #28]	@ (8015adc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	3304      	adds	r3, #4
 8015ac4:	429d      	cmp	r5, r3
 8015ac6:	d108      	bne.n	8015ada <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8015ac8:	f7fe fdd0 	bl	801466c <_ZN8touchgfx11Application11getInstanceEv>
 8015acc:	6803      	ldr	r3, [r0, #0]
 8015ace:	6821      	ldr	r1, [r4, #0]
 8015ad0:	6862      	ldr	r2, [r4, #4]
 8015ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ad8:	4718      	bx	r3
 8015ada:	bd70      	pop	{r4, r5, r6, pc}
 8015adc:	240253bc 	.word	0x240253bc

08015ae0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8015ae0:	b570      	push	{r4, r5, r6, lr}
 8015ae2:	4604      	mov	r4, r0
 8015ae4:	4616      	mov	r6, r2
 8015ae6:	460d      	mov	r5, r1
 8015ae8:	b901      	cbnz	r1, 8015aec <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8015aea:	b192      	cbz	r2, 8015b12 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8015aec:	6823      	ldr	r3, [r4, #0]
 8015aee:	4620      	mov	r0, r4
 8015af0:	699b      	ldr	r3, [r3, #24]
 8015af2:	4798      	blx	r3
 8015af4:	88e2      	ldrh	r2, [r4, #6]
 8015af6:	88a1      	ldrh	r1, [r4, #4]
 8015af8:	4620      	mov	r0, r4
 8015afa:	4432      	add	r2, r6
 8015afc:	4429      	add	r1, r5
 8015afe:	b212      	sxth	r2, r2
 8015b00:	b209      	sxth	r1, r1
 8015b02:	f7ee fcf2 	bl	80044ea <_ZN8touchgfx8Drawable5setXYEss>
 8015b06:	6823      	ldr	r3, [r4, #0]
 8015b08:	4620      	mov	r0, r4
 8015b0a:	699b      	ldr	r3, [r3, #24]
 8015b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b10:	4718      	bx	r3
 8015b12:	bd70      	pop	{r4, r5, r6, pc}

08015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8015b14:	b510      	push	{r4, lr}
 8015b16:	2300      	movs	r3, #0
 8015b18:	4604      	mov	r4, r0
 8015b1a:	4608      	mov	r0, r1
 8015b1c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8015b20:	8023      	strh	r3, [r4, #0]
 8015b22:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015b26:	8063      	strh	r3, [r4, #2]
 8015b28:	6803      	ldr	r3, [r0, #0]
 8015b2a:	80a1      	strh	r1, [r4, #4]
 8015b2c:	4621      	mov	r1, r4
 8015b2e:	80e2      	strh	r2, [r4, #6]
 8015b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b32:	4798      	blx	r3
 8015b34:	4620      	mov	r0, r4
 8015b36:	bd10      	pop	{r4, pc}

08015b38 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8015b38:	4770      	bx	lr

08015b3a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8015b3a:	b510      	push	{r4, lr}
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	211c      	movs	r1, #28
 8015b40:	f00c fe70 	bl	8022824 <_ZdlPvj>
 8015b44:	4620      	mov	r0, r4
 8015b46:	bd10      	pop	{r4, pc}

08015b48 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8015b48:	4a04      	ldr	r2, [pc, #16]	@ (8015b5c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8015b4a:	6002      	str	r2, [r0, #0]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8015b52:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8015b56:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8015b5a:	4770      	bx	lr
 8015b5c:	08026f70 	.word	0x08026f70

08015b60 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8015b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b64:	4604      	mov	r4, r0
 8015b66:	b087      	sub	sp, #28
 8015b68:	8b45      	ldrh	r5, [r0, #26]
 8015b6a:	f8b2 c000 	ldrh.w	ip, [r2]
 8015b6e:	9105      	str	r1, [sp, #20]
 8015b70:	1c68      	adds	r0, r5, #1
 8015b72:	68e1      	ldr	r1, [r4, #12]
 8015b74:	9203      	str	r2, [sp, #12]
 8015b76:	b280      	uxth	r0, r0
 8015b78:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015b7c:	f01c 0501 	ands.w	r5, ip, #1
 8015b80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015b84:	9502      	str	r5, [sp, #8]
 8015b86:	d07d      	beq.n	8015c84 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x124>
 8015b88:	ee07 2a90 	vmov	s15, r2
 8015b8c:	8360      	strh	r0, [r4, #26]
 8015b8e:	f04f 0e00 	mov.w	lr, #0
 8015b92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015b96:	ee06 ea10 	vmov	s12, lr
 8015b9a:	edc1 6a00 	vstr	s13, [r1]
 8015b9e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015ba2:	8b61      	ldrh	r1, [r4, #26]
 8015ba4:	ee07 2a10 	vmov	s14, r2
 8015ba8:	68e2      	ldr	r2, [r4, #12]
 8015baa:	1c48      	adds	r0, r1, #1
 8015bac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015bb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015bb4:	8360      	strh	r0, [r4, #26]
 8015bb6:	ed82 7a00 	vstr	s14, [r2]
 8015bba:	8b21      	ldrh	r1, [r4, #24]
 8015bbc:	2501      	movs	r5, #1
 8015bbe:	68a2      	ldr	r2, [r4, #8]
 8015bc0:	3304      	adds	r3, #4
 8015bc2:	1c48      	adds	r0, r1, #1
 8015bc4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015bc8:	9300      	str	r3, [sp, #0]
 8015bca:	46aa      	mov	sl, r5
 8015bcc:	8320      	strh	r0, [r4, #24]
 8015bce:	462e      	mov	r6, r5
 8015bd0:	5455      	strb	r5, [r2, r1]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	ee07 2a90 	vmov	s15, r2
 8015bd8:	4613      	mov	r3, r2
 8015bda:	4611      	mov	r1, r2
 8015bdc:	9201      	str	r2, [sp, #4]
 8015bde:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8015be2:	9805      	ldr	r0, [sp, #20]
 8015be4:	f108 0701 	add.w	r7, r8, #1
 8015be8:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8015bec:	42a8      	cmp	r0, r5
 8015bee:	b2bf      	uxth	r7, r7
 8015bf0:	eb0b 0908 	add.w	r9, fp, r8
 8015bf4:	f340 80db 	ble.w	8015dae <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x24e>
 8015bf8:	fa4c f906 	asr.w	r9, ip, r6
 8015bfc:	f009 0901 	and.w	r9, r9, #1
 8015c00:	fa5f f389 	uxtb.w	r3, r9
 8015c04:	9304      	str	r3, [sp, #16]
 8015c06:	9b00      	ldr	r3, [sp, #0]
 8015c08:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015c0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015c10:	f1b9 0f00 	cmp.w	r9, #0
 8015c14:	d07d      	beq.n	8015d12 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1b2>
 8015c16:	ee05 1a10 	vmov	s10, r1
 8015c1a:	8327      	strh	r7, [r4, #24]
 8015c1c:	eef8 4ac5 	vcvt.f32.s32	s9, s10
 8015c20:	ee05 3a10 	vmov	s10, r3
 8015c24:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015c28:	f1ba 0f00 	cmp.w	sl, #0
 8015c2c:	d050      	beq.n	8015cd0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x170>
 8015c2e:	f04f 0002 	mov.w	r0, #2
 8015c32:	f80b 0008 	strb.w	r0, [fp, r8]
 8015c36:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015c3a:	68e7      	ldr	r7, [r4, #12]
 8015c3c:	f108 0901 	add.w	r9, r8, #1
 8015c40:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015c44:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015c48:	edc7 4a00 	vstr	s9, [r7]
 8015c4c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015c50:	68e7      	ldr	r7, [r4, #12]
 8015c52:	f108 0901 	add.w	r9, r8, #1
 8015c56:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015c5a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015c5e:	ed87 5a00 	vstr	s10, [r7]
 8015c62:	3601      	adds	r6, #1
 8015c64:	2e10      	cmp	r6, #16
 8015c66:	d106      	bne.n	8015c76 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x116>
 8015c68:	9e01      	ldr	r6, [sp, #4]
 8015c6a:	9803      	ldr	r0, [sp, #12]
 8015c6c:	3601      	adds	r6, #1
 8015c6e:	9601      	str	r6, [sp, #4]
 8015c70:	f830 c016 	ldrh.w	ip, [r0, r6, lsl #1]
 8015c74:	2600      	movs	r6, #0
 8015c76:	9800      	ldr	r0, [sp, #0]
 8015c78:	3501      	adds	r5, #1
 8015c7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015c7e:	3004      	adds	r0, #4
 8015c80:	9000      	str	r0, [sp, #0]
 8015c82:	e7ac      	b.n	8015bde <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x7e>
 8015c84:	ee06 2a10 	vmov	s12, r2
 8015c88:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8015c8c:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8015c90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015c94:	ee16 5a10 	vmov	r5, s12
 8015c98:	442a      	add	r2, r5
 8015c9a:	ee06 2a90 	vmov	s13, r2
 8015c9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015ca2:	8360      	strh	r0, [r4, #26]
 8015ca4:	4472      	add	r2, lr
 8015ca6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015caa:	ee07 2a10 	vmov	s14, r2
 8015cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8015cb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015cb6:	edc1 6a00 	vstr	s13, [r1]
 8015cba:	8b61      	ldrh	r1, [r4, #26]
 8015cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015cc0:	68e2      	ldr	r2, [r4, #12]
 8015cc2:	1c48      	adds	r0, r1, #1
 8015cc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015cc8:	8360      	strh	r0, [r4, #26]
 8015cca:	ed82 7a00 	vstr	s14, [r2]
 8015cce:	e774      	b.n	8015bba <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x5a>
 8015cd0:	f04f 0005 	mov.w	r0, #5
 8015cd4:	eeb8 4ae7 	vcvt.f32.s32	s8, s15
 8015cd8:	f80b 0008 	strb.w	r0, [fp, r8]
 8015cdc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015ce0:	68e7      	ldr	r7, [r4, #12]
 8015ce2:	f108 0901 	add.w	r9, r8, #1
 8015ce6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015cea:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015cee:	ed87 4a00 	vstr	s8, [r7]
 8015cf2:	ee04 2a10 	vmov	s8, r2
 8015cf6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015cfa:	68e7      	ldr	r7, [r4, #12]
 8015cfc:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8015d00:	f108 0901 	add.w	r9, r8, #1
 8015d04:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015d08:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015d0c:	ed87 4a00 	vstr	s8, [r7]
 8015d10:	e791      	b.n	8015c36 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xd6>
 8015d12:	f1ba 0f00 	cmp.w	sl, #0
 8015d16:	d146      	bne.n	8015da6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x246>
 8015d18:	f04f 0005 	mov.w	r0, #5
 8015d1c:	8327      	strh	r7, [r4, #24]
 8015d1e:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015d22:	f80b 0008 	strb.w	r0, [fp, r8]
 8015d26:	ee17 0a90 	vmov	r0, s15
 8015d2a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015d2e:	68e7      	ldr	r7, [r4, #12]
 8015d30:	4408      	add	r0, r1
 8015d32:	f108 0901 	add.w	r9, r8, #1
 8015d36:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015d3a:	ee07 0a90 	vmov	s15, r0
 8015d3e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015d42:	ed87 5a00 	vstr	s10, [r7]
 8015d46:	ee05 2a10 	vmov	s10, r2
 8015d4a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d52:	68e7      	ldr	r7, [r4, #12]
 8015d54:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015d58:	f108 0901 	add.w	r9, r8, #1
 8015d5c:	441a      	add	r2, r3
 8015d5e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015d62:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015d66:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015d6a:	ed87 5a00 	vstr	s10, [r7]
 8015d6e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015d72:	68e7      	ldr	r7, [r4, #12]
 8015d74:	f108 0901 	add.w	r9, r8, #1
 8015d78:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015d7c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015d80:	edc7 7a00 	vstr	s15, [r7]
 8015d84:	ee07 2a90 	vmov	s15, r2
 8015d88:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8015d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015d90:	68e7      	ldr	r7, [r4, #12]
 8015d92:	f108 0901 	add.w	r9, r8, #1
 8015d96:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015d9a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015d9e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8015da2:	edc7 7a00 	vstr	s15, [r7]
 8015da6:	461a      	mov	r2, r3
 8015da8:	ee07 1a90 	vmov	s15, r1
 8015dac:	e759      	b.n	8015c62 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8015dae:	f1ba 0f00 	cmp.w	sl, #0
 8015db2:	d045      	beq.n	8015e40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015db4:	ee05 1a90 	vmov	s11, r1
 8015db8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015dbc:	eef4 5a66 	vcmp.f32	s11, s13
 8015dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dc4:	d108      	bne.n	8015dd8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x278>
 8015dc6:	ee05 3a90 	vmov	s11, r3
 8015dca:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015dce:	eef4 5a47 	vcmp.f32	s11, s14
 8015dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dd6:	d033      	beq.n	8015e40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2e0>
 8015dd8:	9b02      	ldr	r3, [sp, #8]
 8015dda:	8327      	strh	r7, [r4, #24]
 8015ddc:	b1b3      	cbz	r3, 8015e0c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2ac>
 8015dde:	2302      	movs	r3, #2
 8015de0:	f889 3000 	strb.w	r3, [r9]
 8015de4:	8b62      	ldrh	r2, [r4, #26]
 8015de6:	68e3      	ldr	r3, [r4, #12]
 8015de8:	1c51      	adds	r1, r2, #1
 8015dea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015dee:	8361      	strh	r1, [r4, #26]
 8015df0:	edc3 6a00 	vstr	s13, [r3]
 8015df4:	8b62      	ldrh	r2, [r4, #26]
 8015df6:	68e3      	ldr	r3, [r4, #12]
 8015df8:	1c51      	adds	r1, r2, #1
 8015dfa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015dfe:	8361      	strh	r1, [r4, #26]
 8015e00:	ed83 7a00 	vstr	s14, [r3]
 8015e04:	9800      	ldr	r0, [sp, #0]
 8015e06:	b007      	add	sp, #28
 8015e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0c:	2305      	movs	r3, #5
 8015e0e:	f889 3000 	strb.w	r3, [r9]
 8015e12:	8b62      	ldrh	r2, [r4, #26]
 8015e14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015e18:	68e3      	ldr	r3, [r4, #12]
 8015e1a:	ee07 ea90 	vmov	s15, lr
 8015e1e:	1c51      	adds	r1, r2, #1
 8015e20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e28:	8361      	strh	r1, [r4, #26]
 8015e2a:	ed83 6a00 	vstr	s12, [r3]
 8015e2e:	8b62      	ldrh	r2, [r4, #26]
 8015e30:	68e3      	ldr	r3, [r4, #12]
 8015e32:	1c51      	adds	r1, r2, #1
 8015e34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015e38:	8361      	strh	r1, [r4, #26]
 8015e3a:	edc3 7a00 	vstr	s15, [r3]
 8015e3e:	e7d1      	b.n	8015de4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8015e40:	ee05 2a90 	vmov	s11, r2
 8015e44:	2305      	movs	r3, #5
 8015e46:	9902      	ldr	r1, [sp, #8]
 8015e48:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8015e4c:	8327      	strh	r7, [r4, #24]
 8015e4e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015e52:	f889 3000 	strb.w	r3, [r9]
 8015e56:	b181      	cbz	r1, 8015e7a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x31a>
 8015e58:	8b62      	ldrh	r2, [r4, #26]
 8015e5a:	68e3      	ldr	r3, [r4, #12]
 8015e5c:	1c51      	adds	r1, r2, #1
 8015e5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015e62:	8361      	strh	r1, [r4, #26]
 8015e64:	ed83 5a00 	vstr	s10, [r3]
 8015e68:	8b62      	ldrh	r2, [r4, #26]
 8015e6a:	68e3      	ldr	r3, [r4, #12]
 8015e6c:	1c51      	adds	r1, r2, #1
 8015e6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015e72:	8361      	strh	r1, [r4, #26]
 8015e74:	edc3 5a00 	vstr	s11, [r3]
 8015e78:	e7b4      	b.n	8015de4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x284>
 8015e7a:	8b65      	ldrh	r5, [r4, #26]
 8015e7c:	ee17 0a90 	vmov	r0, s15
 8015e80:	68e1      	ldr	r1, [r4, #12]
 8015e82:	4472      	add	r2, lr
 8015e84:	1c6e      	adds	r6, r5, #1
 8015e86:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015e8a:	8366      	strh	r6, [r4, #26]
 8015e8c:	ed81 5a00 	vstr	s10, [r1]
 8015e90:	8b65      	ldrh	r5, [r4, #26]
 8015e92:	68e1      	ldr	r1, [r4, #12]
 8015e94:	1c6e      	adds	r6, r5, #1
 8015e96:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015e9a:	8366      	strh	r6, [r4, #26]
 8015e9c:	edc1 5a00 	vstr	s11, [r1]
 8015ea0:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8015ea4:	8b65      	ldrh	r5, [r4, #26]
 8015ea6:	68e1      	ldr	r1, [r4, #12]
 8015ea8:	1c6e      	adds	r6, r5, #1
 8015eaa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8015eae:	ee16 5a10 	vmov	r5, s12
 8015eb2:	8366      	strh	r6, [r4, #26]
 8015eb4:	4428      	add	r0, r5
 8015eb6:	ee07 0a90 	vmov	s15, r0
 8015eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ebe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015ec2:	edc1 7a00 	vstr	s15, [r1]
 8015ec6:	ee07 2a90 	vmov	s15, r2
 8015eca:	8b61      	ldrh	r1, [r4, #26]
 8015ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ed0:	68e5      	ldr	r5, [r4, #12]
 8015ed2:	1c4e      	adds	r6, r1, #1
 8015ed4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8015ed8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015edc:	8366      	strh	r6, [r4, #26]
 8015ede:	edc1 7a00 	vstr	s15, [r1]
 8015ee2:	8b22      	ldrh	r2, [r4, #24]
 8015ee4:	68a1      	ldr	r1, [r4, #8]
 8015ee6:	1c55      	adds	r5, r2, #1
 8015ee8:	8325      	strh	r5, [r4, #24]
 8015eea:	548b      	strb	r3, [r1, r2]
 8015eec:	e791      	b.n	8015e12 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x2b2>
	...

08015ef0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8015ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ef4:	4604      	mov	r4, r0
 8015ef6:	b08e      	sub	sp, #56	@ 0x38
 8015ef8:	4699      	mov	r9, r3
 8015efa:	4688      	mov	r8, r1
 8015efc:	4615      	mov	r5, r2
 8015efe:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8015f00:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8015f04:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015f06:	f7ed fed5 	bl	8003cb4 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8015f0a:	6060      	str	r0, [r4, #4]
 8015f0c:	f1b9 0f00 	cmp.w	r9, #0
 8015f10:	f000 80e8 	beq.w	80160e4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015f14:	2800      	cmp	r0, #0
 8015f16:	f000 80e5 	beq.w	80160e4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8015f1a:	a805      	add	r0, sp, #20
 8015f1c:	f000 f8f9 	bl	8016112 <_ZN8touchgfx9Matrix3x3C1Ev>
 8015f20:	6833      	ldr	r3, [r6, #0]
 8015f22:	4630      	mov	r0, r6
 8015f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015f26:	4798      	blx	r3
 8015f28:	a805      	add	r0, sp, #20
 8015f2a:	eef0 0a40 	vmov.f32	s1, s0
 8015f2e:	f000 f8f4 	bl	801611a <_ZN8touchgfx9Matrix3x35scaleEff>
 8015f32:	6860      	ldr	r0, [r4, #4]
 8015f34:	f1ba 0f03 	cmp.w	sl, #3
 8015f38:	d83b      	bhi.n	8015fb2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8015f3a:	e8df f00a 	tbb	[pc, sl]
 8015f3e:	1002      	.short	0x1002
 8015f40:	9f71      	.short	0x9f71
 8015f42:	6803      	ldr	r3, [r0, #0]
 8015f44:	462a      	mov	r2, r5
 8015f46:	4641      	mov	r1, r8
 8015f48:	689b      	ldr	r3, [r3, #8]
 8015f4a:	4798      	blx	r3
 8015f4c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8015f50:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015f54:	ee07 7a90 	vmov	s15, r7
 8015f58:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015f5c:	e026      	b.n	8015fac <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8015f5e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8015f62:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8015f66:	8869      	ldrh	r1, [r5, #2]
 8015f68:	1a9b      	subs	r3, r3, r2
 8015f6a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015f6e:	aa03      	add	r2, sp, #12
 8015f70:	1a5b      	subs	r3, r3, r1
 8015f72:	4641      	mov	r1, r8
 8015f74:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015f78:	882b      	ldrh	r3, [r5, #0]
 8015f7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015f7e:	88ab      	ldrh	r3, [r5, #4]
 8015f80:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015f84:	6803      	ldr	r3, [r0, #0]
 8015f86:	689b      	ldr	r3, [r3, #8]
 8015f88:	4798      	blx	r3
 8015f8a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80160ec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8015f8e:	a805      	add	r0, sp, #20
 8015f90:	f000 f8e8 	bl	8016164 <_ZN8touchgfx9Matrix3x36rotateEf>
 8015f94:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8015f98:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015f9a:	ee07 7a90 	vmov	s15, r7
 8015f9e:	1a9b      	subs	r3, r3, r2
 8015fa0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8015fa4:	ee00 3a10 	vmov	s0, r3
 8015fa8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8015fac:	a805      	add	r0, sp, #20
 8015fae:	f000 f927 	bl	8016200 <_ZN8touchgfx9Matrix3x39translateEff>
 8015fb2:	6860      	ldr	r0, [r4, #4]
 8015fb4:	a905      	add	r1, sp, #20
 8015fb6:	2500      	movs	r5, #0
 8015fb8:	f109 0602 	add.w	r6, r9, #2
 8015fbc:	6803      	ldr	r3, [r0, #0]
 8015fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015fc0:	4798      	blx	r3
 8015fc2:	6860      	ldr	r0, [r4, #4]
 8015fc4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8015fc6:	6803      	ldr	r3, [r0, #0]
 8015fc8:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8015fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fce:	4798      	blx	r3
 8015fd0:	6860      	ldr	r0, [r4, #4]
 8015fd2:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8015fd6:	6803      	ldr	r3, [r0, #0]
 8015fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fda:	4798      	blx	r3
 8015fdc:	6860      	ldr	r0, [r4, #4]
 8015fde:	2101      	movs	r1, #1
 8015fe0:	6803      	ldr	r3, [r0, #0]
 8015fe2:	68db      	ldr	r3, [r3, #12]
 8015fe4:	4798      	blx	r3
 8015fe6:	f8b9 7000 	ldrh.w	r7, [r9]
 8015fea:	f104 0310 	add.w	r3, r4, #16
 8015fee:	61a5      	str	r5, [r4, #24]
 8015ff0:	f104 0208 	add.w	r2, r4, #8
 8015ff4:	f104 0114 	add.w	r1, r4, #20
 8015ff8:	f104 000c 	add.w	r0, r4, #12
 8015ffc:	f7ee ff22 	bl	8004e44 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8016000:	42af      	cmp	r7, r5
 8016002:	dd60      	ble.n	80160c6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8016004:	8831      	ldrh	r1, [r6, #0]
 8016006:	1cb2      	adds	r2, r6, #2
 8016008:	4620      	mov	r0, r4
 801600a:	3501      	adds	r5, #1
 801600c:	f101 030f 	add.w	r3, r1, #15
 8016010:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8016014:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016018:	f7ff fda2 	bl	8015b60 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801601c:	4606      	mov	r6, r0
 801601e:	e7ef      	b.n	8016000 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8016020:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016024:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8016028:	8829      	ldrh	r1, [r5, #0]
 801602a:	1a9b      	subs	r3, r3, r2
 801602c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016030:	aa03      	add	r2, sp, #12
 8016032:	1a5b      	subs	r3, r3, r1
 8016034:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016038:	886d      	ldrh	r5, [r5, #2]
 801603a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801603e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8016042:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016046:	1a5b      	subs	r3, r3, r1
 8016048:	4641      	mov	r1, r8
 801604a:	1b5b      	subs	r3, r3, r5
 801604c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016050:	6803      	ldr	r3, [r0, #0]
 8016052:	689b      	ldr	r3, [r3, #8]
 8016054:	4798      	blx	r3
 8016056:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80160f0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801605a:	a805      	add	r0, sp, #20
 801605c:	f000 f882 	bl	8016164 <_ZN8touchgfx9Matrix3x36rotateEf>
 8016060:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8016064:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016066:	1a9b      	subs	r3, r3, r2
 8016068:	ee00 3a90 	vmov	s1, r3
 801606c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8016070:	1bdb      	subs	r3, r3, r7
 8016072:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8016076:	ee00 3a10 	vmov	s0, r3
 801607a:	e795      	b.n	8015fa8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 801607c:	886b      	ldrh	r3, [r5, #2]
 801607e:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8016082:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016086:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801608a:	8829      	ldrh	r1, [r5, #0]
 801608c:	1a9b      	subs	r3, r3, r2
 801608e:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016092:	aa03      	add	r2, sp, #12
 8016094:	1a5b      	subs	r3, r3, r1
 8016096:	4641      	mov	r1, r8
 8016098:	f8ad 300e 	strh.w	r3, [sp, #14]
 801609c:	88eb      	ldrh	r3, [r5, #6]
 801609e:	f8ad 3010 	strh.w	r3, [sp, #16]
 80160a2:	6803      	ldr	r3, [r0, #0]
 80160a4:	689b      	ldr	r3, [r3, #8]
 80160a6:	4798      	blx	r3
 80160a8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80160f4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 80160ac:	a805      	add	r0, sp, #20
 80160ae:	f000 f859 	bl	8016164 <_ZN8touchgfx9Matrix3x36rotateEf>
 80160b2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80160b6:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80160ba:	1bdb      	subs	r3, r3, r7
 80160bc:	ee00 3a90 	vmov	s1, r3
 80160c0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80160c4:	e748      	b.n	8015f58 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 80160c6:	6860      	ldr	r0, [r4, #4]
 80160c8:	2100      	movs	r1, #0
 80160ca:	8b22      	ldrh	r2, [r4, #24]
 80160cc:	6803      	ldr	r3, [r0, #0]
 80160ce:	9101      	str	r1, [sp, #4]
 80160d0:	8b61      	ldrh	r1, [r4, #26]
 80160d2:	9100      	str	r1, [sp, #0]
 80160d4:	6a1d      	ldr	r5, [r3, #32]
 80160d6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80160da:	47a8      	blx	r5
 80160dc:	6860      	ldr	r0, [r4, #4]
 80160de:	6803      	ldr	r3, [r0, #0]
 80160e0:	69db      	ldr	r3, [r3, #28]
 80160e2:	4798      	blx	r3
 80160e4:	b00e      	add	sp, #56	@ 0x38
 80160e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160ea:	bf00      	nop
 80160ec:	42b40000 	.word	0x42b40000
 80160f0:	43340000 	.word	0x43340000
 80160f4:	43870000 	.word	0x43870000

080160f8 <_ZN8touchgfx9Matrix3x35resetEv>:
 80160f8:	2300      	movs	r3, #0
 80160fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80160fe:	6043      	str	r3, [r0, #4]
 8016100:	6002      	str	r2, [r0, #0]
 8016102:	6083      	str	r3, [r0, #8]
 8016104:	60c3      	str	r3, [r0, #12]
 8016106:	6102      	str	r2, [r0, #16]
 8016108:	6143      	str	r3, [r0, #20]
 801610a:	6183      	str	r3, [r0, #24]
 801610c:	61c3      	str	r3, [r0, #28]
 801610e:	6202      	str	r2, [r0, #32]
 8016110:	4770      	bx	lr

08016112 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8016112:	b508      	push	{r3, lr}
 8016114:	f7ff fff0 	bl	80160f8 <_ZN8touchgfx9Matrix3x35resetEv>
 8016118:	bd08      	pop	{r3, pc}

0801611a <_ZN8touchgfx9Matrix3x35scaleEff>:
 801611a:	edd0 7a00 	vldr	s15, [r0]
 801611e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016122:	edc0 7a00 	vstr	s15, [r0]
 8016126:	edd0 7a01 	vldr	s15, [r0, #4]
 801612a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801612e:	edc0 7a01 	vstr	s15, [r0, #4]
 8016132:	edd0 7a02 	vldr	s15, [r0, #8]
 8016136:	ee27 0a80 	vmul.f32	s0, s15, s0
 801613a:	edd0 7a03 	vldr	s15, [r0, #12]
 801613e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8016142:	ed80 0a02 	vstr	s0, [r0, #8]
 8016146:	edc0 7a03 	vstr	s15, [r0, #12]
 801614a:	edd0 7a04 	vldr	s15, [r0, #16]
 801614e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8016152:	edc0 7a04 	vstr	s15, [r0, #16]
 8016156:	edd0 7a05 	vldr	s15, [r0, #20]
 801615a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801615e:	edc0 0a05 	vstr	s1, [r0, #20]
 8016162:	4770      	bx	lr

08016164 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8016164:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80161f8 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8016168:	ee20 0a27 	vmul.f32	s0, s0, s15
 801616c:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80161fc <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8016170:	b510      	push	{r4, lr}
 8016172:	ed2d 8b02 	vpush	{d8}
 8016176:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801617a:	4604      	mov	r4, r0
 801617c:	eeb0 0a68 	vmov.f32	s0, s17
 8016180:	f00c fc86 	bl	8022a90 <cosf>
 8016184:	eeb0 8a40 	vmov.f32	s16, s0
 8016188:	eeb0 0a68 	vmov.f32	s0, s17
 801618c:	f00c fbbc 	bl	8022908 <sinf>
 8016190:	edd4 6a03 	vldr	s13, [r4, #12]
 8016194:	edd4 4a00 	vldr	s9, [r4]
 8016198:	ee60 7a66 	vnmul.f32	s15, s0, s13
 801619c:	ed94 7a04 	vldr	s14, [r4, #16]
 80161a0:	ed94 5a01 	vldr	s10, [r4, #4]
 80161a4:	ee66 6a88 	vmul.f32	s13, s13, s16
 80161a8:	edd4 5a02 	vldr	s11, [r4, #8]
 80161ac:	eee8 7a24 	vfma.f32	s15, s16, s9
 80161b0:	eee0 6a24 	vfma.f32	s13, s0, s9
 80161b4:	edc4 7a00 	vstr	s15, [r4]
 80161b8:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80161bc:	ee27 7a08 	vmul.f32	s14, s14, s16
 80161c0:	edc4 6a03 	vstr	s13, [r4, #12]
 80161c4:	eee8 7a05 	vfma.f32	s15, s16, s10
 80161c8:	eea0 7a05 	vfma.f32	s14, s0, s10
 80161cc:	edc4 7a01 	vstr	s15, [r4, #4]
 80161d0:	edd4 7a05 	vldr	s15, [r4, #20]
 80161d4:	ed84 7a04 	vstr	s14, [r4, #16]
 80161d8:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80161dc:	ee67 7a88 	vmul.f32	s15, s15, s16
 80161e0:	eea8 6a25 	vfma.f32	s12, s16, s11
 80161e4:	eee0 7a25 	vfma.f32	s15, s0, s11
 80161e8:	ecbd 8b02 	vpop	{d8}
 80161ec:	ed84 6a02 	vstr	s12, [r4, #8]
 80161f0:	edc4 7a05 	vstr	s15, [r4, #20]
 80161f4:	bd10      	pop	{r4, pc}
 80161f6:	bf00      	nop
 80161f8:	40490fdb 	.word	0x40490fdb
 80161fc:	43340000 	.word	0x43340000

08016200 <_ZN8touchgfx9Matrix3x39translateEff>:
 8016200:	ed90 6a06 	vldr	s12, [r0, #24]
 8016204:	edd0 7a00 	vldr	s15, [r0]
 8016208:	edd0 6a07 	vldr	s13, [r0, #28]
 801620c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8016210:	ed90 7a08 	vldr	s14, [r0, #32]
 8016214:	edc0 7a00 	vstr	s15, [r0]
 8016218:	edd0 7a01 	vldr	s15, [r0, #4]
 801621c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8016220:	edc0 7a01 	vstr	s15, [r0, #4]
 8016224:	edd0 7a02 	vldr	s15, [r0, #8]
 8016228:	eee7 7a00 	vfma.f32	s15, s14, s0
 801622c:	edc0 7a02 	vstr	s15, [r0, #8]
 8016230:	edd0 7a03 	vldr	s15, [r0, #12]
 8016234:	eee6 7a20 	vfma.f32	s15, s12, s1
 8016238:	edc0 7a03 	vstr	s15, [r0, #12]
 801623c:	edd0 7a04 	vldr	s15, [r0, #16]
 8016240:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8016244:	edc0 7a04 	vstr	s15, [r0, #16]
 8016248:	edd0 7a05 	vldr	s15, [r0, #20]
 801624c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8016250:	edc0 7a05 	vstr	s15, [r0, #20]
 8016254:	4770      	bx	lr

08016256 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8016256:	edd0 6a01 	vldr	s13, [r0, #4]
 801625a:	b084      	sub	sp, #16
 801625c:	edd0 7a04 	vldr	s15, [r0, #16]
 8016260:	ed90 7a03 	vldr	s14, [r0, #12]
 8016264:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8016268:	ee60 0aa6 	vmul.f32	s1, s1, s13
 801626c:	edd0 6a00 	vldr	s13, [r0]
 8016270:	eee7 7a00 	vfma.f32	s15, s14, s0
 8016274:	ed90 7a05 	vldr	s14, [r0, #20]
 8016278:	eee6 0a80 	vfma.f32	s1, s13, s0
 801627c:	ed90 0a02 	vldr	s0, [r0, #8]
 8016280:	ee30 0a80 	vadd.f32	s0, s1, s0
 8016284:	ee77 0a87 	vadd.f32	s1, s15, s14
 8016288:	b004      	add	sp, #16
 801628a:	4770      	bx	lr

0801628c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801628c:	b530      	push	{r4, r5, lr}
 801628e:	8083      	strh	r3, [r0, #4]
 8016290:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016294:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8016298:	80c3      	strh	r3, [r0, #6]
 801629a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801629e:	6141      	str	r1, [r0, #20]
 80162a0:	7203      	strb	r3, [r0, #8]
 80162a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80162a6:	8302      	strh	r2, [r0, #24]
 80162a8:	7243      	strb	r3, [r0, #9]
 80162aa:	7a83      	ldrb	r3, [r0, #10]
 80162ac:	f365 0306 	bfi	r3, r5, #0, #7
 80162b0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80162b4:	f365 13c7 	bfi	r3, r5, #7, #1
 80162b8:	7283      	strb	r3, [r0, #10]
 80162ba:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80162be:	72c3      	strb	r3, [r0, #11]
 80162c0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80162c4:	7303      	strb	r3, [r0, #12]
 80162c6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80162ca:	81c3      	strh	r3, [r0, #14]
 80162cc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80162d0:	8203      	strh	r3, [r0, #16]
 80162d2:	4b01      	ldr	r3, [pc, #4]	@ (80162d8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80162d4:	6003      	str	r3, [r0, #0]
 80162d6:	bd30      	pop	{r4, r5, pc}
 80162d8:	08026f84 	.word	0x08026f84

080162dc <_ZNK8touchgfx9ConstFont4findEt>:
 80162dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162de:	6944      	ldr	r4, [r0, #20]
 80162e0:	b3bc      	cbz	r4, 8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80162e2:	88a3      	ldrh	r3, [r4, #4]
 80162e4:	8b02      	ldrh	r2, [r0, #24]
 80162e6:	1acb      	subs	r3, r1, r3
 80162e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80162ec:	d431      	bmi.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80162ee:	4293      	cmp	r3, r2
 80162f0:	dd0c      	ble.n	801630c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80162f2:	230e      	movs	r3, #14
 80162f4:	fb03 4302 	mla	r3, r3, r2, r4
 80162f8:	889b      	ldrh	r3, [r3, #4]
 80162fa:	1a5b      	subs	r3, r3, r1
 80162fc:	1ad3      	subs	r3, r2, r3
 80162fe:	429a      	cmp	r2, r3
 8016300:	db27      	blt.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016302:	2b00      	cmp	r3, #0
 8016304:	bfbc      	itt	lt
 8016306:	2302      	movlt	r3, #2
 8016308:	fb92 f3f3 	sdivlt	r3, r2, r3
 801630c:	2500      	movs	r5, #0
 801630e:	260e      	movs	r6, #14
 8016310:	4295      	cmp	r5, r2
 8016312:	dc1e      	bgt.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016314:	fb06 4003 	mla	r0, r6, r3, r4
 8016318:	8887      	ldrh	r7, [r0, #4]
 801631a:	42b9      	cmp	r1, r7
 801631c:	d01a      	beq.n	8016354 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801631e:	d20d      	bcs.n	801633c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016320:	1e5a      	subs	r2, r3, #1
 8016322:	4295      	cmp	r5, r2
 8016324:	dc15      	bgt.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016326:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801632a:	1a5b      	subs	r3, r3, r1
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	429a      	cmp	r2, r3
 8016330:	db0f      	blt.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016332:	429d      	cmp	r5, r3
 8016334:	ddec      	ble.n	8016310 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016336:	1953      	adds	r3, r2, r5
 8016338:	105b      	asrs	r3, r3, #1
 801633a:	e7e9      	b.n	8016310 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801633c:	1c5d      	adds	r5, r3, #1
 801633e:	42aa      	cmp	r2, r5
 8016340:	db07      	blt.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016342:	8a43      	ldrh	r3, [r0, #18]
 8016344:	1acb      	subs	r3, r1, r3
 8016346:	442b      	add	r3, r5
 8016348:	429d      	cmp	r5, r3
 801634a:	dc02      	bgt.n	8016352 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801634c:	429a      	cmp	r2, r3
 801634e:	dadf      	bge.n	8016310 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016350:	e7f1      	b.n	8016336 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8016352:	2000      	movs	r0, #0
 8016354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016356 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8016356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016358:	4604      	mov	r4, r0
 801635a:	4617      	mov	r7, r2
 801635c:	461e      	mov	r6, r3
 801635e:	b911      	cbnz	r1, 8016366 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8016360:	2500      	movs	r5, #0
 8016362:	4628      	mov	r0, r5
 8016364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016366:	290a      	cmp	r1, #10
 8016368:	d0fa      	beq.n	8016360 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801636a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801636e:	4291      	cmp	r1, r2
 8016370:	d0f6      	beq.n	8016360 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016372:	f242 020b 	movw	r2, #8203	@ 0x200b
 8016376:	4291      	cmp	r1, r2
 8016378:	d0f2      	beq.n	8016360 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801637a:	f7ff ffaf 	bl	80162dc <_ZNK8touchgfx9ConstFont4findEt>
 801637e:	4605      	mov	r5, r0
 8016380:	b950      	cbnz	r0, 8016398 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8016382:	6823      	ldr	r3, [r4, #0]
 8016384:	4620      	mov	r0, r4
 8016386:	691b      	ldr	r3, [r3, #16]
 8016388:	4798      	blx	r3
 801638a:	4601      	mov	r1, r0
 801638c:	4620      	mov	r0, r4
 801638e:	f7ff ffa5 	bl	80162dc <_ZNK8touchgfx9ConstFont4findEt>
 8016392:	4605      	mov	r5, r0
 8016394:	2800      	cmp	r0, #0
 8016396:	d0e3      	beq.n	8016360 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	4629      	mov	r1, r5
 801639c:	4620      	mov	r0, r4
 801639e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80163a0:	4798      	blx	r3
 80163a2:	6038      	str	r0, [r7, #0]
 80163a4:	6823      	ldr	r3, [r4, #0]
 80163a6:	4620      	mov	r0, r4
 80163a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80163aa:	4798      	blx	r3
 80163ac:	7030      	strb	r0, [r6, #0]
 80163ae:	e7d8      	b.n	8016362 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080163b0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80163b0:	b538      	push	{r3, r4, r5, lr}
 80163b2:	4605      	mov	r5, r0
 80163b4:	f001 fd92 	bl	8017edc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80163b8:	4604      	mov	r4, r0
 80163ba:	4628      	mov	r0, r5
 80163bc:	f001 fcd2 	bl	8017d64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80163c0:	2800      	cmp	r0, #0
 80163c2:	bf14      	ite	ne
 80163c4:	2002      	movne	r0, #2
 80163c6:	2000      	moveq	r0, #0
 80163c8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80163cc:	b280      	uxth	r0, r0
 80163ce:	bd38      	pop	{r3, r4, r5, pc}

080163d0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80163d0:	b538      	push	{r3, r4, r5, lr}
 80163d2:	4605      	mov	r5, r0
 80163d4:	f001 fd82 	bl	8017edc <_ZNK8touchgfx6Bitmap9getFormatEv>
 80163d8:	4604      	mov	r4, r0
 80163da:	4628      	mov	r0, r5
 80163dc:	f001 fcc2 	bl	8017d64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80163e0:	2800      	cmp	r0, #0
 80163e2:	bf14      	ite	ne
 80163e4:	2002      	movne	r0, #2
 80163e6:	2000      	moveq	r0, #0
 80163e8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80163ec:	f040 0001 	orr.w	r0, r0, #1
 80163f0:	b280      	uxth	r0, r0
 80163f2:	bd38      	pop	{r3, r4, r5, pc}

080163f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80163f4:	2000      	movs	r0, #0
 80163f6:	4770      	bx	lr

080163f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80163f8:	2001      	movs	r0, #1
 80163fa:	4770      	bx	lr

080163fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80163fc:	2002      	movs	r0, #2
 80163fe:	4770      	bx	lr

08016400 <_ZN8touchgfx6ScreenD1Ev>:
 8016400:	4770      	bx	lr

08016402 <_ZN8touchgfx12GestureEventD1Ev>:
 8016402:	4770      	bx	lr

08016404 <_ZN8touchgfx9DragEventD1Ev>:
 8016404:	4770      	bx	lr

08016406 <_ZN8touchgfx10ClickEventD1Ev>:
 8016406:	4770      	bx	lr

08016408 <_ZN8touchgfx10ClickEventD0Ev>:
 8016408:	b510      	push	{r4, lr}
 801640a:	4604      	mov	r4, r0
 801640c:	210c      	movs	r1, #12
 801640e:	f00c fa09 	bl	8022824 <_ZdlPvj>
 8016412:	4620      	mov	r0, r4
 8016414:	bd10      	pop	{r4, pc}

08016416 <_ZN8touchgfx9DragEventD0Ev>:
 8016416:	b510      	push	{r4, lr}
 8016418:	4604      	mov	r4, r0
 801641a:	2110      	movs	r1, #16
 801641c:	f00c fa02 	bl	8022824 <_ZdlPvj>
 8016420:	4620      	mov	r0, r4
 8016422:	bd10      	pop	{r4, pc}

08016424 <_ZN8touchgfx12GestureEventD0Ev>:
 8016424:	b510      	push	{r4, lr}
 8016426:	4604      	mov	r4, r0
 8016428:	210c      	movs	r1, #12
 801642a:	f00c f9fb 	bl	8022824 <_ZdlPvj>
 801642e:	4620      	mov	r0, r4
 8016430:	bd10      	pop	{r4, pc}

08016432 <_ZN8touchgfx6ScreenD0Ev>:
 8016432:	b510      	push	{r4, lr}
 8016434:	4604      	mov	r4, r0
 8016436:	213c      	movs	r1, #60	@ 0x3c
 8016438:	f00c f9f4 	bl	8022824 <_ZdlPvj>
 801643c:	4620      	mov	r0, r4
 801643e:	bd10      	pop	{r4, pc}

08016440 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8016440:	b530      	push	{r4, r5, lr}
 8016442:	460d      	mov	r5, r1
 8016444:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016446:	b087      	sub	sp, #28
 8016448:	4604      	mov	r4, r0
 801644a:	b301      	cbz	r1, 801648e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801644c:	a801      	add	r0, sp, #4
 801644e:	f7ff fb61 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016452:	892a      	ldrh	r2, [r5, #8]
 8016454:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016458:	7928      	ldrb	r0, [r5, #4]
 801645a:	1ad2      	subs	r2, r2, r3
 801645c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801645e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8016462:	441a      	add	r2, r3
 8016464:	896b      	ldrh	r3, [r5, #10]
 8016466:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801646a:	f88d 0010 	strb.w	r0, [sp, #16]
 801646e:	1b5b      	subs	r3, r3, r5
 8016470:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8016472:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016474:	442b      	add	r3, r5
 8016476:	4d07      	ldr	r5, [pc, #28]	@ (8016494 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016478:	f8ad 1012 	strh.w	r1, [sp, #18]
 801647c:	a903      	add	r1, sp, #12
 801647e:	9503      	str	r5, [sp, #12]
 8016480:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016484:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016488:	6803      	ldr	r3, [r0, #0]
 801648a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801648c:	4798      	blx	r3
 801648e:	b007      	add	sp, #28
 8016490:	bd30      	pop	{r4, r5, pc}
 8016492:	bf00      	nop
 8016494:	08027014 	.word	0x08027014

08016498 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801649c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801649e:	b08a      	sub	sp, #40	@ 0x28
 80164a0:	4604      	mov	r4, r0
 80164a2:	460d      	mov	r5, r1
 80164a4:	b113      	cbz	r3, 80164ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80164a6:	790b      	ldrb	r3, [r1, #4]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d044      	beq.n	8016536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80164ac:	f104 0804 	add.w	r8, r4, #4
 80164b0:	a803      	add	r0, sp, #12
 80164b2:	4641      	mov	r1, r8
 80164b4:	f7ff fb2e 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164b8:	792b      	ldrb	r3, [r5, #4]
 80164ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80164be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80164c2:	b983      	cbnz	r3, 80164e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80164c4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80164c8:	892a      	ldrh	r2, [r5, #8]
 80164ca:	88e9      	ldrh	r1, [r5, #6]
 80164cc:	4640      	mov	r0, r8
 80164ce:	1b92      	subs	r2, r2, r6
 80164d0:	9301      	str	r3, [sp, #4]
 80164d2:	1bc9      	subs	r1, r1, r7
 80164d4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80164d8:	b212      	sxth	r2, r2
 80164da:	9300      	str	r3, [sp, #0]
 80164dc:	b209      	sxth	r1, r1
 80164de:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80164e2:	f7f8 fb6f 	bl	800ebc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80164e6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80164e8:	b329      	cbz	r1, 8016536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80164ea:	a805      	add	r0, sp, #20
 80164ec:	f7ff fb12 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80164f4:	792b      	ldrb	r3, [r5, #4]
 80164f6:	a907      	add	r1, sp, #28
 80164f8:	1abf      	subs	r7, r7, r2
 80164fa:	88ea      	ldrh	r2, [r5, #6]
 80164fc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80164fe:	4417      	add	r7, r2
 8016500:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8016502:	f88d 3020 	strb.w	r3, [sp, #32]
 8016506:	4417      	add	r7, r2
 8016508:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801650c:	1ab6      	subs	r6, r6, r2
 801650e:	892a      	ldrh	r2, [r5, #8]
 8016510:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8016514:	4416      	add	r6, r2
 8016516:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8016518:	4416      	add	r6, r2
 801651a:	4a08      	ldr	r2, [pc, #32]	@ (801653c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801651c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8016520:	2600      	movs	r6, #0
 8016522:	9207      	str	r2, [sp, #28]
 8016524:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8016528:	6803      	ldr	r3, [r0, #0]
 801652a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801652c:	4798      	blx	r3
 801652e:	792b      	ldrb	r3, [r5, #4]
 8016530:	b10b      	cbz	r3, 8016536 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8016532:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016536:	b00a      	add	sp, #40	@ 0x28
 8016538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801653c:	08026fec 	.word	0x08026fec

08016540 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8016540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016544:	460c      	mov	r4, r1
 8016546:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8016548:	b088      	sub	sp, #32
 801654a:	4605      	mov	r5, r0
 801654c:	2900      	cmp	r1, #0
 801654e:	d06d      	beq.n	801662c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8016550:	4668      	mov	r0, sp
 8016552:	f7ff fadf 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016556:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8016558:	88e3      	ldrh	r3, [r4, #6]
 801655a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801655e:	440b      	add	r3, r1
 8016560:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016564:	b21b      	sxth	r3, r3
 8016566:	4543      	cmp	r3, r8
 8016568:	db31      	blt.n	80165ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801656a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801656e:	44c4      	add	ip, r8
 8016570:	fa0f fc8c 	sxth.w	ip, ip
 8016574:	4563      	cmp	r3, ip
 8016576:	da2a      	bge.n	80165ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016578:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801657a:	8926      	ldrh	r6, [r4, #8]
 801657c:	4416      	add	r6, r2
 801657e:	b236      	sxth	r6, r6
 8016580:	42be      	cmp	r6, r7
 8016582:	db24      	blt.n	80165ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016584:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016588:	4438      	add	r0, r7
 801658a:	b200      	sxth	r0, r0
 801658c:	4286      	cmp	r6, r0
 801658e:	da1e      	bge.n	80165ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016590:	8963      	ldrh	r3, [r4, #10]
 8016592:	4419      	add	r1, r3
 8016594:	b209      	sxth	r1, r1
 8016596:	4541      	cmp	r1, r8
 8016598:	db08      	blt.n	80165ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801659a:	4561      	cmp	r1, ip
 801659c:	da06      	bge.n	80165ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801659e:	89a3      	ldrh	r3, [r4, #12]
 80165a0:	441a      	add	r2, r3
 80165a2:	b212      	sxth	r2, r2
 80165a4:	42ba      	cmp	r2, r7
 80165a6:	db01      	blt.n	80165ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80165a8:	4282      	cmp	r2, r0
 80165aa:	db10      	blt.n	80165ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80165ac:	4b21      	ldr	r3, [pc, #132]	@ (8016634 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80165ae:	a904      	add	r1, sp, #16
 80165b0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80165b2:	9304      	str	r3, [sp, #16]
 80165b4:	2302      	movs	r3, #2
 80165b6:	f88d 3014 	strb.w	r3, [sp, #20]
 80165ba:	2300      	movs	r3, #0
 80165bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80165c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80165c8:	6803      	ldr	r3, [r0, #0]
 80165ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165cc:	4798      	blx	r3
 80165ce:	1d29      	adds	r1, r5, #4
 80165d0:	a802      	add	r0, sp, #8
 80165d2:	f7ff fa9f 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80165d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80165da:	88e0      	ldrh	r0, [r4, #6]
 80165dc:	eba3 0808 	sub.w	r8, r3, r8
 80165e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80165e4:	7921      	ldrb	r1, [r4, #4]
 80165e6:	fa1f f888 	uxth.w	r8, r8
 80165ea:	1bdf      	subs	r7, r3, r7
 80165ec:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 80165f0:	b2bb      	uxth	r3, r7
 80165f2:	4440      	add	r0, r8
 80165f4:	8922      	ldrh	r2, [r4, #8]
 80165f6:	8967      	ldrh	r7, [r4, #10]
 80165f8:	4460      	add	r0, ip
 80165fa:	89a4      	ldrh	r4, [r4, #12]
 80165fc:	441a      	add	r2, r3
 80165fe:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8016600:	44b8      	add	r8, r7
 8016602:	4423      	add	r3, r4
 8016604:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016608:	4432      	add	r2, r6
 801660a:	44e0      	add	r8, ip
 801660c:	4433      	add	r3, r6
 801660e:	4c0a      	ldr	r4, [pc, #40]	@ (8016638 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8016610:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8016612:	f88d 1014 	strb.w	r1, [sp, #20]
 8016616:	a904      	add	r1, sp, #16
 8016618:	9404      	str	r4, [sp, #16]
 801661a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801661e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8016622:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016626:	6803      	ldr	r3, [r0, #0]
 8016628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801662a:	4798      	blx	r3
 801662c:	b008      	add	sp, #32
 801662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016632:	bf00      	nop
 8016634:	08026fec 	.word	0x08026fec
 8016638:	08027000 	.word	0x08027000

0801663c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801663c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801663e:	4604      	mov	r4, r0
 8016640:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016644:	3201      	adds	r2, #1
 8016646:	d112      	bne.n	801666e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016648:	2500      	movs	r5, #0
 801664a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801664e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8016652:	6803      	ldr	r3, [r0, #0]
 8016654:	9500      	str	r5, [sp, #0]
 8016656:	466d      	mov	r5, sp
 8016658:	f8ad 1004 	strh.w	r1, [sp, #4]
 801665c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8016660:	4629      	mov	r1, r5
 8016662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016664:	4798      	blx	r3
 8016666:	e895 0003 	ldmia.w	r5, {r0, r1}
 801666a:	e884 0003 	stmia.w	r4, {r0, r1}
 801666e:	4620      	mov	r0, r4
 8016670:	b003      	add	sp, #12
 8016672:	bd30      	pop	{r4, r5, pc}

08016674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016674:	b513      	push	{r0, r1, r4, lr}
 8016676:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801667a:	4604      	mov	r4, r0
 801667c:	3301      	adds	r3, #1
 801667e:	d109      	bne.n	8016694 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8016680:	4601      	mov	r1, r0
 8016682:	4668      	mov	r0, sp
 8016684:	f7ff fa46 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016688:	f8bd 3000 	ldrh.w	r3, [sp]
 801668c:	8423      	strh	r3, [r4, #32]
 801668e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016692:	8463      	strh	r3, [r4, #34]	@ 0x22
 8016694:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016698:	b002      	add	sp, #8
 801669a:	bd10      	pop	{r4, pc}

0801669c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801669c:	b513      	push	{r0, r1, r4, lr}
 801669e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80166a2:	4604      	mov	r4, r0
 80166a4:	3301      	adds	r3, #1
 80166a6:	d109      	bne.n	80166bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80166a8:	4601      	mov	r1, r0
 80166aa:	4668      	mov	r0, sp
 80166ac:	f7ff fa32 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80166b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80166b4:	8423      	strh	r3, [r4, #32]
 80166b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166ba:	8463      	strh	r3, [r4, #34]	@ 0x22
 80166bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80166c0:	b002      	add	sp, #8
 80166c2:	bd10      	pop	{r4, pc}

080166c4 <_ZN8touchgfx6ScreenC1Ev>:
 80166c4:	b570      	push	{r4, r5, r6, lr}
 80166c6:	4b17      	ldr	r3, [pc, #92]	@ (8016724 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80166c8:	4605      	mov	r5, r0
 80166ca:	4a17      	ldr	r2, [pc, #92]	@ (8016728 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80166cc:	2101      	movs	r1, #1
 80166ce:	f845 3b04 	str.w	r3, [r5], #4
 80166d2:	2300      	movs	r3, #0
 80166d4:	6042      	str	r2, [r0, #4]
 80166d6:	4604      	mov	r4, r0
 80166d8:	8103      	strh	r3, [r0, #8]
 80166da:	8143      	strh	r3, [r0, #10]
 80166dc:	8183      	strh	r3, [r0, #12]
 80166de:	81c3      	strh	r3, [r0, #14]
 80166e0:	8203      	strh	r3, [r0, #16]
 80166e2:	8243      	strh	r3, [r0, #18]
 80166e4:	8283      	strh	r3, [r0, #20]
 80166e6:	82c3      	strh	r3, [r0, #22]
 80166e8:	6203      	str	r3, [r0, #32]
 80166ea:	8483      	strh	r3, [r0, #36]	@ 0x24
 80166ec:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80166ee:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80166f2:	6343      	str	r3, [r0, #52]	@ 0x34
 80166f4:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80166f8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80166fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8016700:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8016704:	4b09      	ldr	r3, [pc, #36]	@ (801672c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016706:	4628      	mov	r0, r5
 8016708:	f9b3 6000 	ldrsh.w	r6, [r3]
 801670c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801670e:	4a08      	ldr	r2, [pc, #32]	@ (8016730 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8016710:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016714:	4798      	blx	r3
 8016716:	6863      	ldr	r3, [r4, #4]
 8016718:	4628      	mov	r0, r5
 801671a:	4631      	mov	r1, r6
 801671c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801671e:	4798      	blx	r3
 8016720:	4620      	mov	r0, r4
 8016722:	bd70      	pop	{r4, r5, r6, pc}
 8016724:	08027028 	.word	0x08027028
 8016728:	08026af8 	.word	0x08026af8
 801672c:	2402536e 	.word	0x2402536e
 8016730:	2402536c 	.word	0x2402536c

08016734 <_ZN8touchgfx6Screen4drawEv>:
 8016734:	4b09      	ldr	r3, [pc, #36]	@ (801675c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016736:	b507      	push	{r0, r1, r2, lr}
 8016738:	f9b3 2000 	ldrsh.w	r2, [r3]
 801673c:	2100      	movs	r1, #0
 801673e:	4b08      	ldr	r3, [pc, #32]	@ (8016760 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8016740:	9100      	str	r1, [sp, #0]
 8016742:	4669      	mov	r1, sp
 8016744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016748:	f8ad 2004 	strh.w	r2, [sp, #4]
 801674c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016750:	6803      	ldr	r3, [r0, #0]
 8016752:	689b      	ldr	r3, [r3, #8]
 8016754:	4798      	blx	r3
 8016756:	b003      	add	sp, #12
 8016758:	f85d fb04 	ldr.w	pc, [sp], #4
 801675c:	2402536c 	.word	0x2402536c
 8016760:	2402536e 	.word	0x2402536e

08016764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016768:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801676c:	b089      	sub	sp, #36	@ 0x24
 801676e:	4680      	mov	r8, r0
 8016770:	460c      	mov	r4, r1
 8016772:	2b00      	cmp	r3, #0
 8016774:	4615      	mov	r5, r2
 8016776:	dd0e      	ble.n	8016796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016778:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801677c:	2b00      	cmp	r3, #0
 801677e:	dd0a      	ble.n	8016796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016780:	4628      	mov	r0, r5
 8016782:	f7ff ff5b 	bl	801663c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016786:	4621      	mov	r1, r4
 8016788:	f7fd fe91 	bl	80144ae <_ZNK8touchgfx4Rect9intersectERKS0_>
 801678c:	69eb      	ldr	r3, [r5, #28]
 801678e:	b928      	cbnz	r0, 801679c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8016790:	461d      	mov	r5, r3
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1f4      	bne.n	8016780 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8016796:	b009      	add	sp, #36	@ 0x24
 8016798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679c:	ae04      	add	r6, sp, #16
 801679e:	2b00      	cmp	r3, #0
 80167a0:	f000 80b5 	beq.w	801690e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80167a4:	682b      	ldr	r3, [r5, #0]
 80167a6:	4629      	mov	r1, r5
 80167a8:	a802      	add	r0, sp, #8
 80167aa:	68db      	ldr	r3, [r3, #12]
 80167ac:	4798      	blx	r3
 80167ae:	4628      	mov	r0, r5
 80167b0:	f7ff ff60 	bl	8016674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80167b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80167b8:	4407      	add	r7, r0
 80167ba:	4628      	mov	r0, r5
 80167bc:	f7ff ff6e 	bl	801669c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80167c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80167c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80167c8:	b23f      	sxth	r7, r7
 80167ca:	4418      	add	r0, r3
 80167cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80167d0:	4621      	mov	r1, r4
 80167d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80167d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80167da:	4630      	mov	r0, r6
 80167dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80167e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80167e4:	f7f8 fad0 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 80167e8:	4628      	mov	r0, r5
 80167ea:	f7ff ff27 	bl	801663c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80167ee:	ab06      	add	r3, sp, #24
 80167f0:	4602      	mov	r2, r0
 80167f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80167f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80167fa:	4611      	mov	r1, r2
 80167fc:	4618      	mov	r0, r3
 80167fe:	f7f8 fac3 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8016802:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016806:	f9b4 1000 	ldrsh.w	r1, [r4]
 801680a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801680e:	4299      	cmp	r1, r3
 8016810:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016814:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016818:	d10b      	bne.n	8016832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801681a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801681e:	4552      	cmp	r2, sl
 8016820:	d107      	bne.n	8016832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016822:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016826:	455a      	cmp	r2, fp
 8016828:	d103      	bne.n	8016832 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801682a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801682e:	454a      	cmp	r2, r9
 8016830:	d06d      	beq.n	801690e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8016832:	f1bb 0f00 	cmp.w	fp, #0
 8016836:	dd65      	ble.n	8016904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016838:	f1b9 0f00 	cmp.w	r9, #0
 801683c:	dd62      	ble.n	8016904 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801683e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8016842:	fa1f f08a 	uxth.w	r0, sl
 8016846:	4552      	cmp	r2, sl
 8016848:	9000      	str	r0, [sp, #0]
 801684a:	da12      	bge.n	8016872 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801684c:	9301      	str	r3, [sp, #4]
 801684e:	9b00      	ldr	r3, [sp, #0]
 8016850:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016854:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016858:	1a9a      	subs	r2, r3, r2
 801685a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801685e:	4631      	mov	r1, r6
 8016860:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016864:	4640      	mov	r0, r8
 8016866:	f8ad 2016 	strh.w	r2, [sp, #22]
 801686a:	69ea      	ldr	r2, [r5, #28]
 801686c:	f7ff ff7a 	bl	8016764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016870:	9b01      	ldr	r3, [sp, #4]
 8016872:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016876:	b29f      	uxth	r7, r3
 8016878:	429a      	cmp	r2, r3
 801687a:	da0d      	bge.n	8016898 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801687c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016880:	1aba      	subs	r2, r7, r2
 8016882:	f8ad a012 	strh.w	sl, [sp, #18]
 8016886:	4631      	mov	r1, r6
 8016888:	f8ad 2014 	strh.w	r2, [sp, #20]
 801688c:	4640      	mov	r0, r8
 801688e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8016892:	69ea      	ldr	r2, [r5, #28]
 8016894:	f7ff ff66 	bl	8016764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016898:	8822      	ldrh	r2, [r4, #0]
 801689a:	445f      	add	r7, fp
 801689c:	88a3      	ldrh	r3, [r4, #4]
 801689e:	b2bf      	uxth	r7, r7
 80168a0:	4413      	add	r3, r2
 80168a2:	b23a      	sxth	r2, r7
 80168a4:	b29b      	uxth	r3, r3
 80168a6:	b219      	sxth	r1, r3
 80168a8:	4291      	cmp	r1, r2
 80168aa:	dd0d      	ble.n	80168c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80168ac:	1bdb      	subs	r3, r3, r7
 80168ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 80168b2:	f8ad a012 	strh.w	sl, [sp, #18]
 80168b6:	4631      	mov	r1, r6
 80168b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80168bc:	4640      	mov	r0, r8
 80168be:	f8ad 9016 	strh.w	r9, [sp, #22]
 80168c2:	69ea      	ldr	r2, [r5, #28]
 80168c4:	f7ff ff4e 	bl	8016764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80168c8:	88e2      	ldrh	r2, [r4, #6]
 80168ca:	8863      	ldrh	r3, [r4, #2]
 80168cc:	4413      	add	r3, r2
 80168ce:	9a00      	ldr	r2, [sp, #0]
 80168d0:	444a      	add	r2, r9
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	fa1f f982 	uxth.w	r9, r2
 80168d8:	b219      	sxth	r1, r3
 80168da:	fa0f f289 	sxth.w	r2, r9
 80168de:	428a      	cmp	r2, r1
 80168e0:	da15      	bge.n	801690e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80168e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80168e6:	eba3 0309 	sub.w	r3, r3, r9
 80168ea:	f9b4 0000 	ldrsh.w	r0, [r4]
 80168ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 80168f2:	4631      	mov	r1, r6
 80168f4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80168f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80168fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016900:	69ea      	ldr	r2, [r5, #28]
 8016902:	e001      	b.n	8016908 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016904:	69ea      	ldr	r2, [r5, #28]
 8016906:	4621      	mov	r1, r4
 8016908:	4640      	mov	r0, r8
 801690a:	f7ff ff2b 	bl	8016764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801690e:	4628      	mov	r0, r5
 8016910:	f7ff fe94 	bl	801663c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016914:	6861      	ldr	r1, [r4, #4]
 8016916:	4602      	mov	r2, r0
 8016918:	4633      	mov	r3, r6
 801691a:	6820      	ldr	r0, [r4, #0]
 801691c:	c303      	stmia	r3!, {r0, r1}
 801691e:	4611      	mov	r1, r2
 8016920:	4630      	mov	r0, r6
 8016922:	f7f8 fa31 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 8016926:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801692a:	2b00      	cmp	r3, #0
 801692c:	f77f af33 	ble.w	8016796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016930:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016934:	2b00      	cmp	r3, #0
 8016936:	f77f af2e 	ble.w	8016796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801693a:	4628      	mov	r0, r5
 801693c:	f7ff fe9a 	bl	8016674 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8016940:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016944:	1a18      	subs	r0, r3, r0
 8016946:	f8ad 0010 	strh.w	r0, [sp, #16]
 801694a:	4628      	mov	r0, r5
 801694c:	f7ff fea6 	bl	801669c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8016950:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016954:	4631      	mov	r1, r6
 8016956:	1a18      	subs	r0, r3, r0
 8016958:	f8ad 0012 	strh.w	r0, [sp, #18]
 801695c:	4628      	mov	r0, r5
 801695e:	682b      	ldr	r3, [r5, #0]
 8016960:	689b      	ldr	r3, [r3, #8]
 8016962:	4798      	blx	r3
 8016964:	e717      	b.n	8016796 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016966 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016966:	b570      	push	{r4, r5, r6, lr}
 8016968:	1d06      	adds	r6, r0, #4
 801696a:	b086      	sub	sp, #24
 801696c:	460c      	mov	r4, r1
 801696e:	2300      	movs	r3, #0
 8016970:	4631      	mov	r1, r6
 8016972:	4605      	mov	r5, r0
 8016974:	a802      	add	r0, sp, #8
 8016976:	9301      	str	r3, [sp, #4]
 8016978:	f7ff f8cc 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801697c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8016980:	8822      	ldrh	r2, [r4, #0]
 8016982:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016986:	1ad2      	subs	r2, r2, r3
 8016988:	8863      	ldrh	r3, [r4, #2]
 801698a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801698e:	1a5b      	subs	r3, r3, r1
 8016990:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016994:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016998:	aa01      	add	r2, sp, #4
 801699a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801699e:	4630      	mov	r0, r6
 80169a0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80169a4:	a904      	add	r1, sp, #16
 80169a6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80169aa:	f7f8 fac5 	bl	800ef38 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80169ae:	9a01      	ldr	r2, [sp, #4]
 80169b0:	b11a      	cbz	r2, 80169ba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80169b2:	4621      	mov	r1, r4
 80169b4:	4628      	mov	r0, r5
 80169b6:	f7ff fed5 	bl	8016764 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80169ba:	b006      	add	sp, #24
 80169bc:	bd70      	pop	{r4, r5, r6, pc}

080169be <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80169be:	4602      	mov	r2, r0
 80169c0:	b530      	push	{r4, r5, lr}
 80169c2:	4604      	mov	r4, r0
 80169c4:	b085      	sub	sp, #20
 80169c6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80169ca:	460d      	mov	r5, r1
 80169cc:	466b      	mov	r3, sp
 80169ce:	6851      	ldr	r1, [r2, #4]
 80169d0:	c303      	stmia	r3!, {r0, r1}
 80169d2:	4629      	mov	r1, r5
 80169d4:	4668      	mov	r0, sp
 80169d6:	f7f8 f9d7 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 80169da:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80169de:	b12b      	cbz	r3, 80169ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80169e0:	4669      	mov	r1, sp
 80169e2:	4620      	mov	r0, r4
 80169e4:	f7ff ffbf 	bl	8016966 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80169e8:	b005      	add	sp, #20
 80169ea:	bd30      	pop	{r4, r5, pc}
 80169ec:	3404      	adds	r4, #4
 80169ee:	a802      	add	r0, sp, #8
 80169f0:	4621      	mov	r1, r4
 80169f2:	f7ff f88f 	bl	8015b14 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80169f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80169fa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80169fe:	4669      	mov	r1, sp
 8016a00:	4620      	mov	r0, r4
 8016a02:	1a9b      	subs	r3, r3, r2
 8016a04:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016a08:	f8ad 3000 	strh.w	r3, [sp]
 8016a0c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016a10:	1a9b      	subs	r3, r3, r2
 8016a12:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016a16:	f7f8 fa56 	bl	800eec6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016a1a:	e7e5      	b.n	80169e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08016a1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016a1c:	460b      	mov	r3, r1
 8016a1e:	680a      	ldr	r2, [r1, #0]
 8016a20:	1d01      	adds	r1, r0, #4
 8016a22:	6992      	ldr	r2, [r2, #24]
 8016a24:	4618      	mov	r0, r3
 8016a26:	4710      	bx	r2

08016a28 <_ZN8touchgfx12TextProviderC1Ev>:
 8016a28:	b538      	push	{r3, r4, r5, lr}
 8016a2a:	2500      	movs	r5, #0
 8016a2c:	2302      	movs	r3, #2
 8016a2e:	4604      	mov	r4, r0
 8016a30:	220e      	movs	r2, #14
 8016a32:	7403      	strb	r3, [r0, #16]
 8016a34:	4629      	mov	r1, r5
 8016a36:	6145      	str	r5, [r0, #20]
 8016a38:	7605      	strb	r5, [r0, #24]
 8016a3a:	83c5      	strh	r5, [r0, #30]
 8016a3c:	8405      	strh	r5, [r0, #32]
 8016a3e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8016a40:	8705      	strh	r5, [r0, #56]	@ 0x38
 8016a42:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8016a44:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8016a48:	e9c0 5500 	strd	r5, r5, [r0]
 8016a4c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8016a50:	304c      	adds	r0, #76	@ 0x4c
 8016a52:	f00c fcf9 	bl	8023448 <memset>
 8016a56:	2301      	movs	r3, #1
 8016a58:	4620      	mov	r0, r4
 8016a5a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8016a5e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016a62:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8016a66:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8016a6a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8016a6e:	f7ee f977 	bl	8004d60 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8016a72:	4620      	mov	r0, r4
 8016a74:	bd38      	pop	{r3, r4, r5, pc}

08016a76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016a76:	b530      	push	{r4, r5, lr}
 8016a78:	2500      	movs	r5, #0
 8016a7a:	2401      	movs	r4, #1
 8016a7c:	6843      	ldr	r3, [r0, #4]
 8016a7e:	b913      	cbnz	r3, 8016a86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8016a80:	6803      	ldr	r3, [r0, #0]
 8016a82:	b313      	cbz	r3, 8016aca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016a84:	6043      	str	r3, [r0, #4]
 8016a86:	7e03      	ldrb	r3, [r0, #24]
 8016a88:	b143      	cbz	r3, 8016a9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016a8a:	6943      	ldr	r3, [r0, #20]
 8016a8c:	b12b      	cbz	r3, 8016a9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016a8e:	881a      	ldrh	r2, [r3, #0]
 8016a90:	b11a      	cbz	r2, 8016a9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8016a92:	1c9a      	adds	r2, r3, #2
 8016a94:	6142      	str	r2, [r0, #20]
 8016a96:	8818      	ldrh	r0, [r3, #0]
 8016a98:	bd30      	pop	{r4, r5, pc}
 8016a9a:	7605      	strb	r5, [r0, #24]
 8016a9c:	6843      	ldr	r3, [r0, #4]
 8016a9e:	8819      	ldrh	r1, [r3, #0]
 8016aa0:	b199      	cbz	r1, 8016aca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016aa2:	1c9a      	adds	r2, r3, #2
 8016aa4:	2902      	cmp	r1, #2
 8016aa6:	6042      	str	r2, [r0, #4]
 8016aa8:	d1f5      	bne.n	8016a96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8016aaa:	7c03      	ldrb	r3, [r0, #16]
 8016aac:	2b01      	cmp	r3, #1
 8016aae:	d8e5      	bhi.n	8016a7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ab0:	1c5a      	adds	r2, r3, #1
 8016ab2:	3302      	adds	r3, #2
 8016ab4:	7402      	strb	r2, [r0, #16]
 8016ab6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8016aba:	6143      	str	r3, [r0, #20]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d0dd      	beq.n	8016a7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ac0:	881b      	ldrh	r3, [r3, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d0da      	beq.n	8016a7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016ac6:	7604      	strb	r4, [r0, #24]
 8016ac8:	e7d8      	b.n	8016a7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8016aca:	2000      	movs	r0, #0
 8016acc:	e7e4      	b.n	8016a98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08016ace <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8016ace:	6001      	str	r1, [r0, #0]
 8016ad0:	2100      	movs	r1, #0
 8016ad2:	b430      	push	{r4, r5}
 8016ad4:	6041      	str	r1, [r0, #4]
 8016ad6:	6815      	ldr	r5, [r2, #0]
 8016ad8:	6085      	str	r5, [r0, #8]
 8016ada:	6852      	ldr	r2, [r2, #4]
 8016adc:	6443      	str	r3, [r0, #68]	@ 0x44
 8016ade:	9b02      	ldr	r3, [sp, #8]
 8016ae0:	60c2      	str	r2, [r0, #12]
 8016ae2:	7401      	strb	r1, [r0, #16]
 8016ae4:	6141      	str	r1, [r0, #20]
 8016ae6:	7601      	strb	r1, [r0, #24]
 8016ae8:	8701      	strh	r1, [r0, #56]	@ 0x38
 8016aea:	8401      	strh	r1, [r0, #32]
 8016aec:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8016af0:	6483      	str	r3, [r0, #72]	@ 0x48
 8016af2:	bc30      	pop	{r4, r5}
 8016af4:	f7ee b934 	b.w	8004d60 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08016af8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8016af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016afa:	4605      	mov	r5, r0
 8016afc:	4608      	mov	r0, r1
 8016afe:	b1f1      	cbz	r1, 8016b3e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8016b00:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8016b04:	460b      	mov	r3, r1
 8016b06:	f101 0708 	add.w	r7, r1, #8
 8016b0a:	4622      	mov	r2, r4
 8016b0c:	6818      	ldr	r0, [r3, #0]
 8016b0e:	3308      	adds	r3, #8
 8016b10:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016b14:	4626      	mov	r6, r4
 8016b16:	42bb      	cmp	r3, r7
 8016b18:	c603      	stmia	r6!, {r0, r1}
 8016b1a:	4634      	mov	r4, r6
 8016b1c:	d1f6      	bne.n	8016b0c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8016b1e:	6818      	ldr	r0, [r3, #0]
 8016b20:	6030      	str	r0, [r6, #0]
 8016b22:	4610      	mov	r0, r2
 8016b24:	889b      	ldrh	r3, [r3, #4]
 8016b26:	80b3      	strh	r3, [r6, #4]
 8016b28:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016b2c:	015b      	lsls	r3, r3, #5
 8016b2e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016b32:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8016b36:	430b      	orrs	r3, r1
 8016b38:	425b      	negs	r3, r3
 8016b3a:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b40 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8016b40:	b538      	push	{r3, r4, r5, lr}
 8016b42:	460c      	mov	r4, r1
 8016b44:	6811      	ldr	r1, [r2, #0]
 8016b46:	4610      	mov	r0, r2
 8016b48:	68cd      	ldr	r5, [r1, #12]
 8016b4a:	4619      	mov	r1, r3
 8016b4c:	47a8      	blx	r5
 8016b4e:	2800      	cmp	r0, #0
 8016b50:	bf08      	it	eq
 8016b52:	4620      	moveq	r0, r4
 8016b54:	bd38      	pop	{r3, r4, r5, pc}
	...

08016b58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b5c:	468c      	mov	ip, r1
 8016b5e:	4605      	mov	r5, r0
 8016b60:	4614      	mov	r4, r2
 8016b62:	b942      	cbnz	r2, 8016b76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8016b64:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016b68:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8016b6c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8016b70:	4620      	mov	r0, r4
 8016b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b76:	7b50      	ldrb	r0, [r2, #13]
 8016b78:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8016b7c:	8893      	ldrh	r3, [r2, #4]
 8016b7e:	0106      	lsls	r6, r0, #4
 8016b80:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016b84:	79e6      	ldrb	r6, [r4, #7]
 8016b86:	4316      	orrs	r6, r2
 8016b88:	185a      	adds	r2, r3, r1
 8016b8a:	b291      	uxth	r1, r2
 8016b8c:	b2b7      	uxth	r7, r6
 8016b8e:	291d      	cmp	r1, #29
 8016b90:	d87f      	bhi.n	8016c92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016b92:	2201      	movs	r2, #1
 8016b94:	10f6      	asrs	r6, r6, #3
 8016b96:	408a      	lsls	r2, r1
 8016b98:	498b      	ldr	r1, [pc, #556]	@ (8016dc8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8016b9a:	420a      	tst	r2, r1
 8016b9c:	d12e      	bne.n	8016bfc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8016b9e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8016ba2:	d076      	beq.n	8016c92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8016ba4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016ba8:	4623      	mov	r3, r4
 8016baa:	f104 0e08 	add.w	lr, r4, #8
 8016bae:	4614      	mov	r4, r2
 8016bb0:	6818      	ldr	r0, [r3, #0]
 8016bb2:	3308      	adds	r3, #8
 8016bb4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016bb8:	4694      	mov	ip, r2
 8016bba:	4573      	cmp	r3, lr
 8016bbc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016bc0:	4662      	mov	r2, ip
 8016bc2:	d1f5      	bne.n	8016bb0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8016bc4:	6818      	ldr	r0, [r3, #0]
 8016bc6:	f8cc 0000 	str.w	r0, [ip]
 8016bca:	889b      	ldrh	r3, [r3, #4]
 8016bcc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8016bd0:	b2b3      	uxth	r3, r6
 8016bd2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8016bd6:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8016bda:	1aca      	subs	r2, r1, r3
 8016bdc:	1bcf      	subs	r7, r1, r7
 8016bde:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8016be2:	b292      	uxth	r2, r2
 8016be4:	1afb      	subs	r3, r7, r3
 8016be6:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8016bea:	10d2      	asrs	r2, r2, #3
 8016bec:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8016bf0:	4302      	orrs	r2, r0
 8016bf2:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8016bf6:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8016bfa:	e7b9      	b.n	8016b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016bfc:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016c00:	4623      	mov	r3, r4
 8016c02:	f104 0808 	add.w	r8, r4, #8
 8016c06:	4614      	mov	r4, r2
 8016c08:	6818      	ldr	r0, [r3, #0]
 8016c0a:	3308      	adds	r3, #8
 8016c0c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016c10:	4696      	mov	lr, r2
 8016c12:	4543      	cmp	r3, r8
 8016c14:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016c18:	4672      	mov	r2, lr
 8016c1a:	d1f5      	bne.n	8016c08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8016c1c:	6818      	ldr	r0, [r3, #0]
 8016c1e:	f8ce 0000 	str.w	r0, [lr]
 8016c22:	889b      	ldrh	r3, [r3, #4]
 8016c24:	f8ae 3004 	strh.w	r3, [lr, #4]
 8016c28:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8016c2a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016c2e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8016c30:	f640 6333 	movw	r3, #3635	@ 0xe33
 8016c34:	4299      	cmp	r1, r3
 8016c36:	d111      	bne.n	8016c5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8016c38:	f8dc 3000 	ldr.w	r3, [ip]
 8016c3c:	4660      	mov	r0, ip
 8016c3e:	68db      	ldr	r3, [r3, #12]
 8016c40:	4798      	blx	r3
 8016c42:	7b41      	ldrb	r1, [r0, #13]
 8016c44:	00cb      	lsls	r3, r1, #3
 8016c46:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016c4a:	7a03      	ldrb	r3, [r0, #8]
 8016c4c:	4313      	orrs	r3, r2
 8016c4e:	064a      	lsls	r2, r1, #25
 8016c50:	bf44      	itt	mi
 8016c52:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016c56:	b21b      	sxthmi	r3, r3
 8016c58:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016c5c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8016c60:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8016c64:	443b      	add	r3, r7
 8016c66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8016c6a:	4433      	add	r3, r6
 8016c6c:	b29b      	uxth	r3, r3
 8016c6e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016c72:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8016c76:	10db      	asrs	r3, r3, #3
 8016c78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016c7c:	4313      	orrs	r3, r2
 8016c7e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8016c82:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8016c86:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8016c8a:	1a9b      	subs	r3, r3, r2
 8016c8c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8016c90:	e76e      	b.n	8016b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8016c92:	f023 0204 	bic.w	r2, r3, #4
 8016c96:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8016c9a:	428a      	cmp	r2, r1
 8016c9c:	d003      	beq.n	8016ca6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8016c9e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8016ca2:	4293      	cmp	r3, r2
 8016ca4:	d138      	bne.n	8016d18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8016ca6:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8016caa:	4622      	mov	r2, r4
 8016cac:	f104 0808 	add.w	r8, r4, #8
 8016cb0:	4634      	mov	r4, r6
 8016cb2:	6810      	ldr	r0, [r2, #0]
 8016cb4:	3208      	adds	r2, #8
 8016cb6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016cba:	46b6      	mov	lr, r6
 8016cbc:	4542      	cmp	r2, r8
 8016cbe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016cc2:	4676      	mov	r6, lr
 8016cc4:	d1f5      	bne.n	8016cb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8016cc6:	6810      	ldr	r0, [r2, #0]
 8016cc8:	3b01      	subs	r3, #1
 8016cca:	4621      	mov	r1, r4
 8016ccc:	f8ce 0000 	str.w	r0, [lr]
 8016cd0:	b29b      	uxth	r3, r3
 8016cd2:	8892      	ldrh	r2, [r2, #4]
 8016cd4:	4628      	mov	r0, r5
 8016cd6:	f8ae 2004 	strh.w	r2, [lr, #4]
 8016cda:	4662      	mov	r2, ip
 8016cdc:	f7ff ff30 	bl	8016b40 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016ce0:	7b41      	ldrb	r1, [r0, #13]
 8016ce2:	00cb      	lsls	r3, r1, #3
 8016ce4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016ce8:	7a03      	ldrb	r3, [r0, #8]
 8016cea:	0648      	lsls	r0, r1, #25
 8016cec:	ea43 0302 	orr.w	r3, r3, r2
 8016cf0:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8016cf4:	bf44      	itt	mi
 8016cf6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016cfa:	b21b      	sxthmi	r3, r3
 8016cfc:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8016d00:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8016d04:	005b      	lsls	r3, r3, #1
 8016d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016d0a:	4313      	orrs	r3, r2
 8016d0c:	115a      	asrs	r2, r3, #5
 8016d0e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016d12:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8016d16:	e047      	b.n	8016da8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8016d18:	00c2      	lsls	r2, r0, #3
 8016d1a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8016d1e:	7a22      	ldrb	r2, [r4, #8]
 8016d20:	430a      	orrs	r2, r1
 8016d22:	0641      	lsls	r1, r0, #25
 8016d24:	f640 6109 	movw	r1, #3593	@ 0xe09
 8016d28:	bf44      	itt	mi
 8016d2a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8016d2e:	b212      	sxthmi	r2, r2
 8016d30:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8016d34:	f023 0210 	bic.w	r2, r3, #16
 8016d38:	428a      	cmp	r2, r1
 8016d3a:	d003      	beq.n	8016d44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8016d3c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016d40:	4293      	cmp	r3, r2
 8016d42:	d13e      	bne.n	8016dc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8016d44:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8016d48:	f104 0808 	add.w	r8, r4, #8
 8016d4c:	4696      	mov	lr, r2
 8016d4e:	6820      	ldr	r0, [r4, #0]
 8016d50:	3408      	adds	r4, #8
 8016d52:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8016d56:	4616      	mov	r6, r2
 8016d58:	4544      	cmp	r4, r8
 8016d5a:	c603      	stmia	r6!, {r0, r1}
 8016d5c:	4632      	mov	r2, r6
 8016d5e:	d1f6      	bne.n	8016d4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8016d60:	6820      	ldr	r0, [r4, #0]
 8016d62:	6030      	str	r0, [r6, #0]
 8016d64:	4628      	mov	r0, r5
 8016d66:	88a1      	ldrh	r1, [r4, #4]
 8016d68:	4674      	mov	r4, lr
 8016d6a:	80b1      	strh	r1, [r6, #4]
 8016d6c:	4671      	mov	r1, lr
 8016d6e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8016d72:	0076      	lsls	r6, r6, #1
 8016d74:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8016d78:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8016d7c:	4316      	orrs	r6, r2
 8016d7e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8016d82:	4293      	cmp	r3, r2
 8016d84:	4662      	mov	r2, ip
 8016d86:	bf16      	itet	ne
 8016d88:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016d8c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8016d90:	b29b      	uxthne	r3, r3
 8016d92:	f7ff fed5 	bl	8016b40 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016d96:	7b43      	ldrb	r3, [r0, #13]
 8016d98:	7a82      	ldrb	r2, [r0, #10]
 8016d9a:	005b      	lsls	r3, r3, #1
 8016d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016da0:	4313      	orrs	r3, r2
 8016da2:	1af6      	subs	r6, r6, r3
 8016da4:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8016da8:	7b61      	ldrb	r1, [r4, #13]
 8016daa:	00cb      	lsls	r3, r1, #3
 8016dac:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8016db0:	7a23      	ldrb	r3, [r4, #8]
 8016db2:	4313      	orrs	r3, r2
 8016db4:	064a      	lsls	r2, r1, #25
 8016db6:	bf44      	itt	mi
 8016db8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016dbc:	b21b      	sxthmi	r3, r3
 8016dbe:	1bdb      	subs	r3, r3, r7
 8016dc0:	e719      	b.n	8016bf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	e7a5      	b.n	8016d12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016dc6:	bf00      	nop
 8016dc8:	3fc00079 	.word	0x3fc00079

08016dcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	b942      	cbnz	r2, 8016de6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016dd8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8016ddc:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8016de0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8016de4:	e047      	b.n	8016e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016de6:	7b51      	ldrb	r1, [r2, #13]
 8016de8:	8893      	ldrh	r3, [r2, #4]
 8016dea:	010d      	lsls	r5, r1, #4
 8016dec:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8016df0:	79d5      	ldrb	r5, [r2, #7]
 8016df2:	4305      	orrs	r5, r0
 8016df4:	2d04      	cmp	r5, #4
 8016df6:	bfcc      	ite	gt
 8016df8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016dfc:	f04f 0e01 	movle.w	lr, #1
 8016e00:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8016e04:	f200 80ab 	bhi.w	8016f5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016e08:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8016e0c:	4283      	cmp	r3, r0
 8016e0e:	d216      	bcs.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e10:	f240 605b 	movw	r0, #1627	@ 0x65b
 8016e14:	4283      	cmp	r3, r0
 8016e16:	d859      	bhi.n	8016ecc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016e18:	f240 6057 	movw	r0, #1623	@ 0x657
 8016e1c:	4283      	cmp	r3, r0
 8016e1e:	d20e      	bcs.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e20:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016e24:	d24a      	bcs.n	8016ebc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016e26:	f240 604e 	movw	r0, #1614	@ 0x64e
 8016e2a:	4283      	cmp	r3, r0
 8016e2c:	d207      	bcs.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e2e:	f240 601a 	movw	r0, #1562	@ 0x61a
 8016e32:	4283      	cmp	r3, r0
 8016e34:	d02a      	beq.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016e36:	d821      	bhi.n	8016e7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016e38:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8016e3c:	d35b      	bcc.n	8016ef6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016e3e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8016e42:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016e46:	f040 80d0 	bne.w	8016fea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016e4a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8016e4e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016e52:	f040 80ca 	bne.w	8016fea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016e56:	00cb      	lsls	r3, r1, #3
 8016e58:	0649      	lsls	r1, r1, #25
 8016e5a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016e5e:	7a13      	ldrb	r3, [r2, #8]
 8016e60:	ea43 0300 	orr.w	r3, r3, r0
 8016e64:	bf44      	itt	mi
 8016e66:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016e6a:	b21b      	sxthmi	r3, r3
 8016e6c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016e70:	1b5d      	subs	r5, r3, r5
 8016e72:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016e76:	4610      	mov	r0, r2
 8016e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e7c:	f240 604b 	movw	r0, #1611	@ 0x64b
 8016e80:	4283      	cmp	r3, r0
 8016e82:	d338      	bcc.n	8016ef6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016e84:	f240 604c 	movw	r0, #1612	@ 0x64c
 8016e88:	4283      	cmp	r3, r0
 8016e8a:	d9d8      	bls.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016e8c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8016e90:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8016e94:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8016e98:	f040 80f3 	bne.w	8017082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016e9c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8016ea0:	f040 80ef 	bne.w	8017082 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016ea4:	00cb      	lsls	r3, r1, #3
 8016ea6:	064e      	lsls	r6, r1, #25
 8016ea8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016eac:	7a13      	ldrb	r3, [r2, #8]
 8016eae:	ea43 0300 	orr.w	r3, r3, r0
 8016eb2:	bf44      	itt	mi
 8016eb4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016eb8:	b21b      	sxthmi	r3, r3
 8016eba:	e7d9      	b.n	8016e70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016ebc:	f240 6054 	movw	r0, #1620	@ 0x654
 8016ec0:	4283      	cmp	r3, r0
 8016ec2:	d8e3      	bhi.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ec4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8016ec8:	d9e0      	bls.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016eca:	e7b8      	b.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ecc:	f240 6074 	movw	r0, #1652	@ 0x674
 8016ed0:	4283      	cmp	r3, r0
 8016ed2:	d0b4      	beq.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ed4:	d82d      	bhi.n	8016f32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016ed6:	f240 605e 	movw	r0, #1630	@ 0x65e
 8016eda:	4283      	cmp	r3, r0
 8016edc:	d804      	bhi.n	8016ee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016ede:	f240 605d 	movw	r0, #1629	@ 0x65d
 8016ee2:	4283      	cmp	r3, r0
 8016ee4:	d3d2      	bcc.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ee6:	e7aa      	b.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ee8:	f240 605f 	movw	r0, #1631	@ 0x65f
 8016eec:	4283      	cmp	r3, r0
 8016eee:	d0cd      	beq.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016ef0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8016ef4:	d0a3      	beq.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ef6:	00cb      	lsls	r3, r1, #3
 8016ef8:	0649      	lsls	r1, r1, #25
 8016efa:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8016efe:	7a13      	ldrb	r3, [r2, #8]
 8016f00:	ea43 0300 	orr.w	r3, r3, r0
 8016f04:	bf44      	itt	mi
 8016f06:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8016f0a:	b21b      	sxthmi	r3, r3
 8016f0c:	1b5d      	subs	r5, r3, r5
 8016f0e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8016f12:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8016f16:	7b53      	ldrb	r3, [r2, #13]
 8016f18:	015b      	lsls	r3, r3, #5
 8016f1a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8016f1e:	7993      	ldrb	r3, [r2, #6]
 8016f20:	430b      	orrs	r3, r1
 8016f22:	2105      	movs	r1, #5
 8016f24:	005b      	lsls	r3, r3, #1
 8016f26:	fb93 f3f1 	sdiv	r3, r3, r1
 8016f2a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016f2e:	440b      	add	r3, r1
 8016f30:	e756      	b.n	8016de0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016f32:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8016f36:	4283      	cmp	r3, r0
 8016f38:	d809      	bhi.n	8016f4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016f3a:	f240 60df 	movw	r0, #1759	@ 0x6df
 8016f3e:	4283      	cmp	r3, r0
 8016f40:	f4bf af7d 	bcs.w	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f44:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8016f48:	2b05      	cmp	r3, #5
 8016f4a:	d8d4      	bhi.n	8016ef6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016f4c:	e777      	b.n	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f4e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8016f52:	4283      	cmp	r3, r0
 8016f54:	d09a      	beq.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f56:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8016f5a:	4283      	cmp	r3, r0
 8016f5c:	e7ca      	b.n	8016ef4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016f5e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8016f62:	d22b      	bcs.n	8016fbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016f64:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8016f68:	4283      	cmp	r3, r0
 8016f6a:	d28f      	bcs.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f6c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8016f70:	4283      	cmp	r3, r0
 8016f72:	d816      	bhi.n	8016fa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016f74:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8016f78:	4283      	cmp	r3, r0
 8016f7a:	f4bf af60 	bcs.w	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f7e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8016f82:	4283      	cmp	r3, r0
 8016f84:	d80a      	bhi.n	8016f9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016f86:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8016f8a:	4283      	cmp	r3, r0
 8016f8c:	f4bf af57 	bcs.w	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016f90:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8016f94:	4283      	cmp	r3, r0
 8016f96:	f43f af79 	beq.w	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016f9a:	e7ac      	b.n	8016ef6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016f9c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8016fa0:	e7f8      	b.n	8016f94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016fa2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8016fa6:	4283      	cmp	r3, r0
 8016fa8:	d802      	bhi.n	8016fb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016faa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8016fae:	e798      	b.n	8016ee2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016fb0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8016fb4:	4283      	cmp	r3, r0
 8016fb6:	f47f af42 	bne.w	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016fba:	e767      	b.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016fbc:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8016fc0:	4283      	cmp	r3, r0
 8016fc2:	f43f af63 	beq.w	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016fc6:	d802      	bhi.n	8016fce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016fc8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8016fcc:	e7f2      	b.n	8016fb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016fce:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8016fd2:	4283      	cmp	r3, r0
 8016fd4:	d805      	bhi.n	8016fe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016fd6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8016fda:	4283      	cmp	r3, r0
 8016fdc:	f4ff af2f 	bcc.w	8016e3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016fe0:	e754      	b.n	8016e8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016fe2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8016fe6:	4283      	cmp	r3, r0
 8016fe8:	e7af      	b.n	8016f4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016fea:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8016fee:	4617      	mov	r7, r2
 8016ff0:	f102 0808 	add.w	r8, r2, #8
 8016ff4:	4666      	mov	r6, ip
 8016ff6:	6838      	ldr	r0, [r7, #0]
 8016ff8:	3708      	adds	r7, #8
 8016ffa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016ffe:	46e6      	mov	lr, ip
 8017000:	4547      	cmp	r7, r8
 8017002:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8017006:	46f4      	mov	ip, lr
 8017008:	d1f5      	bne.n	8016ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801700a:	6838      	ldr	r0, [r7, #0]
 801700c:	f8ce 0000 	str.w	r0, [lr]
 8017010:	88b9      	ldrh	r1, [r7, #4]
 8017012:	f8ae 1004 	strh.w	r1, [lr, #4]
 8017016:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801701a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801701e:	d009      	beq.n	8017034 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8017020:	7b51      	ldrb	r1, [r2, #13]
 8017022:	7992      	ldrb	r2, [r2, #6]
 8017024:	0149      	lsls	r1, r1, #5
 8017026:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801702a:	4311      	orrs	r1, r2
 801702c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8017030:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8017034:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8017038:	b2ad      	uxth	r5, r5
 801703a:	d00d      	beq.n	8017058 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801703c:	442b      	add	r3, r5
 801703e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8017042:	b29b      	uxth	r3, r3
 8017044:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8017048:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801704c:	10db      	asrs	r3, r3, #3
 801704e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017052:	4313      	orrs	r3, r2
 8017054:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8017058:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801705c:	00cb      	lsls	r3, r1, #3
 801705e:	064f      	lsls	r7, r1, #25
 8017060:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017064:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8017068:	ea43 0302 	orr.w	r3, r3, r2
 801706c:	bf44      	itt	mi
 801706e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017072:	b21b      	sxthmi	r3, r3
 8017074:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8017078:	1b5b      	subs	r3, r3, r5
 801707a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801707e:	4632      	mov	r2, r6
 8017080:	e6f9      	b.n	8016e76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8017082:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8017086:	4617      	mov	r7, r2
 8017088:	f102 0908 	add.w	r9, r2, #8
 801708c:	4666      	mov	r6, ip
 801708e:	6838      	ldr	r0, [r7, #0]
 8017090:	3708      	adds	r7, #8
 8017092:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8017096:	46e0      	mov	r8, ip
 8017098:	454f      	cmp	r7, r9
 801709a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801709e:	46c4      	mov	ip, r8
 80170a0:	d1f5      	bne.n	801708e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80170a2:	6838      	ldr	r0, [r7, #0]
 80170a4:	f8c8 0000 	str.w	r0, [r8]
 80170a8:	88b9      	ldrh	r1, [r7, #4]
 80170aa:	f8a8 1004 	strh.w	r1, [r8, #4]
 80170ae:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80170b2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80170b6:	d009      	beq.n	80170cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80170b8:	7b51      	ldrb	r1, [r2, #13]
 80170ba:	7992      	ldrb	r2, [r2, #6]
 80170bc:	0149      	lsls	r1, r1, #5
 80170be:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80170c2:	4311      	orrs	r1, r2
 80170c4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80170c8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80170cc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80170d0:	d00e      	beq.n	80170f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80170d2:	eba3 030e 	sub.w	r3, r3, lr
 80170d6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 80170da:	b29b      	uxth	r3, r3
 80170dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80170e0:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80170e4:	10db      	asrs	r3, r3, #3
 80170e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80170ea:	4313      	orrs	r3, r2
 80170ec:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 80170f0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 80170f4:	00cb      	lsls	r3, r1, #3
 80170f6:	0648      	lsls	r0, r1, #25
 80170f8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80170fc:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8017100:	ea43 0302 	orr.w	r3, r3, r2
 8017104:	bf44      	itt	mi
 8017106:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801710a:	b21b      	sxthmi	r3, r3
 801710c:	1b5d      	subs	r5, r3, r5
 801710e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8017112:	e7b4      	b.n	801707e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08017114 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8017114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017118:	461e      	mov	r6, r3
 801711a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801711c:	4604      	mov	r4, r0
 801711e:	4617      	mov	r7, r2
 8017120:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017124:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8017128:	f7ed fdd8 	bl	8004cdc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801712c:	4605      	mov	r5, r0
 801712e:	b918      	cbnz	r0, 8017138 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8017130:	6030      	str	r0, [r6, #0]
 8017132:	4628      	mov	r0, r5
 8017134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	4601      	mov	r1, r0
 801713c:	4638      	mov	r0, r7
 801713e:	68db      	ldr	r3, [r3, #12]
 8017140:	4798      	blx	r3
 8017142:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8017146:	4602      	mov	r2, r0
 8017148:	6030      	str	r0, [r6, #0]
 801714a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801714e:	d213      	bcs.n	8017178 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8017150:	4643      	mov	r3, r8
 8017152:	4639      	mov	r1, r7
 8017154:	4620      	mov	r0, r4
 8017156:	f7ff fe39 	bl	8016dcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801715a:	6030      	str	r0, [r6, #0]
 801715c:	6833      	ldr	r3, [r6, #0]
 801715e:	b143      	cbz	r3, 8017172 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8017160:	7b5a      	ldrb	r2, [r3, #13]
 8017162:	7a9b      	ldrb	r3, [r3, #10]
 8017164:	0052      	lsls	r2, r2, #1
 8017166:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801716a:	4313      	orrs	r3, r2
 801716c:	bf0c      	ite	eq
 801716e:	2301      	moveq	r3, #1
 8017170:	2300      	movne	r3, #0
 8017172:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8017176:	e7dc      	b.n	8017132 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8017178:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801717c:	b29b      	uxth	r3, r3
 801717e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017180:	d804      	bhi.n	801718c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8017182:	4639      	mov	r1, r7
 8017184:	4620      	mov	r0, r4
 8017186:	f7ff fce7 	bl	8016b58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801718a:	e7e6      	b.n	801715a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801718c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8017190:	2b00      	cmp	r3, #0
 8017192:	d0e3      	beq.n	801715c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8017194:	f640 1302 	movw	r3, #2306	@ 0x902
 8017198:	429d      	cmp	r5, r3
 801719a:	d1df      	bne.n	801715c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801719c:	4601      	mov	r1, r0
 801719e:	4620      	mov	r0, r4
 80171a0:	f7ff fcaa 	bl	8016af8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80171a4:	e7d9      	b.n	801715a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080171a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80171a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171aa:	461e      	mov	r6, r3
 80171ac:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80171ae:	4604      	mov	r4, r0
 80171b0:	4617      	mov	r7, r2
 80171b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80171b6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80171ba:	f7ed fd8f 	bl	8004cdc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80171be:	4605      	mov	r5, r0
 80171c0:	b918      	cbnz	r0, 80171ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80171c2:	6030      	str	r0, [r6, #0]
 80171c4:	4628      	mov	r0, r5
 80171c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	4601      	mov	r1, r0
 80171ce:	4638      	mov	r0, r7
 80171d0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80171d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171d8:	47c8      	blx	r9
 80171da:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 80171de:	4602      	mov	r2, r0
 80171e0:	6030      	str	r0, [r6, #0]
 80171e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80171e6:	d213      	bcs.n	8017210 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80171e8:	4643      	mov	r3, r8
 80171ea:	4639      	mov	r1, r7
 80171ec:	4620      	mov	r0, r4
 80171ee:	f7ff fded 	bl	8016dcc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80171f2:	6030      	str	r0, [r6, #0]
 80171f4:	6833      	ldr	r3, [r6, #0]
 80171f6:	b143      	cbz	r3, 801720a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80171f8:	7b5a      	ldrb	r2, [r3, #13]
 80171fa:	7a9b      	ldrb	r3, [r3, #10]
 80171fc:	0052      	lsls	r2, r2, #1
 80171fe:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8017202:	4313      	orrs	r3, r2
 8017204:	bf0c      	ite	eq
 8017206:	2301      	moveq	r3, #1
 8017208:	2300      	movne	r3, #0
 801720a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801720e:	e7d9      	b.n	80171c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8017210:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8017214:	b29b      	uxth	r3, r3
 8017216:	2b7f      	cmp	r3, #127	@ 0x7f
 8017218:	d804      	bhi.n	8017224 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801721a:	4639      	mov	r1, r7
 801721c:	4620      	mov	r0, r4
 801721e:	f7ff fc9b 	bl	8016b58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8017222:	e7e6      	b.n	80171f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8017224:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8017228:	2b00      	cmp	r3, #0
 801722a:	d0e3      	beq.n	80171f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801722c:	f640 1302 	movw	r3, #2306	@ 0x902
 8017230:	429d      	cmp	r5, r3
 8017232:	d1df      	bne.n	80171f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8017234:	4601      	mov	r1, r0
 8017236:	4620      	mov	r0, r4
 8017238:	f7ff fc5e 	bl	8016af8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801723c:	e7d9      	b.n	80171f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801723e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801723e:	b510      	push	{r4, lr}
 8017240:	4604      	mov	r4, r0
 8017242:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8017246:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017248:	b1e1      	cbz	r1, 8017284 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801724a:	2b0a      	cmp	r3, #10
 801724c:	d02d      	beq.n	80172aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801724e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8017250:	3901      	subs	r1, #1
 8017252:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8017256:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8017258:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801725c:	1c51      	adds	r1, r2, #1
 801725e:	b289      	uxth	r1, r1
 8017260:	2901      	cmp	r1, #1
 8017262:	bf8a      	itet	hi
 8017264:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017268:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801726a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801726c:	1c5a      	adds	r2, r3, #1
 801726e:	8722      	strh	r2, [r4, #56]	@ 0x38
 8017270:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017272:	4413      	add	r3, r2
 8017274:	b29b      	uxth	r3, r3
 8017276:	2b09      	cmp	r3, #9
 8017278:	bf88      	it	hi
 801727a:	3b0a      	subhi	r3, #10
 801727c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017280:	8458      	strh	r0, [r3, #34]	@ 0x22
 8017282:	e7de      	b.n	8017242 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8017284:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017286:	2b0a      	cmp	r3, #10
 8017288:	d00f      	beq.n	80172aa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801728a:	4620      	mov	r0, r4
 801728c:	f7ff fbf3 	bl	8016a76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8017290:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8017292:	1c5a      	adds	r2, r3, #1
 8017294:	8722      	strh	r2, [r4, #56]	@ 0x38
 8017296:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8017298:	4413      	add	r3, r2
 801729a:	b29b      	uxth	r3, r3
 801729c:	2b09      	cmp	r3, #9
 801729e:	bf88      	it	hi
 80172a0:	3b0a      	subhi	r3, #10
 80172a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80172a6:	8458      	strh	r0, [r3, #34]	@ 0x22
 80172a8:	e7ec      	b.n	8017284 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80172aa:	bd10      	pop	{r4, pc}

080172ac <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80172ac:	b538      	push	{r3, r4, r5, lr}
 80172ae:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80172b0:	4604      	mov	r4, r0
 80172b2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80172b6:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80172b8:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80172ba:	3a01      	subs	r2, #1
 80172bc:	8702      	strh	r2, [r0, #56]	@ 0x38
 80172be:	1c5a      	adds	r2, r3, #1
 80172c0:	b292      	uxth	r2, r2
 80172c2:	2a09      	cmp	r2, #9
 80172c4:	bf8a      	itet	hi
 80172c6:	3b09      	subhi	r3, #9
 80172c8:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80172ca:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80172cc:	f7ff ffb7 	bl	801723e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80172d0:	8c23      	ldrh	r3, [r4, #32]
 80172d2:	2b01      	cmp	r3, #1
 80172d4:	bf9c      	itt	ls
 80172d6:	3301      	addls	r3, #1
 80172d8:	8423      	strhls	r3, [r4, #32]
 80172da:	8be3      	ldrh	r3, [r4, #30]
 80172dc:	b90b      	cbnz	r3, 80172e2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80172de:	2302      	movs	r3, #2
 80172e0:	83e3      	strh	r3, [r4, #30]
 80172e2:	8be3      	ldrh	r3, [r4, #30]
 80172e4:	4628      	mov	r0, r5
 80172e6:	3b01      	subs	r3, #1
 80172e8:	b29b      	uxth	r3, r3
 80172ea:	83e3      	strh	r3, [r4, #30]
 80172ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80172f0:	8365      	strh	r5, [r4, #26]
 80172f2:	bd38      	pop	{r3, r4, r5, pc}

080172f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80172f4:	428a      	cmp	r2, r1
 80172f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172fa:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 80172fc:	d932      	bls.n	8017364 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80172fe:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8017300:	1a54      	subs	r4, r2, r1
 8017302:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8017306:	19ee      	adds	r6, r5, r7
 8017308:	fa1f fe84 	uxth.w	lr, r4
 801730c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8017310:	3e01      	subs	r6, #1
 8017312:	b2b4      	uxth	r4, r6
 8017314:	eba4 090e 	sub.w	r9, r4, lr
 8017318:	fa1f f989 	uxth.w	r9, r9
 801731c:	2c09      	cmp	r4, #9
 801731e:	4626      	mov	r6, r4
 8017320:	bf88      	it	hi
 8017322:	f1a4 060a 	subhi.w	r6, r4, #10
 8017326:	f1bc 0f00 	cmp.w	ip, #0
 801732a:	f104 34ff 	add.w	r4, r4, #4294967295
 801732e:	bf08      	it	eq
 8017330:	f04f 0c02 	moveq.w	ip, #2
 8017334:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017338:	b2a4      	uxth	r4, r4
 801733a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801733e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8017342:	454c      	cmp	r4, r9
 8017344:	fa1f fc8c 	uxth.w	ip, ip
 8017348:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801734c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8017350:	d1e4      	bne.n	801731c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8017352:	eba5 050e 	sub.w	r5, r5, lr
 8017356:	eb0e 0408 	add.w	r4, lr, r8
 801735a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801735e:	8705      	strh	r5, [r0, #56]	@ 0x38
 8017360:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8017364:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8017366:	250a      	movs	r5, #10
 8017368:	1a64      	subs	r4, r4, r1
 801736a:	4439      	add	r1, r7
 801736c:	b289      	uxth	r1, r1
 801736e:	8704      	strh	r4, [r0, #56]	@ 0x38
 8017370:	2909      	cmp	r1, #9
 8017372:	bf88      	it	hi
 8017374:	390a      	subhi	r1, #10
 8017376:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8017378:	b18a      	cbz	r2, 801739e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801737a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801737c:	3a01      	subs	r2, #1
 801737e:	3101      	adds	r1, #1
 8017380:	b292      	uxth	r2, r2
 8017382:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8017386:	8701      	strh	r1, [r0, #56]	@ 0x38
 8017388:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801738a:	b901      	cbnz	r1, 801738e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801738c:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801738e:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8017390:	3901      	subs	r1, #1
 8017392:	b289      	uxth	r1, r1
 8017394:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8017396:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801739a:	844c      	strh	r4, [r1, #34]	@ 0x22
 801739c:	e7ec      	b.n	8017378 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801739e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173a2:	f7ff bf4c 	b.w	801723e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080173a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80173a6:	b570      	push	{r4, r5, r6, lr}
 80173a8:	2500      	movs	r5, #0
 80173aa:	4295      	cmp	r5, r2
 80173ac:	d011      	beq.n	80173d2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80173ae:	8bc4      	ldrh	r4, [r0, #30]
 80173b0:	f831 6b02 	ldrh.w	r6, [r1], #2
 80173b4:	4414      	add	r4, r2
 80173b6:	3c01      	subs	r4, #1
 80173b8:	1b64      	subs	r4, r4, r5
 80173ba:	b2a4      	uxth	r4, r4
 80173bc:	2c01      	cmp	r4, #1
 80173be:	bf88      	it	hi
 80173c0:	3c02      	subhi	r4, #2
 80173c2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80173c6:	8b64      	ldrh	r4, [r4, #26]
 80173c8:	42b4      	cmp	r4, r6
 80173ca:	d117      	bne.n	80173fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80173cc:	3501      	adds	r5, #1
 80173ce:	b2ad      	uxth	r5, r5
 80173d0:	e7eb      	b.n	80173aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80173d2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80173d6:	2400      	movs	r4, #0
 80173d8:	4413      	add	r3, r2
 80173da:	b2a2      	uxth	r2, r4
 80173dc:	429a      	cmp	r2, r3
 80173de:	da0f      	bge.n	8017400 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80173e0:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 80173e2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80173e6:	3401      	adds	r4, #1
 80173e8:	4432      	add	r2, r6
 80173ea:	b292      	uxth	r2, r2
 80173ec:	2a09      	cmp	r2, #9
 80173ee:	bf88      	it	hi
 80173f0:	3a0a      	subhi	r2, #10
 80173f2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80173f6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80173f8:	42aa      	cmp	r2, r5
 80173fa:	d0ee      	beq.n	80173da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80173fc:	2000      	movs	r0, #0
 80173fe:	bd70      	pop	{r4, r5, r6, pc}
 8017400:	2001      	movs	r0, #1
 8017402:	e7fc      	b.n	80173fe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08017404 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8017404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017408:	4605      	mov	r5, r0
 801740a:	4616      	mov	r6, r2
 801740c:	1c8c      	adds	r4, r1, #2
 801740e:	8809      	ldrh	r1, [r1, #0]
 8017410:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8017414:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017418:	42b3      	cmp	r3, r6
 801741a:	d124      	bne.n	8017466 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801741c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017420:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8017424:	f001 070f 	and.w	r7, r1, #15
 8017428:	4652      	mov	r2, sl
 801742a:	f8cd 8000 	str.w	r8, [sp]
 801742e:	464b      	mov	r3, r9
 8017430:	4621      	mov	r1, r4
 8017432:	4628      	mov	r0, r5
 8017434:	f7ff ffb7 	bl	80173a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017438:	4683      	mov	fp, r0
 801743a:	b168      	cbz	r0, 8017458 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801743c:	eb0a 0109 	add.w	r1, sl, r9
 8017440:	463a      	mov	r2, r7
 8017442:	4628      	mov	r0, r5
 8017444:	4441      	add	r1, r8
 8017446:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801744a:	4649      	mov	r1, r9
 801744c:	f7ff ff52 	bl	80172f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017450:	4658      	mov	r0, fp
 8017452:	b003      	add	sp, #12
 8017454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017458:	eb07 010a 	add.w	r1, r7, sl
 801745c:	4449      	add	r1, r9
 801745e:	4441      	add	r1, r8
 8017460:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8017464:	e7d2      	b.n	801740c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8017466:	f04f 0b00 	mov.w	fp, #0
 801746a:	e7f1      	b.n	8017450 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801746c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801746c:	b570      	push	{r4, r5, r6, lr}
 801746e:	8810      	ldrh	r0, [r2, #0]
 8017470:	4298      	cmp	r0, r3
 8017472:	d817      	bhi.n	80174a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017474:	1e48      	subs	r0, r1, #1
 8017476:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801747a:	4298      	cmp	r0, r3
 801747c:	d312      	bcc.n	80174a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801747e:	2400      	movs	r4, #0
 8017480:	428c      	cmp	r4, r1
 8017482:	d20f      	bcs.n	80174a4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017484:	1860      	adds	r0, r4, r1
 8017486:	1040      	asrs	r0, r0, #1
 8017488:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801748c:	0085      	lsls	r5, r0, #2
 801748e:	42b3      	cmp	r3, r6
 8017490:	d902      	bls.n	8017498 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8017492:	3001      	adds	r0, #1
 8017494:	b284      	uxth	r4, r0
 8017496:	e7f3      	b.n	8017480 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8017498:	d201      	bcs.n	801749e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801749a:	b281      	uxth	r1, r0
 801749c:	e7f0      	b.n	8017480 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801749e:	442a      	add	r2, r5
 80174a0:	8850      	ldrh	r0, [r2, #2]
 80174a2:	bd70      	pop	{r4, r5, r6, pc}
 80174a4:	2000      	movs	r0, #0
 80174a6:	e7fc      	b.n	80174a2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080174a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80174a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ac:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80174ae:	4604      	mov	r4, r0
 80174b0:	260b      	movs	r6, #11
 80174b2:	886f      	ldrh	r7, [r5, #2]
 80174b4:	087f      	lsrs	r7, r7, #1
 80174b6:	3e01      	subs	r6, #1
 80174b8:	d013      	beq.n	80174e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80174ba:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80174bc:	462a      	mov	r2, r5
 80174be:	4639      	mov	r1, r7
 80174c0:	4620      	mov	r0, r4
 80174c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80174c6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80174ca:	4643      	mov	r3, r8
 80174cc:	f7ff ffce 	bl	801746c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80174d0:	b138      	cbz	r0, 80174e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80174d2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80174d6:	4642      	mov	r2, r8
 80174d8:	4620      	mov	r0, r4
 80174da:	f7ff ff93 	bl	8017404 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80174de:	2800      	cmp	r0, #0
 80174e0:	d1e9      	bne.n	80174b6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80174e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080174e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80174e8:	b570      	push	{r4, r5, r6, lr}
 80174ea:	694a      	ldr	r2, [r1, #20]
 80174ec:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80174ee:	684b      	ldr	r3, [r1, #4]
 80174f0:	1b54      	subs	r4, r2, r5
 80174f2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 80174f4:	f000 8106 	beq.w	8017704 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80174f8:	1b9b      	subs	r3, r3, r6
 80174fa:	d003      	beq.n	8017504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80174fc:	4363      	muls	r3, r4
 80174fe:	2210      	movs	r2, #16
 8017500:	fb93 f3f2 	sdiv	r3, r3, r2
 8017504:	680c      	ldr	r4, [r1, #0]
 8017506:	698a      	ldr	r2, [r1, #24]
 8017508:	1b65      	subs	r5, r4, r5
 801750a:	f000 80fd 	beq.w	8017708 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801750e:	1b92      	subs	r2, r2, r6
 8017510:	d003      	beq.n	801751a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017512:	436a      	muls	r2, r5
 8017514:	2410      	movs	r4, #16
 8017516:	fb92 f2f4 	sdiv	r2, r2, r4
 801751a:	1a9b      	subs	r3, r3, r2
 801751c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8017744 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017520:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017524:	460a      	mov	r2, r1
 8017526:	ee07 3a90 	vmov	s15, r3
 801752a:	f100 040c 	add.w	r4, r0, #12
 801752e:	4603      	mov	r3, r0
 8017530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017534:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017538:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801753c:	eeb1 6a43 	vneg.f32	s12, s6
 8017540:	edd2 7a02 	vldr	s15, [r2, #8]
 8017544:	3214      	adds	r2, #20
 8017546:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801754a:	ece3 6a01 	vstmia	r3!, {s13}
 801754e:	429c      	cmp	r4, r3
 8017550:	ed52 7a02 	vldr	s15, [r2, #-8]
 8017554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017558:	edc3 7a02 	vstr	s15, [r3, #8]
 801755c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017560:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017564:	edc3 7a05 	vstr	s15, [r3, #20]
 8017568:	d1ea      	bne.n	8017540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801756a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801756c:	698b      	ldr	r3, [r1, #24]
 801756e:	edd0 4a02 	vldr	s9, [r0, #8]
 8017572:	1a9b      	subs	r3, r3, r2
 8017574:	edd0 3a00 	vldr	s7, [r0]
 8017578:	edd0 6a01 	vldr	s13, [r0, #4]
 801757c:	ee07 3a90 	vmov	s15, r3
 8017580:	684b      	ldr	r3, [r1, #4]
 8017582:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017586:	ed90 5a05 	vldr	s10, [r0, #20]
 801758a:	1a9b      	subs	r3, r3, r2
 801758c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017590:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8017594:	ed90 2a03 	vldr	s4, [r0, #12]
 8017598:	ee07 3a10 	vmov	s14, r3
 801759c:	edd0 5a04 	vldr	s11, [r0, #16]
 80175a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80175a4:	ed90 1a07 	vldr	s2, [r0, #28]
 80175a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80175ac:	edd0 2a06 	vldr	s5, [r0, #24]
 80175b0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80175b4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80175b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80175bc:	ee32 5a45 	vsub.f32	s10, s4, s10
 80175c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80175c4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80175c8:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80175cc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80175ce:	694a      	ldr	r2, [r1, #20]
 80175d0:	1b13      	subs	r3, r2, r4
 80175d2:	ee07 3a10 	vmov	s14, r3
 80175d6:	680b      	ldr	r3, [r1, #0]
 80175d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80175dc:	1b1b      	subs	r3, r3, r4
 80175de:	ee27 7a04 	vmul.f32	s14, s14, s8
 80175e2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80175e6:	ee07 3a10 	vmov	s14, r3
 80175ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80175ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 80175f2:	eee6 4a87 	vfma.f32	s9, s13, s14
 80175f6:	ee64 4a86 	vmul.f32	s9, s9, s12
 80175fa:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 80175fe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017600:	698b      	ldr	r3, [r1, #24]
 8017602:	1a9b      	subs	r3, r3, r2
 8017604:	ee06 3a90 	vmov	s13, r3
 8017608:	684b      	ldr	r3, [r1, #4]
 801760a:	1a9b      	subs	r3, r3, r2
 801760c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017610:	ee07 3a10 	vmov	s14, r3
 8017614:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801761c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017620:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017624:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017628:	ee66 6a83 	vmul.f32	s13, s13, s6
 801762c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8017630:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8017632:	694a      	ldr	r2, [r1, #20]
 8017634:	1b13      	subs	r3, r2, r4
 8017636:	ee07 3a10 	vmov	s14, r3
 801763a:	680b      	ldr	r3, [r1, #0]
 801763c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017640:	1b1b      	subs	r3, r3, r4
 8017642:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017646:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801764a:	ee07 3a10 	vmov	s14, r3
 801764e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017652:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017656:	eea5 5a87 	vfma.f32	s10, s11, s14
 801765a:	edd0 5a08 	vldr	s11, [r0, #32]
 801765e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8017662:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8017666:	ee25 5a06 	vmul.f32	s10, s10, s12
 801766a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801766e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8017670:	698b      	ldr	r3, [r1, #24]
 8017672:	1a9b      	subs	r3, r3, r2
 8017674:	ee07 3a10 	vmov	s14, r3
 8017678:	684b      	ldr	r3, [r1, #4]
 801767a:	1a9b      	subs	r3, r3, r2
 801767c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017680:	ee01 3a90 	vmov	s3, r3
 8017684:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017688:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801768c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017690:	ee61 1a84 	vmul.f32	s3, s3, s8
 8017694:	eea1 7a21 	vfma.f32	s14, s2, s3
 8017698:	ee27 7a03 	vmul.f32	s14, s14, s6
 801769c:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80176a0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80176a2:	694a      	ldr	r2, [r1, #20]
 80176a4:	1b13      	subs	r3, r2, r4
 80176a6:	ee03 3a10 	vmov	s6, r3
 80176aa:	680b      	ldr	r3, [r1, #0]
 80176ac:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80176b0:	1b1b      	subs	r3, r3, r4
 80176b2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80176b6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80176ba:	ee03 3a10 	vmov	s6, r3
 80176be:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80176c2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80176c6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80176ca:	ee25 6a86 	vmul.f32	s12, s11, s12
 80176ce:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80176d2:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80176d6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80176da:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80176de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176e2:	dd13      	ble.n	801770c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80176e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80176e8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80176ec:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80176ee:	eee3 7a87 	vfma.f32	s15, s7, s14
 80176f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80176f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176fa:	dd15      	ble.n	8017728 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80176fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017700:	6403      	str	r3, [r0, #64]	@ 0x40
 8017702:	bd70      	pop	{r4, r5, r6, pc}
 8017704:	4623      	mov	r3, r4
 8017706:	e6fd      	b.n	8017504 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017708:	462a      	mov	r2, r5
 801770a:	e706      	b.n	801751a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801770c:	d502      	bpl.n	8017714 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801770e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8017712:	e7e9      	b.n	80176e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8017714:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017718:	eea3 2a85 	vfma.f32	s4, s7, s10
 801771c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017724:	dade      	bge.n	80176e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8017726:	e7f2      	b.n	801770e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017728:	d502      	bpl.n	8017730 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801772a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801772e:	e7e7      	b.n	8017700 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017730:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8017734:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017738:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017740:	dadc      	bge.n	80176fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8017742:	e7f2      	b.n	801772a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8017744:	3d800000 	.word	0x3d800000

08017748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801774c:	2714      	movs	r7, #20
 801774e:	435f      	muls	r7, r3
 8017750:	eb02 0c07 	add.w	ip, r2, r7
 8017754:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017758:	f115 0e0f 	adds.w	lr, r5, #15
 801775c:	f100 80a2 	bmi.w	80178a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017760:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8017764:	9c08      	ldr	r4, [sp, #32]
 8017766:	2614      	movs	r6, #20
 8017768:	f8c0 e014 	str.w	lr, [r0, #20]
 801776c:	4366      	muls	r6, r4
 801776e:	eb02 0806 	add.w	r8, r2, r6
 8017772:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017776:	f115 040f 	adds.w	r4, r5, #15
 801777a:	f100 809f 	bmi.w	80178bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801777e:	1124      	asrs	r4, r4, #4
 8017780:	eba4 040e 	sub.w	r4, r4, lr
 8017784:	6184      	str	r4, [r0, #24]
 8017786:	2c00      	cmp	r4, #0
 8017788:	f000 808a 	beq.w	80178a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801778c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8017790:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017794:	5995      	ldr	r5, [r2, r6]
 8017796:	eba4 0809 	sub.w	r8, r4, r9
 801779a:	59d4      	ldr	r4, [r2, r7]
 801779c:	eba5 0a04 	sub.w	sl, r5, r4
 80177a0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80177a4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80177a8:	fb0e fe05 	mul.w	lr, lr, r5
 80177ac:	fb0a ee19 	mls	lr, sl, r9, lr
 80177b0:	fb08 e404 	mla	r4, r8, r4, lr
 80177b4:	3c01      	subs	r4, #1
 80177b6:	19a4      	adds	r4, r4, r6
 80177b8:	f100 808c 	bmi.w	80178d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80177bc:	fb94 fef6 	sdiv	lr, r4, r6
 80177c0:	fb06 441e 	mls	r4, r6, lr, r4
 80177c4:	f8c0 e000 	str.w	lr, [r0]
 80177c8:	6104      	str	r4, [r0, #16]
 80177ca:	2d00      	cmp	r5, #0
 80177cc:	f2c0 8095 	blt.w	80178fa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80177d0:	fb95 f4f6 	sdiv	r4, r5, r6
 80177d4:	fb06 5514 	mls	r5, r6, r4, r5
 80177d8:	6044      	str	r4, [r0, #4]
 80177da:	6085      	str	r5, [r0, #8]
 80177dc:	60c6      	str	r6, [r0, #12]
 80177de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80177e2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80177e6:	6945      	ldr	r5, [r0, #20]
 80177e8:	59d2      	ldr	r2, [r2, r7]
 80177ea:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80177ee:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 801791c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80177f2:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80177f6:	ee07 4a10 	vmov	s14, r4
 80177fa:	6804      	ldr	r4, [r0, #0]
 80177fc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017800:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017804:	ee07 2a90 	vmov	s15, r2
 8017808:	ee27 7a26 	vmul.f32	s14, s14, s13
 801780c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017810:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017814:	edd3 6a00 	vldr	s13, [r3]
 8017818:	eee6 6a07 	vfma.f32	s13, s12, s14
 801781c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8017820:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017824:	edc0 6a07 	vstr	s13, [r0, #28]
 8017828:	edd0 6a01 	vldr	s13, [r0, #4]
 801782c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8017830:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017834:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8017838:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801783c:	ed80 6a08 	vstr	s12, [r0, #32]
 8017840:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8017842:	6242      	str	r2, [r0, #36]	@ 0x24
 8017844:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8017848:	ed93 6a03 	vldr	s12, [r3, #12]
 801784c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017850:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017854:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017858:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801785c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8017860:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8017864:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017868:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801786c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801786e:	6302      	str	r2, [r0, #48]	@ 0x30
 8017870:	ed93 6a06 	vldr	s12, [r3, #24]
 8017874:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8017878:	eea5 6a87 	vfma.f32	s12, s11, s14
 801787c:	eeb0 7a46 	vmov.f32	s14, s12
 8017880:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8017884:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017888:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801788c:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8017890:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8017894:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017898:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801789c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801789e:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80178a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a4:	2410      	movs	r4, #16
 80178a6:	f1c5 0501 	rsb	r5, r5, #1
 80178aa:	fb9e fef4 	sdiv	lr, lr, r4
 80178ae:	f015 050f 	ands.w	r5, r5, #15
 80178b2:	bf18      	it	ne
 80178b4:	2501      	movne	r5, #1
 80178b6:	ebae 0e05 	sub.w	lr, lr, r5
 80178ba:	e753      	b.n	8017764 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80178bc:	f04f 0910 	mov.w	r9, #16
 80178c0:	f1c5 0501 	rsb	r5, r5, #1
 80178c4:	fb94 f4f9 	sdiv	r4, r4, r9
 80178c8:	f015 050f 	ands.w	r5, r5, #15
 80178cc:	bf18      	it	ne
 80178ce:	2501      	movne	r5, #1
 80178d0:	1b64      	subs	r4, r4, r5
 80178d2:	e755      	b.n	8017780 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80178d4:	4264      	negs	r4, r4
 80178d6:	fb94 fef6 	sdiv	lr, r4, r6
 80178da:	f1ce 0800 	rsb	r8, lr, #0
 80178de:	fb06 441e 	mls	r4, r6, lr, r4
 80178e2:	f8c0 8000 	str.w	r8, [r0]
 80178e6:	6104      	str	r4, [r0, #16]
 80178e8:	2c00      	cmp	r4, #0
 80178ea:	f43f af6e 	beq.w	80177ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80178ee:	ea6f 0e0e 	mvn.w	lr, lr
 80178f2:	1b34      	subs	r4, r6, r4
 80178f4:	f8c0 e000 	str.w	lr, [r0]
 80178f8:	e766      	b.n	80177c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80178fa:	426d      	negs	r5, r5
 80178fc:	fb95 f4f6 	sdiv	r4, r5, r6
 8017900:	f1c4 0e00 	rsb	lr, r4, #0
 8017904:	fb06 5514 	mls	r5, r6, r4, r5
 8017908:	f8c0 e004 	str.w	lr, [r0, #4]
 801790c:	6085      	str	r5, [r0, #8]
 801790e:	2d00      	cmp	r5, #0
 8017910:	f43f af64 	beq.w	80177dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8017914:	43e4      	mvns	r4, r4
 8017916:	1b75      	subs	r5, r6, r5
 8017918:	6044      	str	r4, [r0, #4]
 801791a:	e75e      	b.n	80177da <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801791c:	3d800000 	.word	0x3d800000

08017920 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017920:	4b01      	ldr	r3, [pc, #4]	@ (8017928 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8017922:	6018      	str	r0, [r3, #0]
 8017924:	4770      	bx	lr
 8017926:	bf00      	nop
 8017928:	240253e0 	.word	0x240253e0

0801792c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801792c:	4b06      	ldr	r3, [pc, #24]	@ (8017948 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801792e:	881a      	ldrh	r2, [r3, #0]
 8017930:	4282      	cmp	r2, r0
 8017932:	d807      	bhi.n	8017944 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8017934:	4b05      	ldr	r3, [pc, #20]	@ (801794c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8017936:	881b      	ldrh	r3, [r3, #0]
 8017938:	4413      	add	r3, r2
 801793a:	4298      	cmp	r0, r3
 801793c:	bfac      	ite	ge
 801793e:	2000      	movge	r0, #0
 8017940:	2001      	movlt	r0, #1
 8017942:	4770      	bx	lr
 8017944:	2000      	movs	r0, #0
 8017946:	4770      	bx	lr
 8017948:	24025400 	.word	0x24025400
 801794c:	24025404 	.word	0x24025404

08017950 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017950:	b508      	push	{r3, lr}
 8017952:	4601      	mov	r1, r0
 8017954:	f7ff ffea 	bl	801792c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017958:	b118      	cbz	r0, 8017962 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801795a:	4b02      	ldr	r3, [pc, #8]	@ (8017964 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8017962:	bd08      	pop	{r3, pc}
 8017964:	240253e4 	.word	0x240253e4

08017968 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8017968:	b538      	push	{r3, r4, r5, lr}
 801796a:	4604      	mov	r4, r0
 801796c:	f7ff ffde 	bl	801792c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017970:	b1d8      	cbz	r0, 80179aa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8017972:	4b0f      	ldr	r3, [pc, #60]	@ (80179b0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 8017974:	881b      	ldrh	r3, [r3, #0]
 8017976:	1ae4      	subs	r4, r4, r3
 8017978:	230e      	movs	r3, #14
 801797a:	4363      	muls	r3, r4
 801797c:	4c0d      	ldr	r4, [pc, #52]	@ (80179b4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801797e:	6825      	ldr	r5, [r4, #0]
 8017980:	18ea      	adds	r2, r5, r3
 8017982:	7b12      	ldrb	r2, [r2, #12]
 8017984:	f012 0220 	ands.w	r2, r2, #32
 8017988:	d010      	beq.n	80179ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801798a:	f9b1 2000 	ldrsh.w	r2, [r1]
 801798e:	52ea      	strh	r2, [r5, r3]
 8017990:	6822      	ldr	r2, [r4, #0]
 8017992:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017996:	441a      	add	r2, r3
 8017998:	8055      	strh	r5, [r2, #2]
 801799a:	6822      	ldr	r2, [r4, #0]
 801799c:	4413      	add	r3, r2
 801799e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80179a2:	809a      	strh	r2, [r3, #4]
 80179a4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80179a8:	80da      	strh	r2, [r3, #6]
 80179aa:	bd38      	pop	{r3, r4, r5, pc}
 80179ac:	4610      	mov	r0, r2
 80179ae:	e7fc      	b.n	80179aa <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80179b0:	24025400 	.word	0x24025400
 80179b4:	240253e8 	.word	0x240253e8

080179b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80179b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80179bc:	4606      	mov	r6, r0
 80179be:	460c      	mov	r4, r1
 80179c0:	f7ff ffb4 	bl	801792c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80179c4:	b918      	cbnz	r0, 80179ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80179c6:	2000      	movs	r0, #0
 80179c8:	b002      	add	sp, #8
 80179ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179ce:	4608      	mov	r0, r1
 80179d0:	f7f7 fa1d 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	d1f6      	bne.n	80179c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80179d8:	4b3f      	ldr	r3, [pc, #252]	@ (8017ad8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80179da:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8017adc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80179de:	881d      	ldrh	r5, [r3, #0]
 80179e0:	f8d9 a000 	ldr.w	sl, [r9]
 80179e4:	46c8      	mov	r8, r9
 80179e6:	1b73      	subs	r3, r6, r5
 80179e8:	250e      	movs	r5, #14
 80179ea:	435d      	muls	r5, r3
 80179ec:	eb0a 0705 	add.w	r7, sl, r5
 80179f0:	7b3b      	ldrb	r3, [r7, #12]
 80179f2:	f013 0f20 	tst.w	r3, #32
 80179f6:	d0e6      	beq.n	80179c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80179f8:	4621      	mov	r1, r4
 80179fa:	4638      	mov	r0, r7
 80179fc:	f7fc fdca 	bl	8014594 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	d1e1      	bne.n	80179c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017a04:	4639      	mov	r1, r7
 8017a06:	4620      	mov	r0, r4
 8017a08:	f7fc fdc4 	bl	8014594 <_ZNK8touchgfx4Rect8includesERKS0_>
 8017a0c:	b108      	cbz	r0, 8017a12 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8017a0e:	4621      	mov	r1, r4
 8017a10:	e020      	b.n	8017a54 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8017a12:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017a16:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8017a1a:	429a      	cmp	r2, r3
 8017a1c:	d11e      	bne.n	8017a5c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017a1e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017a22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8017a26:	429a      	cmp	r2, r3
 8017a28:	d118      	bne.n	8017a5c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017a2a:	6820      	ldr	r0, [r4, #0]
 8017a2c:	466b      	mov	r3, sp
 8017a2e:	6861      	ldr	r1, [r4, #4]
 8017a30:	c303      	stmia	r3!, {r0, r1}
 8017a32:	4639      	mov	r1, r7
 8017a34:	4668      	mov	r0, sp
 8017a36:	f7fc fdd3 	bl	80145e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a3a:	f8d9 3000 	ldr.w	r3, [r9]
 8017a3e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017a42:	442b      	add	r3, r5
 8017a44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017a48:	4413      	add	r3, r2
 8017a4a:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	dc04      	bgt.n	8017a5c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8017a52:	4669      	mov	r1, sp
 8017a54:	4630      	mov	r0, r6
 8017a56:	f7ff ff87 	bl	8017968 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8017a5a:	e7b5      	b.n	80179c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8017a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8017a60:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017a64:	442b      	add	r3, r5
 8017a66:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017a6a:	4291      	cmp	r1, r2
 8017a6c:	d119      	bne.n	8017aa2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017a6e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017a72:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8017a76:	4291      	cmp	r1, r2
 8017a78:	d113      	bne.n	8017aa2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8017a7a:	6820      	ldr	r0, [r4, #0]
 8017a7c:	466a      	mov	r2, sp
 8017a7e:	6861      	ldr	r1, [r4, #4]
 8017a80:	c203      	stmia	r2!, {r0, r1}
 8017a82:	4619      	mov	r1, r3
 8017a84:	4668      	mov	r0, sp
 8017a86:	f7fc fdab 	bl	80145e0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8017a8e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017a92:	442b      	add	r3, r5
 8017a94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017a98:	4413      	add	r3, r2
 8017a9a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	ddd7      	ble.n	8017a52 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f7f7 f9b3 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017aa8:	b990      	cbnz	r0, 8017ad0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8017aaa:	88a7      	ldrh	r7, [r4, #4]
 8017aac:	88e3      	ldrh	r3, [r4, #6]
 8017aae:	fb17 f703 	smulbb	r7, r7, r3
 8017ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8017ab6:	441d      	add	r5, r3
 8017ab8:	4628      	mov	r0, r5
 8017aba:	f7f7 f9a8 	bl	800ee0e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017abe:	b948      	cbnz	r0, 8017ad4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8017ac0:	88ab      	ldrh	r3, [r5, #4]
 8017ac2:	88ea      	ldrh	r2, [r5, #6]
 8017ac4:	fb13 f302 	smulbb	r3, r3, r2
 8017ac8:	42bb      	cmp	r3, r7
 8017aca:	f6bf af7c 	bge.w	80179c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8017ace:	e79e      	b.n	8017a0e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8017ad0:	2700      	movs	r7, #0
 8017ad2:	e7ee      	b.n	8017ab2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	e7f7      	b.n	8017ac8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8017ad8:	24025400 	.word	0x24025400
 8017adc:	240253e8 	.word	0x240253e8

08017ae0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ae2:	4c24      	ldr	r4, [pc, #144]	@ (8017b74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017ae4:	6823      	ldr	r3, [r4, #0]
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	d042      	beq.n	8017b70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017aea:	4a23      	ldr	r2, [pc, #140]	@ (8017b78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8017aec:	4d23      	ldr	r5, [pc, #140]	@ (8017b7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8017aee:	8811      	ldrh	r1, [r2, #0]
 8017af0:	f8b5 c000 	ldrh.w	ip, [r5]
 8017af4:	4822      	ldr	r0, [pc, #136]	@ (8017b80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017af6:	4461      	add	r1, ip
 8017af8:	1c4a      	adds	r2, r1, #1
 8017afa:	008f      	lsls	r7, r1, #2
 8017afc:	f022 0201 	bic.w	r2, r2, #1
 8017b00:	19de      	adds	r6, r3, r7
 8017b02:	0412      	lsls	r2, r2, #16
 8017b04:	6006      	str	r6, [r0, #0]
 8017b06:	4e1f      	ldr	r6, [pc, #124]	@ (8017b84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017b08:	0c12      	lsrs	r2, r2, #16
 8017b0a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8017b0e:	19da      	adds	r2, r3, r7
 8017b10:	6032      	str	r2, [r6, #0]
 8017b12:	220e      	movs	r2, #14
 8017b14:	fb02 f20c 	mul.w	r2, r2, ip
 8017b18:	3203      	adds	r2, #3
 8017b1a:	f022 0203 	bic.w	r2, r2, #3
 8017b1e:	443a      	add	r2, r7
 8017b20:	4f19      	ldr	r7, [pc, #100]	@ (8017b88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8017b22:	4413      	add	r3, r2
 8017b24:	603b      	str	r3, [r7, #0]
 8017b26:	2300      	movs	r3, #0
 8017b28:	4f18      	ldr	r7, [pc, #96]	@ (8017b8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8017b2a:	469c      	mov	ip, r3
 8017b2c:	803b      	strh	r3, [r7, #0]
 8017b2e:	4f18      	ldr	r7, [pc, #96]	@ (8017b90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8017b30:	683f      	ldr	r7, [r7, #0]
 8017b32:	1aba      	subs	r2, r7, r2
 8017b34:	4f17      	ldr	r7, [pc, #92]	@ (8017b94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8017b36:	603a      	str	r2, [r7, #0]
 8017b38:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017b3c:	4a16      	ldr	r2, [pc, #88]	@ (8017b98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8017b3e:	8013      	strh	r3, [r2, #0]
 8017b40:	428b      	cmp	r3, r1
 8017b42:	d10d      	bne.n	8017b60 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8017b44:	882d      	ldrh	r5, [r5, #0]
 8017b46:	2300      	movs	r3, #0
 8017b48:	6830      	ldr	r0, [r6, #0]
 8017b4a:	240e      	movs	r4, #14
 8017b4c:	429d      	cmp	r5, r3
 8017b4e:	d90f      	bls.n	8017b70 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8017b50:	fb04 0203 	mla	r2, r4, r3, r0
 8017b54:	3301      	adds	r3, #1
 8017b56:	7b11      	ldrb	r1, [r2, #12]
 8017b58:	f36f 1145 	bfc	r1, #5, #1
 8017b5c:	7311      	strb	r1, [r2, #12]
 8017b5e:	e7f5      	b.n	8017b4c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8017b60:	6822      	ldr	r2, [r4, #0]
 8017b62:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8017b66:	6802      	ldr	r2, [r0, #0]
 8017b68:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8017b6c:	3301      	adds	r3, #1
 8017b6e:	e7e7      	b.n	8017b40 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b72:	bf00      	nop
 8017b74:	240253e4 	.word	0x240253e4
 8017b78:	24025400 	.word	0x24025400
 8017b7c:	24025404 	.word	0x24025404
 8017b80:	240253f8 	.word	0x240253f8
 8017b84:	240253e8 	.word	0x240253e8
 8017b88:	240253f0 	.word	0x240253f0
 8017b8c:	24025402 	.word	0x24025402
 8017b90:	240253ec 	.word	0x240253ec
 8017b94:	240253fc 	.word	0x240253fc
 8017b98:	240253f4 	.word	0x240253f4

08017b9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8017b9c:	4b06      	ldr	r3, [pc, #24]	@ (8017bb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	b943      	cbnz	r3, 8017bb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017ba2:	b139      	cbz	r1, 8017bb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017ba4:	4b05      	ldr	r3, [pc, #20]	@ (8017bbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017ba6:	801a      	strh	r2, [r3, #0]
 8017ba8:	4b05      	ldr	r3, [pc, #20]	@ (8017bc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8017baa:	6019      	str	r1, [r3, #0]
 8017bac:	4b05      	ldr	r3, [pc, #20]	@ (8017bc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8017bae:	6018      	str	r0, [r3, #0]
 8017bb0:	f7ff bf96 	b.w	8017ae0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017bb4:	4770      	bx	lr
 8017bb6:	bf00      	nop
 8017bb8:	240253f0 	.word	0x240253f0
 8017bbc:	24025404 	.word	0x24025404
 8017bc0:	240253ec 	.word	0x240253ec
 8017bc4:	240253e4 	.word	0x240253e4

08017bc8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017bc8:	b470      	push	{r4, r5, r6}
 8017bca:	4c07      	ldr	r4, [pc, #28]	@ (8017be8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8017bcc:	4605      	mov	r5, r0
 8017bce:	4610      	mov	r0, r2
 8017bd0:	9a03      	ldr	r2, [sp, #12]
 8017bd2:	6826      	ldr	r6, [r4, #0]
 8017bd4:	b936      	cbnz	r6, 8017be4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017bd6:	6025      	str	r5, [r4, #0]
 8017bd8:	4c04      	ldr	r4, [pc, #16]	@ (8017bec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8017bda:	8021      	strh	r1, [r4, #0]
 8017bdc:	4619      	mov	r1, r3
 8017bde:	bc70      	pop	{r4, r5, r6}
 8017be0:	f7ff bfdc 	b.w	8017b9c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017be4:	bc70      	pop	{r4, r5, r6}
 8017be6:	4770      	bx	lr
 8017be8:	24025408 	.word	0x24025408
 8017bec:	24025400 	.word	0x24025400

08017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017bf0:	4a12      	ldr	r2, [pc, #72]	@ (8017c3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8017bf2:	8803      	ldrh	r3, [r0, #0]
 8017bf4:	8812      	ldrh	r2, [r2, #0]
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	d207      	bcs.n	8017c0a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8017bfa:	4a11      	ldr	r2, [pc, #68]	@ (8017c40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8017bfc:	2114      	movs	r1, #20
 8017bfe:	6812      	ldr	r2, [r2, #0]
 8017c00:	fb01 2303 	mla	r3, r1, r3, r2
 8017c04:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8017c08:	4770      	bx	lr
 8017c0a:	490e      	ldr	r1, [pc, #56]	@ (8017c44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8017c0c:	8809      	ldrh	r1, [r1, #0]
 8017c0e:	4411      	add	r1, r2
 8017c10:	428b      	cmp	r3, r1
 8017c12:	da04      	bge.n	8017c1e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8017c14:	1a9b      	subs	r3, r3, r2
 8017c16:	4a0c      	ldr	r2, [pc, #48]	@ (8017c48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8017c18:	210e      	movs	r1, #14
 8017c1a:	6812      	ldr	r2, [r2, #0]
 8017c1c:	e7f0      	b.n	8017c00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8017c1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c22:	4293      	cmp	r3, r2
 8017c24:	d108      	bne.n	8017c38 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8017c26:	4b09      	ldr	r3, [pc, #36]	@ (8017c4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8017c28:	781b      	ldrb	r3, [r3, #0]
 8017c2a:	b91b      	cbnz	r3, 8017c34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8017c2c:	4b08      	ldr	r3, [pc, #32]	@ (8017c50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8017c2e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017c32:	4770      	bx	lr
 8017c34:	4b07      	ldr	r3, [pc, #28]	@ (8017c54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8017c36:	e7fa      	b.n	8017c2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8017c38:	2000      	movs	r0, #0
 8017c3a:	4770      	bx	lr
 8017c3c:	24025400 	.word	0x24025400
 8017c40:	24025408 	.word	0x24025408
 8017c44:	24025404 	.word	0x24025404
 8017c48:	240253e8 	.word	0x240253e8
 8017c4c:	24025370 	.word	0x24025370
 8017c50:	24025372 	.word	0x24025372
 8017c54:	24025374 	.word	0x24025374

08017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8017c58:	4a12      	ldr	r2, [pc, #72]	@ (8017ca4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8017c5a:	8803      	ldrh	r3, [r0, #0]
 8017c5c:	8812      	ldrh	r2, [r2, #0]
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	d207      	bcs.n	8017c72 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8017c62:	4a11      	ldr	r2, [pc, #68]	@ (8017ca8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8017c64:	2114      	movs	r1, #20
 8017c66:	6812      	ldr	r2, [r2, #0]
 8017c68:	fb01 2303 	mla	r3, r1, r3, r2
 8017c6c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017c70:	4770      	bx	lr
 8017c72:	490e      	ldr	r1, [pc, #56]	@ (8017cac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017c74:	8809      	ldrh	r1, [r1, #0]
 8017c76:	4411      	add	r1, r2
 8017c78:	428b      	cmp	r3, r1
 8017c7a:	da04      	bge.n	8017c86 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8017c7c:	1a9b      	subs	r3, r3, r2
 8017c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8017cb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017c80:	210e      	movs	r1, #14
 8017c82:	6812      	ldr	r2, [r2, #0]
 8017c84:	e7f0      	b.n	8017c68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017c86:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c8a:	4293      	cmp	r3, r2
 8017c8c:	d108      	bne.n	8017ca0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8017c8e:	4b09      	ldr	r3, [pc, #36]	@ (8017cb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017c90:	781b      	ldrb	r3, [r3, #0]
 8017c92:	b91b      	cbnz	r3, 8017c9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017c94:	4b08      	ldr	r3, [pc, #32]	@ (8017cb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017c96:	f9b3 0000 	ldrsh.w	r0, [r3]
 8017c9a:	4770      	bx	lr
 8017c9c:	4b07      	ldr	r3, [pc, #28]	@ (8017cbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8017c9e:	e7fa      	b.n	8017c96 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017ca0:	2000      	movs	r0, #0
 8017ca2:	4770      	bx	lr
 8017ca4:	24025400 	.word	0x24025400
 8017ca8:	24025408 	.word	0x24025408
 8017cac:	24025404 	.word	0x24025404
 8017cb0:	240253e8 	.word	0x240253e8
 8017cb4:	24025370 	.word	0x24025370
 8017cb8:	24025374 	.word	0x24025374
 8017cbc:	24025372 	.word	0x24025372

08017cc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017cc0:	4a22      	ldr	r2, [pc, #136]	@ (8017d4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8017cc2:	b530      	push	{r4, r5, lr}
 8017cc4:	880b      	ldrh	r3, [r1, #0]
 8017cc6:	8812      	ldrh	r2, [r2, #0]
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d213      	bcs.n	8017cf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8017ccc:	4a20      	ldr	r2, [pc, #128]	@ (8017d50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8017cce:	2114      	movs	r1, #20
 8017cd0:	6812      	ldr	r2, [r2, #0]
 8017cd2:	fb01 2303 	mla	r3, r1, r3, r2
 8017cd6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8017cda:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8017cde:	8a1a      	ldrh	r2, [r3, #16]
 8017ce0:	8a5b      	ldrh	r3, [r3, #18]
 8017ce2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017ce6:	8004      	strh	r4, [r0, #0]
 8017ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cec:	8041      	strh	r1, [r0, #2]
 8017cee:	8082      	strh	r2, [r0, #4]
 8017cf0:	80c3      	strh	r3, [r0, #6]
 8017cf2:	e024      	b.n	8017d3e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8017cf4:	4917      	ldr	r1, [pc, #92]	@ (8017d54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8017cf6:	8809      	ldrh	r1, [r1, #0]
 8017cf8:	4411      	add	r1, r2
 8017cfa:	428b      	cmp	r3, r1
 8017cfc:	da10      	bge.n	8017d20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8017cfe:	1a9b      	subs	r3, r3, r2
 8017d00:	220e      	movs	r2, #14
 8017d02:	4353      	muls	r3, r2
 8017d04:	4a14      	ldr	r2, [pc, #80]	@ (8017d58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8017d06:	6811      	ldr	r1, [r2, #0]
 8017d08:	18ca      	adds	r2, r1, r3
 8017d0a:	5ecd      	ldrsh	r5, [r1, r3]
 8017d0c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8017d10:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8017d14:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8017d18:	8005      	strh	r5, [r0, #0]
 8017d1a:	8044      	strh	r4, [r0, #2]
 8017d1c:	8081      	strh	r1, [r0, #4]
 8017d1e:	e7e7      	b.n	8017cf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017d20:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017d24:	4293      	cmp	r3, r2
 8017d26:	d10b      	bne.n	8017d40 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8017d28:	4b0c      	ldr	r3, [pc, #48]	@ (8017d5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8017d2a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8017d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8017d60 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8017d30:	8081      	strh	r1, [r0, #4]
 8017d32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d36:	2300      	movs	r3, #0
 8017d38:	80c2      	strh	r2, [r0, #6]
 8017d3a:	8003      	strh	r3, [r0, #0]
 8017d3c:	8043      	strh	r3, [r0, #2]
 8017d3e:	bd30      	pop	{r4, r5, pc}
 8017d40:	2300      	movs	r3, #0
 8017d42:	8003      	strh	r3, [r0, #0]
 8017d44:	8043      	strh	r3, [r0, #2]
 8017d46:	8083      	strh	r3, [r0, #4]
 8017d48:	e7d2      	b.n	8017cf0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8017d4a:	bf00      	nop
 8017d4c:	24025400 	.word	0x24025400
 8017d50:	24025408 	.word	0x24025408
 8017d54:	24025404 	.word	0x24025404
 8017d58:	240253e8 	.word	0x240253e8
 8017d5c:	2402536c 	.word	0x2402536c
 8017d60:	2402536e 	.word	0x2402536e

08017d64 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8017d64:	4a17      	ldr	r2, [pc, #92]	@ (8017dc4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8017d66:	8803      	ldrh	r3, [r0, #0]
 8017d68:	8812      	ldrh	r2, [r2, #0]
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	d213      	bcs.n	8017d96 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8017d6e:	4a16      	ldr	r2, [pc, #88]	@ (8017dc8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8017d70:	2114      	movs	r1, #20
 8017d72:	6812      	ldr	r2, [r2, #0]
 8017d74:	fb01 2303 	mla	r3, r1, r3, r2
 8017d78:	8a1a      	ldrh	r2, [r3, #16]
 8017d7a:	8919      	ldrh	r1, [r3, #8]
 8017d7c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017d80:	428a      	cmp	r2, r1
 8017d82:	db1d      	blt.n	8017dc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017d84:	8a58      	ldrh	r0, [r3, #18]
 8017d86:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8017d8a:	895b      	ldrh	r3, [r3, #10]
 8017d8c:	4298      	cmp	r0, r3
 8017d8e:	bfac      	ite	ge
 8017d90:	2000      	movge	r0, #0
 8017d92:	2001      	movlt	r0, #1
 8017d94:	4770      	bx	lr
 8017d96:	490d      	ldr	r1, [pc, #52]	@ (8017dcc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8017d98:	8809      	ldrh	r1, [r1, #0]
 8017d9a:	4411      	add	r1, r2
 8017d9c:	428b      	cmp	r3, r1
 8017d9e:	da0d      	bge.n	8017dbc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017da0:	1a9b      	subs	r3, r3, r2
 8017da2:	4a0b      	ldr	r2, [pc, #44]	@ (8017dd0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017da4:	210e      	movs	r1, #14
 8017da6:	6812      	ldr	r2, [r2, #0]
 8017da8:	fb01 2303 	mla	r3, r1, r3, r2
 8017dac:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017db0:	891a      	ldrh	r2, [r3, #8]
 8017db2:	4291      	cmp	r1, r2
 8017db4:	db04      	blt.n	8017dc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017db6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8017dba:	e7e6      	b.n	8017d8a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8017dbc:	2000      	movs	r0, #0
 8017dbe:	4770      	bx	lr
 8017dc0:	2001      	movs	r0, #1
 8017dc2:	4770      	bx	lr
 8017dc4:	24025400 	.word	0x24025400
 8017dc8:	24025408 	.word	0x24025408
 8017dcc:	24025404 	.word	0x24025404
 8017dd0:	240253e8 	.word	0x240253e8

08017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017dd4:	4a12      	ldr	r2, [pc, #72]	@ (8017e20 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8017dd6:	8803      	ldrh	r3, [r0, #0]
 8017dd8:	8811      	ldrh	r1, [r2, #0]
 8017dda:	428b      	cmp	r3, r1
 8017ddc:	d20b      	bcs.n	8017df6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017dde:	4a11      	ldr	r2, [pc, #68]	@ (8017e24 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017de0:	6812      	ldr	r2, [r2, #0]
 8017de2:	b112      	cbz	r2, 8017dea <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017de4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017de8:	b9c0      	cbnz	r0, 8017e1c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8017dea:	4a0f      	ldr	r2, [pc, #60]	@ (8017e28 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017dec:	6811      	ldr	r1, [r2, #0]
 8017dee:	2214      	movs	r2, #20
 8017df0:	4353      	muls	r3, r2
 8017df2:	58c8      	ldr	r0, [r1, r3]
 8017df4:	4770      	bx	lr
 8017df6:	4a0d      	ldr	r2, [pc, #52]	@ (8017e2c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8017df8:	8812      	ldrh	r2, [r2, #0]
 8017dfa:	440a      	add	r2, r1
 8017dfc:	4293      	cmp	r3, r2
 8017dfe:	da04      	bge.n	8017e0a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8017e00:	4a08      	ldr	r2, [pc, #32]	@ (8017e24 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017e02:	6812      	ldr	r2, [r2, #0]
 8017e04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017e08:	4770      	bx	lr
 8017e0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017e0e:	4293      	cmp	r3, r2
 8017e10:	d103      	bne.n	8017e1a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017e12:	4b07      	ldr	r3, [pc, #28]	@ (8017e30 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8017e18:	4770      	bx	lr
 8017e1a:	2000      	movs	r0, #0
 8017e1c:	4770      	bx	lr
 8017e1e:	bf00      	nop
 8017e20:	24025400 	.word	0x24025400
 8017e24:	240253e4 	.word	0x240253e4
 8017e28:	24025408 	.word	0x24025408
 8017e2c:	24025404 	.word	0x24025404
 8017e30:	24025378 	.word	0x24025378

08017e34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8017e34:	4b24      	ldr	r3, [pc, #144]	@ (8017ec8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8017e36:	8802      	ldrh	r2, [r0, #0]
 8017e38:	8818      	ldrh	r0, [r3, #0]
 8017e3a:	4282      	cmp	r2, r0
 8017e3c:	d221      	bcs.n	8017e82 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8017e3e:	4b23      	ldr	r3, [pc, #140]	@ (8017ecc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8017e40:	6819      	ldr	r1, [r3, #0]
 8017e42:	2314      	movs	r3, #20
 8017e44:	fb03 1302 	mla	r3, r3, r2, r1
 8017e48:	6858      	ldr	r0, [r3, #4]
 8017e4a:	2800      	cmp	r0, #0
 8017e4c:	d03a      	beq.n	8017ec4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e4e:	4920      	ldr	r1, [pc, #128]	@ (8017ed0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017e50:	6809      	ldr	r1, [r1, #0]
 8017e52:	2900      	cmp	r1, #0
 8017e54:	d036      	beq.n	8017ec4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017e5a:	2900      	cmp	r1, #0
 8017e5c:	d032      	beq.n	8017ec4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8017e5e:	891a      	ldrh	r2, [r3, #8]
 8017e60:	8958      	ldrh	r0, [r3, #10]
 8017e62:	4350      	muls	r0, r2
 8017e64:	7c5a      	ldrb	r2, [r3, #17]
 8017e66:	7cdb      	ldrb	r3, [r3, #19]
 8017e68:	0952      	lsrs	r2, r2, #5
 8017e6a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017e6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8017e72:	2b0b      	cmp	r3, #11
 8017e74:	bf18      	it	ne
 8017e76:	0040      	lslne	r0, r0, #1
 8017e78:	3003      	adds	r0, #3
 8017e7a:	f020 0003 	bic.w	r0, r0, #3
 8017e7e:	4408      	add	r0, r1
 8017e80:	4770      	bx	lr
 8017e82:	4b14      	ldr	r3, [pc, #80]	@ (8017ed4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017e84:	881b      	ldrh	r3, [r3, #0]
 8017e86:	4403      	add	r3, r0
 8017e88:	429a      	cmp	r2, r3
 8017e8a:	da1a      	bge.n	8017ec2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017e8c:	4b12      	ldr	r3, [pc, #72]	@ (8017ed8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017e8e:	1a10      	subs	r0, r2, r0
 8017e90:	210e      	movs	r1, #14
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	fb01 3000 	mla	r0, r1, r0, r3
 8017e98:	7b03      	ldrb	r3, [r0, #12]
 8017e9a:	f003 031f 	and.w	r3, r3, #31
 8017e9e:	2b0b      	cmp	r3, #11
 8017ea0:	d10b      	bne.n	8017eba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017ea2:	8903      	ldrh	r3, [r0, #8]
 8017ea4:	8940      	ldrh	r0, [r0, #10]
 8017ea6:	4358      	muls	r0, r3
 8017ea8:	4b09      	ldr	r3, [pc, #36]	@ (8017ed0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017eaa:	3003      	adds	r0, #3
 8017eac:	6819      	ldr	r1, [r3, #0]
 8017eae:	f020 0303 	bic.w	r3, r0, #3
 8017eb2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017eb6:	4418      	add	r0, r3
 8017eb8:	4770      	bx	lr
 8017eba:	2b0d      	cmp	r3, #13
 8017ebc:	d101      	bne.n	8017ec2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017ebe:	300d      	adds	r0, #13
 8017ec0:	4770      	bx	lr
 8017ec2:	2000      	movs	r0, #0
 8017ec4:	4770      	bx	lr
 8017ec6:	bf00      	nop
 8017ec8:	24025400 	.word	0x24025400
 8017ecc:	24025408 	.word	0x24025408
 8017ed0:	240253e4 	.word	0x240253e4
 8017ed4:	24025404 	.word	0x24025404
 8017ed8:	240253e8 	.word	0x240253e8

08017edc <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017edc:	4b1f      	ldr	r3, [pc, #124]	@ (8017f5c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 8017ede:	b510      	push	{r4, lr}
 8017ee0:	8802      	ldrh	r2, [r0, #0]
 8017ee2:	881b      	ldrh	r3, [r3, #0]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d21a      	bcs.n	8017f1e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8017ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8017f60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8017eea:	2114      	movs	r1, #20
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	fb01 3102 	mla	r1, r1, r2, r3
 8017ef2:	7c4b      	ldrb	r3, [r1, #17]
 8017ef4:	0958      	lsrs	r0, r3, #5
 8017ef6:	7ccb      	ldrb	r3, [r1, #19]
 8017ef8:	491a      	ldr	r1, [pc, #104]	@ (8017f64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8017efa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8017efe:	6809      	ldr	r1, [r1, #0]
 8017f00:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8017f04:	b2d8      	uxtb	r0, r3
 8017f06:	b149      	cbz	r1, 8017f1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8017f0c:	b132      	cbz	r2, 8017f1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f0e:	2b0e      	cmp	r3, #14
 8017f10:	d021      	beq.n	8017f56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017f12:	280f      	cmp	r0, #15
 8017f14:	d01d      	beq.n	8017f52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8017f16:	2810      	cmp	r0, #16
 8017f18:	bf08      	it	eq
 8017f1a:	2002      	moveq	r0, #2
 8017f1c:	bd10      	pop	{r4, pc}
 8017f1e:	4912      	ldr	r1, [pc, #72]	@ (8017f68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8017f20:	8809      	ldrh	r1, [r1, #0]
 8017f22:	4419      	add	r1, r3
 8017f24:	428a      	cmp	r2, r1
 8017f26:	da09      	bge.n	8017f3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8017f28:	1ad3      	subs	r3, r2, r3
 8017f2a:	4a10      	ldr	r2, [pc, #64]	@ (8017f6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8017f2c:	210e      	movs	r1, #14
 8017f2e:	6812      	ldr	r2, [r2, #0]
 8017f30:	fb01 2303 	mla	r3, r1, r3, r2
 8017f34:	7b18      	ldrb	r0, [r3, #12]
 8017f36:	f000 001f 	and.w	r0, r0, #31
 8017f3a:	e7ef      	b.n	8017f1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f3c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d108      	bne.n	8017f56 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8017f44:	f7ec f9a8 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 8017f48:	6803      	ldr	r3, [r0, #0]
 8017f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f50:	4718      	bx	r3
 8017f52:	2001      	movs	r0, #1
 8017f54:	e7e2      	b.n	8017f1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f56:	2000      	movs	r0, #0
 8017f58:	e7e0      	b.n	8017f1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8017f5a:	bf00      	nop
 8017f5c:	24025400 	.word	0x24025400
 8017f60:	24025408 	.word	0x24025408
 8017f64:	240253e4 	.word	0x240253e4
 8017f68:	24025404 	.word	0x24025404
 8017f6c:	240253e8 	.word	0x240253e8

08017f70 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8017f70:	2018      	movs	r0, #24
 8017f72:	4770      	bx	lr

08017f74 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8017f74:	2001      	movs	r0, #1
 8017f76:	4770      	bx	lr

08017f78 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017f78:	4b02      	ldr	r3, [pc, #8]	@ (8017f84 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8017f7a:	8818      	ldrh	r0, [r3, #0]
 8017f7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017f80:	b280      	uxth	r0, r0
 8017f82:	4770      	bx	lr
 8017f84:	24025372 	.word	0x24025372

08017f88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017f88:	2bff      	cmp	r3, #255	@ 0xff
 8017f8a:	d04c      	beq.n	8018026 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017f8c:	2a2c      	cmp	r2, #44	@ 0x2c
 8017f8e:	d030      	beq.n	8017ff2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 8017f90:	d80f      	bhi.n	8017fb2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8017f92:	2a08      	cmp	r2, #8
 8017f94:	d043      	beq.n	801801e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017f96:	d805      	bhi.n	8017fa4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8017f98:	2a04      	cmp	r2, #4
 8017f9a:	d03e      	beq.n	801801a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017f9c:	2a05      	cmp	r2, #5
 8017f9e:	d03a      	beq.n	8018016 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	e024      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fa4:	2a0a      	cmp	r2, #10
 8017fa6:	d03a      	beq.n	801801e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017fa8:	d301      	bcc.n	8017fae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8017faa:	2a0b      	cmp	r2, #11
 8017fac:	d1f8      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8017fb0:	e01d      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fb2:	2a30      	cmp	r2, #48	@ 0x30
 8017fb4:	d035      	beq.n	8018022 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017fb6:	d80a      	bhi.n	8017fce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 8017fb8:	2a2e      	cmp	r2, #46	@ 0x2e
 8017fba:	684b      	ldr	r3, [r1, #4]
 8017fbc:	d023      	beq.n	8018006 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017fbe:	d90d      	bls.n	8017fdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8017fc0:	781a      	ldrb	r2, [r3, #0]
 8017fc2:	785b      	ldrb	r3, [r3, #1]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d1eb      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fc8:	b98a      	cbnz	r2, 8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017fcc:	e00f      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fce:	2a32      	cmp	r2, #50	@ 0x32
 8017fd0:	d027      	beq.n	8018022 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017fd2:	d301      	bcc.n	8017fd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8017fd4:	2a33      	cmp	r2, #51	@ 0x33
 8017fd6:	d1e3      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fd8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8017fda:	e008      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8017fdc:	781a      	ldrb	r2, [r3, #0]
 8017fde:	785b      	ldrb	r3, [r3, #1]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d1dd      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fe4:	2a00      	cmp	r2, #0
 8017fe6:	d0f0      	beq.n	8017fca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8017fe8:	2a01      	cmp	r2, #1
 8017fea:	d1d9      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017fec:	6943      	ldr	r3, [r0, #20]
 8017fee:	4618      	mov	r0, r3
 8017ff0:	4770      	bx	lr
 8017ff2:	684b      	ldr	r3, [r1, #4]
 8017ff4:	781a      	ldrb	r2, [r3, #0]
 8017ff6:	785b      	ldrb	r3, [r3, #1]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d1d1      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8017ffc:	b14a      	cbz	r2, 8018012 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8017ffe:	2a01      	cmp	r2, #1
 8018000:	bf08      	it	eq
 8018002:	68c3      	ldreq	r3, [r0, #12]
 8018004:	e7f3      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018006:	781a      	ldrb	r2, [r3, #0]
 8018008:	785b      	ldrb	r3, [r3, #1]
 801800a:	2b00      	cmp	r3, #0
 801800c:	d1c8      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801800e:	2a00      	cmp	r2, #0
 8018010:	d1ed      	bne.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018012:	69c3      	ldr	r3, [r0, #28]
 8018014:	e7eb      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018016:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8018018:	e7e9      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801801a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801801c:	e7e7      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801801e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018020:	e7e5      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018022:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018024:	e7e3      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018026:	2a2c      	cmp	r2, #44	@ 0x2c
 8018028:	d030      	beq.n	801808c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801802a:	d80f      	bhi.n	801804c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801802c:	2a08      	cmp	r2, #8
 801802e:	d042      	beq.n	80180b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018030:	d805      	bhi.n	801803e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8018032:	2a04      	cmp	r2, #4
 8018034:	d03d      	beq.n	80180b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8018036:	2a05      	cmp	r2, #5
 8018038:	d1b2      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801803a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801803c:	e7d7      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801803e:	2a0a      	cmp	r2, #10
 8018040:	d039      	beq.n	80180b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8018042:	d301      	bcc.n	8018048 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8018044:	2a0b      	cmp	r2, #11
 8018046:	d1ab      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018048:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801804a:	e7d0      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801804c:	2a30      	cmp	r2, #48	@ 0x30
 801804e:	d034      	beq.n	80180ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8018050:	d80b      	bhi.n	801806a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8018052:	2a2e      	cmp	r2, #46	@ 0x2e
 8018054:	684b      	ldr	r3, [r1, #4]
 8018056:	d023      	beq.n	80180a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8018058:	d90e      	bls.n	8018078 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801805a:	781a      	ldrb	r2, [r3, #0]
 801805c:	785b      	ldrb	r3, [r3, #1]
 801805e:	2b00      	cmp	r3, #0
 8018060:	d19e      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018062:	2a00      	cmp	r2, #0
 8018064:	d1c3      	bne.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018066:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8018068:	e7c1      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801806a:	2a32      	cmp	r2, #50	@ 0x32
 801806c:	d025      	beq.n	80180ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801806e:	d301      	bcc.n	8018074 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8018070:	2a33      	cmp	r2, #51	@ 0x33
 8018072:	d195      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018074:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8018076:	e7ba      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8018078:	781a      	ldrb	r2, [r3, #0]
 801807a:	785b      	ldrb	r3, [r3, #1]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d18f      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018080:	2a00      	cmp	r2, #0
 8018082:	d0f0      	beq.n	8018066 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8018084:	2a01      	cmp	r2, #1
 8018086:	d18b      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018088:	6983      	ldr	r3, [r0, #24]
 801808a:	e7b0      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801808c:	684b      	ldr	r3, [r1, #4]
 801808e:	781a      	ldrb	r2, [r3, #0]
 8018090:	785b      	ldrb	r3, [r3, #1]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d184      	bne.n	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8018096:	b152      	cbz	r2, 80180ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8018098:	2a01      	cmp	r2, #1
 801809a:	bf08      	it	eq
 801809c:	6903      	ldreq	r3, [r0, #16]
 801809e:	e7a6      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180a0:	781a      	ldrb	r2, [r3, #0]
 80180a2:	785b      	ldrb	r3, [r3, #1]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f47f af7b 	bne.w	8017fa0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80180aa:	2a00      	cmp	r2, #0
 80180ac:	d19f      	bne.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180ae:	6a03      	ldr	r3, [r0, #32]
 80180b0:	e79d      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80180b4:	e79b      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180b6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80180b8:	e799      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80180ba:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80180bc:	e797      	b.n	8017fee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080180be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80180be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180c2:	b085      	sub	sp, #20
 80180c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80180c6:	9203      	str	r2, [sp, #12]
 80180c8:	6870      	ldr	r0, [r6, #4]
 80180ca:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80180ce:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80180d2:	9101      	str	r1, [sp, #4]
 80180d4:	fa1f f885 	uxth.w	r8, r5
 80180d8:	43ed      	mvns	r5, r5
 80180da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80180de:	b2ed      	uxtb	r5, r5
 80180e0:	fb00 2404 	mla	r4, r0, r4, r2
 80180e4:	6832      	ldr	r2, [r6, #0]
 80180e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80180ea:	4414      	add	r4, r2
 80180ec:	f8dc 2000 	ldr.w	r2, [ip]
 80180f0:	9202      	str	r2, [sp, #8]
 80180f2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80180f6:	f102 0e04 	add.w	lr, r2, #4
 80180fa:	9a01      	ldr	r2, [sp, #4]
 80180fc:	2a00      	cmp	r2, #0
 80180fe:	dc03      	bgt.n	8018108 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018100:	9a03      	ldr	r2, [sp, #12]
 8018102:	2a00      	cmp	r2, #0
 8018104:	f340 8116 	ble.w	8018334 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018108:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801810a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801810e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018112:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018114:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018118:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801811c:	2b00      	cmp	r3, #0
 801811e:	dd0e      	ble.n	801813e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018120:	1406      	asrs	r6, r0, #16
 8018122:	d405      	bmi.n	8018130 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018124:	4556      	cmp	r6, sl
 8018126:	da03      	bge.n	8018130 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018128:	1416      	asrs	r6, r2, #16
 801812a:	d401      	bmi.n	8018130 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801812c:	454e      	cmp	r6, r9
 801812e:	db07      	blt.n	8018140 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8018130:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018132:	3b01      	subs	r3, #1
 8018134:	3403      	adds	r4, #3
 8018136:	4430      	add	r0, r6
 8018138:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801813a:	4432      	add	r2, r6
 801813c:	e7ee      	b.n	801811c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801813e:	d063      	beq.n	8018208 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018140:	1e5e      	subs	r6, r3, #1
 8018142:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8018144:	fb07 0706 	mla	r7, r7, r6, r0
 8018148:	143f      	asrs	r7, r7, #16
 801814a:	d454      	bmi.n	80181f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801814c:	4557      	cmp	r7, sl
 801814e:	da52      	bge.n	80181f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018150:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8018152:	fb07 2606 	mla	r6, r7, r6, r2
 8018156:	1436      	asrs	r6, r6, #16
 8018158:	d44d      	bmi.n	80181f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801815a:	454e      	cmp	r6, r9
 801815c:	da4b      	bge.n	80181f6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801815e:	1ce6      	adds	r6, r4, #3
 8018160:	4699      	mov	r9, r3
 8018162:	f1b9 0f00 	cmp.w	r9, #0
 8018166:	f106 0603 	add.w	r6, r6, #3
 801816a:	dd48      	ble.n	80181fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801816c:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018170:	1417      	asrs	r7, r2, #16
 8018172:	9902      	ldr	r1, [sp, #8]
 8018174:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018178:	f109 39ff 	add.w	r9, r9, #4294967295
 801817c:	fb0b 1707 	mla	r7, fp, r7, r1
 8018180:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018184:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018186:	f817 700a 	ldrb.w	r7, [r7, sl]
 801818a:	fb1b fb05 	smulbb	fp, fp, r5
 801818e:	4408      	add	r0, r1
 8018190:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018192:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018196:	440a      	add	r2, r1
 8018198:	eb0e 0a07 	add.w	sl, lr, r7
 801819c:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80181a0:	fb07 b708 	mla	r7, r7, r8, fp
 80181a4:	b2bf      	uxth	r7, r7
 80181a6:	f107 0b01 	add.w	fp, r7, #1
 80181aa:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80181ae:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80181b2:	fb1b fb05 	smulbb	fp, fp, r5
 80181b6:	123f      	asrs	r7, r7, #8
 80181b8:	f806 7c06 	strb.w	r7, [r6, #-6]
 80181bc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80181c0:	fb07 b708 	mla	r7, r7, r8, fp
 80181c4:	b2bf      	uxth	r7, r7
 80181c6:	f107 0b01 	add.w	fp, r7, #1
 80181ca:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80181ce:	123f      	asrs	r7, r7, #8
 80181d0:	f806 7c05 	strb.w	r7, [r6, #-5]
 80181d4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80181d8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80181dc:	fb1a fa05 	smulbb	sl, sl, r5
 80181e0:	fb07 a708 	mla	r7, r7, r8, sl
 80181e4:	b2bf      	uxth	r7, r7
 80181e6:	f107 0a01 	add.w	sl, r7, #1
 80181ea:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80181ee:	123f      	asrs	r7, r7, #8
 80181f0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80181f4:	e7b5      	b.n	8018162 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80181f6:	2700      	movs	r7, #0
 80181f8:	1bde      	subs	r6, r3, r7
 80181fa:	2e00      	cmp	r6, #0
 80181fc:	dc42      	bgt.n	8018284 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80181fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018202:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018206:	441c      	add	r4, r3
 8018208:	9b01      	ldr	r3, [sp, #4]
 801820a:	2b00      	cmp	r3, #0
 801820c:	f340 8092 	ble.w	8018334 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018216:	ee30 0a04 	vadd.f32	s0, s0, s8
 801821a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801821e:	eef0 6a62 	vmov.f32	s13, s5
 8018222:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018226:	ee31 1a05 	vadd.f32	s2, s2, s10
 801822a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801822e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8018232:	eef0 6a43 	vmov.f32	s13, s6
 8018236:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801823a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801823e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018242:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018246:	ee77 2a62 	vsub.f32	s5, s14, s5
 801824a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801824e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018252:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018256:	ee12 2a90 	vmov	r2, s5
 801825a:	eef0 2a47 	vmov.f32	s5, s14
 801825e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018262:	ee13 2a10 	vmov	r2, s6
 8018266:	9311      	str	r3, [sp, #68]	@ 0x44
 8018268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801826a:	eeb0 3a67 	vmov.f32	s6, s15
 801826e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018272:	9312      	str	r3, [sp, #72]	@ 0x48
 8018274:	9b01      	ldr	r3, [sp, #4]
 8018276:	9a03      	ldr	r2, [sp, #12]
 8018278:	3b01      	subs	r3, #1
 801827a:	9301      	str	r3, [sp, #4]
 801827c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801827e:	bf08      	it	eq
 8018280:	4613      	moveq	r3, r2
 8018282:	e73a      	b.n	80180fa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018284:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8018288:	d44e      	bmi.n	8018328 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801828a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801828e:	4556      	cmp	r6, sl
 8018290:	dd4a      	ble.n	8018328 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018292:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8018296:	d447      	bmi.n	8018328 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8018298:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801829c:	4559      	cmp	r1, fp
 801829e:	dd43      	ble.n	8018328 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80182a0:	fa0f f986 	sxth.w	r9, r6
 80182a4:	9902      	ldr	r1, [sp, #8]
 80182a6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80182aa:	fb0b 1909 	mla	r9, fp, r9, r1
 80182ae:	f814 b006 	ldrb.w	fp, [r4, r6]
 80182b2:	f819 900a 	ldrb.w	r9, [r9, sl]
 80182b6:	fb1b fb05 	smulbb	fp, fp, r5
 80182ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80182be:	eb0e 0a09 	add.w	sl, lr, r9
 80182c2:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80182c6:	fb09 b908 	mla	r9, r9, r8, fp
 80182ca:	fa1f f989 	uxth.w	r9, r9
 80182ce:	f109 0b01 	add.w	fp, r9, #1
 80182d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80182d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80182da:	f804 9006 	strb.w	r9, [r4, r6]
 80182de:	4426      	add	r6, r4
 80182e0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80182e4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80182e8:	fb1b fb05 	smulbb	fp, fp, r5
 80182ec:	fb09 b908 	mla	r9, r9, r8, fp
 80182f0:	fa1f f989 	uxth.w	r9, r9
 80182f4:	f109 0b01 	add.w	fp, r9, #1
 80182f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80182fc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018300:	f886 9001 	strb.w	r9, [r6, #1]
 8018304:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018308:	f896 a002 	ldrb.w	sl, [r6, #2]
 801830c:	fb1a fa05 	smulbb	sl, sl, r5
 8018310:	fb09 a908 	mla	r9, r9, r8, sl
 8018314:	fa1f f989 	uxth.w	r9, r9
 8018318:	f109 0a01 	add.w	sl, r9, #1
 801831c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018320:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018324:	f886 9002 	strb.w	r9, [r6, #2]
 8018328:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801832a:	3701      	adds	r7, #1
 801832c:	4408      	add	r0, r1
 801832e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018330:	440a      	add	r2, r1
 8018332:	e761      	b.n	80181f8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018334:	b005      	add	sp, #20
 8018336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801833a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801833a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801833e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018340:	4693      	mov	fp, r2
 8018342:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8018344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018348:	6868      	ldr	r0, [r5, #4]
 801834a:	6877      	ldr	r7, [r6, #4]
 801834c:	9100      	str	r1, [sp, #0]
 801834e:	3704      	adds	r7, #4
 8018350:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018354:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8018358:	fb00 2404 	mla	r4, r0, r4, r2
 801835c:	682a      	ldr	r2, [r5, #0]
 801835e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018362:	4414      	add	r4, r2
 8018364:	6832      	ldr	r2, [r6, #0]
 8018366:	9201      	str	r2, [sp, #4]
 8018368:	9a00      	ldr	r2, [sp, #0]
 801836a:	2a00      	cmp	r2, #0
 801836c:	dc03      	bgt.n	8018376 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801836e:	f1bb 0f00 	cmp.w	fp, #0
 8018372:	f340 80bc 	ble.w	80184ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018376:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018378:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801837c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018380:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018382:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8018386:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801838a:	2b00      	cmp	r3, #0
 801838c:	dd0c      	ble.n	80183a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801838e:	1405      	asrs	r5, r0, #16
 8018390:	d405      	bmi.n	801839e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018392:	4555      	cmp	r5, sl
 8018394:	da03      	bge.n	801839e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018396:	1415      	asrs	r5, r2, #16
 8018398:	d401      	bmi.n	801839e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801839a:	454d      	cmp	r5, r9
 801839c:	db05      	blt.n	80183aa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801839e:	4440      	add	r0, r8
 80183a0:	4472      	add	r2, lr
 80183a2:	3b01      	subs	r3, #1
 80183a4:	3403      	adds	r4, #3
 80183a6:	e7f0      	b.n	801838a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80183a8:	d03f      	beq.n	801842a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80183aa:	1e5d      	subs	r5, r3, #1
 80183ac:	fb08 0c05 	mla	ip, r8, r5, r0
 80183b0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80183b4:	d42e      	bmi.n	8018414 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183b6:	45d4      	cmp	ip, sl
 80183b8:	da2c      	bge.n	8018414 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183ba:	fb0e 2505 	mla	r5, lr, r5, r2
 80183be:	142d      	asrs	r5, r5, #16
 80183c0:	d428      	bmi.n	8018414 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183c2:	454d      	cmp	r5, r9
 80183c4:	da26      	bge.n	8018414 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80183c6:	1ce5      	adds	r5, r4, #3
 80183c8:	469c      	mov	ip, r3
 80183ca:	f1bc 0f00 	cmp.w	ip, #0
 80183ce:	f105 0503 	add.w	r5, r5, #3
 80183d2:	dd25      	ble.n	8018420 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80183d4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80183d8:	ea4f 4922 	mov.w	r9, r2, asr #16
 80183dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80183e0:	4472      	add	r2, lr
 80183e2:	468a      	mov	sl, r1
 80183e4:	9901      	ldr	r1, [sp, #4]
 80183e6:	fb0a 1909 	mla	r9, sl, r9, r1
 80183ea:	1401      	asrs	r1, r0, #16
 80183ec:	4440      	add	r0, r8
 80183ee:	f819 9001 	ldrb.w	r9, [r9, r1]
 80183f2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80183f6:	eb07 0a09 	add.w	sl, r7, r9
 80183fa:	f817 9009 	ldrb.w	r9, [r7, r9]
 80183fe:	f805 9c06 	strb.w	r9, [r5, #-6]
 8018402:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018406:	f805 9c05 	strb.w	r9, [r5, #-5]
 801840a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801840e:	f805 9c04 	strb.w	r9, [r5, #-4]
 8018412:	e7da      	b.n	80183ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018414:	2500      	movs	r5, #0
 8018416:	eba3 0c05 	sub.w	ip, r3, r5
 801841a:	f1bc 0f00 	cmp.w	ip, #0
 801841e:	dc3b      	bgt.n	8018498 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018428:	441c      	add	r4, r3
 801842a:	9b00      	ldr	r3, [sp, #0]
 801842c:	2b00      	cmp	r3, #0
 801842e:	dd5e      	ble.n	80184ee <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8018430:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018434:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018436:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801843a:	eeb0 6a62 	vmov.f32	s12, s5
 801843e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018442:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018446:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801844a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801844e:	eeb0 6a43 	vmov.f32	s12, s6
 8018452:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018456:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801845a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801845e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018462:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018466:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801846a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801846e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018472:	ee12 2a90 	vmov	r2, s5
 8018476:	eef0 2a47 	vmov.f32	s5, s14
 801847a:	fb92 f8f3 	sdiv	r8, r2, r3
 801847e:	ee13 2a10 	vmov	r2, s6
 8018482:	eeb0 3a67 	vmov.f32	s6, s15
 8018486:	fb92 fef3 	sdiv	lr, r2, r3
 801848a:	9b00      	ldr	r3, [sp, #0]
 801848c:	3b01      	subs	r3, #1
 801848e:	9300      	str	r3, [sp, #0]
 8018490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018492:	bf08      	it	eq
 8018494:	465b      	moveq	r3, fp
 8018496:	e767      	b.n	8018368 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018498:	ea5f 4920 	movs.w	r9, r0, asr #16
 801849c:	d423      	bmi.n	80184e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801849e:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80184a2:	45cc      	cmp	ip, r9
 80184a4:	dd1f      	ble.n	80184e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184a6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80184aa:	d41c      	bmi.n	80184e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184ac:	68f1      	ldr	r1, [r6, #12]
 80184ae:	4551      	cmp	r1, sl
 80184b0:	dd19      	ble.n	80184e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80184b2:	fa0f fc8c 	sxth.w	ip, ip
 80184b6:	9901      	ldr	r1, [sp, #4]
 80184b8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80184bc:	f81c c009 	ldrb.w	ip, [ip, r9]
 80184c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80184c4:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80184c8:	eb07 090c 	add.w	r9, r7, ip
 80184cc:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80184d0:	f804 a00c 	strb.w	sl, [r4, ip]
 80184d4:	44a4      	add	ip, r4
 80184d6:	f899 a001 	ldrb.w	sl, [r9, #1]
 80184da:	f88c a001 	strb.w	sl, [ip, #1]
 80184de:	f899 9002 	ldrb.w	r9, [r9, #2]
 80184e2:	f88c 9002 	strb.w	r9, [ip, #2]
 80184e6:	4440      	add	r0, r8
 80184e8:	4472      	add	r2, lr
 80184ea:	3501      	adds	r5, #1
 80184ec:	e793      	b.n	8018416 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80184ee:	b003      	add	sp, #12
 80184f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080184f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80184f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184f8:	b085      	sub	sp, #20
 80184fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80184fe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018500:	9202      	str	r2, [sp, #8]
 8018502:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018506:	6860      	ldr	r0, [r4, #4]
 8018508:	9203      	str	r2, [sp, #12]
 801850a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801850e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018512:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018516:	fb00 2505 	mla	r5, r0, r5, r2
 801851a:	6822      	ldr	r2, [r4, #0]
 801851c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018520:	4415      	add	r5, r2
 8018522:	f8dc 2000 	ldr.w	r2, [ip]
 8018526:	9200      	str	r2, [sp, #0]
 8018528:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801852c:	3204      	adds	r2, #4
 801852e:	9201      	str	r2, [sp, #4]
 8018530:	2900      	cmp	r1, #0
 8018532:	dc03      	bgt.n	801853c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018534:	9a02      	ldr	r2, [sp, #8]
 8018536:	2a00      	cmp	r2, #0
 8018538:	f340 8127 	ble.w	801878a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801853c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801853e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018542:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018546:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018548:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801854c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018550:	2b00      	cmp	r3, #0
 8018552:	dd0d      	ble.n	8018570 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018554:	1422      	asrs	r2, r4, #16
 8018556:	d405      	bmi.n	8018564 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018558:	4542      	cmp	r2, r8
 801855a:	da03      	bge.n	8018564 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801855c:	1402      	asrs	r2, r0, #16
 801855e:	d401      	bmi.n	8018564 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018560:	42ba      	cmp	r2, r7
 8018562:	db06      	blt.n	8018572 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018564:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018566:	4474      	add	r4, lr
 8018568:	3b01      	subs	r3, #1
 801856a:	3503      	adds	r5, #3
 801856c:	4410      	add	r0, r2
 801856e:	e7ef      	b.n	8018550 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018570:	d075      	beq.n	801865e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8018572:	1e5a      	subs	r2, r3, #1
 8018574:	fb0e 4602 	mla	r6, lr, r2, r4
 8018578:	1436      	asrs	r6, r6, #16
 801857a:	d465      	bmi.n	8018648 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801857c:	4546      	cmp	r6, r8
 801857e:	da63      	bge.n	8018648 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8018580:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018582:	fb06 0202 	mla	r2, r6, r2, r0
 8018586:	1412      	asrs	r2, r2, #16
 8018588:	d45e      	bmi.n	8018648 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801858a:	42ba      	cmp	r2, r7
 801858c:	da5c      	bge.n	8018648 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801858e:	1cef      	adds	r7, r5, #3
 8018590:	4699      	mov	r9, r3
 8018592:	f1b9 0f00 	cmp.w	r9, #0
 8018596:	dd5d      	ble.n	8018654 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8018598:	1402      	asrs	r2, r0, #16
 801859a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801859e:	1426      	asrs	r6, r4, #16
 80185a0:	4692      	mov	sl, r2
 80185a2:	9a00      	ldr	r2, [sp, #0]
 80185a4:	fb08 220a 	mla	r2, r8, sl, r2
 80185a8:	5d92      	ldrb	r2, [r2, r6]
 80185aa:	9e01      	ldr	r6, [sp, #4]
 80185ac:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80185b0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80185b4:	d041      	beq.n	801863a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80185b6:	9a03      	ldr	r2, [sp, #12]
 80185b8:	fa5f fb86 	uxtb.w	fp, r6
 80185bc:	fb02 f808 	mul.w	r8, r2, r8
 80185c0:	f108 0201 	add.w	r2, r8, #1
 80185c4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80185c8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80185cc:	1212      	asrs	r2, r2, #8
 80185ce:	fa1f fa82 	uxth.w	sl, r2
 80185d2:	43d2      	mvns	r2, r2
 80185d4:	fb1b fb0a 	smulbb	fp, fp, sl
 80185d8:	b2d2      	uxtb	r2, r2
 80185da:	fb08 b802 	mla	r8, r8, r2, fp
 80185de:	fa1f f888 	uxth.w	r8, r8
 80185e2:	f108 0b01 	add.w	fp, r8, #1
 80185e6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80185ea:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80185ee:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80185f2:	fb1b fb0a 	smulbb	fp, fp, sl
 80185f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80185fa:	fb16 fa0a 	smulbb	sl, r6, sl
 80185fe:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018602:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018606:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801860a:	fb06 aa02 	mla	sl, r6, r2, sl
 801860e:	fb08 b802 	mla	r8, r8, r2, fp
 8018612:	fa1f fa8a 	uxth.w	sl, sl
 8018616:	fa1f f888 	uxth.w	r8, r8
 801861a:	f10a 0601 	add.w	r6, sl, #1
 801861e:	f108 0b01 	add.w	fp, r8, #1
 8018622:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018626:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801862a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801862e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018632:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018636:	f807 8c02 	strb.w	r8, [r7, #-2]
 801863a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801863c:	4474      	add	r4, lr
 801863e:	3703      	adds	r7, #3
 8018640:	f109 39ff 	add.w	r9, r9, #4294967295
 8018644:	4410      	add	r0, r2
 8018646:	e7a4      	b.n	8018592 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018648:	f04f 0800 	mov.w	r8, #0
 801864c:	eba3 0208 	sub.w	r2, r3, r8
 8018650:	2a00      	cmp	r2, #0
 8018652:	dc3b      	bgt.n	80186cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8018654:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018658:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801865c:	441d      	add	r5, r3
 801865e:	2900      	cmp	r1, #0
 8018660:	f340 8093 	ble.w	801878a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8018664:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018668:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801866a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801866e:	3901      	subs	r1, #1
 8018670:	eeb0 6a62 	vmov.f32	s12, s5
 8018674:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018678:	ee31 1a05 	vadd.f32	s2, s2, s10
 801867c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018680:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018684:	eeb0 6a43 	vmov.f32	s12, s6
 8018688:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801868c:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018690:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018694:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018698:	ee77 2a62 	vsub.f32	s5, s14, s5
 801869c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80186a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80186a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80186a8:	ee12 2a90 	vmov	r2, s5
 80186ac:	eef0 2a47 	vmov.f32	s5, s14
 80186b0:	fb92 fef3 	sdiv	lr, r2, r3
 80186b4:	ee13 2a10 	vmov	r2, s6
 80186b8:	eeb0 3a67 	vmov.f32	s6, s15
 80186bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80186c0:	9a02      	ldr	r2, [sp, #8]
 80186c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80186c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80186c6:	bf08      	it	eq
 80186c8:	4613      	moveq	r3, r2
 80186ca:	e731      	b.n	8018530 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80186cc:	1427      	asrs	r7, r4, #16
 80186ce:	d456      	bmi.n	801877e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186d0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80186d4:	42be      	cmp	r6, r7
 80186d6:	dd52      	ble.n	801877e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186d8:	ea5f 4920 	movs.w	r9, r0, asr #16
 80186dc:	d44f      	bmi.n	801877e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186de:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80186e2:	454a      	cmp	r2, r9
 80186e4:	dd4b      	ble.n	801877e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186e6:	9a00      	ldr	r2, [sp, #0]
 80186e8:	b236      	sxth	r6, r6
 80186ea:	fb09 2606 	mla	r6, r9, r6, r2
 80186ee:	5df2      	ldrb	r2, [r6, r7]
 80186f0:	9e01      	ldr	r6, [sp, #4]
 80186f2:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80186f6:	0e3a      	lsrs	r2, r7, #24
 80186f8:	d041      	beq.n	801877e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80186fa:	9e03      	ldr	r6, [sp, #12]
 80186fc:	fa5f fb87 	uxtb.w	fp, r7
 8018700:	4372      	muls	r2, r6
 8018702:	1c56      	adds	r6, r2, #1
 8018704:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8018708:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801870c:	1212      	asrs	r2, r2, #8
 801870e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8018712:	fa1f fa82 	uxth.w	sl, r2
 8018716:	43d2      	mvns	r2, r2
 8018718:	fb1b fb0a 	smulbb	fp, fp, sl
 801871c:	b2d2      	uxtb	r2, r2
 801871e:	fb09 b902 	mla	r9, r9, r2, fp
 8018722:	fa1f f989 	uxth.w	r9, r9
 8018726:	f109 0b01 	add.w	fp, r9, #1
 801872a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801872e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8018732:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018736:	fb1b fb0a 	smulbb	fp, fp, sl
 801873a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801873e:	fb17 fa0a 	smulbb	sl, r7, sl
 8018742:	f805 9006 	strb.w	r9, [r5, r6]
 8018746:	442e      	add	r6, r5
 8018748:	78b7      	ldrb	r7, [r6, #2]
 801874a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801874e:	fb07 aa02 	mla	sl, r7, r2, sl
 8018752:	fb09 b902 	mla	r9, r9, r2, fp
 8018756:	fa1f fa8a 	uxth.w	sl, sl
 801875a:	fa1f f989 	uxth.w	r9, r9
 801875e:	f10a 0701 	add.w	r7, sl, #1
 8018762:	f109 0b01 	add.w	fp, r9, #1
 8018766:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801876a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801876e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018772:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018776:	f886 a002 	strb.w	sl, [r6, #2]
 801877a:	f886 9001 	strb.w	r9, [r6, #1]
 801877e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018780:	4474      	add	r4, lr
 8018782:	f108 0801 	add.w	r8, r8, #1
 8018786:	4410      	add	r0, r2
 8018788:	e760      	b.n	801864c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801878a:	b005      	add	sp, #20
 801878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018790 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018794:	b085      	sub	sp, #20
 8018796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801879a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801879c:	9203      	str	r2, [sp, #12]
 801879e:	6868      	ldr	r0, [r5, #4]
 80187a0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80187a4:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80187a8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80187ac:	fb00 2404 	mla	r4, r0, r4, r2
 80187b0:	682a      	ldr	r2, [r5, #0]
 80187b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80187b6:	4414      	add	r4, r2
 80187b8:	f8dc 2000 	ldr.w	r2, [ip]
 80187bc:	9201      	str	r2, [sp, #4]
 80187be:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80187c2:	3204      	adds	r2, #4
 80187c4:	9202      	str	r2, [sp, #8]
 80187c6:	2900      	cmp	r1, #0
 80187c8:	dc03      	bgt.n	80187d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80187ca:	9a03      	ldr	r2, [sp, #12]
 80187cc:	2a00      	cmp	r2, #0
 80187ce:	f340 8137 	ble.w	8018a40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80187d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80187d4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80187d8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80187dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80187de:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80187e2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	dd0d      	ble.n	8018806 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80187ea:	1405      	asrs	r5, r0, #16
 80187ec:	d405      	bmi.n	80187fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80187ee:	4545      	cmp	r5, r8
 80187f0:	da03      	bge.n	80187fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80187f2:	1415      	asrs	r5, r2, #16
 80187f4:	d401      	bmi.n	80187fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80187f6:	42bd      	cmp	r5, r7
 80187f8:	db06      	blt.n	8018808 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80187fa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80187fc:	4470      	add	r0, lr
 80187fe:	3b01      	subs	r3, #1
 8018800:	3403      	adds	r4, #3
 8018802:	442a      	add	r2, r5
 8018804:	e7ef      	b.n	80187e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8018806:	d070      	beq.n	80188ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8018808:	1e5d      	subs	r5, r3, #1
 801880a:	fb0e 0605 	mla	r6, lr, r5, r0
 801880e:	1436      	asrs	r6, r6, #16
 8018810:	d462      	bmi.n	80188d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018812:	4546      	cmp	r6, r8
 8018814:	da60      	bge.n	80188d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018816:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018818:	fb06 2505 	mla	r5, r6, r5, r2
 801881c:	142d      	asrs	r5, r5, #16
 801881e:	d45b      	bmi.n	80188d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018820:	42bd      	cmp	r5, r7
 8018822:	da59      	bge.n	80188d8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8018824:	1ce5      	adds	r5, r4, #3
 8018826:	469a      	mov	sl, r3
 8018828:	f1ba 0f00 	cmp.w	sl, #0
 801882c:	dd58      	ble.n	80188e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801882e:	1416      	asrs	r6, r2, #16
 8018830:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018834:	1407      	asrs	r7, r0, #16
 8018836:	46b1      	mov	r9, r6
 8018838:	9e01      	ldr	r6, [sp, #4]
 801883a:	fb08 6609 	mla	r6, r8, r9, r6
 801883e:	5df6      	ldrb	r6, [r6, r7]
 8018840:	9f02      	ldr	r7, [sp, #8]
 8018842:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8018846:	0e37      	lsrs	r7, r6, #24
 8018848:	2fff      	cmp	r7, #255	@ 0xff
 801884a:	f000 80f0 	beq.w	8018a2e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801884e:	fa5f f887 	uxtb.w	r8, r7
 8018852:	b3d7      	cbz	r7, 80188ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018854:	fa1f f788 	uxth.w	r7, r8
 8018858:	ea6f 0808 	mvn.w	r8, r8
 801885c:	fa5f fb86 	uxtb.w	fp, r6
 8018860:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8018864:	fa5f f888 	uxtb.w	r8, r8
 8018868:	fb1b fb07 	smulbb	fp, fp, r7
 801886c:	fb09 b908 	mla	r9, r9, r8, fp
 8018870:	fa1f f989 	uxth.w	r9, r9
 8018874:	f109 0b01 	add.w	fp, r9, #1
 8018878:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801887c:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8018880:	fb1b fb08 	smulbb	fp, fp, r8
 8018884:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018888:	f805 9c03 	strb.w	r9, [r5, #-3]
 801888c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8018890:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018894:	fb09 b907 	mla	r9, r9, r7, fp
 8018898:	fa1f f989 	uxth.w	r9, r9
 801889c:	f109 0b01 	add.w	fp, r9, #1
 80188a0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80188a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188a8:	f805 9c02 	strb.w	r9, [r5, #-2]
 80188ac:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80188b0:	fb19 f808 	smulbb	r8, r9, r8
 80188b4:	fb06 8607 	mla	r6, r6, r7, r8
 80188b8:	b2b6      	uxth	r6, r6
 80188ba:	f106 0801 	add.w	r8, r6, #1
 80188be:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80188c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80188c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80188ca:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80188cc:	4470      	add	r0, lr
 80188ce:	3503      	adds	r5, #3
 80188d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80188d4:	4432      	add	r2, r6
 80188d6:	e7a7      	b.n	8018828 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80188d8:	2600      	movs	r6, #0
 80188da:	1b9d      	subs	r5, r3, r6
 80188dc:	2d00      	cmp	r5, #0
 80188de:	dc3b      	bgt.n	8018958 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80188e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188e8:	441c      	add	r4, r3
 80188ea:	2900      	cmp	r1, #0
 80188ec:	f340 80a8 	ble.w	8018a40 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80188f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80188f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80188fa:	3901      	subs	r1, #1
 80188fc:	eeb0 6a62 	vmov.f32	s12, s5
 8018900:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018904:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018908:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801890c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018910:	eeb0 6a43 	vmov.f32	s12, s6
 8018914:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018918:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801891c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018920:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018924:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018928:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801892c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018930:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018934:	ee12 2a90 	vmov	r2, s5
 8018938:	eef0 2a47 	vmov.f32	s5, s14
 801893c:	fb92 fef3 	sdiv	lr, r2, r3
 8018940:	ee13 2a10 	vmov	r2, s6
 8018944:	eeb0 3a67 	vmov.f32	s6, s15
 8018948:	fb92 f3f3 	sdiv	r3, r2, r3
 801894c:	9a03      	ldr	r2, [sp, #12]
 801894e:	9312      	str	r3, [sp, #72]	@ 0x48
 8018950:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018952:	bf08      	it	eq
 8018954:	4613      	moveq	r3, r2
 8018956:	e736      	b.n	80187c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018958:	ea5f 4820 	movs.w	r8, r0, asr #16
 801895c:	d457      	bmi.n	8018a0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801895e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8018962:	4547      	cmp	r7, r8
 8018964:	dd53      	ble.n	8018a0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018966:	ea5f 4922 	movs.w	r9, r2, asr #16
 801896a:	d450      	bmi.n	8018a0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801896c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8018970:	454d      	cmp	r5, r9
 8018972:	dd4c      	ble.n	8018a0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018974:	9d01      	ldr	r5, [sp, #4]
 8018976:	b23f      	sxth	r7, r7
 8018978:	fb09 5707 	mla	r7, r9, r7, r5
 801897c:	f817 5008 	ldrb.w	r5, [r7, r8]
 8018980:	9f02      	ldr	r7, [sp, #8]
 8018982:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8018986:	0e2f      	lsrs	r7, r5, #24
 8018988:	2fff      	cmp	r7, #255	@ 0xff
 801898a:	d045      	beq.n	8018a18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801898c:	fa5f f987 	uxtb.w	r9, r7
 8018990:	b3ef      	cbz	r7, 8018a0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018992:	fa1f f889 	uxth.w	r8, r9
 8018996:	ea6f 0909 	mvn.w	r9, r9
 801899a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801899e:	fa5f fb85 	uxtb.w	fp, r5
 80189a2:	f814 a007 	ldrb.w	sl, [r4, r7]
 80189a6:	fa5f f989 	uxtb.w	r9, r9
 80189aa:	fb1b fb08 	smulbb	fp, fp, r8
 80189ae:	fb0a ba09 	mla	sl, sl, r9, fp
 80189b2:	fa1f fa8a 	uxth.w	sl, sl
 80189b6:	f10a 0b01 	add.w	fp, sl, #1
 80189ba:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80189be:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80189c2:	f804 a007 	strb.w	sl, [r4, r7]
 80189c6:	4427      	add	r7, r4
 80189c8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80189cc:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80189d0:	f897 b001 	ldrb.w	fp, [r7, #1]
 80189d4:	fb1b fb09 	smulbb	fp, fp, r9
 80189d8:	fb0a ba08 	mla	sl, sl, r8, fp
 80189dc:	fa1f fa8a 	uxth.w	sl, sl
 80189e0:	f10a 0b01 	add.w	fp, sl, #1
 80189e4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80189e8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80189ec:	f887 a001 	strb.w	sl, [r7, #1]
 80189f0:	f897 a002 	ldrb.w	sl, [r7, #2]
 80189f4:	fb1a f909 	smulbb	r9, sl, r9
 80189f8:	fb05 9508 	mla	r5, r5, r8, r9
 80189fc:	b2ad      	uxth	r5, r5
 80189fe:	f105 0901 	add.w	r9, r5, #1
 8018a02:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8018a06:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018a0a:	f887 9002 	strb.w	r9, [r7, #2]
 8018a0e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8018a10:	4470      	add	r0, lr
 8018a12:	3601      	adds	r6, #1
 8018a14:	442a      	add	r2, r5
 8018a16:	e760      	b.n	80188da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8018a18:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8018a1c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8018a20:	55e5      	strb	r5, [r4, r7]
 8018a22:	4427      	add	r7, r4
 8018a24:	0c2d      	lsrs	r5, r5, #16
 8018a26:	f887 8001 	strb.w	r8, [r7, #1]
 8018a2a:	70bd      	strb	r5, [r7, #2]
 8018a2c:	e7ef      	b.n	8018a0e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8018a2e:	0a37      	lsrs	r7, r6, #8
 8018a30:	f805 6c03 	strb.w	r6, [r5, #-3]
 8018a34:	0c36      	lsrs	r6, r6, #16
 8018a36:	f805 7c02 	strb.w	r7, [r5, #-2]
 8018a3a:	f805 6c01 	strb.w	r6, [r5, #-1]
 8018a3e:	e744      	b.n	80188ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8018a40:	b005      	add	sp, #20
 8018a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a46 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a4a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018a4c:	9201      	str	r2, [sp, #4]
 8018a4e:	6870      	ldr	r0, [r6, #4]
 8018a50:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8018a54:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8018a58:	fa1f fe85 	uxth.w	lr, r5
 8018a5c:	43ed      	mvns	r5, r5
 8018a5e:	f8dc 8000 	ldr.w	r8, [ip]
 8018a62:	b2ed      	uxtb	r5, r5
 8018a64:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018a68:	fb00 2404 	mla	r4, r0, r4, r2
 8018a6c:	6832      	ldr	r2, [r6, #0]
 8018a6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018a72:	4414      	add	r4, r2
 8018a74:	2900      	cmp	r1, #0
 8018a76:	dc03      	bgt.n	8018a80 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8018a78:	9a01      	ldr	r2, [sp, #4]
 8018a7a:	2a00      	cmp	r2, #0
 8018a7c:	f340 810d 	ble.w	8018c9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018a80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018a82:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8018a86:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018a8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a8c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8018a90:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	dd0e      	ble.n	8018ab6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018a98:	1406      	asrs	r6, r0, #16
 8018a9a:	d405      	bmi.n	8018aa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018a9c:	4556      	cmp	r6, sl
 8018a9e:	da03      	bge.n	8018aa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018aa0:	1416      	asrs	r6, r2, #16
 8018aa2:	d401      	bmi.n	8018aa8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8018aa4:	454e      	cmp	r6, r9
 8018aa6:	db07      	blt.n	8018ab8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018aa8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018aaa:	3b01      	subs	r3, #1
 8018aac:	3403      	adds	r4, #3
 8018aae:	4430      	add	r0, r6
 8018ab0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018ab2:	4432      	add	r2, r6
 8018ab4:	e7ee      	b.n	8018a94 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8018ab6:	d060      	beq.n	8018b7a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8018ab8:	1e5e      	subs	r6, r3, #1
 8018aba:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018abc:	fb07 0706 	mla	r7, r7, r6, r0
 8018ac0:	143f      	asrs	r7, r7, #16
 8018ac2:	d451      	bmi.n	8018b68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ac4:	4557      	cmp	r7, sl
 8018ac6:	da4f      	bge.n	8018b68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ac8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018aca:	fb07 2606 	mla	r6, r7, r6, r2
 8018ace:	1436      	asrs	r6, r6, #16
 8018ad0:	d44a      	bmi.n	8018b68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ad2:	454e      	cmp	r6, r9
 8018ad4:	da48      	bge.n	8018b68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8018ad6:	1ce6      	adds	r6, r4, #3
 8018ad8:	4699      	mov	r9, r3
 8018ada:	f1b9 0f00 	cmp.w	r9, #0
 8018ade:	f106 0603 	add.w	r6, r6, #3
 8018ae2:	dd45      	ble.n	8018b70 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8018ae4:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8018ae8:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018aec:	1417      	asrs	r7, r2, #16
 8018aee:	f109 39ff 	add.w	r9, r9, #4294967295
 8018af2:	fb0b a707 	mla	r7, fp, r7, sl
 8018af6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8018afa:	fb1b fb05 	smulbb	fp, fp, r5
 8018afe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018b02:	eb08 0a07 	add.w	sl, r8, r7
 8018b06:	f818 7007 	ldrb.w	r7, [r8, r7]
 8018b0a:	fb07 b70e 	mla	r7, r7, lr, fp
 8018b0e:	b2bf      	uxth	r7, r7
 8018b10:	f107 0b01 	add.w	fp, r7, #1
 8018b14:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018b18:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8018b1c:	fb1b fb05 	smulbb	fp, fp, r5
 8018b20:	123f      	asrs	r7, r7, #8
 8018b22:	f806 7c06 	strb.w	r7, [r6, #-6]
 8018b26:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8018b2a:	fb07 b70e 	mla	r7, r7, lr, fp
 8018b2e:	b2bf      	uxth	r7, r7
 8018b30:	f107 0b01 	add.w	fp, r7, #1
 8018b34:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8018b38:	123f      	asrs	r7, r7, #8
 8018b3a:	f806 7c05 	strb.w	r7, [r6, #-5]
 8018b3e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8018b42:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8018b46:	fb1a fa05 	smulbb	sl, sl, r5
 8018b4a:	fb07 a70e 	mla	r7, r7, lr, sl
 8018b4e:	b2bf      	uxth	r7, r7
 8018b50:	f107 0a01 	add.w	sl, r7, #1
 8018b54:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018b58:	123f      	asrs	r7, r7, #8
 8018b5a:	f806 7c04 	strb.w	r7, [r6, #-4]
 8018b5e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018b60:	4438      	add	r0, r7
 8018b62:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018b64:	443a      	add	r2, r7
 8018b66:	e7b8      	b.n	8018ada <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018b68:	2700      	movs	r7, #0
 8018b6a:	1bde      	subs	r6, r3, r7
 8018b6c:	2e00      	cmp	r6, #0
 8018b6e:	dc3f      	bgt.n	8018bf0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8018b70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b78:	441c      	add	r4, r3
 8018b7a:	2900      	cmp	r1, #0
 8018b7c:	f340 808d 	ble.w	8018c9a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8018b80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018b84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018b86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b8a:	3901      	subs	r1, #1
 8018b8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b90:	eef0 6a62 	vmov.f32	s13, s5
 8018b94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018b98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018b9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018ba0:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8018ba4:	eef0 6a43 	vmov.f32	s13, s6
 8018ba8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018bac:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8018bb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018bb4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018bb8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018bbc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018bc0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018bc4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018bc8:	ee12 2a90 	vmov	r2, s5
 8018bcc:	eef0 2a47 	vmov.f32	s5, s14
 8018bd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8018bd4:	ee13 2a10 	vmov	r2, s6
 8018bd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bdc:	eeb0 3a67 	vmov.f32	s6, s15
 8018be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8018be4:	9a01      	ldr	r2, [sp, #4]
 8018be6:	9310      	str	r3, [sp, #64]	@ 0x40
 8018be8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018bea:	bf08      	it	eq
 8018bec:	4613      	moveq	r3, r2
 8018bee:	e741      	b.n	8018a74 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018bf0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018bf4:	d44b      	bmi.n	8018c8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018bf6:	f8dc b008 	ldr.w	fp, [ip, #8]
 8018bfa:	45cb      	cmp	fp, r9
 8018bfc:	dd47      	ble.n	8018c8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018bfe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018c02:	d444      	bmi.n	8018c8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c04:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8018c08:	4556      	cmp	r6, sl
 8018c0a:	dd40      	ble.n	8018c8e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8018c0c:	fa0f f68b 	sxth.w	r6, fp
 8018c10:	fb0a 9906 	mla	r9, sl, r6, r9
 8018c14:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8018c18:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8018c1c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8018c20:	fb1b fb05 	smulbb	fp, fp, r5
 8018c24:	eb08 0a09 	add.w	sl, r8, r9
 8018c28:	f818 9009 	ldrb.w	r9, [r8, r9]
 8018c2c:	fb09 b90e 	mla	r9, r9, lr, fp
 8018c30:	fa1f f989 	uxth.w	r9, r9
 8018c34:	f109 0b01 	add.w	fp, r9, #1
 8018c38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c40:	f804 9006 	strb.w	r9, [r4, r6]
 8018c44:	4426      	add	r6, r4
 8018c46:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8018c4a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018c4e:	fb1b fb05 	smulbb	fp, fp, r5
 8018c52:	fb09 b90e 	mla	r9, r9, lr, fp
 8018c56:	fa1f f989 	uxth.w	r9, r9
 8018c5a:	f109 0b01 	add.w	fp, r9, #1
 8018c5e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018c62:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c66:	f886 9001 	strb.w	r9, [r6, #1]
 8018c6a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8018c6e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018c72:	fb1a fa05 	smulbb	sl, sl, r5
 8018c76:	fb09 a90e 	mla	r9, r9, lr, sl
 8018c7a:	fa1f f989 	uxth.w	r9, r9
 8018c7e:	f109 0a01 	add.w	sl, r9, #1
 8018c82:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018c86:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018c8a:	f886 9002 	strb.w	r9, [r6, #2]
 8018c8e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8018c90:	3701      	adds	r7, #1
 8018c92:	4430      	add	r0, r6
 8018c94:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018c96:	4432      	add	r2, r6
 8018c98:	e767      	b.n	8018b6a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8018c9a:	b003      	add	sp, #12
 8018c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ca0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8018ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018caa:	9201      	str	r2, [sp, #4]
 8018cac:	6868      	ldr	r0, [r5, #4]
 8018cae:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8018cb0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8018cb4:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8018cb8:	fb00 2404 	mla	r4, r0, r4, r2
 8018cbc:	682a      	ldr	r2, [r5, #0]
 8018cbe:	f8d7 8000 	ldr.w	r8, [r7]
 8018cc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018cc6:	4414      	add	r4, r2
 8018cc8:	2900      	cmp	r1, #0
 8018cca:	dc03      	bgt.n	8018cd4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8018ccc:	9a01      	ldr	r2, [sp, #4]
 8018cce:	2a00      	cmp	r2, #0
 8018cd0:	f340 80af 	ble.w	8018e32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018cd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018cd6:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8018cda:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018cde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ce0:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8018ce4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8018ce8:	2b00      	cmp	r3, #0
 8018cea:	dd0c      	ble.n	8018d06 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018cec:	1405      	asrs	r5, r0, #16
 8018cee:	d405      	bmi.n	8018cfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018cf0:	4555      	cmp	r5, sl
 8018cf2:	da03      	bge.n	8018cfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018cf4:	1415      	asrs	r5, r2, #16
 8018cf6:	d401      	bmi.n	8018cfc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018cf8:	454d      	cmp	r5, r9
 8018cfa:	db05      	blt.n	8018d08 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018cfc:	4470      	add	r0, lr
 8018cfe:	4462      	add	r2, ip
 8018d00:	3b01      	subs	r3, #1
 8018d02:	3403      	adds	r4, #3
 8018d04:	e7f0      	b.n	8018ce8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018d06:	d038      	beq.n	8018d7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8018d08:	1e5d      	subs	r5, r3, #1
 8018d0a:	fb0e 0605 	mla	r6, lr, r5, r0
 8018d0e:	1436      	asrs	r6, r6, #16
 8018d10:	d42a      	bmi.n	8018d68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d12:	4556      	cmp	r6, sl
 8018d14:	da28      	bge.n	8018d68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d16:	fb0c 2505 	mla	r5, ip, r5, r2
 8018d1a:	142d      	asrs	r5, r5, #16
 8018d1c:	d424      	bmi.n	8018d68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d1e:	454d      	cmp	r5, r9
 8018d20:	da22      	bge.n	8018d68 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8018d22:	1ce6      	adds	r6, r4, #3
 8018d24:	4699      	mov	r9, r3
 8018d26:	f1b9 0f00 	cmp.w	r9, #0
 8018d2a:	f106 0603 	add.w	r6, r6, #3
 8018d2e:	dd1f      	ble.n	8018d70 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8018d30:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8018d34:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8018d38:	1415      	asrs	r5, r2, #16
 8018d3a:	4470      	add	r0, lr
 8018d3c:	4462      	add	r2, ip
 8018d3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8018d42:	fb0b a505 	mla	r5, fp, r5, sl
 8018d46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d4a:	eb08 0a05 	add.w	sl, r8, r5
 8018d4e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8018d52:	f806 5c06 	strb.w	r5, [r6, #-6]
 8018d56:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018d5a:	f806 5c05 	strb.w	r5, [r6, #-5]
 8018d5e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8018d62:	f806 5c04 	strb.w	r5, [r6, #-4]
 8018d66:	e7de      	b.n	8018d26 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8018d68:	2600      	movs	r6, #0
 8018d6a:	1b9d      	subs	r5, r3, r6
 8018d6c:	2d00      	cmp	r5, #0
 8018d6e:	dc38      	bgt.n	8018de2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8018d70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d78:	441c      	add	r4, r3
 8018d7a:	2900      	cmp	r1, #0
 8018d7c:	dd59      	ble.n	8018e32 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018d7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d88:	3901      	subs	r1, #1
 8018d8a:	eeb0 6a62 	vmov.f32	s12, s5
 8018d8e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018d92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d9a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8018d9e:	eeb0 6a43 	vmov.f32	s12, s6
 8018da2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018da6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8018daa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018dae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018db2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018db6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018dba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018dbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018dc2:	ee12 2a90 	vmov	r2, s5
 8018dc6:	eef0 2a47 	vmov.f32	s5, s14
 8018dca:	fb92 fef3 	sdiv	lr, r2, r3
 8018dce:	ee13 2a10 	vmov	r2, s6
 8018dd2:	eeb0 3a67 	vmov.f32	s6, s15
 8018dd6:	fb92 fcf3 	sdiv	ip, r2, r3
 8018dda:	9a01      	ldr	r2, [sp, #4]
 8018ddc:	bf08      	it	eq
 8018dde:	4613      	moveq	r3, r2
 8018de0:	e772      	b.n	8018cc8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8018de2:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018de6:	d420      	bmi.n	8018e2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018de8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8018dec:	45cb      	cmp	fp, r9
 8018dee:	dd1c      	ble.n	8018e2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018df0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8018df4:	d419      	bmi.n	8018e2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018df6:	68fd      	ldr	r5, [r7, #12]
 8018df8:	4555      	cmp	r5, sl
 8018dfa:	dd16      	ble.n	8018e2a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8018dfc:	fa0f f58b 	sxth.w	r5, fp
 8018e00:	fb0a 9505 	mla	r5, sl, r5, r9
 8018e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e08:	f818 9005 	ldrb.w	r9, [r8, r5]
 8018e0c:	eb08 0b05 	add.w	fp, r8, r5
 8018e10:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8018e14:	f804 9005 	strb.w	r9, [r4, r5]
 8018e18:	4425      	add	r5, r4
 8018e1a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8018e1e:	f885 9001 	strb.w	r9, [r5, #1]
 8018e22:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8018e26:	f885 9002 	strb.w	r9, [r5, #2]
 8018e2a:	4470      	add	r0, lr
 8018e2c:	4462      	add	r2, ip
 8018e2e:	3601      	adds	r6, #1
 8018e30:	e79b      	b.n	8018d6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8018e32:	b003      	add	sp, #12
 8018e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e38 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e3c:	b085      	sub	sp, #20
 8018e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018e42:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018e44:	9202      	str	r2, [sp, #8]
 8018e46:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8018e4a:	6860      	ldr	r0, [r4, #4]
 8018e4c:	9203      	str	r2, [sp, #12]
 8018e4e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8018e52:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8018e56:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8018e5a:	fb00 2505 	mla	r5, r0, r5, r2
 8018e5e:	6822      	ldr	r2, [r4, #0]
 8018e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e64:	4415      	add	r5, r2
 8018e66:	f8dc 2000 	ldr.w	r2, [ip]
 8018e6a:	9201      	str	r2, [sp, #4]
 8018e6c:	2900      	cmp	r1, #0
 8018e6e:	dc03      	bgt.n	8018e78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8018e70:	9a02      	ldr	r2, [sp, #8]
 8018e72:	2a00      	cmp	r2, #0
 8018e74:	f340 8122 	ble.w	80190bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018e78:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018e7a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018e7e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8018e82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8018e84:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8018e88:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	dd0d      	ble.n	8018eac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018e90:	1422      	asrs	r2, r4, #16
 8018e92:	d405      	bmi.n	8018ea0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018e94:	4542      	cmp	r2, r8
 8018e96:	da03      	bge.n	8018ea0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018e98:	1402      	asrs	r2, r0, #16
 8018e9a:	d401      	bmi.n	8018ea0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8018e9c:	42ba      	cmp	r2, r7
 8018e9e:	db06      	blt.n	8018eae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018ea0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018ea2:	4474      	add	r4, lr
 8018ea4:	3b01      	subs	r3, #1
 8018ea6:	3503      	adds	r5, #3
 8018ea8:	4410      	add	r0, r2
 8018eaa:	e7ef      	b.n	8018e8c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8018eac:	d072      	beq.n	8018f94 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8018eae:	1e5a      	subs	r2, r3, #1
 8018eb0:	fb0e 4602 	mla	r6, lr, r2, r4
 8018eb4:	1436      	asrs	r6, r6, #16
 8018eb6:	d462      	bmi.n	8018f7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018eb8:	4546      	cmp	r6, r8
 8018eba:	da60      	bge.n	8018f7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ebc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8018ebe:	fb06 0202 	mla	r2, r6, r2, r0
 8018ec2:	1412      	asrs	r2, r2, #16
 8018ec4:	d45b      	bmi.n	8018f7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018ec6:	42ba      	cmp	r2, r7
 8018ec8:	da59      	bge.n	8018f7e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8018eca:	1cef      	adds	r7, r5, #3
 8018ecc:	4699      	mov	r9, r3
 8018ece:	f1b9 0f00 	cmp.w	r9, #0
 8018ed2:	dd5a      	ble.n	8018f8a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018ed4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8018ed8:	1426      	asrs	r6, r4, #16
 8018eda:	1402      	asrs	r2, r0, #16
 8018edc:	fb08 6202 	mla	r2, r8, r2, r6
 8018ee0:	9e01      	ldr	r6, [sp, #4]
 8018ee2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8018ee6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8018eea:	d041      	beq.n	8018f70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8018eec:	9a03      	ldr	r2, [sp, #12]
 8018eee:	fa5f fb86 	uxtb.w	fp, r6
 8018ef2:	fb02 f808 	mul.w	r8, r2, r8
 8018ef6:	f108 0201 	add.w	r2, r8, #1
 8018efa:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8018efe:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8018f02:	1212      	asrs	r2, r2, #8
 8018f04:	fa1f fa82 	uxth.w	sl, r2
 8018f08:	43d2      	mvns	r2, r2
 8018f0a:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f0e:	b2d2      	uxtb	r2, r2
 8018f10:	fb08 b802 	mla	r8, r8, r2, fp
 8018f14:	fa1f f888 	uxth.w	r8, r8
 8018f18:	f108 0b01 	add.w	fp, r8, #1
 8018f1c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f20:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8018f24:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8018f28:	fb1b fb0a 	smulbb	fp, fp, sl
 8018f2c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f30:	fb16 fa0a 	smulbb	sl, r6, sl
 8018f34:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8018f38:	f807 8c03 	strb.w	r8, [r7, #-3]
 8018f3c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8018f40:	fb06 aa02 	mla	sl, r6, r2, sl
 8018f44:	fb08 b802 	mla	r8, r8, r2, fp
 8018f48:	fa1f fa8a 	uxth.w	sl, sl
 8018f4c:	fa1f f888 	uxth.w	r8, r8
 8018f50:	f10a 0601 	add.w	r6, sl, #1
 8018f54:	f108 0b01 	add.w	fp, r8, #1
 8018f58:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8018f5c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018f60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f64:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018f68:	f807 ac01 	strb.w	sl, [r7, #-1]
 8018f6c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8018f70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018f72:	4474      	add	r4, lr
 8018f74:	3703      	adds	r7, #3
 8018f76:	f109 39ff 	add.w	r9, r9, #4294967295
 8018f7a:	4410      	add	r0, r2
 8018f7c:	e7a7      	b.n	8018ece <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018f7e:	f04f 0800 	mov.w	r8, #0
 8018f82:	eba3 0208 	sub.w	r2, r3, r8
 8018f86:	2a00      	cmp	r2, #0
 8018f88:	dc3b      	bgt.n	8019002 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8018f8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f92:	441d      	add	r5, r3
 8018f94:	2900      	cmp	r1, #0
 8018f96:	f340 8091 	ble.w	80190bc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8018f9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018fa0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018fa4:	3901      	subs	r1, #1
 8018fa6:	eeb0 6a62 	vmov.f32	s12, s5
 8018faa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018fae:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018fb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fb6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8018fba:	eeb0 6a43 	vmov.f32	s12, s6
 8018fbe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018fc2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8018fc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018fca:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018fce:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018fd2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018fd6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018fda:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018fde:	ee12 2a90 	vmov	r2, s5
 8018fe2:	eef0 2a47 	vmov.f32	s5, s14
 8018fe6:	fb92 fef3 	sdiv	lr, r2, r3
 8018fea:	ee13 2a10 	vmov	r2, s6
 8018fee:	eeb0 3a67 	vmov.f32	s6, s15
 8018ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ff6:	9a02      	ldr	r2, [sp, #8]
 8018ff8:	9312      	str	r3, [sp, #72]	@ 0x48
 8018ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ffc:	bf08      	it	eq
 8018ffe:	4613      	moveq	r3, r2
 8019000:	e734      	b.n	8018e6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8019002:	1427      	asrs	r7, r4, #16
 8019004:	d454      	bmi.n	80190b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019006:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801900a:	42be      	cmp	r6, r7
 801900c:	dd50      	ble.n	80190b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801900e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019012:	d44d      	bmi.n	80190b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8019014:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019018:	454a      	cmp	r2, r9
 801901a:	dd49      	ble.n	80190b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801901c:	b236      	sxth	r6, r6
 801901e:	9a01      	ldr	r2, [sp, #4]
 8019020:	fb09 7606 	mla	r6, r9, r6, r7
 8019024:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8019028:	0e3a      	lsrs	r2, r7, #24
 801902a:	d041      	beq.n	80190b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801902c:	9e03      	ldr	r6, [sp, #12]
 801902e:	fa5f fb87 	uxtb.w	fp, r7
 8019032:	4372      	muls	r2, r6
 8019034:	1c56      	adds	r6, r2, #1
 8019036:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801903a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801903e:	1212      	asrs	r2, r2, #8
 8019040:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019044:	fa1f fa82 	uxth.w	sl, r2
 8019048:	43d2      	mvns	r2, r2
 801904a:	fb1b fb0a 	smulbb	fp, fp, sl
 801904e:	b2d2      	uxtb	r2, r2
 8019050:	fb09 b902 	mla	r9, r9, r2, fp
 8019054:	fa1f f989 	uxth.w	r9, r9
 8019058:	f109 0b01 	add.w	fp, r9, #1
 801905c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019060:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019064:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019068:	fb1b fb0a 	smulbb	fp, fp, sl
 801906c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019070:	fb17 fa0a 	smulbb	sl, r7, sl
 8019074:	f805 9006 	strb.w	r9, [r5, r6]
 8019078:	442e      	add	r6, r5
 801907a:	78b7      	ldrb	r7, [r6, #2]
 801907c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019080:	fb07 aa02 	mla	sl, r7, r2, sl
 8019084:	fb09 b902 	mla	r9, r9, r2, fp
 8019088:	fa1f fa8a 	uxth.w	sl, sl
 801908c:	fa1f f989 	uxth.w	r9, r9
 8019090:	f10a 0701 	add.w	r7, sl, #1
 8019094:	f109 0b01 	add.w	fp, r9, #1
 8019098:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801909c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80190a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80190a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80190a8:	f886 a002 	strb.w	sl, [r6, #2]
 80190ac:	f886 9001 	strb.w	r9, [r6, #1]
 80190b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80190b2:	4474      	add	r4, lr
 80190b4:	f108 0801 	add.w	r8, r8, #1
 80190b8:	4410      	add	r0, r2
 80190ba:	e762      	b.n	8018f82 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80190bc:	b005      	add	sp, #20
 80190be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80190c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80190c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80190cc:	9201      	str	r2, [sp, #4]
 80190ce:	6860      	ldr	r0, [r4, #4]
 80190d0:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80190d4:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80190d8:	fb00 2505 	mla	r5, r0, r5, r2
 80190dc:	6822      	ldr	r2, [r4, #0]
 80190de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190e2:	4415      	add	r5, r2
 80190e4:	f8dc 2000 	ldr.w	r2, [ip]
 80190e8:	9200      	str	r2, [sp, #0]
 80190ea:	2900      	cmp	r1, #0
 80190ec:	dc03      	bgt.n	80190f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80190ee:	9a01      	ldr	r2, [sp, #4]
 80190f0:	2a00      	cmp	r2, #0
 80190f2:	f340 812b 	ble.w	801934c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80190f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80190f8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80190fc:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019102:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019106:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801910a:	2b00      	cmp	r3, #0
 801910c:	dd0e      	ble.n	801912c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801910e:	1422      	asrs	r2, r4, #16
 8019110:	d405      	bmi.n	801911e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019112:	4572      	cmp	r2, lr
 8019114:	da03      	bge.n	801911e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019116:	1402      	asrs	r2, r0, #16
 8019118:	d401      	bmi.n	801911e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801911a:	42ba      	cmp	r2, r7
 801911c:	db07      	blt.n	801912e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801911e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019120:	3b01      	subs	r3, #1
 8019122:	3503      	adds	r5, #3
 8019124:	4414      	add	r4, r2
 8019126:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019128:	4410      	add	r0, r2
 801912a:	e7ee      	b.n	801910a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801912c:	d06f      	beq.n	801920e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801912e:	1e5a      	subs	r2, r3, #1
 8019130:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8019132:	fb06 4602 	mla	r6, r6, r2, r4
 8019136:	1436      	asrs	r6, r6, #16
 8019138:	d45e      	bmi.n	80191f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801913a:	4576      	cmp	r6, lr
 801913c:	da5c      	bge.n	80191f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801913e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019140:	fb06 0202 	mla	r2, r6, r2, r0
 8019144:	1412      	asrs	r2, r2, #16
 8019146:	d457      	bmi.n	80191f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8019148:	42ba      	cmp	r2, r7
 801914a:	da55      	bge.n	80191f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801914c:	1cee      	adds	r6, r5, #3
 801914e:	469a      	mov	sl, r3
 8019150:	f1ba 0f00 	cmp.w	sl, #0
 8019154:	dd56      	ble.n	8019204 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8019156:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801915a:	1427      	asrs	r7, r4, #16
 801915c:	1402      	asrs	r2, r0, #16
 801915e:	fb0e 7202 	mla	r2, lr, r2, r7
 8019162:	9f00      	ldr	r7, [sp, #0]
 8019164:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8019168:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801916c:	d03c      	beq.n	80191e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801916e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8019172:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8019176:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801917a:	fa5f f28e 	uxtb.w	r2, lr
 801917e:	b2ff      	uxtb	r7, r7
 8019180:	f000 80dd 	beq.w	801933e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8019184:	fa1f f882 	uxth.w	r8, r2
 8019188:	43d2      	mvns	r2, r2
 801918a:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801918e:	fb17 f708 	smulbb	r7, r7, r8
 8019192:	b2d2      	uxtb	r2, r2
 8019194:	fb19 f908 	smulbb	r9, r9, r8
 8019198:	fb0e 7702 	mla	r7, lr, r2, r7
 801919c:	fb1b f808 	smulbb	r8, fp, r8
 80191a0:	b2bf      	uxth	r7, r7
 80191a2:	f107 0e01 	add.w	lr, r7, #1
 80191a6:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80191aa:	123f      	asrs	r7, r7, #8
 80191ac:	f806 7c03 	strb.w	r7, [r6, #-3]
 80191b0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80191b4:	fb07 9902 	mla	r9, r7, r2, r9
 80191b8:	fa1f f989 	uxth.w	r9, r9
 80191bc:	f109 0701 	add.w	r7, r9, #1
 80191c0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80191c4:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80191c8:	fb07 8802 	mla	r8, r7, r2, r8
 80191cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80191d0:	fa1f f888 	uxth.w	r8, r8
 80191d4:	f806 9c02 	strb.w	r9, [r6, #-2]
 80191d8:	f108 0201 	add.w	r2, r8, #1
 80191dc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80191e0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80191e4:	f806 8c01 	strb.w	r8, [r6, #-1]
 80191e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80191ea:	3603      	adds	r6, #3
 80191ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80191f0:	4414      	add	r4, r2
 80191f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80191f4:	4410      	add	r0, r2
 80191f6:	e7ab      	b.n	8019150 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80191f8:	f04f 0e00 	mov.w	lr, #0
 80191fc:	eba3 020e 	sub.w	r2, r3, lr
 8019200:	2a00      	cmp	r2, #0
 8019202:	dc3d      	bgt.n	8019280 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8019204:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801920c:	441d      	add	r5, r3
 801920e:	2900      	cmp	r1, #0
 8019210:	f340 809c 	ble.w	801934c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019214:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801921a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801921e:	3901      	subs	r1, #1
 8019220:	eeb0 6a62 	vmov.f32	s12, s5
 8019224:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019228:	ee31 1a05 	vadd.f32	s2, s2, s10
 801922c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019230:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8019234:	eeb0 6a43 	vmov.f32	s12, s6
 8019238:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801923c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8019240:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019244:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019248:	ee77 2a62 	vsub.f32	s5, s14, s5
 801924c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019250:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019254:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019258:	ee12 2a90 	vmov	r2, s5
 801925c:	eef0 2a47 	vmov.f32	s5, s14
 8019260:	fb92 f3f3 	sdiv	r3, r2, r3
 8019264:	ee13 2a10 	vmov	r2, s6
 8019268:	930f      	str	r3, [sp, #60]	@ 0x3c
 801926a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801926c:	eeb0 3a67 	vmov.f32	s6, s15
 8019270:	fb92 f3f3 	sdiv	r3, r2, r3
 8019274:	9a01      	ldr	r2, [sp, #4]
 8019276:	9310      	str	r3, [sp, #64]	@ 0x40
 8019278:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801927a:	bf08      	it	eq
 801927c:	4613      	moveq	r3, r2
 801927e:	e734      	b.n	80190ea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8019280:	1427      	asrs	r7, r4, #16
 8019282:	d44d      	bmi.n	8019320 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019284:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019288:	42be      	cmp	r6, r7
 801928a:	dd49      	ble.n	8019320 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801928c:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019290:	d446      	bmi.n	8019320 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8019292:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019296:	4542      	cmp	r2, r8
 8019298:	dd42      	ble.n	8019320 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801929a:	b236      	sxth	r6, r6
 801929c:	9a00      	ldr	r2, [sp, #0]
 801929e:	fb08 7606 	mla	r6, r8, r6, r7
 80192a2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80192a6:	0e3a      	lsrs	r2, r7, #24
 80192a8:	d03a      	beq.n	8019320 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80192aa:	2aff      	cmp	r2, #255	@ 0xff
 80192ac:	b2d6      	uxtb	r6, r2
 80192ae:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80192b2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80192b6:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80192ba:	b2ff      	uxtb	r7, r7
 80192bc:	d037      	beq.n	801932e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80192be:	fa1f f986 	uxth.w	r9, r6
 80192c2:	4472      	add	r2, lr
 80192c4:	43f6      	mvns	r6, r6
 80192c6:	f815 8002 	ldrb.w	r8, [r5, r2]
 80192ca:	fb17 f709 	smulbb	r7, r7, r9
 80192ce:	fb1a fa09 	smulbb	sl, sl, r9
 80192d2:	b2f6      	uxtb	r6, r6
 80192d4:	fb1b f909 	smulbb	r9, fp, r9
 80192d8:	fb08 7706 	mla	r7, r8, r6, r7
 80192dc:	b2bf      	uxth	r7, r7
 80192de:	f107 0801 	add.w	r8, r7, #1
 80192e2:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80192e6:	123f      	asrs	r7, r7, #8
 80192e8:	54af      	strb	r7, [r5, r2]
 80192ea:	442a      	add	r2, r5
 80192ec:	7857      	ldrb	r7, [r2, #1]
 80192ee:	fb07 aa06 	mla	sl, r7, r6, sl
 80192f2:	fa1f fa8a 	uxth.w	sl, sl
 80192f6:	f10a 0701 	add.w	r7, sl, #1
 80192fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80192fe:	7897      	ldrb	r7, [r2, #2]
 8019300:	fb07 9906 	mla	r9, r7, r6, r9
 8019304:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019308:	fa1f f989 	uxth.w	r9, r9
 801930c:	f882 a001 	strb.w	sl, [r2, #1]
 8019310:	f109 0601 	add.w	r6, r9, #1
 8019314:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8019318:	ea4f 2929 	mov.w	r9, r9, asr #8
 801931c:	f882 9002 	strb.w	r9, [r2, #2]
 8019320:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019322:	f10e 0e01 	add.w	lr, lr, #1
 8019326:	4414      	add	r4, r2
 8019328:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801932a:	4410      	add	r0, r2
 801932c:	e766      	b.n	80191fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801932e:	4472      	add	r2, lr
 8019330:	54af      	strb	r7, [r5, r2]
 8019332:	442a      	add	r2, r5
 8019334:	f882 a001 	strb.w	sl, [r2, #1]
 8019338:	f882 b002 	strb.w	fp, [r2, #2]
 801933c:	e7f0      	b.n	8019320 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801933e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8019342:	f806 9c02 	strb.w	r9, [r6, #-2]
 8019346:	f806 bc01 	strb.w	fp, [r6, #-1]
 801934a:	e74d      	b.n	80191e8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801934c:	b003      	add	sp, #12
 801934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019354 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019358:	b087      	sub	sp, #28
 801935a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801935e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8019360:	9204      	str	r2, [sp, #16]
 8019362:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019366:	6860      	ldr	r0, [r4, #4]
 8019368:	9205      	str	r2, [sp, #20]
 801936a:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801936e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8019372:	9101      	str	r1, [sp, #4]
 8019374:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8019378:	fb00 2505 	mla	r5, r0, r5, r2
 801937c:	6822      	ldr	r2, [r4, #0]
 801937e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019382:	4415      	add	r5, r2
 8019384:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019388:	3201      	adds	r2, #1
 801938a:	f022 0201 	bic.w	r2, r2, #1
 801938e:	9202      	str	r2, [sp, #8]
 8019390:	f8dc 2000 	ldr.w	r2, [ip]
 8019394:	9203      	str	r2, [sp, #12]
 8019396:	9a01      	ldr	r2, [sp, #4]
 8019398:	2a00      	cmp	r2, #0
 801939a:	dc03      	bgt.n	80193a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801939c:	9a04      	ldr	r2, [sp, #16]
 801939e:	2a00      	cmp	r2, #0
 80193a0:	f340 8135 	ble.w	801960e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80193a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80193a6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80193aa:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80193ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80193b0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80193b4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	dd0d      	ble.n	80193d8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80193bc:	1422      	asrs	r2, r4, #16
 80193be:	d405      	bmi.n	80193cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193c0:	4542      	cmp	r2, r8
 80193c2:	da03      	bge.n	80193cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193c4:	1402      	asrs	r2, r0, #16
 80193c6:	d401      	bmi.n	80193cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80193c8:	42ba      	cmp	r2, r7
 80193ca:	db06      	blt.n	80193da <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80193cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80193ce:	4474      	add	r4, lr
 80193d0:	3b01      	subs	r3, #1
 80193d2:	3503      	adds	r5, #3
 80193d4:	4410      	add	r0, r2
 80193d6:	e7ef      	b.n	80193b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80193d8:	d077      	beq.n	80194ca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80193da:	1e5a      	subs	r2, r3, #1
 80193dc:	fb0e 4602 	mla	r6, lr, r2, r4
 80193e0:	1436      	asrs	r6, r6, #16
 80193e2:	d469      	bmi.n	80194b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193e4:	4546      	cmp	r6, r8
 80193e6:	da67      	bge.n	80194b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193e8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80193ea:	fb06 0202 	mla	r2, r6, r2, r0
 80193ee:	1412      	asrs	r2, r2, #16
 80193f0:	d462      	bmi.n	80194b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193f2:	42ba      	cmp	r2, r7
 80193f4:	da60      	bge.n	80194b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80193f6:	1cee      	adds	r6, r5, #3
 80193f8:	4699      	mov	r9, r3
 80193fa:	f1b9 0f00 	cmp.w	r9, #0
 80193fe:	dd5f      	ble.n	80194c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019400:	1422      	asrs	r2, r4, #16
 8019402:	9902      	ldr	r1, [sp, #8]
 8019404:	1407      	asrs	r7, r0, #16
 8019406:	fb01 2707 	mla	r7, r1, r7, r2
 801940a:	9903      	ldr	r1, [sp, #12]
 801940c:	087a      	lsrs	r2, r7, #1
 801940e:	5c8a      	ldrb	r2, [r1, r2]
 8019410:	07f9      	lsls	r1, r7, #31
 8019412:	bf54      	ite	pl
 8019414:	f002 020f 	andpl.w	r2, r2, #15
 8019418:	1112      	asrmi	r2, r2, #4
 801941a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801941e:	b2d2      	uxtb	r2, r2
 8019420:	2a00      	cmp	r2, #0
 8019422:	d042      	beq.n	80194aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8019424:	497b      	ldr	r1, [pc, #492]	@ (8019614 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8019426:	680f      	ldr	r7, [r1, #0]
 8019428:	9905      	ldr	r1, [sp, #20]
 801942a:	fa5f fb87 	uxtb.w	fp, r7
 801942e:	434a      	muls	r2, r1
 8019430:	f102 0801 	add.w	r8, r2, #1
 8019434:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8019438:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801943c:	1212      	asrs	r2, r2, #8
 801943e:	fa1f fa82 	uxth.w	sl, r2
 8019442:	43d2      	mvns	r2, r2
 8019444:	fb1b fb0a 	smulbb	fp, fp, sl
 8019448:	b2d2      	uxtb	r2, r2
 801944a:	fb08 b802 	mla	r8, r8, r2, fp
 801944e:	fa1f f888 	uxth.w	r8, r8
 8019452:	f108 0b01 	add.w	fp, r8, #1
 8019456:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801945a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801945e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019462:	fb1b fb0a 	smulbb	fp, fp, sl
 8019466:	ea4f 2828 	mov.w	r8, r8, asr #8
 801946a:	fb17 fa0a 	smulbb	sl, r7, sl
 801946e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8019472:	f806 8c03 	strb.w	r8, [r6, #-3]
 8019476:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801947a:	fb07 aa02 	mla	sl, r7, r2, sl
 801947e:	fb08 b802 	mla	r8, r8, r2, fp
 8019482:	fa1f fa8a 	uxth.w	sl, sl
 8019486:	fa1f f888 	uxth.w	r8, r8
 801948a:	f10a 0701 	add.w	r7, sl, #1
 801948e:	f108 0b01 	add.w	fp, r8, #1
 8019492:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019496:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801949a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801949e:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194a2:	f806 ac01 	strb.w	sl, [r6, #-1]
 80194a6:	f806 8c02 	strb.w	r8, [r6, #-2]
 80194aa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80194ac:	4474      	add	r4, lr
 80194ae:	3603      	adds	r6, #3
 80194b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80194b4:	4410      	add	r0, r2
 80194b6:	e7a0      	b.n	80193fa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80194b8:	2700      	movs	r7, #0
 80194ba:	1bda      	subs	r2, r3, r7
 80194bc:	2a00      	cmp	r2, #0
 80194be:	dc3e      	bgt.n	801953e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80194c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194c8:	441d      	add	r5, r3
 80194ca:	9b01      	ldr	r3, [sp, #4]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	f340 809e 	ble.w	801960e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80194d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80194d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80194d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80194dc:	eeb0 6a62 	vmov.f32	s12, s5
 80194e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80194e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80194e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194ec:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 80194f0:	eeb0 6a43 	vmov.f32	s12, s6
 80194f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194f8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80194fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019500:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019504:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019508:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801950c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019510:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019514:	ee12 2a90 	vmov	r2, s5
 8019518:	eef0 2a47 	vmov.f32	s5, s14
 801951c:	fb92 fef3 	sdiv	lr, r2, r3
 8019520:	ee13 2a10 	vmov	r2, s6
 8019524:	eeb0 3a67 	vmov.f32	s6, s15
 8019528:	fb92 f3f3 	sdiv	r3, r2, r3
 801952c:	9314      	str	r3, [sp, #80]	@ 0x50
 801952e:	9b01      	ldr	r3, [sp, #4]
 8019530:	9a04      	ldr	r2, [sp, #16]
 8019532:	3b01      	subs	r3, #1
 8019534:	9301      	str	r3, [sp, #4]
 8019536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019538:	bf08      	it	eq
 801953a:	4613      	moveq	r3, r2
 801953c:	e72b      	b.n	8019396 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801953e:	1426      	asrs	r6, r4, #16
 8019540:	d460      	bmi.n	8019604 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019542:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019546:	42b2      	cmp	r2, r6
 8019548:	dd5c      	ble.n	8019604 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801954a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801954e:	d459      	bmi.n	8019604 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019550:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019554:	4542      	cmp	r2, r8
 8019556:	dd55      	ble.n	8019604 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019558:	9a02      	ldr	r2, [sp, #8]
 801955a:	9903      	ldr	r1, [sp, #12]
 801955c:	fb08 6602 	mla	r6, r8, r2, r6
 8019560:	0872      	lsrs	r2, r6, #1
 8019562:	07f6      	lsls	r6, r6, #31
 8019564:	5c8a      	ldrb	r2, [r1, r2]
 8019566:	bf54      	ite	pl
 8019568:	f002 020f 	andpl.w	r2, r2, #15
 801956c:	1112      	asrmi	r2, r2, #4
 801956e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019572:	b2d2      	uxtb	r2, r2
 8019574:	2a00      	cmp	r2, #0
 8019576:	d045      	beq.n	8019604 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019578:	4926      	ldr	r1, [pc, #152]	@ (8019614 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801957a:	f8d1 8000 	ldr.w	r8, [r1]
 801957e:	9905      	ldr	r1, [sp, #20]
 8019580:	fa5f fb88 	uxtb.w	fp, r8
 8019584:	434a      	muls	r2, r1
 8019586:	1c56      	adds	r6, r2, #1
 8019588:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801958c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019590:	1212      	asrs	r2, r2, #8
 8019592:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019596:	fa1f fa82 	uxth.w	sl, r2
 801959a:	43d2      	mvns	r2, r2
 801959c:	fb1b fb0a 	smulbb	fp, fp, sl
 80195a0:	b2d2      	uxtb	r2, r2
 80195a2:	fb09 b902 	mla	r9, r9, r2, fp
 80195a6:	fa1f f989 	uxth.w	r9, r9
 80195aa:	f109 0b01 	add.w	fp, r9, #1
 80195ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80195b2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80195b6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80195ba:	fb1b fb0a 	smulbb	fp, fp, sl
 80195be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80195c2:	fb18 fa0a 	smulbb	sl, r8, sl
 80195c6:	f805 9006 	strb.w	r9, [r5, r6]
 80195ca:	442e      	add	r6, r5
 80195cc:	f896 8002 	ldrb.w	r8, [r6, #2]
 80195d0:	f896 9001 	ldrb.w	r9, [r6, #1]
 80195d4:	fb08 aa02 	mla	sl, r8, r2, sl
 80195d8:	fb09 b902 	mla	r9, r9, r2, fp
 80195dc:	fa1f fa8a 	uxth.w	sl, sl
 80195e0:	fa1f f989 	uxth.w	r9, r9
 80195e4:	f10a 0801 	add.w	r8, sl, #1
 80195e8:	f109 0b01 	add.w	fp, r9, #1
 80195ec:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80195f0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80195f4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80195f8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80195fc:	f886 a002 	strb.w	sl, [r6, #2]
 8019600:	f886 9001 	strb.w	r9, [r6, #1]
 8019604:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019606:	4474      	add	r4, lr
 8019608:	3701      	adds	r7, #1
 801960a:	4410      	add	r0, r2
 801960c:	e755      	b.n	80194ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801960e:	b007      	add	sp, #28
 8019610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019614:	24025388 	.word	0x24025388

08019618 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801961c:	b085      	sub	sp, #20
 801961e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019622:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8019624:	9203      	str	r2, [sp, #12]
 8019626:	6860      	ldr	r0, [r4, #4]
 8019628:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801962c:	9100      	str	r1, [sp, #0]
 801962e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8019632:	fb00 2606 	mla	r6, r0, r6, r2
 8019636:	6822      	ldr	r2, [r4, #0]
 8019638:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801963c:	4416      	add	r6, r2
 801963e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8019642:	3201      	adds	r2, #1
 8019644:	f022 0201 	bic.w	r2, r2, #1
 8019648:	9201      	str	r2, [sp, #4]
 801964a:	f8dc 2000 	ldr.w	r2, [ip]
 801964e:	9202      	str	r2, [sp, #8]
 8019650:	9a00      	ldr	r2, [sp, #0]
 8019652:	2a00      	cmp	r2, #0
 8019654:	dc03      	bgt.n	801965e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8019656:	9a03      	ldr	r2, [sp, #12]
 8019658:	2a00      	cmp	r2, #0
 801965a:	f340 8140 	ble.w	80198de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801965e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019660:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8019664:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8019668:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801966a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801966e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8019672:	2b00      	cmp	r3, #0
 8019674:	dd0e      	ble.n	8019694 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019676:	142a      	asrs	r2, r5, #16
 8019678:	d405      	bmi.n	8019686 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801967a:	4572      	cmp	r2, lr
 801967c:	da03      	bge.n	8019686 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801967e:	1422      	asrs	r2, r4, #16
 8019680:	d401      	bmi.n	8019686 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019682:	42ba      	cmp	r2, r7
 8019684:	db07      	blt.n	8019696 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019686:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019688:	3b01      	subs	r3, #1
 801968a:	3603      	adds	r6, #3
 801968c:	4415      	add	r5, r2
 801968e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019690:	4414      	add	r4, r2
 8019692:	e7ee      	b.n	8019672 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019694:	d072      	beq.n	801977c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019696:	1e5a      	subs	r2, r3, #1
 8019698:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801969a:	fb00 5002 	mla	r0, r0, r2, r5
 801969e:	1400      	asrs	r0, r0, #16
 80196a0:	d463      	bmi.n	801976a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196a2:	4570      	cmp	r0, lr
 80196a4:	da61      	bge.n	801976a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196a6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80196a8:	fb00 4202 	mla	r2, r0, r2, r4
 80196ac:	1412      	asrs	r2, r2, #16
 80196ae:	d45c      	bmi.n	801976a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196b0:	42ba      	cmp	r2, r7
 80196b2:	da5a      	bge.n	801976a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80196b4:	1cf0      	adds	r0, r6, #3
 80196b6:	469a      	mov	sl, r3
 80196b8:	f1ba 0f00 	cmp.w	sl, #0
 80196bc:	dd59      	ble.n	8019772 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80196be:	142a      	asrs	r2, r5, #16
 80196c0:	9901      	ldr	r1, [sp, #4]
 80196c2:	1427      	asrs	r7, r4, #16
 80196c4:	fb01 2707 	mla	r7, r1, r7, r2
 80196c8:	9902      	ldr	r1, [sp, #8]
 80196ca:	087a      	lsrs	r2, r7, #1
 80196cc:	5c8a      	ldrb	r2, [r1, r2]
 80196ce:	07f9      	lsls	r1, r7, #31
 80196d0:	bf54      	ite	pl
 80196d2:	f002 020f 	andpl.w	r2, r2, #15
 80196d6:	1112      	asrmi	r2, r2, #4
 80196d8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80196dc:	b2d2      	uxtb	r2, r2
 80196de:	2a00      	cmp	r2, #0
 80196e0:	d03b      	beq.n	801975a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80196e2:	4980      	ldr	r1, [pc, #512]	@ (80198e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80196e4:	2aff      	cmp	r2, #255	@ 0xff
 80196e6:	680f      	ldr	r7, [r1, #0]
 80196e8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80196ec:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80196f0:	b2ff      	uxtb	r7, r7
 80196f2:	f000 80ed 	beq.w	80198d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80196f6:	fa1f f882 	uxth.w	r8, r2
 80196fa:	43d2      	mvns	r2, r2
 80196fc:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8019700:	fb17 f708 	smulbb	r7, r7, r8
 8019704:	b2d2      	uxtb	r2, r2
 8019706:	fb19 f908 	smulbb	r9, r9, r8
 801970a:	fb0e 7702 	mla	r7, lr, r2, r7
 801970e:	fb1b f808 	smulbb	r8, fp, r8
 8019712:	b2bf      	uxth	r7, r7
 8019714:	f107 0e01 	add.w	lr, r7, #1
 8019718:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801971c:	123f      	asrs	r7, r7, #8
 801971e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8019722:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8019726:	fb07 9902 	mla	r9, r7, r2, r9
 801972a:	fa1f f989 	uxth.w	r9, r9
 801972e:	f109 0701 	add.w	r7, r9, #1
 8019732:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8019736:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801973a:	fb07 8802 	mla	r8, r7, r2, r8
 801973e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019742:	fa1f f888 	uxth.w	r8, r8
 8019746:	f800 9c02 	strb.w	r9, [r0, #-2]
 801974a:	f108 0201 	add.w	r2, r8, #1
 801974e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019752:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019756:	f800 8c01 	strb.w	r8, [r0, #-1]
 801975a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801975c:	3003      	adds	r0, #3
 801975e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019762:	4415      	add	r5, r2
 8019764:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019766:	4414      	add	r4, r2
 8019768:	e7a6      	b.n	80196b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801976a:	2700      	movs	r7, #0
 801976c:	1bda      	subs	r2, r3, r7
 801976e:	2a00      	cmp	r2, #0
 8019770:	dc40      	bgt.n	80197f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8019772:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019776:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801977a:	441e      	add	r6, r3
 801977c:	9b00      	ldr	r3, [sp, #0]
 801977e:	2b00      	cmp	r3, #0
 8019780:	f340 80ad 	ble.w	80198de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8019784:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019788:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801978a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801978e:	eeb0 6a62 	vmov.f32	s12, s5
 8019792:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019796:	ee31 1a05 	vadd.f32	s2, s2, s10
 801979a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801979e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80197a2:	eeb0 6a43 	vmov.f32	s12, s6
 80197a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197aa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80197ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80197c6:	ee12 2a90 	vmov	r2, s5
 80197ca:	eef0 2a47 	vmov.f32	s5, s14
 80197ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80197d2:	ee13 2a10 	vmov	r2, s6
 80197d6:	9311      	str	r3, [sp, #68]	@ 0x44
 80197d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197da:	eeb0 3a67 	vmov.f32	s6, s15
 80197de:	fb92 f3f3 	sdiv	r3, r2, r3
 80197e2:	9312      	str	r3, [sp, #72]	@ 0x48
 80197e4:	9b00      	ldr	r3, [sp, #0]
 80197e6:	9a03      	ldr	r2, [sp, #12]
 80197e8:	3b01      	subs	r3, #1
 80197ea:	9300      	str	r3, [sp, #0]
 80197ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197ee:	bf08      	it	eq
 80197f0:	4613      	moveq	r3, r2
 80197f2:	e72d      	b.n	8019650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80197f4:	1428      	asrs	r0, r5, #16
 80197f6:	d45c      	bmi.n	80198b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80197f8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80197fc:	4282      	cmp	r2, r0
 80197fe:	dd58      	ble.n	80198b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019800:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8019804:	d455      	bmi.n	80198b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8019806:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801980a:	4572      	cmp	r2, lr
 801980c:	dd51      	ble.n	80198b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801980e:	9a01      	ldr	r2, [sp, #4]
 8019810:	9902      	ldr	r1, [sp, #8]
 8019812:	fb0e 0002 	mla	r0, lr, r2, r0
 8019816:	0842      	lsrs	r2, r0, #1
 8019818:	07c0      	lsls	r0, r0, #31
 801981a:	5c8a      	ldrb	r2, [r1, r2]
 801981c:	bf54      	ite	pl
 801981e:	f002 020f 	andpl.w	r2, r2, #15
 8019822:	1112      	asrmi	r2, r2, #4
 8019824:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019828:	b2d2      	uxtb	r2, r2
 801982a:	2a00      	cmp	r2, #0
 801982c:	d041      	beq.n	80198b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801982e:	492d      	ldr	r1, [pc, #180]	@ (80198e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8019830:	2aff      	cmp	r2, #255	@ 0xff
 8019832:	6808      	ldr	r0, [r1, #0]
 8019834:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8019838:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801983c:	fa5f fe80 	uxtb.w	lr, r0
 8019840:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8019844:	d03b      	beq.n	80198be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019846:	fa1f f982 	uxth.w	r9, r2
 801984a:	4438      	add	r0, r7
 801984c:	43d2      	mvns	r2, r2
 801984e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8019852:	fb1e fe09 	smulbb	lr, lr, r9
 8019856:	fb1a fa09 	smulbb	sl, sl, r9
 801985a:	b2d2      	uxtb	r2, r2
 801985c:	fb1b f909 	smulbb	r9, fp, r9
 8019860:	fb08 ee02 	mla	lr, r8, r2, lr
 8019864:	fa1f fe8e 	uxth.w	lr, lr
 8019868:	f10e 0801 	add.w	r8, lr, #1
 801986c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8019870:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019874:	f806 e000 	strb.w	lr, [r6, r0]
 8019878:	4430      	add	r0, r6
 801987a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801987e:	fb0e aa02 	mla	sl, lr, r2, sl
 8019882:	fa1f fa8a 	uxth.w	sl, sl
 8019886:	f10a 0e01 	add.w	lr, sl, #1
 801988a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801988e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8019892:	fb0e 9902 	mla	r9, lr, r2, r9
 8019896:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801989a:	fa1f f989 	uxth.w	r9, r9
 801989e:	f880 a001 	strb.w	sl, [r0, #1]
 80198a2:	f109 0201 	add.w	r2, r9, #1
 80198a6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80198aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198ae:	f880 9002 	strb.w	r9, [r0, #2]
 80198b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80198b4:	3701      	adds	r7, #1
 80198b6:	4415      	add	r5, r2
 80198b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80198ba:	4414      	add	r4, r2
 80198bc:	e756      	b.n	801976c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80198be:	4438      	add	r0, r7
 80198c0:	f806 e000 	strb.w	lr, [r6, r0]
 80198c4:	4430      	add	r0, r6
 80198c6:	f880 a001 	strb.w	sl, [r0, #1]
 80198ca:	f880 b002 	strb.w	fp, [r0, #2]
 80198ce:	e7f0      	b.n	80198b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80198d0:	f800 7c03 	strb.w	r7, [r0, #-3]
 80198d4:	f800 9c02 	strb.w	r9, [r0, #-2]
 80198d8:	f800 bc01 	strb.w	fp, [r0, #-1]
 80198dc:	e73d      	b.n	801975a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80198de:	b005      	add	sp, #20
 80198e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198e4:	24025388 	.word	0x24025388

080198e8 <_ZN8touchgfx8LCD24bppD1Ev>:
 80198e8:	4770      	bx	lr

080198ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 80198ea:	4770      	bx	lr

080198ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 80198ec:	4770      	bx	lr

080198ee <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 80198ee:	4770      	bx	lr

080198f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 80198f0:	4770      	bx	lr

080198f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80198f2:	4770      	bx	lr

080198f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80198f4:	4770      	bx	lr

080198f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80198f6:	4770      	bx	lr

080198f8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80198f8:	4770      	bx	lr

080198fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80198fa:	4770      	bx	lr

080198fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80198fc:	4770      	bx	lr

080198fe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80198fe:	4770      	bx	lr

08019900 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019900:	4770      	bx	lr

08019902 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019902:	4770      	bx	lr

08019904 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019904:	4770      	bx	lr

08019906 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019906:	4770      	bx	lr

08019908 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019908:	4770      	bx	lr

0801990a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801990a:	4770      	bx	lr

0801990c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801990c:	4770      	bx	lr

0801990e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801990e:	4770      	bx	lr

08019910 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8019910:	4770      	bx	lr

08019912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8019912:	4770      	bx	lr

08019914 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8019914:	4770      	bx	lr

08019916 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8019916:	4770      	bx	lr

08019918 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8019918:	4770      	bx	lr
	...

0801991c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801991e:	4606      	mov	r6, r0
 8019920:	b087      	sub	sp, #28
 8019922:	4615      	mov	r5, r2
 8019924:	461f      	mov	r7, r3
 8019926:	b353      	cbz	r3, 801997e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019928:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801992c:	2b00      	cmp	r3, #0
 801992e:	dd26      	ble.n	801997e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019930:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8019934:	2b00      	cmp	r3, #0
 8019936:	dd22      	ble.n	801997e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8019938:	6808      	ldr	r0, [r1, #0]
 801993a:	aa04      	add	r2, sp, #16
 801993c:	6849      	ldr	r1, [r1, #4]
 801993e:	4c1b      	ldr	r4, [pc, #108]	@ (80199ac <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8019940:	c203      	stmia	r2!, {r0, r1}
 8019942:	a804      	add	r0, sp, #16
 8019944:	f7fa fcde 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019948:	6820      	ldr	r0, [r4, #0]
 801994a:	6803      	ldr	r3, [r0, #0]
 801994c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801994e:	4798      	blx	r3
 8019950:	2fff      	cmp	r7, #255	@ 0xff
 8019952:	d016      	beq.n	8019982 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8019954:	f010 0f08 	tst.w	r0, #8
 8019958:	6820      	ldr	r0, [r4, #0]
 801995a:	d015      	beq.n	8019988 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801995c:	2400      	movs	r4, #0
 801995e:	6801      	ldr	r1, [r0, #0]
 8019960:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8019964:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019968:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801996c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8019970:	9401      	str	r4, [sp, #4]
 8019972:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8019976:	9400      	str	r4, [sp, #0]
 8019978:	6e4c      	ldr	r4, [r1, #100]	@ 0x64
 801997a:	4629      	mov	r1, r5
 801997c:	47a0      	blx	r4
 801997e:	b007      	add	sp, #28
 8019980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019982:	f010 0f02 	tst.w	r0, #2
 8019986:	e7e7      	b.n	8019958 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8019988:	6803      	ldr	r3, [r0, #0]
 801998a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801998c:	4798      	blx	r3
 801998e:	4b08      	ldr	r3, [pc, #32]	@ (80199b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8019990:	4601      	mov	r1, r0
 8019992:	4630      	mov	r0, r6
 8019994:	881a      	ldrh	r2, [r3, #0]
 8019996:	6833      	ldr	r3, [r6, #0]
 8019998:	e9cd 5700 	strd	r5, r7, [sp]
 801999c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801999e:	ab04      	add	r3, sp, #16
 80199a0:	47a8      	blx	r5
 80199a2:	6820      	ldr	r0, [r4, #0]
 80199a4:	6803      	ldr	r3, [r0, #0]
 80199a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80199a8:	4798      	blx	r3
 80199aa:	e7e8      	b.n	801997e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80199ac:	24025378 	.word	0x24025378
 80199b0:	24025372 	.word	0x24025372

080199b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80199b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199b8:	b08b      	sub	sp, #44	@ 0x2c
 80199ba:	460d      	mov	r5, r1
 80199bc:	4616      	mov	r6, r2
 80199be:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80199c2:	f1b8 0f00 	cmp.w	r8, #0
 80199c6:	d047      	beq.n	8019a58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80199c8:	6810      	ldr	r0, [r2, #0]
 80199ca:	ac06      	add	r4, sp, #24
 80199cc:	6851      	ldr	r1, [r2, #4]
 80199ce:	4f51      	ldr	r7, [pc, #324]	@ (8019b14 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80199d0:	c403      	stmia	r4!, {r0, r1}
 80199d2:	6818      	ldr	r0, [r3, #0]
 80199d4:	ac08      	add	r4, sp, #32
 80199d6:	6859      	ldr	r1, [r3, #4]
 80199d8:	c403      	stmia	r4!, {r0, r1}
 80199da:	a806      	add	r0, sp, #24
 80199dc:	f7fa fc92 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80199e0:	4631      	mov	r1, r6
 80199e2:	a808      	add	r0, sp, #32
 80199e4:	f7fa fcd2 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80199e8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80199ec:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80199f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80199f4:	6838      	ldr	r0, [r7, #0]
 80199f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80199fa:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 80199fe:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8019a02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a06:	440d      	add	r5, r1
 8019a08:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019a0c:	440a      	add	r2, r1
 8019a0e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8019a12:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019a16:	4413      	add	r3, r2
 8019a18:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019a1c:	6803      	ldr	r3, [r0, #0]
 8019a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019a20:	4798      	blx	r3
 8019a22:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019a26:	d01a      	beq.n	8019a5e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8019a28:	f010 0f04 	tst.w	r0, #4
 8019a2c:	6838      	ldr	r0, [r7, #0]
 8019a2e:	d019      	beq.n	8019a64 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8019a30:	2100      	movs	r1, #0
 8019a32:	6807      	ldr	r7, [r0, #0]
 8019a34:	b2a4      	uxth	r4, r4
 8019a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a3a:	b2b6      	uxth	r6, r6
 8019a3c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019a40:	9401      	str	r4, [sp, #4]
 8019a42:	9600      	str	r6, [sp, #0]
 8019a44:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8019a48:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8019a4c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019a50:	9102      	str	r1, [sp, #8]
 8019a52:	4629      	mov	r1, r5
 8019a54:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8019a56:	47a0      	blx	r4
 8019a58:	b00b      	add	sp, #44	@ 0x2c
 8019a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a5e:	f010 0f01 	tst.w	r0, #1
 8019a62:	e7e3      	b.n	8019a2c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8019a64:	6803      	ldr	r3, [r0, #0]
 8019a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a68:	4798      	blx	r3
 8019a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8019b18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8019a6c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8019a70:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8019a74:	8813      	ldrh	r3, [r2, #0]
 8019a76:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8019a7a:	fb03 f404 	mul.w	r4, r3, r4
 8019a7e:	fb03 c101 	mla	r1, r3, r1, ip
 8019a82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019a86:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a8a:	4408      	add	r0, r1
 8019a8c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8019a90:	4404      	add	r4, r0
 8019a92:	d02e      	beq.n	8019af2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8019a94:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8019a98:	1b9b      	subs	r3, r3, r6
 8019a9a:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8019a9e:	1b96      	subs	r6, r2, r6
 8019aa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019aa4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019aa8:	42a0      	cmp	r0, r4
 8019aaa:	d22d      	bcs.n	8019b08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019aac:	eb00 0e01 	add.w	lr, r0, r1
 8019ab0:	4570      	cmp	r0, lr
 8019ab2:	d210      	bcs.n	8019ad6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8019ab4:	f890 9000 	ldrb.w	r9, [r0]
 8019ab8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019abc:	fb19 f90c 	smulbb	r9, r9, ip
 8019ac0:	fb02 9208 	mla	r2, r2, r8, r9
 8019ac4:	b292      	uxth	r2, r2
 8019ac6:	f102 0901 	add.w	r9, r2, #1
 8019aca:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8019ace:	1212      	asrs	r2, r2, #8
 8019ad0:	f800 2b01 	strb.w	r2, [r0], #1
 8019ad4:	e7ec      	b.n	8019ab0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8019ad6:	4418      	add	r0, r3
 8019ad8:	4435      	add	r5, r6
 8019ada:	e7e5      	b.n	8019aa8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8019adc:	8813      	ldrh	r3, [r2, #0]
 8019ade:	1b9b      	subs	r3, r3, r6
 8019ae0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019ae4:	4418      	add	r0, r3
 8019ae6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019aea:	1b9b      	subs	r3, r3, r6
 8019aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019af0:	441d      	add	r5, r3
 8019af2:	42a0      	cmp	r0, r4
 8019af4:	d208      	bcs.n	8019b08 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8019af6:	eb00 0c01 	add.w	ip, r0, r1
 8019afa:	4560      	cmp	r0, ip
 8019afc:	d2ee      	bcs.n	8019adc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8019afe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019b02:	f800 3b01 	strb.w	r3, [r0], #1
 8019b06:	e7f8      	b.n	8019afa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8019b08:	6838      	ldr	r0, [r7, #0]
 8019b0a:	6803      	ldr	r3, [r0, #0]
 8019b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b0e:	4798      	blx	r3
 8019b10:	e7a2      	b.n	8019a58 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8019b12:	bf00      	nop
 8019b14:	24025378 	.word	0x24025378
 8019b18:	24025372 	.word	0x24025372

08019b1c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8019b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b1e:	2300      	movs	r3, #0
 8019b20:	b085      	sub	sp, #20
 8019b22:	9300      	str	r3, [sp, #0]
 8019b24:	4b41      	ldr	r3, [pc, #260]	@ (8019c2c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8019b26:	781b      	ldrb	r3, [r3, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d136      	bne.n	8019b9a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8019b2c:	4a40      	ldr	r2, [pc, #256]	@ (8019c30 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019b2e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019b32:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d131      	bne.n	8019b9e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8019b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8019c34 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019b40:	ac02      	add	r4, sp, #8
 8019b42:	6808      	ldr	r0, [r1, #0]
 8019b44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019b48:	ab02      	add	r3, sp, #8
 8019b4a:	6849      	ldr	r1, [r1, #4]
 8019b4c:	4d3a      	ldr	r5, [pc, #232]	@ (8019c38 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8019b4e:	c303      	stmia	r3!, {r0, r1}
 8019b50:	4669      	mov	r1, sp
 8019b52:	4620      	mov	r0, r4
 8019b54:	f7fa fc1a 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019b58:	4668      	mov	r0, sp
 8019b5a:	f7fa fbd3 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019b5e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8019b62:	f8bd 2000 	ldrh.w	r2, [sp]
 8019b66:	462e      	mov	r6, r5
 8019b68:	6828      	ldr	r0, [r5, #0]
 8019b6a:	4413      	add	r3, r2
 8019b6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019b70:	f8ad 3008 	strh.w	r3, [sp, #8]
 8019b74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8019b78:	4413      	add	r3, r2
 8019b7a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8019b7e:	6803      	ldr	r3, [r0, #0]
 8019b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b82:	4798      	blx	r3
 8019b84:	f010 0f01 	tst.w	r0, #1
 8019b88:	d00b      	beq.n	8019ba2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8019b8a:	6828      	ldr	r0, [r5, #0]
 8019b8c:	6803      	ldr	r3, [r0, #0]
 8019b8e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019b94:	4798      	blx	r3
 8019b96:	b005      	add	sp, #20
 8019b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b9a:	4a26      	ldr	r2, [pc, #152]	@ (8019c34 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8019b9c:	e7c7      	b.n	8019b2e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8019b9e:	4b24      	ldr	r3, [pc, #144]	@ (8019c30 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019ba0:	e7cc      	b.n	8019b3c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8019ba2:	6830      	ldr	r0, [r6, #0]
 8019ba4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8019ba8:	6803      	ldr	r3, [r0, #0]
 8019baa:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bb0:	4798      	blx	r3
 8019bb2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8019bb6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019bba:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8019bbe:	fb14 3402 	smlabb	r4, r4, r2, r3
 8019bc2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019bc6:	4404      	add	r4, r0
 8019bc8:	6830      	ldr	r0, [r6, #0]
 8019bca:	6803      	ldr	r3, [r0, #0]
 8019bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019bce:	4798      	blx	r3
 8019bd0:	4917      	ldr	r1, [pc, #92]	@ (8019c30 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8019bd2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8019bd6:	880b      	ldrh	r3, [r1, #0]
 8019bd8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8019bdc:	fb03 c202 	mla	r2, r3, r2, ip
 8019be0:	437b      	muls	r3, r7
 8019be2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8019be6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019bea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019bee:	4410      	add	r0, r2
 8019bf0:	18c2      	adds	r2, r0, r3
 8019bf2:	4290      	cmp	r0, r2
 8019bf4:	d214      	bcs.n	8019c20 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8019bf6:	eb00 0c07 	add.w	ip, r0, r7
 8019bfa:	4560      	cmp	r0, ip
 8019bfc:	d204      	bcs.n	8019c08 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8019bfe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019c02:	f800 3b01 	strb.w	r3, [r0], #1
 8019c06:	e7f8      	b.n	8019bfa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8019c08:	880b      	ldrh	r3, [r1, #0]
 8019c0a:	1b5b      	subs	r3, r3, r5
 8019c0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c10:	4418      	add	r0, r3
 8019c12:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8019c16:	1b5b      	subs	r3, r3, r5
 8019c18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c1c:	441c      	add	r4, r3
 8019c1e:	e7e8      	b.n	8019bf2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8019c20:	6830      	ldr	r0, [r6, #0]
 8019c22:	6803      	ldr	r3, [r0, #0]
 8019c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c26:	4798      	blx	r3
 8019c28:	e7b5      	b.n	8019b96 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8019c2a:	bf00      	nop
 8019c2c:	24025370 	.word	0x24025370
 8019c30:	24025372 	.word	0x24025372
 8019c34:	24025374 	.word	0x24025374
 8019c38:	24025378 	.word	0x24025378

08019c3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8019c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c40:	b08f      	sub	sp, #60	@ 0x3c
 8019c42:	461c      	mov	r4, r3
 8019c44:	9203      	str	r2, [sp, #12]
 8019c46:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8019c4a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019c4c:	6820      	ldr	r0, [r4, #0]
 8019c4e:	9100      	str	r1, [sp, #0]
 8019c50:	9204      	str	r2, [sp, #16]
 8019c52:	aa0a      	add	r2, sp, #40	@ 0x28
 8019c54:	6861      	ldr	r1, [r4, #4]
 8019c56:	c203      	stmia	r2!, {r0, r1}
 8019c58:	6818      	ldr	r0, [r3, #0]
 8019c5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8019c5c:	6859      	ldr	r1, [r3, #4]
 8019c5e:	c203      	stmia	r2!, {r0, r1}
 8019c60:	a80a      	add	r0, sp, #40	@ 0x28
 8019c62:	f7fa fb4f 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c66:	4621      	mov	r1, r4
 8019c68:	a80c      	add	r0, sp, #48	@ 0x30
 8019c6a:	f7fa fb8f 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c6e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8019c72:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8019c76:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8019c7a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8019c7e:	bfdb      	ittet	le
 8019c80:	b2b3      	uxthle	r3, r6
 8019c82:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8019c86:	2301      	movgt	r3, #1
 8019c88:	fb92 f3f3 	sdivle	r3, r2, r3
 8019c8c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019c90:	441d      	add	r5, r3
 8019c92:	fb92 f1f3 	sdiv	r1, r2, r3
 8019c96:	fa1f fc81 	uxth.w	ip, r1
 8019c9a:	3d01      	subs	r5, #1
 8019c9c:	fb0c 2413 	mls	r4, ip, r3, r2
 8019ca0:	4661      	mov	r1, ip
 8019ca2:	fb14 f406 	smulbb	r4, r4, r6
 8019ca6:	4404      	add	r4, r0
 8019ca8:	fb95 f5f3 	sdiv	r5, r5, r3
 8019cac:	b2a4      	uxth	r4, r4
 8019cae:	b131      	cbz	r1, 8019cbe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8019cb0:	9b03      	ldr	r3, [sp, #12]
 8019cb2:	9900      	ldr	r1, [sp, #0]
 8019cb4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019cb8:	ba1b      	rev	r3, r3
 8019cba:	4419      	add	r1, r3
 8019cbc:	9100      	str	r1, [sp, #0]
 8019cbe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019cc2:	b2ad      	uxth	r5, r5
 8019cc4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8019cc8:	4418      	add	r0, r3
 8019cca:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8019cce:	00ad      	lsls	r5, r5, #2
 8019cd0:	441a      	add	r2, r3
 8019cd2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019cd6:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8019cda:	9301      	str	r3, [sp, #4]
 8019cdc:	4b79      	ldr	r3, [pc, #484]	@ (8019ec4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019cde:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019ce2:	6818      	ldr	r0, [r3, #0]
 8019ce4:	6803      	ldr	r3, [r0, #0]
 8019ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019ce8:	4798      	blx	r3
 8019cea:	4a77      	ldr	r2, [pc, #476]	@ (8019ec8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8019cec:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8019cf0:	2c00      	cmp	r4, #0
 8019cf2:	8813      	ldrh	r3, [r2, #0]
 8019cf4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8019cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8019cfa:	fb03 c101 	mla	r1, r3, r1, ip
 8019cfe:	fb06 f303 	mul.w	r3, r6, r3
 8019d02:	bf18      	it	ne
 8019d04:	2600      	movne	r6, #0
 8019d06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019d0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d0e:	4408      	add	r0, r1
 8019d10:	4403      	add	r3, r0
 8019d12:	9306      	str	r3, [sp, #24]
 8019d14:	f105 0304 	add.w	r3, r5, #4
 8019d18:	9305      	str	r3, [sp, #20]
 8019d1a:	9b01      	ldr	r3, [sp, #4]
 8019d1c:	bf08      	it	eq
 8019d1e:	461e      	moveq	r6, r3
 8019d20:	2300      	movs	r3, #0
 8019d22:	b2b6      	uxth	r6, r6
 8019d24:	9302      	str	r3, [sp, #8]
 8019d26:	9a06      	ldr	r2, [sp, #24]
 8019d28:	4290      	cmp	r0, r2
 8019d2a:	f080 80c2 	bcs.w	8019eb2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8019d2e:	b963      	cbnz	r3, 8019d4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019d30:	9b00      	ldr	r3, [sp, #0]
 8019d32:	781a      	ldrb	r2, [r3, #0]
 8019d34:	0993      	lsrs	r3, r2, #6
 8019d36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019d3a:	9202      	str	r2, [sp, #8]
 8019d3c:	1e5a      	subs	r2, r3, #1
 8019d3e:	2a02      	cmp	r2, #2
 8019d40:	d815      	bhi.n	8019d6e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8019d42:	9a00      	ldr	r2, [sp, #0]
 8019d44:	b29b      	uxth	r3, r3
 8019d46:	3201      	adds	r2, #1
 8019d48:	9200      	str	r2, [sp, #0]
 8019d4a:	b1b4      	cbz	r4, 8019d7a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8019d4c:	429c      	cmp	r4, r3
 8019d4e:	bf91      	iteee	ls
 8019d50:	1b1c      	subls	r4, r3, r4
 8019d52:	1ae4      	subhi	r4, r4, r3
 8019d54:	4635      	movhi	r5, r6
 8019d56:	f04f 0e00 	movhi.w	lr, #0
 8019d5a:	bf9b      	ittet	ls
 8019d5c:	fa1f fe84 	uxthls.w	lr, r4
 8019d60:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8019d64:	b2a4      	uxthhi	r4, r4
 8019d66:	2400      	movls	r4, #0
 8019d68:	4673      	mov	r3, lr
 8019d6a:	462e      	mov	r6, r5
 8019d6c:	e7db      	b.n	8019d26 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8019d6e:	9a00      	ldr	r2, [sp, #0]
 8019d70:	9b00      	ldr	r3, [sp, #0]
 8019d72:	3202      	adds	r2, #2
 8019d74:	785b      	ldrb	r3, [r3, #1]
 8019d76:	9200      	str	r2, [sp, #0]
 8019d78:	e7e7      	b.n	8019d4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8019d7a:	2204      	movs	r2, #4
 8019d7c:	9905      	ldr	r1, [sp, #20]
 8019d7e:	429e      	cmp	r6, r3
 8019d80:	4615      	mov	r5, r2
 8019d82:	9a02      	ldr	r2, [sp, #8]
 8019d84:	bf94      	ite	ls
 8019d86:	eba3 0e06 	subls.w	lr, r3, r6
 8019d8a:	46a6      	movhi	lr, r4
 8019d8c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8019d90:	9903      	ldr	r1, [sp, #12]
 8019d92:	bf8c      	ite	hi
 8019d94:	1af5      	subhi	r5, r6, r3
 8019d96:	fa1f fe8e 	uxthls.w	lr, lr
 8019d9a:	f851 c002 	ldr.w	ip, [r1, r2]
 8019d9e:	bf9a      	itte	ls
 8019da0:	4625      	movls	r5, r4
 8019da2:	4632      	movls	r2, r6
 8019da4:	b2ad      	uxthhi	r5, r5
 8019da6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8019daa:	bf88      	it	hi
 8019dac:	461a      	movhi	r2, r3
 8019dae:	b179      	cbz	r1, 8019dd0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019db0:	29ff      	cmp	r1, #255	@ 0xff
 8019db2:	fa5f f98c 	uxtb.w	r9, ip
 8019db6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8019dba:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8019dbe:	d126      	bne.n	8019e0e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8019dc0:	9f04      	ldr	r7, [sp, #16]
 8019dc2:	2fff      	cmp	r7, #255	@ 0xff
 8019dc4:	d123      	bne.n	8019e0e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8019dc6:	4682      	mov	sl, r0
 8019dc8:	4611      	mov	r1, r2
 8019dca:	f10a 0a03 	add.w	sl, sl, #3
 8019dce:	b9a9      	cbnz	r1, 8019dfc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8019dd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019dd4:	429e      	cmp	r6, r3
 8019dd6:	4410      	add	r0, r2
 8019dd8:	d8c6      	bhi.n	8019d68 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019dda:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8019dde:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8019de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019de4:	1b64      	subs	r4, r4, r5
 8019de6:	9a01      	ldr	r2, [sp, #4]
 8019de8:	881b      	ldrh	r3, [r3, #0]
 8019dea:	b2a4      	uxth	r4, r4
 8019dec:	1a9b      	subs	r3, r3, r2
 8019dee:	2c00      	cmp	r4, #0
 8019df0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019df4:	bf18      	it	ne
 8019df6:	2500      	movne	r5, #0
 8019df8:	4418      	add	r0, r3
 8019dfa:	e7b5      	b.n	8019d68 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8019dfc:	3901      	subs	r1, #1
 8019dfe:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8019e02:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8019e06:	f80a cc01 	strb.w	ip, [sl, #-1]
 8019e0a:	b289      	uxth	r1, r1
 8019e0c:	e7dd      	b.n	8019dca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8019e0e:	9f04      	ldr	r7, [sp, #16]
 8019e10:	fb07 fa01 	mul.w	sl, r7, r1
 8019e14:	f10a 0101 	add.w	r1, sl, #1
 8019e18:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8019e1c:	1209      	asrs	r1, r1, #8
 8019e1e:	ea6f 0a01 	mvn.w	sl, r1
 8019e22:	b289      	uxth	r1, r1
 8019e24:	fb19 f901 	smulbb	r9, r9, r1
 8019e28:	fa5f fa8a 	uxtb.w	sl, sl
 8019e2c:	fb18 f801 	smulbb	r8, r8, r1
 8019e30:	fb1c f101 	smulbb	r1, ip, r1
 8019e34:	fa1f f789 	uxth.w	r7, r9
 8019e38:	4684      	mov	ip, r0
 8019e3a:	4691      	mov	r9, r2
 8019e3c:	9707      	str	r7, [sp, #28]
 8019e3e:	b289      	uxth	r1, r1
 8019e40:	fa1f f788 	uxth.w	r7, r8
 8019e44:	9708      	str	r7, [sp, #32]
 8019e46:	f10c 0c03 	add.w	ip, ip, #3
 8019e4a:	f1b9 0f00 	cmp.w	r9, #0
 8019e4e:	d0bf      	beq.n	8019dd0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8019e50:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8019e54:	f109 39ff 	add.w	r9, r9, #4294967295
 8019e58:	9f07      	ldr	r7, [sp, #28]
 8019e5a:	fa1f f989 	uxth.w	r9, r9
 8019e5e:	fb08 780a 	mla	r8, r8, sl, r7
 8019e62:	9f08      	ldr	r7, [sp, #32]
 8019e64:	fa1f f888 	uxth.w	r8, r8
 8019e68:	f108 0b01 	add.w	fp, r8, #1
 8019e6c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019e70:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019e74:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8019e78:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8019e7c:	fb08 780a 	mla	r8, r8, sl, r7
 8019e80:	fa1f f888 	uxth.w	r8, r8
 8019e84:	f108 0b01 	add.w	fp, r8, #1
 8019e88:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019e8c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019e90:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8019e94:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8019e98:	fb08 180a 	mla	r8, r8, sl, r1
 8019e9c:	fa1f f888 	uxth.w	r8, r8
 8019ea0:	f108 0b01 	add.w	fp, r8, #1
 8019ea4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019ea8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019eac:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8019eb0:	e7c9      	b.n	8019e46 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8019eb2:	4b04      	ldr	r3, [pc, #16]	@ (8019ec4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8019eb4:	6818      	ldr	r0, [r3, #0]
 8019eb6:	6803      	ldr	r3, [r0, #0]
 8019eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019eba:	4798      	blx	r3
 8019ebc:	b00f      	add	sp, #60	@ 0x3c
 8019ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec2:	bf00      	nop
 8019ec4:	24025378 	.word	0x24025378
 8019ec8:	24025372 	.word	0x24025372

08019ecc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8019ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ed0:	b089      	sub	sp, #36	@ 0x24
 8019ed2:	4607      	mov	r7, r0
 8019ed4:	4689      	mov	r9, r1
 8019ed6:	4692      	mov	sl, r2
 8019ed8:	ac08      	add	r4, sp, #32
 8019eda:	461e      	mov	r6, r3
 8019edc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	f7fd ff77 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	4605      	mov	r5, r0
 8019eea:	4620      	mov	r0, r4
 8019eec:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8019ef0:	f7fd fe7e 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ef4:	4683      	mov	fp, r0
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	f7fd feae 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019efc:	4653      	mov	r3, sl
 8019efe:	464a      	mov	r2, r9
 8019f00:	4639      	mov	r1, r7
 8019f02:	9500      	str	r5, [sp, #0]
 8019f04:	e9cd b001 	strd	fp, r0, [sp, #4]
 8019f08:	a806      	add	r0, sp, #24
 8019f0a:	47c0      	blx	r8
 8019f0c:	a906      	add	r1, sp, #24
 8019f0e:	4630      	mov	r0, r6
 8019f10:	f7fd fd52 	bl	80179b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8019f14:	4628      	mov	r0, r5
 8019f16:	b009      	add	sp, #36	@ 0x24
 8019f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f1c <_ZN8touchgfx8LCD24bppD0Ev>:
 8019f1c:	b510      	push	{r4, lr}
 8019f1e:	4604      	mov	r4, r0
 8019f20:	216c      	movs	r1, #108	@ 0x6c
 8019f22:	f008 fc7f 	bl	8022824 <_ZdlPvj>
 8019f26:	4620      	mov	r0, r4
 8019f28:	bd10      	pop	{r4, pc}

08019f2a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8019f2a:	b510      	push	{r4, lr}
 8019f2c:	4604      	mov	r4, r0
 8019f2e:	2104      	movs	r1, #4
 8019f30:	f008 fc78 	bl	8022824 <_ZdlPvj>
 8019f34:	4620      	mov	r0, r4
 8019f36:	bd10      	pop	{r4, pc}

08019f38 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8019f38:	b510      	push	{r4, lr}
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	2104      	movs	r1, #4
 8019f3e:	f008 fc71 	bl	8022824 <_ZdlPvj>
 8019f42:	4620      	mov	r0, r4
 8019f44:	bd10      	pop	{r4, pc}

08019f46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8019f46:	b510      	push	{r4, lr}
 8019f48:	4604      	mov	r4, r0
 8019f4a:	f640 0144 	movw	r1, #2116	@ 0x844
 8019f4e:	f008 fc69 	bl	8022824 <_ZdlPvj>
 8019f52:	4620      	mov	r0, r4
 8019f54:	bd10      	pop	{r4, pc}

08019f56 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8019f56:	b510      	push	{r4, lr}
 8019f58:	4604      	mov	r4, r0
 8019f5a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8019f5e:	f008 fc61 	bl	8022824 <_ZdlPvj>
 8019f62:	4620      	mov	r0, r4
 8019f64:	bd10      	pop	{r4, pc}

08019f66 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019f66:	b510      	push	{r4, lr}
 8019f68:	4604      	mov	r4, r0
 8019f6a:	2104      	movs	r1, #4
 8019f6c:	f008 fc5a 	bl	8022824 <_ZdlPvj>
 8019f70:	4620      	mov	r0, r4
 8019f72:	bd10      	pop	{r4, pc}

08019f74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019f74:	b510      	push	{r4, lr}
 8019f76:	4604      	mov	r4, r0
 8019f78:	2104      	movs	r1, #4
 8019f7a:	f008 fc53 	bl	8022824 <_ZdlPvj>
 8019f7e:	4620      	mov	r0, r4
 8019f80:	bd10      	pop	{r4, pc}

08019f82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019f82:	b510      	push	{r4, lr}
 8019f84:	4604      	mov	r4, r0
 8019f86:	2104      	movs	r1, #4
 8019f88:	f008 fc4c 	bl	8022824 <_ZdlPvj>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	bd10      	pop	{r4, pc}

08019f90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8019f90:	b510      	push	{r4, lr}
 8019f92:	4604      	mov	r4, r0
 8019f94:	2104      	movs	r1, #4
 8019f96:	f008 fc45 	bl	8022824 <_ZdlPvj>
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	bd10      	pop	{r4, pc}

08019f9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8019f9e:	b510      	push	{r4, lr}
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	2104      	movs	r1, #4
 8019fa4:	f008 fc3e 	bl	8022824 <_ZdlPvj>
 8019fa8:	4620      	mov	r0, r4
 8019faa:	bd10      	pop	{r4, pc}

08019fac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8019fac:	b510      	push	{r4, lr}
 8019fae:	4604      	mov	r4, r0
 8019fb0:	2104      	movs	r1, #4
 8019fb2:	f008 fc37 	bl	8022824 <_ZdlPvj>
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	bd10      	pop	{r4, pc}

08019fba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8019fba:	b510      	push	{r4, lr}
 8019fbc:	4604      	mov	r4, r0
 8019fbe:	2104      	movs	r1, #4
 8019fc0:	f008 fc30 	bl	8022824 <_ZdlPvj>
 8019fc4:	4620      	mov	r0, r4
 8019fc6:	bd10      	pop	{r4, pc}

08019fc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8019fc8:	b510      	push	{r4, lr}
 8019fca:	4604      	mov	r4, r0
 8019fcc:	2104      	movs	r1, #4
 8019fce:	f008 fc29 	bl	8022824 <_ZdlPvj>
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	bd10      	pop	{r4, pc}

08019fd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8019fd6:	b510      	push	{r4, lr}
 8019fd8:	4604      	mov	r4, r0
 8019fda:	2104      	movs	r1, #4
 8019fdc:	f008 fc22 	bl	8022824 <_ZdlPvj>
 8019fe0:	4620      	mov	r0, r4
 8019fe2:	bd10      	pop	{r4, pc}

08019fe4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8019fe4:	b510      	push	{r4, lr}
 8019fe6:	4604      	mov	r4, r0
 8019fe8:	2104      	movs	r1, #4
 8019fea:	f008 fc1b 	bl	8022824 <_ZdlPvj>
 8019fee:	4620      	mov	r0, r4
 8019ff0:	bd10      	pop	{r4, pc}

08019ff2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8019ff2:	b510      	push	{r4, lr}
 8019ff4:	4604      	mov	r4, r0
 8019ff6:	2104      	movs	r1, #4
 8019ff8:	f008 fc14 	bl	8022824 <_ZdlPvj>
 8019ffc:	4620      	mov	r0, r4
 8019ffe:	bd10      	pop	{r4, pc}

0801a000 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a000:	b510      	push	{r4, lr}
 801a002:	4604      	mov	r4, r0
 801a004:	2104      	movs	r1, #4
 801a006:	f008 fc0d 	bl	8022824 <_ZdlPvj>
 801a00a:	4620      	mov	r0, r4
 801a00c:	bd10      	pop	{r4, pc}

0801a00e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a00e:	b510      	push	{r4, lr}
 801a010:	4604      	mov	r4, r0
 801a012:	2104      	movs	r1, #4
 801a014:	f008 fc06 	bl	8022824 <_ZdlPvj>
 801a018:	4620      	mov	r0, r4
 801a01a:	bd10      	pop	{r4, pc}

0801a01c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a01c:	b510      	push	{r4, lr}
 801a01e:	4604      	mov	r4, r0
 801a020:	2104      	movs	r1, #4
 801a022:	f008 fbff 	bl	8022824 <_ZdlPvj>
 801a026:	4620      	mov	r0, r4
 801a028:	bd10      	pop	{r4, pc}

0801a02a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a02a:	b510      	push	{r4, lr}
 801a02c:	4604      	mov	r4, r0
 801a02e:	2104      	movs	r1, #4
 801a030:	f008 fbf8 	bl	8022824 <_ZdlPvj>
 801a034:	4620      	mov	r0, r4
 801a036:	bd10      	pop	{r4, pc}

0801a038 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a038:	b510      	push	{r4, lr}
 801a03a:	4604      	mov	r4, r0
 801a03c:	2104      	movs	r1, #4
 801a03e:	f008 fbf1 	bl	8022824 <_ZdlPvj>
 801a042:	4620      	mov	r0, r4
 801a044:	bd10      	pop	{r4, pc}

0801a046 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a046:	b510      	push	{r4, lr}
 801a048:	4604      	mov	r4, r0
 801a04a:	2104      	movs	r1, #4
 801a04c:	f008 fbea 	bl	8022824 <_ZdlPvj>
 801a050:	4620      	mov	r0, r4
 801a052:	bd10      	pop	{r4, pc}

0801a054 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a054:	b510      	push	{r4, lr}
 801a056:	4604      	mov	r4, r0
 801a058:	2104      	movs	r1, #4
 801a05a:	f008 fbe3 	bl	8022824 <_ZdlPvj>
 801a05e:	4620      	mov	r0, r4
 801a060:	bd10      	pop	{r4, pc}

0801a062 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a062:	b510      	push	{r4, lr}
 801a064:	4604      	mov	r4, r0
 801a066:	2104      	movs	r1, #4
 801a068:	f008 fbdc 	bl	8022824 <_ZdlPvj>
 801a06c:	4620      	mov	r0, r4
 801a06e:	bd10      	pop	{r4, pc}

0801a070 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a070:	b510      	push	{r4, lr}
 801a072:	4604      	mov	r4, r0
 801a074:	2104      	movs	r1, #4
 801a076:	f008 fbd5 	bl	8022824 <_ZdlPvj>
 801a07a:	4620      	mov	r0, r4
 801a07c:	bd10      	pop	{r4, pc}
	...

0801a080 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a084:	b08f      	sub	sp, #60	@ 0x3c
 801a086:	461c      	mov	r4, r3
 801a088:	460e      	mov	r6, r1
 801a08a:	9206      	str	r2, [sp, #24]
 801a08c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801a090:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a092:	9202      	str	r2, [sp, #8]
 801a094:	2a00      	cmp	r2, #0
 801a096:	f000 8128 	beq.w	801a2ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a09a:	6820      	ldr	r0, [r4, #0]
 801a09c:	aa0a      	add	r2, sp, #40	@ 0x28
 801a09e:	6861      	ldr	r1, [r4, #4]
 801a0a0:	c203      	stmia	r2!, {r0, r1}
 801a0a2:	6818      	ldr	r0, [r3, #0]
 801a0a4:	aa0c      	add	r2, sp, #48	@ 0x30
 801a0a6:	6859      	ldr	r1, [r3, #4]
 801a0a8:	c203      	stmia	r2!, {r0, r1}
 801a0aa:	a80a      	add	r0, sp, #40	@ 0x28
 801a0ac:	f7fa f92a 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	a80c      	add	r0, sp, #48	@ 0x30
 801a0b4:	f7fa f96a 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0b8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801a0bc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801a0c0:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801a0c4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801a0c8:	bfdb      	ittet	le
 801a0ca:	b2bb      	uxthle	r3, r7
 801a0cc:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801a0d0:	2301      	movgt	r3, #1
 801a0d2:	fb92 f3f3 	sdivle	r3, r2, r3
 801a0d6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801a0da:	441d      	add	r5, r3
 801a0dc:	fb92 f1f3 	sdiv	r1, r2, r3
 801a0e0:	fa1f fc81 	uxth.w	ip, r1
 801a0e4:	3d01      	subs	r5, #1
 801a0e6:	fb0c 2413 	mls	r4, ip, r3, r2
 801a0ea:	4661      	mov	r1, ip
 801a0ec:	fb14 f407 	smulbb	r4, r4, r7
 801a0f0:	4404      	add	r4, r0
 801a0f2:	fb95 f5f3 	sdiv	r5, r5, r3
 801a0f6:	b2a4      	uxth	r4, r4
 801a0f8:	b121      	cbz	r1, 801a104 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801a0fa:	9b06      	ldr	r3, [sp, #24]
 801a0fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a100:	ba1b      	rev	r3, r3
 801a102:	441e      	add	r6, r3
 801a104:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801a108:	b2ad      	uxth	r5, r5
 801a10a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801a10e:	4418      	add	r0, r3
 801a110:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801a114:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801a118:	00ad      	lsls	r5, r5, #2
 801a11a:	441a      	add	r2, r3
 801a11c:	4b74      	ldr	r3, [pc, #464]	@ (801a2f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a11e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801a122:	6818      	ldr	r0, [r3, #0]
 801a124:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a128:	6803      	ldr	r3, [r0, #0]
 801a12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a12c:	4798      	blx	r3
 801a12e:	4a71      	ldr	r2, [pc, #452]	@ (801a2f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801a130:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801a134:	2c00      	cmp	r4, #0
 801a136:	8813      	ldrh	r3, [r2, #0]
 801a138:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801a13c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a13e:	fb03 c101 	mla	r1, r3, r1, ip
 801a142:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a146:	fb03 f307 	mul.w	r3, r3, r7
 801a14a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a14e:	9204      	str	r2, [sp, #16]
 801a150:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a154:	9a02      	ldr	r2, [sp, #8]
 801a156:	4408      	add	r0, r1
 801a158:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801a15c:	4403      	add	r3, r0
 801a15e:	b292      	uxth	r2, r2
 801a160:	9307      	str	r3, [sp, #28]
 801a162:	f105 0304 	add.w	r3, r5, #4
 801a166:	bf0c      	ite	eq
 801a168:	4645      	moveq	r5, r8
 801a16a:	2500      	movne	r5, #0
 801a16c:	9308      	str	r3, [sp, #32]
 801a16e:	2300      	movs	r3, #0
 801a170:	b2ad      	uxth	r5, r5
 801a172:	9205      	str	r2, [sp, #20]
 801a174:	9303      	str	r3, [sp, #12]
 801a176:	9a07      	ldr	r2, [sp, #28]
 801a178:	4282      	cmp	r2, r0
 801a17a:	f240 80b1 	bls.w	801a2e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801a17e:	b95b      	cbnz	r3, 801a198 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801a180:	7832      	ldrb	r2, [r6, #0]
 801a182:	0993      	lsrs	r3, r2, #6
 801a184:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a188:	9203      	str	r2, [sp, #12]
 801a18a:	1e5a      	subs	r2, r3, #1
 801a18c:	2a02      	cmp	r2, #2
 801a18e:	bf8d      	iteet	hi
 801a190:	7873      	ldrbhi	r3, [r6, #1]
 801a192:	3601      	addls	r6, #1
 801a194:	b29b      	uxthls	r3, r3
 801a196:	3602      	addhi	r6, #2
 801a198:	b184      	cbz	r4, 801a1bc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801a19a:	429c      	cmp	r4, r3
 801a19c:	bf91      	iteee	ls
 801a19e:	1b1c      	subls	r4, r3, r4
 801a1a0:	1ae4      	subhi	r4, r4, r3
 801a1a2:	4629      	movhi	r1, r5
 801a1a4:	f04f 0e00 	movhi.w	lr, #0
 801a1a8:	bf9b      	ittet	ls
 801a1aa:	fa1f fe84 	uxthls.w	lr, r4
 801a1ae:	2400      	movls	r4, #0
 801a1b0:	b2a4      	uxthhi	r4, r4
 801a1b2:	fa1f f188 	uxthls.w	r1, r8
 801a1b6:	4673      	mov	r3, lr
 801a1b8:	460d      	mov	r5, r1
 801a1ba:	e7dc      	b.n	801a176 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801a1bc:	2203      	movs	r2, #3
 801a1be:	9908      	ldr	r1, [sp, #32]
 801a1c0:	42ab      	cmp	r3, r5
 801a1c2:	4617      	mov	r7, r2
 801a1c4:	9a03      	ldr	r2, [sp, #12]
 801a1c6:	bf24      	itt	cs
 801a1c8:	eba3 0e05 	subcs.w	lr, r3, r5
 801a1cc:	9501      	strcs	r5, [sp, #4]
 801a1ce:	fb17 1702 	smlabb	r7, r7, r2, r1
 801a1d2:	9a06      	ldr	r2, [sp, #24]
 801a1d4:	bf34      	ite	cc
 801a1d6:	1ae9      	subcc	r1, r5, r3
 801a1d8:	fa1f fe8e 	uxthcs.w	lr, lr
 801a1dc:	4417      	add	r7, r2
 801a1de:	9a02      	ldr	r2, [sp, #8]
 801a1e0:	bf2f      	iteee	cs
 801a1e2:	4621      	movcs	r1, r4
 801a1e4:	b289      	uxthcc	r1, r1
 801a1e6:	9301      	strcc	r3, [sp, #4]
 801a1e8:	46a6      	movcc	lr, r4
 801a1ea:	2aff      	cmp	r2, #255	@ 0xff
 801a1ec:	d11e      	bne.n	801a22c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801a1ee:	4681      	mov	r9, r0
 801a1f0:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a1f4:	f109 0903 	add.w	r9, r9, #3
 801a1f8:	f1bc 0f00 	cmp.w	ip, #0
 801a1fc:	d15f      	bne.n	801a2be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801a1fe:	9a01      	ldr	r2, [sp, #4]
 801a200:	42ab      	cmp	r3, r5
 801a202:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a206:	4410      	add	r0, r2
 801a208:	d3d5      	bcc.n	801a1b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a20a:	fa1f f188 	uxth.w	r1, r8
 801a20e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801a212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a214:	1a64      	subs	r4, r4, r1
 801a216:	881b      	ldrh	r3, [r3, #0]
 801a218:	b2a4      	uxth	r4, r4
 801a21a:	eba3 0308 	sub.w	r3, r3, r8
 801a21e:	2c00      	cmp	r4, #0
 801a220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a224:	bf18      	it	ne
 801a226:	2100      	movne	r1, #0
 801a228:	4418      	add	r0, r3
 801a22a:	e7c4      	b.n	801a1b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801a22c:	4684      	mov	ip, r0
 801a22e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a232:	f10c 0c03 	add.w	ip, ip, #3
 801a236:	f1ba 0f00 	cmp.w	sl, #0
 801a23a:	d0e0      	beq.n	801a1fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801a23c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801a240:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a244:	9a05      	ldr	r2, [sp, #20]
 801a246:	f897 9000 	ldrb.w	r9, [r7]
 801a24a:	fa1f fa8a 	uxth.w	sl, sl
 801a24e:	fb1b fb02 	smulbb	fp, fp, r2
 801a252:	9a04      	ldr	r2, [sp, #16]
 801a254:	fb09 b902 	mla	r9, r9, r2, fp
 801a258:	9a05      	ldr	r2, [sp, #20]
 801a25a:	fa1f f989 	uxth.w	r9, r9
 801a25e:	f109 0b01 	add.w	fp, r9, #1
 801a262:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a266:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801a26a:	fb1b fb02 	smulbb	fp, fp, r2
 801a26e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a272:	9a04      	ldr	r2, [sp, #16]
 801a274:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801a278:	f897 9001 	ldrb.w	r9, [r7, #1]
 801a27c:	fb09 b902 	mla	r9, r9, r2, fp
 801a280:	9a05      	ldr	r2, [sp, #20]
 801a282:	fa1f f989 	uxth.w	r9, r9
 801a286:	f109 0b01 	add.w	fp, r9, #1
 801a28a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a28e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801a292:	fb1b fb02 	smulbb	fp, fp, r2
 801a296:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a29a:	9a04      	ldr	r2, [sp, #16]
 801a29c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801a2a0:	f897 9002 	ldrb.w	r9, [r7, #2]
 801a2a4:	fb09 b902 	mla	r9, r9, r2, fp
 801a2a8:	fa1f f989 	uxth.w	r9, r9
 801a2ac:	f109 0b01 	add.w	fp, r9, #1
 801a2b0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2b8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801a2bc:	e7b9      	b.n	801a232 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801a2be:	f897 a000 	ldrb.w	sl, [r7]
 801a2c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a2c6:	f809 ac03 	strb.w	sl, [r9, #-3]
 801a2ca:	fa1f fc8c 	uxth.w	ip, ip
 801a2ce:	f897 a001 	ldrb.w	sl, [r7, #1]
 801a2d2:	f809 ac02 	strb.w	sl, [r9, #-2]
 801a2d6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a2da:	f809 ac01 	strb.w	sl, [r9, #-1]
 801a2de:	e789      	b.n	801a1f4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801a2e0:	4b03      	ldr	r3, [pc, #12]	@ (801a2f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801a2e2:	6818      	ldr	r0, [r3, #0]
 801a2e4:	6803      	ldr	r3, [r0, #0]
 801a2e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a2e8:	4798      	blx	r3
 801a2ea:	b00f      	add	sp, #60	@ 0x3c
 801a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2f0:	24025378 	.word	0x24025378
 801a2f4:	24025372 	.word	0x24025372

0801a2f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2fc:	b09b      	sub	sp, #108	@ 0x6c
 801a2fe:	461d      	mov	r5, r3
 801a300:	4604      	mov	r4, r0
 801a302:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a304:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801a308:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801a30c:	9208      	str	r2, [sp, #32]
 801a30e:	2a00      	cmp	r2, #0
 801a310:	f000 81f3 	beq.w	801a6fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801a314:	6828      	ldr	r0, [r5, #0]
 801a316:	aa16      	add	r2, sp, #88	@ 0x58
 801a318:	6869      	ldr	r1, [r5, #4]
 801a31a:	c203      	stmia	r2!, {r0, r1}
 801a31c:	6818      	ldr	r0, [r3, #0]
 801a31e:	aa18      	add	r2, sp, #96	@ 0x60
 801a320:	6859      	ldr	r1, [r3, #4]
 801a322:	c203      	stmia	r2!, {r0, r1}
 801a324:	a816      	add	r0, sp, #88	@ 0x58
 801a326:	f7f9 ffed 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a32a:	4629      	mov	r1, r5
 801a32c:	a818      	add	r0, sp, #96	@ 0x60
 801a32e:	f7fa f82d 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a332:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801a336:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801a33a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a33e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801a342:	bfdb      	ittet	le
 801a344:	b29a      	uxthle	r2, r3
 801a346:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a34a:	f04f 0a01 	movgt.w	sl, #1
 801a34e:	fb91 faf2 	sdivle	sl, r1, r2
 801a352:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801a356:	4456      	add	r6, sl
 801a358:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801a35c:	3e01      	subs	r6, #1
 801a35e:	fb92 f0fa 	sdiv	r0, r2, sl
 801a362:	b280      	uxth	r0, r0
 801a364:	fb00 281a 	mls	r8, r0, sl, r2
 801a368:	900e      	str	r0, [sp, #56]	@ 0x38
 801a36a:	fb18 f803 	smulbb	r8, r8, r3
 801a36e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801a372:	4488      	add	r8, r1
 801a374:	4419      	add	r1, r3
 801a376:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801a37a:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801a37e:	fa1f f888 	uxth.w	r8, r8
 801a382:	441a      	add	r2, r3
 801a384:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a388:	9303      	str	r3, [sp, #12]
 801a38a:	4b9c      	ldr	r3, [pc, #624]	@ (801a5fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801a38c:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801a390:	6818      	ldr	r0, [r3, #0]
 801a392:	6803      	ldr	r3, [r0, #0]
 801a394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a396:	4798      	blx	r3
 801a398:	4b99      	ldr	r3, [pc, #612]	@ (801a600 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801a39a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801a39e:	f1b8 0f00 	cmp.w	r8, #0
 801a3a2:	881a      	ldrh	r2, [r3, #0]
 801a3a4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801a3a8:	fb02 f505 	mul.w	r5, r2, r5
 801a3ac:	fb02 7101 	mla	r1, r2, r1, r7
 801a3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3b4:	9314      	str	r3, [sp, #80]	@ 0x50
 801a3b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a3ba:	9b08      	ldr	r3, [sp, #32]
 801a3bc:	fb96 f6fa 	sdiv	r6, r6, sl
 801a3c0:	4408      	add	r0, r1
 801a3c2:	f106 0601 	add.w	r6, r6, #1
 801a3c6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801a3ca:	f04f 0100 	mov.w	r1, #0
 801a3ce:	eb00 0205 	add.w	r2, r0, r5
 801a3d2:	b2b6      	uxth	r6, r6
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801a3d8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a3dc:	930d      	str	r3, [sp, #52]	@ 0x34
 801a3de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a3e2:	4b88      	ldr	r3, [pc, #544]	@ (801a604 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801a3e4:	f106 0204 	add.w	r2, r6, #4
 801a3e8:	eba3 0304 	sub.w	r3, r3, r4
 801a3ec:	9205      	str	r2, [sp, #20]
 801a3ee:	9a03      	ldr	r2, [sp, #12]
 801a3f0:	bf18      	it	ne
 801a3f2:	2200      	movne	r2, #0
 801a3f4:	9315      	str	r3, [sp, #84]	@ 0x54
 801a3f6:	b292      	uxth	r2, r2
 801a3f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a3fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3fc:	fa11 f383 	uxtah	r3, r1, r3
 801a400:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801a402:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a406:	3304      	adds	r3, #4
 801a408:	9306      	str	r3, [sp, #24]
 801a40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a40c:	4283      	cmp	r3, r0
 801a40e:	f240 816f 	bls.w	801a6f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801a412:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801a416:	f04f 0900 	mov.w	r9, #0
 801a41a:	9d06      	ldr	r5, [sp, #24]
 801a41c:	fbb8 f3f3 	udiv	r3, r8, r3
 801a420:	ebaa 0303 	sub.w	r3, sl, r3
 801a424:	782d      	ldrb	r5, [r5, #0]
 801a426:	b29b      	uxth	r3, r3
 801a428:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a42a:	3501      	adds	r5, #1
 801a42c:	9312      	str	r3, [sp, #72]	@ 0x48
 801a42e:	9b06      	ldr	r3, [sp, #24]
 801a430:	9504      	str	r5, [sp, #16]
 801a432:	7859      	ldrb	r1, [r3, #1]
 801a434:	789b      	ldrb	r3, [r3, #2]
 801a436:	021b      	lsls	r3, r3, #8
 801a438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801a43c:	9906      	ldr	r1, [sp, #24]
 801a43e:	78c9      	ldrb	r1, [r1, #3]
 801a440:	430b      	orrs	r3, r1
 801a442:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801a444:	4419      	add	r1, r3
 801a446:	1c4d      	adds	r5, r1, #1
 801a448:	7849      	ldrb	r1, [r1, #1]
 801a44a:	9502      	str	r5, [sp, #8]
 801a44c:	0209      	lsls	r1, r1, #8
 801a44e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a450:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801a454:	5ceb      	ldrb	r3, [r5, r3]
 801a456:	4319      	orrs	r1, r3
 801a458:	b28b      	uxth	r3, r1
 801a45a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a45e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a460:	2300      	movs	r3, #0
 801a462:	9307      	str	r3, [sp, #28]
 801a464:	2301      	movs	r3, #1
 801a466:	e9cd 3300 	strd	r3, r3, [sp]
 801a46a:	469c      	mov	ip, r3
 801a46c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801a470:	930c      	str	r3, [sp, #48]	@ 0x30
 801a472:	f1b8 0f00 	cmp.w	r8, #0
 801a476:	f000 8082 	beq.w	801a57e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801a47a:	45c4      	cmp	ip, r8
 801a47c:	d270      	bcs.n	801a560 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801a47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a480:	eba8 080c 	sub.w	r8, r8, ip
 801a484:	4611      	mov	r1, r2
 801a486:	4283      	cmp	r3, r0
 801a488:	fa1f f888 	uxth.w	r8, r8
 801a48c:	d802      	bhi.n	801a494 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801a48e:	e074      	b.n	801a57a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801a490:	2b00      	cmp	r3, #0
 801a492:	d15f      	bne.n	801a554 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801a494:	9b02      	ldr	r3, [sp, #8]
 801a496:	9a01      	ldr	r2, [sp, #4]
 801a498:	785b      	ldrb	r3, [r3, #1]
 801a49a:	f1c2 0207 	rsb	r2, r2, #7
 801a49e:	9d01      	ldr	r5, [sp, #4]
 801a4a0:	4093      	lsls	r3, r2
 801a4a2:	005b      	lsls	r3, r3, #1
 801a4a4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a4a8:	9b02      	ldr	r3, [sp, #8]
 801a4aa:	781b      	ldrb	r3, [r3, #0]
 801a4ac:	412b      	asrs	r3, r5
 801a4ae:	b2db      	uxtb	r3, r3
 801a4b0:	4313      	orrs	r3, r2
 801a4b2:	462a      	mov	r2, r5
 801a4b4:	3201      	adds	r2, #1
 801a4b6:	b29e      	uxth	r6, r3
 801a4b8:	b2d2      	uxtb	r2, r2
 801a4ba:	2a08      	cmp	r2, #8
 801a4bc:	9201      	str	r2, [sp, #4]
 801a4be:	9a02      	ldr	r2, [sp, #8]
 801a4c0:	bf09      	itett	eq
 801a4c2:	3202      	addeq	r2, #2
 801a4c4:	3201      	addne	r2, #1
 801a4c6:	9202      	streq	r2, [sp, #8]
 801a4c8:	2200      	moveq	r2, #0
 801a4ca:	bf14      	ite	ne
 801a4cc:	9202      	strne	r2, [sp, #8]
 801a4ce:	9201      	streq	r2, [sp, #4]
 801a4d0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a4d2:	42b2      	cmp	r2, r6
 801a4d4:	d309      	bcc.n	801a4ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801a4d6:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a4da:	2301      	movs	r3, #1
 801a4dc:	9a04      	ldr	r2, [sp, #16]
 801a4de:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801a4e2:	d30e      	bcc.n	801a502 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801a4e4:	9300      	str	r3, [sp, #0]
 801a4e6:	2500      	movs	r5, #0
 801a4e8:	e035      	b.n	801a556 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801a4ea:	9b04      	ldr	r3, [sp, #16]
 801a4ec:	429e      	cmp	r6, r3
 801a4ee:	d318      	bcc.n	801a522 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801a4f0:	9b00      	ldr	r3, [sp, #0]
 801a4f2:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801a4f6:	18e3      	adds	r3, r4, r3
 801a4f8:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801a4fc:	9b00      	ldr	r3, [sp, #0]
 801a4fe:	3301      	adds	r3, #1
 801a500:	b29b      	uxth	r3, r3
 801a502:	9a04      	ldr	r2, [sp, #16]
 801a504:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801a508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a50c:	9f00      	ldr	r7, [sp, #0]
 801a50e:	7115      	strb	r5, [r2, #4]
 801a510:	3701      	adds	r7, #1
 801a512:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a514:	7157      	strb	r7, [r2, #5]
 801a516:	80d5      	strh	r5, [r2, #6]
 801a518:	9a04      	ldr	r2, [sp, #16]
 801a51a:	3201      	adds	r2, #1
 801a51c:	b292      	uxth	r2, r2
 801a51e:	9204      	str	r2, [sp, #16]
 801a520:	e7e0      	b.n	801a4e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801a522:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a526:	4632      	mov	r2, r6
 801a528:	795b      	ldrb	r3, [r3, #5]
 801a52a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801a52e:	4425      	add	r5, r4
 801a530:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801a532:	eb07 0c05 	add.w	ip, r7, r5
 801a536:	f1bc 0f00 	cmp.w	ip, #0
 801a53a:	dd07      	ble.n	801a54c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801a53c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a540:	f892 c004 	ldrb.w	ip, [r2, #4]
 801a544:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801a548:	88d2      	ldrh	r2, [r2, #6]
 801a54a:	e7f1      	b.n	801a530 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801a54c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a550:	b29b      	uxth	r3, r3
 801a552:	e7c3      	b.n	801a4dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801a554:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a556:	460a      	mov	r2, r1
 801a558:	960a      	str	r6, [sp, #40]	@ 0x28
 801a55a:	46a9      	mov	r9, r5
 801a55c:	469c      	mov	ip, r3
 801a55e:	e788      	b.n	801a472 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801a560:	ebac 0308 	sub.w	r3, ip, r8
 801a564:	eb09 0508 	add.w	r5, r9, r8
 801a568:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	b2ad      	uxth	r5, r5
 801a570:	f04f 0800 	mov.w	r8, #0
 801a574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a576:	4282      	cmp	r2, r0
 801a578:	d88a      	bhi.n	801a490 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801a57a:	460a      	mov	r2, r1
 801a57c:	e745      	b.n	801a40a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801a57e:	4594      	cmp	ip, r2
 801a580:	9d08      	ldr	r5, [sp, #32]
 801a582:	4686      	mov	lr, r0
 801a584:	bf27      	ittee	cs
 801a586:	ebac 0302 	subcs.w	r3, ip, r2
 801a58a:	4616      	movcs	r6, r2
 801a58c:	eba2 010c 	subcc.w	r1, r2, ip
 801a590:	4666      	movcc	r6, ip
 801a592:	bf27      	ittee	cs
 801a594:	b29b      	uxthcs	r3, r3
 801a596:	4641      	movcs	r1, r8
 801a598:	b289      	uxthcc	r1, r1
 801a59a:	4643      	movcc	r3, r8
 801a59c:	2dff      	cmp	r5, #255	@ 0xff
 801a59e:	eb09 0506 	add.w	r5, r9, r6
 801a5a2:	b2ad      	uxth	r5, r5
 801a5a4:	d130      	bne.n	801a608 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a5a6:	45a9      	cmp	r9, r5
 801a5a8:	f10e 0e03 	add.w	lr, lr, #3
 801a5ac:	d17a      	bne.n	801a6a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801a5ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a5b2:	4594      	cmp	ip, r2
 801a5b4:	4430      	add	r0, r6
 801a5b6:	d3db      	bcc.n	801a570 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801a5b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a5ba:	9903      	ldr	r1, [sp, #12]
 801a5bc:	8812      	ldrh	r2, [r2, #0]
 801a5be:	1a52      	subs	r2, r2, r1
 801a5c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a5c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5c6:	4410      	add	r0, r2
 801a5c8:	9a07      	ldr	r2, [sp, #28]
 801a5ca:	3201      	adds	r2, #1
 801a5cc:	428a      	cmp	r2, r1
 801a5ce:	9207      	str	r2, [sp, #28]
 801a5d0:	f040 8081 	bne.w	801a6d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801a5d4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801a5d8:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801a5dc:	9b03      	ldr	r3, [sp, #12]
 801a5de:	eba8 080c 	sub.w	r8, r8, ip
 801a5e2:	fa1f f888 	uxth.w	r8, r8
 801a5e6:	f1b8 0f00 	cmp.w	r8, #0
 801a5ea:	bf08      	it	eq
 801a5ec:	461a      	moveq	r2, r3
 801a5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a5f0:	bf18      	it	ne
 801a5f2:	2200      	movne	r2, #0
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	b292      	uxth	r2, r2
 801a5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a5fa:	e6fd      	b.n	801a3f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801a5fc:	24025378 	.word	0x24025378
 801a600:	24025372 	.word	0x24025372
 801a604:	fffff7fb 	.word	0xfffff7fb
 801a608:	45a9      	cmp	r9, r5
 801a60a:	f10e 0e03 	add.w	lr, lr, #3
 801a60e:	d0ce      	beq.n	801a5ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801a610:	f109 0701 	add.w	r7, r9, #1
 801a614:	44a1      	add	r9, r4
 801a616:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801a61a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a61e:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a620:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a624:	9f05      	ldr	r7, [sp, #20]
 801a626:	eb07 0908 	add.w	r9, r7, r8
 801a62a:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a62e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a630:	fb1b fb07 	smulbb	fp, fp, r7
 801a634:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a636:	fb08 b807 	mla	r8, r8, r7, fp
 801a63a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a63c:	fa1f f888 	uxth.w	r8, r8
 801a640:	f108 0b01 	add.w	fp, r8, #1
 801a644:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a648:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801a64c:	fb1b fb07 	smulbb	fp, fp, r7
 801a650:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a654:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a656:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a65a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a65e:	fb08 b807 	mla	r8, r8, r7, fp
 801a662:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801a664:	fa1f f888 	uxth.w	r8, r8
 801a668:	f108 0b01 	add.w	fp, r8, #1
 801a66c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a670:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a674:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a678:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a67c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801a680:	fb19 f907 	smulbb	r9, r9, r7
 801a684:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a686:	fb08 9807 	mla	r8, r8, r7, r9
 801a68a:	fa1f f888 	uxth.w	r8, r8
 801a68e:	f108 0901 	add.w	r9, r8, #1
 801a692:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801a696:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801a69a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a69e:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a6a2:	e7b1      	b.n	801a608 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801a6a4:	f109 0b01 	add.w	fp, r9, #1
 801a6a8:	44a1      	add	r9, r4
 801a6aa:	9f05      	ldr	r7, [sp, #20]
 801a6ac:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801a6b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a6b4:	eb07 0908 	add.w	r9, r7, r8
 801a6b8:	f817 8008 	ldrb.w	r8, [r7, r8]
 801a6bc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801a6c0:	f899 8001 	ldrb.w	r8, [r9, #1]
 801a6c4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801a6c8:	f899 8002 	ldrb.w	r8, [r9, #2]
 801a6cc:	fa1f f98b 	uxth.w	r9, fp
 801a6d0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801a6d4:	e767      	b.n	801a5a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801a6d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801a6da:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801a6de:	eba8 0801 	sub.w	r8, r8, r1
 801a6e2:	fa1f f888 	uxth.w	r8, r8
 801a6e6:	f1b8 0f00 	cmp.w	r8, #0
 801a6ea:	bf18      	it	ne
 801a6ec:	2100      	movne	r1, #0
 801a6ee:	e741      	b.n	801a574 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801a6f0:	4b03      	ldr	r3, [pc, #12]	@ (801a700 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801a6f2:	6818      	ldr	r0, [r3, #0]
 801a6f4:	6803      	ldr	r3, [r0, #0]
 801a6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a6f8:	4798      	blx	r3
 801a6fa:	b01b      	add	sp, #108	@ 0x6c
 801a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a700:	24025378 	.word	0x24025378

0801a704 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801a704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a708:	b09d      	sub	sp, #116	@ 0x74
 801a70a:	461d      	mov	r5, r3
 801a70c:	4604      	mov	r4, r0
 801a70e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a710:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801a714:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801a718:	920c      	str	r2, [sp, #48]	@ 0x30
 801a71a:	2a00      	cmp	r2, #0
 801a71c:	f000 81de 	beq.w	801aadc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801a720:	6828      	ldr	r0, [r5, #0]
 801a722:	aa18      	add	r2, sp, #96	@ 0x60
 801a724:	6869      	ldr	r1, [r5, #4]
 801a726:	c203      	stmia	r2!, {r0, r1}
 801a728:	6818      	ldr	r0, [r3, #0]
 801a72a:	aa1a      	add	r2, sp, #104	@ 0x68
 801a72c:	6859      	ldr	r1, [r3, #4]
 801a72e:	c203      	stmia	r2!, {r0, r1}
 801a730:	a818      	add	r0, sp, #96	@ 0x60
 801a732:	f7f9 fde7 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a736:	4629      	mov	r1, r5
 801a738:	a81a      	add	r0, sp, #104	@ 0x68
 801a73a:	f7f9 fe27 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a73e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801a742:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801a746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a74a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801a74e:	bfdb      	ittet	le
 801a750:	b29a      	uxthle	r2, r3
 801a752:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801a756:	2201      	movgt	r2, #1
 801a758:	fb91 f2f2 	sdivle	r2, r1, r2
 801a75c:	9201      	str	r2, [sp, #4]
 801a75e:	9801      	ldr	r0, [sp, #4]
 801a760:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801a764:	9901      	ldr	r1, [sp, #4]
 801a766:	fb92 f0f0 	sdiv	r0, r2, r0
 801a76a:	b280      	uxth	r0, r0
 801a76c:	440f      	add	r7, r1
 801a76e:	900d      	str	r0, [sp, #52]	@ 0x34
 801a770:	3f01      	subs	r7, #1
 801a772:	9801      	ldr	r0, [sp, #4]
 801a774:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a776:	fb05 2510 	mls	r5, r5, r0, r2
 801a77a:	fb97 f7f1 	sdiv	r7, r7, r1
 801a77e:	fb15 f503 	smulbb	r5, r5, r3
 801a782:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801a786:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801a78a:	3701      	adds	r7, #1
 801a78c:	440d      	add	r5, r1
 801a78e:	4419      	add	r1, r3
 801a790:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801a794:	b2bf      	uxth	r7, r7
 801a796:	441a      	add	r2, r3
 801a798:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801a79c:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801a7a0:	00bf      	lsls	r7, r7, #2
 801a7a2:	9304      	str	r3, [sp, #16]
 801a7a4:	b2ad      	uxth	r5, r5
 801a7a6:	4bb0      	ldr	r3, [pc, #704]	@ (801aa68 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801a7a8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801a7ac:	6818      	ldr	r0, [r3, #0]
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a7b2:	4798      	blx	r3
 801a7b4:	4bad      	ldr	r3, [pc, #692]	@ (801aa6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801a7b6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801a7ba:	2d00      	cmp	r5, #0
 801a7bc:	881a      	ldrh	r2, [r3, #0]
 801a7be:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801a7c2:	fb02 f606 	mul.w	r6, r2, r6
 801a7c6:	fb02 c101 	mla	r1, r2, r1, ip
 801a7ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a7ce:	9316      	str	r3, [sp, #88]	@ 0x58
 801a7d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a7d4:	4ba6      	ldr	r3, [pc, #664]	@ (801aa70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801a7d6:	eb00 0801 	add.w	r8, r0, r1
 801a7da:	bf18      	it	ne
 801a7dc:	2100      	movne	r1, #0
 801a7de:	eba3 0304 	sub.w	r3, r3, r4
 801a7e2:	eb08 0206 	add.w	r2, r8, r6
 801a7e6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a7e8:	9208      	str	r2, [sp, #32]
 801a7ea:	f107 0204 	add.w	r2, r7, #4
 801a7ee:	9211      	str	r2, [sp, #68]	@ 0x44
 801a7f0:	9a04      	ldr	r2, [sp, #16]
 801a7f2:	bf08      	it	eq
 801a7f4:	4611      	moveq	r1, r2
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	b289      	uxth	r1, r1
 801a7fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a7fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a7fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a800:	fa12 f383 	uxtah	r3, r2, r3
 801a804:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a806:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a80a:	3304      	adds	r3, #4
 801a80c:	9306      	str	r3, [sp, #24]
 801a80e:	9b08      	ldr	r3, [sp, #32]
 801a810:	4543      	cmp	r3, r8
 801a812:	f240 815e 	bls.w	801aad2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801a816:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801a81a:	f04f 0b01 	mov.w	fp, #1
 801a81e:	9a01      	ldr	r2, [sp, #4]
 801a820:	9806      	ldr	r0, [sp, #24]
 801a822:	465e      	mov	r6, fp
 801a824:	f8cd b008 	str.w	fp, [sp, #8]
 801a828:	7800      	ldrb	r0, [r0, #0]
 801a82a:	fbb5 f3f3 	udiv	r3, r5, r3
 801a82e:	1ad3      	subs	r3, r2, r3
 801a830:	900e      	str	r0, [sp, #56]	@ 0x38
 801a832:	3001      	adds	r0, #1
 801a834:	b29b      	uxth	r3, r3
 801a836:	9005      	str	r0, [sp, #20]
 801a838:	9312      	str	r3, [sp, #72]	@ 0x48
 801a83a:	9b06      	ldr	r3, [sp, #24]
 801a83c:	785a      	ldrb	r2, [r3, #1]
 801a83e:	789b      	ldrb	r3, [r3, #2]
 801a840:	021b      	lsls	r3, r3, #8
 801a842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a846:	9a06      	ldr	r2, [sp, #24]
 801a848:	78d2      	ldrb	r2, [r2, #3]
 801a84a:	4313      	orrs	r3, r2
 801a84c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a84e:	441a      	add	r2, r3
 801a850:	1c50      	adds	r0, r2, #1
 801a852:	7852      	ldrb	r2, [r2, #1]
 801a854:	9003      	str	r0, [sp, #12]
 801a856:	0212      	lsls	r2, r2, #8
 801a858:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a85a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801a85e:	5cc3      	ldrb	r3, [r0, r3]
 801a860:	431a      	orrs	r2, r3
 801a862:	b293      	uxth	r3, r2
 801a864:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801a868:	930a      	str	r3, [sp, #40]	@ 0x28
 801a86a:	2300      	movs	r3, #0
 801a86c:	461a      	mov	r2, r3
 801a86e:	9307      	str	r3, [sp, #28]
 801a870:	2d00      	cmp	r5, #0
 801a872:	d07c      	beq.n	801a96e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801a874:	42ae      	cmp	r6, r5
 801a876:	d26c      	bcs.n	801a952 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801a878:	9b08      	ldr	r3, [sp, #32]
 801a87a:	1bad      	subs	r5, r5, r6
 801a87c:	4608      	mov	r0, r1
 801a87e:	4543      	cmp	r3, r8
 801a880:	b2ad      	uxth	r5, r5
 801a882:	d802      	bhi.n	801a88a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801a884:	e071      	b.n	801a96a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801a886:	2b00      	cmp	r3, #0
 801a888:	d15d      	bne.n	801a946 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801a88a:	9b03      	ldr	r3, [sp, #12]
 801a88c:	9a02      	ldr	r2, [sp, #8]
 801a88e:	785b      	ldrb	r3, [r3, #1]
 801a890:	f1c2 0207 	rsb	r2, r2, #7
 801a894:	9902      	ldr	r1, [sp, #8]
 801a896:	4093      	lsls	r3, r2
 801a898:	005b      	lsls	r3, r3, #1
 801a89a:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801a89e:	9b03      	ldr	r3, [sp, #12]
 801a8a0:	781b      	ldrb	r3, [r3, #0]
 801a8a2:	410b      	asrs	r3, r1
 801a8a4:	3101      	adds	r1, #1
 801a8a6:	b2c9      	uxtb	r1, r1
 801a8a8:	b2db      	uxtb	r3, r3
 801a8aa:	2908      	cmp	r1, #8
 801a8ac:	9102      	str	r1, [sp, #8]
 801a8ae:	9903      	ldr	r1, [sp, #12]
 801a8b0:	ea43 0302 	orr.w	r3, r3, r2
 801a8b4:	bf0c      	ite	eq
 801a8b6:	3102      	addeq	r1, #2
 801a8b8:	3101      	addne	r1, #1
 801a8ba:	b29a      	uxth	r2, r3
 801a8bc:	bf05      	ittet	eq
 801a8be:	9103      	streq	r1, [sp, #12]
 801a8c0:	2100      	moveq	r1, #0
 801a8c2:	9103      	strne	r1, [sp, #12]
 801a8c4:	9102      	streq	r1, [sp, #8]
 801a8c6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801a8c8:	4291      	cmp	r1, r2
 801a8ca:	d30a      	bcc.n	801a8e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801a8cc:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801a8d0:	2301      	movs	r3, #1
 801a8d2:	9905      	ldr	r1, [sp, #20]
 801a8d4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801a8d8:	d30f      	bcc.n	801a8fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801a8da:	469b      	mov	fp, r3
 801a8dc:	f04f 0c00 	mov.w	ip, #0
 801a8e0:	e032      	b.n	801a948 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801a8e2:	9b05      	ldr	r3, [sp, #20]
 801a8e4:	429a      	cmp	r2, r3
 801a8e6:	d318      	bcc.n	801a91a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801a8e8:	eb04 030b 	add.w	r3, r4, fp
 801a8ec:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801a8f0:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801a8f4:	f10b 0301 	add.w	r3, fp, #1
 801a8f8:	b29b      	uxth	r3, r3
 801a8fa:	9905      	ldr	r1, [sp, #20]
 801a8fc:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801a900:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a904:	710e      	strb	r6, [r1, #4]
 801a906:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801a908:	80ce      	strh	r6, [r1, #6]
 801a90a:	f10b 0601 	add.w	r6, fp, #1
 801a90e:	714e      	strb	r6, [r1, #5]
 801a910:	9905      	ldr	r1, [sp, #20]
 801a912:	3101      	adds	r1, #1
 801a914:	b289      	uxth	r1, r1
 801a916:	9105      	str	r1, [sp, #20]
 801a918:	e7df      	b.n	801a8da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801a91a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a91e:	4611      	mov	r1, r2
 801a920:	795b      	ldrb	r3, [r3, #5]
 801a922:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801a926:	4426      	add	r6, r4
 801a928:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801a92a:	4437      	add	r7, r6
 801a92c:	2f00      	cmp	r7, #0
 801a92e:	dd06      	ble.n	801a93e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801a930:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801a934:	790f      	ldrb	r7, [r1, #4]
 801a936:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a93a:	88c9      	ldrh	r1, [r1, #6]
 801a93c:	e7f4      	b.n	801a928 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801a93e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801a942:	b29b      	uxth	r3, r3
 801a944:	e7c5      	b.n	801a8d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801a946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a948:	920a      	str	r2, [sp, #40]	@ 0x28
 801a94a:	4601      	mov	r1, r0
 801a94c:	4662      	mov	r2, ip
 801a94e:	461e      	mov	r6, r3
 801a950:	e78e      	b.n	801a870 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801a952:	1b73      	subs	r3, r6, r5
 801a954:	eb02 0c05 	add.w	ip, r2, r5
 801a958:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801a95c:	b29b      	uxth	r3, r3
 801a95e:	fa1f fc8c 	uxth.w	ip, ip
 801a962:	2500      	movs	r5, #0
 801a964:	9a08      	ldr	r2, [sp, #32]
 801a966:	4542      	cmp	r2, r8
 801a968:	d88d      	bhi.n	801a886 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801a96a:	4601      	mov	r1, r0
 801a96c:	e74f      	b.n	801a80e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801a96e:	428e      	cmp	r6, r1
 801a970:	bf2b      	itete	cs
 801a972:	468e      	movcs	lr, r1
 801a974:	46b6      	movcc	lr, r6
 801a976:	1a73      	subcs	r3, r6, r1
 801a978:	1b88      	subcc	r0, r1, r6
 801a97a:	eb02 0c0e 	add.w	ip, r2, lr
 801a97e:	bf2b      	itete	cs
 801a980:	4628      	movcs	r0, r5
 801a982:	462b      	movcc	r3, r5
 801a984:	b29b      	uxthcs	r3, r3
 801a986:	b280      	uxthcc	r0, r0
 801a988:	f108 0503 	add.w	r5, r8, #3
 801a98c:	fa1f fc8c 	uxth.w	ip, ip
 801a990:	4562      	cmp	r2, ip
 801a992:	d06f      	beq.n	801aa74 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801a994:	1c57      	adds	r7, r2, #1
 801a996:	4422      	add	r2, r4
 801a998:	b2bf      	uxth	r7, r7
 801a99a:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801a99e:	9713      	str	r7, [sp, #76]	@ 0x4c
 801a9a0:	2704      	movs	r7, #4
 801a9a2:	46b9      	mov	r9, r7
 801a9a4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801a9a6:	fb19 7202 	smlabb	r2, r9, r2, r7
 801a9aa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a9ac:	58bf      	ldr	r7, [r7, r2]
 801a9ae:	0e3a      	lsrs	r2, r7, #24
 801a9b0:	9209      	str	r2, [sp, #36]	@ 0x24
 801a9b2:	d016      	beq.n	801a9e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801a9b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a9b8:	fa5f fa87 	uxtb.w	sl, r7
 801a9bc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a9c0:	fa5f f289 	uxtb.w	r2, r9
 801a9c4:	9214      	str	r2, [sp, #80]	@ 0x50
 801a9c6:	b2fa      	uxtb	r2, r7
 801a9c8:	9215      	str	r2, [sp, #84]	@ 0x54
 801a9ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a9cc:	2aff      	cmp	r2, #255	@ 0xff
 801a9ce:	d10b      	bne.n	801a9e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801a9d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9d2:	2aff      	cmp	r2, #255	@ 0xff
 801a9d4:	d108      	bne.n	801a9e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801a9d6:	f805 ac03 	strb.w	sl, [r5, #-3]
 801a9da:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a9de:	f805 7c01 	strb.w	r7, [r5, #-1]
 801a9e2:	3503      	adds	r5, #3
 801a9e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a9e6:	e7d3      	b.n	801a990 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801a9e8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801a9ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9ec:	437a      	muls	r2, r7
 801a9ee:	1c57      	adds	r7, r2, #1
 801a9f0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801a9f4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801a9f8:	1212      	asrs	r2, r2, #8
 801a9fa:	fa1f f982 	uxth.w	r9, r2
 801a9fe:	43d2      	mvns	r2, r2
 801aa00:	fb1a fa09 	smulbb	sl, sl, r9
 801aa04:	b2d2      	uxtb	r2, r2
 801aa06:	fb07 a702 	mla	r7, r7, r2, sl
 801aa0a:	9209      	str	r2, [sp, #36]	@ 0x24
 801aa0c:	b2bf      	uxth	r7, r7
 801aa0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801aa10:	f107 0a01 	add.w	sl, r7, #1
 801aa14:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801aa18:	fb12 fa09 	smulbb	sl, r2, r9
 801aa1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa1e:	123f      	asrs	r7, r7, #8
 801aa20:	f805 7c03 	strb.w	r7, [r5, #-3]
 801aa24:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801aa28:	fb07 aa02 	mla	sl, r7, r2, sl
 801aa2c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801aa2e:	fb12 f909 	smulbb	r9, r2, r9
 801aa32:	fa1f fa8a 	uxth.w	sl, sl
 801aa36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa38:	f10a 0701 	add.w	r7, sl, #1
 801aa3c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aa40:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801aa44:	fb07 9902 	mla	r9, r7, r2, r9
 801aa48:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aa4c:	fa1f f989 	uxth.w	r9, r9
 801aa50:	f805 ac02 	strb.w	sl, [r5, #-2]
 801aa54:	f109 0201 	add.w	r2, r9, #1
 801aa58:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801aa5c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa60:	f805 9c01 	strb.w	r9, [r5, #-1]
 801aa64:	e7bd      	b.n	801a9e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801aa66:	bf00      	nop
 801aa68:	24025378 	.word	0x24025378
 801aa6c:	24025372 	.word	0x24025372
 801aa70:	fffff7fb 	.word	0xfffff7fb
 801aa74:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aa78:	428e      	cmp	r6, r1
 801aa7a:	44f0      	add	r8, lr
 801aa7c:	f4ff af71 	bcc.w	801a962 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801aa80:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801aa82:	9904      	ldr	r1, [sp, #16]
 801aa84:	8812      	ldrh	r2, [r2, #0]
 801aa86:	1a52      	subs	r2, r2, r1
 801aa88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801aa8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa8e:	4490      	add	r8, r2
 801aa90:	9a07      	ldr	r2, [sp, #28]
 801aa92:	3201      	adds	r2, #1
 801aa94:	428a      	cmp	r2, r1
 801aa96:	9207      	str	r2, [sp, #28]
 801aa98:	d111      	bne.n	801aabe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801aa9a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801aa9e:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801aaa2:	9b04      	ldr	r3, [sp, #16]
 801aaa4:	eba5 050c 	sub.w	r5, r5, ip
 801aaa8:	b2ad      	uxth	r5, r5
 801aaaa:	2d00      	cmp	r5, #0
 801aaac:	bf08      	it	eq
 801aaae:	4619      	moveq	r1, r3
 801aab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aab2:	bf18      	it	ne
 801aab4:	2100      	movne	r1, #0
 801aab6:	3301      	adds	r3, #1
 801aab8:	b289      	uxth	r1, r1
 801aaba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801aabc:	e69e      	b.n	801a7fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801aabe:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801aac2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801aac6:	1a2d      	subs	r5, r5, r0
 801aac8:	b2ad      	uxth	r5, r5
 801aaca:	2d00      	cmp	r5, #0
 801aacc:	bf18      	it	ne
 801aace:	2000      	movne	r0, #0
 801aad0:	e748      	b.n	801a964 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801aad2:	4b04      	ldr	r3, [pc, #16]	@ (801aae4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801aad4:	6818      	ldr	r0, [r3, #0]
 801aad6:	6803      	ldr	r3, [r0, #0]
 801aad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aada:	4798      	blx	r3
 801aadc:	b01d      	add	sp, #116	@ 0x74
 801aade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aae2:	bf00      	nop
 801aae4:	24025378 	.word	0x24025378

0801aae8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaec:	b08f      	sub	sp, #60	@ 0x3c
 801aaee:	4616      	mov	r6, r2
 801aaf0:	4681      	mov	r9, r0
 801aaf2:	460d      	mov	r5, r1
 801aaf4:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801aaf8:	9205      	str	r2, [sp, #20]
 801aafa:	2a00      	cmp	r2, #0
 801aafc:	f000 82a8 	beq.w	801b050 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801ab00:	6830      	ldr	r0, [r6, #0]
 801ab02:	ac0a      	add	r4, sp, #40	@ 0x28
 801ab04:	6871      	ldr	r1, [r6, #4]
 801ab06:	c403      	stmia	r4!, {r0, r1}
 801ab08:	6818      	ldr	r0, [r3, #0]
 801ab0a:	ac0c      	add	r4, sp, #48	@ 0x30
 801ab0c:	6859      	ldr	r1, [r3, #4]
 801ab0e:	c403      	stmia	r4!, {r0, r1}
 801ab10:	a80a      	add	r0, sp, #40	@ 0x28
 801ab12:	f7f9 fbf7 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab16:	4631      	mov	r1, r6
 801ab18:	a80c      	add	r0, sp, #48	@ 0x30
 801ab1a:	f7f9 fc37 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab1e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801ab22:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801ab26:	bfdb      	ittet	le
 801ab28:	b293      	uxthle	r3, r2
 801ab2a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801ab2e:	2301      	movgt	r3, #1
 801ab30:	fb91 f3f3 	sdivle	r3, r1, r3
 801ab34:	9300      	str	r3, [sp, #0]
 801ab36:	f105 0308 	add.w	r3, r5, #8
 801ab3a:	9900      	ldr	r1, [sp, #0]
 801ab3c:	9306      	str	r3, [sp, #24]
 801ab3e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801ab42:	440b      	add	r3, r1
 801ab44:	3b01      	subs	r3, #1
 801ab46:	fb93 f3f1 	sdiv	r3, r3, r1
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	9906      	ldr	r1, [sp, #24]
 801ab4e:	b29b      	uxth	r3, r3
 801ab50:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ab54:	9900      	ldr	r1, [sp, #0]
 801ab56:	9307      	str	r3, [sp, #28]
 801ab58:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801ab5c:	fb93 f0f1 	sdiv	r0, r3, r1
 801ab60:	b284      	uxth	r4, r0
 801ab62:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801ab66:	b280      	uxth	r0, r0
 801ab68:	9402      	str	r4, [sp, #8]
 801ab6a:	9d02      	ldr	r5, [sp, #8]
 801ab6c:	9c00      	ldr	r4, [sp, #0]
 801ab6e:	fb05 3514 	mls	r5, r5, r4, r3
 801ab72:	fb15 f502 	smulbb	r5, r5, r2
 801ab76:	440d      	add	r5, r1
 801ab78:	b2ad      	uxth	r5, r5
 801ab7a:	2800      	cmp	r0, #0
 801ab7c:	d071      	beq.n	801ac62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801ab7e:	1e42      	subs	r2, r0, #1
 801ab80:	9806      	ldr	r0, [sp, #24]
 801ab82:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801ab86:	9a07      	ldr	r2, [sp, #28]
 801ab88:	fa98 f888 	rev.w	r8, r8
 801ab8c:	4490      	add	r8, r2
 801ab8e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801ab92:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801ab96:	4411      	add	r1, r2
 801ab98:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801ab9c:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801aee8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801aba0:	4413      	add	r3, r2
 801aba2:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801aba6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801abaa:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801abae:	9301      	str	r3, [sp, #4]
 801abb0:	4bcb      	ldr	r3, [pc, #812]	@ (801aee0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801abb2:	6818      	ldr	r0, [r3, #0]
 801abb4:	6803      	ldr	r3, [r0, #0]
 801abb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801abb8:	4798      	blx	r3
 801abba:	4bca      	ldr	r3, [pc, #808]	@ (801aee4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801abbc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801abc0:	881b      	ldrh	r3, [r3, #0]
 801abc2:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801abc6:	fb03 2707 	mla	r7, r3, r7, r2
 801abca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801abce:	4363      	muls	r3, r4
 801abd0:	2400      	movs	r4, #0
 801abd2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801abd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801abda:	4621      	mov	r1, r4
 801abdc:	4407      	add	r7, r0
 801abde:	18fb      	adds	r3, r7, r3
 801abe0:	9309      	str	r3, [sp, #36]	@ 0x24
 801abe2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801abe6:	fb95 f3f3 	sdiv	r3, r5, r3
 801abea:	9304      	str	r3, [sp, #16]
 801abec:	f109 0304 	add.w	r3, r9, #4
 801abf0:	4618      	mov	r0, r3
 801abf2:	9308      	str	r3, [sp, #32]
 801abf4:	f008 fc28 	bl	8023448 <memset>
 801abf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abfa:	42bb      	cmp	r3, r7
 801abfc:	f240 8223 	bls.w	801b046 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801ac00:	2003      	movs	r0, #3
 801ac02:	f04f 0c07 	mov.w	ip, #7
 801ac06:	f04f 0e0b 	mov.w	lr, #11
 801ac0a:	2d00      	cmp	r5, #0
 801ac0c:	f000 813c 	beq.w	801ae88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801ac10:	f898 3000 	ldrb.w	r3, [r8]
 801ac14:	b2db      	uxtb	r3, r3
 801ac16:	2bfe      	cmp	r3, #254	@ 0xfe
 801ac18:	d126      	bne.n	801ac68 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801ac1a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ac1e:	f108 0604 	add.w	r6, r8, #4
 801ac22:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ac26:	3d01      	subs	r5, #1
 801ac28:	b2c9      	uxtb	r1, r1
 801ac2a:	f898 8003 	ldrb.w	r8, [r8, #3]
 801ac2e:	b2d2      	uxtb	r2, r2
 801ac30:	f361 0407 	bfi	r4, r1, #0, #8
 801ac34:	fa5f f888 	uxtb.w	r8, r8
 801ac38:	b2ad      	uxth	r5, r5
 801ac3a:	f362 240f 	bfi	r4, r2, #8, #8
 801ac3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ac42:	fb10 2208 	smlabb	r2, r0, r8, r2
 801ac46:	f368 4417 	bfi	r4, r8, #16, #8
 801ac4a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ac4e:	0e23      	lsrs	r3, r4, #24
 801ac50:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801ac54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ac58:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801ac5c:	605c      	str	r4, [r3, #4]
 801ac5e:	46b0      	mov	r8, r6
 801ac60:	e7d3      	b.n	801ac0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801ac62:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ac66:	e792      	b.n	801ab8e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801ac68:	2bff      	cmp	r3, #255	@ 0xff
 801ac6a:	d127      	bne.n	801acbc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801ac6c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ac70:	f108 0605 	add.w	r6, r8, #5
 801ac74:	f898 3002 	ldrb.w	r3, [r8, #2]
 801ac78:	3d01      	subs	r5, #1
 801ac7a:	b2d2      	uxtb	r2, r2
 801ac7c:	f898 1003 	ldrb.w	r1, [r8, #3]
 801ac80:	b2db      	uxtb	r3, r3
 801ac82:	f898 8004 	ldrb.w	r8, [r8, #4]
 801ac86:	f362 0407 	bfi	r4, r2, #0, #8
 801ac8a:	b2c9      	uxtb	r1, r1
 801ac8c:	fa5f f888 	uxtb.w	r8, r8
 801ac90:	f363 240f 	bfi	r4, r3, #8, #8
 801ac94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ac98:	b2ad      	uxth	r5, r5
 801ac9a:	fb10 3301 	smlabb	r3, r0, r1, r3
 801ac9e:	f361 4417 	bfi	r4, r1, #16, #8
 801aca2:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801aca6:	f368 641f 	bfi	r4, r8, #24, #8
 801acaa:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801acae:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801acb2:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801acb6:	f8c8 4004 	str.w	r4, [r8, #4]
 801acba:	e7d0      	b.n	801ac5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801acbc:	119a      	asrs	r2, r3, #6
 801acbe:	f108 0601 	add.w	r6, r8, #1
 801acc2:	d107      	bne.n	801acd4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801acc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801acc8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801accc:	685c      	ldr	r4, [r3, #4]
 801acce:	3d01      	subs	r5, #1
 801acd0:	b2ad      	uxth	r5, r5
 801acd2:	e7c4      	b.n	801ac5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801acd4:	2a01      	cmp	r2, #1
 801acd6:	d129      	bne.n	801ad2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801acd8:	f003 0203 	and.w	r2, r3, #3
 801acdc:	1ea1      	subs	r1, r4, #2
 801acde:	4411      	add	r1, r2
 801ace0:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801ace4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801ace8:	b2c9      	uxtb	r1, r1
 801acea:	3a02      	subs	r2, #2
 801acec:	3b02      	subs	r3, #2
 801acee:	f361 0407 	bfi	r4, r1, #0, #8
 801acf2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801acf6:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801acfa:	f362 240f 	bfi	r4, r2, #8, #8
 801acfe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801ad02:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801ad06:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801ad0a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801ad0e:	f363 4417 	bfi	r4, r3, #16, #8
 801ad12:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801ad16:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801ad1a:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801ad1e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801ad22:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801ad26:	f8c8 4004 	str.w	r4, [r8, #4]
 801ad2a:	e7d0      	b.n	801acce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ad2c:	2a02      	cmp	r2, #2
 801ad2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ad32:	d12e      	bne.n	801ad92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801ad34:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ad38:	f1a3 0a20 	sub.w	sl, r3, #32
 801ad3c:	f108 0602 	add.w	r6, r8, #2
 801ad40:	b2d2      	uxtb	r2, r2
 801ad42:	f002 010f 	and.w	r1, r2, #15
 801ad46:	1112      	asrs	r2, r2, #4
 801ad48:	3908      	subs	r1, #8
 801ad4a:	3a08      	subs	r2, #8
 801ad4c:	4451      	add	r1, sl
 801ad4e:	4492      	add	sl, r2
 801ad50:	4421      	add	r1, r4
 801ad52:	b2c9      	uxtb	r1, r1
 801ad54:	f361 0407 	bfi	r4, r1, #0, #8
 801ad58:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801ad5c:	f1a8 0820 	sub.w	r8, r8, #32
 801ad60:	4443      	add	r3, r8
 801ad62:	b2db      	uxtb	r3, r3
 801ad64:	f363 240f 	bfi	r4, r3, #8, #8
 801ad68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801ad6c:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801ad70:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801ad74:	fb10 330a 	smlabb	r3, r0, sl, r3
 801ad78:	f36a 4417 	bfi	r4, sl, #16, #8
 801ad7c:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801ad80:	0e22      	lsrs	r2, r4, #24
 801ad82:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801ad86:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801ad8a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801ad8e:	6054      	str	r4, [r2, #4]
 801ad90:	e79d      	b.n	801acce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801ad92:	3301      	adds	r3, #1
 801ad94:	42ab      	cmp	r3, r5
 801ad96:	dd59      	ble.n	801ae4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801ad98:	1b5d      	subs	r5, r3, r5
 801ad9a:	2d00      	cmp	r5, #0
 801ad9c:	dc58      	bgt.n	801ae50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801ad9e:	f8dd a004 	ldr.w	sl, [sp, #4]
 801ada2:	f04f 0800 	mov.w	r8, #0
 801ada6:	f1ba 0f00 	cmp.w	sl, #0
 801adaa:	f340 8108 	ble.w	801afbe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801adae:	1c73      	adds	r3, r6, #1
 801adb0:	9303      	str	r3, [sp, #12]
 801adb2:	7833      	ldrb	r3, [r6, #0]
 801adb4:	b2db      	uxtb	r3, r3
 801adb6:	2bfe      	cmp	r3, #254	@ 0xfe
 801adb8:	d16a      	bne.n	801ae90 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801adba:	7871      	ldrb	r1, [r6, #1]
 801adbc:	1d33      	adds	r3, r6, #4
 801adbe:	78b2      	ldrb	r2, [r6, #2]
 801adc0:	b2c9      	uxtb	r1, r1
 801adc2:	78f0      	ldrb	r0, [r6, #3]
 801adc4:	b2d2      	uxtb	r2, r2
 801adc6:	9303      	str	r3, [sp, #12]
 801adc8:	f361 0407 	bfi	r4, r1, #0, #8
 801adcc:	b2c0      	uxtb	r0, r0
 801adce:	2303      	movs	r3, #3
 801add0:	f362 240f 	bfi	r4, r2, #8, #8
 801add4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801add8:	fb13 2200 	smlabb	r2, r3, r0, r2
 801addc:	f360 4417 	bfi	r4, r0, #16, #8
 801ade0:	2307      	movs	r3, #7
 801ade2:	0e25      	lsrs	r5, r4, #24
 801ade4:	fb13 2101 	smlabb	r1, r3, r1, r2
 801ade8:	230b      	movs	r3, #11
 801adea:	fb13 1305 	smlabb	r3, r3, r5, r1
 801adee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801adf2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801adf6:	605c      	str	r4, [r3, #4]
 801adf8:	2501      	movs	r5, #1
 801adfa:	462e      	mov	r6, r5
 801adfc:	eb06 0308 	add.w	r3, r6, r8
 801ae00:	ebaa 0a06 	sub.w	sl, sl, r6
 801ae04:	1bad      	subs	r5, r5, r6
 801ae06:	2b40      	cmp	r3, #64	@ 0x40
 801ae08:	dd16      	ble.n	801ae38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801ae0a:	4658      	mov	r0, fp
 801ae0c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801ae10:	f7e8 fae4 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801ae14:	4659      	mov	r1, fp
 801ae16:	9b05      	ldr	r3, [sp, #20]
 801ae18:	4642      	mov	r2, r8
 801ae1a:	4638      	mov	r0, r7
 801ae1c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae20:	f7e8 fb44 	bl	80034ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801ae24:	4b30      	ldr	r3, [pc, #192]	@ (801aee8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801ae26:	4447      	add	r7, r8
 801ae28:	f04f 0800 	mov.w	r8, #0
 801ae2c:	459b      	cmp	fp, r3
 801ae2e:	bf0c      	ite	eq
 801ae30:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801aeec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801ae34:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801aee8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801ae38:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801ae3c:	4633      	mov	r3, r6
 801ae3e:	3b01      	subs	r3, #1
 801ae40:	f842 4b04 	str.w	r4, [r2], #4
 801ae44:	d1fb      	bne.n	801ae3e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801ae46:	44b0      	add	r8, r6
 801ae48:	9e03      	ldr	r6, [sp, #12]
 801ae4a:	e7ac      	b.n	801ada6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801ae4c:	1aed      	subs	r5, r5, r3
 801ae4e:	e73f      	b.n	801acd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801ae50:	9b01      	ldr	r3, [sp, #4]
 801ae52:	42ab      	cmp	r3, r5
 801ae54:	bfa8      	it	ge
 801ae56:	462b      	movge	r3, r5
 801ae58:	4698      	mov	r8, r3
 801ae5a:	9b01      	ldr	r3, [sp, #4]
 801ae5c:	eba3 0a08 	sub.w	sl, r3, r8
 801ae60:	0e23      	lsrs	r3, r4, #24
 801ae62:	eba5 0508 	sub.w	r5, r5, r8
 801ae66:	d00b      	beq.n	801ae80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801ae68:	9a05      	ldr	r2, [sp, #20]
 801ae6a:	4641      	mov	r1, r8
 801ae6c:	4638      	mov	r0, r7
 801ae6e:	4353      	muls	r3, r2
 801ae70:	1c5a      	adds	r2, r3, #1
 801ae72:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801ae76:	4622      	mov	r2, r4
 801ae78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ae7c:	f7e8 fac8 	bl	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801ae80:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae84:	4447      	add	r7, r8
 801ae86:	e78c      	b.n	801ada2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ae88:	f8dd a004 	ldr.w	sl, [sp, #4]
 801ae8c:	4646      	mov	r6, r8
 801ae8e:	e788      	b.n	801ada2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801ae90:	2bff      	cmp	r3, #255	@ 0xff
 801ae92:	d11d      	bne.n	801aed0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801ae94:	7870      	ldrb	r0, [r6, #1]
 801ae96:	1d73      	adds	r3, r6, #5
 801ae98:	78b2      	ldrb	r2, [r6, #2]
 801ae9a:	b2c0      	uxtb	r0, r0
 801ae9c:	78f5      	ldrb	r5, [r6, #3]
 801ae9e:	b2d2      	uxtb	r2, r2
 801aea0:	9303      	str	r3, [sp, #12]
 801aea2:	f360 0407 	bfi	r4, r0, #0, #8
 801aea6:	7933      	ldrb	r3, [r6, #4]
 801aea8:	b2ed      	uxtb	r5, r5
 801aeaa:	b2d9      	uxtb	r1, r3
 801aeac:	f362 240f 	bfi	r4, r2, #8, #8
 801aeb0:	2303      	movs	r3, #3
 801aeb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801aeb6:	f365 4417 	bfi	r4, r5, #16, #8
 801aeba:	fb13 2205 	smlabb	r2, r3, r5, r2
 801aebe:	2307      	movs	r3, #7
 801aec0:	f361 641f 	bfi	r4, r1, #24, #8
 801aec4:	fb13 2000 	smlabb	r0, r3, r0, r2
 801aec8:	230b      	movs	r3, #11
 801aeca:	fb13 0301 	smlabb	r3, r3, r1, r0
 801aece:	e78e      	b.n	801adee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801aed0:	119d      	asrs	r5, r3, #6
 801aed2:	d10d      	bne.n	801aef0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801aed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801aed8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801aedc:	685c      	ldr	r4, [r3, #4]
 801aede:	e78b      	b.n	801adf8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801aee0:	24025378 	.word	0x24025378
 801aee4:	24025372 	.word	0x24025372
 801aee8:	24009740 	.word	0x24009740
 801aeec:	24009840 	.word	0x24009840
 801aef0:	2d01      	cmp	r5, #1
 801aef2:	d12a      	bne.n	801af4a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801aef4:	f003 0203 	and.w	r2, r3, #3
 801aef8:	1ea1      	subs	r1, r4, #2
 801aefa:	2603      	movs	r6, #3
 801aefc:	4411      	add	r1, r2
 801aefe:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801af02:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801af06:	b2c9      	uxtb	r1, r1
 801af08:	3a02      	subs	r2, #2
 801af0a:	3b02      	subs	r3, #2
 801af0c:	f361 0407 	bfi	r4, r1, #0, #8
 801af10:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801af14:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801af18:	f362 240f 	bfi	r4, r2, #8, #8
 801af1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801af20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801af24:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801af28:	fb16 2203 	smlabb	r2, r6, r3, r2
 801af2c:	f363 4417 	bfi	r4, r3, #16, #8
 801af30:	2307      	movs	r3, #7
 801af32:	0e20      	lsrs	r0, r4, #24
 801af34:	fb13 2101 	smlabb	r1, r3, r1, r2
 801af38:	230b      	movs	r3, #11
 801af3a:	fb13 1300 	smlabb	r3, r3, r0, r1
 801af3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af42:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801af46:	605c      	str	r4, [r3, #4]
 801af48:	e757      	b.n	801adfa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801af4a:	2d02      	cmp	r5, #2
 801af4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801af50:	d12f      	bne.n	801afb2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801af52:	1cb2      	adds	r2, r6, #2
 801af54:	f1a3 0020 	sub.w	r0, r3, #32
 801af58:	9203      	str	r2, [sp, #12]
 801af5a:	7872      	ldrb	r2, [r6, #1]
 801af5c:	b2d2      	uxtb	r2, r2
 801af5e:	f002 010f 	and.w	r1, r2, #15
 801af62:	1112      	asrs	r2, r2, #4
 801af64:	3908      	subs	r1, #8
 801af66:	3a08      	subs	r2, #8
 801af68:	4401      	add	r1, r0
 801af6a:	4402      	add	r2, r0
 801af6c:	4421      	add	r1, r4
 801af6e:	b2c9      	uxtb	r1, r1
 801af70:	f361 0407 	bfi	r4, r1, #0, #8
 801af74:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801af78:	3d20      	subs	r5, #32
 801af7a:	442b      	add	r3, r5
 801af7c:	2503      	movs	r5, #3
 801af7e:	b2db      	uxtb	r3, r3
 801af80:	f363 240f 	bfi	r4, r3, #8, #8
 801af84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801af88:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801af8c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801af90:	fb15 3302 	smlabb	r3, r5, r2, r3
 801af94:	f362 4417 	bfi	r4, r2, #16, #8
 801af98:	2207      	movs	r2, #7
 801af9a:	0e20      	lsrs	r0, r4, #24
 801af9c:	fb12 3201 	smlabb	r2, r2, r1, r3
 801afa0:	210b      	movs	r1, #11
 801afa2:	fb11 2100 	smlabb	r1, r1, r0, r2
 801afa6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801afaa:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801afae:	604c      	str	r4, [r1, #4]
 801afb0:	e722      	b.n	801adf8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801afb2:	1c5d      	adds	r5, r3, #1
 801afb4:	4656      	mov	r6, sl
 801afb6:	45aa      	cmp	sl, r5
 801afb8:	bfa8      	it	ge
 801afba:	462e      	movge	r6, r5
 801afbc:	e71e      	b.n	801adfc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801afbe:	f1b8 0f00 	cmp.w	r8, #0
 801afc2:	d00d      	beq.n	801afe0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801afc4:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801afc8:	4658      	mov	r0, fp
 801afca:	f7e8 fa07 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801afce:	4642      	mov	r2, r8
 801afd0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801afd4:	4638      	mov	r0, r7
 801afd6:	9b05      	ldr	r3, [sp, #20]
 801afd8:	4659      	mov	r1, fp
 801afda:	4447      	add	r7, r8
 801afdc:	f7e8 fa66 	bl	80034ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801afe0:	4b1d      	ldr	r3, [pc, #116]	@ (801b058 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801afe2:	9a01      	ldr	r2, [sp, #4]
 801afe4:	881b      	ldrh	r3, [r3, #0]
 801afe6:	1a9b      	subs	r3, r3, r2
 801afe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801afec:	441f      	add	r7, r3
 801afee:	9b04      	ldr	r3, [sp, #16]
 801aff0:	3301      	adds	r3, #1
 801aff2:	9304      	str	r3, [sp, #16]
 801aff4:	9a04      	ldr	r2, [sp, #16]
 801aff6:	9b00      	ldr	r3, [sp, #0]
 801aff8:	4293      	cmp	r3, r2
 801affa:	d11d      	bne.n	801b038 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801affc:	9b02      	ldr	r3, [sp, #8]
 801affe:	2400      	movs	r4, #0
 801b000:	9a02      	ldr	r2, [sp, #8]
 801b002:	f103 0801 	add.w	r8, r3, #1
 801b006:	9b06      	ldr	r3, [sp, #24]
 801b008:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801b00c:	4621      	mov	r1, r4
 801b00e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b016:	9b07      	ldr	r3, [sp, #28]
 801b018:	ba36      	rev	r6, r6
 801b01a:	9808      	ldr	r0, [sp, #32]
 801b01c:	441e      	add	r6, r3
 801b01e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801b022:	1aed      	subs	r5, r5, r3
 801b024:	f008 fa10 	bl	8023448 <memset>
 801b028:	f8cd 8008 	str.w	r8, [sp, #8]
 801b02c:	b2ad      	uxth	r5, r5
 801b02e:	9404      	str	r4, [sp, #16]
 801b030:	f7e8 f9ca 	bl	80033c8 <_ZN8touchgfx5paint8tearDownEv>
 801b034:	46b0      	mov	r8, r6
 801b036:	e5df      	b.n	801abf8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801b038:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801b03c:	9a01      	ldr	r2, [sp, #4]
 801b03e:	1a9b      	subs	r3, r3, r2
 801b040:	1b5d      	subs	r5, r3, r5
 801b042:	b2ad      	uxth	r5, r5
 801b044:	e7f4      	b.n	801b030 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801b046:	4b05      	ldr	r3, [pc, #20]	@ (801b05c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801b048:	6818      	ldr	r0, [r3, #0]
 801b04a:	6803      	ldr	r3, [r0, #0]
 801b04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b04e:	4798      	blx	r3
 801b050:	b00f      	add	sp, #60	@ 0x3c
 801b052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b056:	bf00      	nop
 801b058:	24025372 	.word	0x24025372
 801b05c:	24025378 	.word	0x24025378

0801b060 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b064:	b093      	sub	sp, #76	@ 0x4c
 801b066:	460d      	mov	r5, r1
 801b068:	4616      	mov	r6, r2
 801b06a:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801b06e:	9000      	str	r0, [sp, #0]
 801b070:	f1bb 0f00 	cmp.w	fp, #0
 801b074:	f000 82ac 	beq.w	801b5d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801b078:	6810      	ldr	r0, [r2, #0]
 801b07a:	ac0e      	add	r4, sp, #56	@ 0x38
 801b07c:	6851      	ldr	r1, [r2, #4]
 801b07e:	c403      	stmia	r4!, {r0, r1}
 801b080:	6818      	ldr	r0, [r3, #0]
 801b082:	ac10      	add	r4, sp, #64	@ 0x40
 801b084:	6859      	ldr	r1, [r3, #4]
 801b086:	c403      	stmia	r4!, {r0, r1}
 801b088:	a80e      	add	r0, sp, #56	@ 0x38
 801b08a:	f7f9 f93b 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b08e:	4631      	mov	r1, r6
 801b090:	a810      	add	r0, sp, #64	@ 0x40
 801b092:	f7f9 f97b 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b096:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b09a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801b09e:	bfdb      	ittet	le
 801b0a0:	b293      	uxthle	r3, r2
 801b0a2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801b0a6:	2301      	movgt	r3, #1
 801b0a8:	fb91 f3f3 	sdivle	r3, r1, r3
 801b0ac:	9301      	str	r3, [sp, #4]
 801b0ae:	f105 0308 	add.w	r3, r5, #8
 801b0b2:	9901      	ldr	r1, [sp, #4]
 801b0b4:	9305      	str	r3, [sp, #20]
 801b0b6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b0ba:	440b      	add	r3, r1
 801b0bc:	3b01      	subs	r3, #1
 801b0be:	fb93 f3f1 	sdiv	r3, r3, r1
 801b0c2:	3b01      	subs	r3, #1
 801b0c4:	9905      	ldr	r1, [sp, #20]
 801b0c6:	b29b      	uxth	r3, r3
 801b0c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b0cc:	9901      	ldr	r1, [sp, #4]
 801b0ce:	9306      	str	r3, [sp, #24]
 801b0d0:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801b0d4:	fb93 f0f1 	sdiv	r0, r3, r1
 801b0d8:	b284      	uxth	r4, r0
 801b0da:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801b0de:	9403      	str	r4, [sp, #12]
 801b0e0:	9d03      	ldr	r5, [sp, #12]
 801b0e2:	9c01      	ldr	r4, [sp, #4]
 801b0e4:	fb05 3714 	mls	r7, r5, r4, r3
 801b0e8:	fb17 f702 	smulbb	r7, r7, r2
 801b0ec:	440f      	add	r7, r1
 801b0ee:	b2bf      	uxth	r7, r7
 801b0f0:	2d00      	cmp	r5, #0
 801b0f2:	d06b      	beq.n	801b1cc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801b0f4:	1e6a      	subs	r2, r5, #1
 801b0f6:	9805      	ldr	r0, [sp, #20]
 801b0f8:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801b0fc:	9a06      	ldr	r2, [sp, #24]
 801b0fe:	fa99 f989 	rev.w	r9, r9
 801b102:	4491      	add	r9, r2
 801b104:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b108:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801b10c:	4411      	add	r1, r2
 801b10e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b112:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801b470 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801b116:	4413      	add	r3, r2
 801b118:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801b11c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b120:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801b124:	9302      	str	r3, [sp, #8]
 801b126:	4bd0      	ldr	r3, [pc, #832]	@ (801b468 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801b128:	6818      	ldr	r0, [r3, #0]
 801b12a:	6803      	ldr	r3, [r0, #0]
 801b12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b12e:	4798      	blx	r3
 801b130:	4bce      	ldr	r3, [pc, #824]	@ (801b46c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801b132:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801b136:	881b      	ldrh	r3, [r3, #0]
 801b138:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801b13c:	fb03 2404 	mla	r4, r3, r4, r2
 801b140:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b144:	436b      	muls	r3, r5
 801b146:	2500      	movs	r5, #0
 801b148:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b14c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b150:	4629      	mov	r1, r5
 801b152:	4404      	add	r4, r0
 801b154:	18e3      	adds	r3, r4, r3
 801b156:	930d      	str	r3, [sp, #52]	@ 0x34
 801b158:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b15c:	fb97 f3f3 	sdiv	r3, r7, r3
 801b160:	9304      	str	r3, [sp, #16]
 801b162:	9b00      	ldr	r3, [sp, #0]
 801b164:	3304      	adds	r3, #4
 801b166:	4618      	mov	r0, r3
 801b168:	9309      	str	r3, [sp, #36]	@ 0x24
 801b16a:	f008 f96d 	bl	8023448 <memset>
 801b16e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b170:	42a3      	cmp	r3, r4
 801b172:	f240 8228 	bls.w	801b5c6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801b176:	2003      	movs	r0, #3
 801b178:	2607      	movs	r6, #7
 801b17a:	2f00      	cmp	r7, #0
 801b17c:	f000 80cb 	beq.w	801b316 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801b180:	f899 3000 	ldrb.w	r3, [r9]
 801b184:	b2db      	uxtb	r3, r3
 801b186:	2bfe      	cmp	r3, #254	@ 0xfe
 801b188:	d123      	bne.n	801b1d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801b18a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b18e:	3f01      	subs	r7, #1
 801b190:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b194:	f109 0804 	add.w	r8, r9, #4
 801b198:	b2db      	uxtb	r3, r3
 801b19a:	f899 1003 	ldrb.w	r1, [r9, #3]
 801b19e:	b2d2      	uxtb	r2, r2
 801b1a0:	f363 0507 	bfi	r5, r3, #0, #8
 801b1a4:	b2c9      	uxtb	r1, r1
 801b1a6:	b2bf      	uxth	r7, r7
 801b1a8:	f362 250f 	bfi	r5, r2, #8, #8
 801b1ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801b1b0:	fb10 2201 	smlabb	r2, r0, r1, r2
 801b1b4:	f361 4517 	bfi	r5, r1, #16, #8
 801b1b8:	fb16 2303 	smlabb	r3, r6, r3, r2
 801b1bc:	9a00      	ldr	r2, [sp, #0]
 801b1be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1c6:	605d      	str	r5, [r3, #4]
 801b1c8:	46c1      	mov	r9, r8
 801b1ca:	e7d6      	b.n	801b17a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801b1cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b1d0:	e798      	b.n	801b104 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801b1d2:	119a      	asrs	r2, r3, #6
 801b1d4:	f109 0801 	add.w	r8, r9, #1
 801b1d8:	d108      	bne.n	801b1ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801b1da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b1de:	9a00      	ldr	r2, [sp, #0]
 801b1e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1e4:	685d      	ldr	r5, [r3, #4]
 801b1e6:	3f01      	subs	r7, #1
 801b1e8:	b2bf      	uxth	r7, r7
 801b1ea:	e7ed      	b.n	801b1c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801b1ec:	2a01      	cmp	r2, #1
 801b1ee:	d125      	bne.n	801b23c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801b1f0:	f003 0103 	and.w	r1, r3, #3
 801b1f4:	1eaa      	subs	r2, r5, #2
 801b1f6:	440a      	add	r2, r1
 801b1f8:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b1fc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b200:	b2d2      	uxtb	r2, r2
 801b202:	3902      	subs	r1, #2
 801b204:	3b02      	subs	r3, #2
 801b206:	f362 0507 	bfi	r5, r2, #0, #8
 801b20a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b20e:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b212:	f361 250f 	bfi	r5, r1, #8, #8
 801b216:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801b21a:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b21e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801b222:	fb10 1103 	smlabb	r1, r0, r3, r1
 801b226:	f363 4517 	bfi	r5, r3, #16, #8
 801b22a:	9b00      	ldr	r3, [sp, #0]
 801b22c:	fb16 1202 	smlabb	r2, r6, r2, r1
 801b230:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b234:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801b238:	6055      	str	r5, [r2, #4]
 801b23a:	e7d4      	b.n	801b1e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b23c:	2a02      	cmp	r2, #2
 801b23e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b242:	d12c      	bne.n	801b29e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801b244:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b248:	f1a3 0c20 	sub.w	ip, r3, #32
 801b24c:	f109 0802 	add.w	r8, r9, #2
 801b250:	b2d2      	uxtb	r2, r2
 801b252:	f002 010f 	and.w	r1, r2, #15
 801b256:	1112      	asrs	r2, r2, #4
 801b258:	3908      	subs	r1, #8
 801b25a:	3a08      	subs	r2, #8
 801b25c:	4461      	add	r1, ip
 801b25e:	4494      	add	ip, r2
 801b260:	4429      	add	r1, r5
 801b262:	b2c9      	uxtb	r1, r1
 801b264:	f361 0507 	bfi	r5, r1, #0, #8
 801b268:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801b26c:	f1ae 0e20 	sub.w	lr, lr, #32
 801b270:	4473      	add	r3, lr
 801b272:	b2db      	uxtb	r3, r3
 801b274:	f363 250f 	bfi	r5, r3, #8, #8
 801b278:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b27c:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801b280:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801b284:	fb10 330c 	smlabb	r3, r0, ip, r3
 801b288:	f36c 4517 	bfi	r5, ip, #16, #8
 801b28c:	fb16 3101 	smlabb	r1, r6, r1, r3
 801b290:	9b00      	ldr	r3, [sp, #0]
 801b292:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801b296:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801b29a:	604d      	str	r5, [r1, #4]
 801b29c:	e7a3      	b.n	801b1e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801b29e:	3301      	adds	r3, #1
 801b2a0:	42bb      	cmp	r3, r7
 801b2a2:	dd23      	ble.n	801b2ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801b2a4:	eba3 0907 	sub.w	r9, r3, r7
 801b2a8:	f1b9 0f00 	cmp.w	r9, #0
 801b2ac:	dc20      	bgt.n	801b2f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801b2ae:	9e02      	ldr	r6, [sp, #8]
 801b2b0:	2700      	movs	r7, #0
 801b2b2:	2e00      	cmp	r6, #0
 801b2b4:	f340 8142 	ble.w	801b53c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801b2b8:	f108 0301 	add.w	r3, r8, #1
 801b2bc:	9307      	str	r3, [sp, #28]
 801b2be:	f898 3000 	ldrb.w	r3, [r8]
 801b2c2:	b2db      	uxtb	r3, r3
 801b2c4:	119a      	asrs	r2, r3, #6
 801b2c6:	d12a      	bne.n	801b31e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801b2c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b2cc:	9a00      	ldr	r2, [sp, #0]
 801b2ce:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b2d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b2d6:	685d      	ldr	r5, [r3, #4]
 801b2d8:	f040 811f 	bne.w	801b51a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b2dc:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b2e0:	7025      	strb	r5, [r4, #0]
 801b2e2:	7063      	strb	r3, [r4, #1]
 801b2e4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b2e8:	70a3      	strb	r3, [r4, #2]
 801b2ea:	e04e      	b.n	801b38a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b2ec:	1aff      	subs	r7, r7, r3
 801b2ee:	e77b      	b.n	801b1e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801b2f0:	9b02      	ldr	r3, [sp, #8]
 801b2f2:	4620      	mov	r0, r4
 801b2f4:	462a      	mov	r2, r5
 801b2f6:	454b      	cmp	r3, r9
 801b2f8:	bfa8      	it	ge
 801b2fa:	464b      	movge	r3, r9
 801b2fc:	461f      	mov	r7, r3
 801b2fe:	9b02      	ldr	r3, [sp, #8]
 801b300:	4639      	mov	r1, r7
 801b302:	1bde      	subs	r6, r3, r7
 801b304:	eba9 0907 	sub.w	r9, r9, r7
 801b308:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b30c:	465b      	mov	r3, fp
 801b30e:	f7e8 f87f 	bl	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801b312:	443c      	add	r4, r7
 801b314:	e7cc      	b.n	801b2b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b316:	46c8      	mov	r8, r9
 801b318:	9e02      	ldr	r6, [sp, #8]
 801b31a:	46b9      	mov	r9, r7
 801b31c:	e7c8      	b.n	801b2b0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801b31e:	2a01      	cmp	r2, #1
 801b320:	d136      	bne.n	801b390 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801b322:	f003 0103 	and.w	r1, r3, #3
 801b326:	1ea8      	subs	r0, r5, #2
 801b328:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b32c:	4408      	add	r0, r1
 801b32e:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801b332:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801b336:	b2c0      	uxtb	r0, r0
 801b338:	f1a1 0102 	sub.w	r1, r1, #2
 801b33c:	f1a3 0302 	sub.w	r3, r3, #2
 801b340:	f360 0507 	bfi	r5, r0, #0, #8
 801b344:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801b348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801b34c:	f361 250f 	bfi	r5, r1, #8, #8
 801b350:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801b354:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801b358:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801b35c:	f04f 0303 	mov.w	r3, #3
 801b360:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801b364:	f04f 0c07 	mov.w	ip, #7
 801b368:	9b00      	ldr	r3, [sp, #0]
 801b36a:	f368 4517 	bfi	r5, r8, #16, #8
 801b36e:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801b372:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801b376:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801b37a:	f8cc 5004 	str.w	r5, [ip, #4]
 801b37e:	f040 80cd 	bne.w	801b51c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b382:	7020      	strb	r0, [r4, #0]
 801b384:	7061      	strb	r1, [r4, #1]
 801b386:	f884 8002 	strb.w	r8, [r4, #2]
 801b38a:	3e01      	subs	r6, #1
 801b38c:	3403      	adds	r4, #3
 801b38e:	e0c1      	b.n	801b514 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b390:	2a02      	cmp	r2, #2
 801b392:	d13d      	bne.n	801b410 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801b394:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b398:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b39c:	f108 0202 	add.w	r2, r8, #2
 801b3a0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b3a4:	b2c9      	uxtb	r1, r1
 801b3a6:	f1a3 0c20 	sub.w	ip, r3, #32
 801b3aa:	9207      	str	r2, [sp, #28]
 801b3ac:	f001 000f 	and.w	r0, r1, #15
 801b3b0:	f1a0 0008 	sub.w	r0, r0, #8
 801b3b4:	4460      	add	r0, ip
 801b3b6:	4428      	add	r0, r5
 801b3b8:	b2c0      	uxtb	r0, r0
 801b3ba:	f360 0507 	bfi	r5, r0, #0, #8
 801b3be:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b3c2:	f1a2 0220 	sub.w	r2, r2, #32
 801b3c6:	4413      	add	r3, r2
 801b3c8:	ea4f 1221 	mov.w	r2, r1, asr #4
 801b3cc:	b2db      	uxtb	r3, r3
 801b3ce:	f1a2 0208 	sub.w	r2, r2, #8
 801b3d2:	f363 250f 	bfi	r5, r3, #8, #8
 801b3d6:	4462      	add	r2, ip
 801b3d8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801b3dc:	f04f 0c03 	mov.w	ip, #3
 801b3e0:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801b3e4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801b3e8:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801b3ec:	f04f 0107 	mov.w	r1, #7
 801b3f0:	f362 4517 	bfi	r5, r2, #16, #8
 801b3f4:	fb11 c100 	smlabb	r1, r1, r0, ip
 801b3f8:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801b3fc:	9900      	ldr	r1, [sp, #0]
 801b3fe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801b402:	604d      	str	r5, [r1, #4]
 801b404:	f040 8089 	bne.w	801b51a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b408:	7020      	strb	r0, [r4, #0]
 801b40a:	7063      	strb	r3, [r4, #1]
 801b40c:	70a2      	strb	r2, [r4, #2]
 801b40e:	e7bc      	b.n	801b38a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b410:	2bfe      	cmp	r3, #254	@ 0xfe
 801b412:	d12f      	bne.n	801b474 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801b414:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b418:	f108 0304 	add.w	r3, r8, #4
 801b41c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b420:	f04f 0c03 	mov.w	ip, #3
 801b424:	f898 1003 	ldrb.w	r1, [r8, #3]
 801b428:	b2c0      	uxtb	r0, r0
 801b42a:	b2d2      	uxtb	r2, r2
 801b42c:	9307      	str	r3, [sp, #28]
 801b42e:	b2c9      	uxtb	r1, r1
 801b430:	f360 0507 	bfi	r5, r0, #0, #8
 801b434:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801b438:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b43c:	f362 250f 	bfi	r5, r2, #8, #8
 801b440:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801b444:	f04f 0307 	mov.w	r3, #7
 801b448:	f361 4517 	bfi	r5, r1, #16, #8
 801b44c:	fb13 c300 	smlabb	r3, r3, r0, ip
 801b450:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801b454:	9b00      	ldr	r3, [sp, #0]
 801b456:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801b45a:	605d      	str	r5, [r3, #4]
 801b45c:	d15d      	bne.n	801b51a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801b45e:	7020      	strb	r0, [r4, #0]
 801b460:	7062      	strb	r2, [r4, #1]
 801b462:	70a1      	strb	r1, [r4, #2]
 801b464:	e791      	b.n	801b38a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801b466:	bf00      	nop
 801b468:	24025378 	.word	0x24025378
 801b46c:	24025372 	.word	0x24025372
 801b470:	24009740 	.word	0x24009740
 801b474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b478:	1c5a      	adds	r2, r3, #1
 801b47a:	b94b      	cbnz	r3, 801b490 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801b47c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b480:	d14c      	bne.n	801b51c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801b482:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801b486:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b48a:	7025      	strb	r5, [r4, #0]
 801b48c:	7062      	strb	r2, [r4, #1]
 801b48e:	e72b      	b.n	801b2e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801b490:	4296      	cmp	r6, r2
 801b492:	46b0      	mov	r8, r6
 801b494:	bfa8      	it	ge
 801b496:	4690      	movge	r8, r2
 801b498:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801b49c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b4a0:	eba6 0608 	sub.w	r6, r6, r8
 801b4a4:	eba2 0908 	sub.w	r9, r2, r8
 801b4a8:	9308      	str	r3, [sp, #32]
 801b4aa:	b2eb      	uxtb	r3, r5
 801b4ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801b4ae:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b4b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b4b4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801b4b8:	930a      	str	r3, [sp, #40]	@ 0x28
 801b4ba:	9b08      	ldr	r3, [sp, #32]
 801b4bc:	d030      	beq.n	801b520 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801b4be:	18fb      	adds	r3, r7, r3
 801b4c0:	2bc0      	cmp	r3, #192	@ 0xc0
 801b4c2:	dd15      	ble.n	801b4f0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801b4c4:	4650      	mov	r0, sl
 801b4c6:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b4ca:	f7e7 ff87 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801b4ce:	2203      	movs	r2, #3
 801b4d0:	4651      	mov	r1, sl
 801b4d2:	465b      	mov	r3, fp
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	443c      	add	r4, r7
 801b4d8:	fb97 f2f2 	sdiv	r2, r7, r2
 801b4dc:	f7e7 ffc2 	bl	8003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b4e0:	4b3d      	ldr	r3, [pc, #244]	@ (801b5d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801b4e2:	2700      	movs	r7, #0
 801b4e4:	459a      	cmp	sl, r3
 801b4e6:	bf0c      	ite	eq
 801b4e8:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801b5e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801b4ec:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801b5d8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801b4f0:	eb0a 0307 	add.w	r3, sl, r7
 801b4f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b4f6:	f1b8 0801 	subs.w	r8, r8, #1
 801b4fa:	f103 0303 	add.w	r3, r3, #3
 801b4fe:	f803 2c03 	strb.w	r2, [r3, #-3]
 801b502:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b504:	f803 2c02 	strb.w	r2, [r3, #-2]
 801b508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b50a:	f803 2c01 	strb.w	r2, [r3, #-1]
 801b50e:	d1f1      	bne.n	801b4f4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801b510:	9b08      	ldr	r3, [sp, #32]
 801b512:	441f      	add	r7, r3
 801b514:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b518:	e6cb      	b.n	801b2b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801b51a:	2201      	movs	r2, #1
 801b51c:	4690      	mov	r8, r2
 801b51e:	e7bb      	b.n	801b498 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801b520:	4423      	add	r3, r4
 801b522:	42a3      	cmp	r3, r4
 801b524:	d9f6      	bls.n	801b514 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801b526:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b528:	3403      	adds	r4, #3
 801b52a:	f804 2c03 	strb.w	r2, [r4, #-3]
 801b52e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b530:	f804 2c02 	strb.w	r2, [r4, #-2]
 801b534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b536:	f804 2c01 	strb.w	r2, [r4, #-1]
 801b53a:	e7f2      	b.n	801b522 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801b53c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801b540:	d00e      	beq.n	801b560 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b542:	b16f      	cbz	r7, 801b560 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801b544:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801b548:	4650      	mov	r0, sl
 801b54a:	f7e7 ff47 	bl	80033dc <_ZN8touchgfx5paint9flushLineEPmi>
 801b54e:	2203      	movs	r2, #3
 801b550:	4620      	mov	r0, r4
 801b552:	443c      	add	r4, r7
 801b554:	465b      	mov	r3, fp
 801b556:	4651      	mov	r1, sl
 801b558:	fb97 f2f2 	sdiv	r2, r7, r2
 801b55c:	f7e7 ff82 	bl	8003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801b560:	4b1e      	ldr	r3, [pc, #120]	@ (801b5dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801b562:	9a02      	ldr	r2, [sp, #8]
 801b564:	881b      	ldrh	r3, [r3, #0]
 801b566:	1a9b      	subs	r3, r3, r2
 801b568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b56c:	441c      	add	r4, r3
 801b56e:	9b04      	ldr	r3, [sp, #16]
 801b570:	3301      	adds	r3, #1
 801b572:	9304      	str	r3, [sp, #16]
 801b574:	9a04      	ldr	r2, [sp, #16]
 801b576:	9b01      	ldr	r3, [sp, #4]
 801b578:	4293      	cmp	r3, r2
 801b57a:	d11c      	bne.n	801b5b6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801b57c:	9b03      	ldr	r3, [sp, #12]
 801b57e:	2500      	movs	r5, #0
 801b580:	9a03      	ldr	r2, [sp, #12]
 801b582:	1c5e      	adds	r6, r3, #1
 801b584:	9b05      	ldr	r3, [sp, #20]
 801b586:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801b58a:	4629      	mov	r1, r5
 801b58c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801b590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b594:	9b06      	ldr	r3, [sp, #24]
 801b596:	fa98 f888 	rev.w	r8, r8
 801b59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b59c:	4498      	add	r8, r3
 801b59e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b5a2:	1aff      	subs	r7, r7, r3
 801b5a4:	f007 ff50 	bl	8023448 <memset>
 801b5a8:	b2bf      	uxth	r7, r7
 801b5aa:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801b5ae:	f7e7 ff0b 	bl	80033c8 <_ZN8touchgfx5paint8tearDownEv>
 801b5b2:	46c1      	mov	r9, r8
 801b5b4:	e5db      	b.n	801b16e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801b5b6:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801b5ba:	9b02      	ldr	r3, [sp, #8]
 801b5bc:	1aff      	subs	r7, r7, r3
 801b5be:	eba7 0709 	sub.w	r7, r7, r9
 801b5c2:	b2bf      	uxth	r7, r7
 801b5c4:	e7f3      	b.n	801b5ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801b5c6:	4b06      	ldr	r3, [pc, #24]	@ (801b5e0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801b5c8:	6818      	ldr	r0, [r3, #0]
 801b5ca:	6803      	ldr	r3, [r0, #0]
 801b5cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b5ce:	4798      	blx	r3
 801b5d0:	b013      	add	sp, #76	@ 0x4c
 801b5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5d6:	bf00      	nop
 801b5d8:	24009740 	.word	0x24009740
 801b5dc:	24025372 	.word	0x24025372
 801b5e0:	24025378 	.word	0x24025378
 801b5e4:	24009840 	.word	0x24009840

0801b5e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b5f0:	9c06      	ldr	r4, [sp, #24]
 801b5f2:	2800      	cmp	r0, #0
 801b5f4:	d06e      	beq.n	801b6d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b5f6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b5fa:	2d00      	cmp	r5, #0
 801b5fc:	dd6a      	ble.n	801b6d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b5fe:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b602:	f1bc 0f00 	cmp.w	ip, #0
 801b606:	dd65      	ble.n	801b6d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b608:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b60c:	28ff      	cmp	r0, #255	@ 0xff
 801b60e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b612:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b616:	fb02 3306 	mla	r3, r2, r6, r3
 801b61a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b61e:	b2e4      	uxtb	r4, r4
 801b620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b624:	4419      	add	r1, r3
 801b626:	fb02 f30c 	mul.w	r3, r2, ip
 801b62a:	eba2 0205 	sub.w	r2, r2, r5
 801b62e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b63a:	440b      	add	r3, r1
 801b63c:	d03e      	beq.n	801b6bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b63e:	fa1f fc80 	uxth.w	ip, r0
 801b642:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801b646:	fb06 f60c 	mul.w	r6, r6, ip
 801b64a:	b280      	uxth	r0, r0
 801b64c:	fb07 f70c 	mul.w	r7, r7, ip
 801b650:	fb04 f40c 	mul.w	r4, r4, ip
 801b654:	4299      	cmp	r1, r3
 801b656:	d23d      	bcs.n	801b6d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b658:	eb01 0c05 	add.w	ip, r1, r5
 801b65c:	458c      	cmp	ip, r1
 801b65e:	f101 0e03 	add.w	lr, r1, #3
 801b662:	d928      	bls.n	801b6b6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801b664:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b668:	fb11 f100 	smulbb	r1, r1, r0
 801b66c:	4421      	add	r1, r4
 801b66e:	b289      	uxth	r1, r1
 801b670:	f101 0801 	add.w	r8, r1, #1
 801b674:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b678:	1209      	asrs	r1, r1, #8
 801b67a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b67e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801b682:	fb11 f100 	smulbb	r1, r1, r0
 801b686:	4439      	add	r1, r7
 801b688:	b289      	uxth	r1, r1
 801b68a:	f101 0801 	add.w	r8, r1, #1
 801b68e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b692:	1209      	asrs	r1, r1, #8
 801b694:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b698:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b69c:	fb11 f100 	smulbb	r1, r1, r0
 801b6a0:	4431      	add	r1, r6
 801b6a2:	b289      	uxth	r1, r1
 801b6a4:	f101 0801 	add.w	r8, r1, #1
 801b6a8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b6ac:	1209      	asrs	r1, r1, #8
 801b6ae:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801b6b2:	4671      	mov	r1, lr
 801b6b4:	e7d2      	b.n	801b65c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801b6b6:	4411      	add	r1, r2
 801b6b8:	e7cc      	b.n	801b654 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801b6ba:	4411      	add	r1, r2
 801b6bc:	4299      	cmp	r1, r3
 801b6be:	d209      	bcs.n	801b6d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b6c0:	1948      	adds	r0, r1, r5
 801b6c2:	4281      	cmp	r1, r0
 801b6c4:	d2f9      	bcs.n	801b6ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801b6c6:	700c      	strb	r4, [r1, #0]
 801b6c8:	3103      	adds	r1, #3
 801b6ca:	f801 7c02 	strb.w	r7, [r1, #-2]
 801b6ce:	f801 6c01 	strb.w	r6, [r1, #-1]
 801b6d2:	e7f6      	b.n	801b6c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801b6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b6d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6dc:	b093      	sub	sp, #76	@ 0x4c
 801b6de:	4699      	mov	r9, r3
 801b6e0:	4617      	mov	r7, r2
 801b6e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b6e6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801b6ea:	4604      	mov	r4, r0
 801b6ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b6f0:	a80c      	add	r0, sp, #48	@ 0x30
 801b6f2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801b6f6:	460d      	mov	r5, r1
 801b6f8:	4649      	mov	r1, r9
 801b6fa:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801b6fe:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801b702:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801b706:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801b70a:	f7f3 fb3d 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 801b70e:	4639      	mov	r1, r7
 801b710:	a80c      	add	r0, sp, #48	@ 0x30
 801b712:	f7f3 fb39 	bl	800ed88 <_ZN8touchgfx4RectaNERKS0_>
 801b716:	4b78      	ldr	r3, [pc, #480]	@ (801b8f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b718:	8818      	ldrh	r0, [r3, #0]
 801b71a:	4b78      	ldr	r3, [pc, #480]	@ (801b8fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801b71c:	b202      	sxth	r2, r0
 801b71e:	8819      	ldrh	r1, [r3, #0]
 801b720:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b724:	b20f      	sxth	r7, r1
 801b726:	2b00      	cmp	r3, #0
 801b728:	da07      	bge.n	801b73a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801b72a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801b72e:	4463      	add	r3, ip
 801b730:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801b734:	2300      	movs	r3, #0
 801b736:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801b73a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801b73e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801b742:	1ad2      	subs	r2, r2, r3
 801b744:	4594      	cmp	ip, r2
 801b746:	bfc4      	itt	gt
 801b748:	1ac2      	subgt	r2, r0, r3
 801b74a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801b74e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b752:	2a00      	cmp	r2, #0
 801b754:	da07      	bge.n	801b766 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801b756:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801b75a:	4462      	add	r2, ip
 801b75c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801b760:	2200      	movs	r2, #0
 801b762:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801b766:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801b76a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801b76e:	1abf      	subs	r7, r7, r2
 801b770:	45bc      	cmp	ip, r7
 801b772:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801b904 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801b776:	bfc8      	it	gt
 801b778:	1a8f      	subgt	r7, r1, r2
 801b77a:	f89c c000 	ldrb.w	ip, [ip]
 801b77e:	bfc8      	it	gt
 801b780:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801b784:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801b788:	f1bc 0f00 	cmp.w	ip, #0
 801b78c:	d176      	bne.n	801b87c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801b78e:	4287      	cmp	r7, r0
 801b790:	bf14      	ite	ne
 801b792:	2100      	movne	r1, #0
 801b794:	2101      	moveq	r1, #1
 801b796:	2f00      	cmp	r7, #0
 801b798:	9107      	str	r1, [sp, #28]
 801b79a:	dd73      	ble.n	801b884 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b79c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801b7a0:	2900      	cmp	r1, #0
 801b7a2:	9104      	str	r1, [sp, #16]
 801b7a4:	dd6e      	ble.n	801b884 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b7a6:	f8b9 1000 	ldrh.w	r1, [r9]
 801b7aa:	a80e      	add	r0, sp, #56	@ 0x38
 801b7ac:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801b7b0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801b7b4:	1a5b      	subs	r3, r3, r1
 801b7b6:	a910      	add	r1, sp, #64	@ 0x40
 801b7b8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801b7bc:	b21b      	sxth	r3, r3
 801b7be:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801b7c2:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801b908 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b7c6:	9305      	str	r3, [sp, #20]
 801b7c8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801b7cc:	1ad2      	subs	r2, r2, r3
 801b7ce:	b213      	sxth	r3, r2
 801b7d0:	9306      	str	r3, [sp, #24]
 801b7d2:	9b05      	ldr	r3, [sp, #20]
 801b7d4:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801b7d8:	9b06      	ldr	r3, [sp, #24]
 801b7da:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b7de:	9b04      	ldr	r3, [sp, #16]
 801b7e0:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b7e4:	2300      	movs	r3, #0
 801b7e6:	9310      	str	r3, [sp, #64]	@ 0x40
 801b7e8:	f7f8 fdd0 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b7ec:	4640      	mov	r0, r8
 801b7ee:	f7f8 fd89 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b7f2:	a810      	add	r0, sp, #64	@ 0x40
 801b7f4:	f7f8 fd86 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b7f8:	4b41      	ldr	r3, [pc, #260]	@ (801b900 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801b7fa:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b7fe:	4628      	mov	r0, r5
 801b800:	881b      	ldrh	r3, [r3, #0]
 801b802:	9308      	str	r3, [sp, #32]
 801b804:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b808:	b21b      	sxth	r3, r3
 801b80a:	9303      	str	r3, [sp, #12]
 801b80c:	682b      	ldr	r3, [r5, #0]
 801b80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b810:	4798      	blx	r3
 801b812:	9a03      	ldr	r2, [sp, #12]
 801b814:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801b818:	4681      	mov	r9, r0
 801b81a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b81e:	fb13 f302 	smulbb	r3, r3, r2
 801b822:	2203      	movs	r2, #3
 801b824:	f8da 0000 	ldr.w	r0, [sl]
 801b828:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b82c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801b82e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b830:	441d      	add	r5, r3
 801b832:	6803      	ldr	r3, [r0, #0]
 801b834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b836:	4798      	blx	r3
 801b838:	9009      	str	r0, [sp, #36]	@ 0x24
 801b83a:	f8da 0000 	ldr.w	r0, [sl]
 801b83e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801b842:	6803      	ldr	r3, [r0, #0]
 801b844:	910a      	str	r1, [sp, #40]	@ 0x28
 801b846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b848:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801b84c:	4798      	blx	r3
 801b84e:	f010 0f01 	tst.w	r0, #1
 801b852:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801b856:	d01e      	beq.n	801b896 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801b858:	f8da 0000 	ldr.w	r0, [sl]
 801b85c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801b860:	6803      	ldr	r3, [r0, #0]
 801b862:	9200      	str	r2, [sp, #0]
 801b864:	6f1e      	ldr	r6, [r3, #112]	@ 0x70
 801b866:	462b      	mov	r3, r5
 801b868:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b86c:	47b0      	blx	r6
 801b86e:	9b05      	ldr	r3, [sp, #20]
 801b870:	80a7      	strh	r7, [r4, #4]
 801b872:	8023      	strh	r3, [r4, #0]
 801b874:	9b06      	ldr	r3, [sp, #24]
 801b876:	8063      	strh	r3, [r4, #2]
 801b878:	9b04      	ldr	r3, [sp, #16]
 801b87a:	e007      	b.n	801b88c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801b87c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801b880:	4288      	cmp	r0, r1
 801b882:	e785      	b.n	801b790 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801b884:	2300      	movs	r3, #0
 801b886:	8023      	strh	r3, [r4, #0]
 801b888:	8063      	strh	r3, [r4, #2]
 801b88a:	80a3      	strh	r3, [r4, #4]
 801b88c:	4620      	mov	r0, r4
 801b88e:	80e3      	strh	r3, [r4, #6]
 801b890:	b013      	add	sp, #76	@ 0x4c
 801b892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b896:	fb09 f606 	mul.w	r6, r9, r6
 801b89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b89c:	fb11 6602 	smlabb	r6, r1, r2, r6
 801b8a0:	9a07      	ldr	r2, [sp, #28]
 801b8a2:	4433      	add	r3, r6
 801b8a4:	461e      	mov	r6, r3
 801b8a6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b8aa:	b16a      	cbz	r2, 801b8c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b8ac:	9a08      	ldr	r2, [sp, #32]
 801b8ae:	4593      	cmp	fp, r2
 801b8b0:	d10a      	bne.n	801b8c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b8b2:	f8da 0000 	ldr.w	r0, [sl]
 801b8b6:	fb09 f303 	mul.w	r3, r9, r3
 801b8ba:	4629      	mov	r1, r5
 801b8bc:	6802      	ldr	r2, [r0, #0]
 801b8be:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801b8c2:	4632      	mov	r2, r6
 801b8c4:	47d0      	blx	sl
 801b8c6:	e7d2      	b.n	801b86e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b8c8:	9a03      	ldr	r2, [sp, #12]
 801b8ca:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801b908 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b8ce:	fb02 5803 	mla	r8, r2, r3, r5
 801b8d2:	4545      	cmp	r5, r8
 801b8d4:	d2cb      	bcs.n	801b86e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b8d6:	f8db 0000 	ldr.w	r0, [fp]
 801b8da:	4629      	mov	r1, r5
 801b8dc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801b8e0:	6802      	ldr	r2, [r0, #0]
 801b8e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8e6:	f8d2 a038 	ldr.w	sl, [r2, #56]	@ 0x38
 801b8ea:	4632      	mov	r2, r6
 801b8ec:	47d0      	blx	sl
 801b8ee:	9b03      	ldr	r3, [sp, #12]
 801b8f0:	444e      	add	r6, r9
 801b8f2:	441d      	add	r5, r3
 801b8f4:	e7ed      	b.n	801b8d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801b8f6:	bf00      	nop
 801b8f8:	2402536c 	.word	0x2402536c
 801b8fc:	2402536e 	.word	0x2402536e
 801b900:	24025372 	.word	0x24025372
 801b904:	24025370 	.word	0x24025370
 801b908:	24025378 	.word	0x24025378

0801b90c <_ZN8touchgfx8LCD24bppC1Ev>:
 801b90c:	2200      	movs	r2, #0
 801b90e:	490e      	ldr	r1, [pc, #56]	@ (801b948 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801b910:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801b914:	6001      	str	r1, [r0, #0]
 801b916:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801b91a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801b91e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801b922:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801b926:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801b92a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801b92e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801b932:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801b936:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801b93a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801b93e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801b942:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801b946:	4770      	bx	lr
 801b948:	0802724c 	.word	0x0802724c

0801b94c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b950:	b091      	sub	sp, #68	@ 0x44
 801b952:	4607      	mov	r7, r0
 801b954:	4688      	mov	r8, r1
 801b956:	6810      	ldr	r0, [r2, #0]
 801b958:	6851      	ldr	r1, [r2, #4]
 801b95a:	ac0c      	add	r4, sp, #48	@ 0x30
 801b95c:	4616      	mov	r6, r2
 801b95e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801b962:	4d64      	ldr	r5, [pc, #400]	@ (801baf4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b964:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801baf8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b968:	c403      	stmia	r4!, {r0, r1}
 801b96a:	6818      	ldr	r0, [r3, #0]
 801b96c:	ac0e      	add	r4, sp, #56	@ 0x38
 801b96e:	6859      	ldr	r1, [r3, #4]
 801b970:	c403      	stmia	r4!, {r0, r1}
 801b972:	a80c      	add	r0, sp, #48	@ 0x30
 801b974:	f7f8 fcc6 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b978:	4631      	mov	r1, r6
 801b97a:	a80e      	add	r0, sp, #56	@ 0x38
 801b97c:	f7f8 fd06 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b980:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801b984:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801b988:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801b98c:	6828      	ldr	r0, [r5, #0]
 801b98e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b992:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801b996:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801b99a:	440f      	add	r7, r1
 801b99c:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801b9a0:	440a      	add	r2, r1
 801b9a2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801b9a6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801b9aa:	4413      	add	r3, r2
 801b9ac:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801b9b0:	6803      	ldr	r3, [r0, #0]
 801b9b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b9b4:	4798      	blx	r3
 801b9b6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801b9ba:	6828      	ldr	r0, [r5, #0]
 801b9bc:	d01f      	beq.n	801b9fe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801b9be:	2201      	movs	r2, #1
 801b9c0:	2500      	movs	r5, #0
 801b9c2:	6801      	ldr	r1, [r0, #0]
 801b9c4:	b2a4      	uxth	r4, r4
 801b9c6:	b2b6      	uxth	r6, r6
 801b9c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801b9cc:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801b9d0:	250b      	movs	r5, #11
 801b9d2:	9507      	str	r5, [sp, #28]
 801b9d4:	f8ba 5000 	ldrh.w	r5, [sl]
 801b9d8:	f8cd 9010 	str.w	r9, [sp, #16]
 801b9dc:	9602      	str	r6, [sp, #8]
 801b9de:	9401      	str	r4, [sp, #4]
 801b9e0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801b9e4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801b9e8:	9203      	str	r2, [sp, #12]
 801b9ea:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801b9ee:	9200      	str	r2, [sp, #0]
 801b9f0:	4642      	mov	r2, r8
 801b9f2:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801b9f4:	4639      	mov	r1, r7
 801b9f6:	47a0      	blx	r4
 801b9f8:	b011      	add	sp, #68	@ 0x44
 801b9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9fe:	6803      	ldr	r3, [r0, #0]
 801ba00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba02:	4798      	blx	r3
 801ba04:	f8ba 5000 	ldrh.w	r5, [sl]
 801ba08:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801ba0c:	f04f 0e04 	mov.w	lr, #4
 801ba10:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801ba14:	436e      	muls	r6, r5
 801ba16:	fb05 2303 	mla	r3, r5, r3, r2
 801ba1a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ba1e:	1b2d      	subs	r5, r5, r4
 801ba20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba28:	4418      	add	r0, r3
 801ba2a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801ba2e:	1982      	adds	r2, r0, r6
 801ba30:	1b1b      	subs	r3, r3, r4
 801ba32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ba36:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba38:	4290      	cmp	r0, r2
 801ba3a:	d254      	bcs.n	801bae6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ba3c:	eb00 0a04 	add.w	sl, r0, r4
 801ba40:	4550      	cmp	r0, sl
 801ba42:	d24c      	bcs.n	801bade <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801ba44:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ba48:	fb1e e101 	smlabb	r1, lr, r1, lr
 801ba4c:	eb08 0c01 	add.w	ip, r8, r1
 801ba50:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ba54:	b173      	cbz	r3, 801ba74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801ba56:	2bff      	cmp	r3, #255	@ 0xff
 801ba58:	f818 b001 	ldrb.w	fp, [r8, r1]
 801ba5c:	d10c      	bne.n	801ba78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ba5e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ba62:	d109      	bne.n	801ba78 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801ba64:	f880 b000 	strb.w	fp, [r0]
 801ba68:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ba6c:	7043      	strb	r3, [r0, #1]
 801ba6e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ba72:	7083      	strb	r3, [r0, #2]
 801ba74:	3003      	adds	r0, #3
 801ba76:	e7e3      	b.n	801ba40 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801ba78:	fb09 f103 	mul.w	r1, r9, r3
 801ba7c:	1c4b      	adds	r3, r1, #1
 801ba7e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ba82:	7801      	ldrb	r1, [r0, #0]
 801ba84:	121b      	asrs	r3, r3, #8
 801ba86:	b29e      	uxth	r6, r3
 801ba88:	43db      	mvns	r3, r3
 801ba8a:	fb1b fb06 	smulbb	fp, fp, r6
 801ba8e:	b2db      	uxtb	r3, r3
 801ba90:	fb01 b103 	mla	r1, r1, r3, fp
 801ba94:	b289      	uxth	r1, r1
 801ba96:	f101 0b01 	add.w	fp, r1, #1
 801ba9a:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801ba9e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801baa2:	fb1b fb03 	smulbb	fp, fp, r3
 801baa6:	1209      	asrs	r1, r1, #8
 801baa8:	7001      	strb	r1, [r0, #0]
 801baaa:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801baae:	fb01 b106 	mla	r1, r1, r6, fp
 801bab2:	b289      	uxth	r1, r1
 801bab4:	f101 0b01 	add.w	fp, r1, #1
 801bab8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801babc:	1209      	asrs	r1, r1, #8
 801babe:	7041      	strb	r1, [r0, #1]
 801bac0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801bac4:	f890 c002 	ldrb.w	ip, [r0, #2]
 801bac8:	fb1c f303 	smulbb	r3, ip, r3
 801bacc:	fb01 3606 	mla	r6, r1, r6, r3
 801bad0:	b2b6      	uxth	r6, r6
 801bad2:	1c73      	adds	r3, r6, #1
 801bad4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801bad8:	1236      	asrs	r6, r6, #8
 801bada:	7086      	strb	r6, [r0, #2]
 801badc:	e7ca      	b.n	801ba74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801bade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bae0:	4428      	add	r0, r5
 801bae2:	441f      	add	r7, r3
 801bae4:	e7a8      	b.n	801ba38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801bae6:	4b03      	ldr	r3, [pc, #12]	@ (801baf4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bae8:	6818      	ldr	r0, [r3, #0]
 801baea:	6803      	ldr	r3, [r0, #0]
 801baec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801baee:	4798      	blx	r3
 801baf0:	e782      	b.n	801b9f8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801baf2:	bf00      	nop
 801baf4:	24025378 	.word	0x24025378
 801baf8:	24025372 	.word	0x24025372

0801bafc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb00:	b091      	sub	sp, #68	@ 0x44
 801bb02:	4680      	mov	r8, r0
 801bb04:	460e      	mov	r6, r1
 801bb06:	6810      	ldr	r0, [r2, #0]
 801bb08:	6851      	ldr	r1, [r2, #4]
 801bb0a:	ad0c      	add	r5, sp, #48	@ 0x30
 801bb0c:	4614      	mov	r4, r2
 801bb0e:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801bb12:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801bcac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801bb16:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801bcb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801bb1a:	c503      	stmia	r5!, {r0, r1}
 801bb1c:	6818      	ldr	r0, [r3, #0]
 801bb1e:	ad0e      	add	r5, sp, #56	@ 0x38
 801bb20:	6859      	ldr	r1, [r3, #4]
 801bb22:	c503      	stmia	r5!, {r0, r1}
 801bb24:	a80c      	add	r0, sp, #48	@ 0x30
 801bb26:	f7f8 fbed 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb2a:	4621      	mov	r1, r4
 801bb2c:	a80e      	add	r0, sp, #56	@ 0x38
 801bb2e:	f7f8 fc2d 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb32:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801bb36:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bb3a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801bb3e:	f8d9 0000 	ldr.w	r0, [r9]
 801bb42:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bb46:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801bb4a:	eb08 0401 	add.w	r4, r8, r1
 801bb4e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801bb52:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801bb56:	440a      	add	r2, r1
 801bb58:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801bb5c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801bb60:	4413      	add	r3, r2
 801bb62:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801bb66:	6803      	ldr	r3, [r0, #0]
 801bb68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bb6a:	4798      	blx	r3
 801bb6c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801bb70:	f8d9 0000 	ldr.w	r0, [r9]
 801bb74:	d022      	beq.n	801bbbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801bb76:	2200      	movs	r2, #0
 801bb78:	f04f 0c01 	mov.w	ip, #1
 801bb7c:	6801      	ldr	r1, [r0, #0]
 801bb7e:	b2ad      	uxth	r5, r5
 801bb80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801bb84:	e9cd c208 	strd	ip, r2, [sp, #32]
 801bb88:	f04f 0c0b 	mov.w	ip, #11
 801bb8c:	f8cd c01c 	str.w	ip, [sp, #28]
 801bb90:	f8ba c000 	ldrh.w	ip, [sl]
 801bb94:	9704      	str	r7, [sp, #16]
 801bb96:	9502      	str	r5, [sp, #8]
 801bb98:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801bb9c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801bba0:	9203      	str	r2, [sp, #12]
 801bba2:	fa1f f288 	uxth.w	r2, r8
 801bba6:	9201      	str	r2, [sp, #4]
 801bba8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801bbac:	9200      	str	r2, [sp, #0]
 801bbae:	4632      	mov	r2, r6
 801bbb0:	6c0d      	ldr	r5, [r1, #64]	@ 0x40
 801bbb2:	4621      	mov	r1, r4
 801bbb4:	47a8      	blx	r5
 801bbb6:	b011      	add	sp, #68	@ 0x44
 801bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbbc:	6803      	ldr	r3, [r0, #0]
 801bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbc0:	4798      	blx	r3
 801bbc2:	f8ba 2000 	ldrh.w	r2, [sl]
 801bbc6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801bbca:	f04f 0e03 	mov.w	lr, #3
 801bbce:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801bbd2:	4355      	muls	r5, r2
 801bbd4:	fa1f fc87 	uxth.w	ip, r7
 801bbd8:	fb02 1303 	mla	r3, r2, r3, r1
 801bbdc:	eba2 0208 	sub.w	r2, r2, r8
 801bbe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bbe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bbec:	4418      	add	r0, r3
 801bbee:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bbf0:	1943      	adds	r3, r0, r5
 801bbf2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801bbf6:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801bbfa:	eba2 0208 	sub.w	r2, r2, r8
 801bbfe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bc02:	b2ad      	uxth	r5, r5
 801bc04:	4298      	cmp	r0, r3
 801bc06:	d24a      	bcs.n	801bc9e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801bc08:	eb00 0908 	add.w	r9, r0, r8
 801bc0c:	4621      	mov	r1, r4
 801bc0e:	4548      	cmp	r0, r9
 801bc10:	460c      	mov	r4, r1
 801bc12:	d240      	bcs.n	801bc96 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bc14:	f04f 0a04 	mov.w	sl, #4
 801bc18:	7824      	ldrb	r4, [r4, #0]
 801bc1a:	2fff      	cmp	r7, #255	@ 0xff
 801bc1c:	f101 0101 	add.w	r1, r1, #1
 801bc20:	fb1e a404 	smlabb	r4, lr, r4, sl
 801bc24:	eb06 0a04 	add.w	sl, r6, r4
 801bc28:	f816 b004 	ldrb.w	fp, [r6, r4]
 801bc2c:	d02b      	beq.n	801bc86 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801bc2e:	7804      	ldrb	r4, [r0, #0]
 801bc30:	fb14 f405 	smulbb	r4, r4, r5
 801bc34:	fb0b 440c 	mla	r4, fp, ip, r4
 801bc38:	b2a4      	uxth	r4, r4
 801bc3a:	f104 0b01 	add.w	fp, r4, #1
 801bc3e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bc42:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bc46:	fb1b fb05 	smulbb	fp, fp, r5
 801bc4a:	1224      	asrs	r4, r4, #8
 801bc4c:	7004      	strb	r4, [r0, #0]
 801bc4e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bc52:	fb04 b40c 	mla	r4, r4, ip, fp
 801bc56:	b2a4      	uxth	r4, r4
 801bc58:	f104 0b01 	add.w	fp, r4, #1
 801bc5c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bc60:	1224      	asrs	r4, r4, #8
 801bc62:	7044      	strb	r4, [r0, #1]
 801bc64:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bc68:	f890 a002 	ldrb.w	sl, [r0, #2]
 801bc6c:	fb1a fa05 	smulbb	sl, sl, r5
 801bc70:	fb04 a40c 	mla	r4, r4, ip, sl
 801bc74:	b2a4      	uxth	r4, r4
 801bc76:	f104 0a01 	add.w	sl, r4, #1
 801bc7a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bc7e:	1224      	asrs	r4, r4, #8
 801bc80:	7084      	strb	r4, [r0, #2]
 801bc82:	3003      	adds	r0, #3
 801bc84:	e7c3      	b.n	801bc0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801bc86:	f880 b000 	strb.w	fp, [r0]
 801bc8a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bc8e:	7044      	strb	r4, [r0, #1]
 801bc90:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bc94:	e7f4      	b.n	801bc80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801bc96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc98:	4420      	add	r0, r4
 801bc9a:	188c      	adds	r4, r1, r2
 801bc9c:	e7b2      	b.n	801bc04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801bc9e:	4b03      	ldr	r3, [pc, #12]	@ (801bcac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801bca0:	6818      	ldr	r0, [r3, #0]
 801bca2:	6803      	ldr	r3, [r0, #0]
 801bca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bca6:	4798      	blx	r3
 801bca8:	e785      	b.n	801bbb6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801bcaa:	bf00      	nop
 801bcac:	24025378 	.word	0x24025378
 801bcb0:	24025372 	.word	0x24025372

0801bcb4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801bcb4:	b4f0      	push	{r4, r5, r6, r7}
 801bcb6:	460c      	mov	r4, r1
 801bcb8:	4611      	mov	r1, r2
 801bcba:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	780f      	ldrb	r7, [r1, #0]
 801bcc2:	9b04      	ldr	r3, [sp, #16]
 801bcc4:	784e      	ldrb	r6, [r1, #1]
 801bcc6:	b11f      	cbz	r7, 801bcd0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801bcc8:	2f01      	cmp	r7, #1
 801bcca:	d01d      	beq.n	801bd08 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801bccc:	bcf0      	pop	{r4, r5, r6, r7}
 801bcce:	4770      	bx	lr
 801bcd0:	2e03      	cmp	r6, #3
 801bcd2:	d8fb      	bhi.n	801bccc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bcd4:	e8df f006 	tbb	[pc, r6]
 801bcd8:	16140702 	.word	0x16140702
 801bcdc:	9504      	str	r5, [sp, #16]
 801bcde:	4620      	mov	r0, r4
 801bce0:	bcf0      	pop	{r4, r5, r6, r7}
 801bce2:	f7ff be33 	b.w	801b94c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801bce6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801bce8:	2800      	cmp	r0, #0
 801bcea:	d0ef      	beq.n	801bccc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bcec:	6806      	ldr	r6, [r0, #0]
 801bcee:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801bcf2:	68f5      	ldr	r5, [r6, #12]
 801bcf4:	4613      	mov	r3, r2
 801bcf6:	46ac      	mov	ip, r5
 801bcf8:	460a      	mov	r2, r1
 801bcfa:	4621      	mov	r1, r4
 801bcfc:	bcf0      	pop	{r4, r5, r6, r7}
 801bcfe:	4760      	bx	ip
 801bd00:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801bd02:	e7f1      	b.n	801bce8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801bd04:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801bd06:	e7ef      	b.n	801bce8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801bd08:	2e03      	cmp	r6, #3
 801bd0a:	d8df      	bhi.n	801bccc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd0c:	e8df f006 	tbb	[pc, r6]
 801bd10:	110f0702 	.word	0x110f0702
 801bd14:	9504      	str	r5, [sp, #16]
 801bd16:	4620      	mov	r0, r4
 801bd18:	bcf0      	pop	{r4, r5, r6, r7}
 801bd1a:	f7ff beef 	b.w	801bafc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801bd1e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801bd20:	2800      	cmp	r0, #0
 801bd22:	d0d3      	beq.n	801bccc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801bd24:	6806      	ldr	r6, [r0, #0]
 801bd26:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801bd2a:	68b5      	ldr	r5, [r6, #8]
 801bd2c:	e7e2      	b.n	801bcf4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801bd2e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801bd30:	e7f6      	b.n	801bd20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801bd32:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801bd34:	e7f4      	b.n	801bd20 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801bd38 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801bd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd3c:	4605      	mov	r5, r0
 801bd3e:	b08f      	sub	sp, #60	@ 0x3c
 801bd40:	460c      	mov	r4, r1
 801bd42:	461f      	mov	r7, r3
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d052      	beq.n	801bdee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bd48:	6808      	ldr	r0, [r1, #0]
 801bd4a:	ab0a      	add	r3, sp, #40	@ 0x28
 801bd4c:	6849      	ldr	r1, [r1, #4]
 801bd4e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801bf18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801bd52:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801bf1c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801bd56:	c303      	stmia	r3!, {r0, r1}
 801bd58:	6810      	ldr	r0, [r2, #0]
 801bd5a:	ab0c      	add	r3, sp, #48	@ 0x30
 801bd5c:	6851      	ldr	r1, [r2, #4]
 801bd5e:	c303      	stmia	r3!, {r0, r1}
 801bd60:	a80a      	add	r0, sp, #40	@ 0x28
 801bd62:	f7f8 facf 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd66:	4621      	mov	r1, r4
 801bd68:	a80c      	add	r0, sp, #48	@ 0x30
 801bd6a:	f7f8 fb0f 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd6e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801bd72:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801bd76:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bd7a:	f8d8 0000 	ldr.w	r0, [r8]
 801bd7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bd82:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801bd86:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801bd8a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801bd8e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801bd92:	440a      	add	r2, r1
 801bd94:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801bd98:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801bd9c:	4413      	add	r3, r2
 801bd9e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801bda2:	6803      	ldr	r3, [r0, #0]
 801bda4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bda6:	4798      	blx	r3
 801bda8:	2fff      	cmp	r7, #255	@ 0xff
 801bdaa:	d023      	beq.n	801bdf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801bdac:	f010 0f04 	tst.w	r0, #4
 801bdb0:	f8d8 0000 	ldr.w	r0, [r8]
 801bdb4:	d021      	beq.n	801bdfa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801bdb6:	2100      	movs	r1, #0
 801bdb8:	f04f 0e01 	mov.w	lr, #1
 801bdbc:	f8d0 c000 	ldr.w	ip, [r0]
 801bdc0:	b2a4      	uxth	r4, r4
 801bdc2:	9106      	str	r1, [sp, #24]
 801bdc4:	b2b6      	uxth	r6, r6
 801bdc6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801bdca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801bdce:	e9cd e107 	strd	lr, r1, [sp, #28]
 801bdd2:	f8b9 e000 	ldrh.w	lr, [r9]
 801bdd6:	9703      	str	r7, [sp, #12]
 801bdd8:	9401      	str	r4, [sp, #4]
 801bdda:	9600      	str	r6, [sp, #0]
 801bddc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801bde0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801bde4:	9102      	str	r1, [sp, #8]
 801bde6:	4629      	mov	r1, r5
 801bde8:	f8dc 4044 	ldr.w	r4, [ip, #68]	@ 0x44
 801bdec:	47a0      	blx	r4
 801bdee:	b00f      	add	sp, #60	@ 0x3c
 801bdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdf4:	f010 0f01 	tst.w	r0, #1
 801bdf8:	e7da      	b.n	801bdb0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801bdfa:	6803      	ldr	r3, [r0, #0]
 801bdfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdfe:	4798      	blx	r3
 801be00:	f8b9 1000 	ldrh.w	r1, [r9]
 801be04:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801be08:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801be0c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801be10:	434c      	muls	r4, r1
 801be12:	2fff      	cmp	r7, #255	@ 0xff
 801be14:	fb01 2303 	mla	r3, r1, r3, r2
 801be18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801be1c:	eba1 0106 	sub.w	r1, r1, r6
 801be20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801be28:	4418      	add	r0, r3
 801be2a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801be2e:	eba3 0606 	sub.w	r6, r3, r6
 801be32:	4404      	add	r4, r0
 801be34:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801be38:	d04a      	beq.n	801bed0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801be3a:	43fa      	mvns	r2, r7
 801be3c:	b2bb      	uxth	r3, r7
 801be3e:	b2d7      	uxtb	r7, r2
 801be40:	42a0      	cmp	r0, r4
 801be42:	d263      	bcs.n	801bf0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801be44:	eb00 0e0c 	add.w	lr, r0, ip
 801be48:	4586      	cmp	lr, r0
 801be4a:	f100 0803 	add.w	r8, r0, #3
 801be4e:	d93a      	bls.n	801bec6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801be50:	f835 2b02 	ldrh.w	r2, [r5], #2
 801be54:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801be58:	00d0      	lsls	r0, r2, #3
 801be5a:	fb19 f907 	smulbb	r9, r9, r7
 801be5e:	b2c0      	uxtb	r0, r0
 801be60:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801be64:	fb00 9003 	mla	r0, r0, r3, r9
 801be68:	b280      	uxth	r0, r0
 801be6a:	f100 0901 	add.w	r9, r0, #1
 801be6e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801be72:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801be76:	fb19 f907 	smulbb	r9, r9, r7
 801be7a:	1200      	asrs	r0, r0, #8
 801be7c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801be80:	10d0      	asrs	r0, r2, #3
 801be82:	1212      	asrs	r2, r2, #8
 801be84:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801be88:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801be8c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801be90:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801be94:	fb00 9003 	mla	r0, r0, r3, r9
 801be98:	b280      	uxth	r0, r0
 801be9a:	f100 0901 	add.w	r9, r0, #1
 801be9e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bea2:	1200      	asrs	r0, r0, #8
 801bea4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801bea8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801beac:	fb10 f007 	smulbb	r0, r0, r7
 801beb0:	fb02 0203 	mla	r2, r2, r3, r0
 801beb4:	b292      	uxth	r2, r2
 801beb6:	1c50      	adds	r0, r2, #1
 801beb8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bebc:	4640      	mov	r0, r8
 801bebe:	1212      	asrs	r2, r2, #8
 801bec0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bec4:	e7c0      	b.n	801be48 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801bec6:	4408      	add	r0, r1
 801bec8:	4435      	add	r5, r6
 801beca:	e7b9      	b.n	801be40 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801becc:	4408      	add	r0, r1
 801bece:	4435      	add	r5, r6
 801bed0:	42a0      	cmp	r0, r4
 801bed2:	d21b      	bcs.n	801bf0c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801bed4:	eb00 070c 	add.w	r7, r0, ip
 801bed8:	42b8      	cmp	r0, r7
 801beda:	d2f7      	bcs.n	801becc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801bedc:	f835 3b02 	ldrh.w	r3, [r5], #2
 801bee0:	3003      	adds	r0, #3
 801bee2:	00da      	lsls	r2, r3, #3
 801bee4:	b2d2      	uxtb	r2, r2
 801bee6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801beea:	f800 2c03 	strb.w	r2, [r0, #-3]
 801beee:	10da      	asrs	r2, r3, #3
 801bef0:	121b      	asrs	r3, r3, #8
 801bef2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801bef6:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801befa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801befe:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801bf02:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bf06:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bf0a:	e7e5      	b.n	801bed8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801bf0c:	4b02      	ldr	r3, [pc, #8]	@ (801bf18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801bf0e:	6818      	ldr	r0, [r3, #0]
 801bf10:	6803      	ldr	r3, [r0, #0]
 801bf12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bf14:	4798      	blx	r3
 801bf16:	e76a      	b.n	801bdee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bf18:	24025378 	.word	0x24025378
 801bf1c:	24025372 	.word	0x24025372

0801bf20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf24:	b08a      	sub	sp, #40	@ 0x28
 801bf26:	460d      	mov	r5, r1
 801bf28:	4604      	mov	r4, r0
 801bf2a:	461e      	mov	r6, r3
 801bf2c:	6808      	ldr	r0, [r1, #0]
 801bf2e:	ab06      	add	r3, sp, #24
 801bf30:	6849      	ldr	r1, [r1, #4]
 801bf32:	4f5d      	ldr	r7, [pc, #372]	@ (801c0a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801bf34:	c303      	stmia	r3!, {r0, r1}
 801bf36:	6810      	ldr	r0, [r2, #0]
 801bf38:	ab08      	add	r3, sp, #32
 801bf3a:	6851      	ldr	r1, [r2, #4]
 801bf3c:	c303      	stmia	r3!, {r0, r1}
 801bf3e:	a806      	add	r0, sp, #24
 801bf40:	f7f8 f9e0 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf44:	4629      	mov	r1, r5
 801bf46:	a808      	add	r0, sp, #32
 801bf48:	f7f8 fa20 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bf4c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bf50:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bf54:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bf58:	6838      	ldr	r0, [r7, #0]
 801bf5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bf5e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801bf62:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801bf66:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bf6a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bf6e:	440a      	add	r2, r1
 801bf70:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bf74:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bf78:	4413      	add	r3, r2
 801bf7a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801bf7e:	6803      	ldr	r3, [r0, #0]
 801bf80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bf82:	4798      	blx	r3
 801bf84:	2eff      	cmp	r6, #255	@ 0xff
 801bf86:	d119      	bne.n	801bfbc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801bf88:	f010 0f20 	tst.w	r0, #32
 801bf8c:	6838      	ldr	r0, [r7, #0]
 801bf8e:	d018      	beq.n	801bfc2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801bf90:	b2ad      	uxth	r5, r5
 801bf92:	2700      	movs	r7, #0
 801bf94:	6801      	ldr	r1, [r0, #0]
 801bf96:	9501      	str	r5, [sp, #4]
 801bf98:	fa1f f588 	uxth.w	r5, r8
 801bf9c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801bfa0:	9500      	str	r5, [sp, #0]
 801bfa2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bfa6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801bfaa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bfae:	9602      	str	r6, [sp, #8]
 801bfb0:	6d4d      	ldr	r5, [r1, #84]	@ 0x54
 801bfb2:	4621      	mov	r1, r4
 801bfb4:	47a8      	blx	r5
 801bfb6:	b00a      	add	sp, #40	@ 0x28
 801bfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfbc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801bfc0:	e7e4      	b.n	801bf8c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801bfc2:	6803      	ldr	r3, [r0, #0]
 801bfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bfc6:	4798      	blx	r3
 801bfc8:	4b38      	ldr	r3, [pc, #224]	@ (801c0ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801bfca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bfce:	f8b3 c000 	ldrh.w	ip, [r3]
 801bfd2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801bfd6:	fb0c f505 	mul.w	r5, ip, r5
 801bfda:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801bfde:	fb0c 2303 	mla	r3, ip, r3, r2
 801bfe2:	ebac 0c08 	sub.w	ip, ip, r8
 801bfe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bfea:	ebae 0e08 	sub.w	lr, lr, r8
 801bfee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bff2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bff6:	4418      	add	r0, r3
 801bff8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801bffc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c000:	4405      	add	r5, r0
 801c002:	42a8      	cmp	r0, r5
 801c004:	d24a      	bcs.n	801c09c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801c006:	eb00 0803 	add.w	r8, r0, r3
 801c00a:	4540      	cmp	r0, r8
 801c00c:	d243      	bcs.n	801c096 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801c00e:	78e2      	ldrb	r2, [r4, #3]
 801c010:	b15a      	cbz	r2, 801c02a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c012:	2aff      	cmp	r2, #255	@ 0xff
 801c014:	f894 9000 	ldrb.w	r9, [r4]
 801c018:	d10a      	bne.n	801c030 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c01a:	2eff      	cmp	r6, #255	@ 0xff
 801c01c:	d108      	bne.n	801c030 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c01e:	f880 9000 	strb.w	r9, [r0]
 801c022:	7862      	ldrb	r2, [r4, #1]
 801c024:	7042      	strb	r2, [r0, #1]
 801c026:	78a2      	ldrb	r2, [r4, #2]
 801c028:	7082      	strb	r2, [r0, #2]
 801c02a:	3003      	adds	r0, #3
 801c02c:	3404      	adds	r4, #4
 801c02e:	e7ec      	b.n	801c00a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801c030:	4372      	muls	r2, r6
 801c032:	1c51      	adds	r1, r2, #1
 801c034:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801c038:	1209      	asrs	r1, r1, #8
 801c03a:	fa1f fa81 	uxth.w	sl, r1
 801c03e:	43c9      	mvns	r1, r1
 801c040:	fb19 f90a 	smulbb	r9, r9, sl
 801c044:	b2ca      	uxtb	r2, r1
 801c046:	7801      	ldrb	r1, [r0, #0]
 801c048:	fb01 9902 	mla	r9, r1, r2, r9
 801c04c:	fa1f f989 	uxth.w	r9, r9
 801c050:	f109 0101 	add.w	r1, r9, #1
 801c054:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801c058:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c05c:	f880 9000 	strb.w	r9, [r0]
 801c060:	f890 9001 	ldrb.w	r9, [r0, #1]
 801c064:	7861      	ldrb	r1, [r4, #1]
 801c066:	fb19 f902 	smulbb	r9, r9, r2
 801c06a:	fb01 910a 	mla	r1, r1, sl, r9
 801c06e:	b289      	uxth	r1, r1
 801c070:	f101 0901 	add.w	r9, r1, #1
 801c074:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801c078:	1209      	asrs	r1, r1, #8
 801c07a:	7041      	strb	r1, [r0, #1]
 801c07c:	7881      	ldrb	r1, [r0, #2]
 801c07e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c082:	fb11 f202 	smulbb	r2, r1, r2
 801c086:	fb09 220a 	mla	r2, r9, sl, r2
 801c08a:	b292      	uxth	r2, r2
 801c08c:	1c51      	adds	r1, r2, #1
 801c08e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c092:	1212      	asrs	r2, r2, #8
 801c094:	e7c8      	b.n	801c028 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801c096:	4460      	add	r0, ip
 801c098:	4474      	add	r4, lr
 801c09a:	e7b2      	b.n	801c002 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801c09c:	6838      	ldr	r0, [r7, #0]
 801c09e:	6803      	ldr	r3, [r0, #0]
 801c0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c0a2:	4798      	blx	r3
 801c0a4:	e787      	b.n	801bfb6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c0a6:	bf00      	nop
 801c0a8:	24025378 	.word	0x24025378
 801c0ac:	24025372 	.word	0x24025372

0801c0b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0b4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801c0b8:	4607      	mov	r7, r0
 801c0ba:	460c      	mov	r4, r1
 801c0bc:	4692      	mov	sl, r2
 801c0be:	4699      	mov	r9, r3
 801c0c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c0c2:	b335      	cbz	r5, 801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c0c4:	4608      	mov	r0, r1
 801c0c6:	f7fb fd93 	bl	8017bf0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c0ca:	4680      	mov	r8, r0
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	f7fb fdc3 	bl	8017c58 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c0d2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	f8ad a008 	strh.w	sl, [sp, #8]
 801c0dc:	f8ad 900a 	strh.w	r9, [sp, #10]
 801c0e0:	f8ad 800c 	strh.w	r8, [sp, #12]
 801c0e4:	f7fb fefa 	bl	8017edc <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c0e8:	2810      	cmp	r0, #16
 801c0ea:	d812      	bhi.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c0ec:	e8df f000 	tbb	[pc, r0]
 801c0f0:	11092d24 	.word	0x11092d24
 801c0f4:	11111111 	.word	0x11111111
 801c0f8:	14111111 	.word	0x14111111
 801c0fc:	4c111111 	.word	0x4c111111
 801c100:	3c          	.byte	0x3c
 801c101:	00          	.byte	0x00
 801c102:	4620      	mov	r0, r4
 801c104:	f7fb fe66 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c108:	462b      	mov	r3, r5
 801c10a:	4632      	mov	r2, r6
 801c10c:	a902      	add	r1, sp, #8
 801c10e:	f7ff ff07 	bl	801bf20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c112:	b004      	add	sp, #16
 801c114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c118:	4620      	mov	r0, r4
 801c11a:	f7fb fe5b 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c11e:	4680      	mov	r8, r0
 801c120:	4620      	mov	r0, r4
 801c122:	f7fb fe87 	bl	8017e34 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c126:	ab02      	add	r3, sp, #8
 801c128:	4602      	mov	r2, r0
 801c12a:	4641      	mov	r1, r8
 801c12c:	4638      	mov	r0, r7
 801c12e:	e9cd 6500 	strd	r6, r5, [sp]
 801c132:	f7ff fdbf 	bl	801bcb4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c136:	e7ec      	b.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c138:	4620      	mov	r0, r4
 801c13a:	f7fb fe4b 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c13e:	462b      	mov	r3, r5
 801c140:	4632      	mov	r2, r6
 801c142:	a902      	add	r1, sp, #8
 801c144:	f7ff fdf8 	bl	801bd38 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c148:	e7e3      	b.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c14a:	683b      	ldr	r3, [r7, #0]
 801c14c:	4620      	mov	r0, r4
 801c14e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c152:	f7fb fe3f 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c156:	2300      	movs	r3, #0
 801c158:	4601      	mov	r1, r0
 801c15a:	aa02      	add	r2, sp, #8
 801c15c:	4638      	mov	r0, r7
 801c15e:	e9cd 5300 	strd	r5, r3, [sp]
 801c162:	4633      	mov	r3, r6
 801c164:	47c0      	blx	r8
 801c166:	e7d4      	b.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c168:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c16a:	2f00      	cmp	r7, #0
 801c16c:	d0d1      	beq.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c16e:	683b      	ldr	r3, [r7, #0]
 801c170:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c174:	4620      	mov	r0, r4
 801c176:	f7fb fe2d 	bl	8017dd4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c17a:	9500      	str	r5, [sp, #0]
 801c17c:	4601      	mov	r1, r0
 801c17e:	4633      	mov	r3, r6
 801c180:	aa02      	add	r2, sp, #8
 801c182:	4638      	mov	r0, r7
 801c184:	47c0      	blx	r8
 801c186:	e7c4      	b.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c188:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801c18a:	2f00      	cmp	r7, #0
 801c18c:	d0c1      	beq.n	801c112 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801c18e:	683b      	ldr	r3, [r7, #0]
 801c190:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801c194:	e7ee      	b.n	801c174 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801c196 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c196:	b4f0      	push	{r4, r5, r6, r7}
 801c198:	4616      	mov	r6, r2
 801c19a:	461c      	mov	r4, r3
 801c19c:	460d      	mov	r5, r1
 801c19e:	9a04      	ldr	r2, [sp, #16]
 801c1a0:	2e01      	cmp	r6, #1
 801c1a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c1a6:	d00e      	beq.n	801c1c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801c1a8:	d303      	bcc.n	801c1b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801c1aa:	2e02      	cmp	r6, #2
 801c1ac:	d006      	beq.n	801c1bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801c1ae:	bcf0      	pop	{r4, r5, r6, r7}
 801c1b0:	4770      	bx	lr
 801c1b2:	4621      	mov	r1, r4
 801c1b4:	4628      	mov	r0, r5
 801c1b6:	bcf0      	pop	{r4, r5, r6, r7}
 801c1b8:	f7ff bdbe 	b.w	801bd38 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c1bc:	4621      	mov	r1, r4
 801c1be:	4628      	mov	r0, r5
 801c1c0:	bcf0      	pop	{r4, r5, r6, r7}
 801c1c2:	f7ff bead 	b.w	801bf20 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c1c6:	6805      	ldr	r5, [r0, #0]
 801c1c8:	2600      	movs	r6, #0
 801c1ca:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c1ce:	68ed      	ldr	r5, [r5, #12]
 801c1d0:	4613      	mov	r3, r2
 801c1d2:	4622      	mov	r2, r4
 801c1d4:	46ac      	mov	ip, r5
 801c1d6:	bcf0      	pop	{r4, r5, r6, r7}
 801c1d8:	4760      	bx	ip
	...

0801c1dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c1dc:	b160      	cbz	r0, 801c1f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801c1de:	2903      	cmp	r1, #3
 801c1e0:	d818      	bhi.n	801c214 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c1e2:	e8df f001 	tbb	[pc, r1]
 801c1e6:	1902      	.short	0x1902
 801c1e8:	1b06      	.short	0x1b06
 801c1ea:	4b0e      	ldr	r3, [pc, #56]	@ (801c224 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c1ec:	8818      	ldrh	r0, [r3, #0]
 801c1ee:	4240      	negs	r0, r0
 801c1f0:	4770      	bx	lr
 801c1f2:	4b0c      	ldr	r3, [pc, #48]	@ (801c224 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c1f4:	8818      	ldrh	r0, [r3, #0]
 801c1f6:	4770      	bx	lr
 801c1f8:	2903      	cmp	r1, #3
 801c1fa:	d80b      	bhi.n	801c214 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c1fc:	a301      	add	r3, pc, #4	@ (adr r3, 801c204 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801c1fe:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c202:	bf00      	nop
 801c204:	0801c219 	.word	0x0801c219
 801c208:	0801c1f3 	.word	0x0801c1f3
 801c20c:	0801c21d 	.word	0x0801c21d
 801c210:	0801c1eb 	.word	0x0801c1eb
 801c214:	2000      	movs	r0, #0
 801c216:	4770      	bx	lr
 801c218:	2001      	movs	r0, #1
 801c21a:	4770      	bx	lr
 801c21c:	f04f 30ff 	mov.w	r0, #4294967295
 801c220:	4770      	bx	lr
 801c222:	bf00      	nop
 801c224:	24025372 	.word	0x24025372

0801c228 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c228:	b160      	cbz	r0, 801c244 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801c22a:	2903      	cmp	r1, #3
 801c22c:	d818      	bhi.n	801c260 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c22e:	e8df f001 	tbb	[pc, r1]
 801c232:	0219      	.short	0x0219
 801c234:	051b      	.short	0x051b
 801c236:	4b0e      	ldr	r3, [pc, #56]	@ (801c270 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c238:	8818      	ldrh	r0, [r3, #0]
 801c23a:	4770      	bx	lr
 801c23c:	4b0c      	ldr	r3, [pc, #48]	@ (801c270 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c23e:	8818      	ldrh	r0, [r3, #0]
 801c240:	4240      	negs	r0, r0
 801c242:	4770      	bx	lr
 801c244:	2903      	cmp	r1, #3
 801c246:	d80b      	bhi.n	801c260 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c248:	a301      	add	r3, pc, #4	@ (adr r3, 801c250 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801c24a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c24e:	bf00      	nop
 801c250:	0801c237 	.word	0x0801c237
 801c254:	0801c269 	.word	0x0801c269
 801c258:	0801c23d 	.word	0x0801c23d
 801c25c:	0801c265 	.word	0x0801c265
 801c260:	2000      	movs	r0, #0
 801c262:	4770      	bx	lr
 801c264:	2001      	movs	r0, #1
 801c266:	4770      	bx	lr
 801c268:	f04f 30ff 	mov.w	r0, #4294967295
 801c26c:	4770      	bx	lr
 801c26e:	bf00      	nop
 801c270:	24025372 	.word	0x24025372

0801c274 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c278:	b097      	sub	sp, #92	@ 0x5c
 801c27a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c27c:	a912      	add	r1, sp, #72	@ 0x48
 801c27e:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801c282:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801c286:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801c28a:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801c28e:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801c292:	e881 000c 	stmia.w	r1, {r2, r3}
 801c296:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801c29a:	930a      	str	r3, [sp, #40]	@ 0x28
 801c29c:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801c2a0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801c2a4:	9311      	str	r3, [sp, #68]	@ 0x44
 801c2a6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801c2aa:	798d      	ldrb	r5, [r1, #6]
 801c2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2ae:	7b4b      	ldrb	r3, [r1, #13]
 801c2b0:	0158      	lsls	r0, r3, #5
 801c2b2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801c2b6:	4328      	orrs	r0, r5
 801c2b8:	9009      	str	r0, [sp, #36]	@ 0x24
 801c2ba:	f000 817c 	beq.w	801c5b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c2be:	011b      	lsls	r3, r3, #4
 801c2c0:	79c8      	ldrb	r0, [r1, #7]
 801c2c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c2c6:	4303      	orrs	r3, r0
 801c2c8:	930e      	str	r3, [sp, #56]	@ 0x38
 801c2ca:	f000 8174 	beq.w	801c5b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c2ce:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c2d2:	b29b      	uxth	r3, r3
 801c2d4:	2f00      	cmp	r7, #0
 801c2d6:	f000 8116 	beq.w	801c506 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801c2da:	1aff      	subs	r7, r7, r3
 801c2dc:	b2bf      	uxth	r7, r7
 801c2de:	043b      	lsls	r3, r7, #16
 801c2e0:	d502      	bpl.n	801c2e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c2e2:	1bf6      	subs	r6, r6, r7
 801c2e4:	2700      	movs	r7, #0
 801c2e6:	b236      	sxth	r6, r6
 801c2e8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c2ec:	a812      	add	r0, sp, #72	@ 0x48
 801c2ee:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c2f2:	428e      	cmp	r6, r1
 801c2f4:	b28b      	uxth	r3, r1
 801c2f6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801c2fa:	bfbf      	itttt	lt
 801c2fc:	18ff      	addlt	r7, r7, r3
 801c2fe:	1bbe      	sublt	r6, r7, r6
 801c300:	b2b7      	uxthlt	r7, r6
 801c302:	460e      	movlt	r6, r1
 801c304:	8891      	ldrh	r1, [r2, #4]
 801c306:	440b      	add	r3, r1
 801c308:	4631      	mov	r1, r6
 801c30a:	b21b      	sxth	r3, r3
 801c30c:	9310      	str	r3, [sp, #64]	@ 0x40
 801c30e:	88d3      	ldrh	r3, [r2, #6]
 801c310:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c312:	449a      	add	sl, r3
 801c314:	fa0f f38a 	sxth.w	r3, sl
 801c318:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801c31c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c31e:	4bb5      	ldr	r3, [pc, #724]	@ (801c5f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c320:	f893 b000 	ldrb.w	fp, [r3]
 801c324:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c328:	f1dc 0300 	rsbs	r3, ip, #0
 801c32c:	eb43 030c 	adc.w	r3, r3, ip
 801c330:	930d      	str	r3, [sp, #52]	@ 0x34
 801c332:	464b      	mov	r3, r9
 801c334:	f7f7 fe5b 	bl	8013fee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c338:	4631      	mov	r1, r6
 801c33a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801c33e:	464b      	mov	r3, r9
 801c340:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c342:	a812      	add	r0, sp, #72	@ 0x48
 801c344:	f7f7 fe70 	bl	8014028 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c348:	a916      	add	r1, sp, #88	@ 0x58
 801c34a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c34e:	a815      	add	r0, sp, #84	@ 0x54
 801c350:	f7f7 ff96 	bl	8014280 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c354:	f1b9 0f00 	cmp.w	r9, #0
 801c358:	f040 80d8 	bne.w	801c50c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801c35c:	f1bb 0f01 	cmp.w	fp, #1
 801c360:	f040 80dc 	bne.w	801c51c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801c364:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c366:	b153      	cbz	r3, 801c37e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c368:	2508      	movs	r5, #8
 801c36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c36c:	fb95 f3f8 	sdiv	r3, r5, r8
 801c370:	1e5d      	subs	r5, r3, #1
 801c372:	4415      	add	r5, r2
 801c374:	fb95 f5f3 	sdiv	r5, r5, r3
 801c378:	fb15 f503 	smulbb	r5, r5, r3
 801c37c:	b2ad      	uxth	r5, r5
 801c37e:	b907      	cbnz	r7, 801c382 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c380:	b16c      	cbz	r4, 801c39e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c382:	fb04 7305 	mla	r3, r4, r5, r7
 801c386:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c388:	ebaa 0a04 	sub.w	sl, sl, r4
 801c38c:	fb08 f303 	mul.w	r3, r8, r3
 801c390:	fa1f fa8a 	uxth.w	sl, sl
 801c394:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c398:	f003 0407 	and.w	r4, r3, #7
 801c39c:	9226      	str	r2, [sp, #152]	@ 0x98
 801c39e:	4649      	mov	r1, r9
 801c3a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c3a2:	f7ff ff1b 	bl	801c1dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c3a6:	4683      	mov	fp, r0
 801c3a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c3aa:	f7ff ff3d 	bl	801c228 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c3ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c3b2:	4681      	mov	r9, r0
 801c3b4:	1a9b      	subs	r3, r3, r2
 801c3b6:	459a      	cmp	sl, r3
 801c3b8:	bfa8      	it	ge
 801c3ba:	469a      	movge	sl, r3
 801c3bc:	f1ba 0f00 	cmp.w	sl, #0
 801c3c0:	f340 80f9 	ble.w	801c5b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c3c4:	1bf6      	subs	r6, r6, r7
 801c3c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c3c8:	1b9e      	subs	r6, r3, r6
 801c3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3cc:	429e      	cmp	r6, r3
 801c3ce:	bfd4      	ite	le
 801c3d0:	ebc7 0706 	rsble	r7, r7, r6
 801c3d4:	ebc7 0703 	rsbgt	r7, r7, r3
 801c3d8:	2f00      	cmp	r7, #0
 801c3da:	f340 80ec 	ble.w	801c5b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c3de:	1bed      	subs	r5, r5, r7
 801c3e0:	fb08 f305 	mul.w	r3, r8, r5
 801c3e4:	930d      	str	r3, [sp, #52]	@ 0x34
 801c3e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c3e8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c3ec:	930e      	str	r3, [sp, #56]	@ 0x38
 801c3ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c3f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c3f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c3f6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c3f8:	b2db      	uxtb	r3, r3
 801c3fa:	9310      	str	r3, [sp, #64]	@ 0x40
 801c3fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	f040 80de 	bne.w	801c5c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c404:	4b7c      	ldr	r3, [pc, #496]	@ (801c5f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c406:	6818      	ldr	r0, [r3, #0]
 801c408:	6803      	ldr	r3, [r0, #0]
 801c40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c40c:	4798      	blx	r3
 801c40e:	2301      	movs	r3, #1
 801c410:	4a7a      	ldr	r2, [pc, #488]	@ (801c5fc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c412:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c416:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c41a:	fa03 f308 	lsl.w	r3, r3, r8
 801c41e:	8811      	ldrh	r1, [r2, #0]
 801c420:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801c424:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c428:	3b01      	subs	r3, #1
 801c42a:	fb06 bb07 	mla	fp, r6, r7, fp
 801c42e:	b2db      	uxtb	r3, r3
 801c430:	930a      	str	r3, [sp, #40]	@ 0x28
 801c432:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801c436:	fb01 2303 	mla	r3, r1, r3, r2
 801c43a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c43e:	18c3      	adds	r3, r0, r3
 801c440:	9309      	str	r3, [sp, #36]	@ 0x24
 801c442:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c444:	781a      	ldrb	r2, [r3, #0]
 801c446:	4122      	asrs	r2, r4
 801c448:	b2d2      	uxtb	r2, r2
 801c44a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c44e:	f0c0 80d7 	bcc.w	801c600 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c452:	46be      	mov	lr, r7
 801c454:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c456:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c45a:	f0c0 80ba 	bcc.w	801c5d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c45e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c460:	4013      	ands	r3, r2
 801c462:	d041      	beq.n	801c4e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c464:	20ff      	movs	r0, #255	@ 0xff
 801c466:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801c468:	fb90 f5f5 	sdiv	r5, r0, r5
 801c46c:	436b      	muls	r3, r5
 801c46e:	2bfe      	cmp	r3, #254	@ 0xfe
 801c470:	dd03      	ble.n	801c47a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c472:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c474:	4285      	cmp	r5, r0
 801c476:	f000 80a5 	beq.w	801c5c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c47a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c47c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c47e:	fb15 f303 	smulbb	r3, r5, r3
 801c482:	b29b      	uxth	r3, r3
 801c484:	1c5d      	adds	r5, r3, #1
 801c486:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c48a:	780d      	ldrb	r5, [r1, #0]
 801c48c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c490:	fa1f fc83 	uxth.w	ip, r3
 801c494:	43db      	mvns	r3, r3
 801c496:	fb10 f90c 	smulbb	r9, r0, ip
 801c49a:	b2db      	uxtb	r3, r3
 801c49c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c49e:	fb05 9503 	mla	r5, r5, r3, r9
 801c4a2:	b2ad      	uxth	r5, r5
 801c4a4:	f105 0901 	add.w	r9, r5, #1
 801c4a8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c4ac:	fb10 f90c 	smulbb	r9, r0, ip
 801c4b0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801c4b2:	122d      	asrs	r5, r5, #8
 801c4b4:	fb10 fc0c 	smulbb	ip, r0, ip
 801c4b8:	700d      	strb	r5, [r1, #0]
 801c4ba:	784d      	ldrb	r5, [r1, #1]
 801c4bc:	fb05 9503 	mla	r5, r5, r3, r9
 801c4c0:	b2ad      	uxth	r5, r5
 801c4c2:	f105 0901 	add.w	r9, r5, #1
 801c4c6:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c4ca:	122d      	asrs	r5, r5, #8
 801c4cc:	704d      	strb	r5, [r1, #1]
 801c4ce:	788d      	ldrb	r5, [r1, #2]
 801c4d0:	fb05 cc03 	mla	ip, r5, r3, ip
 801c4d4:	fa1f fc8c 	uxth.w	ip, ip
 801c4d8:	f10c 0301 	add.w	r3, ip, #1
 801c4dc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c4e0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c4e4:	f881 c002 	strb.w	ip, [r1, #2]
 801c4e8:	4444      	add	r4, r8
 801c4ea:	4431      	add	r1, r6
 801c4ec:	b2a4      	uxth	r4, r4
 801c4ee:	2c07      	cmp	r4, #7
 801c4f0:	bf89      	itett	hi
 801c4f2:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801c4f4:	fa42 f208 	asrls.w	r2, r2, r8
 801c4f8:	2400      	movhi	r4, #0
 801c4fa:	785a      	ldrbhi	r2, [r3, #1]
 801c4fc:	bf8a      	itet	hi
 801c4fe:	3301      	addhi	r3, #1
 801c500:	b2d2      	uxtbls	r2, r2
 801c502:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801c504:	e7a7      	b.n	801c456 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c506:	441e      	add	r6, r3
 801c508:	b236      	sxth	r6, r6
 801c50a:	e6ed      	b.n	801c2e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c50c:	f1b9 0f01 	cmp.w	r9, #1
 801c510:	f47f af28 	bne.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c514:	f1bb 0f01 	cmp.w	fp, #1
 801c518:	f47f af24 	bne.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c51c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801c5f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c520:	f8db 0000 	ldr.w	r0, [fp]
 801c524:	6803      	ldr	r3, [r0, #0]
 801c526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c528:	4798      	blx	r3
 801c52a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801c52e:	465a      	mov	r2, fp
 801c530:	d006      	beq.n	801c540 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c532:	f1b8 0f04 	cmp.w	r8, #4
 801c536:	d141      	bne.n	801c5bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c538:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c53a:	3300      	adds	r3, #0
 801c53c:	bf18      	it	ne
 801c53e:	2301      	movne	r3, #1
 801c540:	0580      	lsls	r0, r0, #22
 801c542:	d566      	bpl.n	801c612 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c544:	f1b8 0f08 	cmp.w	r8, #8
 801c548:	d163      	bne.n	801c612 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	bf0c      	ite	eq
 801c54e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801c552:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801c556:	2f00      	cmp	r7, #0
 801c558:	f47f af04 	bne.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c55c:	2c00      	cmp	r4, #0
 801c55e:	f47f af01 	bne.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c564:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c566:	18f3      	adds	r3, r6, r3
 801c568:	4283      	cmp	r3, r0
 801c56a:	f73f aefb 	bgt.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c56e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c572:	4403      	add	r3, r0
 801c574:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c576:	4283      	cmp	r3, r0
 801c578:	f73f aef4 	bgt.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c57c:	f1b8 0f08 	cmp.w	r8, #8
 801c580:	6810      	ldr	r0, [r2, #0]
 801c582:	f04f 0600 	mov.w	r6, #0
 801c586:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801c58a:	bf18      	it	ne
 801c58c:	3501      	addne	r5, #1
 801c58e:	6804      	ldr	r4, [r0, #0]
 801c590:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801c594:	bf18      	it	ne
 801c596:	f025 0501 	bicne.w	r5, r5, #1
 801c59a:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c59e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c5a0:	bf18      	it	ne
 801c5a2:	b2ad      	uxthne	r5, r5
 801c5a4:	9104      	str	r1, [sp, #16]
 801c5a6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c5a8:	e9cd 5a00 	strd	r5, sl, [sp]
 801c5ac:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c5b0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801c5b2:	6da4      	ldr	r4, [r4, #88]	@ 0x58
 801c5b4:	47a0      	blx	r4
 801c5b6:	b017      	add	sp, #92	@ 0x5c
 801c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5bc:	2300      	movs	r3, #0
 801c5be:	e7bf      	b.n	801c540 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c5c0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c5c2:	e724      	b.n	801c40e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c5c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c5c6:	700b      	strb	r3, [r1, #0]
 801c5c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c5ca:	704b      	strb	r3, [r1, #1]
 801c5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c5ce:	708b      	strb	r3, [r1, #2]
 801c5d0:	e78a      	b.n	801c4e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c5d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c5d4:	b153      	cbz	r3, 801c5ec <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c5d6:	441c      	add	r4, r3
 801c5d8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c5da:	b2a4      	uxth	r4, r4
 801c5dc:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c5e0:	f004 0407 	and.w	r4, r4, #7
 801c5e4:	781a      	ldrb	r2, [r3, #0]
 801c5e6:	9326      	str	r3, [sp, #152]	@ 0x98
 801c5e8:	4122      	asrs	r2, r4
 801c5ea:	b2d2      	uxtb	r2, r2
 801c5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5ee:	445b      	add	r3, fp
 801c5f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5f2:	e72a      	b.n	801c44a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c5f4:	24025370 	.word	0x24025370
 801c5f8:	24025378 	.word	0x24025378
 801c5fc:	24025372 	.word	0x24025372
 801c600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c602:	2b00      	cmp	r3, #0
 801c604:	d1d7      	bne.n	801c5b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c606:	4b06      	ldr	r3, [pc, #24]	@ (801c620 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c608:	6818      	ldr	r0, [r3, #0]
 801c60a:	6803      	ldr	r3, [r0, #0]
 801c60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c60e:	4798      	blx	r3
 801c610:	e7d1      	b.n	801c5b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c612:	2b00      	cmp	r3, #0
 801c614:	f43f aea6 	beq.w	801c364 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c618:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c61c:	e79b      	b.n	801c556 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c61e:	bf00      	nop
 801c620:	24025378 	.word	0x24025378

0801c624 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c624:	b538      	push	{r3, r4, r5, lr}
 801c626:	4c15      	ldr	r4, [pc, #84]	@ (801c67c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c628:	4605      	mov	r5, r0
 801c62a:	7823      	ldrb	r3, [r4, #0]
 801c62c:	f3bf 8f5b 	dmb	ish
 801c630:	07da      	lsls	r2, r3, #31
 801c632:	d40b      	bmi.n	801c64c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c634:	4620      	mov	r0, r4
 801c636:	f006 f8f7 	bl	8022828 <__cxa_guard_acquire>
 801c63a:	b138      	cbz	r0, 801c64c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c63c:	4620      	mov	r0, r4
 801c63e:	f006 f8ff 	bl	8022840 <__cxa_guard_release>
 801c642:	4a0f      	ldr	r2, [pc, #60]	@ (801c680 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c644:	490f      	ldr	r1, [pc, #60]	@ (801c684 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c646:	4810      	ldr	r0, [pc, #64]	@ (801c688 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c648:	f006 f8e7 	bl	802281a <__aeabi_atexit>
 801c64c:	4c0f      	ldr	r4, [pc, #60]	@ (801c68c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c64e:	7823      	ldrb	r3, [r4, #0]
 801c650:	f3bf 8f5b 	dmb	ish
 801c654:	07db      	lsls	r3, r3, #31
 801c656:	d40b      	bmi.n	801c670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c658:	4620      	mov	r0, r4
 801c65a:	f006 f8e5 	bl	8022828 <__cxa_guard_acquire>
 801c65e:	b138      	cbz	r0, 801c670 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c660:	4620      	mov	r0, r4
 801c662:	f006 f8ed 	bl	8022840 <__cxa_guard_release>
 801c666:	4a06      	ldr	r2, [pc, #24]	@ (801c680 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c668:	4909      	ldr	r1, [pc, #36]	@ (801c690 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c66a:	480a      	ldr	r0, [pc, #40]	@ (801c694 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c66c:	f006 f8d5 	bl	802281a <__aeabi_atexit>
 801c670:	4b05      	ldr	r3, [pc, #20]	@ (801c688 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c672:	616b      	str	r3, [r5, #20]
 801c674:	4b07      	ldr	r3, [pc, #28]	@ (801c694 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c676:	61ab      	str	r3, [r5, #24]
 801c678:	bd38      	pop	{r3, r4, r5, pc}
 801c67a:	bf00      	nop
 801c67c:	2402545c 	.word	0x2402545c
 801c680:	24000000 	.word	0x24000000
 801c684:	08019915 	.word	0x08019915
 801c688:	240000c8 	.word	0x240000c8
 801c68c:	24025460 	.word	0x24025460
 801c690:	08019913 	.word	0x08019913
 801c694:	240000cc 	.word	0x240000cc

0801c698 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c698:	b538      	push	{r3, r4, r5, lr}
 801c69a:	4c15      	ldr	r4, [pc, #84]	@ (801c6f0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c69c:	4605      	mov	r5, r0
 801c69e:	7823      	ldrb	r3, [r4, #0]
 801c6a0:	f3bf 8f5b 	dmb	ish
 801c6a4:	07da      	lsls	r2, r3, #31
 801c6a6:	d40b      	bmi.n	801c6c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c6a8:	4620      	mov	r0, r4
 801c6aa:	f006 f8bd 	bl	8022828 <__cxa_guard_acquire>
 801c6ae:	b138      	cbz	r0, 801c6c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c6b0:	4620      	mov	r0, r4
 801c6b2:	f006 f8c5 	bl	8022840 <__cxa_guard_release>
 801c6b6:	4a0f      	ldr	r2, [pc, #60]	@ (801c6f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c6b8:	490f      	ldr	r1, [pc, #60]	@ (801c6f8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c6ba:	4810      	ldr	r0, [pc, #64]	@ (801c6fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c6bc:	f006 f8ad 	bl	802281a <__aeabi_atexit>
 801c6c0:	4c0f      	ldr	r4, [pc, #60]	@ (801c700 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c6c2:	7823      	ldrb	r3, [r4, #0]
 801c6c4:	f3bf 8f5b 	dmb	ish
 801c6c8:	07db      	lsls	r3, r3, #31
 801c6ca:	d40b      	bmi.n	801c6e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c6cc:	4620      	mov	r0, r4
 801c6ce:	f006 f8ab 	bl	8022828 <__cxa_guard_acquire>
 801c6d2:	b138      	cbz	r0, 801c6e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c6d4:	4620      	mov	r0, r4
 801c6d6:	f006 f8b3 	bl	8022840 <__cxa_guard_release>
 801c6da:	4a06      	ldr	r2, [pc, #24]	@ (801c6f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c6dc:	4909      	ldr	r1, [pc, #36]	@ (801c704 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c6de:	480a      	ldr	r0, [pc, #40]	@ (801c708 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c6e0:	f006 f89b 	bl	802281a <__aeabi_atexit>
 801c6e4:	4b05      	ldr	r3, [pc, #20]	@ (801c6fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c6e6:	60eb      	str	r3, [r5, #12]
 801c6e8:	4b07      	ldr	r3, [pc, #28]	@ (801c708 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c6ea:	612b      	str	r3, [r5, #16]
 801c6ec:	bd38      	pop	{r3, r4, r5, pc}
 801c6ee:	bf00      	nop
 801c6f0:	2402543c 	.word	0x2402543c
 801c6f4:	24000000 	.word	0x24000000
 801c6f8:	08019919 	.word	0x08019919
 801c6fc:	240000a8 	.word	0x240000a8
 801c700:	24025440 	.word	0x24025440
 801c704:	08019917 	.word	0x08019917
 801c708:	240000ac 	.word	0x240000ac

0801c70c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c70c:	b510      	push	{r4, lr}
 801c70e:	4604      	mov	r4, r0
 801c710:	f7ff ff88 	bl	801c624 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c714:	4620      	mov	r0, r4
 801c716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c71a:	f7ff bfbd 	b.w	801c698 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c720 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c720:	b538      	push	{r3, r4, r5, lr}
 801c722:	4c15      	ldr	r4, [pc, #84]	@ (801c778 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c724:	4605      	mov	r5, r0
 801c726:	7823      	ldrb	r3, [r4, #0]
 801c728:	f3bf 8f5b 	dmb	ish
 801c72c:	07da      	lsls	r2, r3, #31
 801c72e:	d40b      	bmi.n	801c748 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c730:	4620      	mov	r0, r4
 801c732:	f006 f879 	bl	8022828 <__cxa_guard_acquire>
 801c736:	b138      	cbz	r0, 801c748 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c738:	4620      	mov	r0, r4
 801c73a:	f006 f881 	bl	8022840 <__cxa_guard_release>
 801c73e:	4a0f      	ldr	r2, [pc, #60]	@ (801c77c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c740:	490f      	ldr	r1, [pc, #60]	@ (801c780 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c742:	4810      	ldr	r0, [pc, #64]	@ (801c784 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c744:	f006 f869 	bl	802281a <__aeabi_atexit>
 801c748:	4c0f      	ldr	r4, [pc, #60]	@ (801c788 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c74a:	7823      	ldrb	r3, [r4, #0]
 801c74c:	f3bf 8f5b 	dmb	ish
 801c750:	07db      	lsls	r3, r3, #31
 801c752:	d40b      	bmi.n	801c76c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c754:	4620      	mov	r0, r4
 801c756:	f006 f867 	bl	8022828 <__cxa_guard_acquire>
 801c75a:	b138      	cbz	r0, 801c76c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c75c:	4620      	mov	r0, r4
 801c75e:	f006 f86f 	bl	8022840 <__cxa_guard_release>
 801c762:	4a06      	ldr	r2, [pc, #24]	@ (801c77c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c764:	4909      	ldr	r1, [pc, #36]	@ (801c78c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c766:	480a      	ldr	r0, [pc, #40]	@ (801c790 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c768:	f006 f857 	bl	802281a <__aeabi_atexit>
 801c76c:	4b05      	ldr	r3, [pc, #20]	@ (801c784 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c76e:	626b      	str	r3, [r5, #36]	@ 0x24
 801c770:	4b07      	ldr	r3, [pc, #28]	@ (801c790 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c772:	62ab      	str	r3, [r5, #40]	@ 0x28
 801c774:	bd38      	pop	{r3, r4, r5, pc}
 801c776:	bf00      	nop
 801c778:	24025464 	.word	0x24025464
 801c77c:	24000000 	.word	0x24000000
 801c780:	0801990d 	.word	0x0801990d
 801c784:	240000d0 	.word	0x240000d0
 801c788:	24025468 	.word	0x24025468
 801c78c:	0801990b 	.word	0x0801990b
 801c790:	240000d4 	.word	0x240000d4

0801c794 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c794:	b538      	push	{r3, r4, r5, lr}
 801c796:	4c15      	ldr	r4, [pc, #84]	@ (801c7ec <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c798:	4605      	mov	r5, r0
 801c79a:	7823      	ldrb	r3, [r4, #0]
 801c79c:	f3bf 8f5b 	dmb	ish
 801c7a0:	07da      	lsls	r2, r3, #31
 801c7a2:	d40b      	bmi.n	801c7bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c7a4:	4620      	mov	r0, r4
 801c7a6:	f006 f83f 	bl	8022828 <__cxa_guard_acquire>
 801c7aa:	b138      	cbz	r0, 801c7bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c7ac:	4620      	mov	r0, r4
 801c7ae:	f006 f847 	bl	8022840 <__cxa_guard_release>
 801c7b2:	4a0f      	ldr	r2, [pc, #60]	@ (801c7f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c7b4:	490f      	ldr	r1, [pc, #60]	@ (801c7f4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c7b6:	4810      	ldr	r0, [pc, #64]	@ (801c7f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c7b8:	f006 f82f 	bl	802281a <__aeabi_atexit>
 801c7bc:	4c0f      	ldr	r4, [pc, #60]	@ (801c7fc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c7be:	7823      	ldrb	r3, [r4, #0]
 801c7c0:	f3bf 8f5b 	dmb	ish
 801c7c4:	07db      	lsls	r3, r3, #31
 801c7c6:	d40b      	bmi.n	801c7e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c7c8:	4620      	mov	r0, r4
 801c7ca:	f006 f82d 	bl	8022828 <__cxa_guard_acquire>
 801c7ce:	b138      	cbz	r0, 801c7e0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c7d0:	4620      	mov	r0, r4
 801c7d2:	f006 f835 	bl	8022840 <__cxa_guard_release>
 801c7d6:	4a06      	ldr	r2, [pc, #24]	@ (801c7f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c7d8:	4909      	ldr	r1, [pc, #36]	@ (801c800 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c7da:	480a      	ldr	r0, [pc, #40]	@ (801c804 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c7dc:	f006 f81d 	bl	802281a <__aeabi_atexit>
 801c7e0:	4b05      	ldr	r3, [pc, #20]	@ (801c7f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c7e2:	61eb      	str	r3, [r5, #28]
 801c7e4:	4b07      	ldr	r3, [pc, #28]	@ (801c804 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c7e6:	622b      	str	r3, [r5, #32]
 801c7e8:	bd38      	pop	{r3, r4, r5, pc}
 801c7ea:	bf00      	nop
 801c7ec:	24025444 	.word	0x24025444
 801c7f0:	24000000 	.word	0x24000000
 801c7f4:	08019911 	.word	0x08019911
 801c7f8:	240000b0 	.word	0x240000b0
 801c7fc:	24025448 	.word	0x24025448
 801c800:	0801990f 	.word	0x0801990f
 801c804:	240000b4 	.word	0x240000b4

0801c808 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c808:	b510      	push	{r4, lr}
 801c80a:	4604      	mov	r4, r0
 801c80c:	f7ff ff88 	bl	801c720 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c810:	4620      	mov	r0, r4
 801c812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c816:	f7ff bfbd 	b.w	801c794 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c81c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c81c:	b538      	push	{r3, r4, r5, lr}
 801c81e:	4c15      	ldr	r4, [pc, #84]	@ (801c874 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c820:	4605      	mov	r5, r0
 801c822:	7823      	ldrb	r3, [r4, #0]
 801c824:	f3bf 8f5b 	dmb	ish
 801c828:	07da      	lsls	r2, r3, #31
 801c82a:	d40b      	bmi.n	801c844 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c82c:	4620      	mov	r0, r4
 801c82e:	f005 fffb 	bl	8022828 <__cxa_guard_acquire>
 801c832:	b138      	cbz	r0, 801c844 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c834:	4620      	mov	r0, r4
 801c836:	f006 f803 	bl	8022840 <__cxa_guard_release>
 801c83a:	4a0f      	ldr	r2, [pc, #60]	@ (801c878 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c83c:	490f      	ldr	r1, [pc, #60]	@ (801c87c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c83e:	4810      	ldr	r0, [pc, #64]	@ (801c880 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c840:	f005 ffeb 	bl	802281a <__aeabi_atexit>
 801c844:	4c0f      	ldr	r4, [pc, #60]	@ (801c884 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c846:	7823      	ldrb	r3, [r4, #0]
 801c848:	f3bf 8f5b 	dmb	ish
 801c84c:	07db      	lsls	r3, r3, #31
 801c84e:	d40b      	bmi.n	801c868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c850:	4620      	mov	r0, r4
 801c852:	f005 ffe9 	bl	8022828 <__cxa_guard_acquire>
 801c856:	b138      	cbz	r0, 801c868 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c858:	4620      	mov	r0, r4
 801c85a:	f005 fff1 	bl	8022840 <__cxa_guard_release>
 801c85e:	4a06      	ldr	r2, [pc, #24]	@ (801c878 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c860:	4909      	ldr	r1, [pc, #36]	@ (801c888 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c862:	480a      	ldr	r0, [pc, #40]	@ (801c88c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c864:	f005 ffd9 	bl	802281a <__aeabi_atexit>
 801c868:	4b05      	ldr	r3, [pc, #20]	@ (801c880 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c86a:	636b      	str	r3, [r5, #52]	@ 0x34
 801c86c:	4b07      	ldr	r3, [pc, #28]	@ (801c88c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c86e:	63ab      	str	r3, [r5, #56]	@ 0x38
 801c870:	bd38      	pop	{r3, r4, r5, pc}
 801c872:	bf00      	nop
 801c874:	2402544c 	.word	0x2402544c
 801c878:	24000000 	.word	0x24000000
 801c87c:	08019905 	.word	0x08019905
 801c880:	240000b8 	.word	0x240000b8
 801c884:	24025450 	.word	0x24025450
 801c888:	08019903 	.word	0x08019903
 801c88c:	240000bc 	.word	0x240000bc

0801c890 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c890:	b538      	push	{r3, r4, r5, lr}
 801c892:	4c15      	ldr	r4, [pc, #84]	@ (801c8e8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c894:	4605      	mov	r5, r0
 801c896:	7823      	ldrb	r3, [r4, #0]
 801c898:	f3bf 8f5b 	dmb	ish
 801c89c:	07da      	lsls	r2, r3, #31
 801c89e:	d40b      	bmi.n	801c8b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f005 ffc1 	bl	8022828 <__cxa_guard_acquire>
 801c8a6:	b138      	cbz	r0, 801c8b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c8a8:	4620      	mov	r0, r4
 801c8aa:	f005 ffc9 	bl	8022840 <__cxa_guard_release>
 801c8ae:	4a0f      	ldr	r2, [pc, #60]	@ (801c8ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c8b0:	490f      	ldr	r1, [pc, #60]	@ (801c8f0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c8b2:	4810      	ldr	r0, [pc, #64]	@ (801c8f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c8b4:	f005 ffb1 	bl	802281a <__aeabi_atexit>
 801c8b8:	4c0f      	ldr	r4, [pc, #60]	@ (801c8f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c8ba:	7823      	ldrb	r3, [r4, #0]
 801c8bc:	f3bf 8f5b 	dmb	ish
 801c8c0:	07db      	lsls	r3, r3, #31
 801c8c2:	d40b      	bmi.n	801c8dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c8c4:	4620      	mov	r0, r4
 801c8c6:	f005 ffaf 	bl	8022828 <__cxa_guard_acquire>
 801c8ca:	b138      	cbz	r0, 801c8dc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c8cc:	4620      	mov	r0, r4
 801c8ce:	f005 ffb7 	bl	8022840 <__cxa_guard_release>
 801c8d2:	4a06      	ldr	r2, [pc, #24]	@ (801c8ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c8d4:	4909      	ldr	r1, [pc, #36]	@ (801c8fc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c8d6:	480a      	ldr	r0, [pc, #40]	@ (801c900 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c8d8:	f005 ff9f 	bl	802281a <__aeabi_atexit>
 801c8dc:	4b05      	ldr	r3, [pc, #20]	@ (801c8f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c8de:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801c8e0:	4b07      	ldr	r3, [pc, #28]	@ (801c900 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c8e2:	632b      	str	r3, [r5, #48]	@ 0x30
 801c8e4:	bd38      	pop	{r3, r4, r5, pc}
 801c8e6:	bf00      	nop
 801c8e8:	24025424 	.word	0x24025424
 801c8ec:	24000000 	.word	0x24000000
 801c8f0:	08019909 	.word	0x08019909
 801c8f4:	24000090 	.word	0x24000090
 801c8f8:	24025428 	.word	0x24025428
 801c8fc:	08019907 	.word	0x08019907
 801c900:	24000094 	.word	0x24000094

0801c904 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c904:	b510      	push	{r4, lr}
 801c906:	4604      	mov	r4, r0
 801c908:	f7ff ff88 	bl	801c81c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c90c:	4620      	mov	r0, r4
 801c90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c912:	f7ff bfbd 	b.w	801c890 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c918 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c918:	b538      	push	{r3, r4, r5, lr}
 801c91a:	4c15      	ldr	r4, [pc, #84]	@ (801c970 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c91c:	4605      	mov	r5, r0
 801c91e:	7823      	ldrb	r3, [r4, #0]
 801c920:	f3bf 8f5b 	dmb	ish
 801c924:	07da      	lsls	r2, r3, #31
 801c926:	d40b      	bmi.n	801c940 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c928:	4620      	mov	r0, r4
 801c92a:	f005 ff7d 	bl	8022828 <__cxa_guard_acquire>
 801c92e:	b138      	cbz	r0, 801c940 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c930:	4620      	mov	r0, r4
 801c932:	f005 ff85 	bl	8022840 <__cxa_guard_release>
 801c936:	4a0f      	ldr	r2, [pc, #60]	@ (801c974 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c938:	490f      	ldr	r1, [pc, #60]	@ (801c978 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c93a:	4810      	ldr	r0, [pc, #64]	@ (801c97c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c93c:	f005 ff6d 	bl	802281a <__aeabi_atexit>
 801c940:	4c0f      	ldr	r4, [pc, #60]	@ (801c980 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c942:	7823      	ldrb	r3, [r4, #0]
 801c944:	f3bf 8f5b 	dmb	ish
 801c948:	07db      	lsls	r3, r3, #31
 801c94a:	d40b      	bmi.n	801c964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c94c:	4620      	mov	r0, r4
 801c94e:	f005 ff6b 	bl	8022828 <__cxa_guard_acquire>
 801c952:	b138      	cbz	r0, 801c964 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c954:	4620      	mov	r0, r4
 801c956:	f005 ff73 	bl	8022840 <__cxa_guard_release>
 801c95a:	4a06      	ldr	r2, [pc, #24]	@ (801c974 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c95c:	4909      	ldr	r1, [pc, #36]	@ (801c984 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c95e:	480a      	ldr	r0, [pc, #40]	@ (801c988 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c960:	f005 ff5b 	bl	802281a <__aeabi_atexit>
 801c964:	4b05      	ldr	r3, [pc, #20]	@ (801c97c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c966:	646b      	str	r3, [r5, #68]	@ 0x44
 801c968:	4b07      	ldr	r3, [pc, #28]	@ (801c988 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c96a:	64ab      	str	r3, [r5, #72]	@ 0x48
 801c96c:	bd38      	pop	{r3, r4, r5, pc}
 801c96e:	bf00      	nop
 801c970:	24025454 	.word	0x24025454
 801c974:	24000000 	.word	0x24000000
 801c978:	080198fd 	.word	0x080198fd
 801c97c:	240000c0 	.word	0x240000c0
 801c980:	24025458 	.word	0x24025458
 801c984:	080198fb 	.word	0x080198fb
 801c988:	240000c4 	.word	0x240000c4

0801c98c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c98c:	b538      	push	{r3, r4, r5, lr}
 801c98e:	4c15      	ldr	r4, [pc, #84]	@ (801c9e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c990:	4605      	mov	r5, r0
 801c992:	7823      	ldrb	r3, [r4, #0]
 801c994:	f3bf 8f5b 	dmb	ish
 801c998:	07da      	lsls	r2, r3, #31
 801c99a:	d40b      	bmi.n	801c9b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c99c:	4620      	mov	r0, r4
 801c99e:	f005 ff43 	bl	8022828 <__cxa_guard_acquire>
 801c9a2:	b138      	cbz	r0, 801c9b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	f005 ff4b 	bl	8022840 <__cxa_guard_release>
 801c9aa:	4a0f      	ldr	r2, [pc, #60]	@ (801c9e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c9ac:	490f      	ldr	r1, [pc, #60]	@ (801c9ec <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c9ae:	4810      	ldr	r0, [pc, #64]	@ (801c9f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c9b0:	f005 ff33 	bl	802281a <__aeabi_atexit>
 801c9b4:	4c0f      	ldr	r4, [pc, #60]	@ (801c9f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c9b6:	7823      	ldrb	r3, [r4, #0]
 801c9b8:	f3bf 8f5b 	dmb	ish
 801c9bc:	07db      	lsls	r3, r3, #31
 801c9be:	d40b      	bmi.n	801c9d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c9c0:	4620      	mov	r0, r4
 801c9c2:	f005 ff31 	bl	8022828 <__cxa_guard_acquire>
 801c9c6:	b138      	cbz	r0, 801c9d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c9c8:	4620      	mov	r0, r4
 801c9ca:	f005 ff39 	bl	8022840 <__cxa_guard_release>
 801c9ce:	4a06      	ldr	r2, [pc, #24]	@ (801c9e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c9d0:	4909      	ldr	r1, [pc, #36]	@ (801c9f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c9d2:	480a      	ldr	r0, [pc, #40]	@ (801c9fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c9d4:	f005 ff21 	bl	802281a <__aeabi_atexit>
 801c9d8:	4b05      	ldr	r3, [pc, #20]	@ (801c9f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c9da:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801c9dc:	4b07      	ldr	r3, [pc, #28]	@ (801c9fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c9de:	642b      	str	r3, [r5, #64]	@ 0x40
 801c9e0:	bd38      	pop	{r3, r4, r5, pc}
 801c9e2:	bf00      	nop
 801c9e4:	24025434 	.word	0x24025434
 801c9e8:	24000000 	.word	0x24000000
 801c9ec:	08019901 	.word	0x08019901
 801c9f0:	240000a0 	.word	0x240000a0
 801c9f4:	24025438 	.word	0x24025438
 801c9f8:	080198ff 	.word	0x080198ff
 801c9fc:	240000a4 	.word	0x240000a4

0801ca00 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ca00:	b510      	push	{r4, lr}
 801ca02:	4604      	mov	r4, r0
 801ca04:	f7ff ff88 	bl	801c918 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ca08:	4620      	mov	r0, r4
 801ca0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca0e:	f7ff bfbd 	b.w	801c98c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ca14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ca14:	b538      	push	{r3, r4, r5, lr}
 801ca16:	4c15      	ldr	r4, [pc, #84]	@ (801ca6c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ca18:	4605      	mov	r5, r0
 801ca1a:	7823      	ldrb	r3, [r4, #0]
 801ca1c:	f3bf 8f5b 	dmb	ish
 801ca20:	07da      	lsls	r2, r3, #31
 801ca22:	d40b      	bmi.n	801ca3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ca24:	4620      	mov	r0, r4
 801ca26:	f005 feff 	bl	8022828 <__cxa_guard_acquire>
 801ca2a:	b138      	cbz	r0, 801ca3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ca2c:	4620      	mov	r0, r4
 801ca2e:	f005 ff07 	bl	8022840 <__cxa_guard_release>
 801ca32:	4a0f      	ldr	r2, [pc, #60]	@ (801ca70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ca34:	490f      	ldr	r1, [pc, #60]	@ (801ca74 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ca36:	4810      	ldr	r0, [pc, #64]	@ (801ca78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ca38:	f005 feef 	bl	802281a <__aeabi_atexit>
 801ca3c:	4c0f      	ldr	r4, [pc, #60]	@ (801ca7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ca3e:	7823      	ldrb	r3, [r4, #0]
 801ca40:	f3bf 8f5b 	dmb	ish
 801ca44:	07db      	lsls	r3, r3, #31
 801ca46:	d40b      	bmi.n	801ca60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ca48:	4620      	mov	r0, r4
 801ca4a:	f005 feed 	bl	8022828 <__cxa_guard_acquire>
 801ca4e:	b138      	cbz	r0, 801ca60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801ca50:	4620      	mov	r0, r4
 801ca52:	f005 fef5 	bl	8022840 <__cxa_guard_release>
 801ca56:	4a06      	ldr	r2, [pc, #24]	@ (801ca70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ca58:	4909      	ldr	r1, [pc, #36]	@ (801ca80 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ca5a:	480a      	ldr	r0, [pc, #40]	@ (801ca84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ca5c:	f005 fedd 	bl	802281a <__aeabi_atexit>
 801ca60:	4b05      	ldr	r3, [pc, #20]	@ (801ca78 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ca62:	656b      	str	r3, [r5, #84]	@ 0x54
 801ca64:	4b07      	ldr	r3, [pc, #28]	@ (801ca84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801ca66:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ca68:	bd38      	pop	{r3, r4, r5, pc}
 801ca6a:	bf00      	nop
 801ca6c:	2402542c 	.word	0x2402542c
 801ca70:	24000000 	.word	0x24000000
 801ca74:	080198f5 	.word	0x080198f5
 801ca78:	24000098 	.word	0x24000098
 801ca7c:	24025430 	.word	0x24025430
 801ca80:	080198f3 	.word	0x080198f3
 801ca84:	2400009c 	.word	0x2400009c

0801ca88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ca88:	b538      	push	{r3, r4, r5, lr}
 801ca8a:	4c15      	ldr	r4, [pc, #84]	@ (801cae0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ca8c:	4605      	mov	r5, r0
 801ca8e:	7823      	ldrb	r3, [r4, #0]
 801ca90:	f3bf 8f5b 	dmb	ish
 801ca94:	07da      	lsls	r2, r3, #31
 801ca96:	d40b      	bmi.n	801cab0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801ca98:	4620      	mov	r0, r4
 801ca9a:	f005 fec5 	bl	8022828 <__cxa_guard_acquire>
 801ca9e:	b138      	cbz	r0, 801cab0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801caa0:	4620      	mov	r0, r4
 801caa2:	f005 fecd 	bl	8022840 <__cxa_guard_release>
 801caa6:	4a0f      	ldr	r2, [pc, #60]	@ (801cae4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801caa8:	490f      	ldr	r1, [pc, #60]	@ (801cae8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801caaa:	4810      	ldr	r0, [pc, #64]	@ (801caec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801caac:	f005 feb5 	bl	802281a <__aeabi_atexit>
 801cab0:	4c0f      	ldr	r4, [pc, #60]	@ (801caf0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801cab2:	7823      	ldrb	r3, [r4, #0]
 801cab4:	f3bf 8f5b 	dmb	ish
 801cab8:	07db      	lsls	r3, r3, #31
 801caba:	d40b      	bmi.n	801cad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cabc:	4620      	mov	r0, r4
 801cabe:	f005 feb3 	bl	8022828 <__cxa_guard_acquire>
 801cac2:	b138      	cbz	r0, 801cad4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cac4:	4620      	mov	r0, r4
 801cac6:	f005 febb 	bl	8022840 <__cxa_guard_release>
 801caca:	4a06      	ldr	r2, [pc, #24]	@ (801cae4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cacc:	4909      	ldr	r1, [pc, #36]	@ (801caf4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801cace:	480a      	ldr	r0, [pc, #40]	@ (801caf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cad0:	f005 fea3 	bl	802281a <__aeabi_atexit>
 801cad4:	4b05      	ldr	r3, [pc, #20]	@ (801caec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cad6:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801cad8:	4b07      	ldr	r3, [pc, #28]	@ (801caf8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cada:	652b      	str	r3, [r5, #80]	@ 0x50
 801cadc:	bd38      	pop	{r3, r4, r5, pc}
 801cade:	bf00      	nop
 801cae0:	2402541c 	.word	0x2402541c
 801cae4:	24000000 	.word	0x24000000
 801cae8:	080198f9 	.word	0x080198f9
 801caec:	24000088 	.word	0x24000088
 801caf0:	24025420 	.word	0x24025420
 801caf4:	080198f7 	.word	0x080198f7
 801caf8:	2400008c 	.word	0x2400008c

0801cafc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801cafc:	b510      	push	{r4, lr}
 801cafe:	4604      	mov	r4, r0
 801cb00:	f7ff ff88 	bl	801ca14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801cb04:	4620      	mov	r0, r4
 801cb06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb0a:	f7ff bfbd 	b.w	801ca88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801cb0e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801cb0e:	b510      	push	{r4, lr}
 801cb10:	4604      	mov	r4, r0
 801cb12:	f7ff fff3 	bl	801cafc <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801cb16:	4620      	mov	r0, r4
 801cb18:	f7ff ff72 	bl	801ca00 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	f7ff fe73 	bl	801c808 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801cb22:	4620      	mov	r0, r4
 801cb24:	f7ff fdf2 	bl	801c70c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801cb28:	4620      	mov	r0, r4
 801cb2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb2e:	f7ff bee9 	b.w	801c904 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801cb34 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801cb34:	b538      	push	{r3, r4, r5, lr}
 801cb36:	4c0b      	ldr	r4, [pc, #44]	@ (801cb64 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801cb38:	4605      	mov	r5, r0
 801cb3a:	7823      	ldrb	r3, [r4, #0]
 801cb3c:	f3bf 8f5b 	dmb	ish
 801cb40:	07db      	lsls	r3, r3, #31
 801cb42:	d40b      	bmi.n	801cb5c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cb44:	4620      	mov	r0, r4
 801cb46:	f005 fe6f 	bl	8022828 <__cxa_guard_acquire>
 801cb4a:	b138      	cbz	r0, 801cb5c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	f005 fe77 	bl	8022840 <__cxa_guard_release>
 801cb52:	4a05      	ldr	r2, [pc, #20]	@ (801cb68 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801cb54:	4905      	ldr	r1, [pc, #20]	@ (801cb6c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801cb56:	4806      	ldr	r0, [pc, #24]	@ (801cb70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cb58:	f005 fe5f 	bl	802281a <__aeabi_atexit>
 801cb5c:	4b04      	ldr	r3, [pc, #16]	@ (801cb70 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801cb5e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801cb60:	bd38      	pop	{r3, r4, r5, pc}
 801cb62:	bf00      	nop
 801cb64:	24025410 	.word	0x24025410
 801cb68:	24000000 	.word	0x24000000
 801cb6c:	080198f1 	.word	0x080198f1
 801cb70:	24000080 	.word	0x24000080

0801cb74 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801cb74:	b538      	push	{r3, r4, r5, lr}
 801cb76:	4c0b      	ldr	r4, [pc, #44]	@ (801cba4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801cb78:	4605      	mov	r5, r0
 801cb7a:	7823      	ldrb	r3, [r4, #0]
 801cb7c:	f3bf 8f5b 	dmb	ish
 801cb80:	07db      	lsls	r3, r3, #31
 801cb82:	d40b      	bmi.n	801cb9c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cb84:	4620      	mov	r0, r4
 801cb86:	f005 fe4f 	bl	8022828 <__cxa_guard_acquire>
 801cb8a:	b138      	cbz	r0, 801cb9c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801cb8c:	4620      	mov	r0, r4
 801cb8e:	f005 fe57 	bl	8022840 <__cxa_guard_release>
 801cb92:	4a05      	ldr	r2, [pc, #20]	@ (801cba8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801cb94:	4905      	ldr	r1, [pc, #20]	@ (801cbac <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801cb96:	4806      	ldr	r0, [pc, #24]	@ (801cbb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cb98:	f005 fe3f 	bl	802281a <__aeabi_atexit>
 801cb9c:	4b04      	ldr	r3, [pc, #16]	@ (801cbb0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801cb9e:	662b      	str	r3, [r5, #96]	@ 0x60
 801cba0:	bd38      	pop	{r3, r4, r5, pc}
 801cba2:	bf00      	nop
 801cba4:	24025414 	.word	0x24025414
 801cba8:	24000000 	.word	0x24000000
 801cbac:	080198ef 	.word	0x080198ef
 801cbb0:	24000084 	.word	0x24000084

0801cbb4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801cbb4:	b570      	push	{r4, r5, r6, lr}
 801cbb6:	4d0c      	ldr	r5, [pc, #48]	@ (801cbe8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801cbb8:	4606      	mov	r6, r0
 801cbba:	4c0c      	ldr	r4, [pc, #48]	@ (801cbec <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801cbbc:	782b      	ldrb	r3, [r5, #0]
 801cbbe:	f3bf 8f5b 	dmb	ish
 801cbc2:	f013 0f01 	tst.w	r3, #1
 801cbc6:	d10d      	bne.n	801cbe4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cbc8:	4628      	mov	r0, r5
 801cbca:	f005 fe2d 	bl	8022828 <__cxa_guard_acquire>
 801cbce:	b148      	cbz	r0, 801cbe4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801cbd0:	4b07      	ldr	r3, [pc, #28]	@ (801cbf0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801cbd2:	4628      	mov	r0, r5
 801cbd4:	6023      	str	r3, [r4, #0]
 801cbd6:	f005 fe33 	bl	8022840 <__cxa_guard_release>
 801cbda:	4a06      	ldr	r2, [pc, #24]	@ (801cbf4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801cbdc:	4620      	mov	r0, r4
 801cbde:	4906      	ldr	r1, [pc, #24]	@ (801cbf8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801cbe0:	f005 fe1b 	bl	802281a <__aeabi_atexit>
 801cbe4:	6674      	str	r4, [r6, #100]	@ 0x64
 801cbe6:	bd70      	pop	{r4, r5, r6, pc}
 801cbe8:	24025418 	.word	0x24025418
 801cbec:	24025570 	.word	0x24025570
 801cbf0:	0802708c 	.word	0x0802708c
 801cbf4:	24000000 	.word	0x24000000
 801cbf8:	080198ed 	.word	0x080198ed

0801cbfc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801cbfc:	b510      	push	{r4, lr}
 801cbfe:	4604      	mov	r4, r0
 801cc00:	f7ff ff98 	bl	801cb34 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801cc04:	4620      	mov	r0, r4
 801cc06:	f7ff ffb5 	bl	801cb74 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801cc0a:	4620      	mov	r0, r4
 801cc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc10:	f7ff bfd0 	b.w	801cbb4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801cc14 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801cc14:	b570      	push	{r4, r5, r6, lr}
 801cc16:	4d0c      	ldr	r5, [pc, #48]	@ (801cc48 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801cc18:	4606      	mov	r6, r0
 801cc1a:	4c0c      	ldr	r4, [pc, #48]	@ (801cc4c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801cc1c:	782b      	ldrb	r3, [r5, #0]
 801cc1e:	f3bf 8f5b 	dmb	ish
 801cc22:	f013 0f01 	tst.w	r3, #1
 801cc26:	d10d      	bne.n	801cc44 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cc28:	4628      	mov	r0, r5
 801cc2a:	f005 fdfd 	bl	8022828 <__cxa_guard_acquire>
 801cc2e:	b148      	cbz	r0, 801cc44 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801cc30:	4b07      	ldr	r3, [pc, #28]	@ (801cc50 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801cc32:	4628      	mov	r0, r5
 801cc34:	6023      	str	r3, [r4, #0]
 801cc36:	f005 fe03 	bl	8022840 <__cxa_guard_release>
 801cc3a:	4a06      	ldr	r2, [pc, #24]	@ (801cc54 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801cc3c:	4620      	mov	r0, r4
 801cc3e:	4906      	ldr	r1, [pc, #24]	@ (801cc58 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801cc40:	f005 fdeb 	bl	802281a <__aeabi_atexit>
 801cc44:	66b4      	str	r4, [r6, #104]	@ 0x68
 801cc46:	bd70      	pop	{r4, r5, r6, pc}
 801cc48:	2402540c 	.word	0x2402540c
 801cc4c:	2402546c 	.word	0x2402546c
 801cc50:	080270a4 	.word	0x080270a4
 801cc54:	24000000 	.word	0x24000000
 801cc58:	080198eb 	.word	0x080198eb

0801cc5c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801cc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc60:	b087      	sub	sp, #28
 801cc62:	788d      	ldrb	r5, [r1, #2]
 801cc64:	f891 9000 	ldrb.w	r9, [r1]
 801cc68:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801cc6c:	9501      	str	r5, [sp, #4]
 801cc6e:	784d      	ldrb	r5, [r1, #1]
 801cc70:	9203      	str	r2, [sp, #12]
 801cc72:	9502      	str	r5, [sp, #8]
 801cc74:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801cc78:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801cc7c:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801cc80:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801cc84:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801cc88:	fb06 0708 	mla	r7, r6, r8, r0
 801cc8c:	2e00      	cmp	r6, #0
 801cc8e:	eb02 0a07 	add.w	sl, r2, r7
 801cc92:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801cc96:	9d01      	ldr	r5, [sp, #4]
 801cc98:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801cc9c:	ea45 0509 	orr.w	r5, r5, r9
 801cca0:	9505      	str	r5, [sp, #20]
 801cca2:	f2c0 80b2 	blt.w	801ce0a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801cca6:	45b3      	cmp	fp, r6
 801cca8:	f340 80af 	ble.w	801ce0a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801ccac:	2800      	cmp	r0, #0
 801ccae:	f2c0 80aa 	blt.w	801ce06 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ccb2:	4580      	cmp	r8, r0
 801ccb4:	f340 80a7 	ble.w	801ce06 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ccb8:	9a03      	ldr	r2, [sp, #12]
 801ccba:	5dd7      	ldrb	r7, [r2, r7]
 801ccbc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ccc0:	441f      	add	r7, r3
 801ccc2:	1c42      	adds	r2, r0, #1
 801ccc4:	f100 80a4 	bmi.w	801ce10 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ccc8:	4590      	cmp	r8, r2
 801ccca:	f340 80a1 	ble.w	801ce10 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ccce:	2c00      	cmp	r4, #0
 801ccd0:	f000 809e 	beq.w	801ce10 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ccd4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ccd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccdc:	441d      	add	r5, r3
 801ccde:	3601      	adds	r6, #1
 801cce0:	f100 809a 	bmi.w	801ce18 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801cce4:	45b3      	cmp	fp, r6
 801cce6:	f340 8097 	ble.w	801ce18 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ccea:	f1bc 0f00 	cmp.w	ip, #0
 801ccee:	f000 8093 	beq.w	801ce18 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ccf2:	2800      	cmp	r0, #0
 801ccf4:	f2c0 808e 	blt.w	801ce14 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801ccf8:	4580      	cmp	r8, r0
 801ccfa:	f340 808b 	ble.w	801ce14 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801ccfe:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801cd02:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cd06:	441e      	add	r6, r3
 801cd08:	3001      	adds	r0, #1
 801cd0a:	f100 8088 	bmi.w	801ce1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd0e:	4580      	cmp	r8, r0
 801cd10:	f340 8085 	ble.w	801ce1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd14:	2c00      	cmp	r4, #0
 801cd16:	f000 8082 	beq.w	801ce1e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801cd1a:	44d0      	add	r8, sl
 801cd1c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cd20:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd24:	4413      	add	r3, r2
 801cd26:	b2a4      	uxth	r4, r4
 801cd28:	f895 a000 	ldrb.w	sl, [r5]
 801cd2c:	fa1f fc8c 	uxth.w	ip, ip
 801cd30:	fb04 fb0c 	mul.w	fp, r4, ip
 801cd34:	0124      	lsls	r4, r4, #4
 801cd36:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801cd3a:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801cd3e:	eba4 040b 	sub.w	r4, r4, fp
 801cd42:	fa1f f08c 	uxth.w	r0, ip
 801cd46:	b2a2      	uxth	r2, r4
 801cd48:	783c      	ldrb	r4, [r7, #0]
 801cd4a:	eba8 0800 	sub.w	r8, r8, r0
 801cd4e:	fa1f fc8e 	uxth.w	ip, lr
 801cd52:	fb02 fa0a 	mul.w	sl, r2, sl
 801cd56:	ea6f 0e0e 	mvn.w	lr, lr
 801cd5a:	fa1f f888 	uxth.w	r8, r8
 801cd5e:	fa5f fe8e 	uxtb.w	lr, lr
 801cd62:	fb08 aa04 	mla	sl, r8, r4, sl
 801cd66:	7834      	ldrb	r4, [r6, #0]
 801cd68:	fb19 f90e 	smulbb	r9, r9, lr
 801cd6c:	fb00 aa04 	mla	sl, r0, r4, sl
 801cd70:	781c      	ldrb	r4, [r3, #0]
 801cd72:	fb0b a404 	mla	r4, fp, r4, sl
 801cd76:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cd7a:	fb04 990c 	mla	r9, r4, ip, r9
 801cd7e:	fa1f f989 	uxth.w	r9, r9
 801cd82:	f109 0401 	add.w	r4, r9, #1
 801cd86:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801cd8a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd8e:	f881 9000 	strb.w	r9, [r1]
 801cd92:	f895 9001 	ldrb.w	r9, [r5, #1]
 801cd96:	787c      	ldrb	r4, [r7, #1]
 801cd98:	fb02 f909 	mul.w	r9, r2, r9
 801cd9c:	fb08 9904 	mla	r9, r8, r4, r9
 801cda0:	7874      	ldrb	r4, [r6, #1]
 801cda2:	fb00 9904 	mla	r9, r0, r4, r9
 801cda6:	785c      	ldrb	r4, [r3, #1]
 801cda8:	fb0b 9404 	mla	r4, fp, r4, r9
 801cdac:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801cdb0:	9c02      	ldr	r4, [sp, #8]
 801cdb2:	fb14 f90e 	smulbb	r9, r4, lr
 801cdb6:	fb0a 940c 	mla	r4, sl, ip, r9
 801cdba:	b2a4      	uxth	r4, r4
 801cdbc:	f104 0901 	add.w	r9, r4, #1
 801cdc0:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801cdc4:	1224      	asrs	r4, r4, #8
 801cdc6:	704c      	strb	r4, [r1, #1]
 801cdc8:	78ad      	ldrb	r5, [r5, #2]
 801cdca:	78bc      	ldrb	r4, [r7, #2]
 801cdcc:	436a      	muls	r2, r5
 801cdce:	789b      	ldrb	r3, [r3, #2]
 801cdd0:	fb08 2204 	mla	r2, r8, r4, r2
 801cdd4:	78b4      	ldrb	r4, [r6, #2]
 801cdd6:	fb00 2004 	mla	r0, r0, r4, r2
 801cdda:	fb0b 0b03 	mla	fp, fp, r3, r0
 801cdde:	9b01      	ldr	r3, [sp, #4]
 801cde0:	fb13 fe0e 	smulbb	lr, r3, lr
 801cde4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801cde8:	fb0b ec0c 	mla	ip, fp, ip, lr
 801cdec:	fa1f fc8c 	uxth.w	ip, ip
 801cdf0:	f10c 0e01 	add.w	lr, ip, #1
 801cdf4:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cdf8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cdfc:	f881 c002 	strb.w	ip, [r1, #2]
 801ce00:	b007      	add	sp, #28
 801ce02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce06:	af05      	add	r7, sp, #20
 801ce08:	e75b      	b.n	801ccc2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ce0a:	ad05      	add	r5, sp, #20
 801ce0c:	462f      	mov	r7, r5
 801ce0e:	e766      	b.n	801ccde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ce10:	ad05      	add	r5, sp, #20
 801ce12:	e764      	b.n	801ccde <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ce14:	ae05      	add	r6, sp, #20
 801ce16:	e777      	b.n	801cd08 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ce18:	ab05      	add	r3, sp, #20
 801ce1a:	461e      	mov	r6, r3
 801ce1c:	e783      	b.n	801cd26 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ce1e:	ab05      	add	r3, sp, #20
 801ce20:	e781      	b.n	801cd26 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ce22 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce26:	b093      	sub	sp, #76	@ 0x4c
 801ce28:	9210      	str	r2, [sp, #64]	@ 0x40
 801ce2a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ce2e:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801ce32:	9011      	str	r0, [sp, #68]	@ 0x44
 801ce34:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce36:	6850      	ldr	r0, [r2, #4]
 801ce38:	910d      	str	r1, [sp, #52]	@ 0x34
 801ce3a:	6812      	ldr	r2, [r2, #0]
 801ce3c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ce40:	fb00 1303 	mla	r3, r0, r3, r1
 801ce44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce48:	18d3      	adds	r3, r2, r3
 801ce4a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce54:	685c      	ldr	r4, [r3, #4]
 801ce56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce58:	3404      	adds	r4, #4
 801ce5a:	43db      	mvns	r3, r3
 801ce5c:	b2db      	uxtb	r3, r3
 801ce5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ce60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	dc03      	bgt.n	801ce6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ce66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	f340 8250 	ble.w	801d30e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801ce6e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce70:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ce74:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ce78:	1e48      	subs	r0, r1, #1
 801ce7a:	1e55      	subs	r5, r2, #1
 801ce7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	f340 80ee 	ble.w	801d060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801ce84:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801ce86:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ce88:	1436      	asrs	r6, r6, #16
 801ce8a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ce8e:	d406      	bmi.n	801ce9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ce90:	4286      	cmp	r6, r0
 801ce92:	da04      	bge.n	801ce9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	db02      	blt.n	801ce9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ce98:	42ab      	cmp	r3, r5
 801ce9a:	f2c0 80e2 	blt.w	801d062 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ce9e:	3601      	adds	r6, #1
 801cea0:	f100 80cf 	bmi.w	801d042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cea4:	42b1      	cmp	r1, r6
 801cea6:	f2c0 80cc 	blt.w	801d042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ceaa:	3301      	adds	r3, #1
 801ceac:	f100 80c9 	bmi.w	801d042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ceb0:	429a      	cmp	r2, r3
 801ceb2:	f2c0 80c6 	blt.w	801d042 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801ceb6:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801ceba:	f1bb 0f00 	cmp.w	fp, #0
 801cebe:	f340 80f1 	ble.w	801d0a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801cec2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cec4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cec6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801cec8:	141d      	asrs	r5, r3, #16
 801ceca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cecc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ced0:	68c7      	ldr	r7, [r0, #12]
 801ced2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ced4:	1418      	asrs	r0, r3, #16
 801ced6:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801ceda:	6892      	ldr	r2, [r2, #8]
 801cedc:	f100 8137 	bmi.w	801d14e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cee0:	f102 3cff 	add.w	ip, r2, #4294967295
 801cee4:	4560      	cmp	r0, ip
 801cee6:	f280 8132 	bge.w	801d14e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801ceea:	2d00      	cmp	r5, #0
 801ceec:	f2c0 812f 	blt.w	801d14e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cef0:	f107 3cff 	add.w	ip, r7, #4294967295
 801cef4:	4565      	cmp	r5, ip
 801cef6:	f280 812a 	bge.w	801d14e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cefa:	b212      	sxth	r2, r2
 801cefc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cefe:	fb05 0002 	mla	r0, r5, r2, r0
 801cf02:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cf04:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cf08:	4405      	add	r5, r0
 801cf0a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cf0e:	eb04 0e0c 	add.w	lr, r4, ip
 801cf12:	f1b8 0f00 	cmp.w	r8, #0
 801cf16:	f000 810c 	beq.w	801d132 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801cf1a:	786f      	ldrb	r7, [r5, #1]
 801cf1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cf20:	4427      	add	r7, r4
 801cf22:	2900      	cmp	r1, #0
 801cf24:	f000 810d 	beq.w	801d142 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801cf28:	18a8      	adds	r0, r5, r2
 801cf2a:	5caa      	ldrb	r2, [r5, r2]
 801cf2c:	7840      	ldrb	r0, [r0, #1]
 801cf2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cf36:	4422      	add	r2, r4
 801cf38:	4420      	add	r0, r4
 801cf3a:	fa1f f388 	uxth.w	r3, r8
 801cf3e:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801cf42:	b289      	uxth	r1, r1
 801cf44:	f897 c000 	ldrb.w	ip, [r7]
 801cf48:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801cf4c:	fb03 f901 	mul.w	r9, r3, r1
 801cf50:	011b      	lsls	r3, r3, #4
 801cf52:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cf56:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801cf5a:	eba3 0309 	sub.w	r3, r3, r9
 801cf5e:	b289      	uxth	r1, r1
 801cf60:	b29b      	uxth	r3, r3
 801cf62:	eba8 0801 	sub.w	r8, r8, r1
 801cf66:	fb03 fc0c 	mul.w	ip, r3, ip
 801cf6a:	fa1f f888 	uxth.w	r8, r8
 801cf6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cf70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf72:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cf76:	f892 a000 	ldrb.w	sl, [r2]
 801cf7a:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cf7e:	f890 a000 	ldrb.w	sl, [r0]
 801cf82:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cf86:	f896 a000 	ldrb.w	sl, [r6]
 801cf8a:	fb1a fa03 	smulbb	sl, sl, r3
 801cf8e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cf92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf94:	fb0c ac05 	mla	ip, ip, r5, sl
 801cf98:	fa1f fc8c 	uxth.w	ip, ip
 801cf9c:	f10c 0a01 	add.w	sl, ip, #1
 801cfa0:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cfa4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cfa8:	f886 a000 	strb.w	sl, [r6]
 801cfac:	f897 c001 	ldrb.w	ip, [r7, #1]
 801cfb0:	f89e a001 	ldrb.w	sl, [lr, #1]
 801cfb4:	fb03 fc0c 	mul.w	ip, r3, ip
 801cfb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cfba:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cfbe:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cfc2:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cfc6:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cfca:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cfce:	f896 a001 	ldrb.w	sl, [r6, #1]
 801cfd2:	fb1a fa03 	smulbb	sl, sl, r3
 801cfd6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cfda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfdc:	fb0c ac05 	mla	ip, ip, r5, sl
 801cfe0:	fa1f fc8c 	uxth.w	ip, ip
 801cfe4:	f10c 0a01 	add.w	sl, ip, #1
 801cfe8:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801cfec:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cff0:	f886 c001 	strb.w	ip, [r6, #1]
 801cff4:	78bf      	ldrb	r7, [r7, #2]
 801cff6:	f89e c002 	ldrb.w	ip, [lr, #2]
 801cffa:	437b      	muls	r3, r7
 801cffc:	fb08 330c 	mla	r3, r8, ip, r3
 801d000:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d004:	7882      	ldrb	r2, [r0, #2]
 801d006:	fb01 310c 	mla	r1, r1, ip, r3
 801d00a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d00c:	fb09 1902 	mla	r9, r9, r2, r1
 801d010:	78b1      	ldrb	r1, [r6, #2]
 801d012:	fb11 f103 	smulbb	r1, r1, r3
 801d016:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d01a:	fb09 1505 	mla	r5, r9, r5, r1
 801d01e:	b2ad      	uxth	r5, r5
 801d020:	1c6b      	adds	r3, r5, #1
 801d022:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d026:	122d      	asrs	r5, r5, #8
 801d028:	70b5      	strb	r5, [r6, #2]
 801d02a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d02c:	3603      	adds	r6, #3
 801d02e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d030:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d034:	4413      	add	r3, r2
 801d036:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d038:	931d      	str	r3, [sp, #116]	@ 0x74
 801d03a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d03c:	4413      	add	r3, r2
 801d03e:	931e      	str	r3, [sp, #120]	@ 0x78
 801d040:	e73b      	b.n	801ceba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d042:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d044:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801d046:	4433      	add	r3, r6
 801d048:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d04a:	931d      	str	r3, [sp, #116]	@ 0x74
 801d04c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d04e:	4433      	add	r3, r6
 801d050:	931e      	str	r3, [sp, #120]	@ 0x78
 801d052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d054:	3b01      	subs	r3, #1
 801d056:	9309      	str	r3, [sp, #36]	@ 0x24
 801d058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d05a:	3303      	adds	r3, #3
 801d05c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d05e:	e70d      	b.n	801ce7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d060:	d028      	beq.n	801d0b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d064:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801d066:	3b01      	subs	r3, #1
 801d068:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d06a:	fb00 5003 	mla	r0, r0, r3, r5
 801d06e:	1400      	asrs	r0, r0, #16
 801d070:	f53f af21 	bmi.w	801ceb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d074:	3901      	subs	r1, #1
 801d076:	4288      	cmp	r0, r1
 801d078:	f6bf af1d 	bge.w	801ceb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d07c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801d07e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d080:	fb01 0303 	mla	r3, r1, r3, r0
 801d084:	141b      	asrs	r3, r3, #16
 801d086:	f53f af16 	bmi.w	801ceb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d08a:	3a01      	subs	r2, #1
 801d08c:	4293      	cmp	r3, r2
 801d08e:	f6bf af12 	bge.w	801ceb6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d094:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801d098:	1cdf      	adds	r7, r3, #3
 801d09a:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801d09e:	f1b9 0f00 	cmp.w	r9, #0
 801d0a2:	dc73      	bgt.n	801d18c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d0a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d0ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0b0:	441a      	add	r2, r3
 801d0b2:	920a      	str	r2, [sp, #40]	@ 0x28
 801d0b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	f340 8129 	ble.w	801d30e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d0bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d0c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d0c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0ca:	eef0 6a62 	vmov.f32	s13, s5
 801d0ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d0d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0da:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801d0de:	eef0 6a43 	vmov.f32	s13, s6
 801d0e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0e6:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801d0ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d102:	ee12 2a90 	vmov	r2, s5
 801d106:	eef0 2a47 	vmov.f32	s5, s14
 801d10a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d10e:	ee13 2a10 	vmov	r2, s6
 801d112:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d114:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d116:	eeb0 3a67 	vmov.f32	s6, s15
 801d11a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d11e:	9320      	str	r3, [sp, #128]	@ 0x80
 801d120:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d122:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d124:	3b01      	subs	r3, #1
 801d126:	930d      	str	r3, [sp, #52]	@ 0x34
 801d128:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d12a:	bf08      	it	eq
 801d12c:	4613      	moveq	r3, r2
 801d12e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d130:	e696      	b.n	801ce60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d132:	b149      	cbz	r1, 801d148 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d134:	5caa      	ldrb	r2, [r5, r2]
 801d136:	4670      	mov	r0, lr
 801d138:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d13c:	4422      	add	r2, r4
 801d13e:	4677      	mov	r7, lr
 801d140:	e6fb      	b.n	801cf3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d142:	4670      	mov	r0, lr
 801d144:	4672      	mov	r2, lr
 801d146:	e6f8      	b.n	801cf3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d148:	4670      	mov	r0, lr
 801d14a:	4672      	mov	r2, lr
 801d14c:	e7f7      	b.n	801d13e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d14e:	f110 0c01 	adds.w	ip, r0, #1
 801d152:	f53f af6a 	bmi.w	801d02a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d156:	4562      	cmp	r2, ip
 801d158:	f6ff af67 	blt.w	801d02a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d15c:	f115 0c01 	adds.w	ip, r5, #1
 801d160:	f53f af63 	bmi.w	801d02a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d164:	4567      	cmp	r7, ip
 801d166:	f6ff af60 	blt.w	801d02a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d16a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d16c:	b23f      	sxth	r7, r7
 801d16e:	b212      	sxth	r2, r2
 801d170:	9002      	str	r0, [sp, #8]
 801d172:	9701      	str	r7, [sp, #4]
 801d174:	9200      	str	r2, [sp, #0]
 801d176:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801d178:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d17a:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d17e:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801d182:	4623      	mov	r3, r4
 801d184:	4631      	mov	r1, r6
 801d186:	f7ff fd69 	bl	801cc5c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d18a:	e74e      	b.n	801d02a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d18c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d18e:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d190:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d194:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d196:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801d198:	1400      	asrs	r0, r0, #16
 801d19a:	142d      	asrs	r5, r5, #16
 801d19c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d19e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d1a2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d1a6:	fb02 5000 	mla	r0, r2, r0, r5
 801d1aa:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d1ac:	f815 e000 	ldrb.w	lr, [r5, r0]
 801d1b0:	eb05 0c00 	add.w	ip, r5, r0
 801d1b4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d1b8:	eb04 060e 	add.w	r6, r4, lr
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	f000 8097 	beq.w	801d2f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801d1c2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d1ca:	4425      	add	r5, r4
 801d1cc:	2900      	cmp	r1, #0
 801d1ce:	f000 8098 	beq.w	801d302 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801d1d2:	eb0c 0002 	add.w	r0, ip, r2
 801d1d6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d1da:	7840      	ldrb	r0, [r0, #1]
 801d1dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d1e4:	4422      	add	r2, r4
 801d1e6:	4420      	add	r0, r4
 801d1e8:	b29b      	uxth	r3, r3
 801d1ea:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d1ee:	b289      	uxth	r1, r1
 801d1f0:	f895 e000 	ldrb.w	lr, [r5]
 801d1f4:	3703      	adds	r7, #3
 801d1f6:	f109 39ff 	add.w	r9, r9, #4294967295
 801d1fa:	fb03 f801 	mul.w	r8, r3, r1
 801d1fe:	011b      	lsls	r3, r3, #4
 801d200:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d204:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d208:	eba3 0308 	sub.w	r3, r3, r8
 801d20c:	b289      	uxth	r1, r1
 801d20e:	b29b      	uxth	r3, r3
 801d210:	ebac 0c01 	sub.w	ip, ip, r1
 801d214:	fb03 fe0e 	mul.w	lr, r3, lr
 801d218:	fa1f fc8c 	uxth.w	ip, ip
 801d21c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d220:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d224:	f892 b000 	ldrb.w	fp, [r2]
 801d228:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d22c:	f890 b000 	ldrb.w	fp, [r0]
 801d230:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d234:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801d238:	fb1b fb03 	smulbb	fp, fp, r3
 801d23c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d242:	fb0e be0a 	mla	lr, lr, sl, fp
 801d246:	fa1f fe8e 	uxth.w	lr, lr
 801d24a:	f10e 0b01 	add.w	fp, lr, #1
 801d24e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d252:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d256:	f807 ec06 	strb.w	lr, [r7, #-6]
 801d25a:	f895 e001 	ldrb.w	lr, [r5, #1]
 801d25e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d262:	fb03 fe0e 	mul.w	lr, r3, lr
 801d266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d268:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d26c:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d270:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d274:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d278:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d27c:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801d280:	fb1b fb03 	smulbb	fp, fp, r3
 801d284:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d28a:	fb0e be0a 	mla	lr, lr, sl, fp
 801d28e:	fa1f fe8e 	uxth.w	lr, lr
 801d292:	f10e 0b01 	add.w	fp, lr, #1
 801d296:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d29a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d29e:	f807 ec05 	strb.w	lr, [r7, #-5]
 801d2a2:	78ad      	ldrb	r5, [r5, #2]
 801d2a4:	78b6      	ldrb	r6, [r6, #2]
 801d2a6:	436b      	muls	r3, r5
 801d2a8:	7895      	ldrb	r5, [r2, #2]
 801d2aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d2ac:	fb0c 3306 	mla	r3, ip, r6, r3
 801d2b0:	fb01 3305 	mla	r3, r1, r5, r3
 801d2b4:	7885      	ldrb	r5, [r0, #2]
 801d2b6:	fb08 3805 	mla	r8, r8, r5, r3
 801d2ba:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801d2be:	fb13 f302 	smulbb	r3, r3, r2
 801d2c2:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d2c6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801d2c8:	fb08 380a 	mla	r8, r8, sl, r3
 801d2cc:	fa1f f888 	uxth.w	r8, r8
 801d2d0:	f108 0301 	add.w	r3, r8, #1
 801d2d4:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801d2d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d2da:	4413      	add	r3, r2
 801d2dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d2de:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d2e2:	931d      	str	r3, [sp, #116]	@ 0x74
 801d2e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d2e6:	f807 8c04 	strb.w	r8, [r7, #-4]
 801d2ea:	4413      	add	r3, r2
 801d2ec:	931e      	str	r3, [sp, #120]	@ 0x78
 801d2ee:	e6d6      	b.n	801d09e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d2f0:	b151      	cbz	r1, 801d308 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d2f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d2f6:	4630      	mov	r0, r6
 801d2f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d2fc:	4422      	add	r2, r4
 801d2fe:	4635      	mov	r5, r6
 801d300:	e772      	b.n	801d1e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d302:	4630      	mov	r0, r6
 801d304:	4632      	mov	r2, r6
 801d306:	e76f      	b.n	801d1e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d308:	4630      	mov	r0, r6
 801d30a:	4632      	mov	r2, r6
 801d30c:	e7f7      	b.n	801d2fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d30e:	b013      	add	sp, #76	@ 0x4c
 801d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d314 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d318:	784c      	ldrb	r4, [r1, #1]
 801d31a:	f891 a002 	ldrb.w	sl, [r1, #2]
 801d31e:	0224      	lsls	r4, r4, #8
 801d320:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801d324:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801d328:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d32c:	f891 a000 	ldrb.w	sl, [r1]
 801d330:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801d334:	ea44 040a 	orr.w	r4, r4, sl
 801d338:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801d33c:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801d340:	9401      	str	r4, [sp, #4]
 801d342:	fb05 c70e 	mla	r7, r5, lr, ip
 801d346:	2d00      	cmp	r5, #0
 801d348:	eb02 0807 	add.w	r8, r2, r7
 801d34c:	db72      	blt.n	801d434 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d34e:	45a9      	cmp	r9, r5
 801d350:	dd70      	ble.n	801d434 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d352:	f1bc 0f00 	cmp.w	ip, #0
 801d356:	db6b      	blt.n	801d430 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d358:	45e6      	cmp	lr, ip
 801d35a:	dd69      	ble.n	801d430 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d35c:	5dd7      	ldrb	r7, [r2, r7]
 801d35e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d362:	441f      	add	r7, r3
 801d364:	f11c 0201 	adds.w	r2, ip, #1
 801d368:	d467      	bmi.n	801d43a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d36a:	4596      	cmp	lr, r2
 801d36c:	dd65      	ble.n	801d43a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d36e:	2800      	cmp	r0, #0
 801d370:	d063      	beq.n	801d43a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d372:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d376:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d37a:	441c      	add	r4, r3
 801d37c:	3501      	adds	r5, #1
 801d37e:	d460      	bmi.n	801d442 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d380:	45a9      	cmp	r9, r5
 801d382:	dd5e      	ble.n	801d442 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d384:	2e00      	cmp	r6, #0
 801d386:	d05c      	beq.n	801d442 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d388:	f1bc 0f00 	cmp.w	ip, #0
 801d38c:	db57      	blt.n	801d43e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d38e:	45e6      	cmp	lr, ip
 801d390:	dd55      	ble.n	801d43e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d392:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d39a:	441d      	add	r5, r3
 801d39c:	f11c 0201 	adds.w	r2, ip, #1
 801d3a0:	d452      	bmi.n	801d448 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3a2:	4596      	cmp	lr, r2
 801d3a4:	dd50      	ble.n	801d448 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	d04e      	beq.n	801d448 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d3aa:	44c6      	add	lr, r8
 801d3ac:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d3b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3b4:	4413      	add	r3, r2
 801d3b6:	b280      	uxth	r0, r0
 801d3b8:	f897 8000 	ldrb.w	r8, [r7]
 801d3bc:	b2b2      	uxth	r2, r6
 801d3be:	fb00 f602 	mul.w	r6, r0, r2
 801d3c2:	0100      	lsls	r0, r0, #4
 801d3c4:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d3c8:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801d3cc:	1b80      	subs	r0, r0, r6
 801d3ce:	fa1f fc82 	uxth.w	ip, r2
 801d3d2:	b282      	uxth	r2, r0
 801d3d4:	7820      	ldrb	r0, [r4, #0]
 801d3d6:	ebae 0e0c 	sub.w	lr, lr, ip
 801d3da:	4350      	muls	r0, r2
 801d3dc:	fa1f fe8e 	uxth.w	lr, lr
 801d3e0:	fb0e 0808 	mla	r8, lr, r8, r0
 801d3e4:	7828      	ldrb	r0, [r5, #0]
 801d3e6:	fb0c 8800 	mla	r8, ip, r0, r8
 801d3ea:	7818      	ldrb	r0, [r3, #0]
 801d3ec:	fb06 8000 	mla	r0, r6, r0, r8
 801d3f0:	1200      	asrs	r0, r0, #8
 801d3f2:	7008      	strb	r0, [r1, #0]
 801d3f4:	7860      	ldrb	r0, [r4, #1]
 801d3f6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d3fa:	4350      	muls	r0, r2
 801d3fc:	fb0e 0808 	mla	r8, lr, r8, r0
 801d400:	7868      	ldrb	r0, [r5, #1]
 801d402:	fb0c 8800 	mla	r8, ip, r0, r8
 801d406:	7858      	ldrb	r0, [r3, #1]
 801d408:	fb06 8000 	mla	r0, r6, r0, r8
 801d40c:	1200      	asrs	r0, r0, #8
 801d40e:	7048      	strb	r0, [r1, #1]
 801d410:	78a0      	ldrb	r0, [r4, #2]
 801d412:	78bf      	ldrb	r7, [r7, #2]
 801d414:	4350      	muls	r0, r2
 801d416:	78aa      	ldrb	r2, [r5, #2]
 801d418:	fb0e 0007 	mla	r0, lr, r7, r0
 801d41c:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d420:	789a      	ldrb	r2, [r3, #2]
 801d422:	fb06 c202 	mla	r2, r6, r2, ip
 801d426:	1212      	asrs	r2, r2, #8
 801d428:	708a      	strb	r2, [r1, #2]
 801d42a:	b002      	add	sp, #8
 801d42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d430:	af01      	add	r7, sp, #4
 801d432:	e797      	b.n	801d364 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d434:	ac01      	add	r4, sp, #4
 801d436:	4627      	mov	r7, r4
 801d438:	e7a0      	b.n	801d37c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d43a:	ac01      	add	r4, sp, #4
 801d43c:	e79e      	b.n	801d37c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d43e:	ad01      	add	r5, sp, #4
 801d440:	e7ac      	b.n	801d39c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d442:	ab01      	add	r3, sp, #4
 801d444:	461d      	mov	r5, r3
 801d446:	e7b6      	b.n	801d3b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d448:	ab01      	add	r3, sp, #4
 801d44a:	e7b4      	b.n	801d3b6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d44c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d450:	b08d      	sub	sp, #52	@ 0x34
 801d452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d456:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801d45a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d45c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d45e:	9306      	str	r3, [sp, #24]
 801d460:	6850      	ldr	r0, [r2, #4]
 801d462:	6812      	ldr	r2, [r2, #0]
 801d464:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801d466:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801d46a:	fb00 1303 	mla	r3, r0, r3, r1
 801d46e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d472:	18d3      	adds	r3, r2, r3
 801d474:	9307      	str	r3, [sp, #28]
 801d476:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	9308      	str	r3, [sp, #32]
 801d47c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d47e:	685d      	ldr	r5, [r3, #4]
 801d480:	3504      	adds	r5, #4
 801d482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d484:	2b00      	cmp	r3, #0
 801d486:	dc03      	bgt.n	801d490 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	f340 81e6 	ble.w	801d85c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d490:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801d492:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d496:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d49a:	1e48      	subs	r0, r1, #1
 801d49c:	1e56      	subs	r6, r2, #1
 801d49e:	9b06      	ldr	r3, [sp, #24]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	f340 80bd 	ble.w	801d620 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d4a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4a8:	1427      	asrs	r7, r4, #16
 801d4aa:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d4ae:	d406      	bmi.n	801d4be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4b0:	4287      	cmp	r7, r0
 801d4b2:	da04      	bge.n	801d4be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	db02      	blt.n	801d4be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d4b8:	42b3      	cmp	r3, r6
 801d4ba:	f2c0 80b2 	blt.w	801d622 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d4be:	3701      	adds	r7, #1
 801d4c0:	f100 80a1 	bmi.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4c4:	42b9      	cmp	r1, r7
 801d4c6:	f2c0 809e 	blt.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4ca:	3301      	adds	r3, #1
 801d4cc:	f100 809b 	bmi.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4d0:	429a      	cmp	r2, r3
 801d4d2:	f2c0 8098 	blt.w	801d606 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d4d6:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d4da:	f1bb 0f00 	cmp.w	fp, #0
 801d4de:	f340 80bf 	ble.w	801d660 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d4e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d4e4:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801d4e6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d4e8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d4ec:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d4f0:	1420      	asrs	r0, r4, #16
 801d4f2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d4f4:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d4f8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d4fc:	6892      	ldr	r2, [r2, #8]
 801d4fe:	f100 8103 	bmi.w	801d708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d502:	f102 3eff 	add.w	lr, r2, #4294967295
 801d506:	4570      	cmp	r0, lr
 801d508:	f280 80fe 	bge.w	801d708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d50c:	2f00      	cmp	r7, #0
 801d50e:	f2c0 80fb 	blt.w	801d708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d512:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d516:	4577      	cmp	r7, lr
 801d518:	f280 80f6 	bge.w	801d708 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d51c:	b212      	sxth	r2, r2
 801d51e:	fb07 0002 	mla	r0, r7, r2, r0
 801d522:	9f08      	ldr	r7, [sp, #32]
 801d524:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d528:	eb07 0e00 	add.w	lr, r7, r0
 801d52c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d530:	eb05 0c08 	add.w	ip, r5, r8
 801d534:	2b00      	cmp	r3, #0
 801d536:	f000 80d8 	beq.w	801d6ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d53a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d53e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d542:	442f      	add	r7, r5
 801d544:	2900      	cmp	r1, #0
 801d546:	f000 80d9 	beq.w	801d6fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d54a:	eb0e 0002 	add.w	r0, lr, r2
 801d54e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d552:	7840      	ldrb	r0, [r0, #1]
 801d554:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d558:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d55c:	442a      	add	r2, r5
 801d55e:	4428      	add	r0, r5
 801d560:	b29b      	uxth	r3, r3
 801d562:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d566:	b289      	uxth	r1, r1
 801d568:	f897 8000 	ldrb.w	r8, [r7]
 801d56c:	fb03 f901 	mul.w	r9, r3, r1
 801d570:	011b      	lsls	r3, r3, #4
 801d572:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d576:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801d57a:	eba3 0309 	sub.w	r3, r3, r9
 801d57e:	b289      	uxth	r1, r1
 801d580:	b29b      	uxth	r3, r3
 801d582:	ebae 0e01 	sub.w	lr, lr, r1
 801d586:	fb03 f808 	mul.w	r8, r3, r8
 801d58a:	fa1f fe8e 	uxth.w	lr, lr
 801d58e:	fb0e 880a 	mla	r8, lr, sl, r8
 801d592:	f892 a000 	ldrb.w	sl, [r2]
 801d596:	fb01 880a 	mla	r8, r1, sl, r8
 801d59a:	f890 a000 	ldrb.w	sl, [r0]
 801d59e:	fb09 880a 	mla	r8, r9, sl, r8
 801d5a2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5a6:	f886 8000 	strb.w	r8, [r6]
 801d5aa:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d5ae:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d5b2:	fb03 f808 	mul.w	r8, r3, r8
 801d5b6:	fb0e 880a 	mla	r8, lr, sl, r8
 801d5ba:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d5be:	fb01 880a 	mla	r8, r1, sl, r8
 801d5c2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d5c6:	fb09 880a 	mla	r8, r9, sl, r8
 801d5ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d5ce:	f886 8001 	strb.w	r8, [r6, #1]
 801d5d2:	78bf      	ldrb	r7, [r7, #2]
 801d5d4:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d5d8:	437b      	muls	r3, r7
 801d5da:	7892      	ldrb	r2, [r2, #2]
 801d5dc:	fb0e 330c 	mla	r3, lr, ip, r3
 801d5e0:	fb01 3102 	mla	r1, r1, r2, r3
 801d5e4:	7882      	ldrb	r2, [r0, #2]
 801d5e6:	fb09 1902 	mla	r9, r9, r2, r1
 801d5ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d5ee:	f886 9002 	strb.w	r9, [r6, #2]
 801d5f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d5f4:	3603      	adds	r6, #3
 801d5f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d5f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d5fc:	441c      	add	r4, r3
 801d5fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d600:	4413      	add	r3, r2
 801d602:	9318      	str	r3, [sp, #96]	@ 0x60
 801d604:	e769      	b.n	801d4da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d608:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801d60a:	441c      	add	r4, r3
 801d60c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d60e:	443b      	add	r3, r7
 801d610:	9318      	str	r3, [sp, #96]	@ 0x60
 801d612:	9b06      	ldr	r3, [sp, #24]
 801d614:	3b01      	subs	r3, #1
 801d616:	9306      	str	r3, [sp, #24]
 801d618:	9b07      	ldr	r3, [sp, #28]
 801d61a:	3303      	adds	r3, #3
 801d61c:	9307      	str	r3, [sp, #28]
 801d61e:	e73e      	b.n	801d49e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d620:	d026      	beq.n	801d670 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d622:	9b06      	ldr	r3, [sp, #24]
 801d624:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d626:	3b01      	subs	r3, #1
 801d628:	fb00 4003 	mla	r0, r0, r3, r4
 801d62c:	1400      	asrs	r0, r0, #16
 801d62e:	f53f af52 	bmi.w	801d4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d632:	3901      	subs	r1, #1
 801d634:	4288      	cmp	r0, r1
 801d636:	f6bf af4e 	bge.w	801d4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d63a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d63c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d63e:	fb01 0303 	mla	r3, r1, r3, r0
 801d642:	141b      	asrs	r3, r3, #16
 801d644:	f53f af47 	bmi.w	801d4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d648:	3a01      	subs	r2, #1
 801d64a:	4293      	cmp	r3, r2
 801d64c:	f6bf af43 	bge.w	801d4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d650:	9b07      	ldr	r3, [sp, #28]
 801d652:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d656:	f103 0803 	add.w	r8, r3, #3
 801d65a:	f1ba 0f00 	cmp.w	sl, #0
 801d65e:	dc71      	bgt.n	801d744 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d660:	9b06      	ldr	r3, [sp, #24]
 801d662:	9a07      	ldr	r2, [sp, #28]
 801d664:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d66c:	441a      	add	r2, r3
 801d66e:	9207      	str	r2, [sp, #28]
 801d670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d672:	2b00      	cmp	r3, #0
 801d674:	f340 80f2 	ble.w	801d85c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d678:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d67c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d67e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d682:	eeb0 6a62 	vmov.f32	s12, s5
 801d686:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d68a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d68e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d692:	ee16 4a10 	vmov	r4, s12
 801d696:	eeb0 6a43 	vmov.f32	s12, s6
 801d69a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d69e:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801d6a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6ba:	ee12 2a90 	vmov	r2, s5
 801d6be:	eef0 2a47 	vmov.f32	s5, s14
 801d6c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6c6:	ee13 2a10 	vmov	r2, s6
 801d6ca:	9319      	str	r3, [sp, #100]	@ 0x64
 801d6cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d6ce:	eeb0 3a67 	vmov.f32	s6, s15
 801d6d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6d6:	931a      	str	r3, [sp, #104]	@ 0x68
 801d6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d6dc:	3b01      	subs	r3, #1
 801d6de:	9309      	str	r3, [sp, #36]	@ 0x24
 801d6e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d6e2:	bf08      	it	eq
 801d6e4:	4613      	moveq	r3, r2
 801d6e6:	9306      	str	r3, [sp, #24]
 801d6e8:	e6cb      	b.n	801d482 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d6ea:	b151      	cbz	r1, 801d702 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d6ec:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d6f0:	4660      	mov	r0, ip
 801d6f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6f6:	442a      	add	r2, r5
 801d6f8:	4667      	mov	r7, ip
 801d6fa:	e731      	b.n	801d560 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d6fc:	4660      	mov	r0, ip
 801d6fe:	4662      	mov	r2, ip
 801d700:	e72e      	b.n	801d560 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d702:	4660      	mov	r0, ip
 801d704:	4662      	mov	r2, ip
 801d706:	e7f7      	b.n	801d6f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d708:	f110 0e01 	adds.w	lr, r0, #1
 801d70c:	f53f af71 	bmi.w	801d5f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d710:	4572      	cmp	r2, lr
 801d712:	f6ff af6e 	blt.w	801d5f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d716:	f117 0e01 	adds.w	lr, r7, #1
 801d71a:	f53f af6a 	bmi.w	801d5f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d71e:	45f4      	cmp	ip, lr
 801d720:	f6ff af67 	blt.w	801d5f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d724:	b212      	sxth	r2, r2
 801d726:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d72a:	fa0f f38c 	sxth.w	r3, ip
 801d72e:	9200      	str	r2, [sp, #0]
 801d730:	4631      	mov	r1, r6
 801d732:	9a08      	ldr	r2, [sp, #32]
 801d734:	9301      	str	r3, [sp, #4]
 801d736:	462b      	mov	r3, r5
 801d738:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d73c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d73e:	f7ff fde9 	bl	801d314 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d742:	e756      	b.n	801d5f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d744:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d746:	1426      	asrs	r6, r4, #16
 801d748:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801d74a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d74e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d752:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d754:	1400      	asrs	r0, r0, #16
 801d756:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d75a:	fb02 6000 	mla	r0, r2, r0, r6
 801d75e:	9e08      	ldr	r6, [sp, #32]
 801d760:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d764:	eb06 0c00 	add.w	ip, r6, r0
 801d768:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d76c:	eb05 070e 	add.w	r7, r5, lr
 801d770:	2b00      	cmp	r3, #0
 801d772:	d064      	beq.n	801d83e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d774:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d778:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d77c:	442e      	add	r6, r5
 801d77e:	2900      	cmp	r1, #0
 801d780:	d066      	beq.n	801d850 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801d782:	eb0c 0002 	add.w	r0, ip, r2
 801d786:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d78a:	7840      	ldrb	r0, [r0, #1]
 801d78c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d790:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d794:	442a      	add	r2, r5
 801d796:	4428      	add	r0, r5
 801d798:	b29b      	uxth	r3, r3
 801d79a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d79e:	b289      	uxth	r1, r1
 801d7a0:	f896 e000 	ldrb.w	lr, [r6]
 801d7a4:	f108 0803 	add.w	r8, r8, #3
 801d7a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d7ac:	fb03 f901 	mul.w	r9, r3, r1
 801d7b0:	011b      	lsls	r3, r3, #4
 801d7b2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d7b6:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801d7ba:	eba3 0309 	sub.w	r3, r3, r9
 801d7be:	b289      	uxth	r1, r1
 801d7c0:	b29b      	uxth	r3, r3
 801d7c2:	ebac 0c01 	sub.w	ip, ip, r1
 801d7c6:	fb03 fe0e 	mul.w	lr, r3, lr
 801d7ca:	fa1f fc8c 	uxth.w	ip, ip
 801d7ce:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d7d2:	f892 b000 	ldrb.w	fp, [r2]
 801d7d6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d7da:	f890 b000 	ldrb.w	fp, [r0]
 801d7de:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d7e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d7e6:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d7ea:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d7ee:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d7f2:	fb03 fe0e 	mul.w	lr, r3, lr
 801d7f6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d7fa:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d7fe:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d802:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d806:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d80a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d80e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d812:	78b6      	ldrb	r6, [r6, #2]
 801d814:	78bf      	ldrb	r7, [r7, #2]
 801d816:	4373      	muls	r3, r6
 801d818:	7896      	ldrb	r6, [r2, #2]
 801d81a:	7882      	ldrb	r2, [r0, #2]
 801d81c:	fb0c 3307 	mla	r3, ip, r7, r3
 801d820:	fb01 3306 	mla	r3, r1, r6, r3
 801d824:	fb09 3902 	mla	r9, r9, r2, r3
 801d828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d82a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d82c:	441c      	add	r4, r3
 801d82e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d830:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d834:	4413      	add	r3, r2
 801d836:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d83a:	9318      	str	r3, [sp, #96]	@ 0x60
 801d83c:	e70d      	b.n	801d65a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d83e:	b151      	cbz	r1, 801d856 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d840:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d844:	4638      	mov	r0, r7
 801d846:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d84a:	442a      	add	r2, r5
 801d84c:	463e      	mov	r6, r7
 801d84e:	e7a3      	b.n	801d798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d850:	4638      	mov	r0, r7
 801d852:	463a      	mov	r2, r7
 801d854:	e7a0      	b.n	801d798 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d856:	4638      	mov	r0, r7
 801d858:	463a      	mov	r2, r7
 801d85a:	e7f7      	b.n	801d84c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801d85c:	b00d      	add	sp, #52	@ 0x34
 801d85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d862 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d862:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d866:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801d86a:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801d86e:	2d00      	cmp	r5, #0
 801d870:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801d874:	fb05 700c 	mla	r0, r5, ip, r7
 801d878:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801d87c:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801d880:	eb02 0800 	add.w	r8, r2, r0
 801d884:	f2c0 8118 	blt.w	801dab8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d888:	45a9      	cmp	r9, r5
 801d88a:	f340 8115 	ble.w	801dab8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d88e:	2f00      	cmp	r7, #0
 801d890:	f2c0 8110 	blt.w	801dab4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d894:	45bc      	cmp	ip, r7
 801d896:	f340 810d 	ble.w	801dab4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d89a:	5c12      	ldrb	r2, [r2, r0]
 801d89c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d8a0:	1c7a      	adds	r2, r7, #1
 801d8a2:	f100 810c 	bmi.w	801dabe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d8a6:	4594      	cmp	ip, r2
 801d8a8:	f340 8109 	ble.w	801dabe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d8ac:	2c00      	cmp	r4, #0
 801d8ae:	f000 8108 	beq.w	801dac2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801d8b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d8b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d8ba:	3501      	adds	r5, #1
 801d8bc:	f100 8105 	bmi.w	801daca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d8c0:	45a9      	cmp	r9, r5
 801d8c2:	f340 8102 	ble.w	801daca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d8c6:	f1be 0f00 	cmp.w	lr, #0
 801d8ca:	f000 8101 	beq.w	801dad0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801d8ce:	2f00      	cmp	r7, #0
 801d8d0:	f2c0 80f9 	blt.w	801dac6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d8d4:	45bc      	cmp	ip, r7
 801d8d6:	f340 80f6 	ble.w	801dac6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d8da:	f818 200c 	ldrb.w	r2, [r8, ip]
 801d8de:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d8e2:	3701      	adds	r7, #1
 801d8e4:	f100 80f7 	bmi.w	801dad6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d8e8:	45bc      	cmp	ip, r7
 801d8ea:	f340 80f4 	ble.w	801dad6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d8ee:	2c00      	cmp	r4, #0
 801d8f0:	f000 80f3 	beq.w	801dada <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801d8f4:	44c4      	add	ip, r8
 801d8f6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d8fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d8fe:	fa1f fc84 	uxth.w	ip, r4
 801d902:	fa1f f48e 	uxth.w	r4, lr
 801d906:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d90a:	fb04 fe0c 	mul.w	lr, r4, ip
 801d90e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d912:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d916:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801d91a:	ebac 070e 	sub.w	r7, ip, lr
 801d91e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d922:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d926:	b2a4      	uxth	r4, r4
 801d928:	b2bf      	uxth	r7, r7
 801d92a:	1b1b      	subs	r3, r3, r4
 801d92c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d930:	fb07 fc0a 	mul.w	ip, r7, sl
 801d934:	b29b      	uxth	r3, r3
 801d936:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d93a:	9300      	str	r3, [sp, #0]
 801d93c:	fb04 cc09 	mla	ip, r4, r9, ip
 801d940:	fb0e cc08 	mla	ip, lr, r8, ip
 801d944:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d948:	9301      	str	r3, [sp, #4]
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	f000 80af 	beq.w	801daae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801d950:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801d954:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d958:	fb0b fc0c 	mul.w	ip, fp, ip
 801d95c:	fb0b f606 	mul.w	r6, fp, r6
 801d960:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d964:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d968:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801d96c:	44dc      	add	ip, fp
 801d96e:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801d972:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d976:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d97a:	fb0a fb0b 	mul.w	fp, sl, fp
 801d97e:	fb0a fa00 	mul.w	sl, sl, r0
 801d982:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801d986:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d98a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801d98e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d992:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d996:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d99a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d99e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9a2:	0a36      	lsrs	r6, r6, #8
 801d9a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9a8:	44dc      	add	ip, fp
 801d9aa:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801d9ae:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d9b2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d9b6:	fb09 fb0b 	mul.w	fp, r9, fp
 801d9ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9be:	fb09 f905 	mul.w	r9, r9, r5
 801d9c2:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d9c6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d9ca:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801d9ce:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d9d2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d9d6:	fb0c fc07 	mul.w	ip, ip, r7
 801d9da:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d9de:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801d9e2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d9e6:	4458      	add	r0, fp
 801d9e8:	fb08 f505 	mul.w	r5, r8, r5
 801d9ec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d9f0:	fb08 f802 	mul.w	r8, r8, r2
 801d9f4:	0a00      	lsrs	r0, r0, #8
 801d9f6:	0a2a      	lsrs	r2, r5, #8
 801d9f8:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801d9fc:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da00:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801da04:	4415      	add	r5, r2
 801da06:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801da0a:	0a2d      	lsrs	r5, r5, #8
 801da0c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801da10:	9a00      	ldr	r2, [sp, #0]
 801da12:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801da16:	fb03 cc02 	mla	ip, r3, r2, ip
 801da1a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801da1e:	9b01      	ldr	r3, [sp, #4]
 801da20:	fb05 c50e 	mla	r5, r5, lr, ip
 801da24:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801da28:	fb00 5004 	mla	r0, r0, r4, r5
 801da2c:	0a00      	lsrs	r0, r0, #8
 801da2e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801da32:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801da36:	4378      	muls	r0, r7
 801da38:	fb02 0006 	mla	r0, r2, r6, r0
 801da3c:	fb0e 0e08 	mla	lr, lr, r8, r0
 801da40:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801da44:	fb04 e000 	mla	r0, r4, r0, lr
 801da48:	0a00      	lsrs	r0, r0, #8
 801da4a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801da4e:	4328      	orrs	r0, r5
 801da50:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801da54:	b2ad      	uxth	r5, r5
 801da56:	b2c4      	uxtb	r4, r0
 801da58:	436b      	muls	r3, r5
 801da5a:	fb14 f405 	smulbb	r4, r4, r5
 801da5e:	1c5a      	adds	r2, r3, #1
 801da60:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801da64:	780b      	ldrb	r3, [r1, #0]
 801da66:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801da6a:	b2d2      	uxtb	r2, r2
 801da6c:	fb03 4302 	mla	r3, r3, r2, r4
 801da70:	b29b      	uxth	r3, r3
 801da72:	1c5c      	adds	r4, r3, #1
 801da74:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801da78:	784c      	ldrb	r4, [r1, #1]
 801da7a:	fb14 f402 	smulbb	r4, r4, r2
 801da7e:	121b      	asrs	r3, r3, #8
 801da80:	700b      	strb	r3, [r1, #0]
 801da82:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801da86:	fb03 4305 	mla	r3, r3, r5, r4
 801da8a:	b29b      	uxth	r3, r3
 801da8c:	1c5c      	adds	r4, r3, #1
 801da8e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801da92:	0c04      	lsrs	r4, r0, #16
 801da94:	7888      	ldrb	r0, [r1, #2]
 801da96:	121b      	asrs	r3, r3, #8
 801da98:	fb10 f002 	smulbb	r0, r0, r2
 801da9c:	704b      	strb	r3, [r1, #1]
 801da9e:	fb04 0005 	mla	r0, r4, r5, r0
 801daa2:	b280      	uxth	r0, r0
 801daa4:	1c43      	adds	r3, r0, #1
 801daa6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801daaa:	1200      	asrs	r0, r0, #8
 801daac:	7088      	strb	r0, [r1, #2]
 801daae:	b003      	add	sp, #12
 801dab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dab4:	2600      	movs	r6, #0
 801dab6:	e6f3      	b.n	801d8a0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801dab8:	2000      	movs	r0, #0
 801daba:	4606      	mov	r6, r0
 801dabc:	e6fd      	b.n	801d8ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dabe:	2000      	movs	r0, #0
 801dac0:	e6fb      	b.n	801d8ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dac2:	4620      	mov	r0, r4
 801dac4:	e6f9      	b.n	801d8ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dac6:	2500      	movs	r5, #0
 801dac8:	e70b      	b.n	801d8e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801daca:	2200      	movs	r2, #0
 801dacc:	4615      	mov	r5, r2
 801dace:	e716      	b.n	801d8fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dad0:	4672      	mov	r2, lr
 801dad2:	4675      	mov	r5, lr
 801dad4:	e713      	b.n	801d8fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dad6:	2200      	movs	r2, #0
 801dad8:	e711      	b.n	801d8fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dada:	4622      	mov	r2, r4
 801dadc:	e70f      	b.n	801d8fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801dade <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae2:	b09f      	sub	sp, #124	@ 0x7c
 801dae4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801dae6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dae8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801daea:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801daee:	901d      	str	r0, [sp, #116]	@ 0x74
 801daf0:	931c      	str	r3, [sp, #112]	@ 0x70
 801daf2:	6850      	ldr	r0, [r2, #4]
 801daf4:	9119      	str	r1, [sp, #100]	@ 0x64
 801daf6:	6812      	ldr	r2, [r2, #0]
 801daf8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801dafa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801dafe:	fb00 1303 	mla	r3, r0, r3, r1
 801db02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db06:	18d3      	adds	r3, r2, r3
 801db08:	930c      	str	r3, [sp, #48]	@ 0x30
 801db0a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	9312      	str	r3, [sp, #72]	@ 0x48
 801db10:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db12:	685e      	ldr	r6, [r3, #4]
 801db14:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801db18:	3604      	adds	r6, #4
 801db1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801db1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801db1e:	2b00      	cmp	r3, #0
 801db20:	dc03      	bgt.n	801db2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801db22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801db24:	2b00      	cmp	r3, #0
 801db26:	f340 8378 	ble.w	801e21a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801db2a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db34:	1e48      	subs	r0, r1, #1
 801db36:	1e57      	subs	r7, r2, #1
 801db38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	f340 818c 	ble.w	801de58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801db40:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801db42:	142b      	asrs	r3, r5, #16
 801db44:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801db48:	d406      	bmi.n	801db58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db4a:	4584      	cmp	ip, r0
 801db4c:	da04      	bge.n	801db58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db4e:	2b00      	cmp	r3, #0
 801db50:	db02      	blt.n	801db58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801db52:	42bb      	cmp	r3, r7
 801db54:	f2c0 8181 	blt.w	801de5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801db58:	f11c 0c01 	adds.w	ip, ip, #1
 801db5c:	f100 816f 	bmi.w	801de3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db60:	4561      	cmp	r1, ip
 801db62:	f2c0 816c 	blt.w	801de3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db66:	3301      	adds	r3, #1
 801db68:	f100 8169 	bmi.w	801de3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db6c:	429a      	cmp	r2, r3
 801db6e:	f2c0 8166 	blt.w	801de3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801db72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db74:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801db76:	931a      	str	r3, [sp, #104]	@ 0x68
 801db78:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	f340 818c 	ble.w	801de98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801db80:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801db82:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801db86:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801db8a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801db8e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801db90:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801db94:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801db96:	141b      	asrs	r3, r3, #16
 801db98:	f100 81d0 	bmi.w	801df3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801db9c:	f100 38ff 	add.w	r8, r0, #4294967295
 801dba0:	4543      	cmp	r3, r8
 801dba2:	f280 81cb 	bge.w	801df3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dba6:	f1bc 0f00 	cmp.w	ip, #0
 801dbaa:	f2c0 81c7 	blt.w	801df3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbae:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dbb2:	45c4      	cmp	ip, r8
 801dbb4:	f280 81c2 	bge.w	801df3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dbb8:	b200      	sxth	r0, r0
 801dbba:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dbbc:	fb0c 3300 	mla	r3, ip, r0, r3
 801dbc0:	eb04 0803 	add.w	r8, r4, r3
 801dbc4:	5ce3      	ldrb	r3, [r4, r3]
 801dbc6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dbca:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dbce:	2a00      	cmp	r2, #0
 801dbd0:	f000 81a9 	beq.w	801df26 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801dbd4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dbd8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dbdc:	940e      	str	r4, [sp, #56]	@ 0x38
 801dbde:	0e24      	lsrs	r4, r4, #24
 801dbe0:	9415      	str	r4, [sp, #84]	@ 0x54
 801dbe2:	b179      	cbz	r1, 801dc04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dbe4:	eb08 0c00 	add.w	ip, r8, r0
 801dbe8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dbec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dbf0:	900a      	str	r0, [sp, #40]	@ 0x28
 801dbf2:	0e00      	lsrs	r0, r0, #24
 801dbf4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dbf6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dbfa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dbfe:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dc00:	0e00      	lsrs	r0, r0, #24
 801dc02:	9016      	str	r0, [sp, #88]	@ 0x58
 801dc04:	b292      	uxth	r2, r2
 801dc06:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801dc08:	b289      	uxth	r1, r1
 801dc0a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dc0c:	fb02 f901 	mul.w	r9, r2, r1
 801dc10:	0112      	lsls	r2, r2, #4
 801dc12:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dc16:	eba2 0809 	sub.w	r8, r2, r9
 801dc1a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dc1e:	b289      	uxth	r1, r1
 801dc20:	fa1f f888 	uxth.w	r8, r8
 801dc24:	1a52      	subs	r2, r2, r1
 801dc26:	fb08 f000 	mul.w	r0, r8, r0
 801dc2a:	b292      	uxth	r2, r2
 801dc2c:	fb02 000e 	mla	r0, r2, lr, r0
 801dc30:	fb01 0004 	mla	r0, r1, r4, r0
 801dc34:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dc36:	fb09 0004 	mla	r0, r9, r4, r0
 801dc3a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dc3e:	2800      	cmp	r0, #0
 801dc40:	f000 80f2 	beq.w	801de28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dc44:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dc48:	d01b      	beq.n	801dc82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801dc4a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801dc4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dc52:	fb0e fa0a 	mul.w	sl, lr, sl
 801dc56:	fb0e fe03 	mul.w	lr, lr, r3
 801dc5a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dc5e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801dc62:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dc66:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc6a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dc6e:	4453      	add	r3, sl
 801dc70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dc74:	0a1b      	lsrs	r3, r3, #8
 801dc76:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dc7a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801dc7e:	ea43 030c 	orr.w	r3, r3, ip
 801dc82:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dc84:	2cff      	cmp	r4, #255	@ 0xff
 801dc86:	d021      	beq.n	801dccc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801dc88:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dc8a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dc8e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dc90:	fb04 fb0b 	mul.w	fp, r4, fp
 801dc94:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dc96:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dc9a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801dc9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dca0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dca4:	fb04 fa0a 	mul.w	sl, r4, sl
 801dca8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcac:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dcb0:	44de      	add	lr, fp
 801dcb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dcb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dcba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcbe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcc2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dcc6:	ea4e 040a 	orr.w	r4, lr, sl
 801dcca:	940e      	str	r4, [sp, #56]	@ 0x38
 801dccc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dcce:	2cff      	cmp	r4, #255	@ 0xff
 801dcd0:	d021      	beq.n	801dd16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801dcd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dcd4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dcd8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dcda:	fb04 fb0b 	mul.w	fp, r4, fp
 801dcde:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dce0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dce4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dce6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dcea:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dcee:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcf2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dcf6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dcfa:	44de      	add	lr, fp
 801dcfc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd0c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd10:	ea4e 040a 	orr.w	r4, lr, sl
 801dd14:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd16:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd18:	2cff      	cmp	r4, #255	@ 0xff
 801dd1a:	d021      	beq.n	801dd60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801dd1c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd1e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801dd22:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd24:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd28:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd2a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dd2e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801dd30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801dd34:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd38:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd3c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd40:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dd44:	44de      	add	lr, fp
 801dd46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dd4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd56:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dd5a:	ea4e 040a 	orr.w	r4, lr, sl
 801dd5e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801dd60:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd62:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801dd66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801dd6a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd70:	fb08 fc0c 	mul.w	ip, r8, ip
 801dd74:	fb02 cc0e 	mla	ip, r2, lr, ip
 801dd78:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dd7c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd7e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801dd82:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dd86:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd88:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dd8c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801dd90:	fb08 f80e 	mul.w	r8, r8, lr
 801dd94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd98:	fb02 8303 	mla	r3, r2, r3, r8
 801dd9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dd9e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dda2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801dda6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dda8:	fb01 330a 	mla	r3, r1, sl, r3
 801ddac:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801ddb0:	fb09 3901 	mla	r9, r9, r1, r3
 801ddb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddb6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ddb8:	4343      	muls	r3, r0
 801ddba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ddbe:	1c58      	adds	r0, r3, #1
 801ddc0:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801ddc4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ddc8:	ea4c 0c09 	orr.w	ip, ip, r9
 801ddcc:	783b      	ldrb	r3, [r7, #0]
 801ddce:	fa5f f28c 	uxtb.w	r2, ip
 801ddd2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ddd6:	fb12 f201 	smulbb	r2, r2, r1
 801ddda:	b2c0      	uxtb	r0, r0
 801dddc:	fb03 2300 	mla	r3, r3, r0, r2
 801dde0:	b29b      	uxth	r3, r3
 801dde2:	1c5a      	adds	r2, r3, #1
 801dde4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dde8:	787a      	ldrb	r2, [r7, #1]
 801ddea:	fb12 f200 	smulbb	r2, r2, r0
 801ddee:	121b      	asrs	r3, r3, #8
 801ddf0:	703b      	strb	r3, [r7, #0]
 801ddf2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ddf6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ddfa:	fb03 2301 	mla	r3, r3, r1, r2
 801ddfe:	b29b      	uxth	r3, r3
 801de00:	1c5a      	adds	r2, r3, #1
 801de02:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801de06:	121b      	asrs	r3, r3, #8
 801de08:	707b      	strb	r3, [r7, #1]
 801de0a:	78bb      	ldrb	r3, [r7, #2]
 801de0c:	fb13 f000 	smulbb	r0, r3, r0
 801de10:	fb0c 0c01 	mla	ip, ip, r1, r0
 801de14:	fa1f fc8c 	uxth.w	ip, ip
 801de18:	f10c 0301 	add.w	r3, ip, #1
 801de1c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801de20:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801de24:	f887 c002 	strb.w	ip, [r7, #2]
 801de28:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801de2a:	3703      	adds	r7, #3
 801de2c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801de2e:	441a      	add	r2, r3
 801de30:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de32:	441d      	add	r5, r3
 801de34:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801de36:	9229      	str	r2, [sp, #164]	@ 0xa4
 801de38:	3b01      	subs	r3, #1
 801de3a:	931a      	str	r3, [sp, #104]	@ 0x68
 801de3c:	e69c      	b.n	801db78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801de3e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801de40:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801de42:	441c      	add	r4, r3
 801de44:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801de46:	441d      	add	r5, r3
 801de48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de4a:	9429      	str	r4, [sp, #164]	@ 0xa4
 801de4c:	3b01      	subs	r3, #1
 801de4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801de50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de52:	3303      	adds	r3, #3
 801de54:	930c      	str	r3, [sp, #48]	@ 0x30
 801de56:	e66f      	b.n	801db38 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801de58:	d026      	beq.n	801dea8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801de5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de5c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801de5e:	3b01      	subs	r3, #1
 801de60:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801de62:	fb00 4003 	mla	r0, r0, r3, r4
 801de66:	1400      	asrs	r0, r0, #16
 801de68:	f53f ae83 	bmi.w	801db72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de6c:	3901      	subs	r1, #1
 801de6e:	4288      	cmp	r0, r1
 801de70:	f6bf ae7f 	bge.w	801db72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de74:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801de76:	fb01 5303 	mla	r3, r1, r3, r5
 801de7a:	141b      	asrs	r3, r3, #16
 801de7c:	f53f ae79 	bmi.w	801db72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de80:	3a01      	subs	r2, #1
 801de82:	4293      	cmp	r3, r2
 801de84:	f6bf ae75 	bge.w	801db72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801de88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de8a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801de8e:	f103 0e03 	add.w	lr, r3, #3
 801de92:	f1bb 0f00 	cmp.w	fp, #0
 801de96:	dc71      	bgt.n	801df7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801de98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de9a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801de9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dea0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dea4:	4423      	add	r3, r4
 801dea6:	930c      	str	r3, [sp, #48]	@ 0x30
 801dea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801deaa:	2b00      	cmp	r3, #0
 801deac:	f340 81b5 	ble.w	801e21a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801deb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801deb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801deb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801deba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801debe:	eef0 6a62 	vmov.f32	s13, s5
 801dec2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dec6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801deca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dece:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801ded2:	eef0 6a43 	vmov.f32	s13, s6
 801ded6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801deda:	ee16 5a90 	vmov	r5, s13
 801dede:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dee2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dee6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801deea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801deee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801def2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801def6:	ee12 2a90 	vmov	r2, s5
 801defa:	eef0 2a47 	vmov.f32	s5, s14
 801defe:	fb92 f3f3 	sdiv	r3, r2, r3
 801df02:	ee13 2a10 	vmov	r2, s6
 801df06:	932b      	str	r3, [sp, #172]	@ 0xac
 801df08:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df0a:	eeb0 3a67 	vmov.f32	s6, s15
 801df0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801df12:	932c      	str	r3, [sp, #176]	@ 0xb0
 801df14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801df16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801df18:	3b01      	subs	r3, #1
 801df1a:	9319      	str	r3, [sp, #100]	@ 0x64
 801df1c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801df1e:	bf08      	it	eq
 801df20:	4613      	moveq	r3, r2
 801df22:	9309      	str	r3, [sp, #36]	@ 0x24
 801df24:	e5fa      	b.n	801db1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801df26:	2900      	cmp	r1, #0
 801df28:	f43f ae6c 	beq.w	801dc04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df2c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801df30:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801df34:	900a      	str	r0, [sp, #40]	@ 0x28
 801df36:	0e00      	lsrs	r0, r0, #24
 801df38:	9013      	str	r0, [sp, #76]	@ 0x4c
 801df3a:	e663      	b.n	801dc04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801df3c:	f113 0801 	adds.w	r8, r3, #1
 801df40:	f53f af72 	bmi.w	801de28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df44:	4540      	cmp	r0, r8
 801df46:	f6ff af6f 	blt.w	801de28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df4a:	f11c 0801 	adds.w	r8, ip, #1
 801df4e:	f53f af6b 	bmi.w	801de28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df52:	45c6      	cmp	lr, r8
 801df54:	f6ff af68 	blt.w	801de28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df58:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801df5a:	b200      	sxth	r0, r0
 801df5c:	9302      	str	r3, [sp, #8]
 801df5e:	fa0f f38e 	sxth.w	r3, lr
 801df62:	9000      	str	r0, [sp, #0]
 801df64:	9301      	str	r3, [sp, #4]
 801df66:	4633      	mov	r3, r6
 801df68:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801df6a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801df6e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801df72:	4639      	mov	r1, r7
 801df74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801df76:	f7ff fc74 	bl	801d862 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801df7a:	e755      	b.n	801de28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801df7c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801df7e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801df82:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801df84:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801df88:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801df8a:	1427      	asrs	r7, r4, #16
 801df8c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801df8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df92:	142b      	asrs	r3, r5, #16
 801df94:	fb01 7303 	mla	r3, r1, r3, r7
 801df98:	18e7      	adds	r7, r4, r3
 801df9a:	5ce3      	ldrb	r3, [r4, r3]
 801df9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dfa0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dfa4:	2a00      	cmp	r2, #0
 801dfa6:	f000 812e 	beq.w	801e206 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801dfaa:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dfae:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801dfb2:	9410      	str	r4, [sp, #64]	@ 0x40
 801dfb4:	0e24      	lsrs	r4, r4, #24
 801dfb6:	9417      	str	r4, [sp, #92]	@ 0x5c
 801dfb8:	b170      	cbz	r0, 801dfd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801dfba:	eb07 0801 	add.w	r8, r7, r1
 801dfbe:	5c79      	ldrb	r1, [r7, r1]
 801dfc0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dfc4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801dfc6:	0e09      	lsrs	r1, r1, #24
 801dfc8:	9114      	str	r1, [sp, #80]	@ 0x50
 801dfca:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dfce:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dfd2:	9111      	str	r1, [sp, #68]	@ 0x44
 801dfd4:	0e09      	lsrs	r1, r1, #24
 801dfd6:	9118      	str	r1, [sp, #96]	@ 0x60
 801dfd8:	b292      	uxth	r2, r2
 801dfda:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dfdc:	b280      	uxth	r0, r0
 801dfde:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801dfe0:	fb02 f900 	mul.w	r9, r2, r0
 801dfe4:	0112      	lsls	r2, r2, #4
 801dfe6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dfea:	eba2 0809 	sub.w	r8, r2, r9
 801dfee:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801dff2:	b280      	uxth	r0, r0
 801dff4:	fa1f f888 	uxth.w	r8, r8
 801dff8:	1a12      	subs	r2, r2, r0
 801dffa:	fb08 f101 	mul.w	r1, r8, r1
 801dffe:	b292      	uxth	r2, r2
 801e000:	fb02 110c 	mla	r1, r2, ip, r1
 801e004:	fb00 1104 	mla	r1, r0, r4, r1
 801e008:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e00a:	fb09 1104 	mla	r1, r9, r4, r1
 801e00e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e012:	2900      	cmp	r1, #0
 801e014:	f000 80ec 	beq.w	801e1f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801e018:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e01c:	d019      	beq.n	801e052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801e01e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e022:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e026:	fb0c fa0a 	mul.w	sl, ip, sl
 801e02a:	fb0c fc03 	mul.w	ip, ip, r3
 801e02e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e032:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e036:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e03a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e03e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e042:	4453      	add	r3, sl
 801e044:	0a3f      	lsrs	r7, r7, #8
 801e046:	0a1b      	lsrs	r3, r3, #8
 801e048:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e04c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e050:	433b      	orrs	r3, r7
 801e052:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e054:	2cff      	cmp	r4, #255	@ 0xff
 801e056:	d020      	beq.n	801e09a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801e058:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e05a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e05e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e060:	4367      	muls	r7, r4
 801e062:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e064:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e068:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e06c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e06e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e072:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e076:	fb04 fa0a 	mul.w	sl, r4, sl
 801e07a:	44bc      	add	ip, r7
 801e07c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e080:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e084:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e088:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e08c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e090:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e094:	ea4c 040a 	orr.w	r4, ip, sl
 801e098:	9410      	str	r4, [sp, #64]	@ 0x40
 801e09a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e09c:	2cff      	cmp	r4, #255	@ 0xff
 801e09e:	d020      	beq.n	801e0e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801e0a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0a2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e0a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0a8:	4367      	muls	r7, r4
 801e0aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e0ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0b0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0b4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e0b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e0ba:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0be:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0c2:	44bc      	add	ip, r7
 801e0c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e0c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e0d0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e0d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e0dc:	ea4c 040a 	orr.w	r4, ip, sl
 801e0e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e0e2:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e0e4:	2cff      	cmp	r4, #255	@ 0xff
 801e0e6:	d020      	beq.n	801e12a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801e0e8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e0ea:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e0ee:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e0f0:	4367      	muls	r7, r4
 801e0f2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e0f4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e0f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0fc:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801e0fe:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e102:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e106:	fb04 fa0a 	mul.w	sl, r4, sl
 801e10a:	44bc      	add	ip, r7
 801e10c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e114:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e118:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e11c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e120:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e124:	ea4c 040a 	orr.w	r4, ip, sl
 801e128:	9411      	str	r4, [sp, #68]	@ 0x44
 801e12a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e12c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e130:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e134:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e138:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e13a:	fb08 f707 	mul.w	r7, r8, r7
 801e13e:	fb02 770c 	mla	r7, r2, ip, r7
 801e142:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e146:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e148:	fb00 770c 	mla	r7, r0, ip, r7
 801e14c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e150:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e152:	fb09 770c 	mla	r7, r9, ip, r7
 801e156:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e15a:	fb08 f80c 	mul.w	r8, r8, ip
 801e15e:	0a3f      	lsrs	r7, r7, #8
 801e160:	fb02 8303 	mla	r3, r2, r3, r8
 801e164:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e166:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e16a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e16e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e170:	fb00 330a 	mla	r3, r0, sl, r3
 801e174:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e178:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e17a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e17e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e184:	434b      	muls	r3, r1
 801e186:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e18a:	1c59      	adds	r1, r3, #1
 801e18c:	ea47 070c 	orr.w	r7, r7, ip
 801e190:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e194:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e198:	b2fa      	uxtb	r2, r7
 801e19a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e19e:	fb12 f200 	smulbb	r2, r2, r0
 801e1a2:	b2c9      	uxtb	r1, r1
 801e1a4:	fb03 2301 	mla	r3, r3, r1, r2
 801e1a8:	b29b      	uxth	r3, r3
 801e1aa:	1c5a      	adds	r2, r3, #1
 801e1ac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1b0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e1b4:	fb12 f201 	smulbb	r2, r2, r1
 801e1b8:	121b      	asrs	r3, r3, #8
 801e1ba:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e1be:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e1c2:	0c3f      	lsrs	r7, r7, #16
 801e1c4:	fb03 2300 	mla	r3, r3, r0, r2
 801e1c8:	b29b      	uxth	r3, r3
 801e1ca:	1c5a      	adds	r2, r3, #1
 801e1cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e1d0:	121b      	asrs	r3, r3, #8
 801e1d2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e1d6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e1da:	fb13 f101 	smulbb	r1, r3, r1
 801e1de:	fb07 1700 	mla	r7, r7, r0, r1
 801e1e2:	b2bf      	uxth	r7, r7
 801e1e4:	1c7b      	adds	r3, r7, #1
 801e1e6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e1ea:	123f      	asrs	r7, r7, #8
 801e1ec:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e1f0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801e1f2:	f10e 0e03 	add.w	lr, lr, #3
 801e1f6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e1f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e1fc:	441a      	add	r2, r3
 801e1fe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e200:	9229      	str	r2, [sp, #164]	@ 0xa4
 801e202:	441d      	add	r5, r3
 801e204:	e645      	b.n	801de92 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e206:	2800      	cmp	r0, #0
 801e208:	f43f aee6 	beq.w	801dfd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e20c:	5c79      	ldrb	r1, [r7, r1]
 801e20e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e212:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e214:	0e09      	lsrs	r1, r1, #24
 801e216:	9114      	str	r1, [sp, #80]	@ 0x50
 801e218:	e6de      	b.n	801dfd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e21a:	b01f      	add	sp, #124	@ 0x7c
 801e21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e220 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e224:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801e228:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801e22c:	2d00      	cmp	r5, #0
 801e22e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801e232:	fb05 700e 	mla	r0, r5, lr, r7
 801e236:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801e23a:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801e23e:	eb02 0800 	add.w	r8, r2, r0
 801e242:	f2c0 8105 	blt.w	801e450 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e246:	45a9      	cmp	r9, r5
 801e248:	f340 8102 	ble.w	801e450 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e24c:	2f00      	cmp	r7, #0
 801e24e:	f2c0 80fd 	blt.w	801e44c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e252:	45be      	cmp	lr, r7
 801e254:	f340 80fa 	ble.w	801e44c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e258:	5c12      	ldrb	r2, [r2, r0]
 801e25a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e25e:	1c7a      	adds	r2, r7, #1
 801e260:	f100 80f9 	bmi.w	801e456 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e264:	4596      	cmp	lr, r2
 801e266:	f340 80f6 	ble.w	801e456 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e26a:	2c00      	cmp	r4, #0
 801e26c:	f000 80f5 	beq.w	801e45a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801e270:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e274:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e278:	3501      	adds	r5, #1
 801e27a:	f100 80f2 	bmi.w	801e462 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e27e:	45a9      	cmp	r9, r5
 801e280:	f340 80ef 	ble.w	801e462 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e284:	f1bc 0f00 	cmp.w	ip, #0
 801e288:	f000 80ee 	beq.w	801e468 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801e28c:	2f00      	cmp	r7, #0
 801e28e:	f2c0 80e6 	blt.w	801e45e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e292:	45be      	cmp	lr, r7
 801e294:	f340 80e3 	ble.w	801e45e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e298:	f818 200e 	ldrb.w	r2, [r8, lr]
 801e29c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e2a0:	3701      	adds	r7, #1
 801e2a2:	f100 80e4 	bmi.w	801e46e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e2a6:	45be      	cmp	lr, r7
 801e2a8:	f340 80e1 	ble.w	801e46e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e2ac:	2c00      	cmp	r4, #0
 801e2ae:	f000 80e0 	beq.w	801e472 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801e2b2:	44c6      	add	lr, r8
 801e2b4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e2b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e2bc:	b2a3      	uxth	r3, r4
 801e2be:	fa1f fc8c 	uxth.w	ip, ip
 801e2c2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e2c6:	fb0c fe03 	mul.w	lr, ip, r3
 801e2ca:	011b      	lsls	r3, r3, #4
 801e2cc:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e2d0:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801e2d4:	eba3 070e 	sub.w	r7, r3, lr
 801e2d8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801e2dc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e2e0:	fa1f f48c 	uxth.w	r4, ip
 801e2e4:	b2bf      	uxth	r7, r7
 801e2e6:	1b1b      	subs	r3, r3, r4
 801e2e8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e2ec:	fb07 fc0a 	mul.w	ip, r7, sl
 801e2f0:	b29b      	uxth	r3, r3
 801e2f2:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e2f6:	9300      	str	r3, [sp, #0]
 801e2f8:	fb04 cc09 	mla	ip, r4, r9, ip
 801e2fc:	fb0e cc08 	mla	ip, lr, r8, ip
 801e300:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e304:	9301      	str	r3, [sp, #4]
 801e306:	2b00      	cmp	r3, #0
 801e308:	f000 809d 	beq.w	801e446 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801e30c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801e310:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e314:	fb0b fc0c 	mul.w	ip, fp, ip
 801e318:	fb0b f606 	mul.w	r6, fp, r6
 801e31c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e320:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e324:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801e328:	44dc      	add	ip, fp
 801e32a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801e32e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e332:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e336:	fb0a fb0b 	mul.w	fp, sl, fp
 801e33a:	fb0a fa00 	mul.w	sl, sl, r0
 801e33e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801e342:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e346:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801e34a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e34e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e352:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e356:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e35a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e35e:	0a36      	lsrs	r6, r6, #8
 801e360:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e364:	44dc      	add	ip, fp
 801e366:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801e36a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e36e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e372:	fb09 fb0b 	mul.w	fp, r9, fp
 801e376:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e37a:	fb09 f905 	mul.w	r9, r9, r5
 801e37e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e382:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e386:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801e38a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e38e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e392:	fb0c fc07 	mul.w	ip, ip, r7
 801e396:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e39a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801e39e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e3a2:	4458      	add	r0, fp
 801e3a4:	fb08 f505 	mul.w	r5, r8, r5
 801e3a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e3ac:	fb08 f802 	mul.w	r8, r8, r2
 801e3b0:	0a00      	lsrs	r0, r0, #8
 801e3b2:	0a2a      	lsrs	r2, r5, #8
 801e3b4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801e3b8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e3bc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e3c0:	4415      	add	r5, r2
 801e3c2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801e3c6:	0a2d      	lsrs	r5, r5, #8
 801e3c8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e3cc:	9a00      	ldr	r2, [sp, #0]
 801e3ce:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801e3d2:	fb03 cc02 	mla	ip, r3, r2, ip
 801e3d6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e3da:	9b01      	ldr	r3, [sp, #4]
 801e3dc:	fb05 c50e 	mla	r5, r5, lr, ip
 801e3e0:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801e3e4:	43db      	mvns	r3, r3
 801e3e6:	fb00 5004 	mla	r0, r0, r4, r5
 801e3ea:	b2db      	uxtb	r3, r3
 801e3ec:	0a00      	lsrs	r0, r0, #8
 801e3ee:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801e3f2:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801e3f6:	4378      	muls	r0, r7
 801e3f8:	fb02 0006 	mla	r0, r2, r6, r0
 801e3fc:	780a      	ldrb	r2, [r1, #0]
 801e3fe:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e402:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801e406:	fb04 e000 	mla	r0, r4, r0, lr
 801e40a:	fb02 f403 	mul.w	r4, r2, r3
 801e40e:	0a00      	lsrs	r0, r0, #8
 801e410:	1c62      	adds	r2, r4, #1
 801e412:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e416:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e41a:	4328      	orrs	r0, r5
 801e41c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e420:	700a      	strb	r2, [r1, #0]
 801e422:	784a      	ldrb	r2, [r1, #1]
 801e424:	435a      	muls	r2, r3
 801e426:	1c54      	adds	r4, r2, #1
 801e428:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e42c:	0a02      	lsrs	r2, r0, #8
 801e42e:	0c00      	lsrs	r0, r0, #16
 801e430:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e434:	704a      	strb	r2, [r1, #1]
 801e436:	788a      	ldrb	r2, [r1, #2]
 801e438:	4353      	muls	r3, r2
 801e43a:	1c5a      	adds	r2, r3, #1
 801e43c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e440:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e444:	7088      	strb	r0, [r1, #2]
 801e446:	b003      	add	sp, #12
 801e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44c:	2600      	movs	r6, #0
 801e44e:	e706      	b.n	801e25e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e450:	2000      	movs	r0, #0
 801e452:	4606      	mov	r6, r0
 801e454:	e710      	b.n	801e278 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e456:	2000      	movs	r0, #0
 801e458:	e70e      	b.n	801e278 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e45a:	4620      	mov	r0, r4
 801e45c:	e70c      	b.n	801e278 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e45e:	2500      	movs	r5, #0
 801e460:	e71e      	b.n	801e2a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e462:	2200      	movs	r2, #0
 801e464:	4615      	mov	r5, r2
 801e466:	e729      	b.n	801e2bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e468:	4662      	mov	r2, ip
 801e46a:	4665      	mov	r5, ip
 801e46c:	e726      	b.n	801e2bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e46e:	2200      	movs	r2, #0
 801e470:	e724      	b.n	801e2bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e472:	4622      	mov	r2, r4
 801e474:	e722      	b.n	801e2bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e476 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e47a:	b09b      	sub	sp, #108	@ 0x6c
 801e47c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e480:	9218      	str	r2, [sp, #96]	@ 0x60
 801e482:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801e484:	9019      	str	r0, [sp, #100]	@ 0x64
 801e486:	9116      	str	r1, [sp, #88]	@ 0x58
 801e488:	6850      	ldr	r0, [r2, #4]
 801e48a:	9307      	str	r3, [sp, #28]
 801e48c:	6812      	ldr	r2, [r2, #0]
 801e48e:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801e490:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801e494:	fb00 1303 	mla	r3, r0, r3, r1
 801e498:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e49c:	18d3      	adds	r3, r2, r3
 801e49e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4a0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e4a6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4a8:	685e      	ldr	r6, [r3, #4]
 801e4aa:	3604      	adds	r6, #4
 801e4ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	dc03      	bgt.n	801e4ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e4b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	f340 834f 	ble.w	801eb58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e4ba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e4bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e4c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e4c4:	1e48      	subs	r0, r1, #1
 801e4c6:	1e57      	subs	r7, r2, #1
 801e4c8:	9b07      	ldr	r3, [sp, #28]
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	f340 8178 	ble.w	801e7c0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e4d0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e4d2:	142b      	asrs	r3, r5, #16
 801e4d4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e4d8:	d406      	bmi.n	801e4e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4da:	4584      	cmp	ip, r0
 801e4dc:	da04      	bge.n	801e4e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	db02      	blt.n	801e4e8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4e2:	42bb      	cmp	r3, r7
 801e4e4:	f2c0 816d 	blt.w	801e7c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e4e8:	f11c 0c01 	adds.w	ip, ip, #1
 801e4ec:	f100 815b 	bmi.w	801e7a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e4f0:	4561      	cmp	r1, ip
 801e4f2:	f2c0 8158 	blt.w	801e7a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e4f6:	3301      	adds	r3, #1
 801e4f8:	f100 8155 	bmi.w	801e7a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e4fc:	429a      	cmp	r2, r3
 801e4fe:	f2c0 8152 	blt.w	801e7a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e502:	9b07      	ldr	r3, [sp, #28]
 801e504:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e506:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e508:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	f340 8178 	ble.w	801e800 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e510:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e512:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e516:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e51a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e51e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e520:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e524:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e526:	141b      	asrs	r3, r3, #16
 801e528:	f100 81ba 	bmi.w	801e8a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e52c:	f101 38ff 	add.w	r8, r1, #4294967295
 801e530:	4543      	cmp	r3, r8
 801e532:	f280 81b5 	bge.w	801e8a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e536:	f1bc 0f00 	cmp.w	ip, #0
 801e53a:	f2c0 81b1 	blt.w	801e8a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e53e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e542:	45c4      	cmp	ip, r8
 801e544:	f280 81ac 	bge.w	801e8a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e548:	b209      	sxth	r1, r1
 801e54a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e54c:	fb0c 3301 	mla	r3, ip, r1, r3
 801e550:	eb04 0803 	add.w	r8, r4, r3
 801e554:	5ce3      	ldrb	r3, [r4, r3]
 801e556:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e55a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e55e:	2a00      	cmp	r2, #0
 801e560:	f000 8193 	beq.w	801e88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e564:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e568:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e56c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e56e:	0e24      	lsrs	r4, r4, #24
 801e570:	9412      	str	r4, [sp, #72]	@ 0x48
 801e572:	b178      	cbz	r0, 801e594 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e574:	eb08 0c01 	add.w	ip, r8, r1
 801e578:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e57c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e580:	9108      	str	r1, [sp, #32]
 801e582:	0e09      	lsrs	r1, r1, #24
 801e584:	9110      	str	r1, [sp, #64]	@ 0x40
 801e586:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e58a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e58e:	910c      	str	r1, [sp, #48]	@ 0x30
 801e590:	0e09      	lsrs	r1, r1, #24
 801e592:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e594:	b292      	uxth	r2, r2
 801e596:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e598:	b280      	uxth	r0, r0
 801e59a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e59c:	fb02 f900 	mul.w	r9, r2, r0
 801e5a0:	0112      	lsls	r2, r2, #4
 801e5a2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e5a6:	eba2 0809 	sub.w	r8, r2, r9
 801e5aa:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801e5ae:	b280      	uxth	r0, r0
 801e5b0:	fa1f f888 	uxth.w	r8, r8
 801e5b4:	1a12      	subs	r2, r2, r0
 801e5b6:	fb08 f101 	mul.w	r1, r8, r1
 801e5ba:	b292      	uxth	r2, r2
 801e5bc:	fb02 110e 	mla	r1, r2, lr, r1
 801e5c0:	fb00 1104 	mla	r1, r0, r4, r1
 801e5c4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e5c6:	fb09 1104 	mla	r1, r9, r4, r1
 801e5ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e5ce:	2900      	cmp	r1, #0
 801e5d0:	f000 80de 	beq.w	801e790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e5d4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e5d8:	d01b      	beq.n	801e612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e5da:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e5de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e5e2:	fb0e fa0a 	mul.w	sl, lr, sl
 801e5e6:	fb0e fe03 	mul.w	lr, lr, r3
 801e5ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e5ee:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e5f2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e5f6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e5fa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e5fe:	4453      	add	r3, sl
 801e600:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e604:	0a1b      	lsrs	r3, r3, #8
 801e606:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e60a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e60e:	ea43 030c 	orr.w	r3, r3, ip
 801e612:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e614:	2cff      	cmp	r4, #255	@ 0xff
 801e616:	d021      	beq.n	801e65c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e618:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e61a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e61e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e620:	fb04 fb0b 	mul.w	fp, r4, fp
 801e624:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e626:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e62a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e62c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e630:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e634:	fb04 fa0a 	mul.w	sl, r4, sl
 801e638:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e63c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e640:	44de      	add	lr, fp
 801e642:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e646:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e64a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e64e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e652:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e656:	ea4e 040a 	orr.w	r4, lr, sl
 801e65a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e65c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e65e:	2cff      	cmp	r4, #255	@ 0xff
 801e660:	d021      	beq.n	801e6a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e662:	9c08      	ldr	r4, [sp, #32]
 801e664:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e668:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e66a:	fb04 fb0b 	mul.w	fp, r4, fp
 801e66e:	9c08      	ldr	r4, [sp, #32]
 801e670:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e674:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e676:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e67a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e67e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e682:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e686:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e68a:	44de      	add	lr, fp
 801e68c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e690:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e694:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e698:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e69c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e6a0:	ea4e 040a 	orr.w	r4, lr, sl
 801e6a4:	9408      	str	r4, [sp, #32]
 801e6a6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6a8:	2cff      	cmp	r4, #255	@ 0xff
 801e6aa:	d021      	beq.n	801e6f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e6ac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e6ae:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e6b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6b4:	fb04 fb0b 	mul.w	fp, r4, fp
 801e6b8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e6ba:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e6be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e6c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e6c4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e6c8:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6cc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6d0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e6d4:	44de      	add	lr, fp
 801e6d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e6da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e6de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6e2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e6e6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e6ea:	ea4e 040a 	orr.w	r4, lr, sl
 801e6ee:	940c      	str	r4, [sp, #48]	@ 0x30
 801e6f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e6f2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e6f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e6fa:	43c9      	mvns	r1, r1
 801e6fc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e700:	9c08      	ldr	r4, [sp, #32]
 801e702:	b2c9      	uxtb	r1, r1
 801e704:	fb08 fc0c 	mul.w	ip, r8, ip
 801e708:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e70c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e710:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e712:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e716:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e71a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e71c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e720:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e724:	fb08 f80e 	mul.w	r8, r8, lr
 801e728:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e72c:	fb02 8303 	mla	r3, r2, r3, r8
 801e730:	9a08      	ldr	r2, [sp, #32]
 801e732:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e736:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e73a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e73c:	fb00 330a 	mla	r3, r0, sl, r3
 801e740:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801e744:	fb09 3900 	mla	r9, r9, r0, r3
 801e748:	783b      	ldrb	r3, [r7, #0]
 801e74a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e74e:	fb03 f201 	mul.w	r2, r3, r1
 801e752:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e756:	1c53      	adds	r3, r2, #1
 801e758:	ea4c 0c09 	orr.w	ip, ip, r9
 801e75c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e760:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e764:	703b      	strb	r3, [r7, #0]
 801e766:	787b      	ldrb	r3, [r7, #1]
 801e768:	434b      	muls	r3, r1
 801e76a:	1c5a      	adds	r2, r3, #1
 801e76c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e770:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e774:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e778:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e77c:	707b      	strb	r3, [r7, #1]
 801e77e:	78bb      	ldrb	r3, [r7, #2]
 801e780:	4359      	muls	r1, r3
 801e782:	1c4b      	adds	r3, r1, #1
 801e784:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e788:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e78c:	f887 c002 	strb.w	ip, [r7, #2]
 801e790:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e792:	3703      	adds	r7, #3
 801e794:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e796:	441a      	add	r2, r3
 801e798:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e79a:	441d      	add	r5, r3
 801e79c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e79e:	9225      	str	r2, [sp, #148]	@ 0x94
 801e7a0:	3b01      	subs	r3, #1
 801e7a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e7a4:	e6b0      	b.n	801e508 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e7a6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801e7a8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e7aa:	441c      	add	r4, r3
 801e7ac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e7ae:	441d      	add	r5, r3
 801e7b0:	9b07      	ldr	r3, [sp, #28]
 801e7b2:	9425      	str	r4, [sp, #148]	@ 0x94
 801e7b4:	3b01      	subs	r3, #1
 801e7b6:	9307      	str	r3, [sp, #28]
 801e7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7ba:	3303      	adds	r3, #3
 801e7bc:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7be:	e683      	b.n	801e4c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e7c0:	d026      	beq.n	801e810 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e7c2:	9b07      	ldr	r3, [sp, #28]
 801e7c4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801e7c6:	3b01      	subs	r3, #1
 801e7c8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e7ca:	fb00 4003 	mla	r0, r0, r3, r4
 801e7ce:	1400      	asrs	r0, r0, #16
 801e7d0:	f53f ae97 	bmi.w	801e502 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7d4:	3901      	subs	r1, #1
 801e7d6:	4288      	cmp	r0, r1
 801e7d8:	f6bf ae93 	bge.w	801e502 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7dc:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801e7de:	fb01 5303 	mla	r3, r1, r3, r5
 801e7e2:	141b      	asrs	r3, r3, #16
 801e7e4:	f53f ae8d 	bmi.w	801e502 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7e8:	3a01      	subs	r2, #1
 801e7ea:	4293      	cmp	r3, r2
 801e7ec:	f6bf ae89 	bge.w	801e502 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e7f6:	f103 0e03 	add.w	lr, r3, #3
 801e7fa:	f1bb 0f00 	cmp.w	fp, #0
 801e7fe:	dc6d      	bgt.n	801e8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801e800:	9b07      	ldr	r3, [sp, #28]
 801e802:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e806:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e808:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e80c:	4423      	add	r3, r4
 801e80e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e810:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e812:	2b00      	cmp	r3, #0
 801e814:	f340 81a0 	ble.w	801eb58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e818:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e81c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e81e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e822:	eeb0 6a62 	vmov.f32	s12, s5
 801e826:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e82a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e82e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e832:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801e836:	eeb0 6a43 	vmov.f32	s12, s6
 801e83a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e83e:	ee16 5a10 	vmov	r5, s12
 801e842:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e846:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e84a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e84e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e852:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e856:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e85a:	ee12 2a90 	vmov	r2, s5
 801e85e:	eef0 2a47 	vmov.f32	s5, s14
 801e862:	fb92 f3f3 	sdiv	r3, r2, r3
 801e866:	ee13 2a10 	vmov	r2, s6
 801e86a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801e86c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e86e:	eeb0 3a67 	vmov.f32	s6, s15
 801e872:	fb92 f3f3 	sdiv	r3, r2, r3
 801e876:	9328      	str	r3, [sp, #160]	@ 0xa0
 801e878:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e87a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e87c:	3b01      	subs	r3, #1
 801e87e:	9316      	str	r3, [sp, #88]	@ 0x58
 801e880:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e882:	bf08      	it	eq
 801e884:	4613      	moveq	r3, r2
 801e886:	9307      	str	r3, [sp, #28]
 801e888:	e610      	b.n	801e4ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e88a:	2800      	cmp	r0, #0
 801e88c:	f43f ae82 	beq.w	801e594 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e890:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e894:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e898:	9108      	str	r1, [sp, #32]
 801e89a:	0e09      	lsrs	r1, r1, #24
 801e89c:	9110      	str	r1, [sp, #64]	@ 0x40
 801e89e:	e679      	b.n	801e594 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e8a0:	f113 0801 	adds.w	r8, r3, #1
 801e8a4:	f53f af74 	bmi.w	801e790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8a8:	4541      	cmp	r1, r8
 801e8aa:	f6ff af71 	blt.w	801e790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8ae:	f11c 0801 	adds.w	r8, ip, #1
 801e8b2:	f53f af6d 	bmi.w	801e790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8b6:	45c6      	cmp	lr, r8
 801e8b8:	f6ff af6a 	blt.w	801e790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8bc:	b209      	sxth	r1, r1
 801e8be:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e8c2:	fa0f f38e 	sxth.w	r3, lr
 801e8c6:	9100      	str	r1, [sp, #0]
 801e8c8:	4639      	mov	r1, r7
 801e8ca:	9301      	str	r3, [sp, #4]
 801e8cc:	4633      	mov	r3, r6
 801e8ce:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e8d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e8d4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801e8d6:	f7ff fca3 	bl	801e220 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e8da:	e759      	b.n	801e790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e8dc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e8de:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e8e2:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801e8e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e8e8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801e8ea:	1427      	asrs	r7, r4, #16
 801e8ec:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e8ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e8f2:	142b      	asrs	r3, r5, #16
 801e8f4:	fb01 7303 	mla	r3, r1, r3, r7
 801e8f8:	18e7      	adds	r7, r4, r3
 801e8fa:	5ce3      	ldrb	r3, [r4, r3]
 801e8fc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e900:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e904:	2a00      	cmp	r2, #0
 801e906:	f000 811d 	beq.w	801eb44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801e90a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e90e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e912:	940d      	str	r4, [sp, #52]	@ 0x34
 801e914:	0e24      	lsrs	r4, r4, #24
 801e916:	9414      	str	r4, [sp, #80]	@ 0x50
 801e918:	b170      	cbz	r0, 801e938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e91a:	eb07 0801 	add.w	r8, r7, r1
 801e91e:	5c79      	ldrb	r1, [r7, r1]
 801e920:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e924:	9109      	str	r1, [sp, #36]	@ 0x24
 801e926:	0e09      	lsrs	r1, r1, #24
 801e928:	9111      	str	r1, [sp, #68]	@ 0x44
 801e92a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e92e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e932:	910e      	str	r1, [sp, #56]	@ 0x38
 801e934:	0e09      	lsrs	r1, r1, #24
 801e936:	9115      	str	r1, [sp, #84]	@ 0x54
 801e938:	b292      	uxth	r2, r2
 801e93a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e93c:	b280      	uxth	r0, r0
 801e93e:	fb02 f900 	mul.w	r9, r2, r0
 801e942:	0112      	lsls	r2, r2, #4
 801e944:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e948:	eba2 0809 	sub.w	r8, r2, r9
 801e94c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801e950:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e952:	b280      	uxth	r0, r0
 801e954:	fa1f f888 	uxth.w	r8, r8
 801e958:	1a09      	subs	r1, r1, r0
 801e95a:	fb08 f202 	mul.w	r2, r8, r2
 801e95e:	b289      	uxth	r1, r1
 801e960:	fb01 220c 	mla	r2, r1, ip, r2
 801e964:	fb00 2204 	mla	r2, r0, r4, r2
 801e968:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e96a:	fb09 2204 	mla	r2, r9, r4, r2
 801e96e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e972:	2a00      	cmp	r2, #0
 801e974:	f000 80db 	beq.w	801eb2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e978:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e97c:	d019      	beq.n	801e9b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801e97e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e982:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e986:	fb0c fa0a 	mul.w	sl, ip, sl
 801e98a:	fb0c fc03 	mul.w	ip, ip, r3
 801e98e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e992:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e996:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e99a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e99e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e9a2:	4453      	add	r3, sl
 801e9a4:	0a3f      	lsrs	r7, r7, #8
 801e9a6:	0a1b      	lsrs	r3, r3, #8
 801e9a8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e9ac:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e9b0:	433b      	orrs	r3, r7
 801e9b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9b4:	2cff      	cmp	r4, #255	@ 0xff
 801e9b6:	d020      	beq.n	801e9fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801e9b8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e9ba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e9be:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9c0:	4367      	muls	r7, r4
 801e9c2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e9c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e9c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e9cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e9ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e9d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9d6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e9da:	44bc      	add	ip, r7
 801e9dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e9e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e9e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e9f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e9f4:	ea4c 040a 	orr.w	r4, ip, sl
 801e9f8:	940d      	str	r4, [sp, #52]	@ 0x34
 801e9fa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e9fc:	2cff      	cmp	r4, #255	@ 0xff
 801e9fe:	d020      	beq.n	801ea42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801ea00:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea02:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea08:	4367      	muls	r7, r4
 801ea0a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea10:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea14:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ea16:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea1e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea22:	44bc      	add	ip, r7
 801ea24:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ea28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea3c:	ea4c 040a 	orr.w	r4, ip, sl
 801ea40:	9409      	str	r4, [sp, #36]	@ 0x24
 801ea42:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea44:	2cff      	cmp	r4, #255	@ 0xff
 801ea46:	d020      	beq.n	801ea8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ea48:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ea4a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea4e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea50:	4367      	muls	r7, r4
 801ea52:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ea54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ea58:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ea5c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ea5e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ea62:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea66:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea6a:	44bc      	add	ip, r7
 801ea6c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ea70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ea78:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ea7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea80:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ea84:	ea4c 040a 	orr.w	r4, ip, sl
 801ea88:	940e      	str	r4, [sp, #56]	@ 0x38
 801ea8a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ea8c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ea90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ea94:	43d2      	mvns	r2, r2
 801ea96:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ea9a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ea9c:	b2d2      	uxtb	r2, r2
 801ea9e:	fb08 f707 	mul.w	r7, r8, r7
 801eaa2:	fb01 770c 	mla	r7, r1, ip, r7
 801eaa6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eaaa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eaac:	fb00 770c 	mla	r7, r0, ip, r7
 801eab0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801eab4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801eab6:	fb09 770c 	mla	r7, r9, ip, r7
 801eaba:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801eabe:	fb08 f80c 	mul.w	r8, r8, ip
 801eac2:	0a3f      	lsrs	r7, r7, #8
 801eac4:	fb01 8303 	mla	r3, r1, r3, r8
 801eac8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801eaca:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801eace:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801ead2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ead4:	fb00 330a 	mla	r3, r0, sl, r3
 801ead8:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801eadc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801eae0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801eae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eae8:	fb03 f102 	mul.w	r1, r3, r2
 801eaec:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801eaf0:	1c4b      	adds	r3, r1, #1
 801eaf2:	ea47 070c 	orr.w	r7, r7, ip
 801eaf6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eafa:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801eafe:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801eb02:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801eb06:	4353      	muls	r3, r2
 801eb08:	1c59      	adds	r1, r3, #1
 801eb0a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801eb0e:	0a3b      	lsrs	r3, r7, #8
 801eb10:	0c3f      	lsrs	r7, r7, #16
 801eb12:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801eb16:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801eb1a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801eb1e:	435a      	muls	r2, r3
 801eb20:	1c53      	adds	r3, r2, #1
 801eb22:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801eb26:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801eb2a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801eb2e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801eb30:	f10e 0e03 	add.w	lr, lr, #3
 801eb34:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801eb36:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb3a:	441a      	add	r2, r3
 801eb3c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801eb3e:	9225      	str	r2, [sp, #148]	@ 0x94
 801eb40:	441d      	add	r5, r3
 801eb42:	e65a      	b.n	801e7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801eb44:	2800      	cmp	r0, #0
 801eb46:	f43f aef7 	beq.w	801e938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eb4a:	5c79      	ldrb	r1, [r7, r1]
 801eb4c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801eb50:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb52:	0e09      	lsrs	r1, r1, #24
 801eb54:	9111      	str	r1, [sp, #68]	@ 0x44
 801eb56:	e6ef      	b.n	801e938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eb58:	b01b      	add	sp, #108	@ 0x6c
 801eb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eb5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801eb5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb62:	b08d      	sub	sp, #52	@ 0x34
 801eb64:	468b      	mov	fp, r1
 801eb66:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801eb6a:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801eb6e:	fb0c 5703 	mla	r7, ip, r3, r5
 801eb72:	f1bc 0f00 	cmp.w	ip, #0
 801eb76:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eb78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801eb7c:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801eb80:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801eb84:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801eb88:	eb02 0607 	add.w	r6, r2, r7
 801eb8c:	f89b 4000 	ldrb.w	r4, [fp]
 801eb90:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801eb94:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801eb98:	f2c0 80c1 	blt.w	801ed1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801eb9c:	45e6      	cmp	lr, ip
 801eb9e:	f340 80be 	ble.w	801ed1e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801eba2:	2d00      	cmp	r5, #0
 801eba4:	f2c0 80b7 	blt.w	801ed16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801eba8:	42ab      	cmp	r3, r5
 801ebaa:	f340 80b4 	ble.w	801ed16 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ebae:	5dd2      	ldrb	r2, [r2, r7]
 801ebb0:	9205      	str	r2, [sp, #20]
 801ebb2:	7872      	ldrb	r2, [r6, #1]
 801ebb4:	9206      	str	r2, [sp, #24]
 801ebb6:	78b2      	ldrb	r2, [r6, #2]
 801ebb8:	9207      	str	r2, [sp, #28]
 801ebba:	1c6a      	adds	r2, r5, #1
 801ebbc:	f100 80b6 	bmi.w	801ed2c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebc0:	4293      	cmp	r3, r2
 801ebc2:	f340 80b3 	ble.w	801ed2c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebc6:	f1b8 0f00 	cmp.w	r8, #0
 801ebca:	f000 80af 	beq.w	801ed2c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ebce:	78f2      	ldrb	r2, [r6, #3]
 801ebd0:	9201      	str	r2, [sp, #4]
 801ebd2:	7932      	ldrb	r2, [r6, #4]
 801ebd4:	9202      	str	r2, [sp, #8]
 801ebd6:	7972      	ldrb	r2, [r6, #5]
 801ebd8:	9203      	str	r2, [sp, #12]
 801ebda:	f11c 0c01 	adds.w	ip, ip, #1
 801ebde:	f100 80ad 	bmi.w	801ed3c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ebe2:	45e6      	cmp	lr, ip
 801ebe4:	f340 80aa 	ble.w	801ed3c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ebe8:	f1ba 0f00 	cmp.w	sl, #0
 801ebec:	f000 80a6 	beq.w	801ed3c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ebf0:	2d00      	cmp	r5, #0
 801ebf2:	f2c0 809f 	blt.w	801ed34 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ebf6:	42ab      	cmp	r3, r5
 801ebf8:	f340 809c 	ble.w	801ed34 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ebfc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ec00:	f816 9002 	ldrb.w	r9, [r6, r2]
 801ec04:	2203      	movs	r2, #3
 801ec06:	fb03 6c02 	mla	ip, r3, r2, r6
 801ec0a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801ec0e:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ec12:	9704      	str	r7, [sp, #16]
 801ec14:	3501      	adds	r5, #1
 801ec16:	f100 8098 	bmi.w	801ed4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec1a:	42ab      	cmp	r3, r5
 801ec1c:	f340 8095 	ble.w	801ed4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec20:	f1b8 0f00 	cmp.w	r8, #0
 801ec24:	f000 8091 	beq.w	801ed4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ec28:	f04f 0c03 	mov.w	ip, #3
 801ec2c:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801ec30:	5cb5      	ldrb	r5, [r6, r2]
 801ec32:	fb03 620c 	mla	r2, r3, ip, r6
 801ec36:	fb03 630c 	mla	r3, r3, ip, r6
 801ec3a:	7912      	ldrb	r2, [r2, #4]
 801ec3c:	795e      	ldrb	r6, [r3, #5]
 801ec3e:	fa1f f388 	uxth.w	r3, r8
 801ec42:	fa1f fc8a 	uxth.w	ip, sl
 801ec46:	fb03 f70c 	mul.w	r7, r3, ip
 801ec4a:	011b      	lsls	r3, r3, #4
 801ec4c:	9708      	str	r7, [sp, #32]
 801ec4e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801ec52:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801ec56:	1bdb      	subs	r3, r3, r7
 801ec58:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801ec5c:	fa1f fc8c 	uxth.w	ip, ip
 801ec60:	b29b      	uxth	r3, r3
 801ec62:	9709      	str	r7, [sp, #36]	@ 0x24
 801ec64:	ebaa 0a0c 	sub.w	sl, sl, ip
 801ec68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ec6a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ec6c:	fa1f fa8a 	uxth.w	sl, sl
 801ec70:	ea6f 0807 	mvn.w	r8, r7
 801ec74:	9f01      	ldr	r7, [sp, #4]
 801ec76:	435f      	muls	r7, r3
 801ec78:	9b05      	ldr	r3, [sp, #20]
 801ec7a:	fa5f f888 	uxtb.w	r8, r8
 801ec7e:	fb0a 7703 	mla	r7, sl, r3, r7
 801ec82:	9b08      	ldr	r3, [sp, #32]
 801ec84:	fb14 f408 	smulbb	r4, r4, r8
 801ec88:	fb0c 7709 	mla	r7, ip, r9, r7
 801ec8c:	fb10 f008 	smulbb	r0, r0, r8
 801ec90:	fb11 f108 	smulbb	r1, r1, r8
 801ec94:	fb03 7705 	mla	r7, r3, r5, r7
 801ec98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec9a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ec9e:	fb07 4703 	mla	r7, r7, r3, r4
 801eca2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eca4:	b2bf      	uxth	r7, r7
 801eca6:	1c7c      	adds	r4, r7, #1
 801eca8:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801ecac:	1224      	asrs	r4, r4, #8
 801ecae:	f88b 4000 	strb.w	r4, [fp]
 801ecb2:	9c02      	ldr	r4, [sp, #8]
 801ecb4:	435c      	muls	r4, r3
 801ecb6:	9b06      	ldr	r3, [sp, #24]
 801ecb8:	fb0a 4403 	mla	r4, sl, r3, r4
 801ecbc:	9b04      	ldr	r3, [sp, #16]
 801ecbe:	fb0c 4403 	mla	r4, ip, r3, r4
 801ecc2:	9b08      	ldr	r3, [sp, #32]
 801ecc4:	fb03 4402 	mla	r4, r3, r2, r4
 801ecc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eccc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ecd0:	fb04 0403 	mla	r4, r4, r3, r0
 801ecd4:	9b03      	ldr	r3, [sp, #12]
 801ecd6:	435a      	muls	r2, r3
 801ecd8:	b2a4      	uxth	r4, r4
 801ecda:	4613      	mov	r3, r2
 801ecdc:	9a07      	ldr	r2, [sp, #28]
 801ecde:	1c60      	adds	r0, r4, #1
 801ece0:	fb0a 3a02 	mla	sl, sl, r2, r3
 801ece4:	9b08      	ldr	r3, [sp, #32]
 801ece6:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801ecea:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ecee:	1224      	asrs	r4, r4, #8
 801ecf0:	fb03 c606 	mla	r6, r3, r6, ip
 801ecf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecf6:	f88b 4001 	strb.w	r4, [fp, #1]
 801ecfa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ecfe:	fb06 1103 	mla	r1, r6, r3, r1
 801ed02:	b289      	uxth	r1, r1
 801ed04:	1c4e      	adds	r6, r1, #1
 801ed06:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801ed0a:	1209      	asrs	r1, r1, #8
 801ed0c:	f88b 1002 	strb.w	r1, [fp, #2]
 801ed10:	b00d      	add	sp, #52	@ 0x34
 801ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed1a:	9405      	str	r4, [sp, #20]
 801ed1c:	e74d      	b.n	801ebba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801ed1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed22:	9401      	str	r4, [sp, #4]
 801ed24:	9405      	str	r4, [sp, #20]
 801ed26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ed2a:	e756      	b.n	801ebda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ed2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed30:	9401      	str	r4, [sp, #4]
 801ed32:	e752      	b.n	801ebda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ed34:	468e      	mov	lr, r1
 801ed36:	9004      	str	r0, [sp, #16]
 801ed38:	46a1      	mov	r9, r4
 801ed3a:	e76b      	b.n	801ec14 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801ed3c:	460e      	mov	r6, r1
 801ed3e:	4602      	mov	r2, r0
 801ed40:	4625      	mov	r5, r4
 801ed42:	468e      	mov	lr, r1
 801ed44:	9004      	str	r0, [sp, #16]
 801ed46:	46a1      	mov	r9, r4
 801ed48:	e779      	b.n	801ec3e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801ed4a:	460e      	mov	r6, r1
 801ed4c:	4602      	mov	r2, r0
 801ed4e:	4625      	mov	r5, r4
 801ed50:	e775      	b.n	801ec3e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801ed52 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed56:	b09f      	sub	sp, #124	@ 0x7c
 801ed58:	920e      	str	r2, [sp, #56]	@ 0x38
 801ed5a:	9307      	str	r3, [sp, #28]
 801ed5c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801ed5e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801ed62:	901d      	str	r0, [sp, #116]	@ 0x74
 801ed64:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed66:	6850      	ldr	r0, [r2, #4]
 801ed68:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed6a:	6812      	ldr	r2, [r2, #0]
 801ed6c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801ed70:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801ed74:	fb00 1303 	mla	r3, r0, r3, r1
 801ed78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed7c:	18d3      	adds	r3, r2, r3
 801ed7e:	9308      	str	r3, [sp, #32]
 801ed80:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ed82:	681b      	ldr	r3, [r3, #0]
 801ed84:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed88:	43db      	mvns	r3, r3
 801ed8a:	b2db      	uxtb	r3, r3
 801ed8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed90:	2b00      	cmp	r3, #0
 801ed92:	dc03      	bgt.n	801ed9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ed94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed96:	2b00      	cmp	r3, #0
 801ed98:	f340 81f5 	ble.w	801f186 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ed9c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ed9e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eda2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eda6:	1e48      	subs	r0, r1, #1
 801eda8:	1e54      	subs	r4, r2, #1
 801edaa:	9b07      	ldr	r3, [sp, #28]
 801edac:	2b00      	cmp	r3, #0
 801edae:	f340 80d5 	ble.w	801ef5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801edb2:	ea5f 452a 	movs.w	r5, sl, asr #16
 801edb6:	ea4f 4328 	mov.w	r3, r8, asr #16
 801edba:	d406      	bmi.n	801edca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edbc:	4285      	cmp	r5, r0
 801edbe:	da04      	bge.n	801edca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	db02      	blt.n	801edca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edc4:	42a3      	cmp	r3, r4
 801edc6:	f2c0 80ca 	blt.w	801ef5e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801edca:	3501      	adds	r5, #1
 801edcc:	f100 80bb 	bmi.w	801ef46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801edd0:	42a9      	cmp	r1, r5
 801edd2:	f2c0 80b8 	blt.w	801ef46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801edd6:	3301      	adds	r3, #1
 801edd8:	f100 80b5 	bmi.w	801ef46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801eddc:	429a      	cmp	r2, r3
 801edde:	f2c0 80b2 	blt.w	801ef46 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ede2:	9b07      	ldr	r3, [sp, #28]
 801ede4:	9d08      	ldr	r5, [sp, #32]
 801ede6:	930d      	str	r3, [sp, #52]	@ 0x34
 801ede8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801edea:	2b00      	cmp	r3, #0
 801edec:	f340 80d6 	ble.w	801ef9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801edf0:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801edf2:	ea4f 4428 	mov.w	r4, r8, asr #16
 801edf6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801edf8:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801edfc:	68c6      	ldr	r6, [r0, #12]
 801edfe:	ea5f 402a 	movs.w	r0, sl, asr #16
 801ee02:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801ee06:	689b      	ldr	r3, [r3, #8]
 801ee08:	f100 810f 	bmi.w	801f02a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee0c:	1e5f      	subs	r7, r3, #1
 801ee0e:	42b8      	cmp	r0, r7
 801ee10:	f280 810b 	bge.w	801f02a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee14:	2c00      	cmp	r4, #0
 801ee16:	f2c0 8108 	blt.w	801f02a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee1a:	1e77      	subs	r7, r6, #1
 801ee1c:	42bc      	cmp	r4, r7
 801ee1e:	f280 8104 	bge.w	801f02a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ee22:	b21b      	sxth	r3, r3
 801ee24:	fb04 0003 	mla	r0, r4, r3, r0
 801ee28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ee2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ee2e:	1826      	adds	r6, r4, r0
 801ee30:	5c24      	ldrb	r4, [r4, r0]
 801ee32:	78b7      	ldrb	r7, [r6, #2]
 801ee34:	7870      	ldrb	r0, [r6, #1]
 801ee36:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ee38:	7977      	ldrb	r7, [r6, #5]
 801ee3a:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ee3e:	f896 c004 	ldrb.w	ip, [r6, #4]
 801ee42:	9710      	str	r7, [sp, #64]	@ 0x40
 801ee44:	b1c9      	cbz	r1, 801ee7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ee46:	f04f 0b03 	mov.w	fp, #3
 801ee4a:	f06f 0904 	mvn.w	r9, #4
 801ee4e:	3605      	adds	r6, #5
 801ee50:	fb13 930b 	smlabb	r3, r3, fp, r9
 801ee54:	eb06 0b03 	add.w	fp, r6, r3
 801ee58:	5cf3      	ldrb	r3, [r6, r3]
 801ee5a:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee5c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801ee60:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ee62:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801ee66:	9315      	str	r3, [sp, #84]	@ 0x54
 801ee68:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801ee6c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ee6e:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801ee72:	9314      	str	r3, [sp, #80]	@ 0x50
 801ee74:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801ee78:	9316      	str	r3, [sp, #88]	@ 0x58
 801ee7a:	b292      	uxth	r2, r2
 801ee7c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801ee7e:	b289      	uxth	r1, r1
 801ee80:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801ee84:	fb02 f601 	mul.w	r6, r2, r1
 801ee88:	0112      	lsls	r2, r2, #4
 801ee8a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801ee8e:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801ee92:	1b92      	subs	r2, r2, r6
 801ee94:	b289      	uxth	r1, r1
 801ee96:	b292      	uxth	r2, r2
 801ee98:	eba9 0901 	sub.w	r9, r9, r1
 801ee9c:	fb02 fe0e 	mul.w	lr, r2, lr
 801eea0:	fa1f f989 	uxth.w	r9, r9
 801eea4:	fb02 fc0c 	mul.w	ip, r2, ip
 801eea8:	fb09 e404 	mla	r4, r9, r4, lr
 801eeac:	f895 e000 	ldrb.w	lr, [r5]
 801eeb0:	fb09 c000 	mla	r0, r9, r0, ip
 801eeb4:	fb01 4407 	mla	r4, r1, r7, r4
 801eeb8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801eeba:	fb06 4407 	mla	r4, r6, r7, r4
 801eebe:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801eec0:	fb1e fe07 	smulbb	lr, lr, r7
 801eec4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801eec8:	fb04 e403 	mla	r4, r4, r3, lr
 801eecc:	b2a4      	uxth	r4, r4
 801eece:	f104 0e01 	add.w	lr, r4, #1
 801eed2:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801eed6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eed8:	fb01 0004 	mla	r0, r1, r4, r0
 801eedc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801eede:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eee2:	fb06 0004 	mla	r0, r6, r4, r0
 801eee6:	786c      	ldrb	r4, [r5, #1]
 801eee8:	f885 e000 	strb.w	lr, [r5]
 801eeec:	fb14 f407 	smulbb	r4, r4, r7
 801eef0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801eef4:	fb00 4003 	mla	r0, r0, r3, r4
 801eef8:	b280      	uxth	r0, r0
 801eefa:	1c44      	adds	r4, r0, #1
 801eefc:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801ef00:	1200      	asrs	r0, r0, #8
 801ef02:	7068      	strb	r0, [r5, #1]
 801ef04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ef06:	4342      	muls	r2, r0
 801ef08:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ef0a:	fb09 2200 	mla	r2, r9, r0, r2
 801ef0e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801ef10:	fb01 2100 	mla	r1, r1, r0, r2
 801ef14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ef16:	fb06 1602 	mla	r6, r6, r2, r1
 801ef1a:	78a9      	ldrb	r1, [r5, #2]
 801ef1c:	fb11 f107 	smulbb	r1, r1, r7
 801ef20:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ef24:	fb06 1303 	mla	r3, r6, r3, r1
 801ef28:	b29b      	uxth	r3, r3
 801ef2a:	1c5e      	adds	r6, r3, #1
 801ef2c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801ef30:	121b      	asrs	r3, r3, #8
 801ef32:	70ab      	strb	r3, [r5, #2]
 801ef34:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ef36:	3503      	adds	r5, #3
 801ef38:	449a      	add	sl, r3
 801ef3a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef3c:	4498      	add	r8, r3
 801ef3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef40:	3b01      	subs	r3, #1
 801ef42:	930d      	str	r3, [sp, #52]	@ 0x34
 801ef44:	e750      	b.n	801ede8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ef46:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ef48:	449a      	add	sl, r3
 801ef4a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ef4c:	4498      	add	r8, r3
 801ef4e:	9b07      	ldr	r3, [sp, #28]
 801ef50:	3b01      	subs	r3, #1
 801ef52:	9307      	str	r3, [sp, #28]
 801ef54:	9b08      	ldr	r3, [sp, #32]
 801ef56:	3303      	adds	r3, #3
 801ef58:	9308      	str	r3, [sp, #32]
 801ef5a:	e726      	b.n	801edaa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ef5c:	d026      	beq.n	801efac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801ef5e:	9b07      	ldr	r3, [sp, #28]
 801ef60:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801ef62:	3b01      	subs	r3, #1
 801ef64:	fb00 a003 	mla	r0, r0, r3, sl
 801ef68:	1400      	asrs	r0, r0, #16
 801ef6a:	f53f af3a 	bmi.w	801ede2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef6e:	3901      	subs	r1, #1
 801ef70:	4288      	cmp	r0, r1
 801ef72:	f6bf af36 	bge.w	801ede2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef76:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801ef78:	fb01 8303 	mla	r3, r1, r3, r8
 801ef7c:	141b      	asrs	r3, r3, #16
 801ef7e:	f53f af30 	bmi.w	801ede2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef82:	3a01      	subs	r2, #1
 801ef84:	4293      	cmp	r3, r2
 801ef86:	f6bf af2c 	bge.w	801ede2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ef8a:	9b08      	ldr	r3, [sp, #32]
 801ef8c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ef90:	1cdd      	adds	r5, r3, #3
 801ef92:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801ef96:	f1bc 0f00 	cmp.w	ip, #0
 801ef9a:	dc5f      	bgt.n	801f05c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801ef9c:	9b07      	ldr	r3, [sp, #28]
 801ef9e:	9a08      	ldr	r2, [sp, #32]
 801efa0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801efa8:	441a      	add	r2, r3
 801efaa:	9208      	str	r2, [sp, #32]
 801efac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efae:	2b00      	cmp	r3, #0
 801efb0:	f340 80e9 	ble.w	801f186 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801efb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801efb8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801efba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efc2:	eef0 6a62 	vmov.f32	s13, s5
 801efc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801efca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efd2:	ee16 aa90 	vmov	sl, s13
 801efd6:	eef0 6a43 	vmov.f32	s13, s6
 801efda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801efde:	ee16 8a90 	vmov	r8, s13
 801efe2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801efe6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801efea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801efee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eff2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eff6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801effa:	ee12 2a90 	vmov	r2, s5
 801effe:	eef0 2a47 	vmov.f32	s5, s14
 801f002:	fb92 f3f3 	sdiv	r3, r2, r3
 801f006:	ee13 2a10 	vmov	r2, s6
 801f00a:	932b      	str	r3, [sp, #172]	@ 0xac
 801f00c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f00e:	eeb0 3a67 	vmov.f32	s6, s15
 801f012:	fb92 f3f3 	sdiv	r3, r2, r3
 801f016:	932c      	str	r3, [sp, #176]	@ 0xb0
 801f018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f01a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f01c:	3b01      	subs	r3, #1
 801f01e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f020:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f022:	bf08      	it	eq
 801f024:	4613      	moveq	r3, r2
 801f026:	9307      	str	r3, [sp, #28]
 801f028:	e6b1      	b.n	801ed8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f02a:	1c47      	adds	r7, r0, #1
 801f02c:	d482      	bmi.n	801ef34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f02e:	42bb      	cmp	r3, r7
 801f030:	db80      	blt.n	801ef34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f032:	1c67      	adds	r7, r4, #1
 801f034:	f53f af7e 	bmi.w	801ef34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f038:	42be      	cmp	r6, r7
 801f03a:	f6ff af7b 	blt.w	801ef34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f03e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f040:	b236      	sxth	r6, r6
 801f042:	9001      	str	r0, [sp, #4]
 801f044:	b21b      	sxth	r3, r3
 801f046:	9600      	str	r6, [sp, #0]
 801f048:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801f04a:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801f04e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801f052:	4629      	mov	r1, r5
 801f054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f056:	f7ff fd82 	bl	801eb5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f05a:	e76b      	b.n	801ef34 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f05c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801f05e:	ea4f 402a 	mov.w	r0, sl, asr #16
 801f062:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801f066:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801f06a:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801f06e:	ea4f 4128 	mov.w	r1, r8, asr #16
 801f072:	fb07 0101 	mla	r1, r7, r1, r0
 801f076:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f078:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f07c:	1844      	adds	r4, r0, r1
 801f07e:	5c40      	ldrb	r0, [r0, r1]
 801f080:	78a6      	ldrb	r6, [r4, #2]
 801f082:	7861      	ldrb	r1, [r4, #1]
 801f084:	960f      	str	r6, [sp, #60]	@ 0x3c
 801f086:	78e6      	ldrb	r6, [r4, #3]
 801f088:	910d      	str	r1, [sp, #52]	@ 0x34
 801f08a:	9610      	str	r6, [sp, #64]	@ 0x40
 801f08c:	f894 9004 	ldrb.w	r9, [r4, #4]
 801f090:	f894 b005 	ldrb.w	fp, [r4, #5]
 801f094:	b192      	cbz	r2, 801f0bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f096:	f06f 0604 	mvn.w	r6, #4
 801f09a:	2103      	movs	r1, #3
 801f09c:	3405      	adds	r4, #5
 801f09e:	fb17 6701 	smlabb	r7, r7, r1, r6
 801f0a2:	19e6      	adds	r6, r4, r7
 801f0a4:	5de4      	ldrb	r4, [r4, r7]
 801f0a6:	9417      	str	r4, [sp, #92]	@ 0x5c
 801f0a8:	7874      	ldrb	r4, [r6, #1]
 801f0aa:	9419      	str	r4, [sp, #100]	@ 0x64
 801f0ac:	78b4      	ldrb	r4, [r6, #2]
 801f0ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 801f0b0:	78f4      	ldrb	r4, [r6, #3]
 801f0b2:	9418      	str	r4, [sp, #96]	@ 0x60
 801f0b4:	7934      	ldrb	r4, [r6, #4]
 801f0b6:	941a      	str	r4, [sp, #104]	@ 0x68
 801f0b8:	7974      	ldrb	r4, [r6, #5]
 801f0ba:	941c      	str	r4, [sp, #112]	@ 0x70
 801f0bc:	b29b      	uxth	r3, r3
 801f0be:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f0c0:	b292      	uxth	r2, r2
 801f0c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f0c4:	3503      	adds	r5, #3
 801f0c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f0ca:	fb03 f402 	mul.w	r4, r3, r2
 801f0ce:	011b      	lsls	r3, r3, #4
 801f0d0:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801f0d4:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801f0d8:	1b1b      	subs	r3, r3, r4
 801f0da:	b292      	uxth	r2, r2
 801f0dc:	b29b      	uxth	r3, r3
 801f0de:	1ab6      	subs	r6, r6, r2
 801f0e0:	435f      	muls	r7, r3
 801f0e2:	b2b6      	uxth	r6, r6
 801f0e4:	fb03 f909 	mul.w	r9, r3, r9
 801f0e8:	fb03 fb0b 	mul.w	fp, r3, fp
 801f0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0ee:	fb06 7000 	mla	r0, r6, r0, r7
 801f0f2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801f0f4:	fb06 bb03 	mla	fp, r6, r3, fp
 801f0f8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f0fa:	fb02 0007 	mla	r0, r2, r7, r0
 801f0fe:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801f100:	fb02 bb03 	mla	fp, r2, r3, fp
 801f104:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801f106:	fb04 0007 	mla	r0, r4, r7, r0
 801f10a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801f10e:	fb17 f701 	smulbb	r7, r7, r1
 801f112:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f116:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f118:	fb00 700e 	mla	r0, r0, lr, r7
 801f11c:	fb06 9101 	mla	r1, r6, r1, r9
 801f120:	b280      	uxth	r0, r0
 801f122:	1c47      	adds	r7, r0, #1
 801f124:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f128:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801f12a:	1200      	asrs	r0, r0, #8
 801f12c:	f805 0c06 	strb.w	r0, [r5, #-6]
 801f130:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f132:	fb02 1100 	mla	r1, r2, r0, r1
 801f136:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801f138:	fb04 1100 	mla	r1, r4, r0, r1
 801f13c:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801f140:	fb04 b403 	mla	r4, r4, r3, fp
 801f144:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801f148:	fb10 f007 	smulbb	r0, r0, r7
 801f14c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f150:	fb13 f307 	smulbb	r3, r3, r7
 801f154:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f158:	fb01 010e 	mla	r1, r1, lr, r0
 801f15c:	fb04 340e 	mla	r4, r4, lr, r3
 801f160:	b289      	uxth	r1, r1
 801f162:	b2a4      	uxth	r4, r4
 801f164:	1c48      	adds	r0, r1, #1
 801f166:	1c63      	adds	r3, r4, #1
 801f168:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f16c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f170:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801f172:	1209      	asrs	r1, r1, #8
 801f174:	1224      	asrs	r4, r4, #8
 801f176:	449a      	add	sl, r3
 801f178:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f17a:	f805 1c05 	strb.w	r1, [r5, #-5]
 801f17e:	f805 4c04 	strb.w	r4, [r5, #-4]
 801f182:	4498      	add	r8, r3
 801f184:	e707      	b.n	801ef96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f186:	b01f      	add	sp, #124	@ 0x7c
 801f188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f18c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f190:	b087      	sub	sp, #28
 801f192:	780d      	ldrb	r5, [r1, #0]
 801f194:	784c      	ldrb	r4, [r1, #1]
 801f196:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801f19a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801f19e:	9004      	str	r0, [sp, #16]
 801f1a0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801f1a4:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801f1a8:	9005      	str	r0, [sp, #20]
 801f1aa:	fb06 bc03 	mla	ip, r6, r3, fp
 801f1ae:	2e00      	cmp	r6, #0
 801f1b0:	7888      	ldrb	r0, [r1, #2]
 801f1b2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f1b6:	eb02 090c 	add.w	r9, r2, ip
 801f1ba:	f2c0 8084 	blt.w	801f2c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f1be:	42b7      	cmp	r7, r6
 801f1c0:	f340 8081 	ble.w	801f2c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f1c4:	f1bb 0f00 	cmp.w	fp, #0
 801f1c8:	db79      	blt.n	801f2be <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f1ca:	455b      	cmp	r3, fp
 801f1cc:	dd77      	ble.n	801f2be <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f1ce:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f1d2:	9201      	str	r2, [sp, #4]
 801f1d4:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f1d8:	9202      	str	r2, [sp, #8]
 801f1da:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f1de:	9203      	str	r2, [sp, #12]
 801f1e0:	f11b 0201 	adds.w	r2, fp, #1
 801f1e4:	d476      	bmi.n	801f2d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f1e6:	4293      	cmp	r3, r2
 801f1e8:	dd74      	ble.n	801f2d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f1ea:	9a04      	ldr	r2, [sp, #16]
 801f1ec:	2a00      	cmp	r2, #0
 801f1ee:	d071      	beq.n	801f2d4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f1f0:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f1f4:	f899 c004 	ldrb.w	ip, [r9, #4]
 801f1f8:	f899 a005 	ldrb.w	sl, [r9, #5]
 801f1fc:	3601      	adds	r6, #1
 801f1fe:	d471      	bmi.n	801f2e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f200:	42b7      	cmp	r7, r6
 801f202:	dd6f      	ble.n	801f2e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f204:	9a05      	ldr	r2, [sp, #20]
 801f206:	2a00      	cmp	r2, #0
 801f208:	d06c      	beq.n	801f2e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f20a:	f1bb 0f00 	cmp.w	fp, #0
 801f20e:	db65      	blt.n	801f2dc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f210:	455b      	cmp	r3, fp
 801f212:	dd63      	ble.n	801f2dc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f214:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f218:	f819 e002 	ldrb.w	lr, [r9, r2]
 801f21c:	2203      	movs	r2, #3
 801f21e:	fb03 9602 	mla	r6, r3, r2, r9
 801f222:	7877      	ldrb	r7, [r6, #1]
 801f224:	78b6      	ldrb	r6, [r6, #2]
 801f226:	f11b 0b01 	adds.w	fp, fp, #1
 801f22a:	d40c      	bmi.n	801f246 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f22c:	455b      	cmp	r3, fp
 801f22e:	dd0a      	ble.n	801f246 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f230:	9a04      	ldr	r2, [sp, #16]
 801f232:	b142      	cbz	r2, 801f246 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f234:	2203      	movs	r2, #3
 801f236:	fb13 2002 	smlabb	r0, r3, r2, r2
 801f23a:	f819 5000 	ldrb.w	r5, [r9, r0]
 801f23e:	fb03 9002 	mla	r0, r3, r2, r9
 801f242:	7904      	ldrb	r4, [r0, #4]
 801f244:	7940      	ldrb	r0, [r0, #5]
 801f246:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f24a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f24e:	fb03 fb02 	mul.w	fp, r3, r2
 801f252:	011b      	lsls	r3, r3, #4
 801f254:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f258:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801f25c:	eba3 030b 	sub.w	r3, r3, fp
 801f260:	b292      	uxth	r2, r2
 801f262:	b29b      	uxth	r3, r3
 801f264:	eba9 0902 	sub.w	r9, r9, r2
 801f268:	9304      	str	r3, [sp, #16]
 801f26a:	fa1f f989 	uxth.w	r9, r9
 801f26e:	fb03 f808 	mul.w	r8, r3, r8
 801f272:	9b01      	ldr	r3, [sp, #4]
 801f274:	fb09 8803 	mla	r8, r9, r3, r8
 801f278:	9b04      	ldr	r3, [sp, #16]
 801f27a:	fb03 fc0c 	mul.w	ip, r3, ip
 801f27e:	9b02      	ldr	r3, [sp, #8]
 801f280:	fb02 880e 	mla	r8, r2, lr, r8
 801f284:	fb09 cc03 	mla	ip, r9, r3, ip
 801f288:	9b04      	ldr	r3, [sp, #16]
 801f28a:	fb0b 8805 	mla	r8, fp, r5, r8
 801f28e:	fb02 c707 	mla	r7, r2, r7, ip
 801f292:	fb03 f30a 	mul.w	r3, r3, sl
 801f296:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f29a:	fb0b 7404 	mla	r4, fp, r4, r7
 801f29e:	f881 8000 	strb.w	r8, [r1]
 801f2a2:	1224      	asrs	r4, r4, #8
 801f2a4:	704c      	strb	r4, [r1, #1]
 801f2a6:	9c03      	ldr	r4, [sp, #12]
 801f2a8:	fb09 3904 	mla	r9, r9, r4, r3
 801f2ac:	fb02 9206 	mla	r2, r2, r6, r9
 801f2b0:	fb0b 2000 	mla	r0, fp, r0, r2
 801f2b4:	1200      	asrs	r0, r0, #8
 801f2b6:	7088      	strb	r0, [r1, #2]
 801f2b8:	b007      	add	sp, #28
 801f2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2be:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f2c2:	9501      	str	r5, [sp, #4]
 801f2c4:	e78c      	b.n	801f1e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801f2c6:	4682      	mov	sl, r0
 801f2c8:	46a4      	mov	ip, r4
 801f2ca:	46a8      	mov	r8, r5
 801f2cc:	9501      	str	r5, [sp, #4]
 801f2ce:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f2d2:	e793      	b.n	801f1fc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f2d4:	4682      	mov	sl, r0
 801f2d6:	46a4      	mov	ip, r4
 801f2d8:	46a8      	mov	r8, r5
 801f2da:	e78f      	b.n	801f1fc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f2dc:	4606      	mov	r6, r0
 801f2de:	4627      	mov	r7, r4
 801f2e0:	46ae      	mov	lr, r5
 801f2e2:	e7a0      	b.n	801f226 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f2e4:	4606      	mov	r6, r0
 801f2e6:	4627      	mov	r7, r4
 801f2e8:	46ae      	mov	lr, r5
 801f2ea:	e7ac      	b.n	801f246 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801f2ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f0:	b09b      	sub	sp, #108	@ 0x6c
 801f2f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f2f4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801f2f6:	9019      	str	r0, [sp, #100]	@ 0x64
 801f2f8:	9109      	str	r1, [sp, #36]	@ 0x24
 801f2fa:	6850      	ldr	r0, [r2, #4]
 801f2fc:	9306      	str	r3, [sp, #24]
 801f2fe:	6812      	ldr	r2, [r2, #0]
 801f300:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801f304:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801f308:	fb00 1303 	mla	r3, r0, r3, r1
 801f30c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f310:	18d3      	adds	r3, r2, r3
 801f312:	9307      	str	r3, [sp, #28]
 801f314:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	9308      	str	r3, [sp, #32]
 801f31a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	dc03      	bgt.n	801f328 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f320:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f322:	2b00      	cmp	r3, #0
 801f324:	f340 81ab 	ble.w	801f67e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f328:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f32a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f32e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f332:	1e48      	subs	r0, r1, #1
 801f334:	1e55      	subs	r5, r2, #1
 801f336:	9b06      	ldr	r3, [sp, #24]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	f340 80b1 	ble.w	801f4a0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f33e:	ea5f 462b 	movs.w	r6, fp, asr #16
 801f342:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f346:	d406      	bmi.n	801f356 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f348:	4286      	cmp	r6, r0
 801f34a:	da04      	bge.n	801f356 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	db02      	blt.n	801f356 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f350:	42ab      	cmp	r3, r5
 801f352:	f2c0 80a6 	blt.w	801f4a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f356:	3601      	adds	r6, #1
 801f358:	f100 8097 	bmi.w	801f48a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f35c:	42b1      	cmp	r1, r6
 801f35e:	f2c0 8094 	blt.w	801f48a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f362:	3301      	adds	r3, #1
 801f364:	f100 8091 	bmi.w	801f48a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f368:	429a      	cmp	r2, r3
 801f36a:	f2c0 808e 	blt.w	801f48a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f36e:	9b06      	ldr	r3, [sp, #24]
 801f370:	9e07      	ldr	r6, [sp, #28]
 801f372:	930a      	str	r3, [sp, #40]	@ 0x28
 801f374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f376:	2b00      	cmp	r3, #0
 801f378:	f340 80b0 	ble.w	801f4dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f37c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801f37e:	1425      	asrs	r5, r4, #16
 801f380:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801f382:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f386:	68c7      	ldr	r7, [r0, #12]
 801f388:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f38c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f390:	689b      	ldr	r3, [r3, #8]
 801f392:	f100 80ea 	bmi.w	801f56a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f396:	f103 3cff 	add.w	ip, r3, #4294967295
 801f39a:	4560      	cmp	r0, ip
 801f39c:	f280 80e5 	bge.w	801f56a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3a0:	2d00      	cmp	r5, #0
 801f3a2:	f2c0 80e2 	blt.w	801f56a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3a6:	f107 3cff 	add.w	ip, r7, #4294967295
 801f3aa:	4565      	cmp	r5, ip
 801f3ac:	f280 80dd 	bge.w	801f56a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f3b0:	b21b      	sxth	r3, r3
 801f3b2:	fb05 0003 	mla	r0, r5, r3, r0
 801f3b6:	9d08      	ldr	r5, [sp, #32]
 801f3b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f3bc:	182f      	adds	r7, r5, r0
 801f3be:	5c2d      	ldrb	r5, [r5, r0]
 801f3c0:	7878      	ldrb	r0, [r7, #1]
 801f3c2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f3c6:	900c      	str	r0, [sp, #48]	@ 0x30
 801f3c8:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f3cc:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f3d0:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f3d4:	b1c9      	cbz	r1, 801f40a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f3d6:	f04f 0c03 	mov.w	ip, #3
 801f3da:	f06f 0004 	mvn.w	r0, #4
 801f3de:	3705      	adds	r7, #5
 801f3e0:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f3e4:	eb07 0c03 	add.w	ip, r7, r3
 801f3e8:	5cfb      	ldrb	r3, [r7, r3]
 801f3ea:	930d      	str	r3, [sp, #52]	@ 0x34
 801f3ec:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f3f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3f2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f3f6:	9311      	str	r3, [sp, #68]	@ 0x44
 801f3f8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f3fc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f3fe:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f402:	9310      	str	r3, [sp, #64]	@ 0x40
 801f404:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f408:	9312      	str	r3, [sp, #72]	@ 0x48
 801f40a:	b292      	uxth	r2, r2
 801f40c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801f40e:	b289      	uxth	r1, r1
 801f410:	fb02 f301 	mul.w	r3, r2, r1
 801f414:	0112      	lsls	r2, r2, #4
 801f416:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f41a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f41e:	1ad2      	subs	r2, r2, r3
 801f420:	b289      	uxth	r1, r1
 801f422:	b292      	uxth	r2, r2
 801f424:	1a7f      	subs	r7, r7, r1
 801f426:	fb02 f909 	mul.w	r9, r2, r9
 801f42a:	b2bf      	uxth	r7, r7
 801f42c:	fb02 f808 	mul.w	r8, r2, r8
 801f430:	fb02 fa0a 	mul.w	sl, r2, sl
 801f434:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f436:	fb07 9905 	mla	r9, r7, r5, r9
 801f43a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801f43c:	fb07 8800 	mla	r8, r7, r0, r8
 801f440:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801f442:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f446:	fb01 9905 	mla	r9, r1, r5, r9
 801f44a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801f44c:	fb01 8800 	mla	r8, r1, r0, r8
 801f450:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f452:	fb01 a102 	mla	r1, r1, r2, sl
 801f456:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f458:	fb03 9905 	mla	r9, r3, r5, r9
 801f45c:	fb03 8800 	mla	r8, r3, r0, r8
 801f460:	fb03 1302 	mla	r3, r3, r2, r1
 801f464:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f468:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f46c:	121b      	asrs	r3, r3, #8
 801f46e:	f886 9000 	strb.w	r9, [r6]
 801f472:	f886 8001 	strb.w	r8, [r6, #1]
 801f476:	70b3      	strb	r3, [r6, #2]
 801f478:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f47a:	3603      	adds	r6, #3
 801f47c:	449b      	add	fp, r3
 801f47e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f480:	441c      	add	r4, r3
 801f482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f484:	3b01      	subs	r3, #1
 801f486:	930a      	str	r3, [sp, #40]	@ 0x28
 801f488:	e774      	b.n	801f374 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f48a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f48c:	449b      	add	fp, r3
 801f48e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f490:	441c      	add	r4, r3
 801f492:	9b06      	ldr	r3, [sp, #24]
 801f494:	3b01      	subs	r3, #1
 801f496:	9306      	str	r3, [sp, #24]
 801f498:	9b07      	ldr	r3, [sp, #28]
 801f49a:	3303      	adds	r3, #3
 801f49c:	9307      	str	r3, [sp, #28]
 801f49e:	e74a      	b.n	801f336 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f4a0:	d024      	beq.n	801f4ec <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f4a2:	9b06      	ldr	r3, [sp, #24]
 801f4a4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801f4a6:	3b01      	subs	r3, #1
 801f4a8:	fb00 b003 	mla	r0, r0, r3, fp
 801f4ac:	1400      	asrs	r0, r0, #16
 801f4ae:	f53f af5e 	bmi.w	801f36e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4b2:	3901      	subs	r1, #1
 801f4b4:	4288      	cmp	r0, r1
 801f4b6:	f6bf af5a 	bge.w	801f36e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4ba:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801f4bc:	fb01 4303 	mla	r3, r1, r3, r4
 801f4c0:	141b      	asrs	r3, r3, #16
 801f4c2:	f53f af54 	bmi.w	801f36e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4c6:	3a01      	subs	r2, #1
 801f4c8:	4293      	cmp	r3, r2
 801f4ca:	f6bf af50 	bge.w	801f36e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f4ce:	9b07      	ldr	r3, [sp, #28]
 801f4d0:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f4d4:	1cde      	adds	r6, r3, #3
 801f4d6:	f1be 0f00 	cmp.w	lr, #0
 801f4da:	dc5f      	bgt.n	801f59c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f4dc:	9b06      	ldr	r3, [sp, #24]
 801f4de:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f4e2:	9b07      	ldr	r3, [sp, #28]
 801f4e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f4e8:	4423      	add	r3, r4
 801f4ea:	9307      	str	r3, [sp, #28]
 801f4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	f340 80c5 	ble.w	801f67e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f4f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f4f8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f4fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f502:	eef0 6a62 	vmov.f32	s13, s5
 801f506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f50a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f50e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f512:	ee16 ba90 	vmov	fp, s13
 801f516:	eef0 6a43 	vmov.f32	s13, s6
 801f51a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f51e:	ee16 4a90 	vmov	r4, s13
 801f522:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f526:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f52a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f52e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f532:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f536:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f53a:	ee12 2a90 	vmov	r2, s5
 801f53e:	eef0 2a47 	vmov.f32	s5, s14
 801f542:	fb92 f3f3 	sdiv	r3, r2, r3
 801f546:	ee13 2a10 	vmov	r2, s6
 801f54a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801f54c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f54e:	eeb0 3a67 	vmov.f32	s6, s15
 801f552:	fb92 f3f3 	sdiv	r3, r2, r3
 801f556:	9328      	str	r3, [sp, #160]	@ 0xa0
 801f558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f55a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f55c:	3b01      	subs	r3, #1
 801f55e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f560:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f562:	bf08      	it	eq
 801f564:	4613      	moveq	r3, r2
 801f566:	9306      	str	r3, [sp, #24]
 801f568:	e6d7      	b.n	801f31a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f56a:	f110 0c01 	adds.w	ip, r0, #1
 801f56e:	d483      	bmi.n	801f478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f570:	4563      	cmp	r3, ip
 801f572:	db81      	blt.n	801f478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f574:	f115 0c01 	adds.w	ip, r5, #1
 801f578:	f53f af7e 	bmi.w	801f478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f57c:	4567      	cmp	r7, ip
 801f57e:	f6ff af7b 	blt.w	801f478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f582:	b23f      	sxth	r7, r7
 801f584:	b21b      	sxth	r3, r3
 801f586:	9700      	str	r7, [sp, #0]
 801f588:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f58c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f590:	9a08      	ldr	r2, [sp, #32]
 801f592:	4631      	mov	r1, r6
 801f594:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801f596:	f7ff fdf9 	bl	801f18c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f59a:	e76d      	b.n	801f478 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f59c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801f59e:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f5a2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f5a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f5aa:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f5ae:	1421      	asrs	r1, r4, #16
 801f5b0:	930a      	str	r3, [sp, #40]	@ 0x28
 801f5b2:	fb0c 0101 	mla	r1, ip, r1, r0
 801f5b6:	9808      	ldr	r0, [sp, #32]
 801f5b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f5bc:	1845      	adds	r5, r0, r1
 801f5be:	5c40      	ldrb	r0, [r0, r1]
 801f5c0:	796f      	ldrb	r7, [r5, #5]
 801f5c2:	7869      	ldrb	r1, [r5, #1]
 801f5c4:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f5c8:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f5cc:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f5d0:	970c      	str	r7, [sp, #48]	@ 0x30
 801f5d2:	b1a2      	cbz	r2, 801f5fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f5d4:	2703      	movs	r7, #3
 801f5d6:	f06f 0304 	mvn.w	r3, #4
 801f5da:	3505      	adds	r5, #5
 801f5dc:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f5e0:	eb05 070c 	add.w	r7, r5, ip
 801f5e4:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f5e8:	9513      	str	r5, [sp, #76]	@ 0x4c
 801f5ea:	787d      	ldrb	r5, [r7, #1]
 801f5ec:	9515      	str	r5, [sp, #84]	@ 0x54
 801f5ee:	78bd      	ldrb	r5, [r7, #2]
 801f5f0:	9517      	str	r5, [sp, #92]	@ 0x5c
 801f5f2:	78fd      	ldrb	r5, [r7, #3]
 801f5f4:	9514      	str	r5, [sp, #80]	@ 0x50
 801f5f6:	793d      	ldrb	r5, [r7, #4]
 801f5f8:	9516      	str	r5, [sp, #88]	@ 0x58
 801f5fa:	797d      	ldrb	r5, [r7, #5]
 801f5fc:	9518      	str	r5, [sp, #96]	@ 0x60
 801f5fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f602:	b292      	uxth	r2, r2
 801f604:	3603      	adds	r6, #3
 801f606:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f60a:	fb03 f502 	mul.w	r5, r3, r2
 801f60e:	011b      	lsls	r3, r3, #4
 801f610:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f614:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801f618:	1b5b      	subs	r3, r3, r5
 801f61a:	b292      	uxth	r2, r2
 801f61c:	b29b      	uxth	r3, r3
 801f61e:	1abf      	subs	r7, r7, r2
 801f620:	fb03 f909 	mul.w	r9, r3, r9
 801f624:	b2bf      	uxth	r7, r7
 801f626:	fb03 fa0a 	mul.w	sl, r3, sl
 801f62a:	fb07 9901 	mla	r9, r7, r1, r9
 801f62e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801f630:	fb07 aa00 	mla	sl, r7, r0, sl
 801f634:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f636:	fb02 9901 	mla	r9, r2, r1, r9
 801f63a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801f63c:	fb02 aa00 	mla	sl, r2, r0, sl
 801f640:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f642:	fb05 9901 	mla	r9, r5, r1, r9
 801f646:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801f648:	fb05 aa00 	mla	sl, r5, r0, sl
 801f64c:	434b      	muls	r3, r1
 801f64e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f650:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f654:	fb07 3308 	mla	r3, r7, r8, r3
 801f658:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f65c:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f660:	fb02 3201 	mla	r2, r2, r1, r3
 801f664:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f666:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f66a:	fb05 2503 	mla	r5, r5, r3, r2
 801f66e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801f670:	122d      	asrs	r5, r5, #8
 801f672:	449b      	add	fp, r3
 801f674:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f676:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f67a:	441c      	add	r4, r3
 801f67c:	e72b      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f67e:	b01b      	add	sp, #108	@ 0x6c
 801f680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f684 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f688:	b087      	sub	sp, #28
 801f68a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801f68e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f692:	fb05 7003 	mla	r0, r5, r3, r7
 801f696:	2d00      	cmp	r5, #0
 801f698:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801f69c:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801f6a0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f6a4:	f2c0 811f 	blt.w	801f8e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f6a8:	45a8      	cmp	r8, r5
 801f6aa:	f340 811c 	ble.w	801f8e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f6ae:	2f00      	cmp	r7, #0
 801f6b0:	f2c0 8117 	blt.w	801f8e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f6b4:	42bb      	cmp	r3, r7
 801f6b6:	f340 8114 	ble.w	801f8e2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f6ba:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f6be:	1c7a      	adds	r2, r7, #1
 801f6c0:	f100 8114 	bmi.w	801f8ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f6c4:	4293      	cmp	r3, r2
 801f6c6:	f340 8111 	ble.w	801f8ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f6ca:	2c00      	cmp	r4, #0
 801f6cc:	f000 8110 	beq.w	801f8f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801f6d0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f6d4:	3501      	adds	r5, #1
 801f6d6:	f100 810f 	bmi.w	801f8f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f6da:	45a8      	cmp	r8, r5
 801f6dc:	f340 810c 	ble.w	801f8f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f6e0:	f1be 0f00 	cmp.w	lr, #0
 801f6e4:	f000 810b 	beq.w	801f8fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801f6e8:	2f00      	cmp	r7, #0
 801f6ea:	f2c0 8103 	blt.w	801f8f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f6ee:	42bb      	cmp	r3, r7
 801f6f0:	f340 8100 	ble.w	801f8f4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f6f4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f6f8:	3701      	adds	r7, #1
 801f6fa:	f100 8103 	bmi.w	801f904 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f6fe:	42bb      	cmp	r3, r7
 801f700:	f340 8100 	ble.w	801f904 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f704:	2c00      	cmp	r4, #0
 801f706:	f000 80ff 	beq.w	801f908 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801f70a:	3301      	adds	r3, #1
 801f70c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f710:	fa1f fc84 	uxth.w	ip, r4
 801f714:	fa1f fe8e 	uxth.w	lr, lr
 801f718:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f71c:	fb0c f90e 	mul.w	r9, ip, lr
 801f720:	0e13      	lsrs	r3, r2, #24
 801f722:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f726:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f72a:	9302      	str	r3, [sp, #8]
 801f72c:	ebac 0709 	sub.w	r7, ip, r9
 801f730:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801f734:	fa1f f48e 	uxth.w	r4, lr
 801f738:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801f73c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801f740:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f744:	fb0a fe0e 	mul.w	lr, sl, lr
 801f748:	1b1b      	subs	r3, r3, r4
 801f74a:	fb0a f606 	mul.w	r6, sl, r6
 801f74e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f752:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f756:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801f75a:	b29b      	uxth	r3, r3
 801f75c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f760:	b2bf      	uxth	r7, r7
 801f762:	9301      	str	r3, [sp, #4]
 801f764:	44e6      	add	lr, ip
 801f766:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801f76a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f76e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f772:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801f776:	9303      	str	r3, [sp, #12]
 801f778:	0a33      	lsrs	r3, r6, #8
 801f77a:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801f77e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801f782:	9304      	str	r3, [sp, #16]
 801f784:	fb0b f606 	mul.w	r6, fp, r6
 801f788:	fb0b f000 	mul.w	r0, fp, r0
 801f78c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f790:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f794:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f798:	44b6      	add	lr, r6
 801f79a:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801f79e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f7a2:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801f7a6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801f7aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7ae:	fb08 f606 	mul.w	r6, r8, r6
 801f7b2:	0a03      	lsrs	r3, r0, #8
 801f7b4:	fb08 f505 	mul.w	r5, r8, r5
 801f7b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f7bc:	0a30      	lsrs	r0, r6, #8
 801f7be:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f7c2:	9305      	str	r3, [sp, #20]
 801f7c4:	0e13      	lsrs	r3, r2, #24
 801f7c6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f7ca:	fb0e fe07 	mul.w	lr, lr, r7
 801f7ce:	4430      	add	r0, r6
 801f7d0:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801f7d4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f7d8:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801f7dc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f7e0:	0a00      	lsrs	r0, r0, #8
 801f7e2:	435e      	muls	r6, r3
 801f7e4:	0a2d      	lsrs	r5, r5, #8
 801f7e6:	435a      	muls	r2, r3
 801f7e8:	9b03      	ldr	r3, [sp, #12]
 801f7ea:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f7ee:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801f7f2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801f7f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f7fa:	44b4      	add	ip, r6
 801f7fc:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801f800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f804:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f808:	9e01      	ldr	r6, [sp, #4]
 801f80a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f80e:	fb03 ee06 	mla	lr, r3, r6, lr
 801f812:	9b04      	ldr	r3, [sp, #16]
 801f814:	0a12      	lsrs	r2, r2, #8
 801f816:	fb0c ee09 	mla	lr, ip, r9, lr
 801f81a:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801f81e:	9b05      	ldr	r3, [sp, #20]
 801f820:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801f824:	fb00 ee04 	mla	lr, r0, r4, lr
 801f828:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f82c:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801f830:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801f834:	9b01      	ldr	r3, [sp, #4]
 801f836:	fb07 fe0e 	mul.w	lr, r7, lr
 801f83a:	fb07 f70b 	mul.w	r7, r7, fp
 801f83e:	fb03 ee06 	mla	lr, r3, r6, lr
 801f842:	fb03 730a 	mla	r3, r3, sl, r7
 801f846:	fb09 e202 	mla	r2, r9, r2, lr
 801f84a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801f84e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f852:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801f856:	fb04 3408 	mla	r4, r4, r8, r3
 801f85a:	9b02      	ldr	r3, [sp, #8]
 801f85c:	b292      	uxth	r2, r2
 801f85e:	fb09 4903 	mla	r9, r9, r3, r4
 801f862:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f866:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f86a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f86e:	fb09 f902 	mul.w	r9, r9, r2
 801f872:	ea40 0e0e 	orr.w	lr, r0, lr
 801f876:	f109 0301 	add.w	r3, r9, #1
 801f87a:	fa5f f08e 	uxtb.w	r0, lr
 801f87e:	fb10 f002 	smulbb	r0, r0, r2
 801f882:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f886:	780b      	ldrb	r3, [r1, #0]
 801f888:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801f88c:	fa5f f989 	uxtb.w	r9, r9
 801f890:	fb03 0309 	mla	r3, r3, r9, r0
 801f894:	b29b      	uxth	r3, r3
 801f896:	1c58      	adds	r0, r3, #1
 801f898:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f89c:	7848      	ldrb	r0, [r1, #1]
 801f89e:	fb10 f009 	smulbb	r0, r0, r9
 801f8a2:	121b      	asrs	r3, r3, #8
 801f8a4:	700b      	strb	r3, [r1, #0]
 801f8a6:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801f8aa:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f8ae:	fb03 0302 	mla	r3, r3, r2, r0
 801f8b2:	b29b      	uxth	r3, r3
 801f8b4:	1c58      	adds	r0, r3, #1
 801f8b6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f8ba:	121b      	asrs	r3, r3, #8
 801f8bc:	704b      	strb	r3, [r1, #1]
 801f8be:	788b      	ldrb	r3, [r1, #2]
 801f8c0:	fb13 f909 	smulbb	r9, r3, r9
 801f8c4:	fb0e 9e02 	mla	lr, lr, r2, r9
 801f8c8:	fa1f fe8e 	uxth.w	lr, lr
 801f8cc:	f10e 0301 	add.w	r3, lr, #1
 801f8d0:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f8d4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f8d8:	f881 e002 	strb.w	lr, [r1, #2]
 801f8dc:	b007      	add	sp, #28
 801f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8e2:	2600      	movs	r6, #0
 801f8e4:	e6eb      	b.n	801f6be <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801f8e6:	2000      	movs	r0, #0
 801f8e8:	4606      	mov	r6, r0
 801f8ea:	e6f3      	b.n	801f6d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f8ec:	2000      	movs	r0, #0
 801f8ee:	e6f1      	b.n	801f6d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f8f0:	4620      	mov	r0, r4
 801f8f2:	e6ef      	b.n	801f6d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f8f4:	2500      	movs	r5, #0
 801f8f6:	e6ff      	b.n	801f6f8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801f8f8:	2200      	movs	r2, #0
 801f8fa:	4615      	mov	r5, r2
 801f8fc:	e708      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f8fe:	4672      	mov	r2, lr
 801f900:	4675      	mov	r5, lr
 801f902:	e705      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f904:	2200      	movs	r2, #0
 801f906:	e703      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f908:	4622      	mov	r2, r4
 801f90a:	e701      	b.n	801f710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801f90c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f910:	b09d      	sub	sp, #116	@ 0x74
 801f912:	9219      	str	r2, [sp, #100]	@ 0x64
 801f914:	9307      	str	r3, [sp, #28]
 801f916:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801f918:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801f91c:	901b      	str	r0, [sp, #108]	@ 0x6c
 801f91e:	931a      	str	r3, [sp, #104]	@ 0x68
 801f920:	6850      	ldr	r0, [r2, #4]
 801f922:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f924:	6812      	ldr	r2, [r2, #0]
 801f926:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801f92a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801f92e:	fb00 1303 	mla	r3, r0, r3, r1
 801f932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f936:	18d3      	adds	r3, r2, r3
 801f938:	930a      	str	r3, [sp, #40]	@ 0x28
 801f93a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	9310      	str	r3, [sp, #64]	@ 0x40
 801f940:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801f944:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f946:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f948:	2b00      	cmp	r3, #0
 801f94a:	dc03      	bgt.n	801f954 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f94c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f94e:	2b00      	cmp	r3, #0
 801f950:	f340 8368 	ble.w	8020024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f954:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f956:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f95a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f95e:	1e48      	subs	r0, r1, #1
 801f960:	1e57      	subs	r7, r2, #1
 801f962:	9b07      	ldr	r3, [sp, #28]
 801f964:	2b00      	cmp	r3, #0
 801f966:	f340 8187 	ble.w	801fc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801f96a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f96e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f972:	d406      	bmi.n	801f982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f974:	4584      	cmp	ip, r0
 801f976:	da04      	bge.n	801f982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f978:	2b00      	cmp	r3, #0
 801f97a:	db02      	blt.n	801f982 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f97c:	42bb      	cmp	r3, r7
 801f97e:	f2c0 817c 	blt.w	801fc7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f982:	f11c 0c01 	adds.w	ip, ip, #1
 801f986:	f100 816c 	bmi.w	801fc62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f98a:	4561      	cmp	r1, ip
 801f98c:	f2c0 8169 	blt.w	801fc62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f990:	3301      	adds	r3, #1
 801f992:	f100 8166 	bmi.w	801fc62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f996:	429a      	cmp	r2, r3
 801f998:	f2c0 8163 	blt.w	801fc62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f99c:	9b07      	ldr	r3, [sp, #28]
 801f99e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801f9a0:	9318      	str	r3, [sp, #96]	@ 0x60
 801f9a2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	f340 8186 	ble.w	801fcb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f9aa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801f9ac:	142a      	asrs	r2, r5, #16
 801f9ae:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f9b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9b6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f9ba:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f9be:	f100 81cb 	bmi.w	801fd58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9c2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f9c6:	4542      	cmp	r2, r8
 801f9c8:	f280 81c6 	bge.w	801fd58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9cc:	2800      	cmp	r0, #0
 801f9ce:	f2c0 81c3 	blt.w	801fd58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9d2:	f103 38ff 	add.w	r8, r3, #4294967295
 801f9d6:	4540      	cmp	r0, r8
 801f9d8:	f280 81be 	bge.w	801fd58 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f9dc:	fa0f f38e 	sxth.w	r3, lr
 801f9e0:	fb00 2203 	mla	r2, r0, r3, r2
 801f9e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f9e6:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801f9ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f9ee:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f9f2:	2900      	cmp	r1, #0
 801f9f4:	f000 81a6 	beq.w	801fd44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801f9f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f9fc:	900c      	str	r0, [sp, #48]	@ 0x30
 801f9fe:	0e00      	lsrs	r0, r0, #24
 801fa00:	9013      	str	r0, [sp, #76]	@ 0x4c
 801fa02:	f1bc 0f00 	cmp.w	ip, #0
 801fa06:	d00f      	beq.n	801fa28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801fa0c:	3b01      	subs	r3, #1
 801fa0e:	009b      	lsls	r3, r3, #2
 801fa10:	3304      	adds	r3, #4
 801fa12:	eb08 0003 	add.w	r0, r8, r3
 801fa16:	f858 3003 	ldr.w	r3, [r8, r3]
 801fa1a:	9308      	str	r3, [sp, #32]
 801fa1c:	0e1b      	lsrs	r3, r3, #24
 801fa1e:	9311      	str	r3, [sp, #68]	@ 0x44
 801fa20:	6843      	ldr	r3, [r0, #4]
 801fa22:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa24:	0e1b      	lsrs	r3, r3, #24
 801fa26:	9314      	str	r3, [sp, #80]	@ 0x50
 801fa28:	b289      	uxth	r1, r1
 801fa2a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fa2c:	fa1f fc8c 	uxth.w	ip, ip
 801fa30:	0108      	lsls	r0, r1, #4
 801fa32:	fb01 f90c 	mul.w	r9, r1, ip
 801fa36:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801fa3a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801fa3e:	eba0 0809 	sub.w	r8, r0, r9
 801fa42:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fa44:	fa1f f18c 	uxth.w	r1, ip
 801fa48:	fa1f f888 	uxth.w	r8, r8
 801fa4c:	1a5b      	subs	r3, r3, r1
 801fa4e:	fb08 f000 	mul.w	r0, r8, r0
 801fa52:	b29b      	uxth	r3, r3
 801fa54:	fb03 000e 	mla	r0, r3, lr, r0
 801fa58:	fb01 0004 	mla	r0, r1, r4, r0
 801fa5c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fa5e:	fb09 0004 	mla	r0, r9, r4, r0
 801fa62:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fa66:	2800      	cmp	r0, #0
 801fa68:	f000 80f2 	beq.w	801fc50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fa6c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801fa70:	d01b      	beq.n	801faaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fa72:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801fa76:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fa7a:	fb0e fa0a 	mul.w	sl, lr, sl
 801fa7e:	fb0e fe02 	mul.w	lr, lr, r2
 801fa82:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fa86:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fa8a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801fa8e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801fa92:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fa96:	4452      	add	r2, sl
 801fa98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fa9c:	0a12      	lsrs	r2, r2, #8
 801fa9e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801faa2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801faa6:	ea42 020c 	orr.w	r2, r2, ip
 801faaa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801faac:	2cff      	cmp	r4, #255	@ 0xff
 801faae:	d021      	beq.n	801faf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fab0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fab2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fab6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fab8:	fb04 fb0b 	mul.w	fp, r4, fp
 801fabc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fabe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fac2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fac4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fac8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801facc:	fb04 fa0a 	mul.w	sl, r4, sl
 801fad0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fad4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fad8:	44de      	add	lr, fp
 801fada:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fade:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fae2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fae6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801faea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801faee:	ea4e 040a 	orr.w	r4, lr, sl
 801faf2:	940c      	str	r4, [sp, #48]	@ 0x30
 801faf4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801faf6:	2cff      	cmp	r4, #255	@ 0xff
 801faf8:	d021      	beq.n	801fb3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801fafa:	9c08      	ldr	r4, [sp, #32]
 801fafc:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb00:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb02:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb06:	9c08      	ldr	r4, [sp, #32]
 801fb08:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb0c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fb0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb12:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb16:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb1a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb1e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb22:	44de      	add	lr, fp
 801fb24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb30:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb34:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb38:	ea4e 040a 	orr.w	r4, lr, sl
 801fb3c:	9408      	str	r4, [sp, #32]
 801fb3e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb40:	2cff      	cmp	r4, #255	@ 0xff
 801fb42:	d021      	beq.n	801fb88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fb44:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fb46:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801fb4a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb4c:	fb04 fb0b 	mul.w	fp, r4, fp
 801fb50:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fb52:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fb56:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801fb58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb5c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801fb60:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb64:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb68:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801fb6c:	44de      	add	lr, fp
 801fb6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fb76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb7a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801fb7e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fb82:	ea4e 040a 	orr.w	r4, lr, sl
 801fb86:	940d      	str	r4, [sp, #52]	@ 0x34
 801fb88:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fb8a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801fb8e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801fb92:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801fb96:	9c08      	ldr	r4, [sp, #32]
 801fb98:	fb08 fc0c 	mul.w	ip, r8, ip
 801fb9c:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fba0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fba4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801fba6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fbaa:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801fbae:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801fbb0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fbb4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801fbb8:	fb08 f80e 	mul.w	r8, r8, lr
 801fbbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbc0:	fb03 8202 	mla	r2, r3, r2, r8
 801fbc4:	9b08      	ldr	r3, [sp, #32]
 801fbc6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fbca:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801fbce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fbd0:	fb01 220a 	mla	r2, r1, sl, r2
 801fbd4:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801fbd8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbda:	fb09 2901 	mla	r9, r9, r1, r2
 801fbde:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fbe0:	4343      	muls	r3, r0
 801fbe2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fbe6:	1c58      	adds	r0, r3, #1
 801fbe8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801fbec:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fbf0:	783b      	ldrb	r3, [r7, #0]
 801fbf2:	ea4c 0c09 	orr.w	ip, ip, r9
 801fbf6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fbfa:	fa5f f28c 	uxtb.w	r2, ip
 801fbfe:	b2c0      	uxtb	r0, r0
 801fc00:	fb12 f201 	smulbb	r2, r2, r1
 801fc04:	fb03 2300 	mla	r3, r3, r0, r2
 801fc08:	b29b      	uxth	r3, r3
 801fc0a:	1c5a      	adds	r2, r3, #1
 801fc0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc10:	787a      	ldrb	r2, [r7, #1]
 801fc12:	fb12 f200 	smulbb	r2, r2, r0
 801fc16:	121b      	asrs	r3, r3, #8
 801fc18:	703b      	strb	r3, [r7, #0]
 801fc1a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fc1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fc22:	fb03 2301 	mla	r3, r3, r1, r2
 801fc26:	b29b      	uxth	r3, r3
 801fc28:	1c5a      	adds	r2, r3, #1
 801fc2a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc2e:	121b      	asrs	r3, r3, #8
 801fc30:	707b      	strb	r3, [r7, #1]
 801fc32:	78bb      	ldrb	r3, [r7, #2]
 801fc34:	fb13 f000 	smulbb	r0, r3, r0
 801fc38:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fc3c:	fa1f fc8c 	uxth.w	ip, ip
 801fc40:	f10c 0301 	add.w	r3, ip, #1
 801fc44:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fc48:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fc4c:	f887 c002 	strb.w	ip, [r7, #2]
 801fc50:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fc52:	3703      	adds	r7, #3
 801fc54:	441d      	add	r5, r3
 801fc56:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fc58:	441e      	add	r6, r3
 801fc5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fc5c:	3b01      	subs	r3, #1
 801fc5e:	9318      	str	r3, [sp, #96]	@ 0x60
 801fc60:	e69f      	b.n	801f9a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc62:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801fc64:	441d      	add	r5, r3
 801fc66:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801fc68:	441e      	add	r6, r3
 801fc6a:	9b07      	ldr	r3, [sp, #28]
 801fc6c:	3b01      	subs	r3, #1
 801fc6e:	9307      	str	r3, [sp, #28]
 801fc70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fc72:	3303      	adds	r3, #3
 801fc74:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc76:	e674      	b.n	801f962 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fc78:	d025      	beq.n	801fcc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801fc7a:	9b07      	ldr	r3, [sp, #28]
 801fc7c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801fc7e:	3b01      	subs	r3, #1
 801fc80:	fb00 5003 	mla	r0, r0, r3, r5
 801fc84:	1400      	asrs	r0, r0, #16
 801fc86:	f53f ae89 	bmi.w	801f99c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc8a:	3901      	subs	r1, #1
 801fc8c:	4288      	cmp	r0, r1
 801fc8e:	f6bf ae85 	bge.w	801f99c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc92:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801fc94:	fb01 6303 	mla	r3, r1, r3, r6
 801fc98:	141b      	asrs	r3, r3, #16
 801fc9a:	f53f ae7f 	bmi.w	801f99c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc9e:	3a01      	subs	r2, #1
 801fca0:	4293      	cmp	r3, r2
 801fca2:	f6bf ae7b 	bge.w	801f99c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fca8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fcac:	f103 0e03 	add.w	lr, r3, #3
 801fcb0:	f1bb 0f00 	cmp.w	fp, #0
 801fcb4:	dc6e      	bgt.n	801fd94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801fcb6:	9b07      	ldr	r3, [sp, #28]
 801fcb8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fcbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fcbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcc2:	4423      	add	r3, r4
 801fcc4:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcc6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	f340 81ab 	ble.w	8020024 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801fcce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fcd2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fcd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcdc:	eef0 6a62 	vmov.f32	s13, s5
 801fce0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fce4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fce8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcec:	ee16 5a90 	vmov	r5, s13
 801fcf0:	eef0 6a43 	vmov.f32	s13, s6
 801fcf4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fcf8:	ee16 6a90 	vmov	r6, s13
 801fcfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd14:	ee12 2a90 	vmov	r2, s5
 801fd18:	eef0 2a47 	vmov.f32	s5, s14
 801fd1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd20:	ee13 2a10 	vmov	r2, s6
 801fd24:	9329      	str	r3, [sp, #164]	@ 0xa4
 801fd26:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd28:	eeb0 3a67 	vmov.f32	s6, s15
 801fd2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd30:	932a      	str	r3, [sp, #168]	@ 0xa8
 801fd32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fd34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fd36:	3b01      	subs	r3, #1
 801fd38:	9317      	str	r3, [sp, #92]	@ 0x5c
 801fd3a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd3c:	bf08      	it	eq
 801fd3e:	4613      	moveq	r3, r2
 801fd40:	9307      	str	r3, [sp, #28]
 801fd42:	e600      	b.n	801f946 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fd44:	f1bc 0f00 	cmp.w	ip, #0
 801fd48:	f43f ae6e 	beq.w	801fa28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fd4c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fd50:	9308      	str	r3, [sp, #32]
 801fd52:	0e1b      	lsrs	r3, r3, #24
 801fd54:	9311      	str	r3, [sp, #68]	@ 0x44
 801fd56:	e667      	b.n	801fa28 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fd58:	f112 0801 	adds.w	r8, r2, #1
 801fd5c:	f53f af78 	bmi.w	801fc50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd60:	45c6      	cmp	lr, r8
 801fd62:	f6ff af75 	blt.w	801fc50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd66:	f110 0801 	adds.w	r8, r0, #1
 801fd6a:	f53f af71 	bmi.w	801fc50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd6e:	4543      	cmp	r3, r8
 801fd70:	f6ff af6e 	blt.w	801fc50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd74:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801fd76:	b21b      	sxth	r3, r3
 801fd78:	9201      	str	r2, [sp, #4]
 801fd7a:	9300      	str	r3, [sp, #0]
 801fd7c:	fa0f f38e 	sxth.w	r3, lr
 801fd80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fd82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801fd86:	e9cd c404 	strd	ip, r4, [sp, #16]
 801fd8a:	4639      	mov	r1, r7
 801fd8c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801fd8e:	f7ff fc79 	bl	801f684 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801fd92:	e75d      	b.n	801fc50 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fd94:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801fd96:	142f      	asrs	r7, r5, #16
 801fd98:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801fd9a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fd9e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801fda2:	1433      	asrs	r3, r6, #16
 801fda4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fda8:	fb02 7303 	mla	r3, r2, r3, r7
 801fdac:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801fdb0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fdb4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fdb8:	2900      	cmp	r1, #0
 801fdba:	f000 812a 	beq.w	8020012 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801fdbe:	687c      	ldr	r4, [r7, #4]
 801fdc0:	940e      	str	r4, [sp, #56]	@ 0x38
 801fdc2:	0e24      	lsrs	r4, r4, #24
 801fdc4:	9415      	str	r4, [sp, #84]	@ 0x54
 801fdc6:	b178      	cbz	r0, 801fde8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fdc8:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801fdcc:	3a01      	subs	r2, #1
 801fdce:	0092      	lsls	r2, r2, #2
 801fdd0:	3204      	adds	r2, #4
 801fdd2:	eb07 0802 	add.w	r8, r7, r2
 801fdd6:	58ba      	ldr	r2, [r7, r2]
 801fdd8:	9209      	str	r2, [sp, #36]	@ 0x24
 801fdda:	0e12      	lsrs	r2, r2, #24
 801fddc:	9212      	str	r2, [sp, #72]	@ 0x48
 801fdde:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fde2:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fde4:	0e12      	lsrs	r2, r2, #24
 801fde6:	9216      	str	r2, [sp, #88]	@ 0x58
 801fde8:	b289      	uxth	r1, r1
 801fdea:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fdec:	b280      	uxth	r0, r0
 801fdee:	fb01 f900 	mul.w	r9, r1, r0
 801fdf2:	0109      	lsls	r1, r1, #4
 801fdf4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fdf8:	eba1 0809 	sub.w	r8, r1, r9
 801fdfc:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801fe00:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801fe02:	b280      	uxth	r0, r0
 801fe04:	fa1f f888 	uxth.w	r8, r8
 801fe08:	1a12      	subs	r2, r2, r0
 801fe0a:	fb08 f101 	mul.w	r1, r8, r1
 801fe0e:	b292      	uxth	r2, r2
 801fe10:	fb02 110c 	mla	r1, r2, ip, r1
 801fe14:	fb00 1104 	mla	r1, r0, r4, r1
 801fe18:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fe1a:	fb09 1104 	mla	r1, r9, r4, r1
 801fe1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fe22:	2900      	cmp	r1, #0
 801fe24:	f000 80ec 	beq.w	8020000 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801fe28:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801fe2c:	d019      	beq.n	801fe62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801fe2e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801fe32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801fe36:	fb0c fa0a 	mul.w	sl, ip, sl
 801fe3a:	fb0c fc03 	mul.w	ip, ip, r3
 801fe3e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fe42:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801fe46:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801fe4a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe4e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fe52:	4453      	add	r3, sl
 801fe54:	0a3f      	lsrs	r7, r7, #8
 801fe56:	0a1b      	lsrs	r3, r3, #8
 801fe58:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801fe5c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801fe60:	433b      	orrs	r3, r7
 801fe62:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe64:	2cff      	cmp	r4, #255	@ 0xff
 801fe66:	d020      	beq.n	801feaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801fe68:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fe6a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fe6e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe70:	4367      	muls	r7, r4
 801fe72:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801fe74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fe78:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fe7c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801fe7e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801fe82:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fe86:	fb04 fa0a 	mul.w	sl, r4, sl
 801fe8a:	44bc      	add	ip, r7
 801fe8c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fe90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fe98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fe9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fea0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801fea4:	ea4c 040a 	orr.w	r4, ip, sl
 801fea8:	940e      	str	r4, [sp, #56]	@ 0x38
 801feaa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801feac:	2cff      	cmp	r4, #255	@ 0xff
 801feae:	d020      	beq.n	801fef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801feb0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801feb2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801feb6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801feb8:	4367      	muls	r7, r4
 801feba:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801febc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fec0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801fec4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801fec6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801feca:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fece:	fb04 fa0a 	mul.w	sl, r4, sl
 801fed2:	44bc      	add	ip, r7
 801fed4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801fed8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fedc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fee0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801fee4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fee8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801feec:	ea4c 040a 	orr.w	r4, ip, sl
 801fef0:	9409      	str	r4, [sp, #36]	@ 0x24
 801fef2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801fef4:	2cff      	cmp	r4, #255	@ 0xff
 801fef6:	d020      	beq.n	801ff3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801fef8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801fefa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801fefe:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff00:	4367      	muls	r7, r4
 801ff02:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff08:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ff0c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ff0e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ff12:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff16:	fb04 fa0a 	mul.w	sl, r4, sl
 801ff1a:	44bc      	add	ip, r7
 801ff1c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ff20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff28:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ff2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff30:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ff34:	ea4c 040a 	orr.w	r4, ip, sl
 801ff38:	940f      	str	r4, [sp, #60]	@ 0x3c
 801ff3a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff3c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ff40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ff44:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ff48:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ff4a:	fb08 f707 	mul.w	r7, r8, r7
 801ff4e:	fb02 770c 	mla	r7, r2, ip, r7
 801ff52:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff56:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ff58:	fb00 770c 	mla	r7, r0, ip, r7
 801ff5c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ff60:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ff62:	fb09 770c 	mla	r7, r9, ip, r7
 801ff66:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ff6a:	fb08 f80c 	mul.w	r8, r8, ip
 801ff6e:	0a3f      	lsrs	r7, r7, #8
 801ff70:	fb02 8303 	mla	r3, r2, r3, r8
 801ff74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff76:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ff7a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ff7e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ff80:	fb00 330a 	mla	r3, r0, sl, r3
 801ff84:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ff88:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ff8a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ff8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff94:	434b      	muls	r3, r1
 801ff96:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ff9a:	1c59      	adds	r1, r3, #1
 801ff9c:	ea47 070c 	orr.w	r7, r7, ip
 801ffa0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ffa4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ffa8:	b2fa      	uxtb	r2, r7
 801ffaa:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ffae:	fb12 f200 	smulbb	r2, r2, r0
 801ffb2:	b2c9      	uxtb	r1, r1
 801ffb4:	fb03 2301 	mla	r3, r3, r1, r2
 801ffb8:	b29b      	uxth	r3, r3
 801ffba:	1c5a      	adds	r2, r3, #1
 801ffbc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffc0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ffc4:	fb12 f201 	smulbb	r2, r2, r1
 801ffc8:	121b      	asrs	r3, r3, #8
 801ffca:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ffce:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ffd2:	0c3f      	lsrs	r7, r7, #16
 801ffd4:	fb03 2300 	mla	r3, r3, r0, r2
 801ffd8:	b29b      	uxth	r3, r3
 801ffda:	1c5a      	adds	r2, r3, #1
 801ffdc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ffe0:	121b      	asrs	r3, r3, #8
 801ffe2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ffe6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ffea:	fb13 f101 	smulbb	r1, r3, r1
 801ffee:	fb07 1700 	mla	r7, r7, r0, r1
 801fff2:	b2bf      	uxth	r7, r7
 801fff4:	1c79      	adds	r1, r7, #1
 801fff6:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fffa:	123f      	asrs	r7, r7, #8
 801fffc:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020000:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8020002:	f10e 0e03 	add.w	lr, lr, #3
 8020006:	f10b 3bff 	add.w	fp, fp, #4294967295
 802000a:	441d      	add	r5, r3
 802000c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802000e:	441e      	add	r6, r3
 8020010:	e64e      	b.n	801fcb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8020012:	2800      	cmp	r0, #0
 8020014:	f43f aee8 	beq.w	801fde8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020018:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 802001c:	9209      	str	r2, [sp, #36]	@ 0x24
 802001e:	0e12      	lsrs	r2, r2, #24
 8020020:	9212      	str	r2, [sp, #72]	@ 0x48
 8020022:	e6e1      	b.n	801fde8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8020024:	b01d      	add	sp, #116	@ 0x74
 8020026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802002a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 802002a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802002e:	b087      	sub	sp, #28
 8020030:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8020034:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8020038:	fb05 7003 	mla	r0, r5, r3, r7
 802003c:	2d00      	cmp	r5, #0
 802003e:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8020042:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8020046:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 802004a:	f2c0 810a 	blt.w	8020262 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 802004e:	45a8      	cmp	r8, r5
 8020050:	f340 8107 	ble.w	8020262 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8020054:	2f00      	cmp	r7, #0
 8020056:	f2c0 8102 	blt.w	802025e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 802005a:	42bb      	cmp	r3, r7
 802005c:	f340 80ff 	ble.w	802025e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8020060:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020064:	1c7a      	adds	r2, r7, #1
 8020066:	f100 80ff 	bmi.w	8020268 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802006a:	4293      	cmp	r3, r2
 802006c:	f340 80fc 	ble.w	8020268 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020070:	2c00      	cmp	r4, #0
 8020072:	f000 80fb 	beq.w	802026c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8020076:	f8dc 0004 	ldr.w	r0, [ip, #4]
 802007a:	3501      	adds	r5, #1
 802007c:	f100 80fa 	bmi.w	8020274 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020080:	45a8      	cmp	r8, r5
 8020082:	f340 80f7 	ble.w	8020274 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020086:	f1be 0f00 	cmp.w	lr, #0
 802008a:	f000 80f6 	beq.w	802027a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802008e:	2f00      	cmp	r7, #0
 8020090:	f2c0 80ee 	blt.w	8020270 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020094:	42bb      	cmp	r3, r7
 8020096:	f340 80eb 	ble.w	8020270 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802009a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802009e:	3701      	adds	r7, #1
 80200a0:	f100 80ee 	bmi.w	8020280 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80200a4:	42bb      	cmp	r3, r7
 80200a6:	f340 80eb 	ble.w	8020280 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 80200aa:	2c00      	cmp	r4, #0
 80200ac:	f000 80ea 	beq.w	8020284 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 80200b0:	3301      	adds	r3, #1
 80200b2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80200b6:	fa1f fc84 	uxth.w	ip, r4
 80200ba:	fa1f fe8e 	uxth.w	lr, lr
 80200be:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80200c2:	fb0c f90e 	mul.w	r9, ip, lr
 80200c6:	0e13      	lsrs	r3, r2, #24
 80200c8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80200cc:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80200d0:	9302      	str	r3, [sp, #8]
 80200d2:	ebac 0709 	sub.w	r7, ip, r9
 80200d6:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 80200da:	fa1f f48e 	uxth.w	r4, lr
 80200de:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 80200e2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80200e6:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80200ea:	fb0a fe0e 	mul.w	lr, sl, lr
 80200ee:	1b1b      	subs	r3, r3, r4
 80200f0:	fb0a f606 	mul.w	r6, sl, r6
 80200f4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80200f8:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80200fc:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8020100:	b29b      	uxth	r3, r3
 8020102:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020106:	b2bf      	uxth	r7, r7
 8020108:	9301      	str	r3, [sp, #4]
 802010a:	44e6      	add	lr, ip
 802010c:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8020110:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020114:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020118:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 802011c:	9303      	str	r3, [sp, #12]
 802011e:	0a33      	lsrs	r3, r6, #8
 8020120:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8020124:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020128:	9304      	str	r3, [sp, #16]
 802012a:	fb0b f606 	mul.w	r6, fp, r6
 802012e:	fb0b f000 	mul.w	r0, fp, r0
 8020132:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8020136:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802013a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802013e:	44b6      	add	lr, r6
 8020140:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8020144:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8020148:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 802014c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020150:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020154:	fb08 f606 	mul.w	r6, r8, r6
 8020158:	0a03      	lsrs	r3, r0, #8
 802015a:	fb08 f505 	mul.w	r5, r8, r5
 802015e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020162:	0a30      	lsrs	r0, r6, #8
 8020164:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8020168:	9305      	str	r3, [sp, #20]
 802016a:	0e13      	lsrs	r3, r2, #24
 802016c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020170:	fb0e fe07 	mul.w	lr, lr, r7
 8020174:	4430      	add	r0, r6
 8020176:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 802017a:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802017e:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8020182:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020186:	0a00      	lsrs	r0, r0, #8
 8020188:	435e      	muls	r6, r3
 802018a:	0a2d      	lsrs	r5, r5, #8
 802018c:	435a      	muls	r2, r3
 802018e:	9b03      	ldr	r3, [sp, #12]
 8020190:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8020194:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8020198:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802019c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201a0:	44b4      	add	ip, r6
 80201a2:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 80201a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201aa:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 80201ae:	9e01      	ldr	r6, [sp, #4]
 80201b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80201b4:	fb03 ee06 	mla	lr, r3, r6, lr
 80201b8:	9b04      	ldr	r3, [sp, #16]
 80201ba:	0a12      	lsrs	r2, r2, #8
 80201bc:	fb0c ee09 	mla	lr, ip, r9, lr
 80201c0:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 80201c4:	9b05      	ldr	r3, [sp, #20]
 80201c6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80201ca:	fb00 ee04 	mla	lr, r0, r4, lr
 80201ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80201d2:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 80201d6:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 80201da:	9b01      	ldr	r3, [sp, #4]
 80201dc:	fb07 fe0e 	mul.w	lr, r7, lr
 80201e0:	fb07 f70b 	mul.w	r7, r7, fp
 80201e4:	fb03 ee06 	mla	lr, r3, r6, lr
 80201e8:	fb03 730a 	mla	r3, r3, sl, r7
 80201ec:	fb09 e202 	mla	r2, r9, r2, lr
 80201f0:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80201f4:	fb04 2e0e 	mla	lr, r4, lr, r2
 80201f8:	fb04 3408 	mla	r4, r4, r8, r3
 80201fc:	9b02      	ldr	r3, [sp, #8]
 80201fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020202:	fb09 4903 	mla	r9, r9, r3, r4
 8020206:	780b      	ldrb	r3, [r1, #0]
 8020208:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802020c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8020210:	ea40 0e0e 	orr.w	lr, r0, lr
 8020214:	fa5f f989 	uxtb.w	r9, r9
 8020218:	fb03 f209 	mul.w	r2, r3, r9
 802021c:	1c53      	adds	r3, r2, #1
 802021e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020222:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8020226:	700b      	strb	r3, [r1, #0]
 8020228:	784b      	ldrb	r3, [r1, #1]
 802022a:	fb03 f309 	mul.w	r3, r3, r9
 802022e:	1c5a      	adds	r2, r3, #1
 8020230:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020234:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8020238:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802023c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020240:	704b      	strb	r3, [r1, #1]
 8020242:	788b      	ldrb	r3, [r1, #2]
 8020244:	fb03 f909 	mul.w	r9, r3, r9
 8020248:	f109 0301 	add.w	r3, r9, #1
 802024c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8020250:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8020254:	f881 e002 	strb.w	lr, [r1, #2]
 8020258:	b007      	add	sp, #28
 802025a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802025e:	2600      	movs	r6, #0
 8020260:	e700      	b.n	8020064 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8020262:	2000      	movs	r0, #0
 8020264:	4606      	mov	r6, r0
 8020266:	e708      	b.n	802007a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020268:	2000      	movs	r0, #0
 802026a:	e706      	b.n	802007a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802026c:	4620      	mov	r0, r4
 802026e:	e704      	b.n	802007a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020270:	2500      	movs	r5, #0
 8020272:	e714      	b.n	802009e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8020274:	2200      	movs	r2, #0
 8020276:	4615      	mov	r5, r2
 8020278:	e71d      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802027a:	4672      	mov	r2, lr
 802027c:	4675      	mov	r5, lr
 802027e:	e71a      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020280:	2200      	movs	r2, #0
 8020282:	e718      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020284:	4622      	mov	r2, r4
 8020286:	e716      	b.n	80200b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08020288 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802028c:	b099      	sub	sp, #100	@ 0x64
 802028e:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8020292:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8020294:	9017      	str	r0, [sp, #92]	@ 0x5c
 8020296:	9306      	str	r3, [sp, #24]
 8020298:	6850      	ldr	r0, [r2, #4]
 802029a:	6812      	ldr	r2, [r2, #0]
 802029c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 80202a0:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 80202a4:	fb00 1303 	mla	r3, r0, r3, r1
 80202a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202ac:	18d3      	adds	r3, r2, r3
 80202ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80202b0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80202b2:	681b      	ldr	r3, [r3, #0]
 80202b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80202b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	dc03      	bgt.n	80202c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80202bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80202be:	2b00      	cmp	r3, #0
 80202c0:	f340 8360 	ble.w	8020984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80202c4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80202c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80202ce:	1e48      	subs	r0, r1, #1
 80202d0:	1e57      	subs	r7, r2, #1
 80202d2:	9b06      	ldr	r3, [sp, #24]
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	f340 817b 	ble.w	80205d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 80202da:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80202de:	ea4f 4326 	mov.w	r3, r6, asr #16
 80202e2:	d406      	bmi.n	80202f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202e4:	4584      	cmp	ip, r0
 80202e6:	da04      	bge.n	80202f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	db02      	blt.n	80202f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80202ec:	42bb      	cmp	r3, r7
 80202ee:	f2c0 8170 	blt.w	80205d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80202f2:	f11c 0c01 	adds.w	ip, ip, #1
 80202f6:	f100 8160 	bmi.w	80205ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80202fa:	4561      	cmp	r1, ip
 80202fc:	f2c0 815d 	blt.w	80205ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020300:	3301      	adds	r3, #1
 8020302:	f100 815a 	bmi.w	80205ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020306:	429a      	cmp	r2, r3
 8020308:	f2c0 8157 	blt.w	80205ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802030c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8020310:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8020312:	f1b8 0f00 	cmp.w	r8, #0
 8020316:	f340 8179 	ble.w	802060c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 802031a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802031c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8020320:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8020322:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020326:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802032a:	142a      	asrs	r2, r5, #16
 802032c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020330:	689b      	ldr	r3, [r3, #8]
 8020332:	f100 81be 	bmi.w	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020336:	f103 39ff 	add.w	r9, r3, #4294967295
 802033a:	454a      	cmp	r2, r9
 802033c:	f280 81b9 	bge.w	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020340:	f1bc 0f00 	cmp.w	ip, #0
 8020344:	f2c0 81b5 	blt.w	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020348:	f10e 39ff 	add.w	r9, lr, #4294967295
 802034c:	45cc      	cmp	ip, r9
 802034e:	f280 81b0 	bge.w	80206b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020352:	b21b      	sxth	r3, r3
 8020354:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020356:	fb0c 2203 	mla	r2, ip, r3, r2
 802035a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 802035e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020362:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020366:	2900      	cmp	r1, #0
 8020368:	f000 8197 	beq.w	802069a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802036c:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8020370:	940a      	str	r4, [sp, #40]	@ 0x28
 8020372:	0e24      	lsrs	r4, r4, #24
 8020374:	9411      	str	r4, [sp, #68]	@ 0x44
 8020376:	b180      	cbz	r0, 802039a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020378:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802037c:	3b01      	subs	r3, #1
 802037e:	009b      	lsls	r3, r3, #2
 8020380:	3304      	adds	r3, #4
 8020382:	eb09 0c03 	add.w	ip, r9, r3
 8020386:	f859 3003 	ldr.w	r3, [r9, r3]
 802038a:	9307      	str	r3, [sp, #28]
 802038c:	0e1b      	lsrs	r3, r3, #24
 802038e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020390:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020394:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020396:	0e1b      	lsrs	r3, r3, #24
 8020398:	9312      	str	r3, [sp, #72]	@ 0x48
 802039a:	b289      	uxth	r1, r1
 802039c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802039e:	b280      	uxth	r0, r0
 80203a0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80203a2:	fb01 fa00 	mul.w	sl, r1, r0
 80203a6:	0109      	lsls	r1, r1, #4
 80203a8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80203ac:	eba1 090a 	sub.w	r9, r1, sl
 80203b0:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80203b4:	b280      	uxth	r0, r0
 80203b6:	fa1f f989 	uxth.w	r9, r9
 80203ba:	1a09      	subs	r1, r1, r0
 80203bc:	fb09 f303 	mul.w	r3, r9, r3
 80203c0:	b289      	uxth	r1, r1
 80203c2:	fb01 330e 	mla	r3, r1, lr, r3
 80203c6:	fb00 3304 	mla	r3, r0, r4, r3
 80203ca:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80203cc:	fb0a 3304 	mla	r3, sl, r4, r3
 80203d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	f000 80e8 	beq.w	80205aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80203da:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80203de:	d01b      	beq.n	8020418 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80203e0:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 80203e4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80203e8:	fb0e fb0b 	mul.w	fp, lr, fp
 80203ec:	fb0e fe02 	mul.w	lr, lr, r2
 80203f0:	ea4f 221b 	mov.w	r2, fp, lsr #8
 80203f4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80203f8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80203fc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020400:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020404:	445a      	add	r2, fp
 8020406:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802040a:	0a12      	lsrs	r2, r2, #8
 802040c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020410:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020414:	ea42 020c 	orr.w	r2, r2, ip
 8020418:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802041a:	2cff      	cmp	r4, #255	@ 0xff
 802041c:	d021      	beq.n	8020462 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802041e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020420:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020424:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020426:	fb04 fc0c 	mul.w	ip, r4, ip
 802042a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802042c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020430:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8020434:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020436:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802043a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802043e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020442:	44e6      	add	lr, ip
 8020444:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020448:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802044c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020450:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020454:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020458:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 802045c:	ea4e 040b 	orr.w	r4, lr, fp
 8020460:	940a      	str	r4, [sp, #40]	@ 0x28
 8020462:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020464:	2cff      	cmp	r4, #255	@ 0xff
 8020466:	d021      	beq.n	80204ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020468:	9c07      	ldr	r4, [sp, #28]
 802046a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802046e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020470:	fb04 fc0c 	mul.w	ip, r4, ip
 8020474:	9c07      	ldr	r4, [sp, #28]
 8020476:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802047a:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 802047e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020480:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020484:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020488:	fb04 fb0b 	mul.w	fp, r4, fp
 802048c:	44e6      	add	lr, ip
 802048e:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8020492:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020496:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802049a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802049e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80204a2:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80204a6:	ea4e 040b 	orr.w	r4, lr, fp
 80204aa:	9407      	str	r4, [sp, #28]
 80204ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204ae:	2cff      	cmp	r4, #255	@ 0xff
 80204b0:	d021      	beq.n	80204f6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 80204b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204b4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80204b8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204ba:	fb04 fc0c 	mul.w	ip, r4, ip
 80204be:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80204c0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80204c4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 80204c8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204ca:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80204ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204d2:	fb04 fb0b 	mul.w	fp, r4, fp
 80204d6:	44e6      	add	lr, ip
 80204d8:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 80204dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204e0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80204e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80204e8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80204ec:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 80204f0:	ea4e 040b 	orr.w	r4, lr, fp
 80204f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80204f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80204f8:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80204fc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020500:	2bff      	cmp	r3, #255	@ 0xff
 8020502:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020506:	9c07      	ldr	r4, [sp, #28]
 8020508:	fb09 fc0c 	mul.w	ip, r9, ip
 802050c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020510:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8020514:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020516:	fb00 cc0e 	mla	ip, r0, lr, ip
 802051a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802051e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020520:	fb0a cc0e 	mla	ip, sl, lr, ip
 8020524:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020528:	fb09 f90e 	mul.w	r9, r9, lr
 802052c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020530:	fb01 9202 	mla	r2, r1, r2, r9
 8020534:	9907      	ldr	r1, [sp, #28]
 8020536:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802053a:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 802053e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020540:	fb00 220b 	mla	r2, r0, fp, r2
 8020544:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8020548:	fb0a 2a00 	mla	sl, sl, r0, r2
 802054c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020550:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020554:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020558:	fa5f f08c 	uxtb.w	r0, ip
 802055c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020560:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020564:	f000 80a2 	beq.w	80206ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020568:	43db      	mvns	r3, r3
 802056a:	783a      	ldrb	r2, [r7, #0]
 802056c:	f897 a002 	ldrb.w	sl, [r7, #2]
 8020570:	b2db      	uxtb	r3, r3
 8020572:	fb02 fe03 	mul.w	lr, r2, r3
 8020576:	fb0a fa03 	mul.w	sl, sl, r3
 802057a:	f10e 0201 	add.w	r2, lr, #1
 802057e:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8020582:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020586:	703a      	strb	r2, [r7, #0]
 8020588:	787a      	ldrb	r2, [r7, #1]
 802058a:	fb02 f003 	mul.w	r0, r2, r3
 802058e:	f10a 0301 	add.w	r3, sl, #1
 8020592:	1c42      	adds	r2, r0, #1
 8020594:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020598:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802059c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80205a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80205a4:	707a      	strb	r2, [r7, #1]
 80205a6:	f887 c002 	strb.w	ip, [r7, #2]
 80205aa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205ac:	3703      	adds	r7, #3
 80205ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80205b2:	441d      	add	r5, r3
 80205b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205b6:	441e      	add	r6, r3
 80205b8:	e6ab      	b.n	8020312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80205ba:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80205bc:	441d      	add	r5, r3
 80205be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80205c0:	441e      	add	r6, r3
 80205c2:	9b06      	ldr	r3, [sp, #24]
 80205c4:	3b01      	subs	r3, #1
 80205c6:	9306      	str	r3, [sp, #24]
 80205c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205ca:	3303      	adds	r3, #3
 80205cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80205ce:	e680      	b.n	80202d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80205d0:	d024      	beq.n	802061c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80205d2:	9b06      	ldr	r3, [sp, #24]
 80205d4:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80205d6:	3b01      	subs	r3, #1
 80205d8:	fb00 5003 	mla	r0, r0, r3, r5
 80205dc:	1400      	asrs	r0, r0, #16
 80205de:	f53f ae95 	bmi.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205e2:	3901      	subs	r1, #1
 80205e4:	4288      	cmp	r0, r1
 80205e6:	f6bf ae91 	bge.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205ea:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80205ec:	fb01 6303 	mla	r3, r1, r3, r6
 80205f0:	141b      	asrs	r3, r3, #16
 80205f2:	f53f ae8b 	bmi.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205f6:	3a01      	subs	r2, #1
 80205f8:	4293      	cmp	r3, r2
 80205fa:	f6bf ae87 	bge.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80205fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020600:	f8dd b018 	ldr.w	fp, [sp, #24]
 8020604:	1cdf      	adds	r7, r3, #3
 8020606:	f1bb 0f00 	cmp.w	fp, #0
 802060a:	dc6e      	bgt.n	80206ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802060c:	9b06      	ldr	r3, [sp, #24]
 802060e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020614:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020618:	4423      	add	r3, r4
 802061a:	9309      	str	r3, [sp, #36]	@ 0x24
 802061c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802061e:	2b00      	cmp	r3, #0
 8020620:	f340 81b0 	ble.w	8020984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020628:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802062a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802062e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020632:	eef0 6a62 	vmov.f32	s13, s5
 8020636:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802063a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802063e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020642:	ee16 5a90 	vmov	r5, s13
 8020646:	eef0 6a43 	vmov.f32	s13, s6
 802064a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802064e:	ee16 6a90 	vmov	r6, s13
 8020652:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020656:	ee61 7a27 	vmul.f32	s15, s2, s15
 802065a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802065e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020662:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020666:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802066a:	ee12 2a90 	vmov	r2, s5
 802066e:	eef0 2a47 	vmov.f32	s5, s14
 8020672:	fb92 f3f3 	sdiv	r3, r2, r3
 8020676:	ee13 2a10 	vmov	r2, s6
 802067a:	9325      	str	r3, [sp, #148]	@ 0x94
 802067c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802067e:	eeb0 3a67 	vmov.f32	s6, s15
 8020682:	fb92 f3f3 	sdiv	r3, r2, r3
 8020686:	9326      	str	r3, [sp, #152]	@ 0x98
 8020688:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802068a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802068c:	3b01      	subs	r3, #1
 802068e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020690:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020692:	bf08      	it	eq
 8020694:	4613      	moveq	r3, r2
 8020696:	9306      	str	r3, [sp, #24]
 8020698:	e60d      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802069a:	2800      	cmp	r0, #0
 802069c:	f43f ae7d 	beq.w	802039a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80206a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80206a4:	9307      	str	r3, [sp, #28]
 80206a6:	0e1b      	lsrs	r3, r3, #24
 80206a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80206aa:	e676      	b.n	802039a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80206ac:	7038      	strb	r0, [r7, #0]
 80206ae:	7079      	strb	r1, [r7, #1]
 80206b0:	e779      	b.n	80205a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80206b2:	f112 0901 	adds.w	r9, r2, #1
 80206b6:	f53f af78 	bmi.w	80205aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206ba:	454b      	cmp	r3, r9
 80206bc:	f6ff af75 	blt.w	80205aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206c0:	f11c 0901 	adds.w	r9, ip, #1
 80206c4:	f53f af71 	bmi.w	80205aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206c8:	45ce      	cmp	lr, r9
 80206ca:	f6ff af6e 	blt.w	80205aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206ce:	b21b      	sxth	r3, r3
 80206d0:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80206d4:	fa0f f28e 	sxth.w	r2, lr
 80206d8:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80206dc:	9200      	str	r2, [sp, #0]
 80206de:	4639      	mov	r1, r7
 80206e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80206e2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80206e4:	f7ff fca1 	bl	802002a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 80206e8:	e75f      	b.n	80205aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80206ea:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80206ec:	1429      	asrs	r1, r5, #16
 80206ee:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80206f0:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80206f4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80206f8:	1433      	asrs	r3, r6, #16
 80206fa:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80206fe:	fb0c 1303 	mla	r3, ip, r3, r1
 8020702:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020704:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020708:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802070c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020710:	2a00      	cmp	r2, #0
 8020712:	f000 8129 	beq.w	8020968 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8020716:	684c      	ldr	r4, [r1, #4]
 8020718:	940c      	str	r4, [sp, #48]	@ 0x30
 802071a:	0e24      	lsrs	r4, r4, #24
 802071c:	9413      	str	r4, [sp, #76]	@ 0x4c
 802071e:	b198      	cbz	r0, 8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020720:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8020724:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020728:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 802072c:	f10c 0c04 	add.w	ip, ip, #4
 8020730:	eb01 080c 	add.w	r8, r1, ip
 8020734:	f851 100c 	ldr.w	r1, [r1, ip]
 8020738:	9108      	str	r1, [sp, #32]
 802073a:	0e09      	lsrs	r1, r1, #24
 802073c:	9110      	str	r1, [sp, #64]	@ 0x40
 802073e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8020742:	910d      	str	r1, [sp, #52]	@ 0x34
 8020744:	0e09      	lsrs	r1, r1, #24
 8020746:	9114      	str	r1, [sp, #80]	@ 0x50
 8020748:	b292      	uxth	r2, r2
 802074a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802074c:	b280      	uxth	r0, r0
 802074e:	fb02 f900 	mul.w	r9, r2, r0
 8020752:	0112      	lsls	r2, r2, #4
 8020754:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020758:	eba2 0809 	sub.w	r8, r2, r9
 802075c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8020760:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020762:	b280      	uxth	r0, r0
 8020764:	fa1f f888 	uxth.w	r8, r8
 8020768:	1a09      	subs	r1, r1, r0
 802076a:	fb08 f202 	mul.w	r2, r8, r2
 802076e:	b289      	uxth	r1, r1
 8020770:	fb01 220e 	mla	r2, r1, lr, r2
 8020774:	fb00 2204 	mla	r2, r0, r4, r2
 8020778:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802077a:	fb09 2204 	mla	r2, r9, r4, r2
 802077e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020782:	2a00      	cmp	r2, #0
 8020784:	f000 80e8 	beq.w	8020958 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8020788:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802078c:	d01b      	beq.n	80207c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802078e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020792:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020796:	fb0e fa0a 	mul.w	sl, lr, sl
 802079a:	fb0e fe03 	mul.w	lr, lr, r3
 802079e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80207a2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80207a6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80207aa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207ae:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80207b2:	4453      	add	r3, sl
 80207b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80207b8:	0a1b      	lsrs	r3, r3, #8
 80207ba:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80207be:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80207c2:	ea43 030c 	orr.w	r3, r3, ip
 80207c6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207c8:	2cff      	cmp	r4, #255	@ 0xff
 80207ca:	d021      	beq.n	8020810 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 80207cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80207ce:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80207d2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207d4:	fb04 fc0c 	mul.w	ip, r4, ip
 80207d8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80207da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80207de:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80207e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80207e4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80207e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80207ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80207f0:	44e6      	add	lr, ip
 80207f2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80207f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80207fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80207fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020802:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020806:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802080a:	ea4e 040a 	orr.w	r4, lr, sl
 802080e:	940c      	str	r4, [sp, #48]	@ 0x30
 8020810:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020812:	2cff      	cmp	r4, #255	@ 0xff
 8020814:	d021      	beq.n	802085a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8020816:	9c08      	ldr	r4, [sp, #32]
 8020818:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802081c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802081e:	fb04 fc0c 	mul.w	ip, r4, ip
 8020822:	9c08      	ldr	r4, [sp, #32]
 8020824:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8020828:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802082a:	fb04 fa0e 	mul.w	sl, r4, lr
 802082e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020832:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020836:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802083a:	44e6      	add	lr, ip
 802083c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020840:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020844:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020848:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802084c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020850:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020854:	ea4e 040a 	orr.w	r4, lr, sl
 8020858:	9408      	str	r4, [sp, #32]
 802085a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802085c:	2cff      	cmp	r4, #255	@ 0xff
 802085e:	d021      	beq.n	80208a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8020860:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020862:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020866:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020868:	fb04 fc0c 	mul.w	ip, r4, ip
 802086c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802086e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020872:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020876:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020878:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802087c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020880:	fb04 fa0a 	mul.w	sl, r4, sl
 8020884:	44e6      	add	lr, ip
 8020886:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802088a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802088e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020892:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020896:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802089a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802089e:	ea4e 040a 	orr.w	r4, lr, sl
 80208a2:	940d      	str	r4, [sp, #52]	@ 0x34
 80208a4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80208a6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80208aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80208ae:	2aff      	cmp	r2, #255	@ 0xff
 80208b0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80208b4:	9c08      	ldr	r4, [sp, #32]
 80208b6:	fb08 fc0c 	mul.w	ip, r8, ip
 80208ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80208be:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208c2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80208c4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80208c8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80208cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80208ce:	fb09 cc0e 	mla	ip, r9, lr, ip
 80208d2:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80208d6:	fb08 f80e 	mul.w	r8, r8, lr
 80208da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208de:	fb01 8303 	mla	r3, r1, r3, r8
 80208e2:	9908      	ldr	r1, [sp, #32]
 80208e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80208e8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80208ec:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80208ee:	fb00 330a 	mla	r3, r0, sl, r3
 80208f2:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 80208f6:	fb09 3e0e 	mla	lr, r9, lr, r3
 80208fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80208fe:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8020902:	ea4c 0c0e 	orr.w	ip, ip, lr
 8020906:	fa5f f08c 	uxtb.w	r0, ip
 802090a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802090e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020912:	d032      	beq.n	802097a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8020914:	43d2      	mvns	r2, r2
 8020916:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 802091a:	b2d2      	uxtb	r2, r2
 802091c:	fb0e fe02 	mul.w	lr, lr, r2
 8020920:	f10e 0301 	add.w	r3, lr, #1
 8020924:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8020928:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802092c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8020930:	4350      	muls	r0, r2
 8020932:	f807 3c03 	strb.w	r3, [r7, #-3]
 8020936:	1c43      	adds	r3, r0, #1
 8020938:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802093c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020940:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8020944:	4353      	muls	r3, r2
 8020946:	f807 1c02 	strb.w	r1, [r7, #-2]
 802094a:	1c5a      	adds	r2, r3, #1
 802094c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020950:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8020954:	f807 cc01 	strb.w	ip, [r7, #-1]
 8020958:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802095a:	3703      	adds	r7, #3
 802095c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020960:	441d      	add	r5, r3
 8020962:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020964:	441e      	add	r6, r3
 8020966:	e64e      	b.n	8020606 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8020968:	2800      	cmp	r0, #0
 802096a:	f43f aeed 	beq.w	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802096e:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8020972:	9108      	str	r1, [sp, #32]
 8020974:	0e09      	lsrs	r1, r1, #24
 8020976:	9110      	str	r1, [sp, #64]	@ 0x40
 8020978:	e6e6      	b.n	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802097a:	f807 0c03 	strb.w	r0, [r7, #-3]
 802097e:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020982:	e7e7      	b.n	8020954 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8020984:	b019      	add	sp, #100	@ 0x64
 8020986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0802098c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 802098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020990:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 8020994:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8020998:	2c00      	cmp	r4, #0
 802099a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802099e:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80209a2:	fb00 4e03 	mla	lr, r0, r3, r4
 80209a6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 80209aa:	f2c0 80b8 	blt.w	8020b1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209ae:	45a1      	cmp	r9, r4
 80209b0:	f340 80b5 	ble.w	8020b1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209b4:	2800      	cmp	r0, #0
 80209b6:	f2c0 80b2 	blt.w	8020b1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209ba:	4580      	cmp	r8, r0
 80209bc:	f340 80af 	ble.w	8020b1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 80209c0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 80209c4:	f01e 0f01 	tst.w	lr, #1
 80209c8:	5d56      	ldrb	r6, [r2, r5]
 80209ca:	bf0c      	ite	eq
 80209cc:	f006 060f 	andeq.w	r6, r6, #15
 80209d0:	1136      	asrne	r6, r6, #4
 80209d2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80209d6:	b2f6      	uxtb	r6, r6
 80209d8:	f114 0a01 	adds.w	sl, r4, #1
 80209dc:	f100 80a1 	bmi.w	8020b22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80209e0:	45d1      	cmp	r9, sl
 80209e2:	f340 809e 	ble.w	8020b22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80209e6:	2800      	cmp	r0, #0
 80209e8:	f2c0 809b 	blt.w	8020b22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80209ec:	4580      	cmp	r8, r0
 80209ee:	f340 8098 	ble.w	8020b22 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 80209f2:	2f00      	cmp	r7, #0
 80209f4:	f000 8097 	beq.w	8020b26 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 80209f8:	f10e 0b01 	add.w	fp, lr, #1
 80209fc:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020a00:	f01b 0f01 	tst.w	fp, #1
 8020a04:	5d55      	ldrb	r5, [r2, r5]
 8020a06:	bf0c      	ite	eq
 8020a08:	f005 050f 	andeq.w	r5, r5, #15
 8020a0c:	112d      	asrne	r5, r5, #4
 8020a0e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020a12:	b2ed      	uxtb	r5, r5
 8020a14:	f1bc 0f00 	cmp.w	ip, #0
 8020a18:	f000 8089 	beq.w	8020b2e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020a1c:	2c00      	cmp	r4, #0
 8020a1e:	f100 0001 	add.w	r0, r0, #1
 8020a22:	f2c0 8082 	blt.w	8020b2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a26:	45a1      	cmp	r9, r4
 8020a28:	dd7f      	ble.n	8020b2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a2a:	2800      	cmp	r0, #0
 8020a2c:	db7d      	blt.n	8020b2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a2e:	4580      	cmp	r8, r0
 8020a30:	dd7b      	ble.n	8020b2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020a32:	eb03 0b0e 	add.w	fp, r3, lr
 8020a36:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020a3a:	f01b 0f01 	tst.w	fp, #1
 8020a3e:	5d14      	ldrb	r4, [r2, r4]
 8020a40:	bf0c      	ite	eq
 8020a42:	f004 040f 	andeq.w	r4, r4, #15
 8020a46:	1124      	asrne	r4, r4, #4
 8020a48:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020a4c:	b2e4      	uxtb	r4, r4
 8020a4e:	f1ba 0f00 	cmp.w	sl, #0
 8020a52:	db6f      	blt.n	8020b34 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a54:	45d1      	cmp	r9, sl
 8020a56:	dd6d      	ble.n	8020b34 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a58:	2800      	cmp	r0, #0
 8020a5a:	db6b      	blt.n	8020b34 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a5c:	4580      	cmp	r8, r0
 8020a5e:	dd69      	ble.n	8020b34 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020a60:	2f00      	cmp	r7, #0
 8020a62:	d069      	beq.n	8020b38 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8020a64:	3301      	adds	r3, #1
 8020a66:	449e      	add	lr, r3
 8020a68:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020a6c:	f01e 0f01 	tst.w	lr, #1
 8020a70:	5cd0      	ldrb	r0, [r2, r3]
 8020a72:	bf0c      	ite	eq
 8020a74:	f000 000f 	andeq.w	r0, r0, #15
 8020a78:	1100      	asrne	r0, r0, #4
 8020a7a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020a7e:	b2c3      	uxtb	r3, r0
 8020a80:	b2ba      	uxth	r2, r7
 8020a82:	fa1f fc8c 	uxth.w	ip, ip
 8020a86:	fb02 f00c 	mul.w	r0, r2, ip
 8020a8a:	0112      	lsls	r2, r2, #4
 8020a8c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020a90:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8020a94:	1a12      	subs	r2, r2, r0
 8020a96:	fa1f fc8c 	uxth.w	ip, ip
 8020a9a:	b292      	uxth	r2, r2
 8020a9c:	eba7 070c 	sub.w	r7, r7, ip
 8020aa0:	436a      	muls	r2, r5
 8020aa2:	b2bf      	uxth	r7, r7
 8020aa4:	fb06 2207 	mla	r2, r6, r7, r2
 8020aa8:	fb0c 2404 	mla	r4, ip, r4, r2
 8020aac:	fb00 4303 	mla	r3, r0, r3, r4
 8020ab0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020ab4:	b38b      	cbz	r3, 8020b1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8020ab6:	4a21      	ldr	r2, [pc, #132]	@ (8020b3c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020ab8:	6814      	ldr	r4, [r2, #0]
 8020aba:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 8020abe:	b2e5      	uxtb	r5, r4
 8020ac0:	4353      	muls	r3, r2
 8020ac2:	1c5a      	adds	r2, r3, #1
 8020ac4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020ac8:	1212      	asrs	r2, r2, #8
 8020aca:	b290      	uxth	r0, r2
 8020acc:	43d2      	mvns	r2, r2
 8020ace:	fb15 f500 	smulbb	r5, r5, r0
 8020ad2:	b2d3      	uxtb	r3, r2
 8020ad4:	780a      	ldrb	r2, [r1, #0]
 8020ad6:	fb02 5203 	mla	r2, r2, r3, r5
 8020ada:	b292      	uxth	r2, r2
 8020adc:	1c55      	adds	r5, r2, #1
 8020ade:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020ae2:	784d      	ldrb	r5, [r1, #1]
 8020ae4:	fb15 f503 	smulbb	r5, r5, r3
 8020ae8:	1212      	asrs	r2, r2, #8
 8020aea:	700a      	strb	r2, [r1, #0]
 8020aec:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020af0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020af4:	fb02 5200 	mla	r2, r2, r0, r5
 8020af8:	b292      	uxth	r2, r2
 8020afa:	1c55      	adds	r5, r2, #1
 8020afc:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020b00:	1212      	asrs	r2, r2, #8
 8020b02:	704a      	strb	r2, [r1, #1]
 8020b04:	788a      	ldrb	r2, [r1, #2]
 8020b06:	fb12 f303 	smulbb	r3, r2, r3
 8020b0a:	fb04 3300 	mla	r3, r4, r0, r3
 8020b0e:	b29b      	uxth	r3, r3
 8020b10:	1c5a      	adds	r2, r3, #1
 8020b12:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b16:	121b      	asrs	r3, r3, #8
 8020b18:	708b      	strb	r3, [r1, #2]
 8020b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b1e:	2600      	movs	r6, #0
 8020b20:	e75a      	b.n	80209d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8020b22:	2500      	movs	r5, #0
 8020b24:	e776      	b.n	8020a14 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020b26:	463d      	mov	r5, r7
 8020b28:	e774      	b.n	8020a14 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020b2a:	2400      	movs	r4, #0
 8020b2c:	e78f      	b.n	8020a4e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020b2e:	4663      	mov	r3, ip
 8020b30:	4664      	mov	r4, ip
 8020b32:	e7a5      	b.n	8020a80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b34:	2300      	movs	r3, #0
 8020b36:	e7a3      	b.n	8020a80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b38:	463b      	mov	r3, r7
 8020b3a:	e7a1      	b.n	8020a80 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020b3c:	24025388 	.word	0x24025388

08020b40 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b44:	b097      	sub	sp, #92	@ 0x5c
 8020b46:	9214      	str	r2, [sp, #80]	@ 0x50
 8020b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b4a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8020b4c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8020b50:	9015      	str	r0, [sp, #84]	@ 0x54
 8020b52:	910c      	str	r1, [sp, #48]	@ 0x30
 8020b54:	6850      	ldr	r0, [r2, #4]
 8020b56:	930e      	str	r3, [sp, #56]	@ 0x38
 8020b58:	6812      	ldr	r2, [r2, #0]
 8020b5a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 8020b5e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 8020b62:	fb00 1303 	mla	r3, r0, r3, r1
 8020b66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020b6a:	eb02 0a03 	add.w	sl, r2, r3
 8020b6e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b70:	689b      	ldr	r3, [r3, #8]
 8020b72:	3301      	adds	r3, #1
 8020b74:	f023 0301 	bic.w	r3, r3, #1
 8020b78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b7a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b7c:	681f      	ldr	r7, [r3, #0]
 8020b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	dc03      	bgt.n	8020b8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020b84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	f340 8247 	ble.w	802101a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020b8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020b8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020b92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020b96:	1e48      	subs	r0, r1, #1
 8020b98:	f102 3cff 	add.w	ip, r2, #4294967295
 8020b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	f340 80e5 	ble.w	8020d6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020ba4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020ba8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020bac:	d406      	bmi.n	8020bbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bae:	4586      	cmp	lr, r0
 8020bb0:	da04      	bge.n	8020bbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bb2:	2b00      	cmp	r3, #0
 8020bb4:	db02      	blt.n	8020bbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020bb6:	4563      	cmp	r3, ip
 8020bb8:	f2c0 80da 	blt.w	8020d70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020bbc:	f11e 0e01 	adds.w	lr, lr, #1
 8020bc0:	f100 80cb 	bmi.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bc4:	4571      	cmp	r1, lr
 8020bc6:	f2c0 80c8 	blt.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bca:	3301      	adds	r3, #1
 8020bcc:	f100 80c5 	bmi.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bd0:	429a      	cmp	r2, r3
 8020bd2:	f2c0 80c2 	blt.w	8020d5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020bd8:	46d0      	mov	r8, sl
 8020bda:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020bde:	930d      	str	r3, [sp, #52]	@ 0x34
 8020be0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	f340 80e3 	ble.w	8020dae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020be8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020bea:	1430      	asrs	r0, r6, #16
 8020bec:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020bf0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020bf4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020bf8:	142b      	asrs	r3, r5, #16
 8020bfa:	f100 812e 	bmi.w	8020e5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020bfe:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020c02:	455b      	cmp	r3, fp
 8020c04:	f280 8129 	bge.w	8020e5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	f2c0 8126 	blt.w	8020e5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c0e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020c12:	4558      	cmp	r0, fp
 8020c14:	f280 8121 	bge.w	8020e5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020c18:	fb00 3309 	mla	r3, r0, r9, r3
 8020c1c:	0858      	lsrs	r0, r3, #1
 8020c1e:	07dc      	lsls	r4, r3, #31
 8020c20:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020c24:	bf54      	ite	pl
 8020c26:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020c2a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020c2e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020c32:	fa5f fc8c 	uxtb.w	ip, ip
 8020c36:	2a00      	cmp	r2, #0
 8020c38:	f000 80fe 	beq.w	8020e38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020c3c:	1c58      	adds	r0, r3, #1
 8020c3e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020c42:	07c0      	lsls	r0, r0, #31
 8020c44:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020c48:	bf54      	ite	pl
 8020c4a:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020c4e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020c52:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020c56:	fa5f f08e 	uxtb.w	r0, lr
 8020c5a:	9010      	str	r0, [sp, #64]	@ 0x40
 8020c5c:	b1d9      	cbz	r1, 8020c96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020c5e:	444b      	add	r3, r9
 8020c60:	0858      	lsrs	r0, r3, #1
 8020c62:	07dc      	lsls	r4, r3, #31
 8020c64:	f103 0301 	add.w	r3, r3, #1
 8020c68:	5c38      	ldrb	r0, [r7, r0]
 8020c6a:	bf54      	ite	pl
 8020c6c:	f000 000f 	andpl.w	r0, r0, #15
 8020c70:	1100      	asrmi	r0, r0, #4
 8020c72:	07dc      	lsls	r4, r3, #31
 8020c74:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020c78:	b2c0      	uxtb	r0, r0
 8020c7a:	900a      	str	r0, [sp, #40]	@ 0x28
 8020c7c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020c80:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020c84:	bf54      	ite	pl
 8020c86:	f00e 030f 	andpl.w	r3, lr, #15
 8020c8a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020c8e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020c92:	b2db      	uxtb	r3, r3
 8020c94:	9311      	str	r3, [sp, #68]	@ 0x44
 8020c96:	b292      	uxth	r2, r2
 8020c98:	b289      	uxth	r1, r1
 8020c9a:	0113      	lsls	r3, r2, #4
 8020c9c:	fb02 f001 	mul.w	r0, r2, r1
 8020ca0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020ca2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8020ca6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020caa:	1a1b      	subs	r3, r3, r0
 8020cac:	b289      	uxth	r1, r1
 8020cae:	b29b      	uxth	r3, r3
 8020cb0:	ebae 0e01 	sub.w	lr, lr, r1
 8020cb4:	4353      	muls	r3, r2
 8020cb6:	fa1f fe8e 	uxth.w	lr, lr
 8020cba:	fb0c 320e 	mla	r2, ip, lr, r3
 8020cbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020cc0:	fb01 2203 	mla	r2, r1, r3, r2
 8020cc4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020cc6:	fb00 2203 	mla	r2, r0, r3, r2
 8020cca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020cce:	2a00      	cmp	r2, #0
 8020cd0:	d039      	beq.n	8020d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020cd2:	4bc7      	ldr	r3, [pc, #796]	@ (8020ff0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020cd4:	6819      	ldr	r1, [r3, #0]
 8020cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cd8:	fa5f fc81 	uxtb.w	ip, r1
 8020cdc:	435a      	muls	r2, r3
 8020cde:	1c53      	adds	r3, r2, #1
 8020ce0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020ce4:	1212      	asrs	r2, r2, #8
 8020ce6:	b290      	uxth	r0, r2
 8020ce8:	43d2      	mvns	r2, r2
 8020cea:	fb1c fc00 	smulbb	ip, ip, r0
 8020cee:	b2d3      	uxtb	r3, r2
 8020cf0:	f898 2000 	ldrb.w	r2, [r8]
 8020cf4:	fb02 c203 	mla	r2, r2, r3, ip
 8020cf8:	b292      	uxth	r2, r2
 8020cfa:	f102 0c01 	add.w	ip, r2, #1
 8020cfe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d02:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020d06:	fb1c fc03 	smulbb	ip, ip, r3
 8020d0a:	1212      	asrs	r2, r2, #8
 8020d0c:	f888 2000 	strb.w	r2, [r8]
 8020d10:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020d14:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020d18:	fb02 c200 	mla	r2, r2, r0, ip
 8020d1c:	b292      	uxth	r2, r2
 8020d1e:	f102 0c01 	add.w	ip, r2, #1
 8020d22:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020d26:	1212      	asrs	r2, r2, #8
 8020d28:	f888 2001 	strb.w	r2, [r8, #1]
 8020d2c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020d30:	fb12 f303 	smulbb	r3, r2, r3
 8020d34:	fb01 3300 	mla	r3, r1, r0, r3
 8020d38:	b29b      	uxth	r3, r3
 8020d3a:	1c5a      	adds	r2, r3, #1
 8020d3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d40:	121b      	asrs	r3, r3, #8
 8020d42:	f888 3002 	strb.w	r3, [r8, #2]
 8020d46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d48:	f108 0803 	add.w	r8, r8, #3
 8020d4c:	441d      	add	r5, r3
 8020d4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d50:	441e      	add	r6, r3
 8020d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020d54:	3b01      	subs	r3, #1
 8020d56:	930d      	str	r3, [sp, #52]	@ 0x34
 8020d58:	e742      	b.n	8020be0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020d5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020d5c:	f10a 0a03 	add.w	sl, sl, #3
 8020d60:	441d      	add	r5, r3
 8020d62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020d64:	441e      	add	r6, r3
 8020d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d68:	3b01      	subs	r3, #1
 8020d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d6c:	e716      	b.n	8020b9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020d6e:	d024      	beq.n	8020dba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d72:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8020d74:	3b01      	subs	r3, #1
 8020d76:	fb00 5003 	mla	r0, r0, r3, r5
 8020d7a:	1400      	asrs	r0, r0, #16
 8020d7c:	f53f af2b 	bmi.w	8020bd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d80:	3901      	subs	r1, #1
 8020d82:	4288      	cmp	r0, r1
 8020d84:	f6bf af27 	bge.w	8020bd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d88:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8020d8a:	fb01 6303 	mla	r3, r1, r3, r6
 8020d8e:	141b      	asrs	r3, r3, #16
 8020d90:	f53f af21 	bmi.w	8020bd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d94:	3a01      	subs	r2, #1
 8020d96:	4293      	cmp	r3, r2
 8020d98:	f6bf af1d 	bge.w	8020bd6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020d9c:	f10a 0e03 	add.w	lr, sl, #3
 8020da0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8020da4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8020da8:	f1b8 0f00 	cmp.w	r8, #0
 8020dac:	dc76      	bgt.n	8020e9c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020db0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020db4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020db8:	44a2      	add	sl, r4
 8020dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	f340 812c 	ble.w	802101a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020dc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020dc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020dcc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020dd0:	eef0 6a62 	vmov.f32	s13, s5
 8020dd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020dd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ddc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020de0:	ee16 5a90 	vmov	r5, s13
 8020de4:	eef0 6a43 	vmov.f32	s13, s6
 8020de8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020dec:	ee16 6a90 	vmov	r6, s13
 8020df0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020df4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020df8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020dfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e08:	ee12 2a90 	vmov	r2, s5
 8020e0c:	eef0 2a47 	vmov.f32	s5, s14
 8020e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e14:	ee13 2a10 	vmov	r2, s6
 8020e18:	9323      	str	r3, [sp, #140]	@ 0x8c
 8020e1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e1c:	eeb0 3a67 	vmov.f32	s6, s15
 8020e20:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e24:	9324      	str	r3, [sp, #144]	@ 0x90
 8020e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020e28:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020e2a:	3b01      	subs	r3, #1
 8020e2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8020e2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8020e30:	bf08      	it	eq
 8020e32:	4613      	moveq	r3, r2
 8020e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8020e36:	e6a2      	b.n	8020b7e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020e38:	2900      	cmp	r1, #0
 8020e3a:	f43f af2c 	beq.w	8020c96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020e3e:	eb09 0003 	add.w	r0, r9, r3
 8020e42:	0843      	lsrs	r3, r0, #1
 8020e44:	07c0      	lsls	r0, r0, #31
 8020e46:	5cfb      	ldrb	r3, [r7, r3]
 8020e48:	bf54      	ite	pl
 8020e4a:	f003 030f 	andpl.w	r3, r3, #15
 8020e4e:	111b      	asrmi	r3, r3, #4
 8020e50:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020e54:	b2db      	uxtb	r3, r3
 8020e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8020e58:	e71d      	b.n	8020c96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020e5a:	f113 0b01 	adds.w	fp, r3, #1
 8020e5e:	f53f af72 	bmi.w	8020d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e62:	45dc      	cmp	ip, fp
 8020e64:	f6ff af6f 	blt.w	8020d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e68:	f110 0b01 	adds.w	fp, r0, #1
 8020e6c:	f53f af6b 	bmi.w	8020d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e70:	45de      	cmp	lr, fp
 8020e72:	f6ff af68 	blt.w	8020d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e76:	9302      	str	r3, [sp, #8]
 8020e78:	fa0f f38e 	sxth.w	r3, lr
 8020e7c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8020e7e:	9301      	str	r3, [sp, #4]
 8020e80:	fa0f f38c 	sxth.w	r3, ip
 8020e84:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020e88:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020e8c:	9300      	str	r3, [sp, #0]
 8020e8e:	463a      	mov	r2, r7
 8020e90:	464b      	mov	r3, r9
 8020e92:	4641      	mov	r1, r8
 8020e94:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020e96:	f7ff fd79 	bl	802098c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020e9a:	e754      	b.n	8020d46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e9c:	142a      	asrs	r2, r5, #16
 8020e9e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020ea2:	1433      	asrs	r3, r6, #16
 8020ea4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020ea8:	fb09 2303 	mla	r3, r9, r3, r2
 8020eac:	085a      	lsrs	r2, r3, #1
 8020eae:	07dc      	lsls	r4, r3, #31
 8020eb0:	5cba      	ldrb	r2, [r7, r2]
 8020eb2:	bf54      	ite	pl
 8020eb4:	f002 020f 	andpl.w	r2, r2, #15
 8020eb8:	1112      	asrmi	r2, r2, #4
 8020eba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020ebe:	b2d2      	uxtb	r2, r2
 8020ec0:	2900      	cmp	r1, #0
 8020ec2:	f000 8097 	beq.w	8020ff4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020ec6:	f103 0b01 	add.w	fp, r3, #1
 8020eca:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8020ece:	f01b 0f01 	tst.w	fp, #1
 8020ed2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020ed6:	bf0c      	ite	eq
 8020ed8:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020edc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020ee0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020ee4:	fa5f f48c 	uxtb.w	r4, ip
 8020ee8:	9412      	str	r4, [sp, #72]	@ 0x48
 8020eea:	b300      	cbz	r0, 8020f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020eec:	444b      	add	r3, r9
 8020eee:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020ef2:	07dc      	lsls	r4, r3, #31
 8020ef4:	f103 0301 	add.w	r3, r3, #1
 8020ef8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020efc:	bf54      	ite	pl
 8020efe:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f02:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f06:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f0a:	fa5f f48c 	uxtb.w	r4, ip
 8020f0e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020f12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020f14:	07dc      	lsls	r4, r3, #31
 8020f16:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020f1a:	bf54      	ite	pl
 8020f1c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f20:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f24:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f28:	fa5f f38c 	uxtb.w	r3, ip
 8020f2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020f2e:	b289      	uxth	r1, r1
 8020f30:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020f32:	b280      	uxth	r0, r0
 8020f34:	fb01 f300 	mul.w	r3, r1, r0
 8020f38:	0109      	lsls	r1, r1, #4
 8020f3a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020f3e:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 8020f42:	1ac9      	subs	r1, r1, r3
 8020f44:	b280      	uxth	r0, r0
 8020f46:	b289      	uxth	r1, r1
 8020f48:	ebac 0c00 	sub.w	ip, ip, r0
 8020f4c:	4361      	muls	r1, r4
 8020f4e:	fa1f fc8c 	uxth.w	ip, ip
 8020f52:	fb02 120c 	mla	r2, r2, ip, r1
 8020f56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020f58:	fb00 2001 	mla	r0, r0, r1, r2
 8020f5c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020f5e:	fb03 0302 	mla	r3, r3, r2, r0
 8020f62:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020f66:	2b00      	cmp	r3, #0
 8020f68:	d039      	beq.n	8020fde <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020f6a:	4a21      	ldr	r2, [pc, #132]	@ (8020ff0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020f6c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020f70:	6810      	ldr	r0, [r2, #0]
 8020f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020f74:	fa5f fc80 	uxtb.w	ip, r0
 8020f78:	4353      	muls	r3, r2
 8020f7a:	1c5a      	adds	r2, r3, #1
 8020f7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020f80:	121b      	asrs	r3, r3, #8
 8020f82:	b29a      	uxth	r2, r3
 8020f84:	43db      	mvns	r3, r3
 8020f86:	fb1c fc02 	smulbb	ip, ip, r2
 8020f8a:	b2db      	uxtb	r3, r3
 8020f8c:	fb01 c103 	mla	r1, r1, r3, ip
 8020f90:	b289      	uxth	r1, r1
 8020f92:	f101 0c01 	add.w	ip, r1, #1
 8020f96:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020f9a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020f9e:	fb1c fc03 	smulbb	ip, ip, r3
 8020fa2:	1209      	asrs	r1, r1, #8
 8020fa4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020fa8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020fac:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020fb0:	fb01 c102 	mla	r1, r1, r2, ip
 8020fb4:	b289      	uxth	r1, r1
 8020fb6:	f101 0c01 	add.w	ip, r1, #1
 8020fba:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020fbe:	1209      	asrs	r1, r1, #8
 8020fc0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020fc4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020fc8:	fb11 f303 	smulbb	r3, r1, r3
 8020fcc:	fb00 3002 	mla	r0, r0, r2, r3
 8020fd0:	b280      	uxth	r0, r0
 8020fd2:	1c42      	adds	r2, r0, #1
 8020fd4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020fd8:	1200      	asrs	r0, r0, #8
 8020fda:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020fde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020fe0:	f10e 0e03 	add.w	lr, lr, #3
 8020fe4:	f108 38ff 	add.w	r8, r8, #4294967295
 8020fe8:	441d      	add	r5, r3
 8020fea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8020fec:	441e      	add	r6, r3
 8020fee:	e6db      	b.n	8020da8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8020ff0:	24025388 	.word	0x24025388
 8020ff4:	2800      	cmp	r0, #0
 8020ff6:	d09a      	beq.n	8020f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020ff8:	444b      	add	r3, r9
 8020ffa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020ffe:	07db      	lsls	r3, r3, #31
 8021000:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021004:	bf54      	ite	pl
 8021006:	f00c 0c0f 	andpl.w	ip, ip, #15
 802100a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802100e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021012:	fa5f f38c 	uxtb.w	r3, ip
 8021016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021018:	e789      	b.n	8020f2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802101a:	b017      	add	sp, #92	@ 0x5c
 802101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021020 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8021020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021024:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8021028:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802102c:	2d00      	cmp	r5, #0
 802102e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8021032:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8021036:	fb04 5e03 	mla	lr, r4, r3, r5
 802103a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802103e:	f2c0 80b1 	blt.w	80211a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021042:	45a9      	cmp	r9, r5
 8021044:	f340 80ae 	ble.w	80211a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021048:	2c00      	cmp	r4, #0
 802104a:	f2c0 80ab 	blt.w	80211a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802104e:	45a0      	cmp	r8, r4
 8021050:	f340 80a8 	ble.w	80211a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8021054:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8021058:	f01e 0f01 	tst.w	lr, #1
 802105c:	5d97      	ldrb	r7, [r2, r6]
 802105e:	bf0c      	ite	eq
 8021060:	f007 070f 	andeq.w	r7, r7, #15
 8021064:	113f      	asrne	r7, r7, #4
 8021066:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 802106a:	b2ff      	uxtb	r7, r7
 802106c:	f115 0a01 	adds.w	sl, r5, #1
 8021070:	f100 809a 	bmi.w	80211a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021074:	45d1      	cmp	r9, sl
 8021076:	f340 8097 	ble.w	80211a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802107a:	2c00      	cmp	r4, #0
 802107c:	f2c0 8094 	blt.w	80211a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021080:	45a0      	cmp	r8, r4
 8021082:	f340 8091 	ble.w	80211a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021086:	2800      	cmp	r0, #0
 8021088:	f000 8090 	beq.w	80211ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 802108c:	f10e 0b01 	add.w	fp, lr, #1
 8021090:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8021094:	f01b 0f01 	tst.w	fp, #1
 8021098:	5d96      	ldrb	r6, [r2, r6]
 802109a:	bf0c      	ite	eq
 802109c:	f006 060f 	andeq.w	r6, r6, #15
 80210a0:	1136      	asrne	r6, r6, #4
 80210a2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80210a6:	b2f6      	uxtb	r6, r6
 80210a8:	f1bc 0f00 	cmp.w	ip, #0
 80210ac:	f000 8082 	beq.w	80211b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 80210b0:	2d00      	cmp	r5, #0
 80210b2:	f104 0401 	add.w	r4, r4, #1
 80210b6:	db7b      	blt.n	80211b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210b8:	45a9      	cmp	r9, r5
 80210ba:	dd79      	ble.n	80211b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210bc:	2c00      	cmp	r4, #0
 80210be:	db77      	blt.n	80211b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210c0:	45a0      	cmp	r8, r4
 80210c2:	dd75      	ble.n	80211b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 80210c4:	eb03 0b0e 	add.w	fp, r3, lr
 80210c8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80210cc:	f01b 0f01 	tst.w	fp, #1
 80210d0:	5d55      	ldrb	r5, [r2, r5]
 80210d2:	bf0c      	ite	eq
 80210d4:	f005 050f 	andeq.w	r5, r5, #15
 80210d8:	112d      	asrne	r5, r5, #4
 80210da:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80210de:	b2ed      	uxtb	r5, r5
 80210e0:	f1ba 0f00 	cmp.w	sl, #0
 80210e4:	db69      	blt.n	80211ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80210e6:	45d1      	cmp	r9, sl
 80210e8:	dd67      	ble.n	80211ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80210ea:	2c00      	cmp	r4, #0
 80210ec:	db65      	blt.n	80211ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80210ee:	45a0      	cmp	r8, r4
 80210f0:	dd63      	ble.n	80211ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 80210f2:	2800      	cmp	r0, #0
 80210f4:	d063      	beq.n	80211be <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 80210f6:	3301      	adds	r3, #1
 80210f8:	449e      	add	lr, r3
 80210fa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80210fe:	f01e 0f01 	tst.w	lr, #1
 8021102:	5cd4      	ldrb	r4, [r2, r3]
 8021104:	bf0c      	ite	eq
 8021106:	f004 040f 	andeq.w	r4, r4, #15
 802110a:	1124      	asrne	r4, r4, #4
 802110c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021110:	b2e3      	uxtb	r3, r4
 8021112:	b282      	uxth	r2, r0
 8021114:	fa1f fc8c 	uxth.w	ip, ip
 8021118:	fb02 f40c 	mul.w	r4, r2, ip
 802111c:	0112      	lsls	r2, r2, #4
 802111e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8021122:	fa1f f08c 	uxth.w	r0, ip
 8021126:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 802112a:	1b12      	subs	r2, r2, r4
 802112c:	ebac 0c00 	sub.w	ip, ip, r0
 8021130:	b292      	uxth	r2, r2
 8021132:	fa1f fc8c 	uxth.w	ip, ip
 8021136:	4372      	muls	r2, r6
 8021138:	fb07 220c 	mla	r2, r7, ip, r2
 802113c:	fb00 2005 	mla	r0, r0, r5, r2
 8021140:	fb04 0303 	mla	r3, r4, r3, r0
 8021144:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021148:	b353      	cbz	r3, 80211a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 802114a:	4a1e      	ldr	r2, [pc, #120]	@ (80211c4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 802114c:	7808      	ldrb	r0, [r1, #0]
 802114e:	6814      	ldr	r4, [r2, #0]
 8021150:	b29a      	uxth	r2, r3
 8021152:	43db      	mvns	r3, r3
 8021154:	b2e5      	uxtb	r5, r4
 8021156:	b2db      	uxtb	r3, r3
 8021158:	fb15 f502 	smulbb	r5, r5, r2
 802115c:	fb00 5003 	mla	r0, r0, r3, r5
 8021160:	b280      	uxth	r0, r0
 8021162:	1c45      	adds	r5, r0, #1
 8021164:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021168:	784d      	ldrb	r5, [r1, #1]
 802116a:	fb15 f503 	smulbb	r5, r5, r3
 802116e:	1200      	asrs	r0, r0, #8
 8021170:	7008      	strb	r0, [r1, #0]
 8021172:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8021176:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802117a:	fb00 5002 	mla	r0, r0, r2, r5
 802117e:	b280      	uxth	r0, r0
 8021180:	1c45      	adds	r5, r0, #1
 8021182:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021186:	1200      	asrs	r0, r0, #8
 8021188:	7048      	strb	r0, [r1, #1]
 802118a:	7888      	ldrb	r0, [r1, #2]
 802118c:	fb10 f303 	smulbb	r3, r0, r3
 8021190:	fb04 3202 	mla	r2, r4, r2, r3
 8021194:	b292      	uxth	r2, r2
 8021196:	1c53      	adds	r3, r2, #1
 8021198:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802119c:	1212      	asrs	r2, r2, #8
 802119e:	708a      	strb	r2, [r1, #2]
 80211a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211a4:	2700      	movs	r7, #0
 80211a6:	e761      	b.n	802106c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 80211a8:	2600      	movs	r6, #0
 80211aa:	e77d      	b.n	80210a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80211ac:	4606      	mov	r6, r0
 80211ae:	e77b      	b.n	80210a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 80211b0:	2500      	movs	r5, #0
 80211b2:	e795      	b.n	80210e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 80211b4:	4663      	mov	r3, ip
 80211b6:	4665      	mov	r5, ip
 80211b8:	e7ab      	b.n	8021112 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211ba:	2300      	movs	r3, #0
 80211bc:	e7a9      	b.n	8021112 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211be:	4603      	mov	r3, r0
 80211c0:	e7a7      	b.n	8021112 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 80211c2:	bf00      	nop
 80211c4:	24025388 	.word	0x24025388

080211c8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80211c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211cc:	b093      	sub	sp, #76	@ 0x4c
 80211ce:	461c      	mov	r4, r3
 80211d0:	920c      	str	r2, [sp, #48]	@ 0x30
 80211d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80211d4:	9011      	str	r0, [sp, #68]	@ 0x44
 80211d6:	9107      	str	r1, [sp, #28]
 80211d8:	6850      	ldr	r0, [r2, #4]
 80211da:	6812      	ldr	r2, [r2, #0]
 80211dc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 80211e0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 80211e4:	fb00 1303 	mla	r3, r0, r3, r1
 80211e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80211ec:	eb02 0b03 	add.w	fp, r2, r3
 80211f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80211f2:	689b      	ldr	r3, [r3, #8]
 80211f4:	3301      	adds	r3, #1
 80211f6:	f023 0301 	bic.w	r3, r3, #1
 80211fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80211fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80211fe:	f8d3 8000 	ldr.w	r8, [r3]
 8021202:	9b07      	ldr	r3, [sp, #28]
 8021204:	2b00      	cmp	r3, #0
 8021206:	dc03      	bgt.n	8021210 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802120a:	2b00      	cmp	r3, #0
 802120c:	f340 822b 	ble.w	8021666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021210:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021212:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021216:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802121a:	1e48      	subs	r0, r1, #1
 802121c:	1e57      	subs	r7, r2, #1
 802121e:	2c00      	cmp	r4, #0
 8021220:	f340 80d7 	ble.w	80213d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8021224:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8021228:	ea4f 4326 	mov.w	r3, r6, asr #16
 802122c:	d406      	bmi.n	802123c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802122e:	4584      	cmp	ip, r0
 8021230:	da04      	bge.n	802123c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021232:	2b00      	cmp	r3, #0
 8021234:	db02      	blt.n	802123c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8021236:	42bb      	cmp	r3, r7
 8021238:	f2c0 80cc 	blt.w	80213d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802123c:	f11c 0c01 	adds.w	ip, ip, #1
 8021240:	f100 80bf 	bmi.w	80213c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021244:	4561      	cmp	r1, ip
 8021246:	f2c0 80bc 	blt.w	80213c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802124a:	3301      	adds	r3, #1
 802124c:	f100 80b9 	bmi.w	80213c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021250:	429a      	cmp	r2, r3
 8021252:	f2c0 80b6 	blt.w	80213c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8021256:	46a2      	mov	sl, r4
 8021258:	465f      	mov	r7, fp
 802125a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802125e:	f1ba 0f00 	cmp.w	sl, #0
 8021262:	f340 80d4 	ble.w	802140e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021266:	f3c5 3303 	ubfx	r3, r5, #12, #4
 802126a:	1430      	asrs	r0, r6, #16
 802126c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021270:	9308      	str	r3, [sp, #32]
 8021272:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021274:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021278:	142b      	asrs	r3, r5, #16
 802127a:	f100 8124 	bmi.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802127e:	f10c 32ff 	add.w	r2, ip, #4294967295
 8021282:	4293      	cmp	r3, r2
 8021284:	f280 811f 	bge.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021288:	2800      	cmp	r0, #0
 802128a:	f2c0 811c 	blt.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802128e:	f10e 32ff 	add.w	r2, lr, #4294967295
 8021292:	4290      	cmp	r0, r2
 8021294:	f280 8117 	bge.w	80214c6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021298:	fb00 3309 	mla	r3, r0, r9, r3
 802129c:	0858      	lsrs	r0, r3, #1
 802129e:	07da      	lsls	r2, r3, #31
 80212a0:	9a08      	ldr	r2, [sp, #32]
 80212a2:	f818 c000 	ldrb.w	ip, [r8, r0]
 80212a6:	bf54      	ite	pl
 80212a8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80212ac:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80212b0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80212b4:	fa5f fc8c 	uxtb.w	ip, ip
 80212b8:	2a00      	cmp	r2, #0
 80212ba:	f000 80ed 	beq.w	8021498 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 80212be:	1c58      	adds	r0, r3, #1
 80212c0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80212c4:	07c0      	lsls	r0, r0, #31
 80212c6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80212ca:	bf54      	ite	pl
 80212cc:	f00e 0e0f 	andpl.w	lr, lr, #15
 80212d0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80212d4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80212d8:	fa5f fe8e 	uxtb.w	lr, lr
 80212dc:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 80212e0:	b1c9      	cbz	r1, 8021316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80212e2:	444b      	add	r3, r9
 80212e4:	0858      	lsrs	r0, r3, #1
 80212e6:	07da      	lsls	r2, r3, #31
 80212e8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80212ec:	bf54      	ite	pl
 80212ee:	f000 000f 	andpl.w	r0, r0, #15
 80212f2:	1100      	asrmi	r0, r0, #4
 80212f4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80212f8:	b2c0      	uxtb	r0, r0
 80212fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80212fc:	1c58      	adds	r0, r3, #1
 80212fe:	0843      	lsrs	r3, r0, #1
 8021300:	07c2      	lsls	r2, r0, #31
 8021302:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021306:	bf54      	ite	pl
 8021308:	f003 030f 	andpl.w	r3, r3, #15
 802130c:	111b      	asrmi	r3, r3, #4
 802130e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021312:	b2db      	uxtb	r3, r3
 8021314:	930e      	str	r3, [sp, #56]	@ 0x38
 8021316:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802131a:	b289      	uxth	r1, r1
 802131c:	fb02 f301 	mul.w	r3, r2, r1
 8021320:	0112      	lsls	r2, r2, #4
 8021322:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021326:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802132a:	1ad2      	subs	r2, r2, r3
 802132c:	b289      	uxth	r1, r1
 802132e:	b292      	uxth	r2, r2
 8021330:	1a40      	subs	r0, r0, r1
 8021332:	fa1f fe80 	uxth.w	lr, r0
 8021336:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021338:	4342      	muls	r2, r0
 802133a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802133e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021340:	fb01 c102 	mla	r1, r1, r2, ip
 8021344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021346:	fb03 1302 	mla	r3, r3, r2, r1
 802134a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802134e:	b383      	cbz	r3, 80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021350:	4ac6      	ldr	r2, [pc, #792]	@ (802166c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8021352:	2bff      	cmp	r3, #255	@ 0xff
 8021354:	6812      	ldr	r2, [r2, #0]
 8021356:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802135a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 802135e:	b2d2      	uxtb	r2, r2
 8021360:	f000 80ac 	beq.w	80214bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021364:	b299      	uxth	r1, r3
 8021366:	43db      	mvns	r3, r3
 8021368:	f897 c000 	ldrb.w	ip, [r7]
 802136c:	fb12 f201 	smulbb	r2, r2, r1
 8021370:	b2db      	uxtb	r3, r3
 8021372:	fb10 f001 	smulbb	r0, r0, r1
 8021376:	fb0c 2203 	mla	r2, ip, r3, r2
 802137a:	fb1e f101 	smulbb	r1, lr, r1
 802137e:	b292      	uxth	r2, r2
 8021380:	f102 0c01 	add.w	ip, r2, #1
 8021384:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021388:	1212      	asrs	r2, r2, #8
 802138a:	703a      	strb	r2, [r7, #0]
 802138c:	787a      	ldrb	r2, [r7, #1]
 802138e:	fb02 0003 	mla	r0, r2, r3, r0
 8021392:	b280      	uxth	r0, r0
 8021394:	1c42      	adds	r2, r0, #1
 8021396:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802139a:	78ba      	ldrb	r2, [r7, #2]
 802139c:	fb02 1303 	mla	r3, r2, r3, r1
 80213a0:	1200      	asrs	r0, r0, #8
 80213a2:	b29b      	uxth	r3, r3
 80213a4:	7078      	strb	r0, [r7, #1]
 80213a6:	f103 0e01 	add.w	lr, r3, #1
 80213aa:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80213ae:	121b      	asrs	r3, r3, #8
 80213b0:	70bb      	strb	r3, [r7, #2]
 80213b2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80213b4:	3703      	adds	r7, #3
 80213b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80213ba:	441d      	add	r5, r3
 80213bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80213be:	441e      	add	r6, r3
 80213c0:	e74d      	b.n	802125e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80213c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80213c4:	3c01      	subs	r4, #1
 80213c6:	f10b 0b03 	add.w	fp, fp, #3
 80213ca:	441d      	add	r5, r3
 80213cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80213ce:	441e      	add	r6, r3
 80213d0:	e725      	b.n	802121e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80213d2:	d021      	beq.n	8021418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80213d4:	1e63      	subs	r3, r4, #1
 80213d6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80213d8:	fb00 5003 	mla	r0, r0, r3, r5
 80213dc:	1400      	asrs	r0, r0, #16
 80213de:	f53f af3a 	bmi.w	8021256 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80213e2:	3901      	subs	r1, #1
 80213e4:	4288      	cmp	r0, r1
 80213e6:	f6bf af36 	bge.w	8021256 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80213ea:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80213ec:	fb01 6303 	mla	r3, r1, r3, r6
 80213f0:	141b      	asrs	r3, r3, #16
 80213f2:	f53f af30 	bmi.w	8021256 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80213f6:	3a01      	subs	r2, #1
 80213f8:	4293      	cmp	r3, r2
 80213fa:	f6bf af2c 	bge.w	8021256 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80213fe:	f10b 0c03 	add.w	ip, fp, #3
 8021402:	46a6      	mov	lr, r4
 8021404:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8021408:	f1be 0f00 	cmp.w	lr, #0
 802140c:	dc79      	bgt.n	8021502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802140e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8021412:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021416:	44a3      	add	fp, r4
 8021418:	9b07      	ldr	r3, [sp, #28]
 802141a:	2b00      	cmp	r3, #0
 802141c:	f340 8123 	ble.w	8021666 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021424:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021426:	ee30 0a04 	vadd.f32	s0, s0, s8
 802142a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802142e:	eef0 6a62 	vmov.f32	s13, s5
 8021432:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021436:	ee31 1a05 	vadd.f32	s2, s2, s10
 802143a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802143e:	ee16 5a90 	vmov	r5, s13
 8021442:	eef0 6a43 	vmov.f32	s13, s6
 8021446:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802144a:	ee16 6a90 	vmov	r6, s13
 802144e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021452:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021456:	ee77 2a62 	vsub.f32	s5, s14, s5
 802145a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802145e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021462:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021466:	ee12 2a90 	vmov	r2, s5
 802146a:	eef0 2a47 	vmov.f32	s5, s14
 802146e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021472:	ee13 2a10 	vmov	r2, s6
 8021476:	931f      	str	r3, [sp, #124]	@ 0x7c
 8021478:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802147a:	eeb0 3a67 	vmov.f32	s6, s15
 802147e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021482:	9320      	str	r3, [sp, #128]	@ 0x80
 8021484:	9b07      	ldr	r3, [sp, #28]
 8021486:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021488:	3b01      	subs	r3, #1
 802148a:	9307      	str	r3, [sp, #28]
 802148c:	bf08      	it	eq
 802148e:	4614      	moveq	r4, r2
 8021490:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021492:	bf18      	it	ne
 8021494:	461c      	movne	r4, r3
 8021496:	e6b4      	b.n	8021202 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021498:	2900      	cmp	r1, #0
 802149a:	f43f af3c 	beq.w	8021316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802149e:	eb09 0003 	add.w	r0, r9, r3
 80214a2:	0843      	lsrs	r3, r0, #1
 80214a4:	07c0      	lsls	r0, r0, #31
 80214a6:	f818 3003 	ldrb.w	r3, [r8, r3]
 80214aa:	bf54      	ite	pl
 80214ac:	f003 030f 	andpl.w	r3, r3, #15
 80214b0:	111b      	asrmi	r3, r3, #4
 80214b2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214b6:	b2db      	uxtb	r3, r3
 80214b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80214ba:	e72c      	b.n	8021316 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80214bc:	703a      	strb	r2, [r7, #0]
 80214be:	7078      	strb	r0, [r7, #1]
 80214c0:	f887 e002 	strb.w	lr, [r7, #2]
 80214c4:	e775      	b.n	80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214c6:	1c5a      	adds	r2, r3, #1
 80214c8:	f53f af73 	bmi.w	80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214cc:	4594      	cmp	ip, r2
 80214ce:	f6ff af70 	blt.w	80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214d2:	1c42      	adds	r2, r0, #1
 80214d4:	f53f af6d 	bmi.w	80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214d8:	4596      	cmp	lr, r2
 80214da:	f6ff af6a 	blt.w	80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214de:	9302      	str	r3, [sp, #8]
 80214e0:	fa0f f38e 	sxth.w	r3, lr
 80214e4:	9a08      	ldr	r2, [sp, #32]
 80214e6:	9301      	str	r3, [sp, #4]
 80214e8:	fa0f f38c 	sxth.w	r3, ip
 80214ec:	9105      	str	r1, [sp, #20]
 80214ee:	4639      	mov	r1, r7
 80214f0:	9300      	str	r3, [sp, #0]
 80214f2:	464b      	mov	r3, r9
 80214f4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80214f8:	4642      	mov	r2, r8
 80214fa:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80214fc:	f7ff fd90 	bl	8021020 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8021500:	e757      	b.n	80213b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021502:	142a      	asrs	r2, r5, #16
 8021504:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021508:	1433      	asrs	r3, r6, #16
 802150a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802150e:	fb09 2303 	mla	r3, r9, r3, r2
 8021512:	085a      	lsrs	r2, r3, #1
 8021514:	07d9      	lsls	r1, r3, #31
 8021516:	f818 2002 	ldrb.w	r2, [r8, r2]
 802151a:	bf54      	ite	pl
 802151c:	f002 020f 	andpl.w	r2, r2, #15
 8021520:	1112      	asrmi	r2, r2, #4
 8021522:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021526:	b2d2      	uxtb	r2, r2
 8021528:	2800      	cmp	r0, #0
 802152a:	f000 8085 	beq.w	8021638 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 802152e:	f103 0a01 	add.w	sl, r3, #1
 8021532:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8021536:	f01a 0f01 	tst.w	sl, #1
 802153a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802153e:	bf0c      	ite	eq
 8021540:	f001 010f 	andeq.w	r1, r1, #15
 8021544:	1109      	asrne	r1, r1, #4
 8021546:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802154a:	b2c9      	uxtb	r1, r1
 802154c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802154e:	b1df      	cbz	r7, 8021588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021550:	444b      	add	r3, r9
 8021552:	0859      	lsrs	r1, r3, #1
 8021554:	f013 0f01 	tst.w	r3, #1
 8021558:	f103 0301 	add.w	r3, r3, #1
 802155c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021560:	bf0c      	ite	eq
 8021562:	f001 010f 	andeq.w	r1, r1, #15
 8021566:	1109      	asrne	r1, r1, #4
 8021568:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802156c:	b2c9      	uxtb	r1, r1
 802156e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021570:	0859      	lsrs	r1, r3, #1
 8021572:	07db      	lsls	r3, r3, #31
 8021574:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021578:	bf54      	ite	pl
 802157a:	f001 010f 	andpl.w	r1, r1, #15
 802157e:	1109      	asrmi	r1, r1, #4
 8021580:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021584:	b2c9      	uxtb	r1, r1
 8021586:	9110      	str	r1, [sp, #64]	@ 0x40
 8021588:	b280      	uxth	r0, r0
 802158a:	b2bf      	uxth	r7, r7
 802158c:	fb00 f307 	mul.w	r3, r0, r7
 8021590:	0100      	lsls	r0, r0, #4
 8021592:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8021596:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802159a:	1ac0      	subs	r0, r0, r3
 802159c:	b2bf      	uxth	r7, r7
 802159e:	b280      	uxth	r0, r0
 80215a0:	1bc9      	subs	r1, r1, r7
 80215a2:	fa1f fa81 	uxth.w	sl, r1
 80215a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80215a8:	4348      	muls	r0, r1
 80215aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80215ac:	fb02 020a 	mla	r2, r2, sl, r0
 80215b0:	fb07 2701 	mla	r7, r7, r1, r2
 80215b4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80215b6:	fb03 7302 	mla	r3, r3, r2, r7
 80215ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80215be:	b393      	cbz	r3, 8021626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80215c0:	4a2a      	ldr	r2, [pc, #168]	@ (802166c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80215c2:	2bff      	cmp	r3, #255	@ 0xff
 80215c4:	6811      	ldr	r1, [r2, #0]
 80215c6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80215ca:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80215ce:	b2c9      	uxtb	r1, r1
 80215d0:	d042      	beq.n	8021658 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 80215d2:	b298      	uxth	r0, r3
 80215d4:	43db      	mvns	r3, r3
 80215d6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 80215da:	fb11 f100 	smulbb	r1, r1, r0
 80215de:	b2db      	uxtb	r3, r3
 80215e0:	fb17 f700 	smulbb	r7, r7, r0
 80215e4:	fb02 1103 	mla	r1, r2, r3, r1
 80215e8:	fb1a f000 	smulbb	r0, sl, r0
 80215ec:	b289      	uxth	r1, r1
 80215ee:	1c4a      	adds	r2, r1, #1
 80215f0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80215f4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 80215f8:	fb02 7703 	mla	r7, r2, r3, r7
 80215fc:	1209      	asrs	r1, r1, #8
 80215fe:	b2bf      	uxth	r7, r7
 8021600:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8021604:	1c7a      	adds	r2, r7, #1
 8021606:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802160a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 802160e:	fb02 0303 	mla	r3, r2, r3, r0
 8021612:	123f      	asrs	r7, r7, #8
 8021614:	b29b      	uxth	r3, r3
 8021616:	f80c 7c02 	strb.w	r7, [ip, #-2]
 802161a:	1c5a      	adds	r2, r3, #1
 802161c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021620:	121b      	asrs	r3, r3, #8
 8021622:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8021626:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8021628:	f10c 0c03 	add.w	ip, ip, #3
 802162c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021630:	441d      	add	r5, r3
 8021632:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8021634:	441e      	add	r6, r3
 8021636:	e6e7      	b.n	8021408 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8021638:	2f00      	cmp	r7, #0
 802163a:	d0a5      	beq.n	8021588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802163c:	444b      	add	r3, r9
 802163e:	0859      	lsrs	r1, r3, #1
 8021640:	07db      	lsls	r3, r3, #31
 8021642:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021646:	bf54      	ite	pl
 8021648:	f001 010f 	andpl.w	r1, r1, #15
 802164c:	1109      	asrmi	r1, r1, #4
 802164e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021652:	b2c9      	uxtb	r1, r1
 8021654:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021656:	e797      	b.n	8021588 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021658:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802165c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021660:	f80c ac01 	strb.w	sl, [ip, #-1]
 8021664:	e7df      	b.n	8021626 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021666:	b013      	add	sp, #76	@ 0x4c
 8021668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802166c:	24025388 	.word	0x24025388

08021670 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8021670:	b530      	push	{r4, r5, lr}
 8021672:	b29d      	uxth	r5, r3
 8021674:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8021678:	780c      	ldrb	r4, [r1, #0]
 802167a:	b298      	uxth	r0, r3
 802167c:	7813      	ldrb	r3, [r2, #0]
 802167e:	fb14 f405 	smulbb	r4, r4, r5
 8021682:	fb13 f300 	smulbb	r3, r3, r0
 8021686:	441c      	add	r4, r3
 8021688:	b2a4      	uxth	r4, r4
 802168a:	1c63      	adds	r3, r4, #1
 802168c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021690:	7853      	ldrb	r3, [r2, #1]
 8021692:	fb13 f300 	smulbb	r3, r3, r0
 8021696:	1224      	asrs	r4, r4, #8
 8021698:	7014      	strb	r4, [r2, #0]
 802169a:	784c      	ldrb	r4, [r1, #1]
 802169c:	fb14 f405 	smulbb	r4, r4, r5
 80216a0:	441c      	add	r4, r3
 80216a2:	b2a4      	uxth	r4, r4
 80216a4:	1c63      	adds	r3, r4, #1
 80216a6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80216aa:	1224      	asrs	r4, r4, #8
 80216ac:	7054      	strb	r4, [r2, #1]
 80216ae:	788b      	ldrb	r3, [r1, #2]
 80216b0:	7891      	ldrb	r1, [r2, #2]
 80216b2:	fb13 f305 	smulbb	r3, r3, r5
 80216b6:	fb11 f000 	smulbb	r0, r1, r0
 80216ba:	4403      	add	r3, r0
 80216bc:	b29b      	uxth	r3, r3
 80216be:	1c59      	adds	r1, r3, #1
 80216c0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80216c4:	121b      	asrs	r3, r3, #8
 80216c6:	7093      	strb	r3, [r2, #2]
 80216c8:	bd30      	pop	{r4, r5, pc}
	...

080216cc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80216cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216d0:	461c      	mov	r4, r3
 80216d2:	b08b      	sub	sp, #44	@ 0x2c
 80216d4:	460e      	mov	r6, r1
 80216d6:	4615      	mov	r5, r2
 80216d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80216da:	4682      	mov	sl, r0
 80216dc:	6861      	ldr	r1, [r4, #4]
 80216de:	aa06      	add	r2, sp, #24
 80216e0:	6820      	ldr	r0, [r4, #0]
 80216e2:	2702      	movs	r7, #2
 80216e4:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 80216e8:	3504      	adds	r5, #4
 80216ea:	c203      	stmia	r2!, {r0, r1}
 80216ec:	6818      	ldr	r0, [r3, #0]
 80216ee:	aa08      	add	r2, sp, #32
 80216f0:	6859      	ldr	r1, [r3, #4]
 80216f2:	c203      	stmia	r2!, {r0, r1}
 80216f4:	a806      	add	r0, sp, #24
 80216f6:	f7f2 fe05 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216fa:	4621      	mov	r1, r4
 80216fc:	a808      	add	r0, sp, #32
 80216fe:	f7f2 fe45 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021702:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021706:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 802170a:	f002 0301 	and.w	r3, r2, #1
 802170e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8021712:	9302      	str	r3, [sp, #8]
 8021714:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021718:	f003 0101 	and.w	r1, r3, #1
 802171c:	9101      	str	r1, [sp, #4]
 802171e:	9801      	ldr	r0, [sp, #4]
 8021720:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8021724:	4403      	add	r3, r0
 8021726:	fb01 2303 	mla	r3, r1, r3, r2
 802172a:	fb93 f3f7 	sdiv	r3, r3, r7
 802172e:	441e      	add	r6, r3
 8021730:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8021734:	441a      	add	r2, r3
 8021736:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 802173a:	4419      	add	r1, r3
 802173c:	4b70      	ldr	r3, [pc, #448]	@ (8021900 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802173e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021742:	6818      	ldr	r0, [r3, #0]
 8021744:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 8021748:	6803      	ldr	r3, [r0, #0]
 802174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802174c:	4798      	blx	r3
 802174e:	4a6d      	ldr	r2, [pc, #436]	@ (8021904 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 8021750:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021754:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8021758:	8813      	ldrh	r3, [r2, #0]
 802175a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 802175e:	fb03 1404 	mla	r4, r3, r4, r1
 8021762:	4611      	mov	r1, r2
 8021764:	fb0b f303 	mul.w	r3, fp, r3
 8021768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802176c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021770:	4404      	add	r4, r0
 8021772:	4423      	add	r3, r4
 8021774:	d073      	beq.n	802185e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8021776:	9705      	str	r7, [sp, #20]
 8021778:	e9cd 3203 	strd	r3, r2, [sp, #12]
 802177c:	9b03      	ldr	r3, [sp, #12]
 802177e:	429c      	cmp	r4, r3
 8021780:	f080 80b5 	bcs.w	80218ee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021784:	9b02      	ldr	r3, [sp, #8]
 8021786:	b35b      	cbz	r3, 80217e0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 8021788:	7831      	ldrb	r1, [r6, #0]
 802178a:	4622      	mov	r2, r4
 802178c:	1c77      	adds	r7, r6, #1
 802178e:	3403      	adds	r4, #3
 8021790:	f001 010f 	and.w	r1, r1, #15
 8021794:	f108 3bff 	add.w	fp, r8, #4294967295
 8021798:	464b      	mov	r3, r9
 802179a:	4650      	mov	r0, sl
 802179c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217a0:	4429      	add	r1, r5
 80217a2:	f7ff ff65 	bl	8021670 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217a6:	f1bb 0f01 	cmp.w	fp, #1
 80217aa:	dd1c      	ble.n	80217e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 80217ac:	7839      	ldrb	r1, [r7, #0]
 80217ae:	4622      	mov	r2, r4
 80217b0:	464b      	mov	r3, r9
 80217b2:	4650      	mov	r0, sl
 80217b4:	0909      	lsrs	r1, r1, #4
 80217b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80217ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217be:	4429      	add	r1, r5
 80217c0:	f7ff ff56 	bl	8021670 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217c4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80217c8:	1ce2      	adds	r2, r4, #3
 80217ca:	464b      	mov	r3, r9
 80217cc:	f001 010f 	and.w	r1, r1, #15
 80217d0:	4650      	mov	r0, sl
 80217d2:	3406      	adds	r4, #6
 80217d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217d8:	4429      	add	r1, r5
 80217da:	f7ff ff49 	bl	8021670 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217de:	e7e2      	b.n	80217a6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80217e0:	4637      	mov	r7, r6
 80217e2:	46c3      	mov	fp, r8
 80217e4:	e7df      	b.n	80217a6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 80217e6:	d10a      	bne.n	80217fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 80217e8:	7839      	ldrb	r1, [r7, #0]
 80217ea:	4622      	mov	r2, r4
 80217ec:	3403      	adds	r4, #3
 80217ee:	464b      	mov	r3, r9
 80217f0:	0909      	lsrs	r1, r1, #4
 80217f2:	4650      	mov	r0, sl
 80217f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80217f8:	4429      	add	r1, r5
 80217fa:	f7ff ff39 	bl	8021670 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 80217fe:	9b04      	ldr	r3, [sp, #16]
 8021800:	9a01      	ldr	r2, [sp, #4]
 8021802:	881b      	ldrh	r3, [r3, #0]
 8021804:	eba3 0308 	sub.w	r3, r3, r8
 8021808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802180c:	441c      	add	r4, r3
 802180e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021812:	4413      	add	r3, r2
 8021814:	9a05      	ldr	r2, [sp, #20]
 8021816:	fb93 f3f2 	sdiv	r3, r3, r2
 802181a:	441e      	add	r6, r3
 802181c:	e7ae      	b.n	802177c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802181e:	4632      	mov	r2, r6
 8021820:	46c4      	mov	ip, r8
 8021822:	e037      	b.n	8021894 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8021824:	d10e      	bne.n	8021844 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8021826:	7812      	ldrb	r2, [r2, #0]
 8021828:	3003      	adds	r0, #3
 802182a:	0912      	lsrs	r2, r2, #4
 802182c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021830:	18ac      	adds	r4, r5, r2
 8021832:	5caa      	ldrb	r2, [r5, r2]
 8021834:	f800 2c03 	strb.w	r2, [r0, #-3]
 8021838:	7862      	ldrb	r2, [r4, #1]
 802183a:	f800 2c02 	strb.w	r2, [r0, #-2]
 802183e:	78a2      	ldrb	r2, [r4, #2]
 8021840:	f800 2c01 	strb.w	r2, [r0, #-1]
 8021844:	880c      	ldrh	r4, [r1, #0]
 8021846:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802184a:	eba4 0408 	sub.w	r4, r4, r8
 802184e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021852:	4404      	add	r4, r0
 8021854:	9801      	ldr	r0, [sp, #4]
 8021856:	4402      	add	r2, r0
 8021858:	fb92 f2f7 	sdiv	r2, r2, r7
 802185c:	4416      	add	r6, r2
 802185e:	429c      	cmp	r4, r3
 8021860:	d245      	bcs.n	80218ee <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 8021862:	9a02      	ldr	r2, [sp, #8]
 8021864:	2a00      	cmp	r2, #0
 8021866:	d0da      	beq.n	802181e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 8021868:	7830      	ldrb	r0, [r6, #0]
 802186a:	1c72      	adds	r2, r6, #1
 802186c:	3403      	adds	r4, #3
 802186e:	f000 000f 	and.w	r0, r0, #15
 8021872:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021876:	eb05 0c00 	add.w	ip, r5, r0
 802187a:	5c28      	ldrb	r0, [r5, r0]
 802187c:	f804 0c03 	strb.w	r0, [r4, #-3]
 8021880:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8021884:	f804 0c02 	strb.w	r0, [r4, #-2]
 8021888:	f89c 0002 	ldrb.w	r0, [ip, #2]
 802188c:	f108 3cff 	add.w	ip, r8, #4294967295
 8021890:	f804 0c01 	strb.w	r0, [r4, #-1]
 8021894:	f1bc 0f01 	cmp.w	ip, #1
 8021898:	4620      	mov	r0, r4
 802189a:	f104 0406 	add.w	r4, r4, #6
 802189e:	ddc1      	ble.n	8021824 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80218a0:	7810      	ldrb	r0, [r2, #0]
 80218a2:	f1ac 0c02 	sub.w	ip, ip, #2
 80218a6:	0900      	lsrs	r0, r0, #4
 80218a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218ac:	eb05 0e00 	add.w	lr, r5, r0
 80218b0:	5c28      	ldrb	r0, [r5, r0]
 80218b2:	f804 0c06 	strb.w	r0, [r4, #-6]
 80218b6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80218ba:	f804 0c05 	strb.w	r0, [r4, #-5]
 80218be:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80218c2:	f804 0c04 	strb.w	r0, [r4, #-4]
 80218c6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80218ca:	f000 000f 	and.w	r0, r0, #15
 80218ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80218d2:	eb05 0e00 	add.w	lr, r5, r0
 80218d6:	5c28      	ldrb	r0, [r5, r0]
 80218d8:	f804 0c03 	strb.w	r0, [r4, #-3]
 80218dc:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80218e0:	f804 0c02 	strb.w	r0, [r4, #-2]
 80218e4:	f89e 0002 	ldrb.w	r0, [lr, #2]
 80218e8:	f804 0c01 	strb.w	r0, [r4, #-1]
 80218ec:	e7d2      	b.n	8021894 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 80218ee:	4b04      	ldr	r3, [pc, #16]	@ (8021900 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 80218f0:	6818      	ldr	r0, [r3, #0]
 80218f2:	6803      	ldr	r3, [r0, #0]
 80218f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80218f6:	4798      	blx	r3
 80218f8:	b00b      	add	sp, #44	@ 0x2c
 80218fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218fe:	bf00      	nop
 8021900:	24025378 	.word	0x24025378
 8021904:	24025372 	.word	0x24025372

08021908 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8021908:	b530      	push	{r4, r5, lr}
 802190a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802190e:	780d      	ldrb	r5, [r1, #0]
 8021910:	28ff      	cmp	r0, #255	@ 0xff
 8021912:	d107      	bne.n	8021924 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021914:	2bff      	cmp	r3, #255	@ 0xff
 8021916:	d105      	bne.n	8021924 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8021918:	7015      	strb	r5, [r2, #0]
 802191a:	784b      	ldrb	r3, [r1, #1]
 802191c:	7053      	strb	r3, [r2, #1]
 802191e:	788b      	ldrb	r3, [r1, #2]
 8021920:	7093      	strb	r3, [r2, #2]
 8021922:	bd30      	pop	{r4, r5, pc}
 8021924:	fb10 f003 	smulbb	r0, r0, r3
 8021928:	b283      	uxth	r3, r0
 802192a:	1c58      	adds	r0, r3, #1
 802192c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8021930:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021934:	b284      	uxth	r4, r0
 8021936:	43c0      	mvns	r0, r0
 8021938:	fb15 f504 	smulbb	r5, r5, r4
 802193c:	b2c3      	uxtb	r3, r0
 802193e:	7810      	ldrb	r0, [r2, #0]
 8021940:	fb00 5003 	mla	r0, r0, r3, r5
 8021944:	b280      	uxth	r0, r0
 8021946:	1c45      	adds	r5, r0, #1
 8021948:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802194c:	7855      	ldrb	r5, [r2, #1]
 802194e:	fb15 f503 	smulbb	r5, r5, r3
 8021952:	1200      	asrs	r0, r0, #8
 8021954:	7010      	strb	r0, [r2, #0]
 8021956:	7848      	ldrb	r0, [r1, #1]
 8021958:	fb00 5004 	mla	r0, r0, r4, r5
 802195c:	b280      	uxth	r0, r0
 802195e:	1c45      	adds	r5, r0, #1
 8021960:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021964:	1200      	asrs	r0, r0, #8
 8021966:	7050      	strb	r0, [r2, #1]
 8021968:	7888      	ldrb	r0, [r1, #2]
 802196a:	7891      	ldrb	r1, [r2, #2]
 802196c:	fb11 f303 	smulbb	r3, r1, r3
 8021970:	fb00 3304 	mla	r3, r0, r4, r3
 8021974:	b29b      	uxth	r3, r3
 8021976:	1c59      	adds	r1, r3, #1
 8021978:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802197c:	121b      	asrs	r3, r3, #8
 802197e:	e7cf      	b.n	8021920 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

08021980 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021984:	461d      	mov	r5, r3
 8021986:	b08f      	sub	sp, #60	@ 0x3c
 8021988:	460c      	mov	r4, r1
 802198a:	4616      	mov	r6, r2
 802198c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802198e:	4680      	mov	r8, r0
 8021990:	6869      	ldr	r1, [r5, #4]
 8021992:	aa0a      	add	r2, sp, #40	@ 0x28
 8021994:	6828      	ldr	r0, [r5, #0]
 8021996:	3604      	adds	r6, #4
 8021998:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 802199c:	4f57      	ldr	r7, [pc, #348]	@ (8021afc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 802199e:	c203      	stmia	r2!, {r0, r1}
 80219a0:	6818      	ldr	r0, [r3, #0]
 80219a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80219a4:	6859      	ldr	r1, [r3, #4]
 80219a6:	c203      	stmia	r2!, {r0, r1}
 80219a8:	a80a      	add	r0, sp, #40	@ 0x28
 80219aa:	f7f2 fcab 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219ae:	4629      	mov	r1, r5
 80219b0:	a80c      	add	r0, sp, #48	@ 0x30
 80219b2:	2502      	movs	r5, #2
 80219b4:	f7f2 fcea 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219b8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80219bc:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 80219c0:	f002 0301 	and.w	r3, r2, #1
 80219c4:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 80219c8:	9304      	str	r3, [sp, #16]
 80219ca:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80219ce:	f003 0101 	and.w	r1, r3, #1
 80219d2:	9103      	str	r1, [sp, #12]
 80219d4:	9803      	ldr	r0, [sp, #12]
 80219d6:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80219da:	4403      	add	r3, r0
 80219dc:	6838      	ldr	r0, [r7, #0]
 80219de:	fb01 2303 	mla	r3, r1, r3, r2
 80219e2:	fb93 f3f5 	sdiv	r3, r3, r5
 80219e6:	18e5      	adds	r5, r4, r3
 80219e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80219ec:	441a      	add	r2, r3
 80219ee:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80219f2:	4419      	add	r1, r3
 80219f4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80219f8:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80219fc:	6803      	ldr	r3, [r0, #0]
 80219fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021a00:	4798      	blx	r3
 8021a02:	4a3f      	ldr	r2, [pc, #252]	@ (8021b00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8021a04:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8021a08:	8813      	ldrh	r3, [r2, #0]
 8021a0a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8021a0e:	9207      	str	r2, [sp, #28]
 8021a10:	fb03 1404 	mla	r4, r3, r4, r1
 8021a14:	fb0a f303 	mul.w	r3, sl, r3
 8021a18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021a20:	4404      	add	r4, r0
 8021a22:	18e3      	adds	r3, r4, r3
 8021a24:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8021a28:	9b05      	ldr	r3, [sp, #20]
 8021a2a:	429c      	cmp	r4, r3
 8021a2c:	d25d      	bcs.n	8021aea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 8021a2e:	9b04      	ldr	r3, [sp, #16]
 8021a30:	2b00      	cmp	r3, #0
 8021a32:	d037      	beq.n	8021aa4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021a34:	782b      	ldrb	r3, [r5, #0]
 8021a36:	1c6f      	adds	r7, r5, #1
 8021a38:	f003 030f 	and.w	r3, r3, #15
 8021a3c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a42:	0e1b      	lsrs	r3, r3, #24
 8021a44:	d006      	beq.n	8021a54 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8021a46:	9300      	str	r3, [sp, #0]
 8021a48:	4622      	mov	r2, r4
 8021a4a:	464b      	mov	r3, r9
 8021a4c:	a909      	add	r1, sp, #36	@ 0x24
 8021a4e:	4640      	mov	r0, r8
 8021a50:	f7ff ff5a 	bl	8021908 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021a54:	3403      	adds	r4, #3
 8021a56:	f10b 3aff 	add.w	sl, fp, #4294967295
 8021a5a:	f1ba 0f01 	cmp.w	sl, #1
 8021a5e:	dd24      	ble.n	8021aaa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021a60:	783b      	ldrb	r3, [r7, #0]
 8021a62:	091b      	lsrs	r3, r3, #4
 8021a64:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a68:	9308      	str	r3, [sp, #32]
 8021a6a:	0e1b      	lsrs	r3, r3, #24
 8021a6c:	d006      	beq.n	8021a7c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8021a6e:	9300      	str	r3, [sp, #0]
 8021a70:	4622      	mov	r2, r4
 8021a72:	464b      	mov	r3, r9
 8021a74:	a908      	add	r1, sp, #32
 8021a76:	4640      	mov	r0, r8
 8021a78:	f7ff ff46 	bl	8021908 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021a7c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8021a80:	f003 030f 	and.w	r3, r3, #15
 8021a84:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a8a:	0e1b      	lsrs	r3, r3, #24
 8021a8c:	d006      	beq.n	8021a9c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8021a8e:	9300      	str	r3, [sp, #0]
 8021a90:	1ce2      	adds	r2, r4, #3
 8021a92:	464b      	mov	r3, r9
 8021a94:	a909      	add	r1, sp, #36	@ 0x24
 8021a96:	4640      	mov	r0, r8
 8021a98:	f7ff ff36 	bl	8021908 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021a9c:	3406      	adds	r4, #6
 8021a9e:	f1aa 0a02 	sub.w	sl, sl, #2
 8021aa2:	e7da      	b.n	8021a5a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021aa4:	462f      	mov	r7, r5
 8021aa6:	46da      	mov	sl, fp
 8021aa8:	e7d7      	b.n	8021a5a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8021aaa:	d10e      	bne.n	8021aca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021aac:	783b      	ldrb	r3, [r7, #0]
 8021aae:	091b      	lsrs	r3, r3, #4
 8021ab0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8021ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ab6:	0e1b      	lsrs	r3, r3, #24
 8021ab8:	d006      	beq.n	8021ac8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8021aba:	9300      	str	r3, [sp, #0]
 8021abc:	4622      	mov	r2, r4
 8021abe:	464b      	mov	r3, r9
 8021ac0:	a909      	add	r1, sp, #36	@ 0x24
 8021ac2:	4640      	mov	r0, r8
 8021ac4:	f7ff ff20 	bl	8021908 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8021ac8:	3403      	adds	r4, #3
 8021aca:	9b07      	ldr	r3, [sp, #28]
 8021acc:	9a03      	ldr	r2, [sp, #12]
 8021ace:	881b      	ldrh	r3, [r3, #0]
 8021ad0:	eba3 030b 	sub.w	r3, r3, fp
 8021ad4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021ad8:	441c      	add	r4, r3
 8021ada:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8021ade:	4413      	add	r3, r2
 8021ae0:	2202      	movs	r2, #2
 8021ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8021ae6:	441d      	add	r5, r3
 8021ae8:	e79e      	b.n	8021a28 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8021aea:	9b06      	ldr	r3, [sp, #24]
 8021aec:	6818      	ldr	r0, [r3, #0]
 8021aee:	6803      	ldr	r3, [r0, #0]
 8021af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021af2:	4798      	blx	r3
 8021af4:	b00f      	add	sp, #60	@ 0x3c
 8021af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021afa:	bf00      	nop
 8021afc:	24025378 	.word	0x24025378
 8021b00:	24025372 	.word	0x24025372

08021b04 <CRC_Lock>:
 8021b04:	4a2d      	ldr	r2, [pc, #180]	@ (8021bbc <CRC_Lock+0xb8>)
 8021b06:	b530      	push	{r4, r5, lr}
 8021b08:	6813      	ldr	r3, [r2, #0]
 8021b0a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8021b0e:	f023 0301 	bic.w	r3, r3, #1
 8021b12:	6013      	str	r3, [r2, #0]
 8021b14:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8021b18:	4b29      	ldr	r3, [pc, #164]	@ (8021bc0 <CRC_Lock+0xbc>)
 8021b1a:	681c      	ldr	r4, [r3, #0]
 8021b1c:	4014      	ands	r4, r2
 8021b1e:	42ac      	cmp	r4, r5
 8021b20:	d005      	beq.n	8021b2e <CRC_Lock+0x2a>
 8021b22:	681c      	ldr	r4, [r3, #0]
 8021b24:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8021b28:	4014      	ands	r4, r2
 8021b2a:	42ac      	cmp	r4, r5
 8021b2c:	d125      	bne.n	8021b7a <CRC_Lock+0x76>
 8021b2e:	4b25      	ldr	r3, [pc, #148]	@ (8021bc4 <CRC_Lock+0xc0>)
 8021b30:	681b      	ldr	r3, [r3, #0]
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d139      	bne.n	8021baa <CRC_Lock+0xa6>
 8021b36:	4b24      	ldr	r3, [pc, #144]	@ (8021bc8 <CRC_Lock+0xc4>)
 8021b38:	681a      	ldr	r2, [r3, #0]
 8021b3a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021b3e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8021b42:	d00d      	beq.n	8021b60 <CRC_Lock+0x5c>
 8021b44:	681a      	ldr	r2, [r3, #0]
 8021b46:	f240 4483 	movw	r4, #1155	@ 0x483
 8021b4a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021b4e:	42a2      	cmp	r2, r4
 8021b50:	d006      	beq.n	8021b60 <CRC_Lock+0x5c>
 8021b52:	681b      	ldr	r3, [r3, #0]
 8021b54:	f240 4285 	movw	r2, #1157	@ 0x485
 8021b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021b5c:	4293      	cmp	r3, r2
 8021b5e:	d124      	bne.n	8021baa <CRC_Lock+0xa6>
 8021b60:	4b1a      	ldr	r3, [pc, #104]	@ (8021bcc <CRC_Lock+0xc8>)
 8021b62:	2201      	movs	r2, #1
 8021b64:	601a      	str	r2, [r3, #0]
 8021b66:	681a      	ldr	r2, [r3, #0]
 8021b68:	2a00      	cmp	r2, #0
 8021b6a:	d1fc      	bne.n	8021b66 <CRC_Lock+0x62>
 8021b6c:	4b18      	ldr	r3, [pc, #96]	@ (8021bd0 <CRC_Lock+0xcc>)
 8021b6e:	6018      	str	r0, [r3, #0]
 8021b70:	6818      	ldr	r0, [r3, #0]
 8021b72:	1a43      	subs	r3, r0, r1
 8021b74:	4258      	negs	r0, r3
 8021b76:	4158      	adcs	r0, r3
 8021b78:	e00e      	b.n	8021b98 <CRC_Lock+0x94>
 8021b7a:	681b      	ldr	r3, [r3, #0]
 8021b7c:	4013      	ands	r3, r2
 8021b7e:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8021b82:	4293      	cmp	r3, r2
 8021b84:	d111      	bne.n	8021baa <CRC_Lock+0xa6>
 8021b86:	4b13      	ldr	r3, [pc, #76]	@ (8021bd4 <CRC_Lock+0xd0>)
 8021b88:	f240 4286 	movw	r2, #1158	@ 0x486
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021b92:	4293      	cmp	r3, r2
 8021b94:	d001      	beq.n	8021b9a <CRC_Lock+0x96>
 8021b96:	2000      	movs	r0, #0
 8021b98:	bd30      	pop	{r4, r5, pc}
 8021b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8021bd8 <CRC_Lock+0xd4>)
 8021b9c:	2201      	movs	r2, #1
 8021b9e:	601a      	str	r2, [r3, #0]
 8021ba0:	681a      	ldr	r2, [r3, #0]
 8021ba2:	2a00      	cmp	r2, #0
 8021ba4:	d1fc      	bne.n	8021ba0 <CRC_Lock+0x9c>
 8021ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8021bdc <CRC_Lock+0xd8>)
 8021ba8:	e7e1      	b.n	8021b6e <CRC_Lock+0x6a>
 8021baa:	4b0d      	ldr	r3, [pc, #52]	@ (8021be0 <CRC_Lock+0xdc>)
 8021bac:	2201      	movs	r2, #1
 8021bae:	601a      	str	r2, [r3, #0]
 8021bb0:	681a      	ldr	r2, [r3, #0]
 8021bb2:	2a00      	cmp	r2, #0
 8021bb4:	d1fc      	bne.n	8021bb0 <CRC_Lock+0xac>
 8021bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8021be4 <CRC_Lock+0xe0>)
 8021bb8:	e7d9      	b.n	8021b6e <CRC_Lock+0x6a>
 8021bba:	bf00      	nop
 8021bbc:	e0002000 	.word	0xe0002000
 8021bc0:	e000ed00 	.word	0xe000ed00
 8021bc4:	e0042000 	.word	0xe0042000
 8021bc8:	5c001000 	.word	0x5c001000
 8021bcc:	58024c08 	.word	0x58024c08
 8021bd0:	58024c00 	.word	0x58024c00
 8021bd4:	46008ff0 	.word	0x46008ff0
 8021bd8:	46024c08 	.word	0x46024c08
 8021bdc:	46024c00 	.word	0x46024c00
 8021be0:	40023008 	.word	0x40023008
 8021be4:	40023000 	.word	0x40023000

08021be8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021be8:	6101      	str	r1, [r0, #16]
 8021bea:	4770      	bx	lr

08021bec <_ZN8touchgfx8Gestures4tickEv>:
 8021bec:	7b83      	ldrb	r3, [r0, #14]
 8021bee:	b14b      	cbz	r3, 8021c04 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021bf0:	8903      	ldrh	r3, [r0, #8]
 8021bf2:	3301      	adds	r3, #1
 8021bf4:	b29b      	uxth	r3, r3
 8021bf6:	2b07      	cmp	r3, #7
 8021bf8:	8103      	strh	r3, [r0, #8]
 8021bfa:	bf81      	itttt	hi
 8021bfc:	2300      	movhi	r3, #0
 8021bfe:	8143      	strhhi	r3, [r0, #10]
 8021c00:	8183      	strhhi	r3, [r0, #12]
 8021c02:	7383      	strbhi	r3, [r0, #14]
 8021c04:	4770      	bx	lr
	...

08021c08 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021c08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021c0c:	4698      	mov	r8, r3
 8021c0e:	8883      	ldrh	r3, [r0, #4]
 8021c10:	4604      	mov	r4, r0
 8021c12:	4617      	mov	r7, r2
 8021c14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021c18:	eba8 0303 	sub.w	r3, r8, r3
 8021c1c:	4a19      	ldr	r2, [pc, #100]	@ (8021c84 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8021c1e:	460e      	mov	r6, r1
 8021c20:	b21b      	sxth	r3, r3
 8021c22:	88c1      	ldrh	r1, [r0, #6]
 8021c24:	9200      	str	r2, [sp, #0]
 8021c26:	2000      	movs	r0, #0
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	8aa2      	ldrh	r2, [r4, #20]
 8021c2c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8021c30:	bfb8      	it	lt
 8021c32:	425b      	neglt	r3, r3
 8021c34:	f88d 0004 	strb.w	r0, [sp, #4]
 8021c38:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021c3c:	b21b      	sxth	r3, r3
 8021c3e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021c42:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021c46:	4293      	cmp	r3, r2
 8021c48:	dc07      	bgt.n	8021c5a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8021c4a:	1a69      	subs	r1, r5, r1
 8021c4c:	b209      	sxth	r1, r1
 8021c4e:	2900      	cmp	r1, #0
 8021c50:	bfb8      	it	lt
 8021c52:	4249      	neglt	r1, r1
 8021c54:	b209      	sxth	r1, r1
 8021c56:	428a      	cmp	r2, r1
 8021c58:	da10      	bge.n	8021c7c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8021c5a:	6920      	ldr	r0, [r4, #16]
 8021c5c:	4669      	mov	r1, sp
 8021c5e:	eba8 0606 	sub.w	r6, r8, r6
 8021c62:	1bef      	subs	r7, r5, r7
 8021c64:	6803      	ldr	r3, [r0, #0]
 8021c66:	685b      	ldr	r3, [r3, #4]
 8021c68:	4798      	blx	r3
 8021c6a:	2300      	movs	r3, #0
 8021c6c:	2001      	movs	r0, #1
 8021c6e:	8166      	strh	r6, [r4, #10]
 8021c70:	8123      	strh	r3, [r4, #8]
 8021c72:	81a7      	strh	r7, [r4, #12]
 8021c74:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021c78:	80e5      	strh	r5, [r4, #6]
 8021c7a:	73a0      	strb	r0, [r4, #14]
 8021c7c:	b004      	add	sp, #16
 8021c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c82:	bf00      	nop
 8021c84:	08027000 	.word	0x08027000

08021c88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c8a:	461e      	mov	r6, r3
 8021c8c:	1e4b      	subs	r3, r1, #1
 8021c8e:	b085      	sub	sp, #20
 8021c90:	4604      	mov	r4, r0
 8021c92:	2b01      	cmp	r3, #1
 8021c94:	460d      	mov	r5, r1
 8021c96:	4617      	mov	r7, r2
 8021c98:	d84b      	bhi.n	8021d32 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021c9a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021c9e:	1cd3      	adds	r3, r2, #3
 8021ca0:	b29b      	uxth	r3, r3
 8021ca2:	2b06      	cmp	r3, #6
 8021ca4:	d916      	bls.n	8021cd4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021ca6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8021d48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021caa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021cae:	f8cd c004 	str.w	ip, [sp, #4]
 8021cb2:	f04f 0c00 	mov.w	ip, #0
 8021cb6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021cba:	6900      	ldr	r0, [r0, #16]
 8021cbc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021cc0:	a901      	add	r1, sp, #4
 8021cc2:	f88d c008 	strb.w	ip, [sp, #8]
 8021cc6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021cca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021cce:	6803      	ldr	r3, [r0, #0]
 8021cd0:	689b      	ldr	r3, [r3, #8]
 8021cd2:	4798      	blx	r3
 8021cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021cd8:	1cd3      	adds	r3, r2, #3
 8021cda:	b29b      	uxth	r3, r3
 8021cdc:	2b06      	cmp	r3, #6
 8021cde:	d916      	bls.n	8021d0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021ce0:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8021d48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021ce4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021ce8:	f8cd c004 	str.w	ip, [sp, #4]
 8021cec:	f04f 0c01 	mov.w	ip, #1
 8021cf0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021cf4:	6920      	ldr	r0, [r4, #16]
 8021cf6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021cfa:	a901      	add	r1, sp, #4
 8021cfc:	f88d c008 	strb.w	ip, [sp, #8]
 8021d00:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021d04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d08:	6803      	ldr	r3, [r0, #0]
 8021d0a:	689b      	ldr	r3, [r3, #8]
 8021d0c:	4798      	blx	r3
 8021d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8021d44 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021d10:	a901      	add	r1, sp, #4
 8021d12:	6920      	ldr	r0, [r4, #16]
 8021d14:	9301      	str	r3, [sp, #4]
 8021d16:	2300      	movs	r3, #0
 8021d18:	f88d 5008 	strb.w	r5, [sp, #8]
 8021d1c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021d20:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021d24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021d28:	6803      	ldr	r3, [r0, #0]
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	4798      	blx	r3
 8021d2e:	b005      	add	sp, #20
 8021d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d32:	2900      	cmp	r1, #0
 8021d34:	d1eb      	bne.n	8021d0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d36:	80a2      	strh	r2, [r4, #4]
 8021d38:	80c6      	strh	r6, [r0, #6]
 8021d3a:	60a1      	str	r1, [r4, #8]
 8021d3c:	81a1      	strh	r1, [r4, #12]
 8021d3e:	73a1      	strb	r1, [r4, #14]
 8021d40:	e7e5      	b.n	8021d0e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021d42:	bf00      	nop
 8021d44:	08026fec 	.word	0x08026fec
 8021d48:	08027014 	.word	0x08027014

08021d4c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 8021d4c:	10c9      	asrs	r1, r1, #3
 8021d4e:	2900      	cmp	r1, #0
 8021d50:	bfb8      	it	lt
 8021d52:	4249      	neglt	r1, r1
 8021d54:	2801      	cmp	r0, #1
 8021d56:	d108      	bne.n	8021d6a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021d58:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021d5c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8021d60:	4601      	mov	r1, r0
 8021d62:	dd02      	ble.n	8021d6a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8021d64:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8021d68:	4770      	bx	lr
 8021d6a:	29ff      	cmp	r1, #255	@ 0xff
 8021d6c:	bfa8      	it	ge
 8021d6e:	21ff      	movge	r1, #255	@ 0xff
 8021d70:	4608      	mov	r0, r1
 8021d72:	4770      	bx	lr

08021d74 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021d74:	b410      	push	{r4}
 8021d76:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8021d7a:	429c      	cmp	r4, r3
 8021d7c:	d803      	bhi.n	8021d86 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8021d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d82:	f7f0 bdf9 	b.w	8012978 <_ZN8touchgfx7Outline6lineToEii>
 8021d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d8a:	4770      	bx	lr

08021d8c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d90:	b08b      	sub	sp, #44	@ 0x2c
 8021d92:	4606      	mov	r6, r0
 8021d94:	468a      	mov	sl, r1
 8021d96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021d9a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8021d9e:	9308      	str	r3, [sp, #32]
 8021da0:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8021da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021da6:	f7f0 ff52 	bl	8012c4e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8021daa:	68b5      	ldr	r5, [r6, #8]
 8021dac:	4604      	mov	r4, r0
 8021dae:	2d00      	cmp	r5, #0
 8021db0:	d044      	beq.n	8021e3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021db2:	6873      	ldr	r3, [r6, #4]
 8021db4:	42ab      	cmp	r3, r5
 8021db6:	d33d      	bcc.n	8021e34 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8021db8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021dbc:	f04f 0800 	mov.w	r8, #0
 8021dc0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8021dc4:	eb02 0b03 	add.w	fp, r2, r3
 8021dc8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021dcc:	fb02 1203 	mla	r2, r2, r3, r1
 8021dd0:	9205      	str	r2, [sp, #20]
 8021dd2:	1e6a      	subs	r2, r5, #1
 8021dd4:	9204      	str	r2, [sp, #16]
 8021dd6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8021dda:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021dde:	454b      	cmp	r3, r9
 8021de0:	463a      	mov	r2, r7
 8021de2:	d008      	beq.n	8021df6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8021de4:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8021de8:	eb03 0b09 	add.w	fp, r3, r9
 8021dec:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8021df0:	fb03 1309 	mla	r3, r3, r9, r1
 8021df4:	9305      	str	r3, [sp, #20]
 8021df6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021dfa:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021dfe:	4498      	add	r8, r3
 8021e00:	9b04      	ldr	r3, [sp, #16]
 8021e02:	3b01      	subs	r3, #1
 8021e04:	9304      	str	r3, [sp, #16]
 8021e06:	9b04      	ldr	r3, [sp, #16]
 8021e08:	3301      	adds	r3, #1
 8021e0a:	d015      	beq.n	8021e38 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021e0c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021e10:	42bb      	cmp	r3, r7
 8021e12:	d117      	bne.n	8021e44 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021e14:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8021e18:	9b04      	ldr	r3, [sp, #16]
 8021e1a:	4548      	cmp	r0, r9
 8021e1c:	f103 33ff 	add.w	r3, r3, #4294967295
 8021e20:	d17d      	bne.n	8021f1e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8021e22:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8021e26:	4401      	add	r1, r0
 8021e28:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021e2c:	4480      	add	r8, r0
 8021e2e:	e7e9      	b.n	8021e04 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8021e30:	461f      	mov	r7, r3
 8021e32:	e042      	b.n	8021eba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8021e34:	2000      	movs	r0, #0
 8021e36:	e002      	b.n	8021e3e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8021e38:	2900      	cmp	r1, #0
 8021e3a:	d16d      	bne.n	8021f18 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8021e3c:	2001      	movs	r0, #1
 8021e3e:	b00b      	add	sp, #44	@ 0x2c
 8021e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e44:	b379      	cbz	r1, 8021ea6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8021e46:	2f00      	cmp	r7, #0
 8021e48:	db29      	blt.n	8021e9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e4a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021e4e:	42bb      	cmp	r3, r7
 8021e50:	dd25      	ble.n	8021e9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e52:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8021e56:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021e5a:	f7ff ff77 	bl	8021d4c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e60:	fb10 f003 	smulbb	r0, r0, r3
 8021e64:	b280      	uxth	r0, r0
 8021e66:	1c41      	adds	r1, r0, #1
 8021e68:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021e6c:	1209      	asrs	r1, r1, #8
 8021e6e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021e72:	d014      	beq.n	8021e9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021e74:	b2c9      	uxtb	r1, r1
 8021e76:	9808      	ldr	r0, [sp, #32]
 8021e78:	b2ba      	uxth	r2, r7
 8021e7a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021e7c:	9102      	str	r1, [sp, #8]
 8021e7e:	2101      	movs	r1, #1
 8021e80:	4413      	add	r3, r2
 8021e82:	4402      	add	r2, r0
 8021e84:	9101      	str	r1, [sp, #4]
 8021e86:	fa0f f18b 	sxth.w	r1, fp
 8021e8a:	f8da 0000 	ldr.w	r0, [sl]
 8021e8e:	b21b      	sxth	r3, r3
 8021e90:	9100      	str	r1, [sp, #0]
 8021e92:	b212      	sxth	r2, r2
 8021e94:	6941      	ldr	r1, [r0, #20]
 8021e96:	4650      	mov	r0, sl
 8021e98:	460d      	mov	r5, r1
 8021e9a:	9905      	ldr	r1, [sp, #20]
 8021e9c:	47a8      	blx	r5
 8021e9e:	9b04      	ldr	r3, [sp, #16]
 8021ea0:	1c7a      	adds	r2, r7, #1
 8021ea2:	3301      	adds	r3, #1
 8021ea4:	d0ca      	beq.n	8021e3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021ea6:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021eaa:	1abb      	subs	r3, r7, r2
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	dd31      	ble.n	8021f14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021eb0:	2a00      	cmp	r2, #0
 8021eb2:	dabd      	bge.n	8021e30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8021eb4:	2f00      	cmp	r7, #0
 8021eb6:	dd2d      	ble.n	8021f14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021eb8:	2200      	movs	r2, #0
 8021eba:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 8021ebe:	19d1      	adds	r1, r2, r7
 8021ec0:	4299      	cmp	r1, r3
 8021ec2:	db02      	blt.n	8021eca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8021ec4:	1a9f      	subs	r7, r3, r2
 8021ec6:	2f00      	cmp	r7, #0
 8021ec8:	dd24      	ble.n	8021f14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021eca:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8021ece:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8021ed2:	f7ff ff3b 	bl	8021d4c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8021ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ed8:	fb10 f003 	smulbb	r0, r0, r3
 8021edc:	b280      	uxth	r0, r0
 8021ede:	1c41      	adds	r1, r0, #1
 8021ee0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021ee4:	1209      	asrs	r1, r1, #8
 8021ee6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8021eea:	d013      	beq.n	8021f14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021eec:	b292      	uxth	r2, r2
 8021eee:	9808      	ldr	r0, [sp, #32]
 8021ef0:	b2c9      	uxtb	r1, r1
 8021ef2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8021ef4:	b23f      	sxth	r7, r7
 8021ef6:	4413      	add	r3, r2
 8021ef8:	9102      	str	r1, [sp, #8]
 8021efa:	4402      	add	r2, r0
 8021efc:	fa0f f18b 	sxth.w	r1, fp
 8021f00:	f8da 0000 	ldr.w	r0, [sl]
 8021f04:	b21b      	sxth	r3, r3
 8021f06:	9100      	str	r1, [sp, #0]
 8021f08:	b212      	sxth	r2, r2
 8021f0a:	9701      	str	r7, [sp, #4]
 8021f0c:	9905      	ldr	r1, [sp, #20]
 8021f0e:	6947      	ldr	r7, [r0, #20]
 8021f10:	4650      	mov	r0, sl
 8021f12:	47b8      	blx	r7
 8021f14:	464b      	mov	r3, r9
 8021f16:	e75e      	b.n	8021dd6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021f18:	2f00      	cmp	r7, #0
 8021f1a:	da96      	bge.n	8021e4a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8021f1c:	e78e      	b.n	8021e3c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021f1e:	2900      	cmp	r1, #0
 8021f20:	d0f8      	beq.n	8021f14 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021f22:	e790      	b.n	8021e46 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021f24 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8021f24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021f28:	461e      	mov	r6, r3
 8021f2a:	4b36      	ldr	r3, [pc, #216]	@ (8022004 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 8021f2c:	2500      	movs	r5, #0
 8021f2e:	f100 0814 	add.w	r8, r0, #20
 8021f32:	4604      	mov	r4, r0
 8021f34:	4617      	mov	r7, r2
 8021f36:	e9c0 3100 	strd	r3, r1, [r0]
 8021f3a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8021f3e:	8185      	strh	r5, [r0, #12]
 8021f40:	8103      	strh	r3, [r0, #8]
 8021f42:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8021f46:	81c5      	strh	r5, [r0, #14]
 8021f48:	7283      	strb	r3, [r0, #10]
 8021f4a:	8205      	strh	r5, [r0, #16]
 8021f4c:	8245      	strh	r5, [r0, #18]
 8021f4e:	4640      	mov	r0, r8
 8021f50:	f7f0 f858 	bl	8012004 <_ZN8touchgfx7OutlineC1Ev>
 8021f54:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8021f58:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 8021f5c:	466b      	mov	r3, sp
 8021f5e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8021f62:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8021f66:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 8021f6a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 8021f6e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8021f72:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8021f76:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 8021f7a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 8021f7e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8021f82:	6830      	ldr	r0, [r6, #0]
 8021f84:	6871      	ldr	r1, [r6, #4]
 8021f86:	8872      	ldrh	r2, [r6, #2]
 8021f88:	8835      	ldrh	r5, [r6, #0]
 8021f8a:	c303      	stmia	r3!, {r0, r1}
 8021f8c:	887b      	ldrh	r3, [r7, #2]
 8021f8e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8021f92:	4413      	add	r3, r2
 8021f94:	883a      	ldrh	r2, [r7, #0]
 8021f96:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 8021f9a:	442a      	add	r2, r5
 8021f9c:	81e3      	strh	r3, [r4, #14]
 8021f9e:	8220      	strh	r0, [r4, #16]
 8021fa0:	4668      	mov	r0, sp
 8021fa2:	81a2      	strh	r2, [r4, #12]
 8021fa4:	8261      	strh	r1, [r4, #18]
 8021fa6:	4639      	mov	r1, r7
 8021fa8:	f7f2 f9f0 	bl	801438c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021fac:	f104 000c 	add.w	r0, r4, #12
 8021fb0:	f7f2 f9a8 	bl	8014304 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021fb4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021fb8:	f8bd 2000 	ldrh.w	r2, [sp]
 8021fbc:	4640      	mov	r0, r8
 8021fbe:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8021fc2:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8021fc6:	f7f0 f801 	bl	8011fcc <_ZN8touchgfx7Outline5resetEv>
 8021fca:	f9bd 3000 	ldrsh.w	r3, [sp]
 8021fce:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8021fd2:	4620      	mov	r0, r4
 8021fd4:	015b      	lsls	r3, r3, #5
 8021fd6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8021fd8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021fdc:	015b      	lsls	r3, r3, #5
 8021fde:	6523      	str	r3, [r4, #80]	@ 0x50
 8021fe0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021fe4:	015b      	lsls	r3, r3, #5
 8021fe6:	6563      	str	r3, [r4, #84]	@ 0x54
 8021fe8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8021fec:	015b      	lsls	r3, r3, #5
 8021fee:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021ff0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8021ff4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8021ff8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8021ffc:	b002      	add	sp, #8
 8021ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022002:	bf00      	nop
 8022004:	080272a4 	.word	0x080272a4

08022008 <_ZN8touchgfx6Canvas5closeEv>:
 8022008:	b538      	push	{r3, r4, r5, lr}
 802200a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802200e:	4604      	mov	r4, r0
 8022010:	b193      	cbz	r3, 8022038 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8022012:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8022016:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802201a:	4213      	tst	r3, r2
 802201c:	d10c      	bne.n	8022038 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802201e:	f100 0514 	add.w	r5, r0, #20
 8022022:	b123      	cbz	r3, 802202e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8022024:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8022028:	4628      	mov	r0, r5
 802202a:	f7ff fea3 	bl	8021d74 <_ZN8touchgfx10Rasterizer6lineToEii>
 802202e:	4628      	mov	r0, r5
 8022030:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8022034:	f7ff fe9e 	bl	8021d74 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022038:	2300      	movs	r3, #0
 802203a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802203e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8022042:	4298      	cmp	r0, r3
 8022044:	bf34      	ite	cc
 8022046:	2000      	movcc	r0, #0
 8022048:	2001      	movcs	r0, #1
 802204a:	bd38      	pop	{r3, r4, r5, pc}

0802204c <_ZN8touchgfx6Canvas6renderEh>:
 802204c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022050:	7a85      	ldrb	r5, [r0, #10]
 8022052:	4604      	mov	r4, r0
 8022054:	4369      	muls	r1, r5
 8022056:	1c4d      	adds	r5, r1, #1
 8022058:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802205c:	122d      	asrs	r5, r5, #8
 802205e:	f000 8098 	beq.w	8022192 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8022062:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8022066:	2b00      	cmp	r3, #0
 8022068:	f000 8093 	beq.w	8022192 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802206c:	f7ff ffcc 	bl	8022008 <_ZN8touchgfx6Canvas5closeEv>
 8022070:	4607      	mov	r7, r0
 8022072:	2800      	cmp	r0, #0
 8022074:	d045      	beq.n	8022102 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8022076:	6860      	ldr	r0, [r4, #4]
 8022078:	4e47      	ldr	r6, [pc, #284]	@ (8022198 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802207a:	6803      	ldr	r3, [r0, #0]
 802207c:	6837      	ldr	r7, [r6, #0]
 802207e:	689b      	ldr	r3, [r3, #8]
 8022080:	4798      	blx	r3
 8022082:	4601      	mov	r1, r0
 8022084:	4638      	mov	r0, r7
 8022086:	f7ed fdc1 	bl	800fc0c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802208a:	4607      	mov	r7, r0
 802208c:	f7e2 f904 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 8022090:	6803      	ldr	r3, [r0, #0]
 8022092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022094:	4798      	blx	r3
 8022096:	4680      	mov	r8, r0
 8022098:	f7e2 f8fe 	bl	8004298 <_ZN8touchgfx3HAL3lcdEv>
 802209c:	6803      	ldr	r3, [r0, #0]
 802209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220a0:	4798      	blx	r3
 80220a2:	280b      	cmp	r0, #11
 80220a4:	d85a      	bhi.n	802215c <_ZN8touchgfx6Canvas6renderEh+0x110>
 80220a6:	e8df f000 	tbb	[pc, r0]
 80220aa:	5b50      	.short	0x5b50
 80220ac:	3059066b 	.word	0x3059066b
 80220b0:	64646440 	.word	0x64646440
 80220b4:	6464      	.short	0x6464
 80220b6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80220ba:	2208      	movs	r2, #8
 80220bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80220c0:	fb91 f2f2 	sdiv	r2, r1, r2
 80220c4:	fb08 2303 	mla	r3, r8, r3, r2
 80220c8:	441f      	add	r7, r3
 80220ca:	424b      	negs	r3, r1
 80220cc:	f001 0107 	and.w	r1, r1, #7
 80220d0:	f003 0307 	and.w	r3, r3, #7
 80220d4:	bf58      	it	pl
 80220d6:	4259      	negpl	r1, r3
 80220d8:	b2c9      	uxtb	r1, r1
 80220da:	b2ed      	uxtb	r5, r5
 80220dc:	463a      	mov	r2, r7
 80220de:	fa0f f388 	sxth.w	r3, r8
 80220e2:	f104 0014 	add.w	r0, r4, #20
 80220e6:	e9cd 1500 	strd	r1, r5, [sp]
 80220ea:	6861      	ldr	r1, [r4, #4]
 80220ec:	f7ff fe4e 	bl	8021d8c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80220f0:	4607      	mov	r7, r0
 80220f2:	6860      	ldr	r0, [r4, #4]
 80220f4:	6803      	ldr	r3, [r0, #0]
 80220f6:	691b      	ldr	r3, [r3, #16]
 80220f8:	4798      	blx	r3
 80220fa:	6830      	ldr	r0, [r6, #0]
 80220fc:	6803      	ldr	r3, [r0, #0]
 80220fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022100:	4798      	blx	r3
 8022102:	4638      	mov	r0, r7
 8022104:	b002      	add	sp, #8
 8022106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802210a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802210e:	2204      	movs	r2, #4
 8022110:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022114:	fb91 f2f2 	sdiv	r2, r1, r2
 8022118:	fb08 2303 	mla	r3, r8, r3, r2
 802211c:	441f      	add	r7, r3
 802211e:	424b      	negs	r3, r1
 8022120:	f001 0103 	and.w	r1, r1, #3
 8022124:	f003 0303 	and.w	r3, r3, #3
 8022128:	e7d4      	b.n	80220d4 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802212a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802212e:	2202      	movs	r2, #2
 8022130:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022134:	2900      	cmp	r1, #0
 8022136:	fb91 f2f2 	sdiv	r2, r1, r2
 802213a:	f001 0101 	and.w	r1, r1, #1
 802213e:	fb08 2303 	mla	r3, r8, r3, r2
 8022142:	bfb8      	it	lt
 8022144:	4249      	neglt	r1, r1
 8022146:	441f      	add	r7, r3
 8022148:	e7c6      	b.n	80220d8 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802214a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802214e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022152:	fb08 f303 	mul.w	r3, r8, r3
 8022156:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802215a:	441f      	add	r7, r3
 802215c:	2100      	movs	r1, #0
 802215e:	e7bc      	b.n	80220da <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8022160:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022164:	2103      	movs	r1, #3
 8022166:	fb08 f203 	mul.w	r2, r8, r3
 802216a:	89a3      	ldrh	r3, [r4, #12]
 802216c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8022170:	e7f3      	b.n	802215a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022172:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802217a:	fb08 2303 	mla	r3, r8, r3, r2
 802217e:	e7ec      	b.n	802215a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022180:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8022184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022188:	fb08 f303 	mul.w	r3, r8, r3
 802218c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8022190:	e7e3      	b.n	802215a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8022192:	2701      	movs	r7, #1
 8022194:	e7b5      	b.n	8022102 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8022196:	bf00      	nop
 8022198:	24025378 	.word	0x24025378

0802219c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802219c:	4b06      	ldr	r3, [pc, #24]	@ (80221b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802219e:	b510      	push	{r4, lr}
 80221a0:	781b      	ldrb	r3, [r3, #0]
 80221a2:	2b01      	cmp	r3, #1
 80221a4:	d107      	bne.n	80221b6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80221a6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80221aa:	680b      	ldr	r3, [r1, #0]
 80221ac:	6814      	ldr	r4, [r2, #0]
 80221ae:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80221b2:	6013      	str	r3, [r2, #0]
 80221b4:	600c      	str	r4, [r1, #0]
 80221b6:	bd10      	pop	{r4, pc}
 80221b8:	24025370 	.word	0x24025370

080221bc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80221bc:	b513      	push	{r0, r1, r4, lr}
 80221be:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80221c2:	4604      	mov	r4, r0
 80221c4:	e9cd 2100 	strd	r2, r1, [sp]
 80221c8:	b9a3      	cbnz	r3, 80221f4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80221ca:	466a      	mov	r2, sp
 80221cc:	a901      	add	r1, sp, #4
 80221ce:	4620      	mov	r0, r4
 80221d0:	f7ff ffe4 	bl	802219c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80221d4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80221d6:	9901      	ldr	r1, [sp, #4]
 80221d8:	9a00      	ldr	r2, [sp, #0]
 80221da:	1ac9      	subs	r1, r1, r3
 80221dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80221de:	1ad2      	subs	r2, r2, r3
 80221e0:	9101      	str	r1, [sp, #4]
 80221e2:	2a00      	cmp	r2, #0
 80221e4:	9200      	str	r2, [sp, #0]
 80221e6:	da0b      	bge.n	8022200 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80221e8:	2301      	movs	r3, #1
 80221ea:	2900      	cmp	r1, #0
 80221ec:	da0e      	bge.n	802220c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80221ee:	f043 0304 	orr.w	r3, r3, #4
 80221f2:	e013      	b.n	802221c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80221f4:	f7ff ff08 	bl	8022008 <_ZN8touchgfx6Canvas5closeEv>
 80221f8:	2800      	cmp	r0, #0
 80221fa:	d1e6      	bne.n	80221ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80221fc:	b002      	add	sp, #8
 80221fe:	bd10      	pop	{r4, pc}
 8022200:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022202:	429a      	cmp	r2, r3
 8022204:	bfac      	ite	ge
 8022206:	2302      	movge	r3, #2
 8022208:	2300      	movlt	r3, #0
 802220a:	e7ee      	b.n	80221ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802220c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802220e:	4281      	cmp	r1, r0
 8022210:	bfac      	ite	ge
 8022212:	2008      	movge	r0, #8
 8022214:	2000      	movlt	r0, #0
 8022216:	4318      	orrs	r0, r3
 8022218:	b2c3      	uxtb	r3, r0
 802221a:	b158      	cbz	r0, 8022234 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802221c:	2200      	movs	r2, #0
 802221e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8022222:	9901      	ldr	r1, [sp, #4]
 8022224:	9a00      	ldr	r2, [sp, #0]
 8022226:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8022228:	6722      	str	r2, [r4, #112]	@ 0x70
 802222a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802222e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8022232:	e7e3      	b.n	80221fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8022234:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8022238:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802223c:	4298      	cmp	r0, r3
 802223e:	d803      	bhi.n	8022248 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8022240:	f104 0014 	add.w	r0, r4, #20
 8022244:	f7f0 fbb2 	bl	80129ac <_ZN8touchgfx7Outline6moveToEii>
 8022248:	2301      	movs	r3, #1
 802224a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802224e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8022252:	2300      	movs	r3, #0
 8022254:	e7e5      	b.n	8022222 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08022256 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8022256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022258:	ab02      	add	r3, sp, #8
 802225a:	4604      	mov	r4, r0
 802225c:	9101      	str	r1, [sp, #4]
 802225e:	a901      	add	r1, sp, #4
 8022260:	f843 2d08 	str.w	r2, [r3, #-8]!
 8022264:	461a      	mov	r2, r3
 8022266:	f7ff ff99 	bl	802219c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802226a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802226c:	9901      	ldr	r1, [sp, #4]
 802226e:	9a00      	ldr	r2, [sp, #0]
 8022270:	1ac9      	subs	r1, r1, r3
 8022272:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022274:	1ad2      	subs	r2, r2, r3
 8022276:	9101      	str	r1, [sp, #4]
 8022278:	2a00      	cmp	r2, #0
 802227a:	9200      	str	r2, [sp, #0]
 802227c:	db1c      	blt.n	80222b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802227e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8022280:	429a      	cmp	r2, r3
 8022282:	bfac      	ite	ge
 8022284:	2002      	movge	r0, #2
 8022286:	2000      	movlt	r0, #0
 8022288:	2900      	cmp	r1, #0
 802228a:	db17      	blt.n	80222bc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802228c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802228e:	4299      	cmp	r1, r3
 8022290:	bfac      	ite	ge
 8022292:	2308      	movge	r3, #8
 8022294:	2300      	movlt	r3, #0
 8022296:	4303      	orrs	r3, r0
 8022298:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802229c:	b2dd      	uxtb	r5, r3
 802229e:	b978      	cbnz	r0, 80222c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80222a0:	f104 0014 	add.w	r0, r4, #20
 80222a4:	f7ff fd66 	bl	8021d74 <_ZN8touchgfx10Rasterizer6lineToEii>
 80222a8:	9b01      	ldr	r3, [sp, #4]
 80222aa:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 80222ae:	6623      	str	r3, [r4, #96]	@ 0x60
 80222b0:	9b00      	ldr	r3, [sp, #0]
 80222b2:	6663      	str	r3, [r4, #100]	@ 0x64
 80222b4:	b002      	add	sp, #8
 80222b6:	bd70      	pop	{r4, r5, r6, pc}
 80222b8:	2001      	movs	r0, #1
 80222ba:	e7e5      	b.n	8022288 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80222bc:	2304      	movs	r3, #4
 80222be:	e7ea      	b.n	8022296 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80222c0:	b113      	cbz	r3, 80222c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80222c2:	ea10 0305 	ands.w	r3, r0, r5
 80222c6:	d11c      	bne.n	8022302 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80222c8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 80222cc:	f104 0614 	add.w	r6, r4, #20
 80222d0:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 80222d4:	b98b      	cbnz	r3, 80222fa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80222d6:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 80222da:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80222de:	4298      	cmp	r0, r3
 80222e0:	d802      	bhi.n	80222e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 80222e2:	4630      	mov	r0, r6
 80222e4:	f7f0 fb62 	bl	80129ac <_ZN8touchgfx7Outline6moveToEii>
 80222e8:	2301      	movs	r3, #1
 80222ea:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 80222ee:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 80222f2:	4630      	mov	r0, r6
 80222f4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80222f8:	e7d4      	b.n	80222a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80222fa:	4630      	mov	r0, r6
 80222fc:	f7ff fd3a 	bl	8021d74 <_ZN8touchgfx10Rasterizer6lineToEii>
 8022300:	e7f7      	b.n	80222f2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8022302:	461d      	mov	r5, r3
 8022304:	e7d0      	b.n	80222a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08022308 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8022308:	b538      	push	{r3, r4, r5, lr}
 802230a:	ed2d 8b10 	vpush	{d8-d15}
 802230e:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8022312:	4605      	mov	r5, r0
 8022314:	eeb0 ca40 	vmov.f32	s24, s0
 8022318:	460c      	mov	r4, r1
 802231a:	eef0 ca60 	vmov.f32	s25, s1
 802231e:	ed9f ba57 	vldr	s22, [pc, #348]	@ 802247c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8022322:	eeb0 da41 	vmov.f32	s26, s2
 8022326:	eef0 da61 	vmov.f32	s27, s3
 802232a:	eeb0 ea42 	vmov.f32	s28, s4
 802232e:	eef0 ea62 	vmov.f32	s29, s5
 8022332:	eef0 aa6b 	vmov.f32	s21, s23
 8022336:	2c08      	cmp	r4, #8
 8022338:	d86e      	bhi.n	8022418 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 802233a:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 802233e:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8022342:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8022346:	ee3e 7aec 	vsub.f32	s14, s29, s25
 802234a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 802234e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8022352:	ee7c faad 	vadd.f32	s31, s25, s27
 8022356:	eee6 7a07 	vfma.f32	s15, s12, s14
 802235a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 802235e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8022362:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8022366:	ee6f faab 	vmul.f32	s31, s31, s23
 802236a:	ee69 9aab 	vmul.f32	s19, s19, s23
 802236e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022372:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8022376:	ee7f 8a29 	vadd.f32	s17, s30, s19
 802237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802237e:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8022382:	ee68 8aab 	vmul.f32	s17, s17, s23
 8022386:	bf48      	it	mi
 8022388:	eef1 7a67 	vnegmi.f32	s15, s15
 802238c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8022390:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8022394:	eef4 7acb 	vcmpe.f32	s15, s22
 8022398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802239c:	dd3f      	ble.n	802241e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 802239e:	ee27 7a07 	vmul.f32	s14, s14, s14
 80223a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80223a6:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80223aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80223ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223b6:	d847      	bhi.n	8022448 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 80223b8:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 80223bc:	ee3e 0aed 	vsub.f32	s0, s29, s27
 80223c0:	f000 fa57 	bl	8022872 <atan2f>
 80223c4:	eeb0 8a40 	vmov.f32	s16, s0
 80223c8:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 80223cc:	ee3d 0aec 	vsub.f32	s0, s27, s25
 80223d0:	f000 fa4f 	bl	8022872 <atan2f>
 80223d4:	ee38 0a40 	vsub.f32	s0, s16, s0
 80223d8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8022480 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 80223dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80223e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223e4:	bf48      	it	mi
 80223e6:	eeb1 0a40 	vnegmi.f32	s0, s0
 80223ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80223ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223f2:	bfa4      	itt	ge
 80223f4:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8022484 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 80223f8:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80223fc:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8022488 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8022400:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022408:	d51e      	bpl.n	8022448 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 802240a:	eef0 0a49 	vmov.f32	s1, s18
 802240e:	4628      	mov	r0, r5
 8022410:	eeb0 0a68 	vmov.f32	s0, s17
 8022414:	f7ee fb00 	bl	8010a18 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8022418:	ecbd 8b10 	vpop	{d8-d15}
 802241c:	bd38      	pop	{r3, r4, r5, pc}
 802241e:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8022422:	eeb0 7a68 	vmov.f32	s14, s17
 8022426:	eef0 6a49 	vmov.f32	s13, s18
 802242a:	eea7 7aea 	vfms.f32	s14, s15, s21
 802242e:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8022432:	eee7 6aea 	vfms.f32	s13, s15, s21
 8022436:	ee66 7aa6 	vmul.f32	s15, s13, s13
 802243a:	eee7 7a07 	vfma.f32	s15, s14, s14
 802243e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8022442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022446:	d9e0      	bls.n	802240a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8022448:	3401      	adds	r4, #1
 802244a:	eef0 0a6c 	vmov.f32	s1, s25
 802244e:	eeb0 0a4c 	vmov.f32	s0, s24
 8022452:	4628      	mov	r0, r5
 8022454:	4621      	mov	r1, r4
 8022456:	eef0 2a49 	vmov.f32	s5, s18
 802245a:	eeb0 2a68 	vmov.f32	s4, s17
 802245e:	eef0 1a6f 	vmov.f32	s3, s31
 8022462:	eeb0 1a4f 	vmov.f32	s2, s30
 8022466:	f7ff ff4f 	bl	8022308 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 802246a:	eef0 da4a 	vmov.f32	s27, s20
 802246e:	eeb0 da69 	vmov.f32	s26, s19
 8022472:	eef0 ca49 	vmov.f32	s25, s18
 8022476:	eeb0 ca68 	vmov.f32	s24, s17
 802247a:	e75c      	b.n	8022336 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 802247c:	2edbe6ff 	.word	0x2edbe6ff
 8022480:	40490fdb 	.word	0x40490fdb
 8022484:	40c90fdb 	.word	0x40c90fdb
 8022488:	3dcccccd 	.word	0x3dcccccd

0802248c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 802248c:	b530      	push	{r4, r5, lr}
 802248e:	ed2d 8b10 	vpush	{d8-d15}
 8022492:	eef0 8a40 	vmov.f32	s17, s0
 8022496:	b085      	sub	sp, #20
 8022498:	eef0 9a60 	vmov.f32	s19, s1
 802249c:	4604      	mov	r4, r0
 802249e:	eef0 fa41 	vmov.f32	s31, s2
 80224a2:	460d      	mov	r5, r1
 80224a4:	eeb0 fa61 	vmov.f32	s30, s3
 80224a8:	eef0 ba42 	vmov.f32	s23, s4
 80224ac:	eeb0 ca62 	vmov.f32	s24, s5
 80224b0:	eef0 aa43 	vmov.f32	s21, s6
 80224b4:	eeb0 ba63 	vmov.f32	s22, s7
 80224b8:	2d08      	cmp	r5, #8
 80224ba:	f200 8113 	bhi.w	80226e4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 80224be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80224c2:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 80224c6:	ee7f 6aab 	vadd.f32	s13, s31, s23
 80224ca:	ee38 daaf 	vadd.f32	s26, s17, s31
 80224ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80224d2:	ee7c ca0b 	vadd.f32	s25, s24, s22
 80224d6:	ee2d da27 	vmul.f32	s26, s26, s15
 80224da:	ed8d 6a01 	vstr	s12, [sp, #4]
 80224de:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80224e2:	ee6c caa7 	vmul.f32	s25, s25, s15
 80224e6:	eeb0 ea4d 	vmov.f32	s28, s26
 80224ea:	ee79 da8f 	vadd.f32	s27, s19, s30
 80224ee:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 80224f2:	eea6 eaa7 	vfma.f32	s28, s13, s15
 80224f6:	ee66 6a27 	vmul.f32	s13, s12, s15
 80224fa:	ee6d daa7 	vmul.f32	s27, s27, s15
 80224fe:	edcd 6a03 	vstr	s13, [sp, #12]
 8022502:	eef0 6a6c 	vmov.f32	s13, s25
 8022506:	eef0 ea6d 	vmov.f32	s29, s27
 802250a:	ee2e ea27 	vmul.f32	s28, s28, s15
 802250e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022512:	eee7 ea27 	vfma.f32	s29, s14, s15
 8022516:	ee26 7aa7 	vmul.f32	s14, s13, s15
 802251a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 802251e:	eef0 6a67 	vmov.f32	s13, s15
 8022522:	ed8d 7a02 	vstr	s14, [sp, #8]
 8022526:	ed9d 7a03 	vldr	s14, [sp, #12]
 802252a:	ee3e 9a07 	vadd.f32	s18, s28, s14
 802252e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8022532:	ee3e aa87 	vadd.f32	s20, s29, s14
 8022536:	ee29 9a27 	vmul.f32	s18, s18, s15
 802253a:	ee2a aa27 	vmul.f32	s20, s20, s15
 802253e:	2d00      	cmp	r5, #0
 8022540:	f000 810b 	beq.w	802275a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022544:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8022548:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80227a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 802254c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8022550:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8022554:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8022558:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 802255c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8022560:	eea6 7a27 	vfma.f32	s14, s12, s15
 8022564:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8022568:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 802256c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8022570:	eea5 6a27 	vfma.f32	s12, s10, s15
 8022574:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8022578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802257c:	bf48      	it	mi
 802257e:	eeb1 7a47 	vnegmi.f32	s14, s14
 8022582:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8022586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802258a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 802258e:	bf48      	it	mi
 8022590:	eeb1 6a46 	vnegmi.f32	s12, s12
 8022594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022598:	f340 80a8 	ble.w	80226ec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 802259c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80225a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225a4:	dd5a      	ble.n	802265c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 80225a6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80225aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80225ae:	eee7 5aa7 	vfma.f32	s11, s15, s15
 80225b2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80225b6:	ee65 7a85 	vmul.f32	s15, s11, s10
 80225ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80225be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225c2:	f200 80ca 	bhi.w	802275a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80225c6:	ee7b 0aef 	vsub.f32	s1, s23, s31
 80225ca:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 80225ce:	f000 f950 	bl	8022872 <atan2f>
 80225d2:	eeb0 8a40 	vmov.f32	s16, s0
 80225d6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 80225da:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80225de:	f000 f948 	bl	8022872 <atan2f>
 80225e2:	ee38 fa40 	vsub.f32	s30, s16, s0
 80225e6:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 80225ea:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 80225ee:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 80225f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80225f6:	bf48      	it	mi
 80225f8:	eeb1 fa4f 	vnegmi.f32	s30, s30
 80225fc:	f000 f939 	bl	8022872 <atan2f>
 8022600:	ee30 0a48 	vsub.f32	s0, s0, s16
 8022604:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80227a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022608:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022610:	eeb4 fae7 	vcmpe.f32	s30, s15
 8022614:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80227a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8022618:	bf48      	it	mi
 802261a:	eeb1 0a40 	vnegmi.f32	s0, s0
 802261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022622:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8022626:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80227a8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 802262a:	bfa4      	itt	ge
 802262c:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80227ac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8022630:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8022634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022638:	bfa4      	itt	ge
 802263a:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80227ac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 802263e:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8022642:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8022646:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802264e:	f140 8084 	bpl.w	802275a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022652:	eef0 0a4a 	vmov.f32	s1, s20
 8022656:	eeb0 0a49 	vmov.f32	s0, s18
 802265a:	e040      	b.n	80226de <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 802265c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8022660:	ee27 7a07 	vmul.f32	s14, s14, s14
 8022664:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022668:	ee67 7a85 	vmul.f32	s15, s15, s10
 802266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022674:	d871      	bhi.n	802275a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022676:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802267a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802267e:	f000 f8f8 	bl	8022872 <atan2f>
 8022682:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8022686:	eeb0 8a40 	vmov.f32	s16, s0
 802268a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 802268e:	f000 f8f0 	bl	8022872 <atan2f>
 8022692:	ee38 0a40 	vsub.f32	s0, s16, s0
 8022696:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80227a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 802269a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226a2:	bf48      	it	mi
 80226a4:	eeb1 0a40 	vnegmi.f32	s0, s0
 80226a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80226ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226b0:	bfa4      	itt	ge
 80226b2:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80227ac <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80226b6:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80226ba:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80227a8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80226be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80226c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226c6:	d548      	bpl.n	802275a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80226c8:	eef0 0a4f 	vmov.f32	s1, s30
 80226cc:	4620      	mov	r0, r4
 80226ce:	eeb0 0a6f 	vmov.f32	s0, s31
 80226d2:	f7ee f9a1 	bl	8010a18 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80226d6:	eef0 0a4c 	vmov.f32	s1, s24
 80226da:	eeb0 0a6b 	vmov.f32	s0, s23
 80226de:	4620      	mov	r0, r4
 80226e0:	f7ee f99a 	bl	8010a18 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80226e4:	b005      	add	sp, #20
 80226e6:	ecbd 8b10 	vpop	{d8-d15}
 80226ea:	bd30      	pop	{r4, r5, pc}
 80226ec:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80227a0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 80226f0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80226f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226f8:	dd19      	ble.n	802272e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 80226fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80226fe:	ee26 7a06 	vmul.f32	s14, s12, s12
 8022702:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8022706:	ee67 7a85 	vmul.f32	s15, s15, s10
 802270a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022712:	d822      	bhi.n	802275a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8022714:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8022718:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 802271c:	f000 f8a9 	bl	8022872 <atan2f>
 8022720:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8022724:	eeb0 8a40 	vmov.f32	s16, s0
 8022728:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 802272c:	e7af      	b.n	802268e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 802272e:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8022732:	eeb0 7a49 	vmov.f32	s14, s18
 8022736:	eeb0 6a4a 	vmov.f32	s12, s20
 802273a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 802273e:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8022742:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8022746:	ee66 7a06 	vmul.f32	s15, s12, s12
 802274a:	eee7 7a07 	vfma.f32	s15, s14, s14
 802274e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8022752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022756:	f67f af7c 	bls.w	8022652 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 802275a:	3501      	adds	r5, #1
 802275c:	eef0 0a69 	vmov.f32	s1, s19
 8022760:	eeb0 0a68 	vmov.f32	s0, s17
 8022764:	4620      	mov	r0, r4
 8022766:	4629      	mov	r1, r5
 8022768:	eef0 3a4a 	vmov.f32	s7, s20
 802276c:	eeb0 3a49 	vmov.f32	s6, s18
 8022770:	eef0 2a6e 	vmov.f32	s5, s29
 8022774:	eeb0 2a4e 	vmov.f32	s4, s28
 8022778:	eef0 1a6d 	vmov.f32	s3, s27
 802277c:	eeb0 1a4d 	vmov.f32	s2, s26
 8022780:	f7ff fe84 	bl	802248c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8022784:	eeb0 ca6c 	vmov.f32	s24, s25
 8022788:	eddd ba01 	vldr	s23, [sp, #4]
 802278c:	eef0 9a4a 	vmov.f32	s19, s20
 8022790:	ed9d fa02 	vldr	s30, [sp, #8]
 8022794:	eef0 8a49 	vmov.f32	s17, s18
 8022798:	eddd fa03 	vldr	s31, [sp, #12]
 802279c:	e68c      	b.n	80224b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 802279e:	bf00      	nop
 80227a0:	2edbe6ff 	.word	0x2edbe6ff
 80227a4:	40490fdb 	.word	0x40490fdb
 80227a8:	3dcccccd 	.word	0x3dcccccd
 80227ac:	40c90fdb 	.word	0x40c90fdb

080227b0 <_ZN8touchgfx6CanvasD1Ev>:
 80227b0:	4b04      	ldr	r3, [pc, #16]	@ (80227c4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80227b2:	b510      	push	{r4, lr}
 80227b4:	4604      	mov	r4, r0
 80227b6:	f840 3b14 	str.w	r3, [r0], #20
 80227ba:	f7ef fbff 	bl	8011fbc <_ZN8touchgfx7OutlineD1Ev>
 80227be:	4620      	mov	r0, r4
 80227c0:	bd10      	pop	{r4, pc}
 80227c2:	bf00      	nop
 80227c4:	080272a4 	.word	0x080272a4

080227c8 <_ZN8touchgfx6CanvasD0Ev>:
 80227c8:	b510      	push	{r4, lr}
 80227ca:	4604      	mov	r4, r0
 80227cc:	f7ff fff0 	bl	80227b0 <_ZN8touchgfx6CanvasD1Ev>
 80227d0:	2174      	movs	r1, #116	@ 0x74
 80227d2:	4620      	mov	r0, r4
 80227d4:	f000 f826 	bl	8022824 <_ZdlPvj>
 80227d8:	4620      	mov	r0, r4
 80227da:	bd10      	pop	{r4, pc}

080227dc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80227dc:	790b      	ldrb	r3, [r1, #4]
 80227de:	2b00      	cmp	r3, #0
 80227e0:	bf0c      	ite	eq
 80227e2:	2301      	moveq	r3, #1
 80227e4:	2300      	movne	r3, #0
 80227e6:	b570      	push	{r4, r5, r6, lr}
 80227e8:	4604      	mov	r4, r0
 80227ea:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80227ee:	460e      	mov	r6, r1
 80227f0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80227f4:	d109      	bne.n	802280a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80227f6:	b14d      	cbz	r5, 802280c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80227f8:	7933      	ldrb	r3, [r6, #4]
 80227fa:	2b01      	cmp	r3, #1
 80227fc:	d10c      	bne.n	8022818 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80227fe:	6823      	ldr	r3, [r4, #0]
 8022800:	4620      	mov	r0, r4
 8022802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8022804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022808:	4718      	bx	r3
 802280a:	b12d      	cbz	r5, 8022818 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802280c:	6823      	ldr	r3, [r4, #0]
 802280e:	4620      	mov	r0, r4
 8022810:	695b      	ldr	r3, [r3, #20]
 8022812:	4798      	blx	r3
 8022814:	2d00      	cmp	r5, #0
 8022816:	d1ef      	bne.n	80227f8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8022818:	bd70      	pop	{r4, r5, r6, pc}

0802281a <__aeabi_atexit>:
 802281a:	460b      	mov	r3, r1
 802281c:	4601      	mov	r1, r0
 802281e:	4618      	mov	r0, r3
 8022820:	f000 bc58 	b.w	80230d4 <__cxa_atexit>

08022824 <_ZdlPvj>:
 8022824:	f000 b812 	b.w	802284c <_ZdlPv>

08022828 <__cxa_guard_acquire>:
 8022828:	6802      	ldr	r2, [r0, #0]
 802282a:	07d2      	lsls	r2, r2, #31
 802282c:	4603      	mov	r3, r0
 802282e:	d405      	bmi.n	802283c <__cxa_guard_acquire+0x14>
 8022830:	7842      	ldrb	r2, [r0, #1]
 8022832:	b102      	cbz	r2, 8022836 <__cxa_guard_acquire+0xe>
 8022834:	deff      	udf	#255	@ 0xff
 8022836:	2001      	movs	r0, #1
 8022838:	7058      	strb	r0, [r3, #1]
 802283a:	4770      	bx	lr
 802283c:	2000      	movs	r0, #0
 802283e:	4770      	bx	lr

08022840 <__cxa_guard_release>:
 8022840:	2301      	movs	r3, #1
 8022842:	6003      	str	r3, [r0, #0]
 8022844:	4770      	bx	lr

08022846 <__cxa_pure_virtual>:
 8022846:	b508      	push	{r3, lr}
 8022848:	f000 f80e 	bl	8022868 <_ZSt9terminatev>

0802284c <_ZdlPv>:
 802284c:	f000 bb8c 	b.w	8022f68 <free>

08022850 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022850:	b508      	push	{r3, lr}
 8022852:	4780      	blx	r0
 8022854:	f000 fb55 	bl	8022f02 <abort>

08022858 <_ZSt13get_terminatev>:
 8022858:	4b02      	ldr	r3, [pc, #8]	@ (8022864 <_ZSt13get_terminatev+0xc>)
 802285a:	6818      	ldr	r0, [r3, #0]
 802285c:	f3bf 8f5b 	dmb	ish
 8022860:	4770      	bx	lr
 8022862:	bf00      	nop
 8022864:	240000d8 	.word	0x240000d8

08022868 <_ZSt9terminatev>:
 8022868:	b508      	push	{r3, lr}
 802286a:	f7ff fff5 	bl	8022858 <_ZSt13get_terminatev>
 802286e:	f7ff ffef 	bl	8022850 <_ZN10__cxxabiv111__terminateEPFvvE>

08022872 <atan2f>:
 8022872:	f000 b9cd 	b.w	8022c10 <__ieee754_atan2f>
	...

08022878 <sqrtf>:
 8022878:	b508      	push	{r3, lr}
 802287a:	ed2d 8b02 	vpush	{d8}
 802287e:	eeb0 8a40 	vmov.f32	s16, s0
 8022882:	f000 f9c2 	bl	8022c0a <__ieee754_sqrtf>
 8022886:	eeb4 8a48 	vcmp.f32	s16, s16
 802288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802288e:	d60c      	bvs.n	80228aa <sqrtf+0x32>
 8022890:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80228b0 <sqrtf+0x38>
 8022894:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8022898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802289c:	d505      	bpl.n	80228aa <sqrtf+0x32>
 802289e:	f000 fe87 	bl	80235b0 <__errno>
 80228a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80228a6:	2321      	movs	r3, #33	@ 0x21
 80228a8:	6003      	str	r3, [r0, #0]
 80228aa:	ecbd 8b02 	vpop	{d8}
 80228ae:	bd08      	pop	{r3, pc}
 80228b0:	00000000 	.word	0x00000000

080228b4 <sinf_poly>:
 80228b4:	07cb      	lsls	r3, r1, #31
 80228b6:	d412      	bmi.n	80228de <sinf_poly+0x2a>
 80228b8:	ee21 5b00 	vmul.f64	d5, d1, d0
 80228bc:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80228c0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80228c4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80228c8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80228cc:	ee21 1b05 	vmul.f64	d1, d1, d5
 80228d0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80228d4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80228d8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80228dc:	4770      	bx	lr
 80228de:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80228e2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80228e6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80228ea:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80228ee:	eea1 7b06 	vfma.f64	d7, d1, d6
 80228f2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80228f6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80228fa:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80228fe:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022902:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022906:	e7e5      	b.n	80228d4 <sinf_poly+0x20>

08022908 <sinf>:
 8022908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802290a:	ee10 4a10 	vmov	r4, s0
 802290e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022912:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022916:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802291a:	eef0 7a40 	vmov.f32	s15, s0
 802291e:	d218      	bcs.n	8022952 <sinf+0x4a>
 8022920:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022924:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022928:	d20a      	bcs.n	8022940 <sinf+0x38>
 802292a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 802292e:	d103      	bne.n	8022938 <sinf+0x30>
 8022930:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8022934:	ed8d 1a01 	vstr	s2, [sp, #4]
 8022938:	eeb0 0a67 	vmov.f32	s0, s15
 802293c:	b003      	add	sp, #12
 802293e:	bd30      	pop	{r4, r5, pc}
 8022940:	483b      	ldr	r0, [pc, #236]	@ (8022a30 <sinf+0x128>)
 8022942:	eeb0 0b46 	vmov.f64	d0, d6
 8022946:	2100      	movs	r1, #0
 8022948:	b003      	add	sp, #12
 802294a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802294e:	f7ff bfb1 	b.w	80228b4 <sinf_poly>
 8022952:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022956:	4293      	cmp	r3, r2
 8022958:	d824      	bhi.n	80229a4 <sinf+0x9c>
 802295a:	4b35      	ldr	r3, [pc, #212]	@ (8022a30 <sinf+0x128>)
 802295c:	ed93 7b08 	vldr	d7, [r3, #32]
 8022960:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022964:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8022968:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 802296c:	ee17 1a90 	vmov	r1, s15
 8022970:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022974:	1609      	asrs	r1, r1, #24
 8022976:	ee07 1a90 	vmov	s15, r1
 802297a:	f001 0203 	and.w	r2, r1, #3
 802297e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022982:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8022986:	ed92 0b00 	vldr	d0, [r2]
 802298a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802298e:	f011 0f02 	tst.w	r1, #2
 8022992:	eea5 6b47 	vfms.f64	d6, d5, d7
 8022996:	bf08      	it	eq
 8022998:	4618      	moveq	r0, r3
 802299a:	ee26 1b06 	vmul.f64	d1, d6, d6
 802299e:	ee20 0b06 	vmul.f64	d0, d0, d6
 80229a2:	e7d1      	b.n	8022948 <sinf+0x40>
 80229a4:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80229a8:	d237      	bcs.n	8022a1a <sinf+0x112>
 80229aa:	4922      	ldr	r1, [pc, #136]	@ (8022a34 <sinf+0x12c>)
 80229ac:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80229b0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80229b4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80229b8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80229bc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80229c0:	6a10      	ldr	r0, [r2, #32]
 80229c2:	6912      	ldr	r2, [r2, #16]
 80229c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80229c8:	40ab      	lsls	r3, r5
 80229ca:	fba0 5003 	umull	r5, r0, r0, r3
 80229ce:	4359      	muls	r1, r3
 80229d0:	fbe3 0102 	umlal	r0, r1, r3, r2
 80229d4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80229d8:	0f9d      	lsrs	r5, r3, #30
 80229da:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80229de:	1ac9      	subs	r1, r1, r3
 80229e0:	f7dd fe5c 	bl	800069c <__aeabi_l2d>
 80229e4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80229e8:	4b11      	ldr	r3, [pc, #68]	@ (8022a30 <sinf+0x128>)
 80229ea:	f004 0203 	and.w	r2, r4, #3
 80229ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80229f2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8022a28 <sinf+0x120>
 80229f6:	ed92 0b00 	vldr	d0, [r2]
 80229fa:	ec41 0b17 	vmov	d7, r0, r1
 80229fe:	f014 0f02 	tst.w	r4, #2
 8022a02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022a06:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022a0a:	4629      	mov	r1, r5
 8022a0c:	bf08      	it	eq
 8022a0e:	4618      	moveq	r0, r3
 8022a10:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022a14:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022a18:	e796      	b.n	8022948 <sinf+0x40>
 8022a1a:	b003      	add	sp, #12
 8022a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022a20:	f000 b8e4 	b.w	8022bec <__math_invalidf>
 8022a24:	f3af 8000 	nop.w
 8022a28:	54442d18 	.word	0x54442d18
 8022a2c:	3c1921fb 	.word	0x3c1921fb
 8022a30:	08027310 	.word	0x08027310
 8022a34:	080272b0 	.word	0x080272b0

08022a38 <sinf_poly>:
 8022a38:	07cb      	lsls	r3, r1, #31
 8022a3a:	d412      	bmi.n	8022a62 <sinf_poly+0x2a>
 8022a3c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8022a40:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8022a44:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8022a48:	eea6 7b01 	vfma.f64	d7, d6, d1
 8022a4c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8022a50:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022a54:	eea6 0b05 	vfma.f64	d0, d6, d5
 8022a58:	eea7 0b01 	vfma.f64	d0, d7, d1
 8022a5c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022a60:	4770      	bx	lr
 8022a62:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8022a66:	ee21 5b01 	vmul.f64	d5, d1, d1
 8022a6a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8022a6e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8022a72:	eea1 7b06 	vfma.f64	d7, d1, d6
 8022a76:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8022a7a:	eea1 0b06 	vfma.f64	d0, d1, d6
 8022a7e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8022a82:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022a86:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022a8a:	e7e5      	b.n	8022a58 <sinf_poly+0x20>
 8022a8c:	0000      	movs	r0, r0
	...

08022a90 <cosf>:
 8022a90:	b538      	push	{r3, r4, r5, lr}
 8022a92:	ee10 4a10 	vmov	r4, s0
 8022a96:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8022a9a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8022a9e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8022aa2:	d21f      	bcs.n	8022ae4 <cosf+0x54>
 8022aa4:	ee27 7b07 	vmul.f64	d7, d7, d7
 8022aa8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8022aac:	f0c0 8082 	bcc.w	8022bb4 <cosf+0x124>
 8022ab0:	ee27 4b07 	vmul.f64	d4, d7, d7
 8022ab4:	4b44      	ldr	r3, [pc, #272]	@ (8022bc8 <cosf+0x138>)
 8022ab6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8022aba:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8022abe:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8022ac2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8022ac6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8022aca:	eea7 0b05 	vfma.f64	d0, d7, d5
 8022ace:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8022ad2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8022ad6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8022ada:	eea6 0b07 	vfma.f64	d0, d6, d7
 8022ade:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8022ae2:	bd38      	pop	{r3, r4, r5, pc}
 8022ae4:	f240 422e 	movw	r2, #1070	@ 0x42e
 8022ae8:	4293      	cmp	r3, r2
 8022aea:	d829      	bhi.n	8022b40 <cosf+0xb0>
 8022aec:	4b36      	ldr	r3, [pc, #216]	@ (8022bc8 <cosf+0x138>)
 8022aee:	ed93 6b08 	vldr	d6, [r3, #32]
 8022af2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8022af6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8022afa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022afe:	ee16 1a90 	vmov	r1, s13
 8022b02:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8022b06:	1609      	asrs	r1, r1, #24
 8022b08:	ee06 1a90 	vmov	s13, r1
 8022b0c:	f001 0203 	and.w	r2, r1, #3
 8022b10:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022b14:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8022b18:	ed92 0b00 	vldr	d0, [r2]
 8022b1c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8022b20:	f011 0f02 	tst.w	r1, #2
 8022b24:	f081 0101 	eor.w	r1, r1, #1
 8022b28:	eea5 7b46 	vfms.f64	d7, d5, d6
 8022b2c:	bf08      	it	eq
 8022b2e:	4618      	moveq	r0, r3
 8022b30:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022b38:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022b3c:	f7ff bf7c 	b.w	8022a38 <sinf_poly>
 8022b40:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8022b44:	d232      	bcs.n	8022bac <cosf+0x11c>
 8022b46:	4921      	ldr	r1, [pc, #132]	@ (8022bcc <cosf+0x13c>)
 8022b48:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8022b4c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8022b50:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8022b54:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8022b58:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8022b5c:	6a10      	ldr	r0, [r2, #32]
 8022b5e:	6912      	ldr	r2, [r2, #16]
 8022b60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8022b64:	40ab      	lsls	r3, r5
 8022b66:	fba0 5003 	umull	r5, r0, r0, r3
 8022b6a:	4359      	muls	r1, r3
 8022b6c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8022b70:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8022b74:	0f9d      	lsrs	r5, r3, #30
 8022b76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8022b7a:	1ac9      	subs	r1, r1, r3
 8022b7c:	f7dd fd8e 	bl	800069c <__aeabi_l2d>
 8022b80:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022b84:	4b10      	ldr	r3, [pc, #64]	@ (8022bc8 <cosf+0x138>)
 8022b86:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8022bc0 <cosf+0x130>
 8022b8a:	ec41 0b17 	vmov	d7, r0, r1
 8022b8e:	f004 0203 	and.w	r2, r4, #3
 8022b92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8022b96:	ed92 0b00 	vldr	d0, [r2]
 8022b9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8022b9e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8022ba2:	f014 0f02 	tst.w	r4, #2
 8022ba6:	f085 0101 	eor.w	r1, r5, #1
 8022baa:	e7bf      	b.n	8022b2c <cosf+0x9c>
 8022bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022bb0:	f000 b81c 	b.w	8022bec <__math_invalidf>
 8022bb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8022bb8:	e793      	b.n	8022ae2 <cosf+0x52>
 8022bba:	bf00      	nop
 8022bbc:	f3af 8000 	nop.w
 8022bc0:	54442d18 	.word	0x54442d18
 8022bc4:	3c1921fb 	.word	0x3c1921fb
 8022bc8:	08027310 	.word	0x08027310
 8022bcc:	080272b0 	.word	0x080272b0

08022bd0 <with_errnof>:
 8022bd0:	b510      	push	{r4, lr}
 8022bd2:	ed2d 8b02 	vpush	{d8}
 8022bd6:	eeb0 8a40 	vmov.f32	s16, s0
 8022bda:	4604      	mov	r4, r0
 8022bdc:	f000 fce8 	bl	80235b0 <__errno>
 8022be0:	eeb0 0a48 	vmov.f32	s0, s16
 8022be4:	ecbd 8b02 	vpop	{d8}
 8022be8:	6004      	str	r4, [r0, #0]
 8022bea:	bd10      	pop	{r4, pc}

08022bec <__math_invalidf>:
 8022bec:	eef0 7a40 	vmov.f32	s15, s0
 8022bf0:	ee30 7a40 	vsub.f32	s14, s0, s0
 8022bf4:	eef4 7a67 	vcmp.f32	s15, s15
 8022bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bfc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8022c00:	d602      	bvs.n	8022c08 <__math_invalidf+0x1c>
 8022c02:	2021      	movs	r0, #33	@ 0x21
 8022c04:	f7ff bfe4 	b.w	8022bd0 <with_errnof>
 8022c08:	4770      	bx	lr

08022c0a <__ieee754_sqrtf>:
 8022c0a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8022c0e:	4770      	bx	lr

08022c10 <__ieee754_atan2f>:
 8022c10:	ee10 2a90 	vmov	r2, s1
 8022c14:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8022c18:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022c1c:	b510      	push	{r4, lr}
 8022c1e:	eef0 7a40 	vmov.f32	s15, s0
 8022c22:	d806      	bhi.n	8022c32 <__ieee754_atan2f+0x22>
 8022c24:	ee10 0a10 	vmov	r0, s0
 8022c28:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8022c2c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022c30:	d904      	bls.n	8022c3c <__ieee754_atan2f+0x2c>
 8022c32:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022c36:	eeb0 0a67 	vmov.f32	s0, s15
 8022c3a:	bd10      	pop	{r4, pc}
 8022c3c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022c40:	d103      	bne.n	8022c4a <__ieee754_atan2f+0x3a>
 8022c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c46:	f000 b881 	b.w	8022d4c <atanf>
 8022c4a:	1794      	asrs	r4, r2, #30
 8022c4c:	f004 0402 	and.w	r4, r4, #2
 8022c50:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022c54:	b93b      	cbnz	r3, 8022c66 <__ieee754_atan2f+0x56>
 8022c56:	2c02      	cmp	r4, #2
 8022c58:	d05c      	beq.n	8022d14 <__ieee754_atan2f+0x104>
 8022c5a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022d28 <__ieee754_atan2f+0x118>
 8022c5e:	2c03      	cmp	r4, #3
 8022c60:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8022c64:	e7e7      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022c66:	b939      	cbnz	r1, 8022c78 <__ieee754_atan2f+0x68>
 8022c68:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8022d2c <__ieee754_atan2f+0x11c>
 8022c6c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022d30 <__ieee754_atan2f+0x120>
 8022c70:	2800      	cmp	r0, #0
 8022c72:	fe67 7a27 	vselge.f32	s15, s14, s15
 8022c76:	e7de      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022c78:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022c7c:	d110      	bne.n	8022ca0 <__ieee754_atan2f+0x90>
 8022c7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022c82:	f104 34ff 	add.w	r4, r4, #4294967295
 8022c86:	d107      	bne.n	8022c98 <__ieee754_atan2f+0x88>
 8022c88:	2c02      	cmp	r4, #2
 8022c8a:	d846      	bhi.n	8022d1a <__ieee754_atan2f+0x10a>
 8022c8c:	4b29      	ldr	r3, [pc, #164]	@ (8022d34 <__ieee754_atan2f+0x124>)
 8022c8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8022c92:	edd3 7a00 	vldr	s15, [r3]
 8022c96:	e7ce      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022c98:	2c02      	cmp	r4, #2
 8022c9a:	d841      	bhi.n	8022d20 <__ieee754_atan2f+0x110>
 8022c9c:	4b26      	ldr	r3, [pc, #152]	@ (8022d38 <__ieee754_atan2f+0x128>)
 8022c9e:	e7f6      	b.n	8022c8e <__ieee754_atan2f+0x7e>
 8022ca0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022ca4:	d0e0      	beq.n	8022c68 <__ieee754_atan2f+0x58>
 8022ca6:	1a5b      	subs	r3, r3, r1
 8022ca8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8022cac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8022cb0:	da1a      	bge.n	8022ce8 <__ieee754_atan2f+0xd8>
 8022cb2:	2a00      	cmp	r2, #0
 8022cb4:	da01      	bge.n	8022cba <__ieee754_atan2f+0xaa>
 8022cb6:	313c      	adds	r1, #60	@ 0x3c
 8022cb8:	db19      	blt.n	8022cee <__ieee754_atan2f+0xde>
 8022cba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8022cbe:	f000 f919 	bl	8022ef4 <fabsf>
 8022cc2:	f000 f843 	bl	8022d4c <atanf>
 8022cc6:	eef0 7a40 	vmov.f32	s15, s0
 8022cca:	2c01      	cmp	r4, #1
 8022ccc:	d012      	beq.n	8022cf4 <__ieee754_atan2f+0xe4>
 8022cce:	2c02      	cmp	r4, #2
 8022cd0:	d017      	beq.n	8022d02 <__ieee754_atan2f+0xf2>
 8022cd2:	2c00      	cmp	r4, #0
 8022cd4:	d0af      	beq.n	8022c36 <__ieee754_atan2f+0x26>
 8022cd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8022d3c <__ieee754_atan2f+0x12c>
 8022cda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022cde:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8022d40 <__ieee754_atan2f+0x130>
 8022ce2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022ce6:	e7a6      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022ce8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8022d30 <__ieee754_atan2f+0x120>
 8022cec:	e7ed      	b.n	8022cca <__ieee754_atan2f+0xba>
 8022cee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8022d44 <__ieee754_atan2f+0x134>
 8022cf2:	e7ea      	b.n	8022cca <__ieee754_atan2f+0xba>
 8022cf4:	ee17 3a90 	vmov	r3, s15
 8022cf8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8022cfc:	ee07 3a90 	vmov	s15, r3
 8022d00:	e799      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d02:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8022d3c <__ieee754_atan2f+0x12c>
 8022d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022d0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8022d40 <__ieee754_atan2f+0x130>
 8022d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022d12:	e790      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d14:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8022d40 <__ieee754_atan2f+0x130>
 8022d18:	e78d      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d1a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8022d48 <__ieee754_atan2f+0x138>
 8022d1e:	e78a      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d20:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8022d44 <__ieee754_atan2f+0x134>
 8022d24:	e787      	b.n	8022c36 <__ieee754_atan2f+0x26>
 8022d26:	bf00      	nop
 8022d28:	c0490fdb 	.word	0xc0490fdb
 8022d2c:	bfc90fdb 	.word	0xbfc90fdb
 8022d30:	3fc90fdb 	.word	0x3fc90fdb
 8022d34:	080273fc 	.word	0x080273fc
 8022d38:	080273f0 	.word	0x080273f0
 8022d3c:	33bbbd2e 	.word	0x33bbbd2e
 8022d40:	40490fdb 	.word	0x40490fdb
 8022d44:	00000000 	.word	0x00000000
 8022d48:	3f490fdb 	.word	0x3f490fdb

08022d4c <atanf>:
 8022d4c:	b538      	push	{r3, r4, r5, lr}
 8022d4e:	ee10 5a10 	vmov	r5, s0
 8022d52:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8022d56:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8022d5a:	eef0 7a40 	vmov.f32	s15, s0
 8022d5e:	d30f      	bcc.n	8022d80 <atanf+0x34>
 8022d60:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8022d64:	d904      	bls.n	8022d70 <atanf+0x24>
 8022d66:	ee70 7a00 	vadd.f32	s15, s0, s0
 8022d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8022d6e:	bd38      	pop	{r3, r4, r5, pc}
 8022d70:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022ea8 <atanf+0x15c>
 8022d74:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8022eac <atanf+0x160>
 8022d78:	2d00      	cmp	r5, #0
 8022d7a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8022d7e:	e7f4      	b.n	8022d6a <atanf+0x1e>
 8022d80:	4b4b      	ldr	r3, [pc, #300]	@ (8022eb0 <atanf+0x164>)
 8022d82:	429c      	cmp	r4, r3
 8022d84:	d810      	bhi.n	8022da8 <atanf+0x5c>
 8022d86:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8022d8a:	d20a      	bcs.n	8022da2 <atanf+0x56>
 8022d8c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8022eb4 <atanf+0x168>
 8022d90:	ee30 7a07 	vadd.f32	s14, s0, s14
 8022d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022d98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8022d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022da0:	dce3      	bgt.n	8022d6a <atanf+0x1e>
 8022da2:	f04f 33ff 	mov.w	r3, #4294967295
 8022da6:	e013      	b.n	8022dd0 <atanf+0x84>
 8022da8:	f000 f8a4 	bl	8022ef4 <fabsf>
 8022dac:	4b42      	ldr	r3, [pc, #264]	@ (8022eb8 <atanf+0x16c>)
 8022dae:	429c      	cmp	r4, r3
 8022db0:	d84f      	bhi.n	8022e52 <atanf+0x106>
 8022db2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8022db6:	429c      	cmp	r4, r3
 8022db8:	d841      	bhi.n	8022e3e <atanf+0xf2>
 8022dba:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8022dbe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022dc2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022dcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022dd0:	1c5a      	adds	r2, r3, #1
 8022dd2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8022dd6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8022ebc <atanf+0x170>
 8022dda:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022ec0 <atanf+0x174>
 8022dde:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8022ec4 <atanf+0x178>
 8022de2:	ee66 6a06 	vmul.f32	s13, s12, s12
 8022de6:	eee6 5a87 	vfma.f32	s11, s13, s14
 8022dea:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8022ec8 <atanf+0x17c>
 8022dee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022df2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8022ecc <atanf+0x180>
 8022df6:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022dfa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8022ed0 <atanf+0x184>
 8022dfe:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022e02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8022ed4 <atanf+0x188>
 8022e06:	eee7 5a26 	vfma.f32	s11, s14, s13
 8022e0a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022ed8 <atanf+0x18c>
 8022e0e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8022e12:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8022edc <atanf+0x190>
 8022e16:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022e1a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8022ee0 <atanf+0x194>
 8022e1e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8022e22:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8022ee4 <atanf+0x198>
 8022e26:	eea5 7a26 	vfma.f32	s14, s10, s13
 8022e2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8022e2e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8022e32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8022e36:	d121      	bne.n	8022e7c <atanf+0x130>
 8022e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022e3c:	e795      	b.n	8022d6a <atanf+0x1e>
 8022e3e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8022e42:	ee30 7a67 	vsub.f32	s14, s0, s15
 8022e46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022e4a:	2301      	movs	r3, #1
 8022e4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e50:	e7be      	b.n	8022dd0 <atanf+0x84>
 8022e52:	4b25      	ldr	r3, [pc, #148]	@ (8022ee8 <atanf+0x19c>)
 8022e54:	429c      	cmp	r4, r3
 8022e56:	d80b      	bhi.n	8022e70 <atanf+0x124>
 8022e58:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8022e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022e60:	eea0 7a27 	vfma.f32	s14, s0, s15
 8022e64:	2302      	movs	r3, #2
 8022e66:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022e6e:	e7af      	b.n	8022dd0 <atanf+0x84>
 8022e70:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022e74:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e78:	2303      	movs	r3, #3
 8022e7a:	e7a9      	b.n	8022dd0 <atanf+0x84>
 8022e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8022eec <atanf+0x1a0>)
 8022e7e:	491c      	ldr	r1, [pc, #112]	@ (8022ef0 <atanf+0x1a4>)
 8022e80:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8022e84:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022e88:	edd3 6a00 	vldr	s13, [r3]
 8022e8c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022e90:	2d00      	cmp	r5, #0
 8022e92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022e96:	edd2 7a00 	vldr	s15, [r2]
 8022e9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022e9e:	bfb8      	it	lt
 8022ea0:	eef1 7a67 	vneglt.f32	s15, s15
 8022ea4:	e761      	b.n	8022d6a <atanf+0x1e>
 8022ea6:	bf00      	nop
 8022ea8:	bfc90fdb 	.word	0xbfc90fdb
 8022eac:	3fc90fdb 	.word	0x3fc90fdb
 8022eb0:	3edfffff 	.word	0x3edfffff
 8022eb4:	7149f2ca 	.word	0x7149f2ca
 8022eb8:	3f97ffff 	.word	0x3f97ffff
 8022ebc:	3c8569d7 	.word	0x3c8569d7
 8022ec0:	3d4bda59 	.word	0x3d4bda59
 8022ec4:	bd6ef16b 	.word	0xbd6ef16b
 8022ec8:	3d886b35 	.word	0x3d886b35
 8022ecc:	3dba2e6e 	.word	0x3dba2e6e
 8022ed0:	3e124925 	.word	0x3e124925
 8022ed4:	3eaaaaab 	.word	0x3eaaaaab
 8022ed8:	bd15a221 	.word	0xbd15a221
 8022edc:	bd9d8795 	.word	0xbd9d8795
 8022ee0:	bde38e38 	.word	0xbde38e38
 8022ee4:	be4ccccd 	.word	0xbe4ccccd
 8022ee8:	401bffff 	.word	0x401bffff
 8022eec:	08027418 	.word	0x08027418
 8022ef0:	08027408 	.word	0x08027408

08022ef4 <fabsf>:
 8022ef4:	ee10 3a10 	vmov	r3, s0
 8022ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022efc:	ee00 3a10 	vmov	s0, r3
 8022f00:	4770      	bx	lr

08022f02 <abort>:
 8022f02:	b508      	push	{r3, lr}
 8022f04:	2006      	movs	r0, #6
 8022f06:	f000 fae1 	bl	80234cc <raise>
 8022f0a:	2001      	movs	r0, #1
 8022f0c:	f7de fe56 	bl	8001bbc <_exit>

08022f10 <__assert_func>:
 8022f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f12:	4614      	mov	r4, r2
 8022f14:	461a      	mov	r2, r3
 8022f16:	4b09      	ldr	r3, [pc, #36]	@ (8022f3c <__assert_func+0x2c>)
 8022f18:	681b      	ldr	r3, [r3, #0]
 8022f1a:	4605      	mov	r5, r0
 8022f1c:	68d8      	ldr	r0, [r3, #12]
 8022f1e:	b14c      	cbz	r4, 8022f34 <__assert_func+0x24>
 8022f20:	4b07      	ldr	r3, [pc, #28]	@ (8022f40 <__assert_func+0x30>)
 8022f22:	9100      	str	r1, [sp, #0]
 8022f24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f28:	4906      	ldr	r1, [pc, #24]	@ (8022f44 <__assert_func+0x34>)
 8022f2a:	462b      	mov	r3, r5
 8022f2c:	f000 f984 	bl	8023238 <fiprintf>
 8022f30:	f7ff ffe7 	bl	8022f02 <abort>
 8022f34:	4b04      	ldr	r3, [pc, #16]	@ (8022f48 <__assert_func+0x38>)
 8022f36:	461c      	mov	r4, r3
 8022f38:	e7f3      	b.n	8022f22 <__assert_func+0x12>
 8022f3a:	bf00      	nop
 8022f3c:	240000e8 	.word	0x240000e8
 8022f40:	08025e77 	.word	0x08025e77
 8022f44:	08025e84 	.word	0x08025e84
 8022f48:	08025eb2 	.word	0x08025eb2

08022f4c <atexit>:
 8022f4c:	2300      	movs	r3, #0
 8022f4e:	4601      	mov	r1, r0
 8022f50:	461a      	mov	r2, r3
 8022f52:	4618      	mov	r0, r3
 8022f54:	f000 bb68 	b.w	8023628 <__register_exitproc>

08022f58 <malloc>:
 8022f58:	4b02      	ldr	r3, [pc, #8]	@ (8022f64 <malloc+0xc>)
 8022f5a:	4601      	mov	r1, r0
 8022f5c:	6818      	ldr	r0, [r3, #0]
 8022f5e:	f000 b82d 	b.w	8022fbc <_malloc_r>
 8022f62:	bf00      	nop
 8022f64:	240000e8 	.word	0x240000e8

08022f68 <free>:
 8022f68:	4b02      	ldr	r3, [pc, #8]	@ (8022f74 <free+0xc>)
 8022f6a:	4601      	mov	r1, r0
 8022f6c:	6818      	ldr	r0, [r3, #0]
 8022f6e:	f000 bbb7 	b.w	80236e0 <_free_r>
 8022f72:	bf00      	nop
 8022f74:	240000e8 	.word	0x240000e8

08022f78 <sbrk_aligned>:
 8022f78:	b570      	push	{r4, r5, r6, lr}
 8022f7a:	4e0f      	ldr	r6, [pc, #60]	@ (8022fb8 <sbrk_aligned+0x40>)
 8022f7c:	460c      	mov	r4, r1
 8022f7e:	6831      	ldr	r1, [r6, #0]
 8022f80:	4605      	mov	r5, r0
 8022f82:	b911      	cbnz	r1, 8022f8a <sbrk_aligned+0x12>
 8022f84:	f000 faf2 	bl	802356c <_sbrk_r>
 8022f88:	6030      	str	r0, [r6, #0]
 8022f8a:	4621      	mov	r1, r4
 8022f8c:	4628      	mov	r0, r5
 8022f8e:	f000 faed 	bl	802356c <_sbrk_r>
 8022f92:	1c43      	adds	r3, r0, #1
 8022f94:	d103      	bne.n	8022f9e <sbrk_aligned+0x26>
 8022f96:	f04f 34ff 	mov.w	r4, #4294967295
 8022f9a:	4620      	mov	r0, r4
 8022f9c:	bd70      	pop	{r4, r5, r6, pc}
 8022f9e:	1cc4      	adds	r4, r0, #3
 8022fa0:	f024 0403 	bic.w	r4, r4, #3
 8022fa4:	42a0      	cmp	r0, r4
 8022fa6:	d0f8      	beq.n	8022f9a <sbrk_aligned+0x22>
 8022fa8:	1a21      	subs	r1, r4, r0
 8022faa:	4628      	mov	r0, r5
 8022fac:	f000 fade 	bl	802356c <_sbrk_r>
 8022fb0:	3001      	adds	r0, #1
 8022fb2:	d1f2      	bne.n	8022f9a <sbrk_aligned+0x22>
 8022fb4:	e7ef      	b.n	8022f96 <sbrk_aligned+0x1e>
 8022fb6:	bf00      	nop
 8022fb8:	24025db4 	.word	0x24025db4

08022fbc <_malloc_r>:
 8022fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022fc0:	1ccd      	adds	r5, r1, #3
 8022fc2:	f025 0503 	bic.w	r5, r5, #3
 8022fc6:	3508      	adds	r5, #8
 8022fc8:	2d0c      	cmp	r5, #12
 8022fca:	bf38      	it	cc
 8022fcc:	250c      	movcc	r5, #12
 8022fce:	2d00      	cmp	r5, #0
 8022fd0:	4606      	mov	r6, r0
 8022fd2:	db01      	blt.n	8022fd8 <_malloc_r+0x1c>
 8022fd4:	42a9      	cmp	r1, r5
 8022fd6:	d904      	bls.n	8022fe2 <_malloc_r+0x26>
 8022fd8:	230c      	movs	r3, #12
 8022fda:	6033      	str	r3, [r6, #0]
 8022fdc:	2000      	movs	r0, #0
 8022fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022fe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80230b8 <_malloc_r+0xfc>
 8022fe6:	f000 f869 	bl	80230bc <__malloc_lock>
 8022fea:	f8d8 3000 	ldr.w	r3, [r8]
 8022fee:	461c      	mov	r4, r3
 8022ff0:	bb44      	cbnz	r4, 8023044 <_malloc_r+0x88>
 8022ff2:	4629      	mov	r1, r5
 8022ff4:	4630      	mov	r0, r6
 8022ff6:	f7ff ffbf 	bl	8022f78 <sbrk_aligned>
 8022ffa:	1c43      	adds	r3, r0, #1
 8022ffc:	4604      	mov	r4, r0
 8022ffe:	d158      	bne.n	80230b2 <_malloc_r+0xf6>
 8023000:	f8d8 4000 	ldr.w	r4, [r8]
 8023004:	4627      	mov	r7, r4
 8023006:	2f00      	cmp	r7, #0
 8023008:	d143      	bne.n	8023092 <_malloc_r+0xd6>
 802300a:	2c00      	cmp	r4, #0
 802300c:	d04b      	beq.n	80230a6 <_malloc_r+0xea>
 802300e:	6823      	ldr	r3, [r4, #0]
 8023010:	4639      	mov	r1, r7
 8023012:	4630      	mov	r0, r6
 8023014:	eb04 0903 	add.w	r9, r4, r3
 8023018:	f000 faa8 	bl	802356c <_sbrk_r>
 802301c:	4581      	cmp	r9, r0
 802301e:	d142      	bne.n	80230a6 <_malloc_r+0xea>
 8023020:	6821      	ldr	r1, [r4, #0]
 8023022:	1a6d      	subs	r5, r5, r1
 8023024:	4629      	mov	r1, r5
 8023026:	4630      	mov	r0, r6
 8023028:	f7ff ffa6 	bl	8022f78 <sbrk_aligned>
 802302c:	3001      	adds	r0, #1
 802302e:	d03a      	beq.n	80230a6 <_malloc_r+0xea>
 8023030:	6823      	ldr	r3, [r4, #0]
 8023032:	442b      	add	r3, r5
 8023034:	6023      	str	r3, [r4, #0]
 8023036:	f8d8 3000 	ldr.w	r3, [r8]
 802303a:	685a      	ldr	r2, [r3, #4]
 802303c:	bb62      	cbnz	r2, 8023098 <_malloc_r+0xdc>
 802303e:	f8c8 7000 	str.w	r7, [r8]
 8023042:	e00f      	b.n	8023064 <_malloc_r+0xa8>
 8023044:	6822      	ldr	r2, [r4, #0]
 8023046:	1b52      	subs	r2, r2, r5
 8023048:	d420      	bmi.n	802308c <_malloc_r+0xd0>
 802304a:	2a0b      	cmp	r2, #11
 802304c:	d917      	bls.n	802307e <_malloc_r+0xc2>
 802304e:	1961      	adds	r1, r4, r5
 8023050:	42a3      	cmp	r3, r4
 8023052:	6025      	str	r5, [r4, #0]
 8023054:	bf18      	it	ne
 8023056:	6059      	strne	r1, [r3, #4]
 8023058:	6863      	ldr	r3, [r4, #4]
 802305a:	bf08      	it	eq
 802305c:	f8c8 1000 	streq.w	r1, [r8]
 8023060:	5162      	str	r2, [r4, r5]
 8023062:	604b      	str	r3, [r1, #4]
 8023064:	4630      	mov	r0, r6
 8023066:	f000 f82f 	bl	80230c8 <__malloc_unlock>
 802306a:	f104 000b 	add.w	r0, r4, #11
 802306e:	1d23      	adds	r3, r4, #4
 8023070:	f020 0007 	bic.w	r0, r0, #7
 8023074:	1ac2      	subs	r2, r0, r3
 8023076:	bf1c      	itt	ne
 8023078:	1a1b      	subne	r3, r3, r0
 802307a:	50a3      	strne	r3, [r4, r2]
 802307c:	e7af      	b.n	8022fde <_malloc_r+0x22>
 802307e:	6862      	ldr	r2, [r4, #4]
 8023080:	42a3      	cmp	r3, r4
 8023082:	bf0c      	ite	eq
 8023084:	f8c8 2000 	streq.w	r2, [r8]
 8023088:	605a      	strne	r2, [r3, #4]
 802308a:	e7eb      	b.n	8023064 <_malloc_r+0xa8>
 802308c:	4623      	mov	r3, r4
 802308e:	6864      	ldr	r4, [r4, #4]
 8023090:	e7ae      	b.n	8022ff0 <_malloc_r+0x34>
 8023092:	463c      	mov	r4, r7
 8023094:	687f      	ldr	r7, [r7, #4]
 8023096:	e7b6      	b.n	8023006 <_malloc_r+0x4a>
 8023098:	461a      	mov	r2, r3
 802309a:	685b      	ldr	r3, [r3, #4]
 802309c:	42a3      	cmp	r3, r4
 802309e:	d1fb      	bne.n	8023098 <_malloc_r+0xdc>
 80230a0:	2300      	movs	r3, #0
 80230a2:	6053      	str	r3, [r2, #4]
 80230a4:	e7de      	b.n	8023064 <_malloc_r+0xa8>
 80230a6:	230c      	movs	r3, #12
 80230a8:	6033      	str	r3, [r6, #0]
 80230aa:	4630      	mov	r0, r6
 80230ac:	f000 f80c 	bl	80230c8 <__malloc_unlock>
 80230b0:	e794      	b.n	8022fdc <_malloc_r+0x20>
 80230b2:	6005      	str	r5, [r0, #0]
 80230b4:	e7d6      	b.n	8023064 <_malloc_r+0xa8>
 80230b6:	bf00      	nop
 80230b8:	24025db8 	.word	0x24025db8

080230bc <__malloc_lock>:
 80230bc:	4801      	ldr	r0, [pc, #4]	@ (80230c4 <__malloc_lock+0x8>)
 80230be:	f000 baa2 	b.w	8023606 <__retarget_lock_acquire_recursive>
 80230c2:	bf00      	nop
 80230c4:	24025efc 	.word	0x24025efc

080230c8 <__malloc_unlock>:
 80230c8:	4801      	ldr	r0, [pc, #4]	@ (80230d0 <__malloc_unlock+0x8>)
 80230ca:	f000 ba9d 	b.w	8023608 <__retarget_lock_release_recursive>
 80230ce:	bf00      	nop
 80230d0:	24025efc 	.word	0x24025efc

080230d4 <__cxa_atexit>:
 80230d4:	b510      	push	{r4, lr}
 80230d6:	4604      	mov	r4, r0
 80230d8:	4804      	ldr	r0, [pc, #16]	@ (80230ec <__cxa_atexit+0x18>)
 80230da:	4613      	mov	r3, r2
 80230dc:	b120      	cbz	r0, 80230e8 <__cxa_atexit+0x14>
 80230de:	460a      	mov	r2, r1
 80230e0:	2002      	movs	r0, #2
 80230e2:	4621      	mov	r1, r4
 80230e4:	f000 faa0 	bl	8023628 <__register_exitproc>
 80230e8:	bd10      	pop	{r4, pc}
 80230ea:	bf00      	nop
 80230ec:	08023629 	.word	0x08023629

080230f0 <std>:
 80230f0:	2300      	movs	r3, #0
 80230f2:	b510      	push	{r4, lr}
 80230f4:	4604      	mov	r4, r0
 80230f6:	e9c0 3300 	strd	r3, r3, [r0]
 80230fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80230fe:	6083      	str	r3, [r0, #8]
 8023100:	8181      	strh	r1, [r0, #12]
 8023102:	6643      	str	r3, [r0, #100]	@ 0x64
 8023104:	81c2      	strh	r2, [r0, #14]
 8023106:	6183      	str	r3, [r0, #24]
 8023108:	4619      	mov	r1, r3
 802310a:	2208      	movs	r2, #8
 802310c:	305c      	adds	r0, #92	@ 0x5c
 802310e:	f000 f99b 	bl	8023448 <memset>
 8023112:	4b0d      	ldr	r3, [pc, #52]	@ (8023148 <std+0x58>)
 8023114:	6263      	str	r3, [r4, #36]	@ 0x24
 8023116:	4b0d      	ldr	r3, [pc, #52]	@ (802314c <std+0x5c>)
 8023118:	62a3      	str	r3, [r4, #40]	@ 0x28
 802311a:	4b0d      	ldr	r3, [pc, #52]	@ (8023150 <std+0x60>)
 802311c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802311e:	4b0d      	ldr	r3, [pc, #52]	@ (8023154 <std+0x64>)
 8023120:	6323      	str	r3, [r4, #48]	@ 0x30
 8023122:	4b0d      	ldr	r3, [pc, #52]	@ (8023158 <std+0x68>)
 8023124:	6224      	str	r4, [r4, #32]
 8023126:	429c      	cmp	r4, r3
 8023128:	d006      	beq.n	8023138 <std+0x48>
 802312a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802312e:	4294      	cmp	r4, r2
 8023130:	d002      	beq.n	8023138 <std+0x48>
 8023132:	33d0      	adds	r3, #208	@ 0xd0
 8023134:	429c      	cmp	r4, r3
 8023136:	d105      	bne.n	8023144 <std+0x54>
 8023138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802313c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023140:	f000 ba60 	b.w	8023604 <__retarget_lock_init_recursive>
 8023144:	bd10      	pop	{r4, pc}
 8023146:	bf00      	nop
 8023148:	08023299 	.word	0x08023299
 802314c:	080232bb 	.word	0x080232bb
 8023150:	080232f3 	.word	0x080232f3
 8023154:	08023317 	.word	0x08023317
 8023158:	24025dbc 	.word	0x24025dbc

0802315c <stdio_exit_handler>:
 802315c:	4a02      	ldr	r2, [pc, #8]	@ (8023168 <stdio_exit_handler+0xc>)
 802315e:	4903      	ldr	r1, [pc, #12]	@ (802316c <stdio_exit_handler+0x10>)
 8023160:	4803      	ldr	r0, [pc, #12]	@ (8023170 <stdio_exit_handler+0x14>)
 8023162:	f000 b87b 	b.w	802325c <_fwalk_sglue>
 8023166:	bf00      	nop
 8023168:	240000dc 	.word	0x240000dc
 802316c:	08023e19 	.word	0x08023e19
 8023170:	240000ec 	.word	0x240000ec

08023174 <cleanup_stdio>:
 8023174:	6841      	ldr	r1, [r0, #4]
 8023176:	4b0c      	ldr	r3, [pc, #48]	@ (80231a8 <cleanup_stdio+0x34>)
 8023178:	4299      	cmp	r1, r3
 802317a:	b510      	push	{r4, lr}
 802317c:	4604      	mov	r4, r0
 802317e:	d001      	beq.n	8023184 <cleanup_stdio+0x10>
 8023180:	f000 fe4a 	bl	8023e18 <_fflush_r>
 8023184:	68a1      	ldr	r1, [r4, #8]
 8023186:	4b09      	ldr	r3, [pc, #36]	@ (80231ac <cleanup_stdio+0x38>)
 8023188:	4299      	cmp	r1, r3
 802318a:	d002      	beq.n	8023192 <cleanup_stdio+0x1e>
 802318c:	4620      	mov	r0, r4
 802318e:	f000 fe43 	bl	8023e18 <_fflush_r>
 8023192:	68e1      	ldr	r1, [r4, #12]
 8023194:	4b06      	ldr	r3, [pc, #24]	@ (80231b0 <cleanup_stdio+0x3c>)
 8023196:	4299      	cmp	r1, r3
 8023198:	d004      	beq.n	80231a4 <cleanup_stdio+0x30>
 802319a:	4620      	mov	r0, r4
 802319c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231a0:	f000 be3a 	b.w	8023e18 <_fflush_r>
 80231a4:	bd10      	pop	{r4, pc}
 80231a6:	bf00      	nop
 80231a8:	24025dbc 	.word	0x24025dbc
 80231ac:	24025e24 	.word	0x24025e24
 80231b0:	24025e8c 	.word	0x24025e8c

080231b4 <global_stdio_init.part.0>:
 80231b4:	b510      	push	{r4, lr}
 80231b6:	4b0b      	ldr	r3, [pc, #44]	@ (80231e4 <global_stdio_init.part.0+0x30>)
 80231b8:	4c0b      	ldr	r4, [pc, #44]	@ (80231e8 <global_stdio_init.part.0+0x34>)
 80231ba:	4a0c      	ldr	r2, [pc, #48]	@ (80231ec <global_stdio_init.part.0+0x38>)
 80231bc:	601a      	str	r2, [r3, #0]
 80231be:	4620      	mov	r0, r4
 80231c0:	2200      	movs	r2, #0
 80231c2:	2104      	movs	r1, #4
 80231c4:	f7ff ff94 	bl	80230f0 <std>
 80231c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80231cc:	2201      	movs	r2, #1
 80231ce:	2109      	movs	r1, #9
 80231d0:	f7ff ff8e 	bl	80230f0 <std>
 80231d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80231d8:	2202      	movs	r2, #2
 80231da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80231de:	2112      	movs	r1, #18
 80231e0:	f7ff bf86 	b.w	80230f0 <std>
 80231e4:	24025ef4 	.word	0x24025ef4
 80231e8:	24025dbc 	.word	0x24025dbc
 80231ec:	0802315d 	.word	0x0802315d

080231f0 <__sfp_lock_acquire>:
 80231f0:	4801      	ldr	r0, [pc, #4]	@ (80231f8 <__sfp_lock_acquire+0x8>)
 80231f2:	f000 ba08 	b.w	8023606 <__retarget_lock_acquire_recursive>
 80231f6:	bf00      	nop
 80231f8:	24025efe 	.word	0x24025efe

080231fc <__sfp_lock_release>:
 80231fc:	4801      	ldr	r0, [pc, #4]	@ (8023204 <__sfp_lock_release+0x8>)
 80231fe:	f000 ba03 	b.w	8023608 <__retarget_lock_release_recursive>
 8023202:	bf00      	nop
 8023204:	24025efe 	.word	0x24025efe

08023208 <__sinit>:
 8023208:	b510      	push	{r4, lr}
 802320a:	4604      	mov	r4, r0
 802320c:	f7ff fff0 	bl	80231f0 <__sfp_lock_acquire>
 8023210:	6a23      	ldr	r3, [r4, #32]
 8023212:	b11b      	cbz	r3, 802321c <__sinit+0x14>
 8023214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023218:	f7ff bff0 	b.w	80231fc <__sfp_lock_release>
 802321c:	4b04      	ldr	r3, [pc, #16]	@ (8023230 <__sinit+0x28>)
 802321e:	6223      	str	r3, [r4, #32]
 8023220:	4b04      	ldr	r3, [pc, #16]	@ (8023234 <__sinit+0x2c>)
 8023222:	681b      	ldr	r3, [r3, #0]
 8023224:	2b00      	cmp	r3, #0
 8023226:	d1f5      	bne.n	8023214 <__sinit+0xc>
 8023228:	f7ff ffc4 	bl	80231b4 <global_stdio_init.part.0>
 802322c:	e7f2      	b.n	8023214 <__sinit+0xc>
 802322e:	bf00      	nop
 8023230:	08023175 	.word	0x08023175
 8023234:	24025ef4 	.word	0x24025ef4

08023238 <fiprintf>:
 8023238:	b40e      	push	{r1, r2, r3}
 802323a:	b503      	push	{r0, r1, lr}
 802323c:	4601      	mov	r1, r0
 802323e:	ab03      	add	r3, sp, #12
 8023240:	4805      	ldr	r0, [pc, #20]	@ (8023258 <fiprintf+0x20>)
 8023242:	f853 2b04 	ldr.w	r2, [r3], #4
 8023246:	6800      	ldr	r0, [r0, #0]
 8023248:	9301      	str	r3, [sp, #4]
 802324a:	f000 fabd 	bl	80237c8 <_vfiprintf_r>
 802324e:	b002      	add	sp, #8
 8023250:	f85d eb04 	ldr.w	lr, [sp], #4
 8023254:	b003      	add	sp, #12
 8023256:	4770      	bx	lr
 8023258:	240000e8 	.word	0x240000e8

0802325c <_fwalk_sglue>:
 802325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023260:	4607      	mov	r7, r0
 8023262:	4688      	mov	r8, r1
 8023264:	4614      	mov	r4, r2
 8023266:	2600      	movs	r6, #0
 8023268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802326c:	f1b9 0901 	subs.w	r9, r9, #1
 8023270:	d505      	bpl.n	802327e <_fwalk_sglue+0x22>
 8023272:	6824      	ldr	r4, [r4, #0]
 8023274:	2c00      	cmp	r4, #0
 8023276:	d1f7      	bne.n	8023268 <_fwalk_sglue+0xc>
 8023278:	4630      	mov	r0, r6
 802327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802327e:	89ab      	ldrh	r3, [r5, #12]
 8023280:	2b01      	cmp	r3, #1
 8023282:	d907      	bls.n	8023294 <_fwalk_sglue+0x38>
 8023284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023288:	3301      	adds	r3, #1
 802328a:	d003      	beq.n	8023294 <_fwalk_sglue+0x38>
 802328c:	4629      	mov	r1, r5
 802328e:	4638      	mov	r0, r7
 8023290:	47c0      	blx	r8
 8023292:	4306      	orrs	r6, r0
 8023294:	3568      	adds	r5, #104	@ 0x68
 8023296:	e7e9      	b.n	802326c <_fwalk_sglue+0x10>

08023298 <__sread>:
 8023298:	b510      	push	{r4, lr}
 802329a:	460c      	mov	r4, r1
 802329c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232a0:	f000 f93e 	bl	8023520 <_read_r>
 80232a4:	2800      	cmp	r0, #0
 80232a6:	bfab      	itete	ge
 80232a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80232aa:	89a3      	ldrhlt	r3, [r4, #12]
 80232ac:	181b      	addge	r3, r3, r0
 80232ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80232b2:	bfac      	ite	ge
 80232b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80232b6:	81a3      	strhlt	r3, [r4, #12]
 80232b8:	bd10      	pop	{r4, pc}

080232ba <__swrite>:
 80232ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80232be:	461f      	mov	r7, r3
 80232c0:	898b      	ldrh	r3, [r1, #12]
 80232c2:	05db      	lsls	r3, r3, #23
 80232c4:	4605      	mov	r5, r0
 80232c6:	460c      	mov	r4, r1
 80232c8:	4616      	mov	r6, r2
 80232ca:	d505      	bpl.n	80232d8 <__swrite+0x1e>
 80232cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232d0:	2302      	movs	r3, #2
 80232d2:	2200      	movs	r2, #0
 80232d4:	f000 f912 	bl	80234fc <_lseek_r>
 80232d8:	89a3      	ldrh	r3, [r4, #12]
 80232da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80232e2:	81a3      	strh	r3, [r4, #12]
 80232e4:	4632      	mov	r2, r6
 80232e6:	463b      	mov	r3, r7
 80232e8:	4628      	mov	r0, r5
 80232ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80232ee:	f000 b94d 	b.w	802358c <_write_r>

080232f2 <__sseek>:
 80232f2:	b510      	push	{r4, lr}
 80232f4:	460c      	mov	r4, r1
 80232f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232fa:	f000 f8ff 	bl	80234fc <_lseek_r>
 80232fe:	1c43      	adds	r3, r0, #1
 8023300:	89a3      	ldrh	r3, [r4, #12]
 8023302:	bf15      	itete	ne
 8023304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802330a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802330e:	81a3      	strheq	r3, [r4, #12]
 8023310:	bf18      	it	ne
 8023312:	81a3      	strhne	r3, [r4, #12]
 8023314:	bd10      	pop	{r4, pc}

08023316 <__sclose>:
 8023316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802331a:	f000 b8df 	b.w	80234dc <_close_r>

0802331e <__swbuf_r>:
 802331e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023320:	460e      	mov	r6, r1
 8023322:	4614      	mov	r4, r2
 8023324:	4605      	mov	r5, r0
 8023326:	b118      	cbz	r0, 8023330 <__swbuf_r+0x12>
 8023328:	6a03      	ldr	r3, [r0, #32]
 802332a:	b90b      	cbnz	r3, 8023330 <__swbuf_r+0x12>
 802332c:	f7ff ff6c 	bl	8023208 <__sinit>
 8023330:	69a3      	ldr	r3, [r4, #24]
 8023332:	60a3      	str	r3, [r4, #8]
 8023334:	89a3      	ldrh	r3, [r4, #12]
 8023336:	071a      	lsls	r2, r3, #28
 8023338:	d501      	bpl.n	802333e <__swbuf_r+0x20>
 802333a:	6923      	ldr	r3, [r4, #16]
 802333c:	b943      	cbnz	r3, 8023350 <__swbuf_r+0x32>
 802333e:	4621      	mov	r1, r4
 8023340:	4628      	mov	r0, r5
 8023342:	f000 f82b 	bl	802339c <__swsetup_r>
 8023346:	b118      	cbz	r0, 8023350 <__swbuf_r+0x32>
 8023348:	f04f 37ff 	mov.w	r7, #4294967295
 802334c:	4638      	mov	r0, r7
 802334e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023350:	6823      	ldr	r3, [r4, #0]
 8023352:	6922      	ldr	r2, [r4, #16]
 8023354:	1a98      	subs	r0, r3, r2
 8023356:	6963      	ldr	r3, [r4, #20]
 8023358:	b2f6      	uxtb	r6, r6
 802335a:	4283      	cmp	r3, r0
 802335c:	4637      	mov	r7, r6
 802335e:	dc05      	bgt.n	802336c <__swbuf_r+0x4e>
 8023360:	4621      	mov	r1, r4
 8023362:	4628      	mov	r0, r5
 8023364:	f000 fd58 	bl	8023e18 <_fflush_r>
 8023368:	2800      	cmp	r0, #0
 802336a:	d1ed      	bne.n	8023348 <__swbuf_r+0x2a>
 802336c:	68a3      	ldr	r3, [r4, #8]
 802336e:	3b01      	subs	r3, #1
 8023370:	60a3      	str	r3, [r4, #8]
 8023372:	6823      	ldr	r3, [r4, #0]
 8023374:	1c5a      	adds	r2, r3, #1
 8023376:	6022      	str	r2, [r4, #0]
 8023378:	701e      	strb	r6, [r3, #0]
 802337a:	6962      	ldr	r2, [r4, #20]
 802337c:	1c43      	adds	r3, r0, #1
 802337e:	429a      	cmp	r2, r3
 8023380:	d004      	beq.n	802338c <__swbuf_r+0x6e>
 8023382:	89a3      	ldrh	r3, [r4, #12]
 8023384:	07db      	lsls	r3, r3, #31
 8023386:	d5e1      	bpl.n	802334c <__swbuf_r+0x2e>
 8023388:	2e0a      	cmp	r6, #10
 802338a:	d1df      	bne.n	802334c <__swbuf_r+0x2e>
 802338c:	4621      	mov	r1, r4
 802338e:	4628      	mov	r0, r5
 8023390:	f000 fd42 	bl	8023e18 <_fflush_r>
 8023394:	2800      	cmp	r0, #0
 8023396:	d0d9      	beq.n	802334c <__swbuf_r+0x2e>
 8023398:	e7d6      	b.n	8023348 <__swbuf_r+0x2a>
	...

0802339c <__swsetup_r>:
 802339c:	b538      	push	{r3, r4, r5, lr}
 802339e:	4b29      	ldr	r3, [pc, #164]	@ (8023444 <__swsetup_r+0xa8>)
 80233a0:	4605      	mov	r5, r0
 80233a2:	6818      	ldr	r0, [r3, #0]
 80233a4:	460c      	mov	r4, r1
 80233a6:	b118      	cbz	r0, 80233b0 <__swsetup_r+0x14>
 80233a8:	6a03      	ldr	r3, [r0, #32]
 80233aa:	b90b      	cbnz	r3, 80233b0 <__swsetup_r+0x14>
 80233ac:	f7ff ff2c 	bl	8023208 <__sinit>
 80233b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80233b4:	0719      	lsls	r1, r3, #28
 80233b6:	d422      	bmi.n	80233fe <__swsetup_r+0x62>
 80233b8:	06da      	lsls	r2, r3, #27
 80233ba:	d407      	bmi.n	80233cc <__swsetup_r+0x30>
 80233bc:	2209      	movs	r2, #9
 80233be:	602a      	str	r2, [r5, #0]
 80233c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80233c4:	81a3      	strh	r3, [r4, #12]
 80233c6:	f04f 30ff 	mov.w	r0, #4294967295
 80233ca:	e033      	b.n	8023434 <__swsetup_r+0x98>
 80233cc:	0758      	lsls	r0, r3, #29
 80233ce:	d512      	bpl.n	80233f6 <__swsetup_r+0x5a>
 80233d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80233d2:	b141      	cbz	r1, 80233e6 <__swsetup_r+0x4a>
 80233d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80233d8:	4299      	cmp	r1, r3
 80233da:	d002      	beq.n	80233e2 <__swsetup_r+0x46>
 80233dc:	4628      	mov	r0, r5
 80233de:	f000 f97f 	bl	80236e0 <_free_r>
 80233e2:	2300      	movs	r3, #0
 80233e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80233e6:	89a3      	ldrh	r3, [r4, #12]
 80233e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80233ec:	81a3      	strh	r3, [r4, #12]
 80233ee:	2300      	movs	r3, #0
 80233f0:	6063      	str	r3, [r4, #4]
 80233f2:	6923      	ldr	r3, [r4, #16]
 80233f4:	6023      	str	r3, [r4, #0]
 80233f6:	89a3      	ldrh	r3, [r4, #12]
 80233f8:	f043 0308 	orr.w	r3, r3, #8
 80233fc:	81a3      	strh	r3, [r4, #12]
 80233fe:	6923      	ldr	r3, [r4, #16]
 8023400:	b94b      	cbnz	r3, 8023416 <__swsetup_r+0x7a>
 8023402:	89a3      	ldrh	r3, [r4, #12]
 8023404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802340c:	d003      	beq.n	8023416 <__swsetup_r+0x7a>
 802340e:	4621      	mov	r1, r4
 8023410:	4628      	mov	r0, r5
 8023412:	f000 fd4f 	bl	8023eb4 <__smakebuf_r>
 8023416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802341a:	f013 0201 	ands.w	r2, r3, #1
 802341e:	d00a      	beq.n	8023436 <__swsetup_r+0x9a>
 8023420:	2200      	movs	r2, #0
 8023422:	60a2      	str	r2, [r4, #8]
 8023424:	6962      	ldr	r2, [r4, #20]
 8023426:	4252      	negs	r2, r2
 8023428:	61a2      	str	r2, [r4, #24]
 802342a:	6922      	ldr	r2, [r4, #16]
 802342c:	b942      	cbnz	r2, 8023440 <__swsetup_r+0xa4>
 802342e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023432:	d1c5      	bne.n	80233c0 <__swsetup_r+0x24>
 8023434:	bd38      	pop	{r3, r4, r5, pc}
 8023436:	0799      	lsls	r1, r3, #30
 8023438:	bf58      	it	pl
 802343a:	6962      	ldrpl	r2, [r4, #20]
 802343c:	60a2      	str	r2, [r4, #8]
 802343e:	e7f4      	b.n	802342a <__swsetup_r+0x8e>
 8023440:	2000      	movs	r0, #0
 8023442:	e7f7      	b.n	8023434 <__swsetup_r+0x98>
 8023444:	240000e8 	.word	0x240000e8

08023448 <memset>:
 8023448:	4402      	add	r2, r0
 802344a:	4603      	mov	r3, r0
 802344c:	4293      	cmp	r3, r2
 802344e:	d100      	bne.n	8023452 <memset+0xa>
 8023450:	4770      	bx	lr
 8023452:	f803 1b01 	strb.w	r1, [r3], #1
 8023456:	e7f9      	b.n	802344c <memset+0x4>

08023458 <strncmp>:
 8023458:	b510      	push	{r4, lr}
 802345a:	b16a      	cbz	r2, 8023478 <strncmp+0x20>
 802345c:	3901      	subs	r1, #1
 802345e:	1884      	adds	r4, r0, r2
 8023460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023464:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023468:	429a      	cmp	r2, r3
 802346a:	d103      	bne.n	8023474 <strncmp+0x1c>
 802346c:	42a0      	cmp	r0, r4
 802346e:	d001      	beq.n	8023474 <strncmp+0x1c>
 8023470:	2a00      	cmp	r2, #0
 8023472:	d1f5      	bne.n	8023460 <strncmp+0x8>
 8023474:	1ad0      	subs	r0, r2, r3
 8023476:	bd10      	pop	{r4, pc}
 8023478:	4610      	mov	r0, r2
 802347a:	e7fc      	b.n	8023476 <strncmp+0x1e>

0802347c <_raise_r>:
 802347c:	291f      	cmp	r1, #31
 802347e:	b538      	push	{r3, r4, r5, lr}
 8023480:	4605      	mov	r5, r0
 8023482:	460c      	mov	r4, r1
 8023484:	d904      	bls.n	8023490 <_raise_r+0x14>
 8023486:	2316      	movs	r3, #22
 8023488:	6003      	str	r3, [r0, #0]
 802348a:	f04f 30ff 	mov.w	r0, #4294967295
 802348e:	bd38      	pop	{r3, r4, r5, pc}
 8023490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023492:	b112      	cbz	r2, 802349a <_raise_r+0x1e>
 8023494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023498:	b94b      	cbnz	r3, 80234ae <_raise_r+0x32>
 802349a:	4628      	mov	r0, r5
 802349c:	f000 f864 	bl	8023568 <_getpid_r>
 80234a0:	4622      	mov	r2, r4
 80234a2:	4601      	mov	r1, r0
 80234a4:	4628      	mov	r0, r5
 80234a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80234aa:	f000 b84b 	b.w	8023544 <_kill_r>
 80234ae:	2b01      	cmp	r3, #1
 80234b0:	d00a      	beq.n	80234c8 <_raise_r+0x4c>
 80234b2:	1c59      	adds	r1, r3, #1
 80234b4:	d103      	bne.n	80234be <_raise_r+0x42>
 80234b6:	2316      	movs	r3, #22
 80234b8:	6003      	str	r3, [r0, #0]
 80234ba:	2001      	movs	r0, #1
 80234bc:	e7e7      	b.n	802348e <_raise_r+0x12>
 80234be:	2100      	movs	r1, #0
 80234c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80234c4:	4620      	mov	r0, r4
 80234c6:	4798      	blx	r3
 80234c8:	2000      	movs	r0, #0
 80234ca:	e7e0      	b.n	802348e <_raise_r+0x12>

080234cc <raise>:
 80234cc:	4b02      	ldr	r3, [pc, #8]	@ (80234d8 <raise+0xc>)
 80234ce:	4601      	mov	r1, r0
 80234d0:	6818      	ldr	r0, [r3, #0]
 80234d2:	f7ff bfd3 	b.w	802347c <_raise_r>
 80234d6:	bf00      	nop
 80234d8:	240000e8 	.word	0x240000e8

080234dc <_close_r>:
 80234dc:	b538      	push	{r3, r4, r5, lr}
 80234de:	4d06      	ldr	r5, [pc, #24]	@ (80234f8 <_close_r+0x1c>)
 80234e0:	2300      	movs	r3, #0
 80234e2:	4604      	mov	r4, r0
 80234e4:	4608      	mov	r0, r1
 80234e6:	602b      	str	r3, [r5, #0]
 80234e8:	f7de fb8a 	bl	8001c00 <_close>
 80234ec:	1c43      	adds	r3, r0, #1
 80234ee:	d102      	bne.n	80234f6 <_close_r+0x1a>
 80234f0:	682b      	ldr	r3, [r5, #0]
 80234f2:	b103      	cbz	r3, 80234f6 <_close_r+0x1a>
 80234f4:	6023      	str	r3, [r4, #0]
 80234f6:	bd38      	pop	{r3, r4, r5, pc}
 80234f8:	24025ef8 	.word	0x24025ef8

080234fc <_lseek_r>:
 80234fc:	b538      	push	{r3, r4, r5, lr}
 80234fe:	4d07      	ldr	r5, [pc, #28]	@ (802351c <_lseek_r+0x20>)
 8023500:	4604      	mov	r4, r0
 8023502:	4608      	mov	r0, r1
 8023504:	4611      	mov	r1, r2
 8023506:	2200      	movs	r2, #0
 8023508:	602a      	str	r2, [r5, #0]
 802350a:	461a      	mov	r2, r3
 802350c:	f7de fb82 	bl	8001c14 <_lseek>
 8023510:	1c43      	adds	r3, r0, #1
 8023512:	d102      	bne.n	802351a <_lseek_r+0x1e>
 8023514:	682b      	ldr	r3, [r5, #0]
 8023516:	b103      	cbz	r3, 802351a <_lseek_r+0x1e>
 8023518:	6023      	str	r3, [r4, #0]
 802351a:	bd38      	pop	{r3, r4, r5, pc}
 802351c:	24025ef8 	.word	0x24025ef8

08023520 <_read_r>:
 8023520:	b538      	push	{r3, r4, r5, lr}
 8023522:	4d07      	ldr	r5, [pc, #28]	@ (8023540 <_read_r+0x20>)
 8023524:	4604      	mov	r4, r0
 8023526:	4608      	mov	r0, r1
 8023528:	4611      	mov	r1, r2
 802352a:	2200      	movs	r2, #0
 802352c:	602a      	str	r2, [r5, #0]
 802352e:	461a      	mov	r2, r3
 8023530:	f7de fb4a 	bl	8001bc8 <_read>
 8023534:	1c43      	adds	r3, r0, #1
 8023536:	d102      	bne.n	802353e <_read_r+0x1e>
 8023538:	682b      	ldr	r3, [r5, #0]
 802353a:	b103      	cbz	r3, 802353e <_read_r+0x1e>
 802353c:	6023      	str	r3, [r4, #0]
 802353e:	bd38      	pop	{r3, r4, r5, pc}
 8023540:	24025ef8 	.word	0x24025ef8

08023544 <_kill_r>:
 8023544:	b538      	push	{r3, r4, r5, lr}
 8023546:	4d07      	ldr	r5, [pc, #28]	@ (8023564 <_kill_r+0x20>)
 8023548:	2300      	movs	r3, #0
 802354a:	4604      	mov	r4, r0
 802354c:	4608      	mov	r0, r1
 802354e:	4611      	mov	r1, r2
 8023550:	602b      	str	r3, [r5, #0]
 8023552:	f7de fb2b 	bl	8001bac <_kill>
 8023556:	1c43      	adds	r3, r0, #1
 8023558:	d102      	bne.n	8023560 <_kill_r+0x1c>
 802355a:	682b      	ldr	r3, [r5, #0]
 802355c:	b103      	cbz	r3, 8023560 <_kill_r+0x1c>
 802355e:	6023      	str	r3, [r4, #0]
 8023560:	bd38      	pop	{r3, r4, r5, pc}
 8023562:	bf00      	nop
 8023564:	24025ef8 	.word	0x24025ef8

08023568 <_getpid_r>:
 8023568:	f7de bb1e 	b.w	8001ba8 <_getpid>

0802356c <_sbrk_r>:
 802356c:	b538      	push	{r3, r4, r5, lr}
 802356e:	4d06      	ldr	r5, [pc, #24]	@ (8023588 <_sbrk_r+0x1c>)
 8023570:	2300      	movs	r3, #0
 8023572:	4604      	mov	r4, r0
 8023574:	4608      	mov	r0, r1
 8023576:	602b      	str	r3, [r5, #0]
 8023578:	f7de fb4e 	bl	8001c18 <_sbrk>
 802357c:	1c43      	adds	r3, r0, #1
 802357e:	d102      	bne.n	8023586 <_sbrk_r+0x1a>
 8023580:	682b      	ldr	r3, [r5, #0]
 8023582:	b103      	cbz	r3, 8023586 <_sbrk_r+0x1a>
 8023584:	6023      	str	r3, [r4, #0]
 8023586:	bd38      	pop	{r3, r4, r5, pc}
 8023588:	24025ef8 	.word	0x24025ef8

0802358c <_write_r>:
 802358c:	b538      	push	{r3, r4, r5, lr}
 802358e:	4d07      	ldr	r5, [pc, #28]	@ (80235ac <_write_r+0x20>)
 8023590:	4604      	mov	r4, r0
 8023592:	4608      	mov	r0, r1
 8023594:	4611      	mov	r1, r2
 8023596:	2200      	movs	r2, #0
 8023598:	602a      	str	r2, [r5, #0]
 802359a:	461a      	mov	r2, r3
 802359c:	f7de fb22 	bl	8001be4 <_write>
 80235a0:	1c43      	adds	r3, r0, #1
 80235a2:	d102      	bne.n	80235aa <_write_r+0x1e>
 80235a4:	682b      	ldr	r3, [r5, #0]
 80235a6:	b103      	cbz	r3, 80235aa <_write_r+0x1e>
 80235a8:	6023      	str	r3, [r4, #0]
 80235aa:	bd38      	pop	{r3, r4, r5, pc}
 80235ac:	24025ef8 	.word	0x24025ef8

080235b0 <__errno>:
 80235b0:	4b01      	ldr	r3, [pc, #4]	@ (80235b8 <__errno+0x8>)
 80235b2:	6818      	ldr	r0, [r3, #0]
 80235b4:	4770      	bx	lr
 80235b6:	bf00      	nop
 80235b8:	240000e8 	.word	0x240000e8

080235bc <__libc_init_array>:
 80235bc:	b570      	push	{r4, r5, r6, lr}
 80235be:	4d0d      	ldr	r5, [pc, #52]	@ (80235f4 <__libc_init_array+0x38>)
 80235c0:	4c0d      	ldr	r4, [pc, #52]	@ (80235f8 <__libc_init_array+0x3c>)
 80235c2:	1b64      	subs	r4, r4, r5
 80235c4:	10a4      	asrs	r4, r4, #2
 80235c6:	2600      	movs	r6, #0
 80235c8:	42a6      	cmp	r6, r4
 80235ca:	d109      	bne.n	80235e0 <__libc_init_array+0x24>
 80235cc:	4d0b      	ldr	r5, [pc, #44]	@ (80235fc <__libc_init_array+0x40>)
 80235ce:	4c0c      	ldr	r4, [pc, #48]	@ (8023600 <__libc_init_array+0x44>)
 80235d0:	f000 fcce 	bl	8023f70 <_init>
 80235d4:	1b64      	subs	r4, r4, r5
 80235d6:	10a4      	asrs	r4, r4, #2
 80235d8:	2600      	movs	r6, #0
 80235da:	42a6      	cmp	r6, r4
 80235dc:	d105      	bne.n	80235ea <__libc_init_array+0x2e>
 80235de:	bd70      	pop	{r4, r5, r6, pc}
 80235e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80235e4:	4798      	blx	r3
 80235e6:	3601      	adds	r6, #1
 80235e8:	e7ee      	b.n	80235c8 <__libc_init_array+0xc>
 80235ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80235ee:	4798      	blx	r3
 80235f0:	3601      	adds	r6, #1
 80235f2:	e7f2      	b.n	80235da <__libc_init_array+0x1e>
 80235f4:	08027bdc 	.word	0x08027bdc
 80235f8:	08027bdc 	.word	0x08027bdc
 80235fc:	08027bdc 	.word	0x08027bdc
 8023600:	08027bf8 	.word	0x08027bf8

08023604 <__retarget_lock_init_recursive>:
 8023604:	4770      	bx	lr

08023606 <__retarget_lock_acquire_recursive>:
 8023606:	4770      	bx	lr

08023608 <__retarget_lock_release_recursive>:
 8023608:	4770      	bx	lr

0802360a <memcpy>:
 802360a:	440a      	add	r2, r1
 802360c:	4291      	cmp	r1, r2
 802360e:	f100 33ff 	add.w	r3, r0, #4294967295
 8023612:	d100      	bne.n	8023616 <memcpy+0xc>
 8023614:	4770      	bx	lr
 8023616:	b510      	push	{r4, lr}
 8023618:	f811 4b01 	ldrb.w	r4, [r1], #1
 802361c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023620:	4291      	cmp	r1, r2
 8023622:	d1f9      	bne.n	8023618 <memcpy+0xe>
 8023624:	bd10      	pop	{r4, pc}
	...

08023628 <__register_exitproc>:
 8023628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802362c:	4d27      	ldr	r5, [pc, #156]	@ (80236cc <__register_exitproc+0xa4>)
 802362e:	4607      	mov	r7, r0
 8023630:	6828      	ldr	r0, [r5, #0]
 8023632:	4691      	mov	r9, r2
 8023634:	460e      	mov	r6, r1
 8023636:	4698      	mov	r8, r3
 8023638:	f7ff ffe5 	bl	8023606 <__retarget_lock_acquire_recursive>
 802363c:	4a24      	ldr	r2, [pc, #144]	@ (80236d0 <__register_exitproc+0xa8>)
 802363e:	6814      	ldr	r4, [r2, #0]
 8023640:	b93c      	cbnz	r4, 8023652 <__register_exitproc+0x2a>
 8023642:	4b24      	ldr	r3, [pc, #144]	@ (80236d4 <__register_exitproc+0xac>)
 8023644:	6013      	str	r3, [r2, #0]
 8023646:	4a24      	ldr	r2, [pc, #144]	@ (80236d8 <__register_exitproc+0xb0>)
 8023648:	b112      	cbz	r2, 8023650 <__register_exitproc+0x28>
 802364a:	6812      	ldr	r2, [r2, #0]
 802364c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8023650:	4c20      	ldr	r4, [pc, #128]	@ (80236d4 <__register_exitproc+0xac>)
 8023652:	6863      	ldr	r3, [r4, #4]
 8023654:	2b1f      	cmp	r3, #31
 8023656:	dd06      	ble.n	8023666 <__register_exitproc+0x3e>
 8023658:	6828      	ldr	r0, [r5, #0]
 802365a:	f7ff ffd5 	bl	8023608 <__retarget_lock_release_recursive>
 802365e:	f04f 30ff 	mov.w	r0, #4294967295
 8023662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023666:	b32f      	cbz	r7, 80236b4 <__register_exitproc+0x8c>
 8023668:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802366c:	b968      	cbnz	r0, 802368a <__register_exitproc+0x62>
 802366e:	4b1b      	ldr	r3, [pc, #108]	@ (80236dc <__register_exitproc+0xb4>)
 8023670:	2b00      	cmp	r3, #0
 8023672:	d0f1      	beq.n	8023658 <__register_exitproc+0x30>
 8023674:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8023678:	f7ff fc6e 	bl	8022f58 <malloc>
 802367c:	2800      	cmp	r0, #0
 802367e:	d0eb      	beq.n	8023658 <__register_exitproc+0x30>
 8023680:	2300      	movs	r3, #0
 8023682:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8023686:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802368a:	6863      	ldr	r3, [r4, #4]
 802368c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8023690:	2201      	movs	r2, #1
 8023692:	409a      	lsls	r2, r3
 8023694:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8023698:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802369c:	4313      	orrs	r3, r2
 802369e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80236a2:	2f02      	cmp	r7, #2
 80236a4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80236a8:	bf02      	ittt	eq
 80236aa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80236ae:	4313      	orreq	r3, r2
 80236b0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80236b4:	6863      	ldr	r3, [r4, #4]
 80236b6:	6828      	ldr	r0, [r5, #0]
 80236b8:	1c5a      	adds	r2, r3, #1
 80236ba:	3302      	adds	r3, #2
 80236bc:	6062      	str	r2, [r4, #4]
 80236be:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80236c2:	f7ff ffa1 	bl	8023608 <__retarget_lock_release_recursive>
 80236c6:	2000      	movs	r0, #0
 80236c8:	e7cb      	b.n	8023662 <__register_exitproc+0x3a>
 80236ca:	bf00      	nop
 80236cc:	24000138 	.word	0x24000138
 80236d0:	24025f8c 	.word	0x24025f8c
 80236d4:	24025f00 	.word	0x24025f00
 80236d8:	08027428 	.word	0x08027428
 80236dc:	08022f59 	.word	0x08022f59

080236e0 <_free_r>:
 80236e0:	b538      	push	{r3, r4, r5, lr}
 80236e2:	4605      	mov	r5, r0
 80236e4:	2900      	cmp	r1, #0
 80236e6:	d041      	beq.n	802376c <_free_r+0x8c>
 80236e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236ec:	1f0c      	subs	r4, r1, #4
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	bfb8      	it	lt
 80236f2:	18e4      	addlt	r4, r4, r3
 80236f4:	f7ff fce2 	bl	80230bc <__malloc_lock>
 80236f8:	4a1d      	ldr	r2, [pc, #116]	@ (8023770 <_free_r+0x90>)
 80236fa:	6813      	ldr	r3, [r2, #0]
 80236fc:	b933      	cbnz	r3, 802370c <_free_r+0x2c>
 80236fe:	6063      	str	r3, [r4, #4]
 8023700:	6014      	str	r4, [r2, #0]
 8023702:	4628      	mov	r0, r5
 8023704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023708:	f7ff bcde 	b.w	80230c8 <__malloc_unlock>
 802370c:	42a3      	cmp	r3, r4
 802370e:	d908      	bls.n	8023722 <_free_r+0x42>
 8023710:	6820      	ldr	r0, [r4, #0]
 8023712:	1821      	adds	r1, r4, r0
 8023714:	428b      	cmp	r3, r1
 8023716:	bf01      	itttt	eq
 8023718:	6819      	ldreq	r1, [r3, #0]
 802371a:	685b      	ldreq	r3, [r3, #4]
 802371c:	1809      	addeq	r1, r1, r0
 802371e:	6021      	streq	r1, [r4, #0]
 8023720:	e7ed      	b.n	80236fe <_free_r+0x1e>
 8023722:	461a      	mov	r2, r3
 8023724:	685b      	ldr	r3, [r3, #4]
 8023726:	b10b      	cbz	r3, 802372c <_free_r+0x4c>
 8023728:	42a3      	cmp	r3, r4
 802372a:	d9fa      	bls.n	8023722 <_free_r+0x42>
 802372c:	6811      	ldr	r1, [r2, #0]
 802372e:	1850      	adds	r0, r2, r1
 8023730:	42a0      	cmp	r0, r4
 8023732:	d10b      	bne.n	802374c <_free_r+0x6c>
 8023734:	6820      	ldr	r0, [r4, #0]
 8023736:	4401      	add	r1, r0
 8023738:	1850      	adds	r0, r2, r1
 802373a:	4283      	cmp	r3, r0
 802373c:	6011      	str	r1, [r2, #0]
 802373e:	d1e0      	bne.n	8023702 <_free_r+0x22>
 8023740:	6818      	ldr	r0, [r3, #0]
 8023742:	685b      	ldr	r3, [r3, #4]
 8023744:	6053      	str	r3, [r2, #4]
 8023746:	4408      	add	r0, r1
 8023748:	6010      	str	r0, [r2, #0]
 802374a:	e7da      	b.n	8023702 <_free_r+0x22>
 802374c:	d902      	bls.n	8023754 <_free_r+0x74>
 802374e:	230c      	movs	r3, #12
 8023750:	602b      	str	r3, [r5, #0]
 8023752:	e7d6      	b.n	8023702 <_free_r+0x22>
 8023754:	6820      	ldr	r0, [r4, #0]
 8023756:	1821      	adds	r1, r4, r0
 8023758:	428b      	cmp	r3, r1
 802375a:	bf04      	itt	eq
 802375c:	6819      	ldreq	r1, [r3, #0]
 802375e:	685b      	ldreq	r3, [r3, #4]
 8023760:	6063      	str	r3, [r4, #4]
 8023762:	bf04      	itt	eq
 8023764:	1809      	addeq	r1, r1, r0
 8023766:	6021      	streq	r1, [r4, #0]
 8023768:	6054      	str	r4, [r2, #4]
 802376a:	e7ca      	b.n	8023702 <_free_r+0x22>
 802376c:	bd38      	pop	{r3, r4, r5, pc}
 802376e:	bf00      	nop
 8023770:	24025db8 	.word	0x24025db8

08023774 <__sfputc_r>:
 8023774:	6893      	ldr	r3, [r2, #8]
 8023776:	3b01      	subs	r3, #1
 8023778:	2b00      	cmp	r3, #0
 802377a:	b410      	push	{r4}
 802377c:	6093      	str	r3, [r2, #8]
 802377e:	da08      	bge.n	8023792 <__sfputc_r+0x1e>
 8023780:	6994      	ldr	r4, [r2, #24]
 8023782:	42a3      	cmp	r3, r4
 8023784:	db01      	blt.n	802378a <__sfputc_r+0x16>
 8023786:	290a      	cmp	r1, #10
 8023788:	d103      	bne.n	8023792 <__sfputc_r+0x1e>
 802378a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802378e:	f7ff bdc6 	b.w	802331e <__swbuf_r>
 8023792:	6813      	ldr	r3, [r2, #0]
 8023794:	1c58      	adds	r0, r3, #1
 8023796:	6010      	str	r0, [r2, #0]
 8023798:	7019      	strb	r1, [r3, #0]
 802379a:	4608      	mov	r0, r1
 802379c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237a0:	4770      	bx	lr

080237a2 <__sfputs_r>:
 80237a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237a4:	4606      	mov	r6, r0
 80237a6:	460f      	mov	r7, r1
 80237a8:	4614      	mov	r4, r2
 80237aa:	18d5      	adds	r5, r2, r3
 80237ac:	42ac      	cmp	r4, r5
 80237ae:	d101      	bne.n	80237b4 <__sfputs_r+0x12>
 80237b0:	2000      	movs	r0, #0
 80237b2:	e007      	b.n	80237c4 <__sfputs_r+0x22>
 80237b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237b8:	463a      	mov	r2, r7
 80237ba:	4630      	mov	r0, r6
 80237bc:	f7ff ffda 	bl	8023774 <__sfputc_r>
 80237c0:	1c43      	adds	r3, r0, #1
 80237c2:	d1f3      	bne.n	80237ac <__sfputs_r+0xa>
 80237c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080237c8 <_vfiprintf_r>:
 80237c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237cc:	460d      	mov	r5, r1
 80237ce:	b09d      	sub	sp, #116	@ 0x74
 80237d0:	4614      	mov	r4, r2
 80237d2:	4698      	mov	r8, r3
 80237d4:	4606      	mov	r6, r0
 80237d6:	b118      	cbz	r0, 80237e0 <_vfiprintf_r+0x18>
 80237d8:	6a03      	ldr	r3, [r0, #32]
 80237da:	b90b      	cbnz	r3, 80237e0 <_vfiprintf_r+0x18>
 80237dc:	f7ff fd14 	bl	8023208 <__sinit>
 80237e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80237e2:	07d9      	lsls	r1, r3, #31
 80237e4:	d405      	bmi.n	80237f2 <_vfiprintf_r+0x2a>
 80237e6:	89ab      	ldrh	r3, [r5, #12]
 80237e8:	059a      	lsls	r2, r3, #22
 80237ea:	d402      	bmi.n	80237f2 <_vfiprintf_r+0x2a>
 80237ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80237ee:	f7ff ff0a 	bl	8023606 <__retarget_lock_acquire_recursive>
 80237f2:	89ab      	ldrh	r3, [r5, #12]
 80237f4:	071b      	lsls	r3, r3, #28
 80237f6:	d501      	bpl.n	80237fc <_vfiprintf_r+0x34>
 80237f8:	692b      	ldr	r3, [r5, #16]
 80237fa:	b99b      	cbnz	r3, 8023824 <_vfiprintf_r+0x5c>
 80237fc:	4629      	mov	r1, r5
 80237fe:	4630      	mov	r0, r6
 8023800:	f7ff fdcc 	bl	802339c <__swsetup_r>
 8023804:	b170      	cbz	r0, 8023824 <_vfiprintf_r+0x5c>
 8023806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023808:	07dc      	lsls	r4, r3, #31
 802380a:	d504      	bpl.n	8023816 <_vfiprintf_r+0x4e>
 802380c:	f04f 30ff 	mov.w	r0, #4294967295
 8023810:	b01d      	add	sp, #116	@ 0x74
 8023812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023816:	89ab      	ldrh	r3, [r5, #12]
 8023818:	0598      	lsls	r0, r3, #22
 802381a:	d4f7      	bmi.n	802380c <_vfiprintf_r+0x44>
 802381c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802381e:	f7ff fef3 	bl	8023608 <__retarget_lock_release_recursive>
 8023822:	e7f3      	b.n	802380c <_vfiprintf_r+0x44>
 8023824:	2300      	movs	r3, #0
 8023826:	9309      	str	r3, [sp, #36]	@ 0x24
 8023828:	2320      	movs	r3, #32
 802382a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8023832:	2330      	movs	r3, #48	@ 0x30
 8023834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80239e4 <_vfiprintf_r+0x21c>
 8023838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802383c:	f04f 0901 	mov.w	r9, #1
 8023840:	4623      	mov	r3, r4
 8023842:	469a      	mov	sl, r3
 8023844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023848:	b10a      	cbz	r2, 802384e <_vfiprintf_r+0x86>
 802384a:	2a25      	cmp	r2, #37	@ 0x25
 802384c:	d1f9      	bne.n	8023842 <_vfiprintf_r+0x7a>
 802384e:	ebba 0b04 	subs.w	fp, sl, r4
 8023852:	d00b      	beq.n	802386c <_vfiprintf_r+0xa4>
 8023854:	465b      	mov	r3, fp
 8023856:	4622      	mov	r2, r4
 8023858:	4629      	mov	r1, r5
 802385a:	4630      	mov	r0, r6
 802385c:	f7ff ffa1 	bl	80237a2 <__sfputs_r>
 8023860:	3001      	adds	r0, #1
 8023862:	f000 80a7 	beq.w	80239b4 <_vfiprintf_r+0x1ec>
 8023866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023868:	445a      	add	r2, fp
 802386a:	9209      	str	r2, [sp, #36]	@ 0x24
 802386c:	f89a 3000 	ldrb.w	r3, [sl]
 8023870:	2b00      	cmp	r3, #0
 8023872:	f000 809f 	beq.w	80239b4 <_vfiprintf_r+0x1ec>
 8023876:	2300      	movs	r3, #0
 8023878:	f04f 32ff 	mov.w	r2, #4294967295
 802387c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023880:	f10a 0a01 	add.w	sl, sl, #1
 8023884:	9304      	str	r3, [sp, #16]
 8023886:	9307      	str	r3, [sp, #28]
 8023888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802388c:	931a      	str	r3, [sp, #104]	@ 0x68
 802388e:	4654      	mov	r4, sl
 8023890:	2205      	movs	r2, #5
 8023892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023896:	4853      	ldr	r0, [pc, #332]	@ (80239e4 <_vfiprintf_r+0x21c>)
 8023898:	f7dc fd22 	bl	80002e0 <memchr>
 802389c:	9a04      	ldr	r2, [sp, #16]
 802389e:	b9d8      	cbnz	r0, 80238d8 <_vfiprintf_r+0x110>
 80238a0:	06d1      	lsls	r1, r2, #27
 80238a2:	bf44      	itt	mi
 80238a4:	2320      	movmi	r3, #32
 80238a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80238aa:	0713      	lsls	r3, r2, #28
 80238ac:	bf44      	itt	mi
 80238ae:	232b      	movmi	r3, #43	@ 0x2b
 80238b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80238b4:	f89a 3000 	ldrb.w	r3, [sl]
 80238b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80238ba:	d015      	beq.n	80238e8 <_vfiprintf_r+0x120>
 80238bc:	9a07      	ldr	r2, [sp, #28]
 80238be:	4654      	mov	r4, sl
 80238c0:	2000      	movs	r0, #0
 80238c2:	f04f 0c0a 	mov.w	ip, #10
 80238c6:	4621      	mov	r1, r4
 80238c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80238cc:	3b30      	subs	r3, #48	@ 0x30
 80238ce:	2b09      	cmp	r3, #9
 80238d0:	d94b      	bls.n	802396a <_vfiprintf_r+0x1a2>
 80238d2:	b1b0      	cbz	r0, 8023902 <_vfiprintf_r+0x13a>
 80238d4:	9207      	str	r2, [sp, #28]
 80238d6:	e014      	b.n	8023902 <_vfiprintf_r+0x13a>
 80238d8:	eba0 0308 	sub.w	r3, r0, r8
 80238dc:	fa09 f303 	lsl.w	r3, r9, r3
 80238e0:	4313      	orrs	r3, r2
 80238e2:	9304      	str	r3, [sp, #16]
 80238e4:	46a2      	mov	sl, r4
 80238e6:	e7d2      	b.n	802388e <_vfiprintf_r+0xc6>
 80238e8:	9b03      	ldr	r3, [sp, #12]
 80238ea:	1d19      	adds	r1, r3, #4
 80238ec:	681b      	ldr	r3, [r3, #0]
 80238ee:	9103      	str	r1, [sp, #12]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	bfbb      	ittet	lt
 80238f4:	425b      	neglt	r3, r3
 80238f6:	f042 0202 	orrlt.w	r2, r2, #2
 80238fa:	9307      	strge	r3, [sp, #28]
 80238fc:	9307      	strlt	r3, [sp, #28]
 80238fe:	bfb8      	it	lt
 8023900:	9204      	strlt	r2, [sp, #16]
 8023902:	7823      	ldrb	r3, [r4, #0]
 8023904:	2b2e      	cmp	r3, #46	@ 0x2e
 8023906:	d10a      	bne.n	802391e <_vfiprintf_r+0x156>
 8023908:	7863      	ldrb	r3, [r4, #1]
 802390a:	2b2a      	cmp	r3, #42	@ 0x2a
 802390c:	d132      	bne.n	8023974 <_vfiprintf_r+0x1ac>
 802390e:	9b03      	ldr	r3, [sp, #12]
 8023910:	1d1a      	adds	r2, r3, #4
 8023912:	681b      	ldr	r3, [r3, #0]
 8023914:	9203      	str	r2, [sp, #12]
 8023916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802391a:	3402      	adds	r4, #2
 802391c:	9305      	str	r3, [sp, #20]
 802391e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80239f4 <_vfiprintf_r+0x22c>
 8023922:	7821      	ldrb	r1, [r4, #0]
 8023924:	2203      	movs	r2, #3
 8023926:	4650      	mov	r0, sl
 8023928:	f7dc fcda 	bl	80002e0 <memchr>
 802392c:	b138      	cbz	r0, 802393e <_vfiprintf_r+0x176>
 802392e:	9b04      	ldr	r3, [sp, #16]
 8023930:	eba0 000a 	sub.w	r0, r0, sl
 8023934:	2240      	movs	r2, #64	@ 0x40
 8023936:	4082      	lsls	r2, r0
 8023938:	4313      	orrs	r3, r2
 802393a:	3401      	adds	r4, #1
 802393c:	9304      	str	r3, [sp, #16]
 802393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023942:	4829      	ldr	r0, [pc, #164]	@ (80239e8 <_vfiprintf_r+0x220>)
 8023944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023948:	2206      	movs	r2, #6
 802394a:	f7dc fcc9 	bl	80002e0 <memchr>
 802394e:	2800      	cmp	r0, #0
 8023950:	d03f      	beq.n	80239d2 <_vfiprintf_r+0x20a>
 8023952:	4b26      	ldr	r3, [pc, #152]	@ (80239ec <_vfiprintf_r+0x224>)
 8023954:	bb1b      	cbnz	r3, 802399e <_vfiprintf_r+0x1d6>
 8023956:	9b03      	ldr	r3, [sp, #12]
 8023958:	3307      	adds	r3, #7
 802395a:	f023 0307 	bic.w	r3, r3, #7
 802395e:	3308      	adds	r3, #8
 8023960:	9303      	str	r3, [sp, #12]
 8023962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023964:	443b      	add	r3, r7
 8023966:	9309      	str	r3, [sp, #36]	@ 0x24
 8023968:	e76a      	b.n	8023840 <_vfiprintf_r+0x78>
 802396a:	fb0c 3202 	mla	r2, ip, r2, r3
 802396e:	460c      	mov	r4, r1
 8023970:	2001      	movs	r0, #1
 8023972:	e7a8      	b.n	80238c6 <_vfiprintf_r+0xfe>
 8023974:	2300      	movs	r3, #0
 8023976:	3401      	adds	r4, #1
 8023978:	9305      	str	r3, [sp, #20]
 802397a:	4619      	mov	r1, r3
 802397c:	f04f 0c0a 	mov.w	ip, #10
 8023980:	4620      	mov	r0, r4
 8023982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023986:	3a30      	subs	r2, #48	@ 0x30
 8023988:	2a09      	cmp	r2, #9
 802398a:	d903      	bls.n	8023994 <_vfiprintf_r+0x1cc>
 802398c:	2b00      	cmp	r3, #0
 802398e:	d0c6      	beq.n	802391e <_vfiprintf_r+0x156>
 8023990:	9105      	str	r1, [sp, #20]
 8023992:	e7c4      	b.n	802391e <_vfiprintf_r+0x156>
 8023994:	fb0c 2101 	mla	r1, ip, r1, r2
 8023998:	4604      	mov	r4, r0
 802399a:	2301      	movs	r3, #1
 802399c:	e7f0      	b.n	8023980 <_vfiprintf_r+0x1b8>
 802399e:	ab03      	add	r3, sp, #12
 80239a0:	9300      	str	r3, [sp, #0]
 80239a2:	462a      	mov	r2, r5
 80239a4:	4b12      	ldr	r3, [pc, #72]	@ (80239f0 <_vfiprintf_r+0x228>)
 80239a6:	a904      	add	r1, sp, #16
 80239a8:	4630      	mov	r0, r6
 80239aa:	f3af 8000 	nop.w
 80239ae:	4607      	mov	r7, r0
 80239b0:	1c78      	adds	r0, r7, #1
 80239b2:	d1d6      	bne.n	8023962 <_vfiprintf_r+0x19a>
 80239b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80239b6:	07d9      	lsls	r1, r3, #31
 80239b8:	d405      	bmi.n	80239c6 <_vfiprintf_r+0x1fe>
 80239ba:	89ab      	ldrh	r3, [r5, #12]
 80239bc:	059a      	lsls	r2, r3, #22
 80239be:	d402      	bmi.n	80239c6 <_vfiprintf_r+0x1fe>
 80239c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80239c2:	f7ff fe21 	bl	8023608 <__retarget_lock_release_recursive>
 80239c6:	89ab      	ldrh	r3, [r5, #12]
 80239c8:	065b      	lsls	r3, r3, #25
 80239ca:	f53f af1f 	bmi.w	802380c <_vfiprintf_r+0x44>
 80239ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80239d0:	e71e      	b.n	8023810 <_vfiprintf_r+0x48>
 80239d2:	ab03      	add	r3, sp, #12
 80239d4:	9300      	str	r3, [sp, #0]
 80239d6:	462a      	mov	r2, r5
 80239d8:	4b05      	ldr	r3, [pc, #20]	@ (80239f0 <_vfiprintf_r+0x228>)
 80239da:	a904      	add	r1, sp, #16
 80239dc:	4630      	mov	r0, r6
 80239de:	f000 f879 	bl	8023ad4 <_printf_i>
 80239e2:	e7e4      	b.n	80239ae <_vfiprintf_r+0x1e6>
 80239e4:	08025eb3 	.word	0x08025eb3
 80239e8:	08025ebd 	.word	0x08025ebd
 80239ec:	00000000 	.word	0x00000000
 80239f0:	080237a3 	.word	0x080237a3
 80239f4:	08025eb9 	.word	0x08025eb9

080239f8 <_printf_common>:
 80239f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80239fc:	4616      	mov	r6, r2
 80239fe:	4698      	mov	r8, r3
 8023a00:	688a      	ldr	r2, [r1, #8]
 8023a02:	690b      	ldr	r3, [r1, #16]
 8023a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023a08:	4293      	cmp	r3, r2
 8023a0a:	bfb8      	it	lt
 8023a0c:	4613      	movlt	r3, r2
 8023a0e:	6033      	str	r3, [r6, #0]
 8023a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023a14:	4607      	mov	r7, r0
 8023a16:	460c      	mov	r4, r1
 8023a18:	b10a      	cbz	r2, 8023a1e <_printf_common+0x26>
 8023a1a:	3301      	adds	r3, #1
 8023a1c:	6033      	str	r3, [r6, #0]
 8023a1e:	6823      	ldr	r3, [r4, #0]
 8023a20:	0699      	lsls	r1, r3, #26
 8023a22:	bf42      	ittt	mi
 8023a24:	6833      	ldrmi	r3, [r6, #0]
 8023a26:	3302      	addmi	r3, #2
 8023a28:	6033      	strmi	r3, [r6, #0]
 8023a2a:	6825      	ldr	r5, [r4, #0]
 8023a2c:	f015 0506 	ands.w	r5, r5, #6
 8023a30:	d106      	bne.n	8023a40 <_printf_common+0x48>
 8023a32:	f104 0a19 	add.w	sl, r4, #25
 8023a36:	68e3      	ldr	r3, [r4, #12]
 8023a38:	6832      	ldr	r2, [r6, #0]
 8023a3a:	1a9b      	subs	r3, r3, r2
 8023a3c:	42ab      	cmp	r3, r5
 8023a3e:	dc26      	bgt.n	8023a8e <_printf_common+0x96>
 8023a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023a44:	6822      	ldr	r2, [r4, #0]
 8023a46:	3b00      	subs	r3, #0
 8023a48:	bf18      	it	ne
 8023a4a:	2301      	movne	r3, #1
 8023a4c:	0692      	lsls	r2, r2, #26
 8023a4e:	d42b      	bmi.n	8023aa8 <_printf_common+0xb0>
 8023a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023a54:	4641      	mov	r1, r8
 8023a56:	4638      	mov	r0, r7
 8023a58:	47c8      	blx	r9
 8023a5a:	3001      	adds	r0, #1
 8023a5c:	d01e      	beq.n	8023a9c <_printf_common+0xa4>
 8023a5e:	6823      	ldr	r3, [r4, #0]
 8023a60:	6922      	ldr	r2, [r4, #16]
 8023a62:	f003 0306 	and.w	r3, r3, #6
 8023a66:	2b04      	cmp	r3, #4
 8023a68:	bf02      	ittt	eq
 8023a6a:	68e5      	ldreq	r5, [r4, #12]
 8023a6c:	6833      	ldreq	r3, [r6, #0]
 8023a6e:	1aed      	subeq	r5, r5, r3
 8023a70:	68a3      	ldr	r3, [r4, #8]
 8023a72:	bf0c      	ite	eq
 8023a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023a78:	2500      	movne	r5, #0
 8023a7a:	4293      	cmp	r3, r2
 8023a7c:	bfc4      	itt	gt
 8023a7e:	1a9b      	subgt	r3, r3, r2
 8023a80:	18ed      	addgt	r5, r5, r3
 8023a82:	2600      	movs	r6, #0
 8023a84:	341a      	adds	r4, #26
 8023a86:	42b5      	cmp	r5, r6
 8023a88:	d11a      	bne.n	8023ac0 <_printf_common+0xc8>
 8023a8a:	2000      	movs	r0, #0
 8023a8c:	e008      	b.n	8023aa0 <_printf_common+0xa8>
 8023a8e:	2301      	movs	r3, #1
 8023a90:	4652      	mov	r2, sl
 8023a92:	4641      	mov	r1, r8
 8023a94:	4638      	mov	r0, r7
 8023a96:	47c8      	blx	r9
 8023a98:	3001      	adds	r0, #1
 8023a9a:	d103      	bne.n	8023aa4 <_printf_common+0xac>
 8023a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8023aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023aa4:	3501      	adds	r5, #1
 8023aa6:	e7c6      	b.n	8023a36 <_printf_common+0x3e>
 8023aa8:	18e1      	adds	r1, r4, r3
 8023aaa:	1c5a      	adds	r2, r3, #1
 8023aac:	2030      	movs	r0, #48	@ 0x30
 8023aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023ab2:	4422      	add	r2, r4
 8023ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023abc:	3302      	adds	r3, #2
 8023abe:	e7c7      	b.n	8023a50 <_printf_common+0x58>
 8023ac0:	2301      	movs	r3, #1
 8023ac2:	4622      	mov	r2, r4
 8023ac4:	4641      	mov	r1, r8
 8023ac6:	4638      	mov	r0, r7
 8023ac8:	47c8      	blx	r9
 8023aca:	3001      	adds	r0, #1
 8023acc:	d0e6      	beq.n	8023a9c <_printf_common+0xa4>
 8023ace:	3601      	adds	r6, #1
 8023ad0:	e7d9      	b.n	8023a86 <_printf_common+0x8e>
	...

08023ad4 <_printf_i>:
 8023ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023ad8:	7e0f      	ldrb	r7, [r1, #24]
 8023ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023adc:	2f78      	cmp	r7, #120	@ 0x78
 8023ade:	4691      	mov	r9, r2
 8023ae0:	4680      	mov	r8, r0
 8023ae2:	460c      	mov	r4, r1
 8023ae4:	469a      	mov	sl, r3
 8023ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023aea:	d807      	bhi.n	8023afc <_printf_i+0x28>
 8023aec:	2f62      	cmp	r7, #98	@ 0x62
 8023aee:	d80a      	bhi.n	8023b06 <_printf_i+0x32>
 8023af0:	2f00      	cmp	r7, #0
 8023af2:	f000 80d1 	beq.w	8023c98 <_printf_i+0x1c4>
 8023af6:	2f58      	cmp	r7, #88	@ 0x58
 8023af8:	f000 80b8 	beq.w	8023c6c <_printf_i+0x198>
 8023afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023b04:	e03a      	b.n	8023b7c <_printf_i+0xa8>
 8023b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023b0a:	2b15      	cmp	r3, #21
 8023b0c:	d8f6      	bhi.n	8023afc <_printf_i+0x28>
 8023b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8023b14 <_printf_i+0x40>)
 8023b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023b14:	08023b6d 	.word	0x08023b6d
 8023b18:	08023b81 	.word	0x08023b81
 8023b1c:	08023afd 	.word	0x08023afd
 8023b20:	08023afd 	.word	0x08023afd
 8023b24:	08023afd 	.word	0x08023afd
 8023b28:	08023afd 	.word	0x08023afd
 8023b2c:	08023b81 	.word	0x08023b81
 8023b30:	08023afd 	.word	0x08023afd
 8023b34:	08023afd 	.word	0x08023afd
 8023b38:	08023afd 	.word	0x08023afd
 8023b3c:	08023afd 	.word	0x08023afd
 8023b40:	08023c7f 	.word	0x08023c7f
 8023b44:	08023bab 	.word	0x08023bab
 8023b48:	08023c39 	.word	0x08023c39
 8023b4c:	08023afd 	.word	0x08023afd
 8023b50:	08023afd 	.word	0x08023afd
 8023b54:	08023ca1 	.word	0x08023ca1
 8023b58:	08023afd 	.word	0x08023afd
 8023b5c:	08023bab 	.word	0x08023bab
 8023b60:	08023afd 	.word	0x08023afd
 8023b64:	08023afd 	.word	0x08023afd
 8023b68:	08023c41 	.word	0x08023c41
 8023b6c:	6833      	ldr	r3, [r6, #0]
 8023b6e:	1d1a      	adds	r2, r3, #4
 8023b70:	681b      	ldr	r3, [r3, #0]
 8023b72:	6032      	str	r2, [r6, #0]
 8023b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023b7c:	2301      	movs	r3, #1
 8023b7e:	e09c      	b.n	8023cba <_printf_i+0x1e6>
 8023b80:	6833      	ldr	r3, [r6, #0]
 8023b82:	6820      	ldr	r0, [r4, #0]
 8023b84:	1d19      	adds	r1, r3, #4
 8023b86:	6031      	str	r1, [r6, #0]
 8023b88:	0606      	lsls	r6, r0, #24
 8023b8a:	d501      	bpl.n	8023b90 <_printf_i+0xbc>
 8023b8c:	681d      	ldr	r5, [r3, #0]
 8023b8e:	e003      	b.n	8023b98 <_printf_i+0xc4>
 8023b90:	0645      	lsls	r5, r0, #25
 8023b92:	d5fb      	bpl.n	8023b8c <_printf_i+0xb8>
 8023b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023b98:	2d00      	cmp	r5, #0
 8023b9a:	da03      	bge.n	8023ba4 <_printf_i+0xd0>
 8023b9c:	232d      	movs	r3, #45	@ 0x2d
 8023b9e:	426d      	negs	r5, r5
 8023ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023ba4:	4858      	ldr	r0, [pc, #352]	@ (8023d08 <_printf_i+0x234>)
 8023ba6:	230a      	movs	r3, #10
 8023ba8:	e011      	b.n	8023bce <_printf_i+0xfa>
 8023baa:	6821      	ldr	r1, [r4, #0]
 8023bac:	6833      	ldr	r3, [r6, #0]
 8023bae:	0608      	lsls	r0, r1, #24
 8023bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8023bb4:	d402      	bmi.n	8023bbc <_printf_i+0xe8>
 8023bb6:	0649      	lsls	r1, r1, #25
 8023bb8:	bf48      	it	mi
 8023bba:	b2ad      	uxthmi	r5, r5
 8023bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8023bbe:	4852      	ldr	r0, [pc, #328]	@ (8023d08 <_printf_i+0x234>)
 8023bc0:	6033      	str	r3, [r6, #0]
 8023bc2:	bf14      	ite	ne
 8023bc4:	230a      	movne	r3, #10
 8023bc6:	2308      	moveq	r3, #8
 8023bc8:	2100      	movs	r1, #0
 8023bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023bce:	6866      	ldr	r6, [r4, #4]
 8023bd0:	60a6      	str	r6, [r4, #8]
 8023bd2:	2e00      	cmp	r6, #0
 8023bd4:	db05      	blt.n	8023be2 <_printf_i+0x10e>
 8023bd6:	6821      	ldr	r1, [r4, #0]
 8023bd8:	432e      	orrs	r6, r5
 8023bda:	f021 0104 	bic.w	r1, r1, #4
 8023bde:	6021      	str	r1, [r4, #0]
 8023be0:	d04b      	beq.n	8023c7a <_printf_i+0x1a6>
 8023be2:	4616      	mov	r6, r2
 8023be4:	fbb5 f1f3 	udiv	r1, r5, r3
 8023be8:	fb03 5711 	mls	r7, r3, r1, r5
 8023bec:	5dc7      	ldrb	r7, [r0, r7]
 8023bee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023bf2:	462f      	mov	r7, r5
 8023bf4:	42bb      	cmp	r3, r7
 8023bf6:	460d      	mov	r5, r1
 8023bf8:	d9f4      	bls.n	8023be4 <_printf_i+0x110>
 8023bfa:	2b08      	cmp	r3, #8
 8023bfc:	d10b      	bne.n	8023c16 <_printf_i+0x142>
 8023bfe:	6823      	ldr	r3, [r4, #0]
 8023c00:	07df      	lsls	r7, r3, #31
 8023c02:	d508      	bpl.n	8023c16 <_printf_i+0x142>
 8023c04:	6923      	ldr	r3, [r4, #16]
 8023c06:	6861      	ldr	r1, [r4, #4]
 8023c08:	4299      	cmp	r1, r3
 8023c0a:	bfde      	ittt	le
 8023c0c:	2330      	movle	r3, #48	@ 0x30
 8023c0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023c12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023c16:	1b92      	subs	r2, r2, r6
 8023c18:	6122      	str	r2, [r4, #16]
 8023c1a:	f8cd a000 	str.w	sl, [sp]
 8023c1e:	464b      	mov	r3, r9
 8023c20:	aa03      	add	r2, sp, #12
 8023c22:	4621      	mov	r1, r4
 8023c24:	4640      	mov	r0, r8
 8023c26:	f7ff fee7 	bl	80239f8 <_printf_common>
 8023c2a:	3001      	adds	r0, #1
 8023c2c:	d14a      	bne.n	8023cc4 <_printf_i+0x1f0>
 8023c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8023c32:	b004      	add	sp, #16
 8023c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c38:	6823      	ldr	r3, [r4, #0]
 8023c3a:	f043 0320 	orr.w	r3, r3, #32
 8023c3e:	6023      	str	r3, [r4, #0]
 8023c40:	4832      	ldr	r0, [pc, #200]	@ (8023d0c <_printf_i+0x238>)
 8023c42:	2778      	movs	r7, #120	@ 0x78
 8023c44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023c48:	6823      	ldr	r3, [r4, #0]
 8023c4a:	6831      	ldr	r1, [r6, #0]
 8023c4c:	061f      	lsls	r7, r3, #24
 8023c4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8023c52:	d402      	bmi.n	8023c5a <_printf_i+0x186>
 8023c54:	065f      	lsls	r7, r3, #25
 8023c56:	bf48      	it	mi
 8023c58:	b2ad      	uxthmi	r5, r5
 8023c5a:	6031      	str	r1, [r6, #0]
 8023c5c:	07d9      	lsls	r1, r3, #31
 8023c5e:	bf44      	itt	mi
 8023c60:	f043 0320 	orrmi.w	r3, r3, #32
 8023c64:	6023      	strmi	r3, [r4, #0]
 8023c66:	b11d      	cbz	r5, 8023c70 <_printf_i+0x19c>
 8023c68:	2310      	movs	r3, #16
 8023c6a:	e7ad      	b.n	8023bc8 <_printf_i+0xf4>
 8023c6c:	4826      	ldr	r0, [pc, #152]	@ (8023d08 <_printf_i+0x234>)
 8023c6e:	e7e9      	b.n	8023c44 <_printf_i+0x170>
 8023c70:	6823      	ldr	r3, [r4, #0]
 8023c72:	f023 0320 	bic.w	r3, r3, #32
 8023c76:	6023      	str	r3, [r4, #0]
 8023c78:	e7f6      	b.n	8023c68 <_printf_i+0x194>
 8023c7a:	4616      	mov	r6, r2
 8023c7c:	e7bd      	b.n	8023bfa <_printf_i+0x126>
 8023c7e:	6833      	ldr	r3, [r6, #0]
 8023c80:	6825      	ldr	r5, [r4, #0]
 8023c82:	6961      	ldr	r1, [r4, #20]
 8023c84:	1d18      	adds	r0, r3, #4
 8023c86:	6030      	str	r0, [r6, #0]
 8023c88:	062e      	lsls	r6, r5, #24
 8023c8a:	681b      	ldr	r3, [r3, #0]
 8023c8c:	d501      	bpl.n	8023c92 <_printf_i+0x1be>
 8023c8e:	6019      	str	r1, [r3, #0]
 8023c90:	e002      	b.n	8023c98 <_printf_i+0x1c4>
 8023c92:	0668      	lsls	r0, r5, #25
 8023c94:	d5fb      	bpl.n	8023c8e <_printf_i+0x1ba>
 8023c96:	8019      	strh	r1, [r3, #0]
 8023c98:	2300      	movs	r3, #0
 8023c9a:	6123      	str	r3, [r4, #16]
 8023c9c:	4616      	mov	r6, r2
 8023c9e:	e7bc      	b.n	8023c1a <_printf_i+0x146>
 8023ca0:	6833      	ldr	r3, [r6, #0]
 8023ca2:	1d1a      	adds	r2, r3, #4
 8023ca4:	6032      	str	r2, [r6, #0]
 8023ca6:	681e      	ldr	r6, [r3, #0]
 8023ca8:	6862      	ldr	r2, [r4, #4]
 8023caa:	2100      	movs	r1, #0
 8023cac:	4630      	mov	r0, r6
 8023cae:	f7dc fb17 	bl	80002e0 <memchr>
 8023cb2:	b108      	cbz	r0, 8023cb8 <_printf_i+0x1e4>
 8023cb4:	1b80      	subs	r0, r0, r6
 8023cb6:	6060      	str	r0, [r4, #4]
 8023cb8:	6863      	ldr	r3, [r4, #4]
 8023cba:	6123      	str	r3, [r4, #16]
 8023cbc:	2300      	movs	r3, #0
 8023cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023cc2:	e7aa      	b.n	8023c1a <_printf_i+0x146>
 8023cc4:	6923      	ldr	r3, [r4, #16]
 8023cc6:	4632      	mov	r2, r6
 8023cc8:	4649      	mov	r1, r9
 8023cca:	4640      	mov	r0, r8
 8023ccc:	47d0      	blx	sl
 8023cce:	3001      	adds	r0, #1
 8023cd0:	d0ad      	beq.n	8023c2e <_printf_i+0x15a>
 8023cd2:	6823      	ldr	r3, [r4, #0]
 8023cd4:	079b      	lsls	r3, r3, #30
 8023cd6:	d413      	bmi.n	8023d00 <_printf_i+0x22c>
 8023cd8:	68e0      	ldr	r0, [r4, #12]
 8023cda:	9b03      	ldr	r3, [sp, #12]
 8023cdc:	4298      	cmp	r0, r3
 8023cde:	bfb8      	it	lt
 8023ce0:	4618      	movlt	r0, r3
 8023ce2:	e7a6      	b.n	8023c32 <_printf_i+0x15e>
 8023ce4:	2301      	movs	r3, #1
 8023ce6:	4632      	mov	r2, r6
 8023ce8:	4649      	mov	r1, r9
 8023cea:	4640      	mov	r0, r8
 8023cec:	47d0      	blx	sl
 8023cee:	3001      	adds	r0, #1
 8023cf0:	d09d      	beq.n	8023c2e <_printf_i+0x15a>
 8023cf2:	3501      	adds	r5, #1
 8023cf4:	68e3      	ldr	r3, [r4, #12]
 8023cf6:	9903      	ldr	r1, [sp, #12]
 8023cf8:	1a5b      	subs	r3, r3, r1
 8023cfa:	42ab      	cmp	r3, r5
 8023cfc:	dcf2      	bgt.n	8023ce4 <_printf_i+0x210>
 8023cfe:	e7eb      	b.n	8023cd8 <_printf_i+0x204>
 8023d00:	2500      	movs	r5, #0
 8023d02:	f104 0619 	add.w	r6, r4, #25
 8023d06:	e7f5      	b.n	8023cf4 <_printf_i+0x220>
 8023d08:	08025ec4 	.word	0x08025ec4
 8023d0c:	08025ed5 	.word	0x08025ed5

08023d10 <__sflush_r>:
 8023d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d18:	0716      	lsls	r6, r2, #28
 8023d1a:	4605      	mov	r5, r0
 8023d1c:	460c      	mov	r4, r1
 8023d1e:	d454      	bmi.n	8023dca <__sflush_r+0xba>
 8023d20:	684b      	ldr	r3, [r1, #4]
 8023d22:	2b00      	cmp	r3, #0
 8023d24:	dc02      	bgt.n	8023d2c <__sflush_r+0x1c>
 8023d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	dd48      	ble.n	8023dbe <__sflush_r+0xae>
 8023d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023d2e:	2e00      	cmp	r6, #0
 8023d30:	d045      	beq.n	8023dbe <__sflush_r+0xae>
 8023d32:	2300      	movs	r3, #0
 8023d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023d38:	682f      	ldr	r7, [r5, #0]
 8023d3a:	6a21      	ldr	r1, [r4, #32]
 8023d3c:	602b      	str	r3, [r5, #0]
 8023d3e:	d030      	beq.n	8023da2 <__sflush_r+0x92>
 8023d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023d42:	89a3      	ldrh	r3, [r4, #12]
 8023d44:	0759      	lsls	r1, r3, #29
 8023d46:	d505      	bpl.n	8023d54 <__sflush_r+0x44>
 8023d48:	6863      	ldr	r3, [r4, #4]
 8023d4a:	1ad2      	subs	r2, r2, r3
 8023d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023d4e:	b10b      	cbz	r3, 8023d54 <__sflush_r+0x44>
 8023d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023d52:	1ad2      	subs	r2, r2, r3
 8023d54:	2300      	movs	r3, #0
 8023d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023d58:	6a21      	ldr	r1, [r4, #32]
 8023d5a:	4628      	mov	r0, r5
 8023d5c:	47b0      	blx	r6
 8023d5e:	1c43      	adds	r3, r0, #1
 8023d60:	89a3      	ldrh	r3, [r4, #12]
 8023d62:	d106      	bne.n	8023d72 <__sflush_r+0x62>
 8023d64:	6829      	ldr	r1, [r5, #0]
 8023d66:	291d      	cmp	r1, #29
 8023d68:	d82b      	bhi.n	8023dc2 <__sflush_r+0xb2>
 8023d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8023e14 <__sflush_r+0x104>)
 8023d6c:	40ca      	lsrs	r2, r1
 8023d6e:	07d6      	lsls	r6, r2, #31
 8023d70:	d527      	bpl.n	8023dc2 <__sflush_r+0xb2>
 8023d72:	2200      	movs	r2, #0
 8023d74:	6062      	str	r2, [r4, #4]
 8023d76:	04d9      	lsls	r1, r3, #19
 8023d78:	6922      	ldr	r2, [r4, #16]
 8023d7a:	6022      	str	r2, [r4, #0]
 8023d7c:	d504      	bpl.n	8023d88 <__sflush_r+0x78>
 8023d7e:	1c42      	adds	r2, r0, #1
 8023d80:	d101      	bne.n	8023d86 <__sflush_r+0x76>
 8023d82:	682b      	ldr	r3, [r5, #0]
 8023d84:	b903      	cbnz	r3, 8023d88 <__sflush_r+0x78>
 8023d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8023d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023d8a:	602f      	str	r7, [r5, #0]
 8023d8c:	b1b9      	cbz	r1, 8023dbe <__sflush_r+0xae>
 8023d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023d92:	4299      	cmp	r1, r3
 8023d94:	d002      	beq.n	8023d9c <__sflush_r+0x8c>
 8023d96:	4628      	mov	r0, r5
 8023d98:	f7ff fca2 	bl	80236e0 <_free_r>
 8023d9c:	2300      	movs	r3, #0
 8023d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023da0:	e00d      	b.n	8023dbe <__sflush_r+0xae>
 8023da2:	2301      	movs	r3, #1
 8023da4:	4628      	mov	r0, r5
 8023da6:	47b0      	blx	r6
 8023da8:	4602      	mov	r2, r0
 8023daa:	1c50      	adds	r0, r2, #1
 8023dac:	d1c9      	bne.n	8023d42 <__sflush_r+0x32>
 8023dae:	682b      	ldr	r3, [r5, #0]
 8023db0:	2b00      	cmp	r3, #0
 8023db2:	d0c6      	beq.n	8023d42 <__sflush_r+0x32>
 8023db4:	2b1d      	cmp	r3, #29
 8023db6:	d001      	beq.n	8023dbc <__sflush_r+0xac>
 8023db8:	2b16      	cmp	r3, #22
 8023dba:	d11e      	bne.n	8023dfa <__sflush_r+0xea>
 8023dbc:	602f      	str	r7, [r5, #0]
 8023dbe:	2000      	movs	r0, #0
 8023dc0:	e022      	b.n	8023e08 <__sflush_r+0xf8>
 8023dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023dc6:	b21b      	sxth	r3, r3
 8023dc8:	e01b      	b.n	8023e02 <__sflush_r+0xf2>
 8023dca:	690f      	ldr	r7, [r1, #16]
 8023dcc:	2f00      	cmp	r7, #0
 8023dce:	d0f6      	beq.n	8023dbe <__sflush_r+0xae>
 8023dd0:	0793      	lsls	r3, r2, #30
 8023dd2:	680e      	ldr	r6, [r1, #0]
 8023dd4:	bf08      	it	eq
 8023dd6:	694b      	ldreq	r3, [r1, #20]
 8023dd8:	600f      	str	r7, [r1, #0]
 8023dda:	bf18      	it	ne
 8023ddc:	2300      	movne	r3, #0
 8023dde:	eba6 0807 	sub.w	r8, r6, r7
 8023de2:	608b      	str	r3, [r1, #8]
 8023de4:	f1b8 0f00 	cmp.w	r8, #0
 8023de8:	dde9      	ble.n	8023dbe <__sflush_r+0xae>
 8023dea:	6a21      	ldr	r1, [r4, #32]
 8023dec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023dee:	4643      	mov	r3, r8
 8023df0:	463a      	mov	r2, r7
 8023df2:	4628      	mov	r0, r5
 8023df4:	47b0      	blx	r6
 8023df6:	2800      	cmp	r0, #0
 8023df8:	dc08      	bgt.n	8023e0c <__sflush_r+0xfc>
 8023dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e02:	81a3      	strh	r3, [r4, #12]
 8023e04:	f04f 30ff 	mov.w	r0, #4294967295
 8023e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023e0c:	4407      	add	r7, r0
 8023e0e:	eba8 0800 	sub.w	r8, r8, r0
 8023e12:	e7e7      	b.n	8023de4 <__sflush_r+0xd4>
 8023e14:	20400001 	.word	0x20400001

08023e18 <_fflush_r>:
 8023e18:	b538      	push	{r3, r4, r5, lr}
 8023e1a:	690b      	ldr	r3, [r1, #16]
 8023e1c:	4605      	mov	r5, r0
 8023e1e:	460c      	mov	r4, r1
 8023e20:	b913      	cbnz	r3, 8023e28 <_fflush_r+0x10>
 8023e22:	2500      	movs	r5, #0
 8023e24:	4628      	mov	r0, r5
 8023e26:	bd38      	pop	{r3, r4, r5, pc}
 8023e28:	b118      	cbz	r0, 8023e32 <_fflush_r+0x1a>
 8023e2a:	6a03      	ldr	r3, [r0, #32]
 8023e2c:	b90b      	cbnz	r3, 8023e32 <_fflush_r+0x1a>
 8023e2e:	f7ff f9eb 	bl	8023208 <__sinit>
 8023e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d0f3      	beq.n	8023e22 <_fflush_r+0xa>
 8023e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023e3c:	07d0      	lsls	r0, r2, #31
 8023e3e:	d404      	bmi.n	8023e4a <_fflush_r+0x32>
 8023e40:	0599      	lsls	r1, r3, #22
 8023e42:	d402      	bmi.n	8023e4a <_fflush_r+0x32>
 8023e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e46:	f7ff fbde 	bl	8023606 <__retarget_lock_acquire_recursive>
 8023e4a:	4628      	mov	r0, r5
 8023e4c:	4621      	mov	r1, r4
 8023e4e:	f7ff ff5f 	bl	8023d10 <__sflush_r>
 8023e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023e54:	07da      	lsls	r2, r3, #31
 8023e56:	4605      	mov	r5, r0
 8023e58:	d4e4      	bmi.n	8023e24 <_fflush_r+0xc>
 8023e5a:	89a3      	ldrh	r3, [r4, #12]
 8023e5c:	059b      	lsls	r3, r3, #22
 8023e5e:	d4e1      	bmi.n	8023e24 <_fflush_r+0xc>
 8023e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023e62:	f7ff fbd1 	bl	8023608 <__retarget_lock_release_recursive>
 8023e66:	e7dd      	b.n	8023e24 <_fflush_r+0xc>

08023e68 <__swhatbuf_r>:
 8023e68:	b570      	push	{r4, r5, r6, lr}
 8023e6a:	460c      	mov	r4, r1
 8023e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e70:	2900      	cmp	r1, #0
 8023e72:	b096      	sub	sp, #88	@ 0x58
 8023e74:	4615      	mov	r5, r2
 8023e76:	461e      	mov	r6, r3
 8023e78:	da0d      	bge.n	8023e96 <__swhatbuf_r+0x2e>
 8023e7a:	89a3      	ldrh	r3, [r4, #12]
 8023e7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023e80:	f04f 0100 	mov.w	r1, #0
 8023e84:	bf14      	ite	ne
 8023e86:	2340      	movne	r3, #64	@ 0x40
 8023e88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023e8c:	2000      	movs	r0, #0
 8023e8e:	6031      	str	r1, [r6, #0]
 8023e90:	602b      	str	r3, [r5, #0]
 8023e92:	b016      	add	sp, #88	@ 0x58
 8023e94:	bd70      	pop	{r4, r5, r6, pc}
 8023e96:	466a      	mov	r2, sp
 8023e98:	f000 f848 	bl	8023f2c <_fstat_r>
 8023e9c:	2800      	cmp	r0, #0
 8023e9e:	dbec      	blt.n	8023e7a <__swhatbuf_r+0x12>
 8023ea0:	9901      	ldr	r1, [sp, #4]
 8023ea2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023ea6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023eaa:	4259      	negs	r1, r3
 8023eac:	4159      	adcs	r1, r3
 8023eae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023eb2:	e7eb      	b.n	8023e8c <__swhatbuf_r+0x24>

08023eb4 <__smakebuf_r>:
 8023eb4:	898b      	ldrh	r3, [r1, #12]
 8023eb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023eb8:	079d      	lsls	r5, r3, #30
 8023eba:	4606      	mov	r6, r0
 8023ebc:	460c      	mov	r4, r1
 8023ebe:	d507      	bpl.n	8023ed0 <__smakebuf_r+0x1c>
 8023ec0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023ec4:	6023      	str	r3, [r4, #0]
 8023ec6:	6123      	str	r3, [r4, #16]
 8023ec8:	2301      	movs	r3, #1
 8023eca:	6163      	str	r3, [r4, #20]
 8023ecc:	b003      	add	sp, #12
 8023ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ed0:	ab01      	add	r3, sp, #4
 8023ed2:	466a      	mov	r2, sp
 8023ed4:	f7ff ffc8 	bl	8023e68 <__swhatbuf_r>
 8023ed8:	9f00      	ldr	r7, [sp, #0]
 8023eda:	4605      	mov	r5, r0
 8023edc:	4639      	mov	r1, r7
 8023ede:	4630      	mov	r0, r6
 8023ee0:	f7ff f86c 	bl	8022fbc <_malloc_r>
 8023ee4:	b948      	cbnz	r0, 8023efa <__smakebuf_r+0x46>
 8023ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023eea:	059a      	lsls	r2, r3, #22
 8023eec:	d4ee      	bmi.n	8023ecc <__smakebuf_r+0x18>
 8023eee:	f023 0303 	bic.w	r3, r3, #3
 8023ef2:	f043 0302 	orr.w	r3, r3, #2
 8023ef6:	81a3      	strh	r3, [r4, #12]
 8023ef8:	e7e2      	b.n	8023ec0 <__smakebuf_r+0xc>
 8023efa:	89a3      	ldrh	r3, [r4, #12]
 8023efc:	6020      	str	r0, [r4, #0]
 8023efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023f02:	81a3      	strh	r3, [r4, #12]
 8023f04:	9b01      	ldr	r3, [sp, #4]
 8023f06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023f0a:	b15b      	cbz	r3, 8023f24 <__smakebuf_r+0x70>
 8023f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023f10:	4630      	mov	r0, r6
 8023f12:	f000 f81d 	bl	8023f50 <_isatty_r>
 8023f16:	b128      	cbz	r0, 8023f24 <__smakebuf_r+0x70>
 8023f18:	89a3      	ldrh	r3, [r4, #12]
 8023f1a:	f023 0303 	bic.w	r3, r3, #3
 8023f1e:	f043 0301 	orr.w	r3, r3, #1
 8023f22:	81a3      	strh	r3, [r4, #12]
 8023f24:	89a3      	ldrh	r3, [r4, #12]
 8023f26:	431d      	orrs	r5, r3
 8023f28:	81a5      	strh	r5, [r4, #12]
 8023f2a:	e7cf      	b.n	8023ecc <__smakebuf_r+0x18>

08023f2c <_fstat_r>:
 8023f2c:	b538      	push	{r3, r4, r5, lr}
 8023f2e:	4d07      	ldr	r5, [pc, #28]	@ (8023f4c <_fstat_r+0x20>)
 8023f30:	2300      	movs	r3, #0
 8023f32:	4604      	mov	r4, r0
 8023f34:	4608      	mov	r0, r1
 8023f36:	4611      	mov	r1, r2
 8023f38:	602b      	str	r3, [r5, #0]
 8023f3a:	f7dd fe64 	bl	8001c06 <_fstat>
 8023f3e:	1c43      	adds	r3, r0, #1
 8023f40:	d102      	bne.n	8023f48 <_fstat_r+0x1c>
 8023f42:	682b      	ldr	r3, [r5, #0]
 8023f44:	b103      	cbz	r3, 8023f48 <_fstat_r+0x1c>
 8023f46:	6023      	str	r3, [r4, #0]
 8023f48:	bd38      	pop	{r3, r4, r5, pc}
 8023f4a:	bf00      	nop
 8023f4c:	24025ef8 	.word	0x24025ef8

08023f50 <_isatty_r>:
 8023f50:	b538      	push	{r3, r4, r5, lr}
 8023f52:	4d06      	ldr	r5, [pc, #24]	@ (8023f6c <_isatty_r+0x1c>)
 8023f54:	2300      	movs	r3, #0
 8023f56:	4604      	mov	r4, r0
 8023f58:	4608      	mov	r0, r1
 8023f5a:	602b      	str	r3, [r5, #0]
 8023f5c:	f7dd fe58 	bl	8001c10 <_isatty>
 8023f60:	1c43      	adds	r3, r0, #1
 8023f62:	d102      	bne.n	8023f6a <_isatty_r+0x1a>
 8023f64:	682b      	ldr	r3, [r5, #0]
 8023f66:	b103      	cbz	r3, 8023f6a <_isatty_r+0x1a>
 8023f68:	6023      	str	r3, [r4, #0]
 8023f6a:	bd38      	pop	{r3, r4, r5, pc}
 8023f6c:	24025ef8 	.word	0x24025ef8

08023f70 <_init>:
 8023f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f72:	bf00      	nop
 8023f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f76:	bc08      	pop	{r3}
 8023f78:	469e      	mov	lr, r3
 8023f7a:	4770      	bx	lr

08023f7c <_fini>:
 8023f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f7e:	bf00      	nop
 8023f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f82:	bc08      	pop	{r3}
 8023f84:	469e      	mov	lr, r3
 8023f86:	4770      	bx	lr
